<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.2.1" created="2013-11-08 09:26" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>jhjguxin</title>
	<link>http://jhjguxin.sinaapp.com</link>
	<description>I&#039;m Francis.J,我是勤奋的蜗牛....</description>
	<pubDate>Fri, 08 Nov 2013 09:26:44 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://jhjguxin.sinaapp.com</wp:base_site_url>
	<wp:base_blog_url>http://jhjguxin.sinaapp.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>jhjguxin</wp:author_login><wp:author_email>864248765@qq.com</wp:author_email><wp:author_display_name><![CDATA[jhjguxin]]></wp:author_display_name><wp:author_first_name><![CDATA[Francis]]></wp:author_first_name><wp:author_last_name><![CDATA[Jiang]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>208</wp:term_id><wp:category_nicename>coderfarmer</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[CoderFarmer]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>207</wp:term_id><wp:category_nicename>db</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[DB]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>14</wp:term_id><wp:category_nicename>django</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[django]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>81</wp:term_id><wp:category_nicename>linux</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[linux]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>196</wp:term_id><wp:category_nicename>live</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[live]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>189</wp:term_id><wp:category_nicename>project-manage</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Project Manage]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>8</wp:term_id><wp:category_nicename>python</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[python]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>25</wp:term_id><wp:category_nicename>rails</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[rails]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>7</wp:term_id><wp:category_nicename>ruby</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ruby]]></wp:cat_name><wp:category_description><![CDATA[Ruby，一种为简单快捷的面向对象编程（面向对象程序设计）而创的脚本语言...]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>26</wp:term_id><wp:category_nicename>ubuntu</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ubuntu]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>29</wp:term_id><wp:category_nicename>web</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[web]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>22</wp:term_id><wp:category_nicename>%e4%b8%93%e4%b8%9a</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[专业]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>268</wp:term_id><wp:category_nicename>%e5%b7%a5%e5%85%b7%e6%8e%a7</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[工具控]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>%e6%9c%aa%e5%88%86%e7%b1%bb</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[未分类]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>10</wp:term_id><wp:category_nicename>%e7%bd%91%e6%96%87</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[网文]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>273</wp:term_id><wp:tag_slug>accessor</wp:tag_slug><wp:tag_name><![CDATA[accessor]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>acer</wp:tag_slug><wp:tag_name><![CDATA[acer]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>54</wp:term_id><wp:tag_slug>active-record</wp:tag_slug><wp:tag_name><![CDATA[active record]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>129</wp:term_id><wp:tag_slug>activerecord</wp:tag_slug><wp:tag_name><![CDATA[ActiveRecord]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>267</wp:term_id><wp:tag_slug>advanced</wp:tag_slug><wp:tag_name><![CDATA[advanced]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>126</wp:term_id><wp:tag_slug>ajax</wp:tag_slug><wp:tag_name><![CDATA[ajax]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>263</wp:term_id><wp:tag_slug>analytics</wp:tag_slug><wp:tag_name><![CDATA[Analytics]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>103</wp:term_id><wp:tag_slug>apache</wp:tag_slug><wp:tag_name><![CDATA[apache]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>apple</wp:tag_slug><wp:tag_name><![CDATA[apple]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>222</wp:term_id><wp:tag_slug>array</wp:tag_slug><wp:tag_name><![CDATA[array]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>115</wp:term_id><wp:tag_slug>asset</wp:tag_slug><wp:tag_name><![CDATA[asset]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>120</wp:term_id><wp:tag_slug>assets</wp:tag_slug><wp:tag_name><![CDATA[assets]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>134</wp:term_id><wp:tag_slug>assignment</wp:tag_slug><wp:tag_name><![CDATA[assignment]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>317</wp:term_id><wp:tag_slug>atomic%ef%bc%8cincrement%ef%bc%8crails</wp:tag_slug><wp:tag_name><![CDATA[Atomic，Increment，Rails]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>239</wp:term_id><wp:tag_slug>beginner</wp:tag_slug><wp:tag_name><![CDATA[beginner]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>blog</wp:tag_slug><wp:tag_name><![CDATA[blog]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>28</wp:term_id><wp:tag_slug>book</wp:tag_slug><wp:tag_name><![CDATA[book]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>225</wp:term_id><wp:tag_slug>boot-repair</wp:tag_slug><wp:tag_name><![CDATA[Boot-Repair]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>76</wp:term_id><wp:tag_slug>breakpoint</wp:tag_slug><wp:tag_name><![CDATA[breakpoint]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>177</wp:term_id><wp:tag_slug>bsd</wp:tag_slug><wp:tag_name><![CDATA[BSD]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>108</wp:term_id><wp:tag_slug>bundle</wp:tag_slug><wp:tag_name><![CDATA[bundle]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>50</wp:term_id><wp:tag_slug>cache</wp:tag_slug><wp:tag_name><![CDATA[cache]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>calendar</wp:tag_slug><wp:tag_name><![CDATA[calendar]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>144</wp:term_id><wp:tag_slug>callbacks</wp:tag_slug><wp:tag_name><![CDATA[Callbacks]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>269</wp:term_id><wp:tag_slug>chrome</wp:tag_slug><wp:tag_name><![CDATA[chrome]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>223</wp:term_id><wp:tag_slug>city</wp:tag_slug><wp:tag_name><![CDATA[city]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>282</wp:term_id><wp:tag_slug>cloud-foundry</wp:tag_slug><wp:tag_name><![CDATA[Cloud Foundry]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>53</wp:term_id><wp:tag_slug>cn</wp:tag_slug><wp:tag_name><![CDATA[CN]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>324</wp:term_id><wp:tag_slug>coder</wp:tag_slug><wp:tag_name><![CDATA[coder]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>213</wp:term_id><wp:tag_slug>collection</wp:tag_slug><wp:tag_name><![CDATA[collection]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>214</wp:term_id><wp:tag_slug>column</wp:tag_slug><wp:tag_name><![CDATA[column]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>174</wp:term_id><wp:tag_slug>command</wp:tag_slug><wp:tag_name><![CDATA[command]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>258</wp:term_id><wp:tag_slug>comments</wp:tag_slug><wp:tag_name><![CDATA[comments]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>211</wp:term_id><wp:tag_slug>common</wp:tag_slug><wp:tag_name><![CDATA[Common]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>274</wp:term_id><wp:tag_slug>concatenation</wp:tag_slug><wp:tag_name><![CDATA[concatenation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>257</wp:term_id><wp:tag_slug>conditional</wp:tag_slug><wp:tag_name><![CDATA[conditional]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>232</wp:term_id><wp:tag_slug>configuring</wp:tag_slug><wp:tag_name><![CDATA[configuring]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>74</wp:term_id><wp:tag_slug>controller</wp:tag_slug><wp:tag_name><![CDATA[controller]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>287</wp:term_id><wp:tag_slug>cookies</wp:tag_slug><wp:tag_name><![CDATA[Cookies]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>193</wp:term_id><wp:tag_slug>countdown</wp:tag_slug><wp:tag_name><![CDATA[Countdown]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>266</wp:term_id><wp:tag_slug>counter</wp:tag_slug><wp:tag_name><![CDATA[counter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>252</wp:term_id><wp:tag_slug>crafting-rails-applications</wp:tag_slug><wp:tag_name><![CDATA[crafting rails applications]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>249</wp:term_id><wp:tag_slug>crud</wp:tag_slug><wp:tag_name><![CDATA[CRUD]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>305</wp:term_id><wp:tag_slug>css</wp:tag_slug><wp:tag_name><![CDATA[css]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>199</wp:term_id><wp:tag_slug>css3</wp:tag_slug><wp:tag_name><![CDATA[CSS3]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>234</wp:term_id><wp:tag_slug>daemons</wp:tag_slug><wp:tag_name><![CDATA[daemons]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>188</wp:term_id><wp:tag_slug>database</wp:tag_slug><wp:tag_name><![CDATA[Database]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>251</wp:term_id><wp:tag_slug>date_select</wp:tag_slug><wp:tag_name><![CDATA[date_select]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>310</wp:term_id><wp:tag_slug>db-2</wp:tag_slug><wp:tag_name><![CDATA[db]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>77</wp:term_id><wp:tag_slug>debug</wp:tag_slug><wp:tag_name><![CDATA[debug]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>221</wp:term_id><wp:tag_slug>delete</wp:tag_slug><wp:tag_name><![CDATA[delete]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>112</wp:term_id><wp:tag_slug>develop</wp:tag_slug><wp:tag_name><![CDATA[develop]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>63</wp:term_id><wp:tag_slug>developer</wp:tag_slug><wp:tag_name><![CDATA[developer]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>100</wp:term_id><wp:tag_slug>devise</wp:tag_slug><wp:tag_name><![CDATA[devise]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>150</wp:term_id><wp:tag_slug>dip</wp:tag_slug><wp:tag_name><![CDATA[dip]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>django</wp:tag_slug><wp:tag_name><![CDATA[django]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>107</wp:term_id><wp:tag_slug>doc</wp:tag_slug><wp:tag_name><![CDATA[doc]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>164</wp:term_id><wp:tag_slug>driver</wp:tag_slug><wp:tag_name><![CDATA[driver]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>148</wp:term_id><wp:tag_slug>dry</wp:tag_slug><wp:tag_name><![CDATA[dry]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>101</wp:term_id><wp:tag_slug>edit</wp:tag_slug><wp:tag_name><![CDATA[edit]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>236</wp:term_id><wp:tag_slug>encode</wp:tag_slug><wp:tag_name><![CDATA[encode]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>engine</wp:tag_slug><wp:tag_name><![CDATA[engine]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>226</wp:term_id><wp:tag_slug>errors</wp:tag_slug><wp:tag_name><![CDATA[errors]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>255</wp:term_id><wp:tag_slug>essentials</wp:tag_slug><wp:tag_name><![CDATA[Essentials]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>264</wp:term_id><wp:tag_slug>events</wp:tag_slug><wp:tag_name><![CDATA[events]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>275</wp:term_id><wp:tag_slug>exception</wp:tag_slug><wp:tag_name><![CDATA[exception]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>253</wp:term_id><wp:tag_slug>exception-handling</wp:tag_slug><wp:tag_name><![CDATA[exception handling]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>114</wp:term_id><wp:tag_slug>exceptions</wp:tag_slug><wp:tag_name><![CDATA[Exceptions]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>328</wp:term_id><wp:tag_slug>experience</wp:tag_slug><wp:tag_name><![CDATA[experience]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>142</wp:term_id><wp:tag_slug>facade</wp:tag_slug><wp:tag_name><![CDATA[Facade]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>138</wp:term_id><wp:tag_slug>factory_girl</wp:tag_slug><wp:tag_name><![CDATA[factory_girl]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>140</wp:term_id><wp:tag_slug>failed</wp:tag_slug><wp:tag_name><![CDATA[failed]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>23</wp:term_id><wp:tag_slug>fast</wp:tag_slug><wp:tag_name><![CDATA[fast]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>271</wp:term_id><wp:tag_slug>fast-company</wp:tag_slug><wp:tag_name><![CDATA[Fast Company]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>70</wp:term_id><wp:tag_slug>file</wp:tag_slug><wp:tag_name><![CDATA[file]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>75</wp:term_id><wp:tag_slug>filter</wp:tag_slug><wp:tag_name><![CDATA[filter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>260</wp:term_id><wp:tag_slug>flash</wp:tag_slug><wp:tag_name><![CDATA[flash]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>72</wp:term_id><wp:tag_slug>form</wp:tag_slug><wp:tag_name><![CDATA[Form]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>321</wp:term_id><wp:tag_slug>frameworks</wp:tag_slug><wp:tag_name><![CDATA[frameworks]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>183</wp:term_id><wp:tag_slug>gedit</wp:tag_slug><wp:tag_name><![CDATA[gedit]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>24</wp:term_id><wp:tag_slug>gem</wp:tag_slug><wp:tag_name><![CDATA[gem]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>96</wp:term_id><wp:tag_slug>git</wp:tag_slug><wp:tag_name><![CDATA[git]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>190</wp:term_id><wp:tag_slug>gitlab</wp:tag_slug><wp:tag_name><![CDATA[gitlab]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>262</wp:term_id><wp:tag_slug>google</wp:tag_slug><wp:tag_name><![CDATA[Google]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>176</wp:term_id><wp:tag_slug>gpl</wp:tag_slug><wp:tag_name><![CDATA[GPL]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>203</wp:term_id><wp:tag_slug>gtd</wp:tag_slug><wp:tag_name><![CDATA[GTD]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>46</wp:term_id><wp:tag_slug>guide</wp:tag_slug><wp:tag_name><![CDATA[guide]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>182</wp:term_id><wp:tag_slug>hashlib</wp:tag_slug><wp:tag_name><![CDATA[hashlib]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>73</wp:term_id><wp:tag_slug>helpers</wp:tag_slug><wp:tag_name><![CDATA[helpers]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>111</wp:term_id><wp:tag_slug>heroku</wp:tag_slug><wp:tag_name><![CDATA[heroku]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>185</wp:term_id><wp:tag_slug>hierarchial</wp:tag_slug><wp:tag_name><![CDATA[Hierarchial]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>308</wp:term_id><wp:tag_slug>hml5</wp:tag_slug><wp:tag_name><![CDATA[hml5]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>44</wp:term_id><wp:tag_slug>html</wp:tag_slug><wp:tag_name><![CDATA[html]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>200</wp:term_id><wp:tag_slug>html5</wp:tag_slug><wp:tag_name><![CDATA[HTML5]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>93</wp:term_id><wp:tag_slug>http</wp:tag_slug><wp:tag_name><![CDATA[http]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>197</wp:term_id><wp:tag_slug>hurry</wp:tag_slug><wp:tag_name><![CDATA[hurry]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>49</wp:term_id><wp:tag_slug>i18n</wp:tag_slug><wp:tag_name><![CDATA[i18n]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>284</wp:term_id><wp:tag_slug>ie</wp:tag_slug><wp:tag_name><![CDATA[IE]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>285</wp:term_id><wp:tag_slug>iframe</wp:tag_slug><wp:tag_name><![CDATA[iframe]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>244</wp:term_id><wp:tag_slug>inheritance</wp:tag_slug><wp:tag_name><![CDATA[inheritance]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>191</wp:term_id><wp:tag_slug>install</wp:tag_slug><wp:tag_name><![CDATA[install]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>56</wp:term_id><wp:tag_slug>interface</wp:tag_slug><wp:tag_name><![CDATA[interface]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>215</wp:term_id><wp:tag_slug>ip</wp:tag_slug><wp:tag_name><![CDATA[ip]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>iphone</wp:tag_slug><wp:tag_name><![CDATA[iphone]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>39</wp:term_id><wp:tag_slug>iphone4s</wp:tag_slug><wp:tag_name><![CDATA[iPhone4s]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>151</wp:term_id><wp:tag_slug>isp</wp:tag_slug><wp:tag_name><![CDATA[isp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>152</wp:term_id><wp:tag_slug>it</wp:tag_slug><wp:tag_name><![CDATA[it]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>292</wp:term_id><wp:tag_slug>iteye</wp:tag_slug><wp:tag_name><![CDATA[iteye]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>43</wp:term_id><wp:tag_slug>javascript</wp:tag_slug><wp:tag_name><![CDATA[javascript]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>97</wp:term_id><wp:tag_slug>jquery</wp:tag_slug><wp:tag_name><![CDATA[jquery]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>283</wp:term_id><wp:tag_slug>jruby-for-rails</wp:tag_slug><wp:tag_name><![CDATA[JRuby for Rails]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>314</wp:term_id><wp:tag_slug>js</wp:tag_slug><wp:tag_name><![CDATA[js]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>92</wp:term_id><wp:tag_slug>json</wp:tag_slug><wp:tag_name><![CDATA[json]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>168</wp:term_id><wp:tag_slug>json-rendering</wp:tag_slug><wp:tag_name><![CDATA[JSON Rendering]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>59</wp:term_id><wp:tag_slug>layouts</wp:tag_slug><wp:tag_name><![CDATA[layouts]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>323</wp:term_id><wp:tag_slug>leak</wp:tag_slug><wp:tag_name><![CDATA[leak]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>316</wp:term_id><wp:tag_slug>leaker</wp:tag_slug><wp:tag_name><![CDATA[leaker]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>98</wp:term_id><wp:tag_slug>learning</wp:tag_slug><wp:tag_name><![CDATA[learning]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>180</wp:term_id><wp:tag_slug>lgpl</wp:tag_slug><wp:tag_name><![CDATA[LGPL]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>304</wp:term_id><wp:tag_slug>line</wp:tag_slug><wp:tag_name><![CDATA[line]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>117</wp:term_id><wp:tag_slug>linecache19</wp:tag_slug><wp:tag_name><![CDATA[linecache19]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>81</wp:term_id><wp:tag_slug>linux</wp:tag_slug><wp:tag_name><![CDATA[linux]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>229</wp:term_id><wp:tag_slug>logical</wp:tag_slug><wp:tag_name><![CDATA[logical]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>219</wp:term_id><wp:tag_slug>logout</wp:tag_slug><wp:tag_name><![CDATA[logout]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>233</wp:term_id><wp:tag_slug>logs</wp:tag_slug><wp:tag_name><![CDATA[logs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>125</wp:term_id><wp:tag_slug>loop</wp:tag_slug><wp:tag_name><![CDATA[loop]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>228</wp:term_id><wp:tag_slug>lvm</wp:tag_slug><wp:tag_name><![CDATA[lvm]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>57</wp:term_id><wp:tag_slug>mac</wp:tag_slug><wp:tag_name><![CDATA[mac]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>238</wp:term_id><wp:tag_slug>mail</wp:tag_slug><wp:tag_name><![CDATA[mail]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>209</wp:term_id><wp:tag_slug>manifesto%ef%bc%8c501%e7%a8%8b%e5%ba%8f%e5%91%98%e5%ae%a3%e8%a8%80</wp:tag_slug><wp:tag_name><![CDATA[Manifesto，501程序员宣言]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>47</wp:term_id><wp:tag_slug>markdown</wp:tag_slug><wp:tag_name><![CDATA[markdown]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>133</wp:term_id><wp:tag_slug>mass</wp:tag_slug><wp:tag_name><![CDATA[mass]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>181</wp:term_id><wp:tag_slug>md5</wp:tag_slug><wp:tag_name><![CDATA[md5]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>315</wp:term_id><wp:tag_slug>memory</wp:tag_slug><wp:tag_name><![CDATA[memory]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>261</wp:term_id><wp:tag_slug>message</wp:tag_slug><wp:tag_name><![CDATA[message]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>227</wp:term_id><wp:tag_slug>messages</wp:tag_slug><wp:tag_name><![CDATA[messages]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>218</wp:term_id><wp:tag_slug>migrate</wp:tag_slug><wp:tag_name><![CDATA[migrate]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>212</wp:term_id><wp:tag_slug>mistakes</wp:tag_slug><wp:tag_name><![CDATA[Mistakes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>178</wp:term_id><wp:tag_slug>mit</wp:tag_slug><wp:tag_name><![CDATA[MIT]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>143</wp:term_id><wp:tag_slug>model</wp:tag_slug><wp:tag_name><![CDATA[Model]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>296</wp:term_id><wp:tag_slug>mongo</wp:tag_slug><wp:tag_name><![CDATA[mongo]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>250</wp:term_id><wp:tag_slug>mongodb</wp:tag_slug><wp:tag_name><![CDATA[MongoDB]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>300</wp:term_id><wp:tag_slug>mongodump</wp:tag_slug><wp:tag_name><![CDATA[mongodump]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>301</wp:term_id><wp:tag_slug>mongorestore</wp:tag_slug><wp:tag_name><![CDATA[mongorestore]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>172</wp:term_id><wp:tag_slug>mountable</wp:tag_slug><wp:tag_name><![CDATA[mountable]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>179</wp:term_id><wp:tag_slug>mozilla</wp:tag_slug><wp:tag_name><![CDATA[Mozilla]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>256</wp:term_id><wp:tag_slug>mvctools</wp:tag_slug><wp:tag_name><![CDATA[MVCTools]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>235</wp:term_id><wp:tag_slug>mysql</wp:tag_slug><wp:tag_name><![CDATA[mysql]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>265</wp:term_id><wp:tag_slug>names</wp:tag_slug><wp:tag_name><![CDATA[Names]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>165</wp:term_id><wp:tag_slug>ndisgtk</wp:tag_slug><wp:tag_name><![CDATA[ndisgtk]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>246</wp:term_id><wp:tag_slug>nested</wp:tag_slug><wp:tag_name><![CDATA[nested]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>51</wp:term_id><wp:tag_slug>nginx</wp:tag_slug><wp:tag_name><![CDATA[nginx]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>62</wp:term_id><wp:tag_slug>nodes</wp:tag_slug><wp:tag_name><![CDATA[nodes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>297</wp:term_id><wp:tag_slug>nosql</wp:tag_slug><wp:tag_name><![CDATA[nosql]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>85</wp:term_id><wp:tag_slug>notes</wp:tag_slug><wp:tag_name><![CDATA[notes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>291</wp:term_id><wp:tag_slug>oauth2</wp:tag_slug><wp:tag_name><![CDATA[oauth2]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>166</wp:term_id><wp:tag_slug>object</wp:tag_slug><wp:tag_name><![CDATA[Object]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>149</wp:term_id><wp:tag_slug>ocp</wp:tag_slug><wp:tag_name><![CDATA[ocp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>302</wp:term_id><wp:tag_slug>octopress</wp:tag_slug><wp:tag_name><![CDATA[Octopress]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>67</wp:term_id><wp:tag_slug>oem</wp:tag_slug><wp:tag_name><![CDATA[oem]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>146</wp:term_id><wp:tag_slug>oo%e8%ae%be%e8%ae%a1%e5%8e%9f%e5%88%99</wp:tag_slug><wp:tag_name><![CDATA[oo设计原则]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>293</wp:term_id><wp:tag_slug>opensources</wp:tag_slug><wp:tag_name><![CDATA[opensources]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>110</wp:term_id><wp:tag_slug>openssl</wp:tag_slug><wp:tag_name><![CDATA[openssl]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>159</wp:term_id><wp:tag_slug>optimism</wp:tag_slug><wp:tag_name><![CDATA[optimism]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>286</wp:term_id><wp:tag_slug>p3p</wp:tag_slug><wp:tag_name><![CDATA[P3P]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>66</wp:term_id><wp:tag_slug>pagination</wp:tag_slug><wp:tag_name><![CDATA[pagination]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>104</wp:term_id><wp:tag_slug>passenger</wp:tag_slug><wp:tag_name><![CDATA[passenger]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>102</wp:term_id><wp:tag_slug>password</wp:tag_slug><wp:tag_name><![CDATA[password]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>327</wp:term_id><wp:tag_slug>performace</wp:tag_slug><wp:tag_name><![CDATA[performace]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>276</wp:term_id><wp:tag_slug>performance</wp:tag_slug><wp:tag_name><![CDATA[performance]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>105</wp:term_id><wp:tag_slug>phusion</wp:tag_slug><wp:tag_name><![CDATA[phusion]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>248</wp:term_id><wp:tag_slug>pipline</wp:tag_slug><wp:tag_name><![CDATA[pipline]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>118</wp:term_id><wp:tag_slug>port</wp:tag_slug><wp:tag_name><![CDATA[port]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>123</wp:term_id><wp:tag_slug>practices</wp:tag_slug><wp:tag_name><![CDATA[practices]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>205</wp:term_id><wp:tag_slug>practices%ef%bc%8cdry</wp:tag_slug><wp:tag_name><![CDATA[Practices，DRY]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>119</wp:term_id><wp:tag_slug>precompiled</wp:tag_slug><wp:tag_name><![CDATA[precompiled]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>python</wp:tag_slug><wp:tag_name><![CDATA[python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>65</wp:term_id><wp:tag_slug>pythonbrew</wp:tag_slug><wp:tag_name><![CDATA[Pythonbrew]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>216</wp:term_id><wp:tag_slug>qqwry-dat</wp:tag_slug><wp:tag_name><![CDATA[qqwry.dat]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>55</wp:term_id><wp:tag_slug>query</wp:tag_slug><wp:tag_name><![CDATA[query]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>question</wp:tag_slug><wp:tag_name><![CDATA[question]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>rails</wp:tag_slug><wp:tag_name><![CDATA[rails]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>254</wp:term_id><wp:tag_slug>rails-3-2</wp:tag_slug><wp:tag_name><![CDATA[rails 3.2]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>295</wp:term_id><wp:tag_slug>rails-4-0</wp:tag_slug><wp:tag_name><![CDATA[Rails 4.0]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>281</wp:term_id><wp:tag_slug>rails-ruby</wp:tag_slug><wp:tag_name><![CDATA[rails.ruby]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>116</wp:term_id><wp:tag_slug>rake</wp:tag_slug><wp:tag_name><![CDATA[rake]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>277</wp:term_id><wp:tag_slug>reader</wp:tag_slug><wp:tag_name><![CDATA[reader]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>187</wp:term_id><wp:tag_slug>relational</wp:tag_slug><wp:tag_name><![CDATA[Relational]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>167</wp:term_id><wp:tag_slug>relationships</wp:tag_slug><wp:tag_name><![CDATA[Relationships]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>99</wp:term_id><wp:tag_slug>release</wp:tag_slug><wp:tag_name><![CDATA[release]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>60</wp:term_id><wp:tag_slug>rendering</wp:tag_slug><wp:tag_name><![CDATA[rendering]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>309</wp:term_id><wp:tag_slug>repair</wp:tag_slug><wp:tag_name><![CDATA[repair]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>245</wp:term_id><wp:tag_slug>requestid</wp:tag_slug><wp:tag_name><![CDATA[requestId]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>158</wp:term_id><wp:tag_slug>resilience</wp:tag_slug><wp:tag_name><![CDATA[resilience]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>247</wp:term_id><wp:tag_slug>resources</wp:tag_slug><wp:tag_name><![CDATA[resources]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>320</wp:term_id><wp:tag_slug>responsive</wp:tag_slug><wp:tag_name><![CDATA[responsive]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>237</wp:term_id><wp:tag_slug>resque</wp:tag_slug><wp:tag_name><![CDATA[resque]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>231</wp:term_id><wp:tag_slug>ror</wp:tag_slug><wp:tag_name><![CDATA[ror]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>94</wp:term_id><wp:tag_slug>route</wp:tag_slug><wp:tag_name><![CDATA[route]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>121</wp:term_id><wp:tag_slug>rspec</wp:tag_slug><wp:tag_name><![CDATA[RSpec]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>7</wp:term_id><wp:tag_slug>ruby</wp:tag_slug><wp:tag_name><![CDATA[ruby]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>141</wp:term_id><wp:tag_slug>ruby-china</wp:tag_slug><wp:tag_name><![CDATA[ruby-china]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>153</wp:term_id><wp:tag_slug>ruby%ef%bc%8c%e5%8f%98%e9%87%8f</wp:tag_slug><wp:tag_name><![CDATA[ruby，变量]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>109</wp:term_id><wp:tag_slug>rvm</wp:tag_slug><wp:tag_name><![CDATA[rvm]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>294</wp:term_id><wp:tag_slug>scopes</wp:tag_slug><wp:tag_name><![CDATA[Scopes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>160</wp:term_id><wp:tag_slug>self-faith</wp:tag_slug><wp:tag_name><![CDATA[self-faith]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>161</wp:term_id><wp:tag_slug>sence-meaning</wp:tag_slug><wp:tag_name><![CDATA[sence-meaning]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>106</wp:term_id><wp:tag_slug>server</wp:tag_slug><wp:tag_name><![CDATA[server]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>288</wp:term_id><wp:tag_slug>session</wp:tag_slug><wp:tag_name><![CDATA[Session]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>192</wp:term_id><wp:tag_slug>setting</wp:tag_slug><wp:tag_name><![CDATA[setting]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>78</wp:term_id><wp:tag_slug>shell</wp:tag_slug><wp:tag_name><![CDATA[shell]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>58</wp:term_id><wp:tag_slug>shortcuts</wp:tag_slug><wp:tag_name><![CDATA[shortcuts]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>270</wp:term_id><wp:tag_slug>shurtcuts</wp:tag_slug><wp:tag_name><![CDATA[shurtcuts]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>220</wp:term_id><wp:tag_slug>signout</wp:tag_slug><wp:tag_name><![CDATA[signout]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>224</wp:term_id><wp:tag_slug>sina</wp:tag_slug><wp:tag_name><![CDATA[sina]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>242</wp:term_id><wp:tag_slug>single</wp:tag_slug><wp:tag_name><![CDATA[single]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug>siri</wp:tag_slug><wp:tag_name><![CDATA[siri]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>91</wp:term_id><wp:tag_slug>skills</wp:tag_slug><wp:tag_name><![CDATA[skills]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>272</wp:term_id><wp:tag_slug>slow-one</wp:tag_slug><wp:tag_name><![CDATA[slow one]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>smart</wp:tag_slug><wp:tag_name><![CDATA[smart]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>162</wp:term_id><wp:tag_slug>social-behavior</wp:tag_slug><wp:tag_name><![CDATA[social behavior]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>68</wp:term_id><wp:tag_slug>sp1</wp:tag_slug><wp:tag_name><![CDATA[sp1]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>210</wp:term_id><wp:tag_slug>speed</wp:tag_slug><wp:tag_name><![CDATA[speed]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>259</wp:term_id><wp:tag_slug>spine-js</wp:tag_slug><wp:tag_name><![CDATA[Spine.JS]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>217</wp:term_id><wp:tag_slug>sql</wp:tag_slug><wp:tag_name><![CDATA[sql]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>147</wp:term_id><wp:tag_slug>srp</wp:tag_slug><wp:tag_name><![CDATA[srp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>89</wp:term_id><wp:tag_slug>ssh</wp:tag_slug><wp:tag_name><![CDATA[SSH]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>290</wp:term_id><wp:tag_slug>sso</wp:tag_slug><wp:tag_name><![CDATA[sso]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>206</wp:term_id><wp:tag_slug>starting</wp:tag_slug><wp:tag_name><![CDATA[Starting]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>326</wp:term_id><wp:tag_slug>status</wp:tag_slug><wp:tag_name><![CDATA[status]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>184</wp:term_id><wp:tag_slug>storing</wp:tag_slug><wp:tag_name><![CDATA[Storing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>278</wp:term_id><wp:tag_slug>string</wp:tag_slug><wp:tag_name><![CDATA[string]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>306</wp:term_id><wp:tag_slug>structural</wp:tag_slug><wp:tag_name><![CDATA[structural]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>156</wp:term_id><wp:tag_slug>style</wp:tag_slug><wp:tag_name><![CDATA[style]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>289</wp:term_id><wp:tag_slug>subdomains</wp:tag_slug><wp:tag_name><![CDATA[Subdomains]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>195</wp:term_id><wp:tag_slug>submodule</wp:tag_slug><wp:tag_name><![CDATA[Submodule]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>113</wp:term_id><wp:tag_slug>sunspot</wp:tag_slug><wp:tag_name><![CDATA[sunspot]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>173</wp:term_id><wp:tag_slug>svn</wp:tag_slug><wp:tag_name><![CDATA[svn]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>48</wp:term_id><wp:tag_slug>syntax</wp:tag_slug><wp:tag_name><![CDATA[syntax]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>243</wp:term_id><wp:tag_slug>table</wp:tag_slug><wp:tag_name><![CDATA[table]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>303</wp:term_id><wp:tag_slug>tagcloud</wp:tag_slug><wp:tag_name><![CDATA[tagcloud]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>128</wp:term_id><wp:tag_slug>tagging</wp:tag_slug><wp:tag_name><![CDATA[tagging]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>37</wp:term_id><wp:tag_slug>tagm</wp:tag_slug><wp:tag_name><![CDATA[tagm]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>307</wp:term_id><wp:tag_slug>tags</wp:tag_slug><wp:tag_name><![CDATA[tags]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>122</wp:term_id><wp:tag_slug>tdd</wp:tag_slug><wp:tag_name><![CDATA[TDD]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>38</wp:term_id><wp:tag_slug>templates</wp:tag_slug><wp:tag_name><![CDATA[templates]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>3</wp:term_id><wp:tag_slug>test</wp:tag_slug><wp:tag_name><![CDATA[test]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>240</wp:term_id><wp:tag_slug>thing</wp:tag_slug><wp:tag_name><![CDATA[thing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>124</wp:term_id><wp:tag_slug>tips</wp:tag_slug><wp:tag_name><![CDATA[tips]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>137</wp:term_id><wp:tag_slug>tomdoc</wp:tag_slug><wp:tag_name><![CDATA[tomdoc]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>154</wp:term_id><wp:tag_slug>transation</wp:tag_slug><wp:tag_name><![CDATA[transation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>45</wp:term_id><wp:tag_slug>translate</wp:tag_slug><wp:tag_name><![CDATA[translate]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>169</wp:term_id><wp:tag_slug>travis-ci</wp:tag_slug><wp:tag_name><![CDATA[travis-ci]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>136</wp:term_id><wp:tag_slug>tutorial</wp:tag_slug><wp:tag_name><![CDATA[tutorial]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>ubuntu</wp:tag_slug><wp:tag_name><![CDATA[ubuntu]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug>ubuntu-11-10</wp:tag_slug><wp:tag_name><![CDATA[ubuntu 11.10]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>318</wp:term_id><wp:tag_slug>update_counters</wp:tag_slug><wp:tag_name><![CDATA[update_counters]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>71</wp:term_id><wp:tag_slug>upload</wp:tag_slug><wp:tag_name><![CDATA[upload]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>80</wp:term_id><wp:tag_slug>usr</wp:tag_slug><wp:tag_name><![CDATA[usr]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>325</wp:term_id><wp:tag_slug>vagrant</wp:tag_slug><wp:tag_name><![CDATA[vagrant]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>139</wp:term_id><wp:tag_slug>validation</wp:tag_slug><wp:tag_name><![CDATA[Validation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>279</wp:term_id><wp:tag_slug>variable</wp:tag_slug><wp:tag_name><![CDATA[variable]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>95</wp:term_id><wp:tag_slug>version</wp:tag_slug><wp:tag_name><![CDATA[version]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>61</wp:term_id><wp:tag_slug>view</wp:tag_slug><wp:tag_name><![CDATA[view]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>79</wp:term_id><wp:tag_slug>vim</wp:tag_slug><wp:tag_name><![CDATA[vim]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>64</wp:term_id><wp:tag_slug>virtualenv</wp:tag_slug><wp:tag_name><![CDATA[Virtualenv]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>230</wp:term_id><wp:tag_slug>volume</wp:tag_slug><wp:tag_name><![CDATA[volume]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>135</wp:term_id><wp:tag_slug>vulnerability</wp:tag_slug><wp:tag_name><![CDATA[vulnerability]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug>web</wp:tag_slug><wp:tag_name><![CDATA[web]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug>website-manage</wp:tag_slug><wp:tag_name><![CDATA[website-manage]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>163</wp:term_id><wp:tag_slug>wifi</wp:tag_slug><wp:tag_name><![CDATA[wifi]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>204</wp:term_id><wp:tag_slug>wiki</wp:tag_slug><wp:tag_name><![CDATA[Wiki]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>69</wp:term_id><wp:tag_slug>win7</wp:tag_slug><wp:tag_name><![CDATA[win7]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>127</wp:term_id><wp:tag_slug>win8</wp:tag_slug><wp:tag_name><![CDATA[win8]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>171</wp:term_id><wp:tag_slug>windows</wp:tag_slug><wp:tag_name><![CDATA[windows]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>280</wp:term_id><wp:tag_slug>writer</wp:tag_slug><wp:tag_name><![CDATA[writer]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>145</wp:term_id><wp:tag_slug>xdite</wp:tag_slug><wp:tag_name><![CDATA[xdite]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>157</wp:term_id><wp:tag_slug>zh-cn</wp:tag_slug><wp:tag_name><![CDATA[zh-cn]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>155</wp:term_id><wp:tag_slug>%e4%b8%9a%e5%8a%a1%ef%bc%8c%e5%a4%84%e7%90%86</wp:tag_slug><wp:tag_name><![CDATA[业务，处理]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>198</wp:term_id><wp:tag_slug>%e4%b8%ad%e6%96%87</wp:tag_slug><wp:tag_name><![CDATA[中文]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>%e4%bb%87%e5%af%8c</wp:tag_slug><wp:tag_name><![CDATA[仇富]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>313</wp:term_id><wp:tag_slug>%e4%bc%98%e5%8c%96</wp:tag_slug><wp:tag_name><![CDATA[优化]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>194</wp:term_id><wp:tag_slug>%e5%80%92%e8%ae%a1%e6%97%b6</wp:tag_slug><wp:tag_name><![CDATA[倒计时]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>40</wp:term_id><wp:tag_slug>%e5%86%85%e5%9c%b0</wp:tag_slug><wp:tag_name><![CDATA[内地]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>186</wp:term_id><wp:tag_slug>%e5%88%86%e5%b1%82</wp:tag_slug><wp:tag_name><![CDATA[分层]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>241</wp:term_id><wp:tag_slug>%e5%8d%95%e8%a1%a8%e7%bb%a7%e6%89%bf</wp:tag_slug><wp:tag_name><![CDATA[单表继承]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>201</wp:term_id><wp:tag_slug>%e5%8e%8b%e5%8a%9b%e6%b5%8b%e8%af%95</wp:tag_slug><wp:tag_name><![CDATA[压力测试]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>88</wp:term_id><wp:tag_slug>%e5%8e%9f%e5%88%99</wp:tag_slug><wp:tag_name><![CDATA[原则]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug>%e5%9f%ba%e7%a1%80</wp:tag_slug><wp:tag_name><![CDATA[基础]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>298</wp:term_id><wp:tag_slug>%e5%a4%87%e4%bb%bd</wp:tag_slug><wp:tag_name><![CDATA[备份]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>82</wp:term_id><wp:tag_slug>%e5%a4%a7%e5%9e%8b</wp:tag_slug><wp:tag_name><![CDATA[大型]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>130</wp:term_id><wp:tag_slug>%e5%ae%89%e5%85%a8</wp:tag_slug><wp:tag_name><![CDATA[安全]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>202</wp:term_id><wp:tag_slug>%e5%b7%a5%e5%85%b7</wp:tag_slug><wp:tag_name><![CDATA[工具]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>175</wp:term_id><wp:tag_slug>%e5%bc%80%e6%ba%90%e8%ae%b8%e5%8f%af%e5%8d%8f%e8%ae%ae</wp:tag_slug><wp:tag_name><![CDATA[开源许可协议]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>312</wp:term_id><wp:tag_slug>%e6%80%a7%e8%83%bd</wp:tag_slug><wp:tag_name><![CDATA[性能]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>299</wp:term_id><wp:tag_slug>%e6%81%a2%e5%a4%8d</wp:tag_slug><wp:tag_name><![CDATA[恢复]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>90</wp:term_id><wp:tag_slug>%e6%8a%80%e5%b7%a7</wp:tag_slug><wp:tag_name><![CDATA[技巧]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>170</wp:term_id><wp:tag_slug>%e6%8c%81%e7%bb%ad%e9%9b%86%e6%88%90%e6%b5%8b%e8%af%95</wp:tag_slug><wp:tag_name><![CDATA[持续集成测试]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug>%e6%8c%87%e5%8d%97</wp:tag_slug><wp:tag_name><![CDATA[指南]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>311</wp:term_id><wp:tag_slug>%e6%95%b0%e6%8d%ae%e5%ba%93</wp:tag_slug><wp:tag_name><![CDATA[数据库]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>42</wp:term_id><wp:tag_slug>%e6%9e%9c%e7%b2%89</wp:tag_slug><wp:tag_name><![CDATA[果粉]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>84</wp:term_id><wp:tag_slug>%e6%9e%b6%e6%9e%84</wp:tag_slug><wp:tag_name><![CDATA[架构]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>319</wp:term_id><wp:tag_slug>%e6%b5%8b%e8%af%95</wp:tag_slug><wp:tag_name><![CDATA[测试]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>131</wp:term_id><wp:tag_slug>%e6%bc%8f%e6%b4%9e</wp:tag_slug><wp:tag_name><![CDATA[漏洞]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug>%e7%86%ac%e5%a4%9c</wp:tag_slug><wp:tag_name><![CDATA[熬夜]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>%e7%a0%81%e5%86%9c</wp:tag_slug><wp:tag_name><![CDATA[码农]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>132</wp:term_id><wp:tag_slug>%e7%a0%b4%e8%a7%a3</wp:tag_slug><wp:tag_name><![CDATA[破解]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>86</wp:term_id><wp:tag_slug>%e7%a8%8b%e5%ba%8f%e5%91%98</wp:tag_slug><wp:tag_name><![CDATA[程序员]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug>%e7%a9%b7%e4%ba%ba</wp:tag_slug><wp:tag_name><![CDATA[穷人]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug>%e7%bb%8f%e9%aa%8c</wp:tag_slug><wp:tag_name><![CDATA[经验]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>322</wp:term_id><wp:tag_slug>%e7%bc%93%e5%ad%98</wp:tag_slug><wp:tag_name><![CDATA[缓存]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>87</wp:term_id><wp:tag_slug>%e7%bc%96%e7%a8%8b</wp:tag_slug><wp:tag_name><![CDATA[编程]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>83</wp:term_id><wp:tag_slug>%e7%bd%91%e7%ab%99</wp:tag_slug><wp:tag_name><![CDATA[网站]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>%e8%af%ad%e6%b3%95</wp:tag_slug><wp:tag_name><![CDATA[语法]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>41</wp:term_id><wp:tag_slug>%e9%bb%84%e7%89%9b</wp:tag_slug><wp:tag_name><![CDATA[黄牛]]></wp:tag_name></wp:tag>

	<generator>http://wordpress.org/?v=3.2.1</generator>

	<item>
		<title>About Me</title>
		<link></link>
		<pubDate>Thu, 20 Oct 2011 04:45:48 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[<h1 style="text-align: center;">Sichuan Agricultural Uniersity</h1>
<h1 style="text-align: center;">CV graduates</h1>
<h1 style="text-align: center;">Personal Recommendation of 2007's Graduation</h1>
<ul>
	<li style="text-align: left;"><strong>Name</strong>..........Haijun jiang</li>
	<li style="text-align: left;"><strong>Degree</strong>........Bachelor</li>
	<li style="text-align: left;"><strong>Graduated</strong>.....Sichuan Agricultural University</li>
	<li style="text-align: left;"><strong>Professional</strong>..Information and Computing Sciences</li>
</ul>

<hr />

<h3>Personal Details:</h3>
Gender:Male
<strong>Place of Born:</strong>Suining City in Sichuan Province....................... <strong>Nationality:</strong>Han
<strong>Date of Born :</strong>1987-11-05 ......................................................... <strong>Height:</strong>172cm
<strong>Feature of Politics:</strong>Youth League ............................................ <strong>Status of Health:</strong>Health
<strong>Educational system:</strong>Full-time and At One's Own Expenses..... <strong>Degree:</strong>Bachelor
<strong>Foreign Language:</strong>English ....................................................... <strong>Computers Skills:</strong>killful

&nbsp;

&nbsp;
<h3>Contact Me:</h3>
<strong>Mobile phone :</strong>13547486012 .............................. <strong>Office-Phone:</strong> --
<strong>E-mail :</strong>8642484765@qq.com .............................. <strong>Zip:</strong> --
<strong>QQ :</strong>864248765&amp;nbsp 
<h3>Personal Intent:</h3>
<strong>For City1 :</strong>Chengdu ........................................................... <strong>For Post1:</strong>Systems / network management and maintenance
<strong>For City2 :</strong>sichuan ............................................................. <strong>For Post2:</strong>Sales Assistant / clerk
<strong>For City3 :</strong>China ................................................................ <strong>For Post3:</strong>Transport management / scheduling
<strong>Salary :</strong>Interview
<h3>Social Work Experience:</h3>
<ul>
	<li>University for four years to take advantage of winter and summer vacations, I work in the special star chain a total of six months.</li>
	<li>2008, I joined the "growing" social practice in order to promote "School Boy repeater" ,in schools</li>
	<li>2009, I joined the team of social practice, we conducted a survey of social security about Ya'an the surrounding area.</li>
</ul>
<h3>Skills and Strong Suits:</h3>
<ul>
	<li>I have some experience in sales team</li>
	<li>I'm good at computer hardware and software aspects of maintenance, particularly on the windows operating system fixes common problems , I can skillfully use the office of office software</li>
	<li>Has a solid mathematical foundation of information science and computer science and basic knowledge of the basic theory</li>
	<li>Familiar with computer (including the common language, tools and some special software), with the basic algorithm analysis, design ability and programming ability</li>
	<li>To understand an application domain, can apply the theories, methods, and skills to solve some of the research or production of the actual subject (that is, mathematical modeling, mathematical model, the use of computers to solve real problems in society)</li>
	<li>To master the literature search, data query of the basic method, with some scientific research and software development capabilities.</li>
</ul>
<h3>Self-appraise:</h3>
<ul>
	<li>I am cheerful, generous, quick mind, quick reaction, flexibility in handling emergencies. I work of practical, serious, and very work and team spirit, I am outgoing, willing to communicate with people, so I make a lot of friends, with good communication skills, adaptability and skilled, confident of the work well done.</li>
	<li>As a beginner, I have an excellent ability to learn and willing to learn, innovation, and constantly strive for excellence;As a participant, I have an honest and credible character, full of team spirit;As a leader, I have able to work, and decisive style, good communication and interpersonal skills. I have rich experience of part-time; have a strong endurance, willpower, and hard-working quality. I am serious and responsible work, proactive personality, good dedication, the courage to face the difficulties and challenges.</li>
</ul>
<h3>Interests and Loves:</h3>
<ol>
	<li>I am on the mathematical modeling has a strong interest in, and I actively participate in relevant training and knowledge of the corresponding race</li>
	<li>I like the routine maintenance of personal computers, can solve the common system failures, knowledge of system installation and restore the relevant steps</li>
	<li>I love the use of optimization software crack, I am a software enthusiast</li>
	<li>On the development of web sites I have a lot of interest, I have a professional utility software technology (practical teaching) as a leader in the use of related resources to complete the on-line b / s on-line examination system, and I can design and production of general web.</li>
</ol>
<h3>Abount My link:</h3>
<ul>
	<li><a href="http://174.127.70.248/">My vps</a></li>
	<li><a href="https://github.com/jhjguxin/">My Github</a></li>
	<li><a href="http://hi.baidu.com/jhjguxin/ihome/ihomefeed">My Baidu blog</a></li>
	<li><a href="http://passport.baidu.com/?business&amp;aid=6&amp;un=jhjguxin#7">My Baidu wenku</a></li>
	<li><a href="http://www.pc120120.com/?u=3875">My PC BBs</a></li>
	<li><a href="http://forum.ubuntu.org.cn/">My Ubuntu BBs</a></li>
	<li><a href="http://bbs.kafan.cn/">My Ka Fan BBs</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2011-10-20 04:45:48</wp:post_date>
		<wp:post_date_gmt>2011-10-20 04:45:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>about-me</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>为什么印度的穷人不仇富？</title>
		<link></link>
		<pubDate>Wed, 26 Oct 2011 10:01:07 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=5</guid>
		<description></description>
		<content:encoded><![CDATA[<strong><img src="http://image.club.china.com/twhb/1011/2011/10/24/1319391465914_1863.jpg" alt="" /></strong>-----从而产生为什么我们社会的穷人会仇富的感慨！

文/汪华斌

今天陪同一位老师到学校有事，碰见一位印度研究生；以前只知道日本人刻苦，谁知这印度研究生也叫我见识了什么叫刻苦。我原以为这是一位印度富贵人家的后代，谁知人家竟然就是个贫穷人家的孩子；这有点如同我们社会上个世纪八十年代到美国留学，贫穷人家的孩子多的是；正因为如此，所以当时美国的洗盘子等活全部被中国留学生包了；因为这留学生还想赚钱给家里的父母亲。这印度留学生就是这样的状况，所以我才说见识了印度人的刻苦。后来这位老师告诉我，如今印度人成功之路主要就是刻苦；所以在世界各地见到成功的印度人都是刻苦的。由于我就喜欢刻苦的人，所以也就攀谈了起来；我主要是想知道为什么同样是两极分化的印度，社会却是那么和谐；难道印度穷人不仇富吗？

从这位留学生这里我知道了，印度全国大概有6～7亿穷人；其中有2.5亿人生活在最低贫困线以下。按照印度政府的标准，每天收入不足10个卢比者（约2元人民币）；即是处在贫困线以下的穷人。正因为如此，所以在印度见到的穷人比比皆是；而且政府也不回避贫民窟等客观事实。所以在印度见到睡在大街上的穷人不希奇，而且印度政府也从不掩饰这一社会现象。正因为如此，所以印度的官员从不以解决印度人吃饭而自喜；因为印度还没有出敢为天下先的领导人，所以维持秩序成为印度政府的主要职责。

然而印度人很奇怪，他们的生活水平要求并不高；所以低收入的人并不会改变生活状况，从而心理没有落差是印度的国情。如印度穷人整体上生活成本低就与印度的国情有关系，因为是国情决定了穷人的生活成本并不高。首先是印度人吃的成本很低，相当于维持生命的概念；如印度人半数以上不吃荤，穷人的饮食结构中不包括鸡鸭鱼肉非常正常；甚至相当多的富人也从不开荤。其二是印度人的穿的成本也很低，因为服装简陋也是印度的国情；由于印度天气炎热，所以不少印度人一年四季穿件短衣短裤就够了。其三就是印度人对住的概念很淡化，他们竟然习惯睡在大街上、操场上、过道上；而且只需一块布、一张纸铺在地上。所以印度人没有争先恐后卖商品房的概念，仅仅当成栖身的需要而已。正因为如此，所以印度人对住的投入很低，甚至低到不支出的程度。再加上印度用水免费，到公立医院看病等都不用掏钱；所以印度穷人虽然收入低，但基本生活却是无忧的。

虽然印度也有官员贪污受贿，但它却不是印度致富的主要途径；印度人致富也不是商业，而是知识。正因为如此，今天的印度的软件依然是世界一流；然而正是这一流的技术，却使印都知识分子成为致富的主要人群。在印度国内的有律师等知识分子，在国外的有软件工程师等知识分子；这些人的确富了，而且移民的美国的也不少。正因为如此，所以印度穷人尽管再穷都不眼红；因为致富需要知识，而知识的道路是平等的。所以印度穷人一般只怨前世造了孽，很少会把怨气发到富人身上；他们整体上没有嫉富、仇富的“红眼病”，更没有杀富济贫的造反意识。再加上印度致富并不是占用或占用公共资源，而是用知识去获取财富；所以印度富人带给穷人的是社会财富的增加，而不是穷人更穷的概念。

再加上印度人相信因果报应、业报轮回的宗教思想，所以他们只希望神保佑他们从苦海中解脱。正因为如此，所以印度贫富之间基本上能相安无事并和平共处；就连印度的乞丐一般也不会去偷盗抢劫，所以印度没有穷人报复富人的事件发生。不是有位中国记者到孟买印度门参观时随身带了1个照相机，离开时竟然忘在那儿了；谁知在记者往回走的路上，后边一个稚气未除的乞丐一面紧紧跟着；一面高声大叫。记者先以为是追上来要钱，仔细一听才知道原来他说的是“先生，您的照相机”。

印度富人为什么很有安全感，因为他们没有不义之财；所以印度的富豪们，没有被抢被偷的；更没有被杀的。印度也是两极分化的社会，贫富悬殊到了极致；但穷人富人竟能井水不犯河水，核心问题还是致富的公开性；上帝给了你致富的机会你都不能富，难道你还能仇富吗？所以印度人心态很平和，就如同中国的上大学与没有上大学的人；彼此相安无事，这才是值得我们社会思考的问题。

中国穷人为什么仇富，因为我在你富人的位置上也是富人；而印度却需要自己的知识，这才是根源。不要总说中国人仇富，实际还是致富不公平的原因；]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date>2011-10-26 10:01:07</wp:post_date>
		<wp:post_date_gmt>2011-10-26 10:01:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%b8%ba%e4%bb%80%e4%b9%88%e5%8d%b0%e5%ba%a6%e7%9a%84%e7%a9%b7%e4%ba%ba%e4%b8%8d%e4%bb%87%e5%af%8c%ef%bc%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e4%bb%87%e5%af%8c"><![CDATA[仇富]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>
		<category domain="post_tag" nicename="%e7%a9%b7%e4%ba%ba"><![CDATA[穷人]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于 Ruby &amp;Ruby on Rails 的一些书及论坛网站</title>
		<link></link>
		<pubDate>Thu, 20 Oct 2011 06:56:04 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=16</guid>
		<description></description>
		<content:encoded><![CDATA[需要用到的一些书
The Ruby Way  
Programming Ruby 2nd edition
Agile Web Development with Rails
Best of Ruby Quiz
Rails Recipes
Enterprise Integration with Ruby
Ruby Hacking Guide
Ruby In A Nutshell

<a href="http://www.itpub.net/forum61.html" target="_blank">http://www.itpub.net/forum61.html</a>
里大多有下，重点推荐
Programming Ruby 2nd edition
Agile Web Development with Rails
oreilly.rails.cookbook.jan.2007.ebook-bbl.chm
[/COLOR]

一些不错的论坛 及网站
国内的

<a href="http://www.javaeye.com/forums/board/Ruby" target="_blank">http://www.javaeye.com/forums/board/Ruby</a>
<a href="http://chinaonrails.com/" target="_blank">http://chinaonrails.com</a>
<a href="http://www.railscn.com/" target="_blank">http://www.railscn.com</a>
<a href="http://railscn.crispynews.com/" target="_blank">http://railscn.crispynews.com/</a>  
<a href="http://r4rclub.schtuff.com/" target="_blank">http://r4rclub.schtuff.com/</a>
<a href="http://rorwiki.hellopen.net/" target="_blank">http://rorwiki.hellopen.net</a>

国外的
<a href="http://www.ruby-forum.com/" target="_blank">http://www.ruby-forum.com/[/COLOR]</a>
<a href="http://www.rubyonrailsforum.com/rails-code-questions/" target="_blank">http://www.rubyonrailsforum.com/rails-code-questions/</a>
<a href="http://rubyforge.org/" target="_blank">http://rubyforge.org/</a>
<a href="http://www.rubyonrails.org/" target="_blank">http://www.rubyonrails.org/</a>
<a href="http://www.ruby-lang.org/en/" target="_blank">http://www.ruby-lang.org/en/</a>
<a href="http://www.webrick.org/" target="_blank">http://www.webrick.org/</a>
<a href="http://www.yaml.org/" target="_blank">http://www.yaml.org/</a>

blog

&lt;博客&gt;
铁道播客：有诸多视频教程
<a href="http://rorcast.blogger2blogger.com/" target="_blank">http://rorcast.blogger2blogger.com/</a>

my4java的文字博客：有很多教程的译稿、笔记等
<a href="http://my4java.itpub.net/" target="_blank">http://my4java.itpub.net/</a>

cnruby道喜技术日记：众多实例教程
<a href="http://www.hhtong.com/blog1/" target="_blank">http://www.hhtong.com/blog1/</a>

caphe的博客
<a href="http://www.blogjava.net/cap" target="_blank">http://www.blogjava.net/cap</a>

Caiwangqin的博客
<a href="http://www.uuzone.com/blog/uu_1115110/" target="_blank">http://www.uuzone.com/blog/uu_1115110/</a>

中文RubyOnRailsWiki
<a href="http://rorwiki.hellopen.net/index.php?title=%E9%A6%96%E9%A1%B5" target="_blank">http://rorwiki.hellopen.net/index.php?title=%E9%A6%96%E9%A1%B5</a>

关于rails和ajax相结合
<a href="http://www.rubynoob.com/" target="_blank">http://www.rubynoob.com/</a>

<a href="http://inquirylabs.com/blog/" target="_blank">http://inquirylabs.com/blog/</a>

这个当中有一些介绍
<a href="http://www.railscn.com/about704.html" target="_blank">http://www.railscn.com/about704.html</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2011-10-20 06:56:04</wp:post_date>
		<wp:post_date_gmt>2011-10-20 06:56:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%b3%e4%ba%8e-ruby-ruby-on-rails-%e7%9a%84%e4%b8%80%e4%ba%9b%e4%b9%a6%e5%8f%8a%e8%ae%ba%e5%9d%9b%e7%bd%91%e7%ab%99</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Siri 现在都能听懂哪些句子（英语）</title>
		<link></link>
		<pubDate>Tue, 25 Oct 2011 09:51:27 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

自从 iPhone 4S 发布以来，除了对这部手机“软硬兼施”地评测，最重要的事莫过于调戏Siri了。现在我们来说点“严肃的”话题，Siri 目前可以对哪些句子做出反应呢？或能够回答什么样的问题呢？假如你已经有了 iPhone 4S，或者今后越狱工作者将 Siri 移植到老款 iPhone 上之后，你就可以参考下面的一系列命令了，这些句子都是能被 Siri 轻松理解的。而且，在中文版的 Siri 到来之前，就当学习一次英语了吧！

地址簿
询问联系人
<ul>
	<li>What’s Michael’s address?</li>
	<li>What is Susan Park’s phone number?</li>
	<li>When is my wife’s birthday?</li>
	<li>Show Jennifer’s home email address
查找联系人</li>
	<li>Show Jason Russell</li>
	<li>Find people named Park</li>
	<li>Who is Michael Manning?
使用人称代词或关系</li>
	<li>My mom is Susan Park</li>
	<li>Michael Manning is my brother</li>
	<li>Call my brother at work 日历
添加事件</li>
	<li>Set up a meeting at 9</li>
	<li>Set up a meeting with Michael at 9</li>
	<li>Meet with Lisa at noon</li>
	<li>Set up a meeting about hiring tomorrow at 9am</li>
	<li>New appointment with Susan Park Friday at 3</li>
	<li>Schedule a planning meeting at 8:30 today in the boardroom
更改事件</li>
	<li>Move my 3pm meeting to 4:30</li>
	<li>Reschedule my appointment with Dr. Manning to next Monday at 9am</li>
	<li>Add Lisa to my meeting with Jason</li>
	<li>Cancel the budget review meeting
问询事件</li>
	<li>What does the rest of my day look like?</li>
	<li>What’s on my calendar for Friday?</li>
	<li>When is my next appointment?</li>
	<li>When am I meeting with Michael?</li>
	<li>Where is my next meeting? 闹钟
设定闹钟</li>
	<li>Wake me up tomorrow at 7am</li>
	<li>Set an alarm for 6:30am</li>
	<li>Wake me up in 8 hours</li>
	<li>Change my 6:30 alarm to 6:45</li>
	<li>Turn off my 6:30 alarm</li>
	<li>Delete my 7:30 alarm
查询时间</li>
	<li>What time is it?</li>
	<li>What time is it in Berlin?</li>
	<li>What is today’s date?</li>
	<li>What’s the date this Saturday?
使用定时器</li>
	<li>Set the timer for ten minutes</li>
	<li>Show the timer</li>
	<li>Pause the timer</li>
	<li>Resume</li>
	<li>Reset the timer</li>
	<li>Stop it 电子邮件
发送邮件</li>
	<li>Email Lisa about the trip</li>
	<li>Email Jennifer about the change in plans</li>
	<li>New email to Susan Park</li>
	<li>Mail Dad about the rent check</li>
	<li>Email Dr. Manning and say I got the forms, thanks</li>
	<li>Mail Lisa and Jason about the party and say I had a great time
检查邮件</li>
	<li>Check email</li>
	<li>Any new email from Michael today?</li>
	<li>Show new mail about the lease</li>
	<li>Show the email from Lisa yesterday
回复邮件</li>
	<li>Reply Dear Susan sorry about the late payment</li>
	<li>Call him at work 朋友
进行各种八卦</li>
	<li>Where’s Jason?</li>
	<li>Where is my sister?</li>
	<li>Is my wife at home?</li>
	<li>Where are all my friends?</li>
	<li>Who is here?</li>
	<li>Who is near me? 地图
查询方位</li>
	<li>How do I get home?</li>
	<li>Show 1 Infinite Loop Cupertino California</li>
	<li>Directions to my dad’s work
本地商务和服务</li>
	<li>Find coffee near me</li>
	<li>Where is Starbucks?</li>
	<li>Find some burger joints in Baltimore</li>
	<li>Find a gas station within walking distance</li>
	<li>Good Mexican restaurants around here 消息
发送文字信息</li>
	<li>Tell Susan I’ll be right there</li>
	<li>Send a message to Jason Russell</li>
	<li>Send a message to Lisa saying how about tomorrow</li>
	<li>Tell Jennifer the show was great</li>
	<li>Send a message to Susan on her mobile saying I’ll be late</li>
	<li>Send a message to 408 555 1212</li>
	<li>Text Jason and Lisa where are you?
阅读文字信息</li>
	<li>Read my new messages</li>
	<li>Read it again
回复文字信息</li>
	<li>Reply that’s great news</li>
	<li>Tell him I’ll be there in 10 minutes</li>
	<li>Call her 音乐
播放音乐</li>
	<li>Play The Light of the Sun</li>
	<li>Play Trouble</li>
	<li>Play Taking Back Sunday shuffled</li>
	<li>Play Alicia Keys</li>
	<li>Play some blues</li>
	<li>Play my party mix</li>
	<li>Shuffle my roadtrip playlist</li>
	<li>Play</li>
	<li>Pause</li>
	<li>Skip 备忘录
创建及问询备忘录</li>
	<li>Note that I spent $12 on lunch</li>
	<li>Note: check out that new Alicia Keys album</li>
	<li>Find my restaurant note</li>
	<li>Create a reading list note</li>
	<li>Add Tom Sawyer to my reading list note 电话
拨打电话</li>
	<li>Call Jason</li>
	<li>Call Jennifer Wright mobile</li>
	<li>Call Susan on her work phone</li>
	<li>Call 408 555 1212</li>
	<li>Call home</li>
	<li>FaceTime Lisa 提醒事项
增添提醒事项</li>
	<li>Remind me to call mom</li>
	<li>Remind me to call my mom when I get home</li>
	<li>Remember to take an umbrella</li>
	<li>Remind me take my medicine at 6am tomorrow</li>
	<li>Remind me to pick up flowers when I leave here</li>
	<li>Remind me when I leave to call Jason</li>
	<li>Remind me to finish the report by 6 股票
问询股票信息</li>
	<li>What’s Apple’s stock price?</li>
	<li>What is Apple’s PE ratio?</li>
	<li>What did Yahoo close at today?</li>
	<li>How is the Nikkei doing?</li>
	<li>How are the markets doing?</li>
	<li>What is the Dow at? 天气
问询天气预报</li>
	<li>What’s the weather for today?</li>
	<li>What’s the weather for tomorrow?</li>
	<li>Will it rain in Cupertino this week?</li>
	<li>Check next week’s forecast for Burlington</li>
	<li>What’s the forecast for this evening?</li>
	<li>How’s the weather in Tampa right now?</li>
	<li>How hot will it be in Palm Springs this weekend?</li>
	<li>What’s the high for Anchorage on Thursday?</li>
	<li>What’s the temperature outside?</li>
	<li>How windy is it out there?</li>
	<li>When is sunrise in Paris? 网络搜索
问询信息</li>
	<li>Search the web for Bora Bora</li>
	<li>Search for vegetarian pasta recipes</li>
	<li>Search the web for best cable plans</li>
	<li>Google the war of 1812</li>
	<li>Search Wikipedia for Abraham Lincoln</li>
	<li>Search for news about the World Cup</li>
	<li>Bing Alicia Keys
使用 Wolfram Alpha 智能问答</li>
	<li>How many calories in a bagel?</li>
	<li>What is an 18% tip on $86.74 for four people?</li>
	<li>Who’s buried in Grant’s tomb?</li>
	<li>How long do dogs live?</li>
	<li>What is the Gossamer Condor?</li>
	<li>What’s the square root of 128?</li>
	<li>How many dollars is €45?</li>
	<li>What was the Best Picture of 1983?</li>
	<li>How many days until Christmas?</li>
	<li>How far away is the Sun?</li>
	<li>When is the next solar eclipse?</li>
	<li>Show me the Orion constellation</li>
	<li>What’s the population of Jamaica?</li>
	<li>How high is Mt. Everest?</li>
	<li>How deep is the Atlantic ocean?</li>
	<li>What’s the price of gasoline in Chicago?</li>
</ul>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2011-10-25 09:51:27</wp:post_date>
		<wp:post_date_gmt>2011-10-25 09:51:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>siri-%e7%8e%b0%e5%9c%a8%e9%83%bd%e8%83%bd%e5%90%ac%e6%87%82%e5%93%aa%e4%ba%9b%e5%8f%a5%e5%ad%90%ef%bc%88%e8%8b%b1%e8%af%ad%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apple"><![CDATA[apple]]></category>
		<category domain="post_tag" nicename="iphone"><![CDATA[iphone]]></category>
		<category domain="post_tag" nicename="siri"><![CDATA[siri]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[tautszofs]]></wp:comment_author>
			<wp:comment_author_email>tpfdtqrn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://nyzhthfk.com</wp:comment_author_url>
			<wp:comment_author_IP>178.150.142.210</wp:comment_author_IP>
			<wp:comment_date>2011-12-05 07:39:47</wp:comment_date>
			<wp:comment_date_gmt>2011-12-04 23:39:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://zozmrlqf.com" rel="nofollow"> :)</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>你应该知道的django博客引擎【翻译】</title>
		<link></link>
		<pubDate>Tue, 25 Oct 2011 09:56:31 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

这段时间一直在学python和django，准备写个小小的blog巩固下自己学到的东西，看到了GAE上的一些程序，大部分都是纯python的，想找一些基于django的，还真是难。无意中搜索到一篇文章，就翻译一下，渣技术，实在不行，就去看en文的吧。

<a title="原文地址" href="http://blog.montylounge.com/2010/02/10/eleven-django-blog-engines-you-should-know/" target="_blank">en文地址</a>

Michael Trier在两年以前就写了一篇叫“基于django的blog引擎在哪儿？”。James Bennett随后也跟着写了一篇名叫“哪儿才有django的blog应用”，他论述了为什么最终没有Django blog engine（也就是基于django的博客引擎）。最近Daniel Greenfeld写了一篇“向哥展示你们的开源Django blog吧”，它里面，他定义了这个Django blog项目所需要的各项要求。自从读了那篇文章以后，我就开始一直写现在的这篇文章。

下面我挑选了一些我相信你应该会注意的blog引擎，并且根据它们最近的更新日期排列。如果这些blog engine的作者描述了他们的blog，那么我就直接引用作者们的描述，如果没有，那哥就总结一下我对该项目的一些了解。如果你有自己开发的blog引擎并且值得哥注意的，那么就在下面留言吧，记得加上姓名和地址。

<a href="http://byteflow.su/">Byteflow</a>博客程序并没有被包含在下面，这是因为这个项目在我写这片博客之前就已经关闭了下载的地址（= =！）。
<h3>Biblion</h3>
标语：eldarion.com 的blog程序一般适用于企业或者项目级别的引用。

源码地址：<a href="http://github.com/eldarion/biblion">http://github.com/eldarion/biblion</a>

最后更新：2010年2月9号

在线的demo：<a href="http://eldarion.com/blog/">http://eldarion.com/blog/</a>

描述：Bilion是eldarion.com的一个已经被提取和开源的blog程序，这个blog目前的定位是，它能够被应用于类似的eldarion.com和pinaxproject.com这样的网站或者博客项目。一旦我们完成Bilion的功能，那么我们就用它去代替内部的Pinax博客程序。

特点：

1.多渠道支持（比如：技术对业务）      #这句真没看懂啥意思

2.使用Creole作为标记格式

3.Atom feeds            #求翻译帝现身

4.在博客发布前预览其效果

5.可以选择同步推特
<h3>Django-article</h3>
标语：牛X的基于django开发的博客引擎

源码：<a href="http://bitbucket.org/codekoala/django-articles/">http://bitbucket.org/codekoala/django-articles/</a>

最后更新：2010年2月8号

现在demo：<a href="http://codekoala.com/">codekoala.com</a>

描述：作者是Josh VanderLinden，牛X的基于django开发的博客引擎。

显著特点：

1.标签系统

2.在django的后台中自动完成标签功能

3.支持草稿（就是现预存，以后再发布）

4.文章到期设定     #这是啥设定啊，还翻译有毛病

5.可以使用文本或者HTML或者使用Markdown或者ReStructured Text或者Textile markup来写文章。                  #这里面有几个属于不是很懂

6.支持相关文章显示

7.支持后续文章（就是上一篇下一篇）

8.支持Disqus评论系统               #想知道<a title="Disqus是啥" href="http://lucifr.com/2008/05/19/disqus-turn-your-blog-comment-system-to-a-forum/" target="_blank">Disqu</a>s是啥，请猛击。

9.文章分页存档

10.支持多语言（国际化个锤子）

11.支持为每篇文章添加个单独的链接，并且检测该链接。  #连wordpress的url设定差不多。- -，我猜的。

12.字数统计             #这个功能到底有个啥锤子用啊

13.支持最新文章的RRS Feeds

14.支持最新的文章标签的RRS Feeds

娘的，真累，而且翻译得不好，以后有时间再翻译翻译吧，真蛋疼。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2011-10-25 09:56:31</wp:post_date>
		<wp:post_date_gmt>2011-10-25 09:56:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%a0%e5%ba%94%e8%af%a5%e7%9f%a5%e9%81%93%e7%9a%84django%e5%8d%9a%e5%ae%a2%e5%bc%95%e6%93%8e%e3%80%90%e7%bf%bb%e8%af%91%e3%80%91</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blog"><![CDATA[blog]]></category>
		<category domain="category" nicename="django"><![CDATA[django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[django]]></category>
		<category domain="post_tag" nicename="engine"><![CDATA[engine]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>acer 4738G 系列机型 激活OEM windows7的BIOS 1.12附win7 SP1下载地址</title>
		<link></link>
		<pubDate>Fri, 28 Oct 2011 13:44:32 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://hiimg.com/zh/image/show/7HqreCq4yu/1.jpg" target="_blank"><img src="http://hiimg.com/image/direct/7HqreCq4yu/1.jpg" alt="" width="600" height="448" /></a>
本 合集有40多个映像，支持50个品牌（子品牌），是用官方MSDN下载到的中文原版（微软官方整合SP1）做母盘，然后添加OEM资料制作成的，无任何个 人信息，无任何破解方式存在，只要你的电脑的主板bios里有silc2.1存在，就能自动激活。本合集包含32位和64位系统， 请大家根据自己电脑的状况自由选择安装。
1、简体中文，With SP1。32位、64位各1个DVD；
2、在MSDN官方原版基础上添加OEM资料制作而成，未进行其他删减或增加。
3、更新PE3.0 PE的程序移至开始菜单；
4、除Admin版本外，其他版本均为默认设置；
5、Admin版本：启用内管理员Adminitrator帐号自动登录， 仅做以下设置调整：
（1）关闭休眠；
（2）显示桌面常用图标；
（3）开始菜单显示“运行”；
（4）右键添加“显示隐藏文件与后缀名”、“用记事本打开”
6、子映像名称列表（安装选择菜单）：
[1] Windows 7 旗舰版 32位 ThinkPad
[2] Windows 7 旗舰版 32位 联想
[3] Windows 7 旗舰版 32位 宏碁
[4] Windows 7 旗舰版 32位 华硕
[5] Windows 7 旗舰版 32位 惠普
[6] Windows 7 旗舰版 32位 康柏
[7] Windows 7 旗舰版 32位 戴尔
[8] Windows 7 旗舰版 32位 神舟
[9] Windows 7 旗舰版 32位 同方
[10] Windows 7 旗舰版 32位 方正
[11] Windows 7 旗舰版 32位 明基
[12] Windows 7 旗舰版 32位 索尼
[13] Windows 7 旗舰版 32位 技嘉
[14] Windows 7 旗舰版 32位 长城
[15] Windows 7 旗舰版 32位 海尔
[16] Windows 7 旗舰版 32位 七喜
[17] Windows 7 旗舰版 32位 微星
[18] Windows 7 旗舰版 32位 三星
[19] Windows 7 旗舰版 32位 精英
[20] Windows 7 旗舰版 32位 东芝
[21] Windows 7 旗舰版 32位 富士通
[22] Windows 7 旗舰版 32位 LG
[23] Windows 7 旗舰版 32位 Gateway
[24] Windows 7 旗舰版 32位 Alienware
[25] Windows 7 旗舰版 32位 eMachines
[26] Windows 7 旗舰版 32位 Retail
[27] Windows 7 旗舰版 32位 OEM通用
[28] Windows 7 旗舰版 32位 OEM通用 (Admin)
[29] Windows 7 旗舰版 32位 OEM通用-无LOGO (Admin)
[30] Windows 7 专业版 32位 Retail
[31] Windows 7 专业版 32位 OEM通用
[32] Windows 7 专业版 32位 OEM通用 (Admin)
[33] Windows 7 专业版 32位 OEM通用-无LOGO (Admin)
[34] Windows 7 家庭高级版 32位 Retail
[35] Windows 7 家庭高级版 32位 OEM通用
[36] Windows 7 家庭高级版 32位 OEM通用 (Admin)
[37] Windows 7 家庭高级版 32位 OEM通用-无LOGO (Admin)
[38] Windows 7 家庭基本版 32位 Retail
[39] Windows 7 家庭基本版 32位 OEM通用
[40] Windows 7 家庭基本版 32位 OEM通用 (Admin)
[41] Windows 7 家庭基本版 32位 OEM通用-无LOGO (Admin)
[42] Windows 7 简易版 32位 Retail
[43] Windows 7 简易版 32位 OEM通用
[44] Windows 7 简易版 32位 OEM通用 (Admin)
[45] Windows 7 简易版 32位 OEM通用-无LOGO (Admin)
（1）除了没有简易版外，64位合集的结构与32位是一样的，不再列举了；
（2）标有“Retail”的映像为官方原版映像。其他的均为OEM版本，需要SLIC2.1支持才会自动激活；
（3） 关于“OEM通用”版本，此次改进了安装过程中的品牌自动识别方法。“OEM通用”版本既支持前面单列的25个品牌，也支持下列25个品 牌：ADVENT、AQUARIUS、DEALIN、EXPER、HANNSPREE、HCL、HIGRADE、HYRICAN、JOOYON、 KRAFTWAY、KSYSTEMS、LANIX、MEDION、NEC、NOKIA、PBELL、QUANMAX、SEMPTOSHIBA、 SYNNEX、SYSTEMAX、TRIGEM、TWINHEAD、VILIV、VSONIC、WORTMANN
7、安装
安装媒介：光盘、硬盘、U盘，与原版无异。
安装方式：常规方法（光盘或硬盘安装）、PE3.0环境安装、IMAGEX安装，与原版无异

<a href="http://hiimg.com/zh/image/show/ymEqsCtl-u/2.jpg" target="_blank"><img src="http://hiimg.com/image/direct/ymEqsCtl-u/2.jpg" alt="" width="600" height="447" /></a>

－－－文件校验值及下载－－－

32位版本：
<a id="ed2k_wy3" href="ed2k://%7Cfile%7CCN_WIN7_SP1_X86_33in1_V1.2.iso%7C3183771648%7CE86A5669984818A806972F9A53E0C33F%7Ch=RFMLP5S56ZXZ73J6KO4Z6HCJXMDBCZ7W%7C/" target="_blank">CN_WIN7_SP1_X86_33in1_V1.2.iso (2.97 GB)</a>
文件: CN_WIN7_SP1_X86_33in1_V1.2.iso
大小: 3183771648 字节
修改时间: 2011年2月26日, 15:59:34
MD5: CE98B39F334C5DE1ADD03B040E3ED2B7
SHA1: E6D03500FDFA0897E99D3E6DCC6A491E6C0794D7
CRC32: 2BB635FD

64位版本：
<a id="ed2k_V5j" href="ed2k://%7Cfile%7CCN_WIN7_SP1_X64_33in1_V1.2.iso%7C3955359744%7C9308E127D9114B4C7FE294CFE4985D21%7Ch=UUG5M5LHBHLYVASRYQAEH5MQYOS6F52W%7C/" target="_blank">CN_WIN7_SP1_X64_33in1_V1.2.iso (3.68 GB)</a>
文件: CN_WIN7_SP1_X64_33in1_V1.2.iso
大小: 3955359744 字节
修改时间: 2011年2月26日, 17:41:17
MD5: 31EEA8518D97A26393587454E7D38FEF
SHA1: 3648C5918E8F541FFB77B198F0C555AE3DC6E8B7
CRC32: 28DAD8E3

<a href="http://hiimg.com/zh/image/show/eGnyDVuY0m/3.jpg" target="_blank"><img src="http://hiimg.com/image/direct/eGnyDVuY0m/3.jpg" alt="" width="600" height="448" /></a>
<a href="http://hiimg.com/zh/image/show/FBWsO3Dfz0/4.jpg" target="_blank"><img src="http://hiimg.com/image/direct/FBWsO3Dfz0/4.jpg" alt="" width="600" height="451" /></a>
<div>标签： <a href="http://jhjguxin.hwcrazy.com/tag/acer/">acer</a> <a href="http://jhjguxin.hwcrazy.com/tag/oem/">oem</a> <a href="http://jhjguxin.hwcrazy.com/tag/sp1/">sp1</a> <a href="http://jhjguxin.hwcrazy.com/tag/win7/">win7</a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2011-10-28 13:44:32</wp:post_date>
		<wp:post_date_gmt>2011-10-28 13:44:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acer-4738g-%e7%b3%bb%e5%88%97%e6%9c%ba%e5%9e%8b-%e6%bf%80%e6%b4%bboem-windows7%e7%9a%84bios-1-12%e9%99%84win7-sp1%e4%b8%8b%e8%bd%bd%e5%9c%b0%e5%9d%80</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acer"><![CDATA[acer]]></category>
		<category domain="post_tag" nicename="oem"><![CDATA[oem]]></category>
		<category domain="post_tag" nicename="sp1"><![CDATA[sp1]]></category>
		<category domain="post_tag" nicename="win7"><![CDATA[win7]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>提问的智慧 - How To Ask Questions The Smart Way [Eric Raymond]</title>
		<link></link>
		<pubDate>Tue, 01 Nov 2011 02:01:14 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=30</guid>
		<description></description>
		<content:encoded><![CDATA[艾瑞克.史蒂文.雷蒙德（Eric Steven Raymond）

Thyrsus Enterprises
瑞克.莫恩（Rick Moen）
版权©2001, 2006 Eric S. Raymond, Rick Moen

原文：How To Ask Questions The Smart Way
http://www.catb.org/~esr/faqs/smart-questions.html
翻译：囗囗
时间：2010年9月28日
内容

译文

弃权申明
引言
提问前
提问时
仔细挑选论坛
面向新手的论坛和互联网中继聊天（IRC）通常响应最快
第二步，使用项目的邮件列表
使用有意义且明确的主题
使问题容易回复
用清晰、语法、拼写正确的语句书写
使用易于读取且标准的文件格式发送问题
描述问题应准确且有内容
量不在多，精炼则灵
别急于宣称找到臭虫
低声下气代替不了做自己的家庭作业
描述问题症状而不是猜测
按时间先后罗列问题症状
描述目标而不是过程
别要求私下回复电邮
提问应明确
关于代码的问题
别张贴家庭作业式问题
删除无意义的要求
不要把问题标记为“紧急”， 即使对你而言的确如此
礼貌总是有益的
问题解决后追加一条简要说明
如何解读回答
“读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸
如果还不明白……
对待无礼
别象失败者那样反应
提问禁忌
好问题与坏问题
如果得不到回答
如何更好地回答
相关资源
译文
鸣谢

译 文： 印尼语、 巴西葡萄牙语、 汉语、 捷克语、 丹麦语、 荷兰语、 爱沙尼亚语、 芬兰语、 法语、 乔治亚语、 德语、 希腊语、 希伯来语、 匈牙利语、 意大利语、 日语、 蒙古语、 波兰语、 葡萄牙语、 罗马尼亚语、 俄语、 塞尔维亚语、 西班牙语、 瑞典语、 泰语、 土耳其语。 如果你想复制、镜像、翻译或引用本文，请参阅我的 复制协议。

弃权申明

许多项目的网站在如何取得帮助的部分链接了本文，这没有关系，也正是我们想要的。但如果你是该项目生成此链接的网管，请在链接附近显著位置注明：我们不提供该项目的服务支持！

我们已经领教了没有此说明带来的痛苦，我们将不停地被一些白痴纠缠，他们认为既然我们发布了本文，那么我们就有责任解决世上所有的技术问题。

如 果你是因为需要帮助正在阅读本文，然后就带着可以直接从作者那取得帮助的印象离开，那么 你 就不幸成了我们所说的白痴之一。 别向 我们 提问，我们不会理睬的。 我们只是在这教你如何从那些真正懂得你软硬件问题的人那里取得帮助，但 99.9％ 的时间我们不会是那些人。除非你非常地 确定 本文的作者是你遇到问题方面的专家，请不要打搅，这样大家都更开心一点。

引言

在 黑客 的世界里，你所提技术问题的解答很大程度上取决于你提问的方式与解决此问题的难度，本文将教你如何提问才更有可能得到满意的答复。

开源程序的应用已经很广，你通常可以从其他更有经验的用户而不是黑客那里得到解答。这是好事，他们一般对新手常有的毛病更容忍一点。然尔，使用我们推荐的方法，象对待黑客那样对待这些有经验的用户，通常能最有效地得到问题的解答。

第一件需要明白的事是黑客喜欢难题和激发思考的好问题。假如不是这样，我们也不会写本文了。如果你能提出一个有趣的问题让我们咀嚼玩味，我们会感激你。好问题是种激励与礼物，帮助我们发展认知，揭示没有注意或想到的问题。在黑客中，“好问题！” 是非常热烈而真挚的赞许。

此外，黑客还有遇到简单问题就表现出敌视或傲慢的名声。有时，我们看起来还对新手和愚蠢的家伙有条件反射式的无礼，但事情并不真是这样。

我 们只是毫无歉意地敌视那些提问前不愿思考、不做自己家庭作业的人。这种人就象时间无底洞──他们只知道索取，不愿意付出，他们浪费了时间，这些时间本可用 于其它更有趣的问题或更值得回答的人。我们将这种人叫做 “失败者（loser）” （由于历史原因，我们有时将“loser”拼写为“lusers” 。）

我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，计算机只是种工具，是种达到目的的手段而 已。他们有自己的生活并且有更要紧的事要做，我们承认这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。不过，我们回答问题的风格是为了适应那 些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就会在自己能做得最好的事情上不再那么犀利。

我们（大多数）是自愿者， 从自己繁忙的生活中抽时间来回答问题，有时会力不从心。因此，我们会毫不留情地滤除问题，特别是那些看起来象是失败者提的，以便更有效地把回答问题的时间留给那些胜利者。

如 果你认为这种态度令人反感、以施惠者自居或傲慢自大，请检查你的假设，我们并未要求你屈服──事实上，假如你做了该做的努力，我们中的大多数将非常乐意平 等地与你交流，并欢迎你接纳我们的文化。试图去帮助那些不愿自救的人对我们简直没有效率。不懂没有关系，但愚蠢地做事不行。

所以，你不必在技术上很在行才能吸引我们的注意，但你 必须 表现出能引导你在行的姿态──机 敏、有想法、善于观察、乐于主动参与问题的解决。如果你做不到这些使你与众不同的事情，我们建议你付钱跟别人签商业服务合同，而不是要求黑客无偿帮助。

如果你决定向我们求助，你不会想成为一名失败者，你也不想被看成一个失败者。得到快速有效回答的最好方法是使提问者看起来象个聪明、自信和有想法的人，并且暗示只是碰巧在某一特别问题上需要帮助。

（欢迎对本文指正，可以将建议发至 esr@thyrsus.com 或 respond-auto@linuxmafia.com。 请注意，本文不想成为一般性的 网络礼仪 指南，我一般会拒绝那些与引出技术论坛中有用的回答不特别相关的建议。）

提问前

在通过电邮、新闻组或论坛提技术问题以前，做以下事情：

尝试在你准备提问论坛的历史文档中搜索答案

尝试搜索互联网以找到答案

尝试阅读手册以找到答案

尝试阅读“常见问题文档”（FAQ）以找到答案

尝试自己检查或试验以找到答案

尝试请教懂行的朋友以找到答案

如果你是程序员，尝试阅读源代码以找到答案

提问时，请先表明你已做了上述事情，这将有助于建立你不是寄生虫与浪费别人时间的印象。最好再表述你从中 学到的东西 ，我们喜欢回答那些表现出能从答案中学习的人。

运 用某些策略，比如用谷歌（Google）搜索你遇到的各种错误提示（既搜索 谷歌论坛，也搜索网页）， 这样很可能直接就找到了解决问题的文档或邮件列表线索。 即使没有结果，在邮件列表或新闻组寻求帮助时提一句“我在谷歌中搜过下列句子但没有找到什么有用的东西” 也是件好事，至少它表明了搜索引擎不能提供哪些帮助。将搜索关键词与你的问题及可能的解决方案联系起来，还有助于引导其他有类似问题的人。

别 着急，不要指望几秒钟的谷歌搜索就能解决一个复杂的问题。读一下常见问题文档。在向专家提问之前，先向后靠靠放松一下，再思考一下问题。相信我们，他们能 从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑抛出，只因你的第一次搜索没有结果（或者结果太多）。

认真地思考，准备好你的问题。轻率的提问只能得到轻率的回答，或者压根没有。在提问时，你越是表现出在此前做过思考与努力去解决自己的问题，你越有可能得到真正的帮助。

注意别提错问题。如果提问基于错误的假设，某黑客多半会一边想 “愚蠢的问题……”，一边按将错就错的答案回复你，并且希望这种只是得到你自己“问的问题”而非真正所需的解答，给你一个教训。

永远不要假设你 有资格 得到解答。你没有这种资格，毕竟你没有为此服务付费。如果你能够提出有内容、有趣和激励思考的问题──那种毫无疑问能够向社区贡献经验，而不仅仅是消极地要求从别人那获取知识的问题，你将“挣到”答案。

另一方面，表明你有能力也乐意参与问题的解决是个很好的开端。“有没有人能指个方向？”，我这还差点什么？”，“我应该查哪个网站？”，通常要比 “请给出我可以用的完整步骤”更容易得到回复，因为你表明了只要有人能指个方向，你就很乐意完成剩下的过程。

提问时

仔细挑选论坛

要对在哪提问留心，如果你做了下述事情，多半会被一笔勾销或被看成“失败者”：

[*]张贴与论坛主题无关的问题

[*]在面向高级技术问题的论坛上张贴肤浅的问题，或者反之。

[*]在太多不同的新闻组同时张贴

[*]给既非熟人也没有义务解决你问题的人发送你私人的电邮

[*]为保护通信的渠道不被无关的东西淹没，黑客会除掉那些没有找对地方的问题，你不会想让这种事落到自己头上的。

因 此，第一步是找对论坛。谷歌和其它搜索引擎还是你的朋友，可以用它们搜索你遇到困难的软硬件问题最相关的项目网站。那里通常都有项目的常见问题 （FAQ）、邮件列表及文档的链接。如果你的努力（包括 阅读 FAQ）都没有结果，这些邮件列表就是最后能取得帮助的地方。项目的网站也许还有报告臭虫的流程或链接，如果是这样，去看看。

向陌生的人或论坛发送邮件极有可能是在冒险。譬如，不要假设一个内容丰富的网页的作者想充当你的免费顾问，不要对你的问题是否会受到欢迎做太乐观的估计──如果你不确定，向别处发或者压根别发。

在 选择论坛、新闻组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以明确你的问题是否切题。发贴前先翻翻已有的帖子，这样可以让你感受一下那里行事的方式。事实上，张贴前在新闻组或邮件列表的历史文档中搜索与 你问题相关的关键词是个极好的主意，也许就找到答案了。即使没有，也能帮助你归纳出更好的问题。

别象机关枪似的一次性“扫射”所有的帮助渠道，这就象大喊大叫一样会令人不快，温柔地一个一个来。

弄懂主题！最典型的错误之一是在某种致立于跨平台可移植的语言、库或工具的论坛中提关于 Unix 或 Windows 操作系统程序接口的问题。如果你不明白为什么这是大错，最好在搞清楚概念前什么也别问。

一般来说，在仔细挑选的公共论坛中提问比在私有论坛中提同样的问题更容易得到有用的回答。有几个道理支持这点，一是看潜在的回复者有多少，二是看论坛的参与者有多少，黑客更愿回答能启发多数人的问题。

可以理解，老练的黑客和一些流行软件的作者正在承受过多的不当消息。就象那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端──已经好几次了，一些流行软件的作者退出了对自己软件的支持，因为伴随而来的涌入其私人邮箱的垃圾邮件变得无法忍受。

面向新手的论坛和互联网中继聊天（IRC）通常响应最快

本 地的用户组织或者你所用的 Linux 发行版也许正在宣传新手取得帮助的论坛或 IRC 通道（在一些非英语国家，新手论坛很可能还是邮件列表），这些地方是开始提问的好去处，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。经过宣 传的 IRC 通道是公开邀请提问的地方，通常可以得到实时的回复。

事实上，如果出问题的程序来自某发行版（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的项目论坛或邮件列表，（否则）该项目的黑客可能仅仅回复“用 我们的 代码”。

在任何论坛发贴以前，先看看有没有搜索功能。如果有，就试着用问题的几个关键词搜索一下，也许就有帮助。如果在此之前你已做过全面的网页搜索（你应该这样去做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。

通过论坛或 IRC 通道提供项目的用户支持有增长的趋势，电子邮件交流则更多地为项目开发者保留。所以先在论坛或 IRC 中寻求与该项目相关的帮助。

第二步，使用项目的邮件列表

当某个项目存在开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文档和主页，找到项目的邮件列表并使用它。采用这种办法有几个很好的理由：

向个别开发者提的问题（如果）足够好，也将对整个项目组有益。相反，如果你认为自己的问题对整个项目组来说太愚蠢，这也不能成为骚扰个别开发者的理由。

向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导）也许太忙以至于没法回答你的问题。

大多数邮件列表都要存档，那些存档将被搜索引擎索引，如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。

如果某些问题经常被问到，开发者可以利用此信息改进文档或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。

如果一个项目既有 “用户” 也有“开发者”（或 “黑客”）邮件列表或论坛，而你又不摆弄那些代码，向“用户”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会遭受你的噪音干扰。

然尔，如果你 确信 你的问题不一般，而且在“用户” 列表或论坛中几天都没有回复，可以试试“开发者”列表或论坛。建议你在张贴前最好先暗暗地观察几天以了解那的行事方式（事实上这是参与任何私有或半私有列表的好主意）

如 果你找不到一个项目的邮件列表，而只能查到项目维护者的地址，只管向其发信。即便在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中陈述你 已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电 子邮件转发他人，你给了相应人员处置你邮件的选择）。

使用有意义且明确的主题

在 邮件列表、新闻组或论坛中，主题是你在五十个或更少的字以内吸引有资格专家注意的黄金机会，不要用诸如 “请帮我” （更别提大写的 “请帮我！！！！”，这种主题的消息会被条件反射式地删掉）之类的唠叨浪费机会。不要用你痛苦的深度来打动我们，相反，要在这点空间中使用超级简明扼要的 问题描述。

使用主题的好惯例是“对象──偏差”（式的描述），许多技术支持组织就是这样做的。在“对象”部分指明是哪一个或哪一组东西有问题，在“偏差”部分则描述与期望的行为不一致的地方。

愚蠢：
救命啊！我的笔记本视频工作不正常！

明智：
X.org 6.8.1 扭曲鼠标光标，MV1005 型号的某显卡芯片组

更明智：
使用 MV1005 型号的某显卡芯片组在 X.org 6.8.1 的鼠标光标被扭曲

编 写 “对象──偏差”式描述的过程有助于你组织对问题的细致思考。是什么被影响了？仅仅是鼠标光标或者还有其它图形？只在 X.org 中出现？或只是在其 6.8.1 版中？是针对某显卡芯片组？或者只是其中的 MV1005 型号？一个黑客只需描一眼就能够立即明白什么是你遇到的问题，什么是你自己的问题。

更一般地，想象一下在一个只显示主题的文档索引中查找。让你的主题更好地反映问题，可以使下一个搜索类似问题的人能够在文档中直接就找到答案的线索，而不用再次发贴提问。

如果你想在回复中提问，确保改变主题以表明你是在问一个问题，一个主题象 “Re: 测试” 或者 “Re: 新臭虫”的消息不太可能引起足够的注意。同时，将回复中与新主题不甚相关的引用内容尽量删除。

对于列表消息，不要直接点击回复（按钮）来开始一个全新的线索，这将限制你的观众。有些邮件阅读程序，比如 mutt，允许用户按线索排序并通过折叠线索来隐藏消息，这样做的人永远看不到你发的消息。

仅仅改变主题还不够。mutt 和其它一些邮件阅读程序还要检查邮件头主题以外的其它信息，以便为其指定线索，所以宁可发一个全新的邮件。

在 论坛，因为消息与特定的线索紧密结合，并且通常在线索之外不可见，好的提问方式略有不同，通过回复提问并不要紧。不是所有论坛都允许在回复中出现分离的主 题，而且这样做了基本上没有人会去看。不过，通过回复提问本身就是令人怀疑的做法，因为它们只会被正在查看该线索的人读到。所以，除非你 只想 在该线索当前活跃的人群中提问，还是另起炉灶比较好。

使问题容易回复

以“请向……回复”来结束问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟考虑你的问题更麻烦。如果你的邮件客户端程序不支持这样做，换个好点的；如果是操作系统不支持所有这种邮件客户端程序，也换个好点的。

在 论坛，要求通过电子邮件回复是完全无礼的，除非你确信回复的信息也许是敏感的（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只 是想在有人回复线索时得到电子邮件提醒，可以要求论坛发送。几乎所有论坛都支持诸如“留意本线索”、“有回复发送邮件”等功能。

用清晰、语法、拼写正确的语句书写

经验告诉我们，粗心与草率的作者通常也粗心与草率地思考和编程（我敢打赌）。为这些粗心与草率的思考者回答问题没有什么好处，我们宁可将时间花在其它地方。

清楚、良好地表达你的问题非常重要。如果你觉得这样做麻烦，我们也觉得注意（你的问题）麻烦。花点额外的精力斟酌一下字句，用不着太僵硬与正式──事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它 必须 很准确，而且有迹象表明你是在思考和关注问题。

正 确地拼写、使用标点和大小写，不要将“its”混淆为“it's”，“loose”搞成“lose”或者将“discrete”弄成 “discreet”。不要全部用大写，这会被视为无礼的大声嚷嚷 （全部小写也好不到哪去，因为不易阅读。Alan Cox [注：著名黑客，Linux 内核的重要参与者] 也许可以这样做，但你不行。）

一般而言，如果你写得象个半文盲似的傻子，多半得不到理 睬。也不要使用即时通讯中的简写，如将“you”简化为“u”会使你看起来象一个为了节约二次击键的半文盲式的傻子。更糟的是，如果象个小孩似地鬼画桃符 那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。

如果在非母语论坛提问，你的拼写与语法错误会得到有限的宽容， 但懒惰完全不会被容忍（是的，我们通常看得出其中的差别）。同时，除非你知道回复者使用的语言，请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语 言写的消息。在互联网上英语是工作语言，用英语书写可以将你的问题不被阅读就被直接删除的可能性降到最低。

使用易于读取且标准的文件格式发送问题

如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：

[*]使用纯文本而不是 HTML（超文本标注语言）（ 关闭HTML 并不难）

[*]使用 MIME（多用途互联网邮件扩展）附件通常没有问题，前提是真正有内容（譬如附带的源文件或补丁），而不仅仅是邮件客户端程序生成的模板（譬如只是消息内容的拷贝）。

[*]不要发送整段只是单行句子但多次折回的邮件（这使得回复部分内容非常困难）。设想你的读者是在80个字符宽的文本终端阅读邮件，设置你的行折回点小于 80 列。

但是，也 不要 用任何固定列折回数据（譬如日志文件拷贝或会话记录）。数据应该原样包含，使回复者确信他们看到的是与你看到的一样的东西。

在英语论坛中，不要使用'Quoted-Printable' MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持。当它们分断时，那些文本中四处散布的 “=20”符号既难看也分散注意力，甚至有可能破坏内容的语意。

永远不要 指望黑客们阅读使用封闭的专用格式编写的文档，诸如微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就象有人将还在冒热气的猪粪倒在你门口时你的反应一样。即使他们能够处理，也很厌恶这么做。

如果你从使用视窗的电脑发送电子邮件，关闭微软愚蠢的“聪明引用”功能，以免在你的邮件中到处散布垃圾字符。

在论坛，勿滥用“表情符号”和“HTML”功能(当它们提供时)。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来象个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是有用的回复更有兴趣。

如 果你使用图形用户界面的邮件客户端程序(如网景公司的 Messenger、微软公司的 Outlook 或者其它类似的)，注意它们的缺省配置不一定满足这些要求。大多数这类程序有基于菜单的“查看源码”命令，用它来检查发送文件夹中的消息，以确保发送的是 没有多余杂质的纯文本文件。

描述问题应准确且有内容

[*]仔细、清楚地描述问题的症状

[*]描述问题发生的环境(主机、操作系统、应用程序，任何相关的)，提供销售商的发行版和版本号（如：“Fedora Core 7”、“Slackware 9.1”等）

[*]描述提问前做过的研究及其理解。

[*]描述提问前为确定问题而采取的诊断步骤。

[*]描述最近对计算机或软件配置的任何相关改变。

[*]如果可能，提供在可控环境下重现问题的方法。

[*]尽最大努力预测黑客会提到的问题，并提前备好答案。

[*]如果你认为是代码有问题，向黑客提供在可控环境下重现问题的方法尤其重要。当你这么做时，得到有用且及时回复的可能性将大大增加。

西蒙.泰瑟姆（Simon Tatham）写过一篇 如何有效报告臭虫 的文章，我强烈推荐各位阅读。

量不在多，精炼则灵

你应该（写得）精炼且有内容，简单地将一大堆代码或数据罗列在求助消息中达不到目的。如果你有一个很大且复杂的测试样例让程序崩溃，尝试将其裁剪得越小越好。

至少有三个理由支持这点。第一，让别人看到你在努力简化问题使你更有可能得到回复。第二，简化问题使你更有可能得到 有用的 回复。第三，在提纯臭虫报告的过程中，你可能自己就找到了解决办法或权宜之计。

别急于宣称找到臭虫

当 你在一个软件中遇到问题，除非你 非常、非常 的有根据，不要动辄声称找到了臭虫。提示：除非你能提供解决问题的源代码补丁，或者对前一版本的回归测试表现出不正确的行为，否则你都多半不够完全确信。 对于网页和文档也如此，如果你（声称）发现了文档的“臭虫”，你应该能提供相应位置的替代文本。

记住，还有许多其它用户并未经历你遇到的问题，否则你在阅读文档或搜索网页时就应该发现了（你在报怨前已经做了这些，是吧 ？）。这也意味着很有可能是你弄错了而不是软件本身有问题。

编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了臭虫，也就置疑了他们的能力，即使你是对的，也有可能会使其中的部分人感到不快。（此外，）在主题中嚷嚷“臭虫”也是特别不老练的。

提问时，即使你私下非常确信已经发现一个真正的臭虫，最好写得象是 你 做错了什么。如果真的有臭虫，你会在回复中看到这点。这样做的话，如果真有虫子，维护者就会向你道歉，这总比你弄砸了然后欠别人一个道歉要强。

低声下气代替不了做自己的家庭作业

有些人明白他们不应该粗鲁或傲慢地行事并要求得到答复，但他们退到相反的低声下气的极端：“我知道我只是个可怜的新丁，一个失败者，但……”。这既使人困扰，也没有用，当伴随着对实际问题含糊的描述时还特别令人反感。

别用低级灵长类动物的办法浪费你我的时间，相反，尽可能清楚地描述背景情况和你的问题，这比低声下气更好地摆正了你的位置。

有时，论坛设有单独的初学者提问版面，如果你真的认为遇到了肤浅的问题，到那去就是了，但一样别低声下气。

描述问题症状而不是猜测

告 诉黑客是什么导致了问题是没用的（如果你的诊断理论是了不起的东西，你还会向别人咨询求助吗？）。所以，确保只是告诉他们问题的原始症状，而不是你的解释 和理论，让他们来解释和诊断。如果你认为陈述自己的猜测很重要，应清楚地说明这只是你的猜测并描述为什么它们不起作用。

愚蠢：
我在编译内核时接连遇到 SIG11 错误，怀疑主板上的某根电路丝断了，找到它们的最好办法是什么？

明智：
我 组装的电脑（K6/233 CPU、FIC-PA2007 主板[威盛 Apollo VP2 芯片组]、Corsair PC133 SDRAM 256Mb 内存）最近在开机 20 分钟左右、做内核编译时频繁地报 SIG11 错，但在头 20 分钟内从不出问题。重启动不会复位时钟，但整夜关机会。更换所有内存未解决问题，相关的典型编译会话日志附后。

由于以上这点许多人似乎难 以掌握，这里有句话可以提醒你：“所有的诊断专家都来自密苏里州”。美国国务院的官方座右铭则是“让我看看”（出自国会议员威勒德.D.范迪弗 ［Willard D. Vandiver］在1899年时的讲话：“我来自一个出产玉米、棉花、牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州， 你必须让我看看。”）针对诊断者而言，这并不是怀疑，而只是一种真实而有用的需求，以便让他们看到与你看到的原始证据尽可能一致的东西，而不是你的猜测与 总结。（所以，）让我们看看。

按时间先后罗列问题症状

刚出问题之前发生的事情通常包含有解决问题最有效的线索。所以，记录中应准确地描述你、电脑和软件在崩溃前都做了什么。在命令行处理的情况下，有会话日志（如运行脚本工具生成的）并引用相关的若干（如20）行记录会非常有帮助。

如果崩溃的程序有诊断选项（如-v详述开关），试着选择这些能在记录中增加排错信息的选项。记住，“多”不等于“好”。试着选取适当的排错级别以便提供有用的信息而不是将阅读者淹没在垃圾中。

如果你的记录很长（如超过四段），在开头简述问题随后按时间先后罗列详细过程也许更有用。这样，黑客在读你的记录时就知道该注意哪些内容了。

描述目标而不是过程

如果你想弄清楚如何做某事（而不是报告一个臭虫），在开头就描述你的目标，然后才陈述遇到问题的特定步骤。

经常出现这种情况，寻求技术帮助的人在脑袋里有个更高层次的目标，他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身有问题，结果要费很大的劲才能通过。

愚蠢：
我怎样才能让某图形程序的颜色拾取器取得十六进制的 RGB 值？

明智：
我正试着用自己选定数值的颜色替换一幅图片的色表，我现在知道的唯一方法是编辑每个表槽，但却无法让某图形程序的颜色拾取器取得十六进制的 RGB 值。

第二种提法是明智的，它使得建议采用更合适的工具以完成任务的回复成为可能。

别要求私下回复电邮

黑客们认为问题的解决过程应该公开、透明，此过程中如果更有才能的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为回复者也因为能力和学识被其它同行看到而得到某种回报。

当你要求私下回复时，此过程和回报都被中止。别这样做，让 回复者 来决定是否私下回答──如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人毫无意义。

对这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么“向我发电邮，我将为论坛归纳这些回复”将是神奇的句子。试着将邮件列表或新闻组从洪水般雷同的回复中解救出来是非常有礼貌的──但你必须信守诺言。

提问应明确

漫无边际的问题通常也被视为没有明确限制的时间无底洞。最有可能给你有用答案的人通常也是最忙的人（假如只是因为他们承担了太多工作的话），这些人对于没有止境的时间无底洞极其敏感，所以他们也倾向于讨厌那些漫无边际的问题。

如果你明确了想让回复者做的事（如指点方向、发送代码、检查补丁或其它），你更有可能得到有用的回复。（因为）这样可以让他们集中精力并间接地设定了他们为帮助你需要花费的时间和精力上限，这很好。

要想理解专家生活的世界，可以这样设想：那里有丰富的专长资源但稀缺的响应时间。你暗中要求他们奉献的时间越少，你越有可能从这些真正懂行也真正很忙的专家那里得到解答。

所以限定你的问题以使专家回答时需要付出的时间最少──这通常与简化问题还不太一样。举个例，“请问可否指点一下哪有好一点的 X 解释？”通常要比“请解释一下 X”明智。如果你的代码不运行了，通常请别人看看哪有问题比叫他们帮你改正更明智。

关于代码的问题

别要求他人给你出问题的代码排错而不提及应该从何入手。张贴几百行的代码，然后说一声“它不能运行”会让你得不到理睬。只贴几十行代码，然后说一句“在第七行以后，本应该显示，但实际出现的是”非常有可能让你得到回复。

最 精确描述代码问题的方法是提供一个能展示问题的最小测试样例。什么是最小测试样例？它是对问题的展现，只需要刚好能够重现非预期行为的代码即可。如何生成 一个最小测试样例？如果你知道哪一行或哪一段代码会产生问题，将其复制并提供刚好够用的外围支撑代码以构成一个完整的样例（够用是指源码刚好能被编译器、 解释器或任何处理它的程序所接受）。如果你不能将问题缩小到特定的段落，复制源码并去除那些与问题无关的代码段。你能提供的最小测试样例越小越好（参见 量不在多，精炼则灵 ）。

生成一个非常小的最小测试样例并不总是可能，但尽力去做是很好的锻练，这有可能帮助你找到需要自己解决的问题。即使你找不到，黑客们喜欢看到你努力过，这将使他们更合作。

如果你只是想让别人帮忙审一下代码，在最开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。

别张贴家庭作业式问题

黑客们善于发现“家庭作业”式的问题。我们中的大多数人已经做了自己的家庭作业，那是该 你 做的，以便从中学到东西。问一下提示没有关系，但不是要求完整的解决方案。

如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在用户组、论坛或（作为最后一招）在项目的“用户”邮件列表或论坛中提问。尽管黑客们 会 看出来，一些老用户也许仍会给你提示。

删除无意义的要求

抵 制这种诱惑，即在求助消息末尾加上诸如“有人能帮我吗？”或“有没有答案？”之类在语义上毫无意义的东西。第一，如果问题描述还不完整，这些附加的东西最 多也只能是多余的。第二，因为它们是多余的，黑客们会认为这些东西烦人──就很有可能用逻辑上无误但打发人的回复，诸如“是的，你可以得到帮助”和“不， 没有给你的帮助”。

[*]一般来说，避免提“是或否”类型的问题，除非你想得到 “是或否”类型的回答。

[*]不要把问题标记为“紧急”， 即使对你而言的确如此

[*]这是你的问题，不要我们的。宣称“紧急”极有可能事与愿违：大多数黑客会直接删除这种消息，他们认为这是无礼和自私地企图得到即时与特殊的关照。

有一点点局部的例外，如果你是在一些知名度很高、会使黑客们激动的地方使用程序，也许值得这样去做。在这种情况下，如果你有期限压力，也很有礼貌地提到这点，人们也许会有足够的兴趣快一点回答。

当 然，这是非常冒险的，因为黑客们对什么是令人激动的标准多半与你的不同。譬如从国际空间站这样张贴没有问题，但代表感觉良好的慈善或政治原因这样做几乎肯 定不行。事实上，张贴诸如“紧急：帮我救救这个毛绒绒的小海豹！”肯定会被黑客回避或光火，即使他们认为毛绒绒的小海豹很重要。

如果你觉得这不可思议，再把剩下的内容多读几遍，直到弄懂了再发贴也不迟。

礼貌总是有益的

礼貌一点，使用“请”和“谢谢你的关注”或者“谢谢你的关照”，让别人明白你感谢他们无偿花时间帮助你。

坦率地讲，这一点没有语法正确、文字清晰、准确、有内容和避免使用专用格式重要（同时也不能替代它们）。黑客们一般宁可读有点唐突但技术鲜明的臭虫报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教我们什么来评价它的）

然尔，如果你已经谈清楚了技术问题，客气一点肯定会增加你得到有用回复的机会。

（我 们必须指出，本文唯一受到一些老黑客认真反对的地方是以前曾经推荐过的“提前谢了”，一些黑客认为这隐含着事后不用再感谢任何人的暗示。我们的建议是要么 先说 “提前谢了”，事后 再 对回复者表示感谢，要么换种方式表达，譬如用“谢谢你的关注”或“谢谢你的关照”）。

问题解决后追加一条简要说明

问题解决后向所有帮助过的人追加一条消息，让他们知道问题是如何解决的并再次感谢。如果问题在邮件列表或新闻组中受到广泛关注，在那里追加此消息比较恰当。

最 理想的方式是向最初提问的线索回复此消息，并在主题中包含“已解决”、“已搞定”或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见线索 “问题 X”和“问题 X-已解决”的潜在回复者就明白不用再浪费时间了（除非他个人觉得“问题 X”有趣），因此可以利用此时间去解决其它问题。

追加的消息用不着太长或太复杂，一句简单的“你好──是网线坏了！谢谢大家──比尔”就比什么都没有要强。事实上，除非解决问题的技术真正高深，一条简短而亲切的总结比长篇大论要好。说明是什么行动解决了问题，用不着重演整个排错的故事。

对于有深度的问题，张贴排错历史的摘要是恰当的。描述问题的最终状态，说明是什么解决了问题，在此之后 才指明可以避免的弯路。应避免的弯路部分应放在正确的解决方案和其它总结材料之后，而不要将此消息搞成侦探推理小说。列出那些帮助过你的名字，那样你会交到朋友的。

除了有礼貌、有内容以外，这种类型的追帖将帮助其他人在邮件列表、新闻组或论坛文档中搜索到真正解决你问题的方案，从而也让他们受益。

最 后，此类追帖还让每位参与协助的人因问题的解决而产生一种满足感。如果你自己不是技术专家或黑客，相信我们，这种感觉对于你寻求帮助的老手和专家是非常重 要的。问题叙述到最后不知所终总是令人沮丧的，黑客们痒痒地渴望它们被解决。“挠痒痒”为你挣到的信誉将对你下次再次张贴提问非常非常的有帮助。

考虑一下怎样才能避免他人将来也遇到类似的问题，问问自己编一份文档或 FAQ 补丁会不会有帮助，如果是的话就将补丁发给维护者。

在黑客中，这种良好的后继行动实际上比传统的礼貌更重要，也是你善待他人而赢得声誉的方式，这是非常有价值的财富。

如何解读回答

“读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸

有一个古老而神圣的传统：如果你收到“读读该死的手册”（RTFM） 的回复，发信人认为你应该去“读读该死的手册”。他或她多半是对的，去读一下吧。

“读读该死的手册”（RTFM）有个年轻一点的亲戚，如果你收到“搜搜该死的网络”（STFW）的回复，发信人认为你应该“搜搜该死的网络”。那人多半也是对的，去搜一下吧。(更温和一点的说法是“谷歌是你的朋友！”)

在论坛，你也可能被要求去搜索论坛的文档。事实上，有人甚至可能热心地为你提供以前解决此问题的线索。但不要依赖这种关照，提问前应该先搜索一下文档。

通常，叫你搜索的人已经打开了能解决你问题的手册或网页，正在一边看一边敲键盘。这些回复意味着他认为：第一，你要的信息很容易找到。第二，自已找要比别人喂到嘴里能学得更多。

你不应该觉得这样就被冒犯了，按黑客的标准，回复者没有不理你就是在向你表示某种尊敬，你反而应该感谢他热切地想帮助你。

如果还不明白……

如果你看不懂回答，不要马上回复一个要求说明的消息，先试试那些最初提问时用过的相同工具（如手册、FAQ、网页、懂行的朋友等）试着搞懂回答。如果还是需要说明，展现你已经明白的。

譬 如，假如我告诉你：“看起来象是某输入项有问题，你需要清除它”，接着是个 不好 的回帖：“什么是某输入项？”。而这是一个 很好 的跟帖：“是的，我读了手册，某某输入项只在 -z 和 -p 开关中被提到，但都没有涉及到如何清除它们，你指的是哪一个还是我弄错了什么？”

对待无礼

很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当、一针见血式的交流风格，这种风格对于更关注解决问题而不是使别人感觉舒服而混乱的人是很自然的。

如果你觉得被冒犯了，试着平静地反应。如果有人真的做了过格的事，邮件列表、新闻组或论坛中的前辈多半会招呼他。如果这 没有 发生而你却光火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而 你 将被视为有错的一方，这将伤害到你获取信息或帮助的机会。

另 一方面，你会偶而真的碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击、用犀利的语言将其驳得体无完肤都是可以接受的。然尔，在行事之前一定 要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外来者，避开这种莽撞的 机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。

（有些人断言很多黑客都有轻度的自闭症或阿斯伯 格综合症，缺少用于润滑人类社会“正常”交往所需的脑电路。这既可能是真也可能是假。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的 古怪行为。只管这么干好了，我们不在乎。我们 喜欢 现在这个样子，并且一般都对病号标记有站得住脚的怀疑。）

在下一节，我们会谈到另一个问题，当 你 行为不当时会受到的“冒犯”。

别象失败者那样反应

在黑客社区的论坛中有那么几次你可能会搞砸──以本文描述或类似的方式。你会被示众是如何搞砸的，也许言语中还会带点颜色。

这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反，你该这样去做：

熬过去，这很正常。事实上，它是有益健康与恰当的。

社区的标准不会自己维持，它们是通过参与者积极而 公开 地执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，这不是事情运作的方式。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。

也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称“如果你不想帮助用户就闭嘴”。有思路的参与者纷纷离开的结果只会使它们变成了毫无意义的唠叨与无用的技术论坛。

是夸张的“友谊”（以上述方式）还是有用？挑一个。

记 着：当黑客说你搞砸了，并且(无论多么刺耳地)告诉你别再这样做时，他正在为关心你和他的社区而行动。对他而言，不理你并将你从他的生活中滤除要容易得 多。如果你无法做到感谢，至少要有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人象对待脆弱的洋娃娃那 样对你。

有时候，即使你没有搞砸（或者只是别人想象你搞砸了）， 有些人也会无缘无故地攻击你本人。在这种情况下，报怨倒是 真的 会把问题搞砸。

这些找茬者要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些找茬者在给自己找麻烦，这点你不用操心。

也别让自己卷入口水战，大多数口水战最好不要理睬──当然，是在你核实它们只是口水战、没有指出你搞砸的地方，而且没有巧妙地将问题真正的答案藏于其中之后（这也是可能的）。

提问禁忌

下面是些典型的愚蠢问题和黑客不回答它们时的想法。

问：我到哪可以找到某程序或 X 资源？
问：我怎样用 X 做 Y？
问：如何配置我的 shell 提示？
问：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文档转为 TeX 格式吗？
问：我的{程序、配置、SQL 语句}不运行了
问：我的视窗电脑出问题了，你能帮忙吗？
问：我的程序不运行了，我认为系统工具X有问题
问：我安装 Linux 或 X 遇到困难，你能帮忙吗？
问：我如何才能破解超级用户口令/盗取通道操作员的特权/查看某人的电子邮件？
问：
我到哪可以找到某程序或 X 资源？

答：
在我找到它的同样地方，笨旦──在网页搜索引擎上。上帝啊，难道还有人不知道如何使用 谷歌 吗？

问：
我怎样用 X 做 Y？

答：
如果你想解决的是 Y，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对要解决的 Y 问题糊涂，还被特定形势禁锢了思维。等他们把问题弄好再说。

问：
如何配置我的 shell 提示？

答：
如果你有足够的智慧提这个问题，你也该有足够的智慧去 “读读该死的手册”（RTFM），然后自己去找出来。

问：
我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文档转为 TeX 格式吗？

答：
试试就知道了。如果你试过，你既知道了答案，又不用浪费我的时间了。

问：
我的{程序、配置、SQL 语句}不运行了

答：
这不是一个问题，我也没有兴趣去猜你有什么问题──我有更要紧的事要做。看到这种东西，我的反应一般如下：

你还有什么补充吗？

噢，太糟了，希望你能搞定。

这跟我究竟有什么关系？

问：
我的视窗电脑出问题了，你能帮忙吗？

答：
是的，把视窗垃圾删了，装个象 Linux 或 BSD 的开源操作系统吧。

注意：如果程序有官方的视窗版或者与视窗有交互(如 Samba)，你 可以 问与视窗相关的问题，只是别对问题是由视窗操作系统而不是程序本身造成的回复感到惊讶，因为视窗一般来说太差，这种说法一般都成立。

问：
我的程序不运行了，我认为系统工具 X 有问题

答：
你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与库文件有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文档作后盾。

问：
我安装 Linux 或 X 遇到困难，你能帮忙吗？

答：
不行，我需要亲手操作你的电脑才能帮你排错，去向当地的 Linux 用户组寻求方便的帮助（你可以在 这里 找到用户组列表）

注意：如果安装问题与某 Linux 发行版有关，在针对 它 的邮件列表、论坛或本地用户组织中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 “linux”和 所有 被怀疑的硬件 [作关键词] 仔细搜索。

问：
我如何才能破解超级用户口令/盗取通道操作员的特权/查看某人的电子邮件？

答：
想做这种事情说明你是个卑劣的家伙，想让黑客教你做这种事情说明你是个白痴。

好问题与坏问题

最后，我将通过举例来演示提问的智慧。同样的问题两种提法，一种愚蠢，另一种明智。

愚蠢：我在哪能找到关于 Foonly Flurbamatic 设备的东西？
这个问题在乞求得到 “搜搜该死的网络”（STFW） 式的回复。

明智： 我用谷歌搜索过“Foonly Flurbamatic 2600”，但没有找到什么有用的，有谁知道在哪能找到这种设备的编程信息？
这个人已经搜索过网络了，而且听起来他可能真的遇到了问题。

愚蠢： 我不能编译某项目的源代码，它为什么这么破？
提问者假设是别人搞砸了，太自大了。

明智： 某项目的源代码不能在某 Linux 6.2 版下编译。我读了常见问题文档，但其中没有与某 Linux 相关的内容。这是编译时的记录，我做错了什么吗？
提问者已经指明了运行环境，读了常见问题文档（FAQ），列出了错误，也没有假设问题是别人的过错，这家伙值得注意。

愚蠢： 我的主板有问题，谁能帮我？
某黑客对此的反应可能是：“是的，还需要帮你拍背和换尿布吗？”，然后是敲下删除键。

明 智： 我在 S2464 主板上试过 X、Y 和 Z，当它们都失败后，又试了 A、B 和 C。注意我试 C 时的奇怪症状，显然某某东西正在做某某事情，这不是期望的行为。通常在 Athlon MP 主板上导致某某事情的原因是什么？有谁知道我还能再试点什么以确定问题？
相反地，这个人看来值得回答。他或她展现了解决问题的能力而不是坐等天上掉馅饼。

在最后那个问题中，注意“给我一个回答”与“请帮我看看我还能再做点什么测试以得到启发”之间细微但重要的差别。

事实上，最后那个问题基本上源于 2001 年 8 月 Linux 内核邮件列表（lkml）上的真实事件，是我（Eric）当时提了那个问题，我发现 Tyan S2462 主板有神秘的死机现象，邮件列表成员给我提供了解决此问题的关键信息。

通过这种提问方式，我给了别人可以咀嚼玩味的东西。我设法使之对参与者既轻松又有吸引力，也表明了对同行能力的尊敬并邀请他们与我一起协商。通过告诉他们我已经走过的弯路，我还表明了对他们宝贵时间的尊重。

事后，当我感谢大家并评论这次良好的经历时，一个 Linux 内核邮件列表的成员谈到，他认为我得到答案并不是因为我的名字挂在列表上，而只是因为我正确的提问方式。

黑客们在某种方面是非常不留情面的精英分子。我想在这事上他是对的，如果我 表现得 象个不劳而获的寄生虫，不管我是谁都会被忽略或斥责。他建议将整个事件作为对其它人提问的指导，这直接导致了本文的编写。

如果得不到回答

如果得不到回答，请不要认为我们不想帮你，有时只是因为被问到的小组成员的确不知道答案。没有回复不等于不被理睬，当然必须承认从外面很难看出两者的差别。

一般而言，直接将问题再张贴一次不好，这会被视为毫无意义的骚扰。耐心一点，知道你问题答案的人可能生活在不同的时区，有可能正在睡觉，也有可能你的问题一开始就没有组织好。

还有其它资源可以寻求帮助，通常是在一些面向新手的资源中。

有许多在线与本地的用户组织，虽然它们自己不编写任何软件，但是对软件很热心。这些用户组通常因互助和帮助新手而形成。

还有众多大小商业公司提供签约支持服务（红帽与 SpikeSource 是两家最出名的，还有许多其它的）。别因为要付点钱才有支持就感到沮丧！毕竟，如果你车子的汽缸垫烧了，你多半还得花钱找个修理店把它弄好。即使软件没花你一分钱，你总不能指望服务支持都是免费的。

象 Linux 这样流行的软件，每个开发者至少有一万个以上的用户，一个人不可能应付这么多用户的服务要求。记住，即使你必须付费才能得到支持，也比你还得额外花钱买软件要少得多（而且对封闭源代码软件的服务支持与开源软件相比通常还要贵一点，也要差一点）。

如何更好地回答

态度和善一点。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。

对初犯者私下回复。 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找 FAQ 都不知道。

如果你不确定，一定要说出来！ 一个听起来权威的错误回复比没有还要糟，别因为听起来象个专家好玩就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。

如果帮不了忙，别妨碍。 不要在具体步骤上开玩笑，那样也许会毁了用户的安装──有些可怜的呆瓜会把它当成真的指令。

探索性的反问以引出更多的细节。 如果你做得好，提问者可以学到点东西──你也可以。试试将很差的问题转变成好问题，别忘了我们都曾是新手。

尽管对那些懒虫报怨一声“读读该死的手册”（RTFM）是正当的，指出文档的位置（即使只是建议做个谷歌关键词搜索）会更好

如果你决意回答，给出好的答案。 当别人正在用错误的工具或方法时别建议笨拙的权宜之计，应推荐更好的工具，重新组织问题。

帮助你的社区从中学习。当回复一个好问题时，问问自己 “如何修改相关文件或 FAQ 文档以免再次解答同样的问题？”，接着再向文档维护者发一份补丁。

如果你是在研究一番后才做出的回答，展现你的技巧而不是直接端出结果。毕竟“授人以鱼，不如授人以渔”。

相关资源

如果需要个人电脑、Unix 和互联网如何工作的基础知识，参阅 Unix 和互联网工作的基本原理。

当你发布软件或补丁时，试着按 软件发布实践 操作。

鸣谢

伊夫林.米切尔（Evelyn Mitchell）贡献了一些愚蠢问题例子并启发了编写“如何更好地回答问题”这一节，米哈伊尔.罗门迪克（Mikhail Ramendik）贡献了一些特别有价值的建议和改进。

_________________
/***
* @brief 启智开源 编码自由
* @brief Open Source, Coding for free!
* @param author 佟辉 Tong Hui]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date>2011-11-01 02:01:14</wp:post_date>
		<wp:post_date_gmt>2011-11-01 02:01:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%8f%90%e9%97%ae%e7%9a%84%e6%99%ba%e6%85%a7-how-to-ask-questions-the-smart-way-eric-raymond</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="question"><![CDATA[question]]></category>
		<category domain="post_tag" nicename="smart"><![CDATA[smart]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_a0faeb9665d5576efb71b3f72b5ff2e8</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_bad2ca7f1f0ccedade8706af642c1251</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Top Treadmill]]></wp:comment_author>
			<wp:comment_author_email>yellowmaster@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.toptreadmillsreviews.com/</wp:comment_author_url>
			<wp:comment_author_IP>109.230.216.20</wp:comment_author_IP>
			<wp:comment_date>2011-12-03 11:20:37</wp:comment_date>
			<wp:comment_date_gmt>2011-12-03 03:20:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[博主很牛x]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>折腾rails3</title>
		<link></link>
		<pubDate>Thu, 03 Nov 2011 13:45:59 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=35</guid>
		<description></description>
		<content:encoded><![CDATA[///////////gem install 报错或是太慢,gem install 本地安装/////////////////////////

或是gem install 太慢 或是无法联接 timeout

这时可以通过本地安装的方式安装gem

首先进入gem官网<a href="http://rubygems.org/">http://rubygems.org/</a>

然后搜索找到你要安装的gem，下载下来

应该是像rails-3.0.gem的文件

然后执行gem install -l rails-3.0.gem

-l参数意思是直接执行从本地安装

如果该gem没有依赖包，则直接就安装成功了

如果有依赖包，则会抱错提示缺少依赖的gem

然后只要再去下载该包，gem install -l xxx.gem

按照这个步骤安装虽然操作不方便，但是非常快。

如果要新装一台机器的话，只需把所有依赖包放到一个文件夹里，依次安装所有包，那会非常节省时间的，而且不一定需要联网的。

/////////////////////////安装不了rails3////////////////////////////

当出现以上错误时，有几种原因，网速过慢、gem服务器太慢、被墙了。
解决方案有几种，一种是自己一个一个下载gem包，本地安装，不过太麻烦。
另一种是修改源地址：
先查看一下当前源地址
<pre>gem env
gem sources list</pre>
一般默认是：http://rubygems.org/
增加几个源路径：
<pre>sudo gem sources -a http://gems.rubyforge.org
sudo gem sources -a http://gems.github.com</pre>
问题应该解决了。关于gem sources的用法可以看帮助:gem help sources

//////////////////////////////////////加速gem///////////////////

下载gem-fast， 来加速你的Gem安装！（还有附赠下载进度条显示噢）

terminal中输入： gem install gem-fast

如果遇到问题， 想回退到之前的下载模式， 只需：gem uninstall gem-fast即可

一切如你所愿！

项目地址： http://github.com/dazuiba/gem-fast

Bug Track:  http://github.com/dazuiba/gem-fast/issues
<ol>
	<li>jhjguxin@jhjguxin-Aspire-4750:~$ sudo apt-get install curl</li>
	<li>Reading package lists... Done</li>
	<li>Building dependency tree</li>
	<li>Reading state information... Done</li>
	<li>The following NEW packages will be installed:</li>
	<li>  curl</li>
	<li>0 upgraded, 1 newly installed, 0 to remove and 1 not upgraded.</li>
	<li>Need to get 134 kB of archives.</li>
	<li>After this operation, 389 kB of additional disk space will be used.</li>
	<li>Get:1 http://mirrors.sohu.com/ubuntu/ oneiric/main curl i386 7.21.6-3ubuntu3 [134 kB]</li>
	<li>Fetched 134 kB in 1s (132 kB/s)</li>
	<li>Selecting previously deselected package curl.</li>
	<li>(Reading database ... 182147 files and directories currently installed.)</li>
	<li>Unpacking curl (from .../curl_7.21.6-3ubuntu3_i386.deb) ...</li>
	<li>Processing triggers for man-db ...</li>
	<li>Setting up curl (7.21.6-3ubuntu3) ...</li>
	<li>j</li>
	<li>jhjguxin@jhjguxin-Aspire-4750:~$ sudo gem install gem-fast</li>
	<li>Fetching: gem-fast-0.0.6.3.gem (100%)</li>
	<li>========================================================================</li>
	<li>  Thanks for installing Gem-Fast!</li>
	<li>  Gem-Fast will use curl to make your gem install faster!</li>
	<li>  Try it now use:  gem install rails</li>
	<li>========================================================================</li>
	<li>Successfully installed gem-fast-0.0.6.3</li>
	<li>1 gem installed</li>
	<li>Installing ri documentation for gem-fast-0.0.6.3...</li>
	<li>Installing RDoc documentation for gem-fast-0.0.6.3...</li>
	<li>jhjguxin@jhjguxin-Aspire-4750:~$ sudo gem install rails</li>
	<li>Downloading http://rubygems.org/latest_specs.4.8.gz</li>
	<li>##############################                                            42.2%</li>
</ol>
///////////结果呢 各种爬墙 各种 折腾都没能在线安装好 rails3 最后实在不行 本地安装咯 31个gem包//////////////////////

我的ubuntu11.10 在<a href="http://rubygems.org/">http://rubygems.org/</a> 上面下载了如下的包（放在一个文件中），实际上还是根据实际的依赖提示来

actionmailer-3.1.1.gem    i18n-0.6.0.gem         rails-3.1.1.gem
actionpack-3.1.1.gem      json-1.6.1.gem         railties-3.1.1.gem
activemodel-3.1.1.gem     mail-2.3.0.gem         rake-0.9.2.2.gem
activerecord-3.1.1.gem    mime-types-1.17.2.gem  rdoc-3.11.gem
activeresource-3.1.1.gem  multi_json-1.0.3.gem   sprockets-2.0.3.gem
activesupport-3.1.1.gem   polyglot-0.3.3.gem     thor-0.14.6.gem
arel-2.2.1.gem            rack-1.3.5.gem         tilt-1.3.3.gem
builder-3.0.0.gem         rack-cache-1.1.gem     treetop-1.4.10.gem
bundler-1.0.21.gem        rack-mount-0.8.3.gem   tzinfo-0.3.30.gem
erubis-2.7.0.gem          rack-ssl-1.3.2.gem
hike-1.2.1.gem            rack-test-0.6.1.gem

然后：：：

<a href="mailto:jhjguxin@jhjguxin-virtual-machine:~/Downloads/rails$">jhjguxin@jhjguxin-virtual-machine:~/Downloads/rails$</a> sudo gem install rails-3.1.1.gem
Building native extensions.  This could take a while...
Depending on your version of ruby, you may need to install ruby rdoc/ri data:

&lt;= 1.8.6 : unsupported
 = 1.8.7 : gem install rdoc-data; rdoc-data --install
 = 1.9.1 : gem install rdoc-data; rdoc-data --install
&gt;= 1.9.2 : nothing to do! Yay!
Successfully installed multi_json-1.0.3
Successfully installed activesupport-3.1.1
Successfully installed builder-3.0.0
Successfully installed i18n-0.6.0
Successfully installed activemodel-3.1.1
Successfully installed rack-1.3.5
Successfully installed rack-cache-1.1
Successfully installed rack-test-0.6.1
Successfully installed rack-mount-0.8.3
Successfully installed hike-1.2.1
Successfully installed tilt-1.3.3
Successfully installed sprockets-2.0.3
Successfully installed erubis-2.7.0
Successfully installed actionpack-3.1.1
Successfully installed arel-2.2.1
Successfully installed tzinfo-0.3.30
Successfully installed activerecord-3.1.1
Successfully installed activeresource-3.1.1
Successfully installed mime-types-1.17.2
Successfully installed polyglot-0.3.3
Successfully installed treetop-1.4.10
Successfully installed mail-2.3.0
Successfully installed actionmailer-3.1.1
Successfully installed rake-0.9.2.2
Successfully installed thor-0.14.6
Successfully installed rack-ssl-1.3.2
Successfully installed json-1.6.1
Successfully installed rdoc-3.11
Successfully installed railties-3.1.1
Successfully installed bundler-1.0.21
Successfully installed rails-3.1.1
31 gems installed
Installing ri documentation for multi_json-1.0.3...
Installing ri documentation for activesupport-3.1.1...
Installing ri documentation for builder-3.0.0...
Installing ri documentation for i18n-0.6.0...
Installing ri documentation for activemodel-3.1.1...
Installing ri documentation for rack-1.3.5...
Installing ri documentation for rack-cache-1.1...
Installing ri documentation for rack-test-0.6.1...
Installing ri documentation for rack-mount-0.8.3...
Installing ri documentation for hike-1.2.1...
Installing ri documentation for tilt-1.3.3...
Installing ri documentation for sprockets-2.0.3...
Installing ri documentation for erubis-2.7.0...
Installing ri documentation for actionpack-3.1.1...
Installing ri documentation for arel-2.2.1...
Installing ri documentation for tzinfo-0.3.30...
Installing ri documentation for activerecord-3.1.1...
Installing ri documentation for activeresource-3.1.1...
Installing ri documentation for mime-types-1.17.2...
Installing ri documentation for polyglot-0.3.3...
Installing ri documentation for treetop-1.4.10...
Installing ri documentation for mail-2.3.0...
Installing ri documentation for actionmailer-3.1.1...
Installing ri documentation for rake-0.9.2.2...
Installing ri documentation for thor-0.14.6...
Installing ri documentation for rack-ssl-1.3.2...
Installing ri documentation for json-1.6.1...
Installing ri documentation for rdoc-3.11...
Installing ri documentation for railties-3.1.1...
Installing ri documentation for bundler-1.0.21...
Installing ri documentation for rails-3.1.1...
Installing RDoc documentation for multi_json-1.0.3...
Installing RDoc documentation for activesupport-3.1.1...
Installing RDoc documentation for builder-3.0.0...
Installing RDoc documentation for i18n-0.6.0...
Installing RDoc documentation for activemodel-3.1.1...
Installing RDoc documentation for rack-1.3.5...
Installing RDoc documentation for rack-cache-1.1...
Installing RDoc documentation for rack-test-0.6.1...
Installing RDoc documentation for rack-mount-0.8.3...
Installing RDoc documentation for hike-1.2.1...
Installing RDoc documentation for tilt-1.3.3...
Installing RDoc documentation for sprockets-2.0.3...
Installing RDoc documentation for erubis-2.7.0...
Installing RDoc documentation for actionpack-3.1.1...
Installing RDoc documentation for arel-2.2.1...
Installing RDoc documentation for tzinfo-0.3.30...
Installing RDoc documentation for activerecord-3.1.1...
Installing RDoc documentation for activeresource-3.1.1...
Installing RDoc documentation for mime-types-1.17.2...
Installing RDoc documentation for polyglot-0.3.3...
Installing RDoc documentation for treetop-1.4.10...
Installing RDoc documentation for mail-2.3.0...
Installing RDoc documentation for actionmailer-3.1.1...
Installing RDoc documentation for rake-0.9.2.2...
Installing RDoc documentation for thor-0.14.6...
Installing RDoc documentation for rack-ssl-1.3.2...
Installing RDoc documentation for json-1.6.1...
Installing RDoc documentation for rdoc-3.11...
Installing RDoc documentation for railties-3.1.1...
Installing RDoc documentation for bundler-1.0.21...
Installing RDoc documentation for rails-3.1.1...
jhjguxin@jhjguxin-virtual-machine:~/Downloads/rails$ rails -v
Rails 3.1.1]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date>2011-11-03 13:45:59</wp:post_date>
		<wp:post_date_gmt>2011-11-03 13:45:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%8a%98%e8%85%berails3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fast"><![CDATA[fast]]></category>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>蓄势待发！Rails 3 介绍</title>
		<link></link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=39</guid>
		<description></description>
		<content:encoded><![CDATA[在过去的两年中，Ruby on Rails 应用程序框架已经具备了一个由托管和服务提供商组成的一体式行业、一套功能广泛且令人印象深刻的开发工具，还有各种在 Ruby 用语里称为 <em>gems</em> 和 <em>plug-ins</em> 的补充库 — 可增强软件的功能。例如 Engine Yard 和 Heroku 就是两个提供虚拟的、方便的 Rails 软件托管的公司；Oink 和 Bullet 分别用来显示内存使用和性能；Clearance 和 Sunspot 则用来提供现成的身份验证和快速的索引式搜索。
<div><a name="fua"></a>
<h2>常用缩略语</h2>
<div>
<ul>
	<li><strong>CRUD</strong>：创建、读取、更新、删除</li>
	<li><strong>HTML</strong>：超文本标记语言</li>
	<li><strong>REST</strong>：具象状态传输</li>
	<li><strong>SQL</strong>：结构化查询语言</li>
</ul>
</div>
</div>
自 2007 年以来，Rails 社区也已不断壮大。全球有众多的 Rails 开发人员充满活力、团结互助，并且渴望不断地改进该软件。可以毫不夸张地说，Rails 的改进应归功于社区，因为是程序员之间不断的相互超越使得构建出的软件越来越完善。如此不断地循环，各个功能才得以从初期阶段快速发展，逐渐变的实用、功 能不断强大并完善，最终成为不可或缺的工具。在很多情况下，社区认为最基本的 gems 和 plug-ins 都会保留到 Rails 核心中。Rails 的 <em>named scopes</em>（一个查询快捷方式），可实现与 <em>nested forms</em> 相同的功能。这是一个新增的功能，可取代以前的尝试，并在相同的 HTML 表单中创建和编辑多个模型。实际上，对于 Rails 开发人员来说最困难的任务或许就是跟上变化的节奏。（幸运的是，目前有一些 Ruby 和 Ruby on Rails 的每周播客，这些播客会组织并呈现最新趋势以及分享最佳实践。）

Rails 下一个主要的发布是 Rails 版本 3，该版本继续保持工具包的快速改进。与以往相同，该软件仍然非常 “固执”，即仍然偏向于约定优于配置。Rails 的核心组件始终存在，即 RESTful 路径、关系、验证、模板和数据库抽象化。不过，这些组件的许多内部内容已经被重写或者进行了改进。最明显的并且很大程度上借用了 Merb 的理念的就是很多 Rails 的基本功能不再密切结合。例如，以前只对 Rails 应用程序可用的数据验证便捷功能现在成为独立的组件，并且可以包含在 Vanilla Ruby 代码中。如呈现部件和模板等控制器功能，现在也是相互独立的，并且可以嵌入到任一库中。

在这篇文章中，您将会了解 Rails 3 及其众多变化和附加功能，以及如何从头创建一个新的 Rails 3 应用程序。截至 2010 年 2 月中旬，Rails 3 还只是预发布的 Beta 版，核心小组正在收集补丁、反馈和文档，以准备在夏季前发布正式版本。不过当前的 Rails 3 版本足够用于构建应用程序以及了解诸多新增功能。

<a name="changes"></a>大改动、小变化

Rails 3 中变动的数量太多，无法在此全部列出。要阅读带有补充资料的完整列表，请查询 Rails 3 发布通知（请参阅 <a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#resources">参考资料</a> 中的链接）。此处，仅介绍一些很可能会影响到开发人员的一些变动：
<ul>
	<li><strong>一条命令可以控制所有事件。</strong>有了 Rails 3，无需在每一个应用程序中使用整套脚本（script/server、script/generate 以及其他），使用一条命令即可取代其功能，该命令恰如其分地被命名为 <code>rails</code>。例如，在以前需要键入 <code>./script/console</code> 的地方，您现在只需键入 <code>rails console</code>。<code>rails</code> 命令还可以像以前一样生成新的应用程序。其运行方式依据其是否在现有的 Rails 应用程序中启动而有所不同。</li>
	<li><strong>可为依赖性提供具体的解决方案。</strong>协调和解决 gem 依赖性是个棘手的问题。与可用 gems 的集合一样，gem 的修订也是随系统的不同而有所变化。因为具有这样的多样化，所以很难广泛地部署或共享一个 Rails 应用程序。Rails 3 引入了 Bundler，这是一个专门用于管理依赖性的实用程序（因此无需再使用 <code>config.gem</code>）。您可以在应用程序根目录内一个名为 <em>Gemfile</em> 的目录中声明依赖性。Bundler 将下载和存储所有指定的 gem。您甚至可以在应用程序中 “打包” gem ，以便阻止从外部存储库下载。</li>
	<li><strong>不带查询语句的查询功能。</strong>一直以来，Rails 已经可以充分运用特定于领域的语言 (DSL) — 考虑一下 <code>has_one</code> 或 <code>validates_numericality_of</code> — 有一个明显的例外：数据库查询。可以确定地说，Rails 的动态搜寻器便捷、易用，但混合使用选项哈希值如 <code>:conditions</code>、<code>:order</code> 和 <code>:limit</code> 非常常见，因为都是 <code>find_by_sql</code> 语句。Rails 3 合并了 <em>relational algebra</em>，这是专门设计用于表示查询的 DSL。基本命令包括 <code>project</code>（用于选择列）、<code>where</code>（用于表示条件）、<code>join</code>（用于指定关系）、<code>take</code> 和 <code>skip</code>（分别用于限定和抵消），以及 <code>group</code>（用于聚集）等其他属性。</li>
	<li><strong>用于模糊样板代码的控制器。</strong>Rails 控制器的核心操作 —<code>new</code>、<code>create</code>、<code>edit</code> 和 <code>update</code> — 通常不变，尤其是当控制器大部分用于 CRUD 操作时。事实上，控制器生成器的输出 <code>./script/generate controller</code> 一般不需要进一步的修改就可以满足需要。考虑到这些相似性，Rails 3 引入了 <code>Responder</code> 来进一步简化代码。例如下面是 <code>create</code>操作全部所需的几行代码：
<table width="50%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>  class PostsController
    respond_to :html, :xml

    def create
      @post = Post.create(params[:post])
      respond_with(@post)
    end
  end</pre>
</td>
</tr>
</tbody>
</table>
在该代码片段中，如果 <code>@post</code> 保存成功，<code>respond_with(@post)</code> 将发送到 <code>show</code> 以显示新的记录，而假设对象的验证失败，则发送到 <code>new</code>。</li>
</ul>
这仅仅是一个小样本。您可以在下一章节找到这些新功能的示例以及更多内容，例如从头构建 Rails 3 应用程序。

&nbsp;

<a name="app"></a>首次构建 Rails 3 应用程序

要运行 Rails 3，您的系统必须安装有 Ruby 1.8.7 版或 Ruby 1.9.2 版，或者该编程语言的较新版本及其附加库和解释程序。您的机器上最好同时安装有 Git 软件版本控制系统，因为 Rails 3 和许多其他重要的 Rails 项目都是在 Git 中进行维护的。您的系统还需要数据库引擎，例如 SQLite（版本 3）、MySQL 或者 PostgreSQL。开发 Rails 应用程序时，Web 服务器不是必须的，但它通常是生产部署的一部分。

要创建 Rails 3 应用程序，您必须拥有 Rails 3 预发布 gem 和所有其相关产品。这时，您只需通过运行几条命令（请参阅 <a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#list1">清单 1</a>）即可安装所需的组件。（在您继续进行之前请查看 Rails 3 文档，因为根据版本的不同具体的操作会有所不同。）
<a name="list1"></a><strong>清单 1. Rails 3 预发布 gem 和相关产品</strong>
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>				
$ gem install rails3b
Due to a rubygems bug, you must uninstall all older versions of bundler for 0.9 to work
Successfully installed mime-types-1.16
Successfully installed mail-2.1.2
Successfully installed text-hyphen-1.0.0
Successfully installed text-format-1.0.0
Successfully installed memcache-client-1.7.8
Successfully installed rack-1.1.0
Successfully installed rack-mount-0.4.7
Successfully installed abstract-1.0.0
Successfully installed erubis-2.6.5
Successfully installed i18n-0.3.3
Successfully installed tzinfo-0.3.16
Successfully installed bundler-0.9.5
Successfully installed thor-0.13.1
Successfully installed rails3b-3.0.1
14 gems installed

$ gem install arel --pre
Successfully installed activesupport-3.0.0.beta
Successfully installed arel-0.2.pre
2 gems installed

$ gem install rails --pre
Successfully installed activemodel-3.0.0.beta
Successfully installed actionpack-3.0.0.beta
Successfully installed activerecord-3.0.0.beta
Successfully installed activeresource-3.0.0.beta
Successfully installed actionmailer-3.0.0.beta
Successfully installed railties-3.0.0.beta
Successfully installed rails-3.0.0.beta
7 gems installed</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

下一步是生成应用程序 — 在 <a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#list2">清单 2</a> 中显示了一个小 wiki。该应用程序创建并管理文章。每一篇文章都有一个标题和一些散文，通过从现有页面的正文创建一个指向新文章的引用，您即可创建一篇新的文章。引用可以是任一驼峰式大小写单词，例如 <em>TheSolarSystem</em> 或者 <em>TheOscars</em>。

<strong>注意：</strong>可通过下面的 <a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#download">下载</a> 表格获取该 wiki 应用程序的源代码。
<a name="list2"></a><strong>清单 2. Wiki Rails 应用程序</strong>
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>				
$ rails wiki</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

如果您运行了 <code>ls -lR</code> 来查看应用程序的内容，将会显示一些新文件：
<ul>
	<li><em>Gemfile</em>，即前面曾提到的 gem 清单。该文件必须至少包含两行：一行指向 Rails 3 beta gem 的源，另一行则绑定 Rails 3 beta gem 本身。您或许还需要第三行（至少）以连接数据库：
<table width="50%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>source 'http://gemcutter.org'
gem "rails", "3.0.0.beta"
gem "sqlite3-ruby", :require =&gt; "sqlite3"</pre>
</td>
</tr>
</tbody>
</table>
</li>
	<li><em>config/application.rb</em>，它包含 config/environment.rb 中以前提供的很多选项。虽然后者仍然保留，但很大程度上已不再使用该文件。config/application.rb 的一个显著的附加功能是 <em>generators block</em>：
<table width="50%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>config.generators do |g|
  g.orm             :active_record
  g.template_engine :erb
  g.test_framework  :test_unit, :fixture =&gt; true
end</pre>
</td>
</tr>
</tbody>
</table>
您的 Rails 3 应用程序可以使用一些兼容的对象关系映射器 (ORM)、模板引擎和测试框架。生成器块会指定应用程序的首选项，并根据您的模型、视图等调用适当的生成器。</li>
	<li><em>db/seeds.rb</em>，该文件对于 Rails 3 来说并不是新增的，但却有必要着重介绍一下，因为它是最近不久刚增加的功能（在 Rails 2.3.4 版引入的）。如果您的应用程序需要初始数据以正常运行，例如一个管理用户、价格代码或静态页面，那么您可以在 db/seeds.rb 中创建这些数据并运行任务 <code>rake db:seed</code>。在 Seed 文件之前，不存在初始化的惯例，许多开发人员把代码放入迁移中，这样容易混淆创建数据库和填充数据库之间的不同之处。</li>
	<li><em>config.ru</em>，存在于每个 Rails 3 应用程序的根目录下，即所谓的 <em>rackup</em> 文件，也就是基于 Rack 的应用程序的配置文件。Rails 3 是一个 Rack 应用程序，并且与任一支持 Rack 的 Web 服务器相兼容。总的来说，除非您想要添加其他 Rack 组件，否则请不要更改 config.ru 文件。</li>
</ul>
还有一些其他新文件；不过大多数看上去与 Rails 版本 2.3 相似。config/routes.rb 文件的功能与以往相同，只不过更加简化、更具有 Ruby 的特色。您将很快会看到一个示例。

生成应用程序并编辑 Gemfile 以声明依赖性之后，下一步就是收集应用程序所需的 gem。这是由新的实用程序 <code>bundle</code>（请参阅 <a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#list3">清单 3</a>）来完成的工作。
<a name="list3"></a><strong>清单 3. 收集所需的 gem</strong>
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>				
$ bundle
installFetching source index from http://gemcutter.org
Resolving dependencies
Installing abstract (1.0.0) from system gems
Installing actionmailer (3.0.0.beta) from system gems
Installing actionpack (3.0.0.beta) from system gems
Installing activemodel (3.0.0.beta) from system gems
Installing activerecord (3.0.0.beta) from system gems
Installing activeresource (3.0.0.beta) from system gems
Installing activesupport (3.0.0.beta) from system gems
Installing arel (0.2.1) from rubygems repository at http://gemcutter.org
Installing builder (2.1.2) from system gems
Installing bundler (0.9.7) from rubygems repository at http://gemcutter.org
Installing erubis (2.6.5) from system gems
Installing i18n (0.3.3) from system gems
Installing mail (2.1.2) from system gems
Installing memcache-client (1.7.8) from system gems
Installing mime-types (1.16) from system gems
Installing rack (1.1.0) from system gems
Installing rack-mount (0.4.7) from system gems
Installing rack-test (0.5.3) from system gems
Installing rails (3.0.0.beta) from system gems
Installing railties (3.0.0.beta) from system gems
Installing rake (0.8.7) from system gems
Installing sqlite3-ruby (1.2.5) from rubygems repository at
    http://gemcutter.org with native extensions
Installing text-format (1.0.0) from system gems
Installing text-hyphen (1.0.0) from system gems
Installing thor (0.13.3) from rubygems repository at http://gemcutter.org
Installing tzinfo (0.3.16) from system gems
Your bundle is complete!</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

该 <code>bundle</code> 实用程序，简称 <em>Bundler</em>，可用于下载和安装所有在 Gemfile 中指定的 gem 以及任何这些 gems 的依赖项（请参阅 <a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#list4">清单 4</a>）。该 <code>bundle</code> 实用程序还可以将所有依赖项复制到您的应用程序中，使得您的代码库自给自足。具体来说，如果您运行 <code>bundle pack</code>，Bundler 会将所有 gem 的资料复制到 vendor/cache。
<a name="list4"></a><strong>清单 4. 运行 bundle 实用程序</strong>
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>				
$ bundle pack
Copying .gem files into vendor/cache
  * bundler-0.9.7.gem
  * thor-0.13.3.gem
  * abstract-1.0.0.gem
  * mime-types-1.16.gem
  * text-hyphen-1.0.0.gem
  * rack-mount-0.4.7.gem
  * rake-0.8.7.gem
  * text-format-1.0.0.gem
  * tzinfo-0.3.16.gem
  * rack-test-0.5.3.gem
  * builder-2.1.2.gem
  * erubis-2.6.5.gem
  * memcache-client-1.7.8.gem
  * rack-1.1.0.gem
  * sqlite3-ruby-1.2.5.gem
  * i18n-0.3.3.gem
  * activesupport-3.0.0.beta.gem
  * arel-0.2.1.gem
  * mail-2.1.2.gem
  * activemodel-3.0.0.beta.gem
  * activerecord-3.0.0.beta.gem
  * actionpack-3.0.0.beta.gem
  * railties-3.0.0.beta.gem
  * actionmailer-3.0.0.beta.gem
  * activeresource-3.0.0.beta.gem
  * rails-3.0.0.beta.gem

$ ls vendor/cache
abstract-1.0.0.gem		memcache-client-1.7.8.gem
actionmailer-3.0.0.beta.gem	mime-types-1.16.gem
actionpack-3.0.0.beta.gem	rack-1.1.0.gem
activemodel-3.0.0.beta.gem	rack-mount-0.4.7.gem
activerecord-3.0.0.beta.gem	rack-test-0.5.3.gem
activeresource-3.0.0.beta.gem	rails-3.0.0.beta.gem
activesupport-3.0.0.beta.gem	railties-3.0.0.beta.gem
arel-0.2.1.gem			rake-0.8.7.gem
builder-2.1.2.gem		sqlite3-ruby-1.2.5.gem
bundler-0.9.7.gem		text-format-1.0.0.gem
erubis-2.6.5.gem		text-hyphen-1.0.0.gem
i18n-0.3.3.gem			thor-0.13.3.gem
mail-2.1.2.gem			tzinfo-0.3.16.gem</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

将 vendor/cache 视为应用程序自己的 gem 存储库。您可以将代码库移动到任何地方，并可以获得您所需的 gem 软件和版本 — 无需远程存储器即可实现。例如，如果您在 <code>bundle pack</code> 之后运行 <code>bundle install</code>，gem 会从您的应用程序存储库安装到您的系统中（请参阅 <a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#list5">清单 5</a>）。
<a name="list5"></a><strong>清单 5. 安装 gem</strong>
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>				
Fetching source index from http://gemcutter.org
Resolving dependencies
Installing abstract (1.0.0) from .gem files at
  /Users/strike/projects/rails3/wiki/vendor/cache
Installing actionmailer (3.0.0.beta) from .gem files at
  /Users/strike/projects/rails3/wiki/vendor/cache
Installing actionpack (3.0.0.beta) from .gem files at
  /Users/strike/projects/rails3/wiki/vendor/cache
...
Installing thor (0.13.3) from .gem files at
  /Users/strike/projects/rails3/wiki/vendor/cache
Installing tzinfo (0.3.16) from .gem files at
  /Users/strike/projects/rails3/wiki/vendor/cache
Your bundle is complete!</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

&nbsp;

<a name="wiki"></a>使用 wiki

要创建应用程序，则需要为页面生成一个工作框架（scaffold）、创建数据库、将初始页面放到数据库并且设定所需的路径（请参阅 <a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#list6">清单 6</a>）。 为了简单化，仅限在某些字段使用 wiki 页面记录：标题、标头（标题的缩略语）、正文和时间截（以用于记录页面的创建时间和最新修改时间）。标题和标头是字符串字段；散文是文本字段；时间截是日 期和时间字段。（当然，一个真正的 wiki 还会有其他字段，如最近的作者以及页面的修订历史记录。为了尽量简洁，该例子还省略了用户和会话、格式以及各种身份验证和授权。）您可以使用 <code>rails generate scaffold</code> 命令生成一个初始模型、一系列视图以及一个控制器。
<a name="list6"></a><strong>清单 6. 完整的 wiki 应用程序</strong>
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>				
$ rails generate scaffold page title:string slug:string body:text --timestamps
      invoke  active_record
      create    db/migrate/20100221115613_create_pages.rb
      create    app/models/page.rb
      invoke    test_unit
      create      test/unit/page_test.rb
      create      test/fixtures/pages.yml
       route  resources :pages
      invoke  scaffold_controller
      create    app/controllers/pages_controller.rb
      invoke    erb
      create      app/views/pages
      create      app/views/pages/index.html.erb
      create      app/views/pages/edit.html.erb
      create      app/views/pages/show.html.erb
      create      app/views/pages/new.html.erb
      create      app/views/pages/_form.html.erb
      create      app/views/layouts/pages.html.erb
      invoke    test_unit
      create      test/functional/pages_controller_test.rb
      invoke    helper
      create      app/helpers/pages_helper.rb
      invoke      test_unit
      create        test/unit/helpers/pages_helper_test.rb
      invoke  stylesheets
      create    public/stylesheets/scaffold.css</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

如果您想知道 <code>./script/generate</code> 命令有何变化，回忆一下，该命令已经被全能的 <code>rails</code> 命令包含了。

运行 <code>rake db:create db:migrate</code> 以创建数据库：
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>$ rake db:create db:migrate
==  CreatePages: migrating ====================================================
-- create_table(:pages)
   -&gt; 0.0010s
==  CreatePages: migrated (0.0011s) ===========================================</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

该 Wiki 现已存在，但却是空的。添加一个初始页面作为所有其他页面的基准。编辑文件 db/seeds.rb，并编写代码以创建一个新的页面，如 <a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#list7">清单 7</a> 中所示。
<a name="list7"></a><strong>清单 7. wiki 基准页面</strong>
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>				
Page.create(
  :title    =&gt; 'The Marx Brothers Wiki',
  :slug     =&gt; 'Home',
  :body     =&gt; 'An encyclopedic guide to the Marx Brothers.')</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

运行 <code>rake db:seed</code> 以执行代码。您可以通过使用 <code>rails console</code> 快速浏览以验证页面，如 <a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#list8">清单 8</a> 中所示。
<a name="list8"></a><strong>清单 8. 验证基准页面</strong>
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>				
$ rake db:seed
(in /Users/strike/projects/rails3/wiki)

$ rails console
Loading development environment (Rails 3.0.0.beta)
irb(main):001:0&gt; Page.all
=&gt; [#&lt;Page id: 1, title: "The Marx Brothers Wiki", slug: "Home",
    body: "An encyclopedic guide to the Marx Brothers.",
    created_at: "2010-02-21 12:24:43", updated_at: "2010-02-21 12:24:43"&gt;]</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

在继续运行编码之前，请先设定路径。需要两条路径：一条默认的路径用来查找主页面，而另外一条路径则通过标头来查找页面。<a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#list9">清单 9</a> 显示了最终版的 config/routes.rb 文件。
<a name="list9"></a><strong>清单 9. config/routes.rb（最终版）</strong>
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>				
Wiki::Application.routes.draw do |map|
  resources :pages
  root :to =&gt; "pages#show"
end</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

在 <a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#list6">清单 6</a> 中，<code>rails generate scaffold page</code> 这一行命令可自动在第二行创建路径，这是 REST 式的。您必须在第三行手动添加路径。用于指定站点路径的默认 “根目录” 的语法是 Rails 3 中的新增功能。第三行定义的是，“将路径 ‘/’ 映射到页面控制器的 ‘show’ 方法”。<code>show</code> 方法的代码将在数据库中查找主页面并显示出来。

添加新的根目录路径后，需要删除 public/index.html 文件以避免产生冲突：
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>$ rm public/index.html</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

现在，让我们来关注页面控制器。Rails 3 中的控制器代码可以极其简单。<a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#list10">清单 10</a> 通过单一的 <code>show</code> 方法，显示了控制器的初始实现。
<a name="list10"></a><strong>清单 10. Rails 3 控制器</strong>
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>				
class PagesController &lt; ApplicationController
  respond_to :html

  def show
    @page = Page.where( :slug =&gt; ( params[:id] || 'Home' ) ).first
    respond_with( @page )
  end
end</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

正如您所看到的，通常在 Rails 2 控制器中提供的所有模板都不见了。<code>respond_to</code> 列出了控制器所支持的格式；此处，它仅会对 HTML 的请求做出反应。<code>respond_with</code> 是逻辑快捷方式，用于决定控制器应如何继续处理。

查询的语法也是大有不同。查询是 Rails 3 关系代数的一个示例。您可能会想知道为什么需要有 <code>first</code> 后缀。<code>where</code> 和其他表达查询的操作数并不会真正引起查询语句被执行。相反地，查询站点一直闲置，直到真正需要数据时才启动。这就是<em>延迟加载</em>，即尽可能长的延迟查询语句的执行。<code>first</code> 命令将触发数据库中的实际查询。

如果您现在运行应用程序，您会看到与 <a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#fig1">图 1</a> 相似的情况。
<a name="fig1"></a><strong>图 1. Rails 3 wiki 应用程序</strong>
<img src="http://www.ibm.com/developerworks/cn/web/wa-introrails3/fig1.jpg" alt="该屏幕截图显示带有以下文本的页面：“标题：”Marx Brothers wiki；“标头：”主页；“正文：” Marx Brothers 的百科全书指南。底部显示有 “编辑” 和 “后一页” 的按钮。" width="400" height="235" />

现在，您可以向控制器中添加更多的代码。<a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#list11">清单 11</a> 显示了完整的控制器。
<a name="list11"></a><strong>清单 11. 完整的 Rails 3 控制器</strong>
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>				
class PagesController &lt; ApplicationController
  respond_to :html
  before_filter :get_page, :except =&gt; [ :create ]

  def create
    respond_with( @page = Page.create( params[ :page ] ) )
  end

  def edit
  end

  def index
    render :action =&gt; :show
  end

  def show
    @page ||= Page.new( :slug =&gt; params[ :id ] )

    if @page.new_record?
      render :action =&gt; :new
    else
      respond_with( @page )
    end
  end

  def update
    @page.update_attributes( params[ :page ] )
    respond_with( @page )
  end

  private

    def get_page
      @page = Page.where( :slug =&gt; ( params[:id] || 'Home' ) ).first ||
        Page.where( :id =&gt; params[:id] ).first
    end
end</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

在该控制器中，<code>index</code> 方法仅仅反映没有页面标示符的 <code>show</code> 操作，从而呈现主页面。<code>show</code> 会显示一个页面，并提供一个 ID 或标头（所有操作的查询都集中在 <code>get_page</code> 中，从而进一步减少了代码的数量）；如果某个页面不存在，则会准备一个新的页面以供进行编辑。

<code>Page</code> 模型仅仅可以验证所有显示的字段：
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>class Page &gt; ActiveRecord::Base
  validates_presence_of :body, :slug, :title
end</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

将驼峰式大小写引用转换为指向其他页面的链接，这一工作是在 <code>Page</code> 模型的视图中进行的。由 app/helpers/pages_helper.rb 中的 helper 函数来完成这一工作，从而保持视图的最小化（请参阅 <a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#list12">清单 12</a>）。
<a name="list12"></a><strong>清单 12. 驼峰式大小写转换 helper 函数</strong>
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>				
module PagesHelper
  def wikify( page )
    return '' if page.body.blank?
    page.body.gsub( /^([A-Z][[:alnum:]]*([A-Z][[:alnum:]]*)+)/ ) do |match|
      link_to( $1, :action =&gt; :show, :id =&gt; $1 )
    end
  end
end</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

该视图是典型的视图，如 <a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#list13">清单 13</a> 中所示。
<a name="list13"></a><strong>清单 13. 典型视图</strong>
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>				
&lt;p&gt;
  &lt;b&gt;Title:&lt;/b&gt;
  &lt;%= @page.title %&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;b&gt;Body:&lt;/b&gt;
  &lt;%= raw wikify( @page ) %&gt;
&lt;/p&gt;

&lt;%= link_to 'Edit', edit_page_path(@page) %&gt; |
&lt;%= link_to 'Back', pages_path %&gt;</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

<code>raw</code> 操作数是 Rails 3 中新增的功能。与以前版本的 Rails 不同，默认情况下所有的字符串都可以（去掉了 HTML）安全发送。如果要通过 HTML 发送一个字符串，则必须使用 <code>raw</code>。

&nbsp;

<a name="switching"></a>切换 Rails

除了此处所介绍的功能改进和便捷性，Rails 3 还提供了比以前版本更佳的性能，尤其是在呈现部件方面。您还可以创建您专有的验证器类，并充分利用更为流畅的标准验证。例如，由 Jeremy McAnally 编写以下验证，一次需要四行单独的代码：
<table width="65%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>validates :login, :presence =&gt; true, :length =&gt; {:minimum =&gt; 4},
  :uniqueness =&gt; true, :format =&gt; { :with =&gt; /[A-Za-z0-9]+/ }</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

Rails 的官方教程 “Rails 指南” 目前正在更新为 Rails 3 版。您也可以在 Jeremy McAnally、Yehuda Katz、Gregg Pollack 和其他社区领导者们的博客中找到更详细的说明以及更便捷的解决方案（请参阅 <a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#resources">参考资料</a>）。一些受大众欢迎的书籍也正在进行修订，其中包括十分创新的《应用 Rails 进行敏捷 Web 开发》（请参阅 <a href="http://www.ibm.com/developerworks/cn/web/wa-introrails3/index.html?ca=drs-#resources">参考资料</a>）。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date>2011-11-03 14:30:14</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ubuntu11.10 双显卡笔记本 开3d特效</title>
		<link></link>
		<pubDate>Wed, 09 Nov 2011 03:04:13 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=41</guid>
		<description></description>
		<content:encoded><![CDATA[我的本本是双显卡配置的，集成显卡是intel的，独立显卡是nvidia，使用系统自带的附加驱动装nvidia失败....................
<div>我也双显卡的。。。在intel集成显卡下弄好了3D桌面
ubuntu本身就能识别intel集成显卡，所以跳过显卡驱动步骤，直接安装compiz就行了</div>
<div>autoremove 所有的 nvidia包就可以开3d了</div>
<div>
如果非要安装NVIDIA驱动，</div>
<div>今天上网的时候，偶然发现了这个开源软件，刚刚更新，用于ubuntu下N卡的双显卡问题。大家可以去试试用一下。无需再禁用N卡。
<a href="https://github.com/MrMEEE/bumblebee#readme">https://github.com/MrMEEE/bumblebee#readme</a>
这个网页上有安装步骤
<a href="http://www.martin-juhl.dk/">http://www.martin-juhl.dk</a></div>
<div> </div>
<div>

ABSOLETE PROJECT:

Please READ:

<a href="http://www.martin-juhl.dk/2011/08/reassemble-of-the-bee/">http://www.martin-juhl.dk/2011/08/reassemble-of-the-bee/</a>

and

<a href="http://www.martin-juhl.dk/2011/08/ironhide-reporting-for-duty/">http://www.martin-juhl.dk/2011/08/ironhide-reporting-for-duty/</a>

&nbsp;

&nbsp;

&nbsp;

&nbsp;
IMPORTANT:

Ubuntu Users:

Bumblebee has now been packaged into a PPA @ Launchpad:

<a href="https://launchpad.net/~mj-casalogic/+archive/bumblebee/">https://launchpad.net/~mj-casalogic/+archive/bumblebee/</a>

This will probably be the most up-to-date version for Ubuntu from now on...

For people currently running the script/git version please do :

sudo bumblebee-uninstall
sudo apt-get install ppa-purge
sudo ppa-purge ppa:ubuntu-x-swat/x-updates
sudo ppa-purge ppa:xorg-edgers/ppa
sudo apt-add-repository ppa:mj-casalogic/bumblebee
sudo apt-get update
sudo apt-get install bumblebee

openSuSE Users:

Bumblebee has been ported to the openSuSE Build Service repository :

<a href="http://download.opensuse.org/repositories/home:/Ximi1970:/bumblebee/openSUSE_11.4/">http://download.opensuse.org/repositories/home:/Ximi1970:/bumblebee/openSUSE_11.4/</a>

For people currently running the script/git version please do :

sudo bumblebee-uninstall

If you have used the nVidia package option:
sudo bash NVIDIA-Linux-xxxxx-xxxx.run --uninstall

If you have used the nVidia repository (mirror) option:
rpm -e x11-video-nvidiaG02
rpm -e nvidia-computeG02
rpm -e nvidia-gfxG02-kmp
zypper rr "nVidia Graphics Drivers (local mirror)"

Install the nVidia repository and packages if you do not want to
use the nouveau driver:
zypper ar -f <a href="ftp://download.nvidia.com/opensuse/11.4">ftp://download.nvidia.com/opensuse/11.4</a> "nVidia Graphics Drivers"
zypper install nvidia-gfxG02-kmp-`uname -r | cut -f3 -d"-"`
zypper install x11-video-nvidiaG02

Installing bumblebee:

zypper ar -f <a href="http://download.opensuse.org/repositories/home:/Ximi1970:/bumblebee/openSUSE_11.4">http://download.opensuse.org/repositories/home:/Ximi1970:/bumblebee/openSUSE_11.4</a> "Bumblebee"
zypper install bumblebee

or just use Yast to add the repositories and packages.

# ----------------------------------------------------------------------------
# "Red Bull License"
#  wrote this file and is providing free support
# in any spare time. If you need extended support, you can fuel him up by
# donating a Red Bull here to get him through the nights..:
#
# <a href="http://tinyurl.com/bumblebee-project">http://tinyurl.com/bumblebee-project</a>
#
# ----------------------------------------------------------------------------

#
# ----------------------------------------------------------------------------
# "THE BEER-WARE LICENSE" (Revision 42):
#  wrote this file. As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you
# think this stuff is worth it, you can buy me a beer in return Martin Juhl
# ----------------------------------------------------------------------------
#

#    This file is part of bumblebee.
#
#    bumblebee is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    bumblebee is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#  
#    You should have received a copy of the GNU General Public License
#    along with bumblebee.  If not, see 

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date>2011-11-09 03:04:13</wp:post_date>
		<wp:post_date_gmt>2011-11-09 03:04:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ubuntu11-10-%e5%8f%8c%e6%98%be%e5%8d%a1%e7%ac%94%e8%ae%b0%e6%9c%ac-%e5%bc%803d%e7%89%b9%e6%95%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ubuntu"><![CDATA[ubuntu]]></category>
		<category domain="post_tag" nicename="ubuntu-11-10"><![CDATA[ubuntu 11.10]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Getting Started with Rails-(EN-CN)</title>
		<link></link>
		<pubDate>Thu, 10 Nov 2011 03:05:45 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=45</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Getting Started with Rails</h2>
This guide covers getting up and running with Ruby on Rails. After reading it, you should be familiar with:<span style="font-family: DejaVu Sans;">本指导手册覆盖了入门和运行</span>ruby on rails<span style="font-family: DejaVu Sans;">，通过阅读本指导，你会了解到：</span>
<ul>
	<li>Installing Rails, creating a new Rails application, and connecting your application to a database</li>
	<li>The general layout#<span style="font-family: DejaVu Sans;">布局</span>of a Rails application <span style="font-family: DejaVu Sans;">应用程序的一般布局</span></li>
	<li>The basic principles of MVC (Model, View Controller) and RESTful design MVC<span style="font-family: DejaVu Sans;">的基本原则和</span>RESTful<span style="font-family: DejaVu Sans;">设计（理念）</span></li>
	<li>How to quickly generate the starting pieces of a Rails application <span style="font-family: DejaVu Sans;">如何快捷的开始一个</span>Rails<span style="font-family: DejaVu Sans;">应用</span></li>
</ul>
<span style="color: #800000;"><em>This</em></span><span style="color: #800000;"><em>Guide</em></span><span style="color: #800000;"><em>is</em></span><span style="color: #800000;"><em>based</em></span><span style="color: #800000;"><em>on</em></span><span style="color: #800000;"><em>Rails</em></span><span style="color: #800000;"><em>3.1.</em></span><span style="color: #800000;"><em>Some</em></span><span style="color: #800000;"><em>of</em></span><span style="color: #800000;"><em>the</em></span><span style="color: #800000;"><em>code</em></span><span style="color: #800000;"><em>shown</em></span><span style="color: #800000;"><em>here</em></span><span style="color: #800000;"><em>will</em></span><span style="color: #800000;"><em>not</em></span><span style="color: #800000;"><em>work</em></span><span style="color: #800000;"><em>in</em></span><span style="color: #800000;"><em>earlier</em></span><span style="color: #800000;"><em>versions</em></span><span style="color: #800000;"><em>of</em></span><span style="color: #800000;"><em>Rails.</em><span style="font-family: DejaVu Sans;"><em>这个指导手册适用与</em></span></span><span style="color: #800000;"><em>Rails3.1</em><span style="font-family: DejaVu Sans;"><em>，有些代码在</em></span></span><span style="color: #800000;"><em>Rails</em><span style="font-family: DejaVu Sans;"><em>早期版本可能会不工作。</em></span></span>
<h3><a name="guide-assumptions"></a>1 Guide Assumptions<span style="font-family: WenQuanYi Micro Hei;">假设</span></h3>
<h3><a name="guide-assumptions1"></a>1 Guide Assumptions</h3>
This guide is designed for beginners who want to get started with a Rails application from scratch#<span style="font-family: DejaVu Sans;">刻痕</span>. It does not assume#<span style="font-family: DejaVu Sans;">假设</span>that you have any prior#<span style="font-family: DejaVu Sans;">预先</span>experience with Rails. However, to get the most out of it, you need to have some prerequisites installed:<span style="font-family: DejaVu Sans;">本指导设计给那些想大概的了解</span>Rails<span style="font-family: DejaVu Sans;">应用创建的初学者。这里假设你对</span>Rails<span style="font-family: DejaVu Sans;">没有任何预先的了解。不管怎样要得到（本手册的）知识，你需要预先安装：</span>
<ul>
	<li>The <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://www.ruby-lang.org/en/downloads">Ruby</a></span></span> language version 1.8.7 or higher</li>
</ul>
<em><strong>Note</strong></em><em> </em><em>that</em><em> </em><em>Ruby</em><em> </em><em>1.8.7</em><em> </em><em>p248</em><em> </em><em>and</em><em> </em><em>p249</em><em> </em><em>have</em><em> </em><em>marshaling#</em><span style="font-family: DejaVu Sans;"><em>封送处理</em></span><em>bugs</em><em> </em><em>that</em><em> </em><em>crash#</em><span style="font-family: DejaVu Sans;"><em>意外崩溃</em><em>紧急</em></span><em>Rails</em><em> </em><em>3.0.</em><em> </em><em>Ruby</em><em> </em><em>Enterprise</em><em> </em><em>Edition</em><em> </em><em>have</em><em> </em><em>these</em><em> </em><em>fixed</em><em> </em><em>since</em><em> </em><em>release</em><em> </em><em>1.8.7-2010.02</em><em> </em><em>though.</em><em> </em><em>Ruby</em><em> </em><em>1.8.7</em><em> </em><em>p248</em><em> </em><em>and</em><em> </em><em>p249</em><span style="font-family: DejaVu Sans;"><em>在</em><em>发行版</em></span><em>1.8.7-2010.02</em><em> </em><span style="font-family: DejaVu Sans;"><em>已经得到解决。</em></span><em>On</em><em> </em><em>the</em><em> </em><em>1.9</em><em> </em><em>front,</em><em> </em><em>Ruby</em><em> </em><em>1.9.1</em><em> </em><em>is</em><em> </em><em>not</em><em> </em><em>usable</em><em> </em><em>because</em><em> </em><em>it</em><em> </em><em>outright</em><em> </em><em>segfaults</em><em> </em><em>on</em><em> </em><em>Rails</em><em> </em><em>3.0,</em><em> </em><em>so</em><em> </em><em>if</em><em> </em><em>you</em><em> </em><em>want</em><em> </em><em>to</em><em> </em><em>use</em><em> </em><em>Rails</em><em> </em><em>3</em><em> </em><em>with</em><em> </em><em>1.9.x</em><em> </em><em>jump</em><em> </em><em>on</em><em> </em><em>1.9.2</em><em> </em><em>for</em><em> </em><em>smooth</em><em> </em><em>sailing.</em>
<ul>
	<li>The <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://rubyforge.org/frs/?group_id=126">RubyGems</a></span></span>packaging system
<ul>
	<li>If you want to learn more about RubyGems, please read the <a href="http://docs.rubygems.org/read/book/1"><span style="color: #000080;"><span style="text-decoration: underline;">RubyGems</span></span><span style="color: #000080;"><span style="text-decoration: underline;">User</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Guide</span></span></a> <span style="font-family: DejaVu Sans;">如果你想了解更多关于</span>RubyGems<span style="font-family: DejaVu Sans;">，请阅读</span><a href="http://docs.rubygems.org/read/book/1"><span style="color: #000080;"><span style="text-decoration: underline;">RubyGems</span></span><span style="color: #000080;"><span style="text-decoration: underline;">User</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Guide</span></span></a></li>
</ul>
</li>
	<li>A working installation of the <a href="http://www.sqlite.org/"><span style="color: #000080;"><span style="text-decoration: underline;">SQLite3</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Database</span></span></a></li>
</ul>
Rails is a web application framework running on the Ruby programming language. If you have no prior experience with Ruby, you will find a very steep#<span style="font-family: DejaVu Sans;">陡</span>learning curve diving straight into Rails. There are some good free resources on the internet for learning Ruby, including: Rails<span style="font-family: DejaVu Sans;">是一个基于</span>Ruby<span style="font-family: DejaVu Sans;">程序语言的</span>web<span style="font-family: DejaVu Sans;">程序框架。如果你没有预先的学习</span>ruby<span style="font-family: DejaVu Sans;">，你会发现直接的入门</span>Rails<span style="font-family: DejaVu Sans;">学习很有跨度。这里有一些学习</span>ruby<span style="font-family: DejaVu Sans;">的免费互联网资源。</span>
<ul>
	<li><a href="http://www.humblelittlerubybook.com/"><span style="color: #000080;"><span style="text-decoration: underline;">Mr.</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Neighborly</span></span><span style="color: #000080;"><span style="text-decoration: underline;">’</span></span><span style="color: #000080;"><span style="text-decoration: underline;">s</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Humble</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Little</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Ruby</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Book</span></span></a></li>
	<li><a href="http://www.ruby-doc.org/docs/ProgrammingRuby/"><span style="color: #000080;"><span style="text-decoration: underline;">Programming</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Ruby</span></span></a></li>
	<li><a href="http://mislav.uniqpath.com/poignant-guide/"><span style="color: #000080;"><span style="text-decoration: underline;">Why</span></span><span style="color: #000080;"><span style="text-decoration: underline;">’</span></span><span style="color: #000080;"><span style="text-decoration: underline;">s</span></span><span style="color: #000080;"><span style="text-decoration: underline;">(Poignant)</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Guide</span></span><span style="color: #000080;"><span style="text-decoration: underline;">to</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Ruby</span></span></a></li>
</ul>
<h3><a name="what-is-rails"></a>2 What is Rails?<span style="font-family: WenQuanYi Micro Hei;">什么</span>Rails</h3>
Rails is a web application development framework written in the Ruby language. It is <strong>designed</strong><strong> </strong><strong>to</strong> make programming web applications easier by making assumptions#<span style="font-family: DejaVu Sans;">完成</span>about what every developer needs to get started. It allows you to write less code while accomplishing more than many other languages and frameworks. Experienced#<span style="font-family: DejaVu Sans;">经验丰富的</span>Rails developers also report that it makes web application development more fun.Rails<span style="font-family: DejaVu Sans;">是一个使用</span>Ruby<span style="font-family: DejaVu Sans;">语言编写的的</span>web<span style="font-family: DejaVu Sans;">框架应用程序。其设计目的是为了让每个着手开始编写</span>web<span style="font-family: DejaVu Sans;">应用程序的开发人员更加容易的完成工作。它允许你写最少的代码完成超过其他任何语言和框架所完成的工作。经验丰富的</span>Rails<span style="font-family: DejaVu Sans;">开发人员还告诉我们通过</span>Rails<span style="font-family: DejaVu Sans;">使设计</span>web<span style="font-family: DejaVu Sans;">应用程序更快乐。</span>

Rails is opinionated#<span style="font-family: DejaVu Sans;">自以为是</span>software. It makes the assumption that there is a “best” way to do things, and it’s designed to encourage#<span style="font-family: DejaVu Sans;">鼓励</span>that way – and in some cases to discourage alternatives<span style="font-family: DejaVu Sans;">替代品</span>. If you learn “The Rails Way” you’ll probably discover a tremendous increase in productivity. If you persist in bringing old habits#<span style="font-family: DejaVu Sans;">习惯</span>from other languages to your Rails development, and trying to use patterns<span style="font-family: DejaVu Sans;">模式</span>you learned elsewhere, you may have a less happy experience.Rails<span style="font-family: DejaVu Sans;">是一个自以为是的软件。它使得我们以最好的方式去做事情，它还鼓励<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span></span>and in some cases to discourage alternatives<span style="font-family: DejaVu Sans;">，如果你学习<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>Rails<span style="font-family: DejaVu Sans;">方式<span style="font-family: Liberation Serif,Times New Roman,serif;">”</span>你将会适时的发现生产力的巨大增长。如果你固守在来自其他语言的旧的习惯去进行你的</span>Rails<span style="font-family: DejaVu Sans;">开发，以以它地方学来的模式尝试</span>Rails<span style="font-family: DejaVu Sans;">，那么你将会得到很少的快乐的经历。</span>

<strong>The</strong><strong> </strong><strong>Rails</strong><strong> </strong><strong>philosophy</strong><span style="font-family: DejaVu Sans;"><strong>理念</strong></span><strong>includes</strong><strong> </strong><strong>several</strong><strong> </strong><strong>guiding</strong><strong> </strong><strong>principles:Rails</strong><span style="font-family: DejaVu Sans;"><strong>理念包含几个指导原则</strong></span>
<ul>
	<li><strong>DRY</strong><strong> – “</strong><strong>Don</strong><strong>’</strong><strong>t</strong><strong> </strong><strong>Repeat</strong><strong> </strong><strong>Yourself</strong><strong>”</strong> – suggests that writing the same code over and over again is a bad thing. <span style="font-family: DejaVu Sans;">不要自己重复<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>建议一次又一次编写同样的代码是一件坏事请。</span></li>
	<li>Convention#<span style="font-family: DejaVu Sans;">约定</span>Over Configuration(<span style="font-family: DejaVu Sans;">约定优于配置</span>) – means that Rails makes assumptions about what you want to do and how you’re going to do it<span style="font-family: DejaVu Sans;">想做怎么做</span>, rather than requiring you to specify every little thing through endless configuration files. <span style="font-family: DejaVu Sans;">约定优于配置<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>意思是</span>Rails<span style="font-family: DejaVu Sans;">对于你想做什么以及你想怎么做，你刻意的做很少的事情比编写无尽的配置文件更好</span></li>
	<li>REST is the best pattern<span style="font-family: DejaVu Sans;">模式</span>for web applications – organizing your application around resources#<span style="font-family: DejaVu Sans;">资源</span>and standard HTTP verbs#<span style="font-family: DejaVu Sans;">动词</span>is the fastest way to go. REST<span style="font-family: DejaVu Sans;">是开发</span>web<span style="font-family: DejaVu Sans;">应用程序的最好模式<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>环绕</span>resources<span style="font-family: DejaVu Sans;">和标准的</span>HTTP<span style="font-family: DejaVu Sans;">动作组织你的应用程序</span></li>
</ul>
<h4><a name="the-mvc-architecture"></a>2.1 The MVC Architecture#MVC<span style="font-family: WenQuanYi Micro Hei;">架构</span></h4>
At the core of Rails is the Model, View, Controller architecture, usually just called MVC. MVC benefits include:Model<span style="font-family: DejaVu Sans;">，</span>View<span style="font-family: DejaVu Sans;">，</span>Controller<span style="font-family: DejaVu Sans;">架构是</span>Rails<span style="font-family: DejaVu Sans;">的核心，通常称之为</span>MVC<span style="font-family: DejaVu Sans;">。</span>
<ul>
	<li>Isolation<span style="font-family: DejaVu Sans;">分离</span>of business logic<span style="font-family: DejaVu Sans;">逻辑</span>from the user interface <span style="font-family: DejaVu Sans;">界面</span>#<span style="font-family: DejaVu Sans;">从用户界面的业务逻辑的分离</span></li>
	<li>Ease of keeping code DRY# <strong>“</strong><strong>Don</strong><strong>’</strong><strong>t</strong><strong> </strong><strong>Repeat</strong><strong> </strong><strong>Yourself</strong><strong>”</strong></li>
	<li>Making it clear where different types of code belong for easier maintenance #<span style="font-family: DejaVu Sans;">维护明确代码的不同之处使之跟容易维护</span></li>
</ul>
<h5><a name="models"></a>2.1.1 Models</h5>
A model represents<span style="font-family: DejaVu Sans;">代表</span>the information (data) of the application and the rules to manipulate that data.<span style="font-family: DejaVu Sans;">模型代表了应用程序的信息（数据）和操纵这些数据的规则。</span>In the case of Rails, models are primarily used for managing the rules of interaction with a corresponding#<span style="font-family: DejaVu Sans;">相应的</span>database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application’s business logic will be concentrated in the models.<span style="font-family: DejaVu Sans;">在</span>Rails<span style="font-family: DejaVu Sans;">中，</span>models<span style="font-family: DejaVu Sans;">主要用于管理数据表和相应的规则的互动。在大多数情况，在你数据库中的每个表都会和你的应用程序互动。你应用程序的逻辑业务将会集中放置在</span>models<span style="font-family: DejaVu Sans;">中。</span>
<h5><a name="views"></a>2.1.2 Views</h5>
Views represent the user interface of your application. In Rails, views are often HTML files with embedded Ruby code that perform<span style="font-family: DejaVu Sans;">执行</span>tasks related solely to the presentation#<span style="font-family: DejaVu Sans;">演示</span>of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application.View<span style="font-family: DejaVu Sans;">代表了应用程序的用户界面。在</span>Rails<span style="font-family: DejaVu Sans;">中，</span>Views<span style="font-family: DejaVu Sans;">通常是嵌入了执行演示数据任务的</span>Ruby<span style="font-family: DejaVu Sans;">代码的</span>HTML<span style="font-family: DejaVu Sans;">文件。</span>Views<span style="font-family: DejaVu Sans;">完成了给</span>web<span style="font-family: DejaVu Sans;">浏览器或者其他工具用于提出来自你的程序的请求提供数据。</span>
<h5><a name="controllers"></a>2.1.3 Controllers</h5>
Controllers provide the “glue” between models and views. In Rails, controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation.Controllers<span style="font-family: DejaVu Sans;">提供了</span>models<span style="font-family: DejaVu Sans;">和视图间的粘合。在</span>Rails<span style="font-family: DejaVu Sans;">中，</span>controllers<span style="font-family: DejaVu Sans;">相应来自</span>web<span style="font-family: DejaVu Sans;">浏览器请求的进程，向</span>models<span style="font-family: DejaVu Sans;">询问数据以及传递数据给</span>views<span style="font-family: DejaVu Sans;">用于演示。</span>
<h4><a name="the-components-of-rails"></a>2.2 The Components of Rails Rials<span style="font-family: WenQuanYi Micro Hei;">的组件</span></h4>
Rails ships as many individual components.Rails<span style="font-family: DejaVu Sans;">关联着许多独立的组件。</span>Each of these components are briefly explained below. <span style="font-family: DejaVu Sans;">对这些组建在下面给出简要的解释。</span>If you are new to Rails, as you read this section, don’t get hung up on the details of each component, as they will be explained in further detail later. <span style="font-family: DejaVu Sans;">如果你是</span>Rails<span style="font-family: DejaVu Sans;">的新人，当你阅读到这个部分，不要抛弃任何一个组件的描述，而且他们还会做进一步解释。</span>For instance, we will bring up Rack applications, but you don’t need to know anything about them to continue with this guide.<span style="font-family: DejaVu Sans;">例如，我们将会构造应用骨架，但是在这里，你不需要知道关于他们的更进一步的任何知识。</span>
<ul>
	<li>Action Pack<span style="font-family: DejaVu Sans;">动作行为组</span>
<ul>
	<li>Action Controller <span style="font-family: DejaVu Sans;">行为控制</span></li>
	<li>Action Dispatch <span style="font-family: DejaVu Sans;">行为传输</span></li>
	<li>Action View <span style="font-family: DejaVu Sans;">行为视图</span></li>
</ul>
</li>
	<li>Action Mailer <span style="font-family: DejaVu Sans;">行为信封</span></li>
	<li>Active Model</li>
	<li>Active Record</li>
	<li>Active Resource</li>
	<li>Active Support</li>
	<li>Railties</li>
</ul>
<h5><a name="action-pack"></a>2.2.1 Action Pack</h5>
Action Pack is a single gem that contains Action Controller, Action View and Action Dispatch. The “VC” part of “MVC”.Action Pack<span style="font-family: DejaVu Sans;">是一个单独的包它包含了</span>Action Controller, Action View and Action Dispatch<span style="font-family: DejaVu Sans;">传输调度。是</span>MVC<span style="font-family: DejaVu Sans;">的</span>VC<span style="font-family: DejaVu Sans;">部分</span>
<h6><a name="action-controller"></a>2.2.1.1 Action Controller</h6>
Action Controller is the component that manages the controllers in a Rails application.The Action Controller framework processes incoming requests to a Rails application, extracts parameters, and dispatches them to the intended action. Services provided by Action Controller include session management, template rendering, and redirect management. Action Controller<span style="font-family: DejaVu Sans;">是在</span>Rails<span style="font-family: DejaVu Sans;">中管理控制的组件。</span>The Action Controller<span style="font-family: DejaVu Sans;">框架进程收到</span>Rails<span style="font-family: DejaVu Sans;">应用程序的请求，提取参数，以及调度他们到具有相应义务的动作。这些服务是由</span>Action Controller<span style="font-family: DejaVu Sans;">包含了会话管理部分，模板渲染（翻译），重定向部分。</span>
<h6><a name="action-view"></a>2.2.1.2 Action View</h6>
Action View manages the views of your Rails application. It can create both HTML and XML output by default. Action View manages rendering templates, including nested and partial templates, and includes built-in AJAX support. View templates are covered in more detail in another guide called <a href="http://guides.rubyonrails.org/layouts_and_rendering.html"><span style="color: #000080;"><span style="text-decoration: underline;">Layouts</span></span><span style="color: #000080;"><span style="text-decoration: underline;">and</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rendering</span></span></a>.Action View<span style="font-family: DejaVu Sans;">管理你的</span>Rails<span style="font-family: DejaVu Sans;">应用程序的视图。它可以以创建</span>HTML<span style="font-family: DejaVu Sans;">和</span>XML<span style="font-family: DejaVu Sans;">作为默认输出。</span>Action View<span style="font-family: DejaVu Sans;">管理模板渲染，包含嵌套和组装模板，还包含了内置的</span>AJAX<span style="font-family: DejaVu Sans;">支持。</span>
<h6><a name="action-dispatch"></a>2.2.1.3 Action Dispatch</h6>
Action Dispatch handles routing of web requests and dispatches them as you want, either to your application or any other Rack application. Rack applications are a more advanced topic and are covered in a separate guide called <a href="http://guides.rubyonrails.org/rails_on_rack.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">on</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rack</span></span></a>.<span style="font-family: DejaVu Sans;">行为调度处理了你的和其他部分的应用程序的路由<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>这些</span>web<span style="font-family: DejaVu Sans;">请求以及一些你所想要的调度，</span>
<h5><a name="action-mailer"></a>2.2.2 Action Mailer</h5>
Action Mailer is a framework for building e-mail services. You can use Action Mailer to receive and process incoming email and send simple plain text or complex multipart emails based on flexible templates.Action Mailer<span style="font-family: DejaVu Sans;">是一个营造</span>E-mail<span style="font-family: DejaVu Sans;">服务的框架。你可以使用</span>Action Mailer<span style="font-family: DejaVu Sans;">去发送、接收</span>emial<span style="font-family: DejaVu Sans;">以及发送一些简单的计划文本或者基于灵活模板的复杂的多重的电子邮件。</span>
<h5><a name="active-model"></a>2.2.3 Active Model</h5>
Active Model provides a defined interface between the Action Pack gem services and Object Relationship Mapping gems such as Active Record. Active Model allows Rails to utilize other ORM frameworks in place of Active Record if your application needs this.Active Model<span style="font-family: DejaVu Sans;">提供了</span>Action Pack gem<span style="font-family: DejaVu Sans;">服务和</span>Object Relationship Mapping gems<span style="font-family: DejaVu Sans;">之间的接口定义，比如</span>Active<span style="font-family: DejaVu Sans;">记录。</span>Active Model<span style="font-family: DejaVu Sans;">允许</span>Rails<span style="font-family: DejaVu Sans;">在</span>Active Record<span style="font-family: DejaVu Sans;">部分去采用其他</span>ORM<span style="font-family: DejaVu Sans;">框架如果你的应用程序需要。</span>
<h5><a name="active-record"></a>2.2.4 Active Record</h5>
Active Record is the base for the models in a Rails application. It provides database independence, basic CRUD functionality, advanced finding capabilities, and the ability to relate models to one another, among other services.Active Record<span style="font-family: DejaVu Sans;">是一个</span>Rails<span style="font-family: DejaVu Sans;">应用程序的</span>models<span style="font-family: DejaVu Sans;">根本。它提供独立的数据库，基于</span>CRUD<span style="font-family: DejaVu Sans;">功能，先进（高级）的查找能力，和与另一个</span>models<span style="font-family: DejaVu Sans;">关联的能力，几乎所有其他服务。</span>
<h5><a name="active-resource"></a>2.2.5 Active Resource</h5>
Active Resource provides a framework for managing the connection between business objects and RESTful web services. It implements a way to map web-based resources to local objects with CRUD semantics.Active Resource<span style="font-family: DejaVu Sans;">提供一个管理目标业务和</span>RESTful web<span style="font-family: DejaVu Sans;">服务之间连接的框架。它实现了使用</span>CRUD<span style="font-family: DejaVu Sans;">语义测绘</span>web-base <span style="font-family: DejaVu Sans;">资源到本地目标。</span>
<h5><a name="active-support"></a>2.2.6 Active Support</h5>
Active Support is an extensive collection of utility classes and standard Ruby library extensions that are used in Rails, both by the core code and by your applications.Active Support<span style="font-family: DejaVu Sans;">是一个广泛收集实用工具类和标准的</span>Ruby<span style="font-family: DejaVu Sans;">库的扩展，它们由的核心代码和您的应用程序（决定）。</span>
<h5><a name="railties"></a>2.2.7 Railties</h5>
Railties is the core Rails code that builds new Rails applications and glues the various frameworks and plugins together in any Rails application.Railties<span style="font-family: DejaVu Sans;">是在</span>Rails<span style="font-family: DejaVu Sans;">代码中创建新</span>Rails<span style="font-family: DejaVu Sans;">应用和在任何</span>Rails<span style="font-family: DejaVu Sans;">应用中粘和各种插件在一起的核心。</span>
<h4><a name="rest"></a>2.3 REST</h4>
Rest stands for Representational State Transfer and is the foundation of the RESTful architecture.Rest<span style="font-family: DejaVu Sans;">作为具有代表性的状态传输是</span>RESTful<span style="font-family: DejaVu Sans;">架构的基础。</span>This is generally considered to be Roy Fielding’s doctoral thesis<span style="font-family: DejaVu Sans;">博士论文</span>, <a href="http://www.ics.uci.edu/%7Efielding/pubs/dissertation/top.htm"><span style="color: #000080;"><span style="text-decoration: underline;">Architectural</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Styles</span></span><span style="color: #000080;"><span style="text-decoration: underline;">and</span></span><span style="color: #000080;"><span style="text-decoration: underline;">the</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Design</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Network-based</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Software</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Architectures</span></span></a>. While you can read through the thesis, REST in terms of Rails boils down to two main principles:<span style="font-family: DejaVu Sans;">当你阅读这篇论文</span>REST<span style="font-family: DejaVu Sans;">在</span>Rails<span style="font-family: DejaVu Sans;">归纳为主要亮点原则：</span>
<ul>
	<li>Using resource identifiers such as URLs to represent resources.<span style="font-family: DejaVu Sans;">使用资源标识符比如</span>URLs<span style="font-family: DejaVu Sans;">去表现资源</span></li>
	<li>Transferring representations of the state of that resource between system components.<span style="font-family: DejaVu Sans;">转移（传送）在系统组件之间代表资源的状态</span></li>
</ul>
For example, the following HTTP request:

<tt>DELETE</tt><tt> </tt><tt>/photos/17</tt>

would be understood to refer to a photo resource with the ID of 17, and to indicate a desired action – deleting that resource. <span style="font-family: DejaVu Sans;">（系统）将会明白参照</span>ID<span style="font-family: DejaVu Sans;">为</span>14<span style="font-family: DejaVu Sans;">的</span>phone<span style="font-family: DejaVu Sans;">资源，注明删除该资源。</span>REST is a natural style for the architecture of web applications, and Rails hooks into this shielding<span style="font-family: DejaVu Sans;">屏蔽</span>you from many of the RESTful complexities and browser quirks.REST<span style="font-family: DejaVu Sans;">自然风格去架构</span>web<span style="font-family: DejaVu Sans;">应用程序，通过组件这样的钩子，使你避免了许多复杂的</span>RESTful<span style="font-family: DejaVu Sans;">和浏览器之间的差异。</span>

If you’d like more details on REST as an architectural#<span style="font-family: DejaVu Sans;">架构风格</span>style, these resources are more approachable<span style="font-family: DejaVu Sans;">平易近人</span>than Fielding’s thesis:
<ul>
	<li><a href="http://www.infoq.com/articles/rest-introduction"><span style="color: #000080;"><span style="text-decoration: underline;">A</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Brief</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Introduction</span></span><span style="color: #000080;"><span style="text-decoration: underline;">to</span></span><span style="color: #000080;"><span style="text-decoration: underline;">REST</span></span></a> by Stefan Tilkov</li>
	<li><a href="http://bitworking.org/news/373/An-Introduction-to-REST"><span style="color: #000080;"><span style="text-decoration: underline;">An</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Introduction</span></span><span style="color: #000080;"><span style="text-decoration: underline;">to</span></span><span style="color: #000080;"><span style="text-decoration: underline;">REST</span></span></a> (video tutorial) by Joe Gregorio</li>
	<li><a href="http://en.wikipedia.org/wiki/Representational_State_Transfer"><span style="color: #000080;"><span style="text-decoration: underline;">Representational</span></span><span style="color: #000080;"><span style="text-decoration: underline;">State</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Transfer</span></span></a> article in Wikipedia</li>
	<li><a href="http://www.infoq.com/articles/webber-rest-workflow"><span style="color: #000080;"><span style="text-decoration: underline;">How</span></span><span style="color: #000080;"><span style="text-decoration: underline;">to</span></span><span style="color: #000080;"><span style="text-decoration: underline;">GET</span></span><span style="color: #000080;"><span style="text-decoration: underline;">a</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Cup</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Coffee</span></span></a> by Jim Webber, Savas Parastatidis &amp; Ian Robinson</li>
</ul>
<h3><a name="creating-a-new-rails-project"></a>3 Creating a New Rails Project</h3>
If you follow this guide, you’ll create a Rails project called <tt>blog</tt>, a (very) simple weblog.<span style="font-family: DejaVu Sans;">如果你跟随这个指导，你将会创建一个叫做</span>blog<span style="font-family: DejaVu Sans;">的</span>Rails<span style="font-family: DejaVu Sans;">项目<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>一个非常简单的网络博客。</span>Before you can start building the application, you need to make sure that you have Rails itself installed.<span style="font-family: DejaVu Sans;">当你准备开始构建这个项目之前你需要确保</span>Rails<span style="font-family: DejaVu Sans;">已经完全安装。</span>
<h4><a name="installing-rails"></a>3.1 Installing Rails<span style="font-family: WenQuanYi Micro Hei;">安装</span>Rails</h4>
In most cases, the easiest way to install Rails is to take advantage of RubyGems:<span style="font-family: DejaVu Sans;">在大多数情况下，最安装</span>Rails<span style="font-family: DejaVu Sans;">简单的方式是通过方便的</span>RubyGems

<code>Usually</code><code> </code><code>run</code><code> </code><code>this</code><code> </code><code>as</code><code> </code><code>the</code><code> </code><code>root</code><code> </code><code>user:</code>

<code>#</code><code> </code><code>gem</code><code> </code><code>install</code><code> </code><code>rails#</code><span style="font-family: DejaVu Sans;"><code>一般这样安装的</code></span><code>rails</code><span style="font-family: DejaVu Sans;"><code>都是最新的</code></span><code>release</code><span style="font-family: DejaVu Sans;"><code>版本</code></span>

<code>If</code><code> </code><code>you</code><code>’</code><code>re</code><code> </code><code>working</code><code> </code><code>on</code><code> </code><code>Windows,</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>quickly</code><code> </code><code>install</code><code> </code><code>Ruby</code><code> </code><code>and</code><code> </code><code>Rails</code><code> </code><code>with</code><code> </code><a href="http://railsinstaller.org/"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Installer</span></span></a><code>.</code><span style="font-family: DejaVu Sans;"><code>如果你的工作环境是</code></span><code>Windows</code><span style="font-family: DejaVu Sans;"><code>，你可以通过</code></span><code>Rails</code><code> </code><code>Installer</code><span style="font-family: DejaVu Sans;"><code>快速的安装</code></span><code>Rails</code><span style="font-family: DejaVu Sans;"><code>。</code></span>

<code>/////////////////////////////</code>

<code>###gem</code><code> </code><code>help</code><code> </code><code>commands</code>

<code>➜ </code><code>~</code><code> </code><code>gem</code><code> </code><code>install</code><code> </code><code>rails&amp;&amp;sudo</code><code> </code><code>gem</code><code> </code><code>install</code><code> </code><code>rails</code>

<code>ERROR:</code><code> </code><code>Could</code><code> </code><code>not</code><code> </code><code>find</code><code> </code><code>a</code><code> </code><code>valid</code><code> </code><code>gem</code><code> </code><code>'rails'</code><code> </code><code>(&gt;=</code><code> </code><code>0)</code><code> </code><code>in</code><code> </code><code>any</code><code> </code><code>repository</code>

<code>ERROR:</code><code> </code><code>While</code><code> </code><code>executing</code><code> </code><code>gem</code><code> </code><code>...</code><code> </code><code>(Gem::RemoteFetcher::FetchError)</code>

<code>Errno::ETIMEDOUT:</code><code> </code><code>Connection</code><code> </code><code>timed</code><code> </code><code>out</code><code> </code><code>-</code><code> </code><code>connect(2)</code><code> </code><code>(</code><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://rubygems.org/latest_specs.4.8.gz">http://rubygems.org/latest_specs.4.8.gz</a></span></span><code>)</code>

<span style="font-family: DejaVu Sans;"><code>经检查和</code></span><code>GFW</code><span style="font-family: DejaVu Sans;"><code>无关，是</code></span><code>rubygems</code><span style="font-family: DejaVu Sans;"><code>的</code></span><code>DNS</code><code> </code><span style="font-family: DejaVu Sans;"><code>调整问题</code></span>

&nbsp;

<span style="font-family: DejaVu Sans;"><code>问题解决的最好方法方法</code></span>

<code>jhjguxin@jhjguxin-virtual-machine:~/blog$</code><code> </code><code>gem</code><code> </code><code>update</code><code> </code><code>--system</code><code> </code>

&nbsp;

<code>ERROR:</code><code> </code><code>gem</code><code> </code><code>update</code><code> </code><code>--system</code><code> </code><code>is</code><code> </code><code>disabled</code><code> </code><code>on</code><code> </code><code>Debian,</code><code> </code><code>because</code><code> </code><code>it</code><code> </code><code>will</code><code> </code><code>overwrite</code><code> </code><code>the</code><code> </code><code>content</code><code> </code><code>of</code><code> </code><code>the</code><code> </code><code>rubygems</code><code> </code><code>Debian</code><code> </code><code>package,</code><code> </code><code>and</code><code> </code><code>might</code><code> </code><code>break</code><code> </code><code>your</code><code> </code><code>Debian</code><code> </code><code>system</code><code> </code><code>in</code><code> </code><code>subtle</code><code> </code><code>ways.</code><code> </code><code>The</code><code> </code><code>Debian-supported</code><code> </code><code>way</code><code> </code><code>to</code><code> </code><code>update</code><code> </code><code>rubygems</code><code> </code><code>is</code><code> </code><code>through</code><code> </code><code>apt-get,</code><code> </code><code>using</code><code> </code><code>Debian</code><code> </code><code>official</code><code> </code><code>repositories.</code>

&nbsp;

<code>If</code><code> </code><code>you</code><code> </code><code>really</code><code> </code><code>know</code><code> </code><code>what</code><code> </code><code>you</code><code> </code><code>are</code><code> </code><code>doing,</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>still</code><code> </code><code>update</code><code> </code><code>rubygems</code><code> </code><code>by</code><code> </code><code>setting</code><code> </code><code>the</code><code> </code><code>REALLY_GEM_UPDATE_SYSTEM</code><code> </code><code>environment</code><code> </code><code>variable,</code><code> </code><code>but</code><code> </code><code>please</code><code> </code><code>remember</code><code> </code><code>that</code><code> </code><code>this</code><code> </code><code>is</code><code> </code><code>completely</code><code> </code><code>unsupported</code><code> </code><code>by</code><code> </code><code>Debian.</code>

<code>jhjguxin@jhjguxin-virtual-machine:~/blog$</code><code> </code><code>export</code><code> </code><code>REALLY_GEM_UPDATE_SYSTEM=1</code>

&nbsp;

<code>jhjguxin@jhjguxin-virtual-machine:~/blog$</code><code> </code><code>gem</code><code> </code><code>update</code><code> –</code><code>system</code>

&nbsp;

<code>###</code><span style="font-family: DejaVu Sans;"><code>正是</code></span><code>gem</code><span style="font-family: DejaVu Sans;"><code>出问题了</code><code></code><code>结果直接用</code></span><code>sudo</code><code> </code><code>apt-get</code><code> </code><code>install</code><code> </code><code>rails,</code><span style="font-family: DejaVu Sans;"><code>悲剧了</code></span><code>ubuntu</code><span style="font-family: DejaVu Sans;"><code>现在还是用的</code></span><code>rails2.3</code><span style="font-family: DejaVu Sans;"><code>的包然后导致，后面有些命令无法执行</code></span>
<h4><a name="creating-the-blog-application"></a><code>3.2</code><code> </code><code>Creating</code><code> </code><code>the</code><code> </code><code>Blog</code><code> </code><code>Application</code></h4>
The best way to use this guide is to follow each step as it happens, no code or step needed to make this example application has been left out, so you can literally follow along step by step.<span style="font-family: DejaVu Sans;">学习（使用）本指导的最好方式是跟随这里描述的每一步，不写代码或者没有例子所需的步骤会使得这个例子被冷落，你可以根据文字描述的步骤一步接着一步的操作。</span>If you need to see the completed code, you can download it from <a href="https://github.com/mikel/getting-started-code"><span style="color: #000080;"><span style="text-decoration: underline;">Getting</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Started</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Code</span></span></a>.<span style="font-family: DejaVu Sans;">如果你需要完整的代码你可以从这里下载</span><a href="https://github.com/mikel/getting-started-code"><span style="color: #000080;"><span style="text-decoration: underline;">Getting</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Started</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Code</span></span></a><span style="font-family: DejaVu Sans;">。</span>

To begin, open a terminal, navigate to a folder where you have rights to create files, and type:<span style="font-family: DejaVu Sans;">开始，打开一个</span>terminal,<span style="font-family: DejaVu Sans;">导航至一个你有权限创建文件的文件夹，并输入：</span>

<code>rails</code><code> </code><code>new</code><code> </code><code>blog#--skip-bundle]</code><code> </code><code>#</code><code> </code><code>Don't</code><code> </code><code>run</code><code> </code><code>bundle</code><code> </code><code>install</code><span style="font-family: DejaVu Sans;"><code>这样在国内就不会由于连不上</code></span><code>gem</code><span style="font-family: DejaVu Sans;"><code>即便上能够上也会很慢半天没反映</code></span>

<code>#</code><span style="font-family: DejaVu Sans;"><code>请确保你的</code></span><code>rials</code><code> </code><span style="font-family: DejaVu Sans;"><code>版本是</code></span><code>3.1</code><code> </code><span style="font-family: DejaVu Sans;"><code>不然的话这只能用下面的了</code></span>

<code><span style="color: #800000;">The</span></code><code></code><code><span style="color: #800000;">guides</span></code><code></code><code><span style="color: #800000;">for</span></code><code></code><code><span style="color: #800000;">Rails</span></code><code></code><code><span style="color: #800000;">2.3</span></code><code></code><code><span style="color: #800000;">are</span></code><code></code><code><span style="color: #800000;">still</span></code><code></code><code><span style="color: #800000;">available</span></code><code></code><code><span style="color: #800000;">at</span></code><code></code><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/v2.3.11/">http://guides.rubyonrails.org/v2.3.11/</a></span></span><code><span style="color: #800000;">.</span></code><code> </code>

<code><em>jhjguxin@jhjguxin-virtual-machine:~$</em></code><code><em> </em></code><code><em>rails</em></code><code><em> </em></code><code><em>new</em></code><code><em> </em></code><code><em>blog#</em></code><span style="font-family: DejaVu Sans;"><code><em>这里建立的文件夹名称为</em></code></span><code><em>new</em></code><span style="font-family: DejaVu Sans;"><code><em>额估计是新版本发生了或者有些地方没弄通（</em></code></span><code><em>ubuntu</em></code><code><em> </em></code><code><em>11.10</em></code><code><em> </em></code><code><em>Rails</em></code><code><em> </em></code><code><em>2.3.14</em></code><code><em> </em></code><code><em>ruby</em></code><code><em> </em></code><code><em>1.8.7</em></code><code><em> </em></code><code><em>(2011-06-30</em></code><code><em> </em></code><code><em>patchlevel</em></code><code><em> </em></code><code><em>352)</em></code><code><em> </em></code><code><em>[i686-linux]</em></code><code><em> </em></code><span style="font-family: DejaVu Sans;"><code><em>）</em></code></span>

<code><em>jhjguxin@jhjguxin-virtual-machine:~$</em></code><code><em> </em></code><code><em>rails</em></code><code><em> </em></code><code><em>blog</em></code>

<code><em>jhjguxin@jhjguxin-Aspire-4750:~$</em></code><code><em> </em></code><code><em>sudo</em></code><code><em> </em></code><code><em>gem</em></code><code><em> </em></code><code><em>install</em></code><code><em> </em></code><code><em>json</em></code><code><em> </em></code><code><em>-v</em></code><code><em> </em></code><code><em>1.6.1</em></code>

<code><em>Invalid</em></code><code><em> </em></code><code><em>gemspec</em></code><code><em> </em></code><code><em>in</em></code><code><em> </em></code><code><em>[/var/lib/gems/1.8/specifications/tilt-1.3.3.gemspec]:</em></code><code><em> </em></code><code><em>invalid</em></code><code><em> </em></code><code><em>date</em></code><code><em> </em></code><code><em>format</em></code><code><em> </em></code><code><em>in</em></code><code><em> </em></code><code><em>specification:</em></code><code><em> </em></code><code><em>"2011-08-25</em></code><code><em> </em></code><code><em>00:00:00.000000000Z"</em></code>

<code><em>Invalid</em></code><code><em> </em></code><code><em>gemspec</em></code><code><em> </em></code><code><em>in</em></code><code><em> </em></code><code><em>[/var/lib/gems/1.8/specifications/json-1.6.1.gemspec]:</em></code><code><em> </em></code><code><em>invalid</em></code><code><em> </em></code><code><em>date</em></code><code><em> </em></code><code><em>format</em></code><code><em> </em></code><code><em>in</em></code><code><em> </em></code><code><em>specification:</em></code><code><em> </em></code><code><em>"2011-09-18</em></code><code><em> </em></code><code><em>00:00:00.000000000Z"</em></code>

<code><em>Invalid</em></code><code><em> </em></code><code><em>gemspec</em></code><code><em> </em></code><code><em>in</em></code><code><em> </em></code><code><em>[/var/lib/gems/1.8/specifications/tilt-1.3.3.gemspec]:</em></code><code><em> </em></code><code><em>invalid</em></code><code><em> </em></code><code><em>date</em></code><code><em> </em></code><code><em>format</em></code><code><em> </em></code><code><em>in</em></code><code><em> </em></code><code><em>specification:</em></code><code><em> </em></code><code><em>"2011-08-25</em></code><code><em> </em></code><code><em>00:00:00.000000000Z"</em></code>

<code><em>Invalid</em></code><code><em> </em></code><code><em>gemspec</em></code><code><em> </em></code><code><em>in</em></code><code><em> </em></code><code><em>[/var/lib/gems/1.8/specifications/json-1.6.1.gemspec]:</em></code><code><em> </em></code><code><em>invalid</em></code><code><em> </em></code><code><em>date</em></code><code><em> </em></code><code><em>format</em></code><code><em> </em></code><code><em>in</em></code><code><em> </em></code><code><em>specification:</em></code><code><em> </em></code><code><em>"2011-09-18</em></code><code><em> </em></code><code><em>00:00:00.000000000Z"</em></code>

<span style="font-family: DejaVu Sans;"><code><em>出现这个问题的时候我</em></code><code><em>是改</em></code><code><span style="color: #000000;"><span style="font-size: small;"><em>成</em></span></span></code><code></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>s.date</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>=</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>%</em></span></span></code><code><span style="color: #000000;"><span style="font-size: small;"><em>q{2011-09-18}</em></span></span></code>

<span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>在</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>rails</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>3.1</em></span></span></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>中由于要创建</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>bundler</em></span></span></code><code></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>信息（</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>Gemfile</em></span></span></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>文件）会提示你安装</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>sqlite3</em></span></span></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>等数据库信息，估计也就是你应用程序所用到的一些必须的</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>modules</em></span></span></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>。</em></span></span></code></span>

<span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>这里用的是</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>sqlite3</em></span></span></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>做数据库，提示的是安装的是</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>sqlite3.</em></span></span></code>

<code><span style="color: #000000;"><span style="font-size: small;"><em>sudo</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>apt-get</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>install</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>sqlite3</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>sqlite3-doc</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libsqlite3-ruby</em></span></span></code>

<span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>还是</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>ERROR:</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>Failed</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>to</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>build</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>gem</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>native</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>extension.</em></span></span></code><code></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>的话</em></span></span></code></span>

<code><span style="color: #000000;"><span style="font-size: small;"><em>sudo</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>apt-get</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>install</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxslt1-dev</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxml2-dev</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxslt-ruby</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxslt1.1</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxsltc-java-gcj</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxslt-ruby</em></span></span></code>

<code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxslt1-dbg</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxsltc-java</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>ibxslthl-java</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxslt-ruby1.8</em></span></span></code>

<code><span style="color: #000000;"><span style="font-size: small;"><em>sudo</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>apt-get</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>install</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libsqlite3-ruby</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libsqlite3-dev</em></span></span></code>

<code><span style="color: #000000;"><span style="font-size: small;"><em>sudo</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>gem</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>install</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>therubyracer</em></span></span></code>

<code><span style="color: #000000;"><span style="font-size: small;"><em>####</em></span></span></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>对于本地安装的</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>rails</em></span></span></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>（就是爬不出去墙的）</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>sudo</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>gem</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>install</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>sqlite3-1.3.4.gem</em></span></span></code>

<span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>成功了！</em></span></span></code></span>

<code><span style="color: #000000;"><span style="font-size: small;"><em>Your</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>bundle</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>is</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>complete!</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>Use</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>`bundle</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>show</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>[gemname]`</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>to</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>see</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>where</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>a</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>bundled</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>gem</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>is</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>installed.</em></span></span></code>

<code>This</code><code> </code><code>will</code><code> </code><code>create</code><code> </code><code>a</code><code> </code><code>Rails</code><code> </code><code>application</code><code> </code><code>called</code><code> </code><code>Blog</code><code> </code><code>in</code><code> </code><code>a</code><code> </code><code>directory</code><code> </code><code>called</code><code> </code><code>blog.</code><span style="font-family: DejaVu Sans;"><code>这里将创建一个名叫</code></span><code>Blog</code><span style="font-family: DejaVu Sans;"><code>的</code></span><code>Rails</code><span style="font-family: DejaVu Sans;"><code>应用程序在名称为</code></span><code>blog</code><span style="font-family: DejaVu Sans;"><code>的目录中。</code></span>

<code>You</code><code> </code><code>can</code><code> </code><code>see</code><code> </code><code>all</code><code> </code><code>of</code><code> </code><code>the</code><code> </code><code>switches</code><code> </code><code>that</code><code> </code><code>the</code><code> </code><code>Rails</code><code> </code><code>application</code><code> </code><code>builder</code><code> </code><code>accepts</code><code> </code><code>by</code><code> </code><code>running</code><code> </code><tt>rails</tt><tt> </tt><tt>new</tt><tt> </tt><tt>-h</tt><code>.</code><span style="font-family: DejaVu Sans;"><code>你可以通过运行</code></span><code>rails</code><code> </code><code>new</code><code> </code><code>-h</code><span style="font-family: DejaVu Sans;"><code>，查看</code></span><code>rails</code><span style="font-family: DejaVu Sans;"><code>应用程序创建器的所有命令（开关）。</code></span>

<code>After</code><code> </code><code>you</code><code> </code><code>create</code><code> </code><code>the</code><code> </code><code>blog</code><code> </code><code>application,</code><code> </code><code>switch</code><code> </code><code>to</code><code> </code><code>its</code><code> </code><code>folder</code><code> </code><code>to</code><code> </code><code>continue</code><code> </code><code>work</code><code> </code><code>directly</code><code> </code><code>in</code><code> </code><code>that</code><code> </code><code>application:</code><span style="font-family: DejaVu Sans;"><code>当你创建了这个</code></span><code>blog</code><span style="font-family: DejaVu Sans;"><code>程序，跳转到它所在的文件夹中（直接对这个程序编辑）</code></span><code>.</code>

<code>$cd</code><code> </code><code>blog</code>

<code>In</code><code> </code><code>any</code><code> </code><code>case,</code><code> </code><code>Rails</code><code> </code><code>will</code><code> </code><code>create</code><code> </code><code>a</code><code> </code><code>folder</code><code> </code><code>in</code><code> </code><code>your</code><code> </code><code>working</code><code> </code><code>directory</code><code> </code><code>called</code><code> </code><tt>blog</tt><code>.</code><code> </code><span style="font-family: DejaVu Sans;"><code>在任何情况下，</code></span><code>Rails</code><span style="font-family: DejaVu Sans;"><code>将会创建一个名为</code></span><code>blog</code><span style="font-family: DejaVu Sans;"><code>的文件夹在你的工作目录中。</code></span><code>Open</code><code> </code><code>up</code><code> </code><code>that</code><code> </code><code>folder</code><code> </code><code>and</code><code> </code><code>explore</code><code> </code><code>its</code><code> </code><code>contents.</code><span style="font-family: DejaVu Sans;"><code>打开这个文件夹浏览其中的内容。</code><code></code></span><code>Most</code><code> </code><code>of</code><code> </code><code>the</code><code> </code><code>work</code><code> </code><code>in</code><code> </code><code>this</code><code> </code><code>tutorial</code><code> </code><code>will</code><code> </code><code>happen</code><code> </code><code>in</code><code> </code><code>the</code><code> </code><tt>app/</tt><code> </code><code>folder,</code><code> </code><code>but</code><code> </code><code>here</code><code>’</code><code>s</code><code> </code><code>a</code><code> </code><code>basic</code><code> </code><code>rundown#</code><span style="font-family: DejaVu Sans;"><code>概述</code><code></code></span><code>on</code><code> </code><code>the</code><code> </code><code>function</code><code> </code><code>of</code><code> </code><code>each</code><code> </code><code>folder</code><code> </code><code>that</code><code> </code><code>Rails</code><code> </code><code>creates</code><code> </code><code>in</code><code> </code><code>a</code><code> </code><code>new</code><code> </code><code>application</code><code> </code><code>by</code><code> </code><code>default:</code><span style="font-family: DejaVu Sans;"><code>在这个体验中的大多数的工作都是在</code></span><code>app/</code><span style="font-family: DejaVu Sans;"><code>这个文件夹中完成的，这里对</code></span><code>Rails</code><span style="font-family: DejaVu Sans;"><code>创建的新应用中的每一个文件夹的功能做出了一个概述：</code></span>
<table width="665" cellspacing="0" cellpadding="2"><colgroup> <col width="74" /> <col width="583" /> </colgroup>
<tbody>
<tr>
<th width="74">File/Folder</th>
<th width="583">Purpose#<span style="font-family: DejaVu Sans;">目的</span></th>
</tr>
<tr>
<td width="74">Gemfile</td>
<td width="583">This file allows you to specify what gem dependencies are needed for your Rails application. See section on Bundler, below.<span style="font-family: DejaVu Sans;">这个文件让你可以（添加）你的</span>Rails<span style="font-family: DejaVu Sans;">所需要的特殊的</span>gem<span style="font-family: DejaVu Sans;">依赖关系。</span></td>
</tr>
<tr>
<td width="74">README</td>
<td width="583">This is a brief instruction manual#<span style="font-family: DejaVu Sans;">手册</span>for your application. You should edit this file to tell others what your application does, how to set it up, and so on.<span style="font-family: DejaVu Sans;">这是一个简单的说明手册。你需要编辑这个文件告诉其他人你的应用程序可以做什么，怎么安装等等。</span></td>
</tr>
<tr>
<td width="74">Rakefile</td>
<td width="583">This file locates and loads tasks that can be run from the command line. The task definitions are defined throughout the components of Rails. Rather than changing Rakefile, you should add your own tasks by adding files to the lib/tasks directory of your application.<span style="font-family: DejaVu Sans;">这个文件定位和载入能够在命令行中运行的任务。这个应该是域吧（任务定义）贯穿整个</span>Rials<span style="font-family: DejaVu Sans;">的组件定义。除了修改</span>Rakefile<span style="font-family: DejaVu Sans;">，你还需要添加你自己的任务的文件到你的应用程序的</span>lib/tasks<span style="font-family: DejaVu Sans;">目录。</span></td>
</tr>
<tr>
<td width="74">app/</td>
<td width="583">Contains the controllers, models, views and assets for your application. You’ll focus on this folder for the remainder of this guide.<span style="font-family: DejaVu Sans;">包含</span>controllers, models, views<span style="font-family: DejaVu Sans;">和你应用程序的</span>assets<span style="font-family: DejaVu Sans;">（资源），再接下面的手册中你主要的注意力应该放在这里。</span></td>
</tr>
<tr>
<td width="74">config/</td>
<td width="583">Configure your application’s runtime rules, routes, database, and more.<span style="font-family: DejaVu Sans;">配置你的应用程序的运行的规则，（</span>url<span style="font-family: DejaVu Sans;">）路由，数据库和其他。</span></td>
</tr>
<tr>
<td width="74">config.ru</td>
<td width="583">Rack configuration for Rack based servers used to start the application.<span style="font-family: DejaVu Sans;">基于</span>Rack<span style="font-family: DejaVu Sans;">服务器使用这个应用程序的</span>Rack<span style="font-family: DejaVu Sans;">配置</span></td>
</tr>
<tr>
<td width="74">db/</td>
<td width="583">Shows your current database schema, as well as the database migrations. You’ll learn about migrations shortly.<span style="font-family: DejaVu Sans;">显示你当前的数据表，同样也显示数据迁移。你将会简单的了解关于（数据）迁移。</span></td>
</tr>
<tr>
<td width="74">doc/</td>
<td width="583">In-depth documentation for your application.<span style="font-family: DejaVu Sans;">应用程序的（深入）全面的文档。</span></td>
</tr>
<tr>
<td width="74">lib/</td>
<td width="583">Extended modules for your application (not covered in this guide).<span style="font-family: DejaVu Sans;">应用程序用到的扩展库（本手册没有涉及）</span></td>
</tr>
<tr>
<td width="74">log/</td>
<td width="583">Application log files.<span style="font-family: DejaVu Sans;">应用程序的日志文件</span></td>
</tr>
<tr>
<td width="74">public/</td>
<td width="583">The only folder seen to the world as-is. Contains the static files and compiled assets.<span style="font-family: DejaVu Sans;">这是外部可见的唯一文件夹。包含静态文件和编译资源。</span></td>
</tr>
<tr>
<td width="74">script/</td>
<td width="583">Contains the rails script that starts your app and can contain other scripts you use to deploy#<span style="font-family: DejaVu Sans;">部署配置</span>or run your application.<span style="font-family: DejaVu Sans;">包含运行你的</span>app<span style="font-family: DejaVu Sans;">的</span>rails<span style="font-family: DejaVu Sans;">脚本，或者其他用来配置或运行你的应用程序的</span>scripts<span style="font-family: DejaVu Sans;">。</span></td>
</tr>
<tr>
<td width="74">test/</td>
<td width="583">Unit tests, fixtures, and other test apparatus. These are covered in <a href="http://guides.rubyonrails.org/testing.html"><span style="color: #000080;"><span style="text-decoration: underline;">Testing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Applications</span></span></a><span style="font-family: DejaVu Sans;">单元测试，</span>fixtures<span style="font-family: DejaVu Sans;">，或者其他</span>test<span style="font-family: DejaVu Sans;">工具。他们在</span><a href="http://guides.rubyonrails.org/testing.html"><span style="color: #000080;"><span style="text-decoration: underline;">Testing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Applications</span></span></a><span style="font-family: DejaVu Sans;">里面有完整的讲述。</span></td>
</tr>
<tr>
<td width="74">tmp/</td>
<td width="583">Temporary files<span style="font-family: DejaVu Sans;">模板文件</span></td>
</tr>
<tr>
<td width="74">vendor/</td>
<td width="583">A place for all third-party code. In a typical Rails application, this includes Ruby Gems, the Rails source code (if you install it into your project) and plugins containing additional prepackaged functionality.<span style="font-family: DejaVu Sans;">放置第三方代码的地方。在一个典型的</span>Rails<span style="font-family: DejaVu Sans;">应用程序中，这里包含</span>Ruby Gems<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">源代码（如果你把</span>Rails<span style="font-family: DejaVu Sans;">安装到你的项目中）还包含一些预先包装好的额外的插件</span></td>
</tr>
</tbody>
</table>
<h4><a name="configuring-a-database"></a><code>3.3</code><code> </code><code>Configuring</code><code> </code><code>a</code><code> </code><code>Database</code><span style="font-family: WenQuanYi Micro Hei;"><code>配置数据库</code></span></h4>
Just about every Rails application will interact with a database.<span style="font-family: DejaVu Sans;">基本上每个</span>Rails<span style="font-family: DejaVu Sans;">应用程序都会和一个数据库互动。</span>The database to use is specified in a configuration file, <tt>config/database.yml</tt>.<span style="font-family: DejaVu Sans;">使用的数据库在</span>config/database.yml<span style="font-family: DejaVu Sans;">的配置文件中指定的。</span>If you open this file in a new Rails application, you’ll see a default database configuration using SQLite3. The file contains sections for three different environments in which Rails can run by default:<span style="font-family: DejaVu Sans;">如果你在一个新的</span>Rails<span style="font-family: DejaVu Sans;">应用程序中打开这个文件，你将会看到一个默认的数据库配置使用的是</span>SQLite3.<span style="font-family: DejaVu Sans;">这个文件包含</span>Rails<span style="font-family: DejaVu Sans;">可以默认运行的三个不同的环境会话。</span>
<ul>
	<li>The <tt>development</tt> environment is used on your development computer as you interact manually with the application. <span style="font-family: DejaVu Sans;">开发环境使用在开发计算机上，让你和你的应用程序手动交互</span></li>
	<li>The <tt>test</tt> environment is used to run automated tests. <span style="font-family: DejaVu Sans;">测试环境用于运行自动测试</span></li>
	<li>The <tt>production</tt> environment is used when you deploy your application for the world to use.<span style="font-family: DejaVu Sans;">产品环境在你向外发布过后使用</span></li>
</ul>
<h5><a name="configuring-an-sqlite3-database"></a>3.3.1 Configuring an SQLite3 Database</h5>
Rails comes with built-in support for <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://www.sqlite.org/">SQLite3</a></span></span>, which is a lightweight serverless database application.Rails<span style="font-family: DejaVu Sans;">内置并支持</span>SQLite3<span style="font-family: DejaVu Sans;">，</span>SQLite3<span style="font-family: DejaVu Sans;">是一个轻量级的数据库服务器。</span>While a busy production environment may overload SQLite, it works well for development and testing.<span style="font-family: DejaVu Sans;">但是一个繁忙的产品环境可能会导致</span>SQLite<span style="font-family: DejaVu Sans;">超载，</span>SQLite3<span style="font-family: DejaVu Sans;">更适合在开发或测试中使用。</span>Rails defaults to using an SQLite database when creating a new project, but you can always change it later.Rails<span style="font-family: DejaVu Sans;">在创建一个新项目的时候默认使用一个</span>SQLite<span style="font-family: DejaVu Sans;">数据库，但是你可以在之后随时更改。</span>

Here’s the section of the default configuration file (<tt>config/database.yml</tt>) with connection information for the development environment:<span style="font-family: DejaVu Sans;">这是在开发环境中配置连接信息的默认配置文件的节选：</span>

<code>development:</code>

<code> </code><code>adapter:</code><code> </code><code>sqlite3</code>

<code> </code><code>database:</code><code> </code><code>db/development.sqlite3</code>

<code> </code><code>pool:</code><code> </code><code>5</code>

<code> </code><code>timeout:</code><code> </code><code>5000</code>

In this guide we are using an SQLite3 database for data storage, because it is a zero configuration database that just works. <span style="font-family: DejaVu Sans;">在这个手册中使用一个</span>SQLite3<span style="font-family: DejaVu Sans;">数据库存存储数据，因为它不需要我们再去配置就能工作。</span>Rails also supports MySQL and PostgreSQL “out of the box”, and has plugins for many database systems.Rails<span style="font-family: DejaVu Sans;">同样支持</span>MySQL<span style="font-family: DejaVu Sans;">和</span>PostgreSQL <span style="font-family: DejaVu Sans;">，它还有许多支持其他数据库系统的插件</span>If you are using a database in a production environment Rails most likely has an adapter for it.<span style="font-family: DejaVu Sans;">如果你在产品环境中使用数据库对</span>Rails<span style="font-family: DejaVu Sans;">来说仅仅是添加一个适配器而已。</span>
<h5><a name="configuring-a-mysql-database"></a>3.3.2 Configuring a MySQL Database<span style="font-family: WenQuanYi Micro Hei;">配置一个</span>MySQL<span style="font-family: WenQuanYi Micro Hei;">数据库</span></h5>
If you choose to use MySQL instead of the shipped SQLite3 database, your <tt>config/database.yml</tt> will look a little different.<span style="font-family: DejaVu Sans;">如果你选择</span>MySQL<span style="font-family: DejaVu Sans;">代替</span>SQLite3<span style="font-family: DejaVu Sans;">数据库，你的配置文件会有一点不同。</span>Here’s the development section:<span style="font-family: DejaVu Sans;">这是开发环境下（的配置）：</span>

<code>development:</code>

<code> </code><code>adapter:</code><code> </code><code>mysql2</code>

<code> </code><code>encoding:</code><code> </code><code>utf8</code>

<code> </code><code>database:</code><code> </code><code>blog_development</code>

<code> </code><code>pool:</code><code> </code><code>5</code>

<code> </code><code>username:</code><code> </code><code>root</code>

<code> </code><code>password:</code>

<code> </code><code>socket:</code><code> </code><code>/tmp/mysql.sock</code>

If your development computer’s MySQL installation includes a root user with an empty password, this configuration should work for you. <span style="font-family: DejaVu Sans;">如果你的开发计算机中安装的</span>MySQL<span style="font-family: DejaVu Sans;">包含一个</span>root<span style="font-family: DejaVu Sans;">用户和空的密码，这个配置文件就可以工作。</span>Otherwise, change the username and password in the <tt>development</tt> section as appropriate.<span style="font-family: DejaVu Sans;">否则，修改合适的开发环境中使用的用户名和密码。</span>
<h5><a name="configuring-a-postgresql-database"></a>3.3.3 Configuring a PostgreSQL Database<span style="font-family: WenQuanYi Micro Hei;">配置一个</span>PostgreSQL<span style="font-family: WenQuanYi Micro Hei;">数据库</span></h5>
If you choose to use PostgreSQL, your <tt>config/database.yml</tt> will be customized to use PostgreSQL databases:

<code>development:</code>

<code> </code><code>adapter:</code><code> </code><code>postgresql</code>

<code> </code><code>encoding:</code><code> </code><code>unicode</code>

<code> </code><code>database:</code><code> </code><code>blog_development</code>

<code> </code><code>pool:</code><code> </code><code>5</code>

<code> </code><code>username:</code><code> </code><code>blog</code>

<code> </code><code>password:</code>
<h5><a name="configuring-an-sqlite3-database-for-jrub"></a> 3.3.4 Configuring an SQLite3 Database for JRuby Platform<span style="font-family: WenQuanYi Micro Hei;">配置在</span>JRuby<span style="font-family: WenQuanYi Micro Hei;">平台中使用的</span>SQLite3<span style="font-family: WenQuanYi Micro Hei;">数据库</span></h5>
If you choose to use SQLite3 and using JRuby, your <tt>config/database.yml</tt> will look a little different. Here’s the development section:

<code>development:</code>

<code> </code><code>adapter:</code><code> </code><code>jdbcsqlite3</code>

<code> </code><code>database:</code><code> </code><code>db/development.sqlite3</code>
<h5><a name="configuring-a-mysql-database-for-jruby-p"></a> 3.3.5 Configuring a MySQL Database for JRuby Platform<span style="font-family: WenQuanYi Micro Hei;">配置在</span>JRuby<span style="font-family: WenQuanYi Micro Hei;">平台中使用的</span>MySQL<span style="font-family: WenQuanYi Micro Hei;">数据库</span></h5>
If you choose to use MySQL and using JRuby, your <tt>config/database.yml</tt> will look a little different. Here’s the development section:

<code>development:</code>

<code> </code><code>adapter:</code><code> </code><code>jdbcmysql</code>

<code> </code><code>database:</code><code> </code><code>blog_development</code>

<code> </code><code>username:</code><code> </code><code>root</code>

<code> </code><code>password:</code>
<h5><a name="configuring-a-postgresql-database-for-jr"></a> 3.3.6 Configuring a PostgreSQL Database for JRuby Platform<span style="font-family: WenQuanYi Micro Hei;">配置在</span>JRuby<span style="font-family: WenQuanYi Micro Hei;">平台中使用的</span>PostgreSQL<span style="font-family: WenQuanYi Micro Hei;">数据库</span></h5>
Finally if you choose to use PostgreSQL and using JRuby, your <tt>config/database.yml</tt> will look a little different. Here’s the development section:

<code>development:</code>

<code> </code><code>adapter:</code><code> </code><code>jdbcpostgresql</code>

<code> </code><code>encoding:</code><code> </code><code>unicode</code>

<code> </code><code>database:</code><code> </code><code>blog_development</code>

<code> </code><code>username:</code><code> </code><code>blog</code>

<code> </code><code>password:</code>

Change the username and password in the <tt>development</tt> section as appropriate.<span style="font-family: DejaVu Sans;">修改在开发会话中使用的合适的用户名和密码</span>

You don’t have to update the database configurations manually. <span style="font-family: DejaVu Sans;">你不是必须手动的配置数据库</span>If you look at the options of the application generator, you will see that one of the options is named <tt>—</tt><tt>database</tt>. <span style="font-family: DejaVu Sans;">如果你查看应用程序产生器，你将会发现一个选项（</span>-d, --database=name Preconfigure for selected database (options: mysql/oracle/postgresql/sqlite2/sqlite3/frontbase/ibm_db).<span style="font-family: DejaVu Sans;">）</span>

This option allows you to choose an adapter from a list of the most used relational databases. You can even run the generator repeatedly: <tt>cd</tt><tt> </tt><tt>..</tt><tt> </tt><tt>&amp;&amp;</tt><tt> </tt><tt>rails</tt><tt> </tt><tt>blog</tt><tt> </tt><tt>--database=mysql</tt>When you confirm<span style="font-family: DejaVu Sans;">确认</span>the overwriting of the <tt>config/database.yml</tt> file, your application will be configured for MySQL instead of SQLite.
<h4><a name="creating-the-database"></a>3.4 Creating the Database<span style="font-family: WenQuanYi Micro Hei;">创建数据库</span></h4>
Now that you have your database configured,it’s time to have Rails create an empty database for you. <span style="font-family: DejaVu Sans;">现在你已经有了你的数据库配置文件了，是时候创建一个空的数据库了。</span>You can do this by running a rake command:

<code>$</code><code> </code><code>rake</code><code> </code><code>db:create</code><code> #</code><span style="font-family: DejaVu Sans;"><code><span style="font-family: Liberation Serif,Times New Roman,serif;">确保你的系统中已经有一个</span></code></span><code>JavaScript runtime.</code><code>#</code><span style="font-family: DejaVu Sans;"><code>可能还需要执行</code></span><code>sudo</code><code> </code><code><span style="font-family: monospace;">gem</span></code><code></code><code><span style="font-family: monospace;">install</span></code><code></code><code><span style="font-family: monospace;">therubyracer</span></code><code></code><code><span style="font-family: monospace;">&amp;&amp;</span></code><code>sudo</code><code> </code><code>gem</code><code> </code><code>install</code><code> </code><code>execjs</code>

jhjguxin@jhjguxin-virtual-machine:~/blog$ rake db:create

rake aborted!

Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes.

<code>one</code><code> </code><code>way:</code>

<span style="font-family: DejaVu Sans;"><code>并且</code></span><code>In</code><code> </code><code>your</code><code> </code><code>Gemfile</code>
<pre>write this

gem 'execjs'

gem 'therubyracer'

and then run

bundle install</pre>
<code> #</code><span style="font-family: DejaVu Sans;"><code>在</code></span><code>ubuntu</code><span style="font-family: DejaVu Sans;"><code>环境中安装</code></span><code>sqlite3</code><span style="font-family: DejaVu Sans;"><code>库</code></span><code><span style="color: #000000;"><span style="font-size: small;"><em><span style="text-decoration: underline;"><strong>sudo</strong></span></em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em><span style="text-decoration: underline;"><strong>apt-get</strong></span></em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em><span style="text-decoration: underline;"><strong>install</strong></span></em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em><span style="text-decoration: underline;"><strong>libsqlite3-ruby</strong></span></em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em><span style="text-decoration: underline;"><strong>libsqlite3-dev</strong></span></em></span></span></code><code> </code><span style="font-family: DejaVu Sans;"><code>也尝试过使用</code></span><code>gem</code><code> </code><code>install</code><code> </code><code>sqlite3-ruby</code><span style="font-family: DejaVu Sans;"><code>但是网上说是</code></span><code>gem</code><code> </code><code>nds</code><span style="font-family: DejaVu Sans;"><code>有问题</code><code></code><code>安装</code></span><code>ruby</code><span style="font-family: DejaVu Sans;"><code>的</code></span><code> mysql</code><span style="font-family: DejaVu Sans;"><code>库</code></span><code><span style="text-decoration: underline;"><strong>sudo</strong></span></code><code></code><code><span style="text-decoration: underline;"><strong>apt-get</strong></span></code><code></code><code><span style="text-decoration: underline;"><strong>install</strong></span></code><code></code><code><span style="text-decoration: underline;"><strong>libmysql-ruby</strong></span></code>

another way:

<span style="font-family: DejaVu Sans;"><span style="color: #800000;">参照上面的网址：我找了一个</span></span><span style="color: #800000;">ubuntu<span style="font-family: DejaVu Sans;">里面有的</span></span><span style="color: #800000;">Node.js</span><span style="font-family: DejaVu Sans;"><span style="color: #800000;">就可以不用那个</span></span><span style="color: #800000;">therubyracer<span style="font-family: DejaVu Sans;">了</span></span>

jhjguxin@jhjguxin-virtual-machine:~/blog$ rake db:create

This will create your development and test SQLite3 databases inside the <tt>db/</tt> folder.<span style="font-family: DejaVu Sans;">将会在</span>db/<span style="font-family: DejaVu Sans;">文件夹中创建你的开发环境的数据库文件</span>development.sqlite3

Rake is a general-purpose command-runner that Rails uses for many things. You can see the list of available rake commands in your application by running <tt>rake</tt><tt> </tt><tt>-T</tt>.Rake<span style="font-family: DejaVu Sans;">是一个通用的命令行可以帮助</span>Rails<span style="font-family: DejaVu Sans;">用户完成很多事情。你可以通过运行</span><tt>rake</tt><tt> </tt><tt>-T</tt><tt> </tt><span style="font-family: DejaVu Sans;">查看可用的</span>rake<span style="font-family: DejaVu Sans;">命令</span>

ruby script/server#<span style="font-family: DejaVu Sans;">或者</span>script/server
<h3><a name="hello-rails"></a>4 Hello, Rails!</h3>
One of the traditional places to start with a new language is by getting some text up on screen quickly. To do this, you need to get your Rails application server running.<span style="font-family: DejaVu Sans;">传统的方式之一，开始使用一种新的（命令）语法并得到快速掠过的文字。要得到这样的结果你需要使你的</span>Rails<span style="font-family: DejaVu Sans;">程序运行。</span>

<code>$</code><code> </code><code>rails</code><code> </code><code>server</code><code> </code><code>#-----rails2.3.1</code><code> </code>$ ruby script/server#

This will fire up an instance of the WEBrick web server by default (Rails can also use several other web servers). <span style="font-family: DejaVu Sans;">这里默认将开启一个</span>WEBrick<span style="font-family: DejaVu Sans;">服务器的的实例（</span>Rails<span style="font-family: DejaVu Sans;">也可能使用一些其他的</span>web<span style="font-family: DejaVu Sans;">服务器）。</span>To see your application in action, open a browser window and navigate to <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/">http://localhost:3000</a></span></span>. You should see Rails’ default information page:<span style="font-family: DejaVu Sans;">查看你的应用程序的行为，打开一个浏览器并且导航到</span>127.0.0.0<span style="font-family: DejaVu Sans;">：</span>3000<span style="font-family: DejaVu Sans;">你将会看到一个</span>Rails<span style="font-family: DejaVu Sans;">默认的信息页面。</span>

To stop the web server, hit Ctrl+C in the terminal window where it’s running. In development mode, Rails does not generally require you to stop the server; changes you make in files will be automatically picked up by the server.<span style="font-family: DejaVu Sans;">要终止</span>web<span style="font-family: DejaVu Sans;">服务，在命令运行的终端中按下</span>Ctrl+C<span style="font-family: DejaVu Sans;">。在开发环境模式中，</span>Rails<span style="font-family: DejaVu Sans;">一般不需要你停止服务；你所做的更改将自动的编译进需要的文件中并且重启服务。</span>

The “Welcome Aboard#<span style="font-family: DejaVu Sans;">船<span style="font-family: Liberation Serif,Times New Roman,serif;">” </span></span>page is the <em>smoke</em><em> </em><em>test</em> for a new Rails application: it makes sure that you have your software configured correctly enough to serve a page.<span style="font-family: DejaVu Sans;">这个欢迎界面体现了一个新的</span>Rails<span style="font-family: DejaVu Sans;">应用程序创建成功（通过了</span>Rails<span style="font-family: DejaVu Sans;">的自检）。</span>You can also click on the <em>About</em><em> </em><em>your</em><em> </em><em>application</em><em>’</em><em>s</em><em> </em><em>environment</em> link to see a summary of your application’s environment.<span style="font-family: DejaVu Sans;">你可以点击<span style="font-family: Liberation Serif,Times New Roman,serif;">‘ </span></span><em>About</em><em> </em><em>your</em><em> </em><em>application</em><em>’</em><em>s</em><em> </em><em>environment</em>’<span style="font-family: DejaVu Sans;">查看你的应用程序运行环境摘要信息。</span>
<h4><a name="say-hello-rails"></a>4.2 Say “Hello”, Rails</h4>
To get Rails saying “Hello”, you need to create at minimum a controller and a view.<span style="font-family: DejaVu Sans;">要使</span>Rails<span style="font-family: DejaVu Sans;">说出（显示）<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span>你好<span style="font-family: Liberation Serif,Times New Roman,serif;">”</span>，你还需要创建一个最小的</span>a controller and a view<span style="font-family: DejaVu Sans;">。</span>Fortunately, you can do that in a single command. Enter this command in your terminal:<span style="font-family: DejaVu Sans;">幸运的是，你可以完成这些通过一行命令。在终端中输入：</span>
<code>rails</code><code> </code><code>generate</code><code> </code><code>controller</code><code> </code><code>home</code><code> </code><code>index</code><code> </code>##rails2.3.1 <code><span style="color: #000000;"><span style="font-size: small;">script/generate</span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;">controller</span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;">home</span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;">index##</span></span></code>

If you get a command not found error when running this command, you need to explicitly pass Rails <tt>rails</tt> commands to Ruby: <tt><em>ruby</em></tt><tt><em> </em></tt><tt><em>\path\to\your\application\script\rails</em></tt><tt><em> </em></tt><tt><em>generate</em></tt><tt><em> </em></tt><tt><em>controller</em></tt><tt><em> </em></tt><tt><em>home</em></tt><tt><em> </em></tt><tt><em>index</em></tt><em>.</em><span style="font-family: DejaVu Sans;"><em>如果你在输入这个命令的时候出现没有这个命令错误，你需要明确的使用</em></span><em>ruby</em><span style="font-family: DejaVu Sans;"><em>来执行</em></span><em>Rails</em><span style="font-family: DejaVu Sans;"><em>命令。</em><span style="color: #800000;"><em>这里就没有</em></span></span><span style="color: #800000;"><em>rails</em><span style="font-family: DejaVu Sans;"><em>这个文件</em></span><span style="color: #800000;"><em>应该是</em></span></span><span style="color: #800000;"><em>ruby</em></span><span style="color: #800000;"><em>script/generate</em></span><span style="color: #800000;"><em>controller</em></span><span style="color: #800000;"><em>home</em></span><span style="color: #800000;"><em>index</em></span>

Rails will create several files for you, including <tt>app/views/home/index.html.erb</tt>. Rails<span style="font-family: DejaVu Sans;">将会为你创建一些文件，包含<span style="font-family: Liberation Serif,Times New Roman,serif;">‘</span></span><tt>app/views/home/index.html.erb</tt>’<span style="font-family: DejaVu Sans;">。</span>This is the template that will be used to display the results of the <tt>index</tt> action (method) in the <tt>home</tt> controller.<span style="font-family: DejaVu Sans;">这个模板会用来显示在</span><tt>home</tt> controller<span style="font-family: DejaVu Sans;">中的</span><tt>index</tt> action (method)<span style="font-family: DejaVu Sans;">的结果。</span>Open this file in your text editor and edit it to contain a single line of code:<span style="font-family: DejaVu Sans;">在文本编辑器中打开这个文件并输入：</span>

<code>&lt;h1&gt;Hello,</code><code> </code><code>Rails!&lt;/h1&gt;</code><code> </code>
<h4><a name="setting-the-application-home-page"></a>4.3 Setting the Application Home Page</h4>
Now that we have made the controller and view, we need to tell Rails when we want “Hello Rails” to show up. <span style="font-family: DejaVu Sans;">现在我们已经创建了</span>controller <span style="font-family: DejaVu Sans;">和</span>view<span style="font-family: DejaVu Sans;">，我们还需要告诉</span>Rails<span style="font-family: DejaVu Sans;">我们想在什么时候显示出来。</span>In our case, we want it to show up when we navigate to the root URL of our site, <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/">http://localhost:3000</a></span></span>, instead of the “Welcome Aboard” smoke test.<span style="font-family: DejaVu Sans;">在本例中，我们想让它在我们导航至站点</span>url<span style="font-family: DejaVu Sans;">根目录的时候替代<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>Welcome Aboard”<span style="font-family: DejaVu Sans;">显示。</span>

The first step to doing this is to delete the default page from your application:<span style="font-family: DejaVu Sans;">首先移除应用程序中的默认页面。</span>

<code>rm</code><code> </code><code>public/index.html</code>

We need to do this as Rails will deliver#<span style="font-family: DejaVu Sans;">提供，传输</span>any static file in the <tt>public</tt> directory in preference#<span style="font-family: DejaVu Sans;">偏好优先</span>to any dynamic#<span style="font-family: DejaVu Sans;">动态</span>content we generate from the controllers.<span style="font-family: DejaVu Sans;">我们必须这样做因为，</span>Rails<span style="font-family: DejaVu Sans;">将会传送任何在</span>public<span style="font-family: DejaVu Sans;">的静态文件优先于我们在</span>controllers<span style="font-family: DejaVu Sans;">生成的动态（显示）内容。</span>

Now, you have to tell Rails where your actual home page is located.Open the file <tt>config/routes.rb</tt> in your editor. This is your application’s <em>routing</em><em> </em><em>file</em> which holds entries in a special DSL (domain-specific language) that tells Rails how to connect incoming requests to controllers and actions. This file contains many sample routes on commented lines, and one of them actually shows you how to connect the root of your site to a specific controller and action. Find the line beginning with <tt>root</tt><tt> </tt><tt>:to</tt>, uncomment it and change it like the following:<span style="font-family: DejaVu Sans;">现在你还必须告诉</span>Rails <span style="font-family: DejaVu Sans;">你实际上的主页在哪里。在文本编辑器中打开</span><tt>config/routes.rb</tt> <span style="font-family: DejaVu Sans;">。这是你应用程序的路由文件，它采用</span>DSL<span style="font-family: DejaVu Sans;">语言囊括了告诉</span>Rails<span style="font-family: DejaVu Sans;">怎样连接请求信息到</span>controllers and actions.<span style="font-family: DejaVu Sans;">的所有条目。</span>

<span style="font-family: DejaVu Sans;">这个文件包含许多简单的路由命令，其中一条实际上是用于告诉我们怎样连接你站点根目录到一个指定的</span>controller and acti<span style="font-family: DejaVu Sans;">。找到以</span>root :to<span style="font-family: DejaVu Sans;">开头的那一行，注释掉它改成如下内容：</span>

<code>Blog::Application.routes.draw</code><code> </code><code>do</code>

&nbsp;

<code> </code><code>get</code><code> </code><code>"home/index"</code>

&nbsp;

<code> </code><code>root</code><code> </code><code>:to</code><code> </code><code>=&gt;</code><code> </code><code>"home#index"</code>

<code>//////////////////this</code><code> </code><code>depend</code><code> </code><code>on</code><code> </code><code>rails</code><code> </code><code>2.3.1/////////</code>

<code>Blog::Application.routes.draw</code><code> </code><code>do</code>

&nbsp;

<code> </code><code>#...</code>

<code> </code><code>#</code><code> </code><code>You</code><code> </code><code>can</code><code> </code><code>have</code><code> </code><code>the</code><code> </code><code>root</code><code> </code><code>of</code><code> </code><code>your</code><code> </code><code>site</code><code> </code><code>routed</code><code> </code><code>with</code><code> </code><code>"root"</code>

<code> </code><code>#</code><code> </code><code>just</code><code> </code><code>remember</code><code> </code><code>to</code><code> </code><code>delete</code><code> </code><code>public/index.html.</code>

<code> </code><code>map.root</code><code> </code><code>:controller</code><code> </code><code>=&gt;</code><code> </code><code>"home"</code><code> </code>

<code>or</code>

<code> </code><code>map.root</code><code> </code><code>:controller</code><code> </code><code>=&gt;</code><code> </code><code>"home",:action</code><code> </code><code>=&gt;</code><code> </code><code>'index'</code>

<code> </code><code>##root</code><code> </code><code>:to</code> <code>=&gt;</code><code> </code><code>"home#index"</code>

The <tt>root</tt><tt> </tt><tt>:to</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>"home#index"</tt> tells Rails to map the root action to the home controller’s index action.

<span style="color: #800000;">ps</span><span style="color: #800000;">-ef|grep</span><span style="color: #800000;">webrick</span>

<span style="color: #800000;">kill</span><span style="color: #800000;">-9</span><span style="font-family: DejaVu Sans;"><span style="color: #800000;">上面得到的</span></span><span style="color: #800000;">id</span><span style="font-family: DejaVu Sans;"><span style="color: #800000;">强制结束</span></span><span style="color: #800000;">WEBrick<span style="font-family: DejaVu Sans;">服务</span></span>

Now if you navigate to <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/">http://localhost:3000</a></span></span> in your browser, you’ll see <tt>Hello,</tt><tt> </tt><tt>Rails!</tt>.<span style="font-family: DejaVu Sans;">现在你在浏览器中导航至</span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/">http://localhost:3000</a></span></span> <span style="font-family: DejaVu Sans;">，你将会看到<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span><tt>Hello,</tt><tt> </tt><tt>Rails!</tt>”.

For more information about routing, refer to <a href="http://guides.rubyonrails.org/routing.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Routing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">from</span></span><span style="color: #000080;"><span style="text-decoration: underline;">the</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Outside</span></span><span style="color: #000080;"><span style="text-decoration: underline;">In</span></span></a>.<span style="font-family: DejaVu Sans;">更多的信息请参见</span><a href="http://guides.rubyonrails.org/routing.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Routing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">from</span></span><span style="color: #000080;"><span style="text-decoration: underline;">the</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Outside</span></span><span style="color: #000080;"><span style="text-decoration: underline;">In</span></span></a><span style="font-family: DejaVu Sans;">。</span>
<h3><a name="getting-up-and-running-quickly-with-scaf"></a> 5 Getting Up and Running Quickly with Scaffolding<span style="font-family: WenQuanYi Micro Hei;">使用</span>Scaffolding<span style="font-family: WenQuanYi Micro Hei;">快速创建并运行</span></h3>
Rails <em>scaffolding</em> is a quick way to generate some of the major pieces of an application. Rails <em>scaffolding<span style="font-family: DejaVu Sans;">是一个快速的方法产生应用程序的一些主要的部分。</span></em>If you want to create the models, views, and controllers for a new resource in a single operation, scaffolding is the tool for the job.<span style="font-family: DejaVu Sans;">如果你想使用一种简单的操作为新资源创建</span>models,views<span style="font-family: DejaVu Sans;">和</span>controllers<span style="font-family: DejaVu Sans;">，</span>Scaffolding<span style="font-family: DejaVu Sans;">是一个不错的工具。</span>
<h3><a name="creating-a-resource"></a>6 Creating a Resource<span style="font-family: WenQuanYi Micro Hei;">创建一个资源</span></h3>
In the case of the blog application, you can start by generating a scaffolded Post resource: this will represent#<span style="font-family: DejaVu Sans;">代表，表现表示</span>a single blog posting. To do this, enter this command in your terminal:<span style="font-family: DejaVu Sans;">在本示例中的</span>blog<span style="font-family: DejaVu Sans;">应用程序，你可以使用</span>scaffolded<span style="font-family: DejaVu Sans;">产生</span>post<span style="font-family: DejaVu Sans;">资源：它表现为一个简单的</span>blog posting<span style="font-family: DejaVu Sans;">。要完成这些，在终端输入如下命令：</span>

<code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>scaffold</code><code> </code><code>Post</code><code> </code><code>name:string</code><code> </code><code>title:string</code><code> </code><code>content:text</code>

##rails 2.3.1 script/generate scaffold Post name:string title:string content:text

The scaffold generator will build several files in your application, along with some folders, and edit <tt>config/routes.rb</tt>. Here’s a quick overview of what it creates:scaffold<span style="font-family: DejaVu Sans;">创建器将会在应用程序中的一些文件夹中生成一些文件，并且还会编辑</span><tt>config/routes.rb</tt><span style="font-family: DejaVu Sans;"><tt>。下面这些产生的文件的大概说明：</tt></span>
<table width="665" cellspacing="0" cellpadding="2"><colgroup> <col width="231" /> <col width="426" /> </colgroup>
<tbody>
<tr>
<th width="231">File</th>
<th width="426">Purpose</th>
</tr>
<tr>
<td width="231">db/migrate/20100207214725_create_posts.rb</td>
<td width="426">Migration to create the posts table in your database (your name will include a different timestamp)<span style="font-family: DejaVu Sans;">将创建的</span>posts<span style="font-family: DejaVu Sans;">表单迁移到你的数据库（会在你的命名前面加上时间）</span></td>
</tr>
<tr>
<td width="231">app/models/post.rb</td>
<td width="426">The Post model Post<span style="font-family: DejaVu Sans;">模型</span></td>
</tr>
<tr>
<td width="231">test/fixtures/posts.yml</td>
<td width="426">Dummy posts for use in testing <span style="font-family: DejaVu Sans;">模拟测试</span>post</td>
</tr>
<tr>
<td width="231">app/controllers/posts_controller.rb</td>
<td width="426">The Posts controller</td>
</tr>
<tr>
<td width="231">app/views/posts/index.html.erb</td>
<td width="426">A view to display an index of all posts <span style="font-family: DejaVu Sans;">显示所有</span>post</td>
</tr>
<tr>
<td width="231">app/views/posts/edit.html.erb</td>
<td width="426">A view to edit an existing post<span style="font-family: DejaVu Sans;">编辑</span>post</td>
</tr>
<tr>
<td width="231">app/views/posts/show.html.erb</td>
<td width="426">A view to display a single post<span style="font-family: DejaVu Sans;">显示一条</span>post</td>
</tr>
<tr>
<td width="231">app/views/posts/new.html.erb</td>
<td width="426">A view to create a new post<span style="font-family: DejaVu Sans;">创建</span>post</td>
</tr>
<tr>
<td width="231">app/views/posts/_form.html.erb</td>
<td width="426">A partial to control the overall look and feel of the form used in edit and new views<span style="font-family: DejaVu Sans;">一个用于控制编辑和创建新视图的整体视效表</span></td>
</tr>
<tr>
<td width="231">app/helpers/posts_helper.rb</td>
<td width="426">Helper functions to be used from the post views<span style="font-family: DejaVu Sans;">使用</span>post<span style="font-family: DejaVu Sans;">的帮助功能</span>views</td>
</tr>
<tr>
<td width="231">app/assets/stylesheets/scaffolds.css.scss</td>
<td width="426">Cascading style sheet#<span style="font-family: DejaVu Sans;">层叠样式</span>to make the scaffolded views look better #css<span style="font-family: DejaVu Sans;">使</span>scaffolded<span style="font-family: DejaVu Sans;">视图具有更好的效果</span></td>
</tr>
<tr>
<td width="231">app/assets/stylesheets/posts.css.scss</td>
<td width="426">Cascading style sheet for the posts controller#post controller<span style="font-family: DejaVu Sans;">的</span>css<span style="font-family: DejaVu Sans;">效果</span></td>
</tr>
<tr>
<td width="231">app/assets/javascripts/posts.js.coffee</td>
<td width="426">CoffeeScript for the posts controller</td>
</tr>
<tr>
<td width="231">test/unit/post_test.rb</td>
<td width="426">Unit testing harness#<span style="font-family: DejaVu Sans;">利用</span>for the posts model post models<span style="font-family: DejaVu Sans;">的</span>Unit<span style="font-family: DejaVu Sans;">测试</span></td>
</tr>
<tr>
<td width="231">test/functional/posts_controller_test.rb</td>
<td width="426">Functional testing harness for the posts controller post controller<span style="font-family: DejaVu Sans;">的功能测试</span></td>
</tr>
<tr>
<td width="231">test/unit/helpers/posts_helper_test.rb</td>
<td width="426">Unit testing harness for the posts helper post helper<span style="font-family: DejaVu Sans;">的</span>Uint <span style="font-family: DejaVu Sans;">测试</span></td>
</tr>
<tr>
<td width="231">config/routes.rb</td>
<td width="426">Edited to include routing information for posts <span style="font-family: DejaVu Sans;">加入</span>posts <span style="font-family: DejaVu Sans;">路由信息</span></td>
</tr>
</tbody>
</table>
<tt>While</tt><tt> </tt><tt>scaffolding</tt><tt> </tt><tt>will</tt><tt> </tt><tt>get</tt><tt> </tt><tt>you</tt><tt> </tt><tt>up</tt><tt> </tt><tt>and</tt><tt> </tt><tt>running</tt><tt> </tt><tt>quickly,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>code</tt><tt> </tt><tt>it</tt><tt> </tt><tt>generates</tt><tt> </tt><tt>is</tt><tt> </tt><tt>unlikely</tt><tt> </tt><tt>to</tt><tt> </tt><tt>be</tt><tt> </tt><tt>a</tt><tt> </tt><tt>perfect</tt><tt> </tt><tt>fit</tt><tt> </tt><tt>for</tt><tt> </tt><tt>your</tt><tt> </tt><tt>application.</tt><span style="font-family: DejaVu Sans;"><tt>即便是</tt></span><tt>scaffolding</tt><span style="font-family: DejaVu Sans;"><tt>使你创建和运行非常快捷，但是产生的代码不可能完美的适合你的应用程序。</tt><tt></tt></span><tt>You</tt><tt>’</tt><tt>ll</tt><tt> </tt><tt>most</tt><tt> </tt><tt>probably</tt><tt> </tt><tt>want</tt><tt> </tt><tt>to</tt><tt> </tt><tt>customize</tt><tt> </tt><tt>the</tt><tt> </tt><tt>generated</tt><tt> </tt><tt>code.</tt><span style="font-family: DejaVu Sans;"><tt>你大多数都需要定制产生的代码。</tt><tt></tt></span><tt>Many</tt><tt> </tt><tt>experienced</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>developers</tt><tt> </tt><tt>avoid</tt><tt> </tt><tt>scaffolding</tt><tt> </tt><tt>entirely,</tt><tt> </tt><tt>preferring</tt><tt> </tt><tt>to</tt><tt> </tt><tt>write</tt><tt> </tt><tt>all</tt><tt> </tt><tt>or</tt><tt> </tt><tt>most</tt><tt> </tt><tt>of</tt><tt> </tt><tt>their</tt><tt> </tt><tt>source</tt><tt> </tt><tt>code</tt><tt> </tt><tt>from</tt><tt> </tt><tt>scratch.</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>很多有经验的</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>开发人员完全不使用</tt></span><tt>scaffolding</tt><span style="font-family: DejaVu Sans;"><tt>，宁愿从头编写全部的代码。</tt></span><tt>Rails,</tt><tt> </tt><tt>however,</tt><tt> </tt><tt>makes</tt><tt> </tt><tt>it</tt><tt> </tt><tt>really</tt><tt> </tt><tt>simple</tt><tt> </tt><tt>to</tt><tt> </tt><tt>customize</tt><tt> </tt><tt>templates</tt><tt> </tt><tt>for</tt><tt> </tt><tt>generated</tt><tt> </tt><tt>models,</tt><tt> </tt><tt>controllers,</tt><tt> </tt><tt>views</tt><tt> </tt><tt>and</tt><tt> </tt><tt>other</tt><tt> </tt><tt>source</tt><tt> </tt><tt>files.Rails</tt><span style="font-family: DejaVu Sans;"><tt>，无论如何，使得为生成的</tt></span><tt>models</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>controllers</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>views</tt><span style="font-family: DejaVu Sans;"><tt>或者其他代码编定制模板非常简单。</tt><tt></tt></span><tt>You</tt><tt>’</tt><tt>ll</tt><tt> </tt><tt>find</tt><tt> </tt><tt>more</tt><tt> </tt><tt>information</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><a href="http://guides.rubyonrails.org/generators.html"><span style="color: #000080;"><span style="text-decoration: underline;">Creating</span></span><span style="color: #000080;"><span style="text-decoration: underline;">and</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Customizing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Generators</span></span><span style="color: #000080;"><span style="text-decoration: underline;">&amp;</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Templates</span></span></a><tt> </tt><tt>guide.</tt><span style="font-family: DejaVu Sans;"><tt>你可以在</tt><tt></tt></span><a href="http://guides.rubyonrails.org/generators.html"><span style="color: #000080;"><span style="text-decoration: underline;">Creating</span></span><span style="color: #000080;"><span style="text-decoration: underline;">and</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Customizing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Generators</span></span><span style="color: #000080;"><span style="text-decoration: underline;">&amp;</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Templates</span></span></a><span style="font-family: DejaVu Sans;"><tt>看到更多信息。</tt></span>
<h4><a name="running-a-migration"></a><tt>6.1</tt><tt> </tt><tt>Running</tt><tt> </tt><tt>a</tt><tt> </tt><tt>Migration</tt></h4>
One of the products of the <tt>rails</tt><tt> </tt><tt>generate</tt><tt> </tt><tt>scaffold</tt> command is a <em>database</em><em> </em><em>migration</em>. Migrations are Ruby classes that are designed to make it simple to create and modify database tables. Rails uses rake commands to run migrations, and it’s possible to undo a migration after it’s been applied to your database. Migration filenames include a timestamp to ensure that they’re processed#<span style="font-family: DejaVu Sans;">处理</span>in the order that they were created.script/generate scaffold<span style="font-family: DejaVu Sans;">的一个产品就是数据迁移。</span>Migrations<span style="font-family: DejaVu Sans;">是一个</span>ruby<span style="font-family: DejaVu Sans;">类被设计用来使数据库表单的创建和修改变得简单。</span>Rails<span style="font-family: DejaVu Sans;">使用</span>rake<span style="font-family: DejaVu Sans;">命令来执行迁移，它还可以撤销已经应用的修改。</span>Migration filenames include a timestamp<span style="font-family: DejaVu Sans;">确保了迁移能够完成。</span>

If you look in the <tt>db/migrate/20100207214725_create_posts.rb</tt> file (remember, yours will have a slightly different name<span style="font-family: DejaVu Sans;">记住，你得到的可能会有略微不同</span>), here’s what you’ll find:

<code>class</code><tt> </tt><code>CreatePosts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code>

<code> </code><code>def</code> <code>change</code>

<code> </code><code>create_table</code><code> </code><code>:posts</code> <code>do</code> <code>|t|</code>

<code> </code><code>t.string</code><code> </code><code>:name</code>

<code> </code><code>t.string</code><code> </code><code>:title</code>

<code> </code><code>t.text</code><code> </code><code>:content</code>

&nbsp;

<code> </code><code>t.timestamps</code>

<code> </code><code>end</code>

<code> </code><code>end</code>

<code>end</code>

<tt>The</tt><tt> </tt><tt>above</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>creates</tt><tt> </tt><tt>a</tt><tt> </tt><tt>method</tt><tt> </tt><tt>name</tt><tt> </tt><tt>change</tt><tt> </tt><tt>which</tt><tt> </tt><tt>will</tt><tt> </tt><tt>be</tt><tt> </tt><tt>called</tt><tt> </tt><tt>when</tt><tt> </tt><tt>you</tt><tt> </tt><tt>run</tt><tt> </tt><tt>this</tt><tt> </tt><tt>migration.</tt><span style="font-family: DejaVu Sans;"><tt>整个</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>创建了一个名叫</tt></span><tt>change</tt><span style="font-family: DejaVu Sans;"><tt>的方法，该方法在你运行这个</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>的时候被调用。</tt><tt></tt></span><tt>The</tt><tt> </tt><tt>action</tt><tt> </tt><tt>defined</tt><tt> </tt><tt>in</tt><tt> </tt><tt>that</tt><tt> </tt><tt>method</tt><tt> </tt><tt>is</tt><tt> </tt><tt>also</tt><tt> </tt><tt>reversible#</tt><span style="font-family: DejaVu Sans;"><tt>可逆</tt></span><tt>,</tt><tt> </tt><tt>which</tt><tt> </tt><tt>means</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>knows</tt><tt> </tt><tt>how</tt><tt> </tt><tt>to</tt><tt> </tt><tt>reverse</tt><tt> </tt><tt>the</tt><tt> </tt><tt>change</tt><tt> </tt><tt>made</tt><tt> </tt><tt>by</tt><tt> </tt><tt>this</tt><tt> </tt><tt>migration,</tt><tt> </tt><tt>in</tt><tt> </tt><tt>case</tt><tt> </tt><tt>you</tt><tt> </tt><tt>want</tt><tt> </tt><tt>to</tt><tt> </tt><tt>reverse</tt><tt> </tt><tt>it</tt><tt> </tt><tt>at</tt><tt> </tt><tt>later</tt><tt> </tt><tt>date.</tt><span style="font-family: DejaVu Sans;"><tt>这个方法中定义的行为也是可逆的，那就是说</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>知道怎样逆向改变这个</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>，如果你需要恢复到上一次数据。</tt><tt></tt></span><tt>By</tt><tt> </tt><tt>default,</tt><tt> </tt><tt>when</tt><tt> </tt><tt>you</tt><tt> </tt><tt>run</tt><tt> </tt><tt>this</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>it</tt><tt> </tt><tt>will</tt><tt> </tt><tt>creates</tt><tt> </tt><tt>a</tt><tt> </tt><tt>posts</tt><tt> </tt><tt>table</tt><tt> </tt><tt>with</tt><tt> </tt><tt>two</tt><tt> </tt><tt>string</tt><tt> </tt><tt>columns</tt><tt> </tt><tt>and</tt><tt> </tt><tt>a</tt><tt> </tt><tt>text</tt><tt> </tt><tt>column.</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>默认情况下，当你运行这个</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>，他将会创建一个包含两个字符串列和一个</tt></span><tt>text</tt><span style="font-family: DejaVu Sans;"><tt>列的表单。</tt></span><tt>It</tt><tt> </tt><tt>also</tt><tt> </tt><tt>creates</tt><tt> </tt><tt>two</tt><tt> </tt><tt>timestamp</tt><tt> </tt><tt>fields</tt><tt> </tt><tt>to</tt><tt> </tt><tt>track</tt><tt> </tt><tt>record</tt><tt> </tt><tt>creation</tt><tt> </tt><tt>and</tt><tt> </tt><tt>updating.</tt><tt> </tt><tt>More</tt><tt> </tt><tt>information</tt><tt> </tt><tt>about</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>migrations</tt><tt> </tt><tt>can</tt><tt> </tt><tt>be</tt><tt> </tt><tt>found</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><a href="http://guides.rubyonrails.org/migrations.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Database</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Migrations</span></span></a><tt> </tt><tt>guide.</tt><span style="font-family: DejaVu Sans;"><tt>关于</tt></span><tt>Rails</tt><tt> </tt><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>的更多信息请阅读</tt><tt></tt></span><a href="http://guides.rubyonrails.org/migrations.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Database</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Migrations</span></span></a><span style="font-family: DejaVu Sans;"><tt>手册。</tt></span>

<tt>At</tt><tt> </tt><tt>this</tt><tt> </tt><tt>point,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>use</tt><tt> </tt><tt>a</tt><tt> </tt><tt>rake</tt><tt> </tt><tt>command</tt><tt> </tt><tt>to</tt><tt> </tt><tt>run</tt><tt> </tt><tt>the</tt><tt> </tt><tt>migration:</tt><span style="font-family: DejaVu Sans;"><tt>这个时候，你可以使用</tt></span><tt>rake</tt><span style="font-family: DejaVu Sans;"><tt>命令运行</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>了：</tt></span>

<code>rake</code><code> </code><code>db:migrate</code>

<code>Rails</code><code> </code><code>will</code><code> </code><code>execute</code><code> </code><code>this</code><code> </code><code>migration</code><code> </code><code>command</code><code> </code><code>and</code><code> </code><code>tell</code><code> </code><code>you</code><code> </code><code>it</code><code> </code><code>created</code><code> </code><code>the</code><code> </code><code>Posts</code><code> </code><code>table.Rails</code><span style="font-family: DejaVu Sans;"><code>将会执行这个</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>命令并且通知你它创建了</code></span><code>Post</code><span style="font-family: DejaVu Sans;"><code>表单。</code></span>

<code>==</code><code> </code><code>CreatePosts:</code><code> </code><code>migrating</code><code> </code><code>====================================================</code>

<code>--</code><code> </code><code>create_table(:posts)</code>

<code> </code><code>-&gt;</code><code> </code><code>0.0030s</code>

<code>==</code><code> </code><code>CreatePosts:</code><code> </code><code>migrated</code><code> </code><code>(0.0032s)</code><code> </code><code>===========================================</code>

<code>Because</code><code> </code><code>you</code><code>’</code><code>re</code><code> </code><code>working</code><code> </code><code>in</code><code> </code><code>the</code><code> </code><code>development</code><code> </code><code>environment</code><code> </code><code>by</code><code> </code><code>default,</code><code> </code><code>this</code><code> </code><code>command</code><code> </code><code>will</code><code> </code><code>apply</code><code> </code><code>to</code><code> </code><code>the</code><code> </code><code>database</code><code> </code><code>defined</code><code> </code><code>in</code><code> </code><code>the</code><code> </code><tt>development</tt><code> </code><code>section</code><code> </code><code>of</code><code> </code><code>your</code><code> </code><tt>config/database.yml</tt><code> </code><code>file.</code><code> </code><code>If</code><code> </code><code>you</code><code> </code><code>would</code><code> </code><code>like</code><code> </code><code>to</code><code> </code><code>execute</code><code> </code><code>migrations</code><code> </code><code>in</code><code> </code><code>other</code><code> </code><code>environment,</code><code> </code><code>for</code><code> </code><code>instance</code><code> </code><code>in</code><code> </code><code>production,</code><code> </code><code>you</code><code> </code><code>must</code><code> </code><code>explicitly</code><code> </code><code>pass</code><code> </code><code>it</code><code> </code><code>when</code><code> </code><code>invoking</code><code> </code><code>the</code><code> </code><code>command:</code><code> </code><tt>rake</tt><tt> </tt><tt>db:migrate</tt><tt> </tt><tt>RAILS_ENV=production</tt><code>.</code><span style="font-family: DejaVu Sans;"><code>由于你默认工作在开发环境中，这个命令将会应用于开发环境会话的数据库位于你的</code></span><tt>config/database.yml</tt><tt> </tt><span style="font-family: DejaVu Sans;"><code>中。如果你想执行</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>在其他环境中，比如以产品（环境）为实例，你必须明确调用的通过命令行中执行：</code></span><code>rake</code><code> </code><code>db:migrate</code><code> </code><code>RAILS_ENV=production</code><span style="font-family: DejaVu Sans;"><code>。</code></span>
<h4><a name="adding-a-link"></a><code>6.2</code><code> </code><code>Adding</code><code> </code><code>a</code><code> </code><code>Link</code><span style="font-family: WenQuanYi Micro Hei;"><code>添加要给</code></span><code>link</code><span style="font-family: WenQuanYi Micro Hei;"><code>（到</code></span><code>blog</code><span style="font-family: WenQuanYi Micro Hei;"><code>）</code></span></h4>
To hook the posts up to the home page you’ve already created, you can add a link to the home page.<span style="font-family: DejaVu Sans;">把你已经创建好的</span>post<span style="font-family: DejaVu Sans;">挂到主页上，你可以通过添加一个</span>link<span style="font-family: DejaVu Sans;">到主页。</span>Open <tt>app/views/home/index.html.erb</tt> and modify it as follows:<span style="font-family: DejaVu Sans;">打开</span><tt>app/views/home/index.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>并且按照下面所示更改：</tt></span>

<code>&lt;h1&gt;Hello,</code><code> </code><code>Rails!&lt;/h1&gt;</code>

<code>&lt;%=</code><code> </code><code>link_to</code><code> </code><code>"My</code><code> </code><code>Blog",</code><code> </code><code>posts_path</code><code> </code><code>%&gt;</code>

<tt>The</tt><tt> </tt><tt>link_to</tt><tt> </tt><tt>method</tt><tt> </tt><tt>is</tt><tt> </tt><tt>one</tt><tt> </tt><tt>of</tt><tt> </tt><tt>Rails</tt><tt>’ </tt><tt>built-in</tt><tt> </tt><tt>view</tt><tt> </tt><tt>helpers.</tt><span style="font-family: DejaVu Sans;"><tt>这个链接方法是</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>在</tt><tt></tt></span><tt>view</tt><tt> </tt><tt>helpers</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>的内建方法之一</tt><tt></tt><tt>。</tt></span><tt>It</tt><tt> </tt><tt>creates</tt><tt> </tt><tt>a</tt><tt> </tt><tt>hyperlink</tt><tt> </tt><tt>based</tt><tt> </tt><tt>on</tt><tt> </tt><tt>text</tt><tt> </tt><tt>to</tt><tt> </tt><tt>display</tt><tt> </tt><tt>and</tt><tt> </tt><tt>where</tt><tt> </tt><tt>to</tt><tt> </tt><tt>go</tt><tt> – </tt><tt>in</tt><tt> </tt><tt>this</tt><tt> </tt><tt>case,</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>path</tt><tt> </tt><tt>for</tt><tt> </tt><tt>posts.</tt><span style="font-family: DejaVu Sans;"><tt>它创建一个基于文字的超级链接并显示到哪里，在这个实例中（跳转）到</tt></span><tt>posts</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h4><a name="working-with-posts-in-the-browser"></a><tt>6.3</tt><tt> </tt><tt>Working</tt><tt> </tt><tt>with</tt><tt> </tt><tt>Posts</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>Browser</tt></h4>
Now you’re ready to start working with posts. To do that, navigate to <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/">http://localhost:3000</a></span></span> and then click the “My Blog” link:<span style="font-family: DejaVu Sans;">现在你已经准备好在</span>posts<span style="font-family: DejaVu Sans;">中工作了。导航至</span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/">http://localhost:3000</a></span></span><span style="font-family: DejaVu Sans;">，并且点击<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>My Blog”<span style="font-family: DejaVu Sans;">链接。</span>

<code>This</code><code> </code><code>is</code><code> </code><code>the</code><code> </code><code>result</code><code> </code><code>of</code><code> </code><code>Rails</code><code> </code><code>rendering</code><code> </code><code>the</code><code> </code><tt>index</tt><code> </code><code>view</code><code> </code><code>of</code><code> </code><code>your</code><code> </code><code>posts.</code><span style="font-family: DejaVu Sans;"><code>这就是</code></span><code>Rails</code><span style="font-family: DejaVu Sans;"><code>渲染你的</code></span><code>posts</code><span style="font-family: DejaVu Sans;"><code>视图的结果。</code><code></code></span><code>There</code><code> </code><code>aren</code><code>’</code><code>t</code><code> </code><code>currently</code><code> </code><code>any</code><code> </code><code>posts</code><code> </code><code>in</code><code> </code><code>the</code><code> </code><code>database,</code><code> </code><code>but</code><code> </code><code>if</code><code> </code><code>you</code><code> </code><code>click</code><code> </code><code>the</code><code> </code><tt>New</tt><tt> </tt><tt>Post</tt><code> </code><code>link</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>create</code><code> </code><code>one.</code><span style="font-family: DejaVu Sans;"><code>在你点击</code><code><span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></code></span><code>New</code><code> </code><code>Post</code><code>”</code><span style="font-family: DejaVu Sans;"><code>链接并创建一个新的</code></span><code>post</code><span style="font-family: DejaVu Sans;"><code>之前，数据库里面是没有任何</code></span><code>post</code><span style="font-family: DejaVu Sans;"><code>的。</code><code></code></span><code>After</code><code> </code><code>that,</code><code> </code><code>you</code><code>’</code><code>ll</code><code> </code><code>find</code><code> </code><code>that</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>edit</code><code> </code><code>posts,</code><code> </code><code>look</code><code> </code><code>at</code><code> </code><code>their</code><code> </code><code>details,</code><code> </code><code>or</code><code> </code><code>destroy</code><code> </code><code>them.</code><code> </code><span style="font-family: DejaVu Sans;"><code>随后你可以编辑，查看详细内容，或者删除他们。</code></span><code>All</code><code> </code><code>of</code><code> </code><code>the</code><code> </code><code>logic</code><code> </code><code>and</code><code> </code><code>HTML</code><code> </code><code>to</code><code> </code><code>handle</code><code> </code><code>this</code><code> </code><code>was</code><code> </code><code>built</code><code> </code><code>by</code><code> </code><code>the</code><code> </code><code>single</code><code> </code><tt>rails</tt><tt> </tt><tt>generate</tt><tt> </tt><tt>scaffold</tt><code> </code><code>command.post</code><span style="font-family: DejaVu Sans;"><code>的所有的</code></span><code>logic</code><span style="font-family: DejaVu Sans;"><code>和</code></span><code>HTML</code><span style="font-family: DejaVu Sans;"><code>都是通过</code></span><tt><em>rails</em></tt><tt><em> </em></tt><tt><em>generate</em></tt><tt><em> </em></tt><tt><em>scaffold</em></tt><tt><em> </em></tt><span style="font-family: DejaVu Sans;"><code>生成的。</code></span>

<code>In</code><code> </code><code>development</code><code> </code><code>mode</code><code> </code><code>(which</code><code> </code><code>is</code><code> </code><code>what</code><code> </code><code>you</code><code>’</code><code>re</code><code> </code><code>working</code><code> </code><code>in</code><code> </code><code>by</code><code> </code><code>default),</code><code> </code><code>Rails</code><code> </code><code>reloads</code><code> </code><code>your</code><code> </code><code>application</code><code> </code><code>with</code><code> </code><code>every</code><code> </code><code>browser</code><code> </code><code>request,</code><code> </code><code>so</code><code> </code><code>there</code><code>’</code><code>s</code><code> </code><code>no</code><code> </code><code>need</code><code> </code><code>to</code><code> </code><code>stop</code><code> </code><code>and</code><code> </code><code>restart</code><code> </code><code>the</code><code> </code><code>web</code><code> </code><code>server.</code><span style="font-family: DejaVu Sans;"><code>在开发模式中（你的默认工作模式），</code></span><code>Rails</code><span style="font-family: DejaVu Sans;"><code>会在每个浏览器请求的时候重新载入你的应用程序，因此你不需要停止或者重启</code></span><code>web</code><span style="font-family: DejaVu Sans;"><code>服务。</code></span>

<code>Congratulations,</code><code> </code><code>you</code><code>’</code><code>re</code><code> </code><code>riding</code><code> </code><code>the</code><code> </code><code>rails!</code><code> </code><code>Now</code><code> </code><code>it</code><code>’</code><code>s</code><code> </code><code>time</code><code> </code><code>to</code><code> </code><code>see</code><code> </code><code>how</code><code> </code><code>it</code><code> </code><code>all</code><code> </code><code>works.</code><span style="font-family: DejaVu Sans;"><code>恭喜，你已经驯服了</code></span><code>rails</code><span style="font-family: DejaVu Sans;"><code>！现在是时候去看看它的所有工作了。</code></span>
<h4><a name="the-model"></a><code>6.4</code><code> </code><code>The</code><code> </code><code>Model</code></h4>
The model file, <tt>app/models/post.rb</tt> is about as simple as it can get:

<code>class</code><code> </code><code>Post</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code>end</code>

<code>There</code><code> </code><code>isn</code><code>’</code><code>t</code><code> </code><code>much</code><code> </code><code>to</code><code> </code><code>this</code><code> </code><code>file</code><code> – </code><code>but</code><code> </code><code>note</code><code> </code><code>that</code><code> </code><code>the</code><code> </code><tt>Post</tt><code> </code><code>class</code><code> </code><code>inherits</code><code> </code><code>from</code><code> </code><tt>ActiveRecord::Base</tt><code>.</code><span style="font-family: DejaVu Sans;"><code>这里有可能不一致</code><code><span style="font-family: Liberation Serif,Times New Roman,serif;">——</span></code><code>但是切记</code></span><code>Post</code><span style="font-family: DejaVu Sans;"><code>类继承于</code><code></code></span><tt>ActiveRecord::Base</tt><span style="font-family: DejaVu Sans;"><tt>。</tt><code></code></span><code>Active</code><code> </code><code>Record</code><code> </code><code>supplies</code><code> </code><code>a</code><code> </code><code>great</code><code> </code><code>deal</code><code> </code><code>of</code><code> </code><code>functionality</code><code> </code><code>to</code><code> </code><code>your</code><code> </code><code>Rails</code><code> </code><code>models</code><code> </code><code>for</code><code> </code><code>free,</code><code> </code><code>including</code><code> </code><code>basic</code><code> </code><code>database</code><code> </code><code>CRUD</code><code> </code><code>(Create,</code><code> </code><code>Read,</code><code> </code><code>Update,</code><code> </code><code>Destroy)</code><code> </code><code>operations,</code><code> </code><code>data</code><code> </code><code>validation,</code><code> </code><code>as</code><code> </code><code>well</code><code> </code><code>as</code><code> </code><code>sophisticated#</code><span style="font-family: DejaVu Sans;"><code>复杂</code><code></code></span><code>search</code><code> </code><code>support</code><code> </code><code>and</code><code> </code><code>the</code><code> </code><code>ability</code><code> </code><code>to</code><code> </code><code>relate</code><code> </code><code>multiple</code><code> </code><code>models</code><code> </code><code>to</code><code> </code><code>one</code><code> </code><code>another.</code><code> </code><code>Active</code><code> </code><code>Record</code><span style="font-family: DejaVu Sans;"><code>免费为你的</code></span><code>models</code><span style="font-family: DejaVu Sans;"><code>提供了强大的功能，包括基本数据库的</code></span><code>CRUD</code><span style="font-family: DejaVu Sans;"><code>（创建，读取，更新，删除）操作，数据验证，以及复杂的的查询与其它数据表单多关联的字段的支持能力。</code></span>
<h4><a name="adding-some-validation"></a><code>6.5</code><code> </code><code>Adding</code><code> </code><code>Some</code><code> </code><code>Validation</code><span style="font-family: WenQuanYi Micro Hei;"><code>添加一些验证</code></span></h4>
Rails includes methods to help you validate the data that you send to models. Rails<span style="font-family: DejaVu Sans;">包含一些帮助你验证发送到</span>models<span style="font-family: DejaVu Sans;">的数据的方法。</span>Open the <tt>app/models/post.rb</tt> file and edit it:<span style="font-family: DejaVu Sans;">打开</span><tt>app/models/post.rb</tt><span style="font-family: DejaVu Sans;"><tt>并编辑：</tt></span>

class Post &lt; ActiveRecord::Base

validates :name, :presence =&gt; true

validates :title, :presence =&gt; true,

:length =&gt; { :minimum =&gt; 5 }

end

These changes will ensure that all posts have a name and a title, and that the title is at least five characters long. <span style="font-family: DejaVu Sans;">这些更改会确保所有的</span>post<span style="font-family: DejaVu Sans;">都有一个</span>name<span style="font-family: DejaVu Sans;">和</span>titile<span style="font-family: DejaVu Sans;">并且</span>title<span style="font-family: DejaVu Sans;">长度至少五个字符。</span>Rails can validate a variety of<span style="font-family: DejaVu Sans;">各种，很多</span>conditions#<span style="font-family: DejaVu Sans;">名词（字段）</span>in a model, including the presence or uniqueness<span style="font-family: DejaVu Sans;">独特</span>of columns, their format, and the existence of associated<span style="font-family: DejaVu Sans;">相关</span>objects. Rails<span style="font-family: DejaVu Sans;">可以验证很多种字段，比如字段能否为空和独特性，字段的格式，以及字段的关联。</span>
<h4><a name="using-the-console"></a>6.6 Using the Console</h4>
To see your validations in action, you can use the console.<span style="font-family: DejaVu Sans;">要想在</span>action<span style="font-family: DejaVu Sans;">里面查看你的验证你可以使用</span>console<span style="font-family: DejaVu Sans;">。</span>The console is a command-line tool that lets you execute#<span style="font-family: DejaVu Sans;">执行运行</span>Ruby code in the context of your application:console<span style="font-family: DejaVu Sans;">是一个可以让你在你的应用程序的上下文中执行</span>Ruby<span style="font-family: DejaVu Sans;">代码的命令行工具：</span>

<code>$</code><code> </code><code>rails</code><code> </code><code>console</code>

<code>The</code><code> </code><code>default</code><code> </code><code>console</code><code> </code><code>will</code><code> </code><code>make</code><code> </code><code>changes</code><code> </code><code>to</code><code> </code><code>your</code><code> </code><code>database.</code><span style="font-family: DejaVu Sans;"><code>默认的</code></span><code>console</code><span style="font-family: DejaVu Sans;"><code>将会改变你的数据库。</code><code></code></span><code>You</code><code> </code><code>can</code><code> </code><code>instead</code><code> </code><code>open</code><code> </code><code>a</code><code> </code><code>console</code><code> </code><code>that</code><code> </code><code>will</code><code> </code><code>roll</code><code> </code><code>back</code><code> </code><code>any</code><code> </code><code>changes</code><code> </code><code>you</code><code> </code><code>make</code><code> </code><code>by</code><code> </code><code>using</code><code> </code>rails console --sandbox<code>.</code><span style="font-family: DejaVu Sans;"><code>你可以通过运行</code></span><code>rails</code><code> </code><code>console</code><code> –</code><code>sandbox</code><code> </code><code>or</code><code> </code><code>rails</code><code> </code><code>console</code><code> </code><code>-s,</code><span style="font-family: DejaVu Sans;"><code>这样你可以回滚你的任何操作。</code></span>

jhjguxin@jhjguxin-Aspire-4750:~/blog$ rails console -s

Loading development environment in sandbox (Rails 3.1.1)

Any modifications you make will be rolled back on exit

irb(main):001:0&gt; p=Post.new(:content=&gt;"A new post to test console")

=&gt; #&lt;Post id: nil, name: nil, title: nil, content: "A new post to test console", created_at: nil, updated_at: nil&gt;

irb(main):002:0&gt; p.save

(0.2ms) SAVEPOINT active_record_1

(0.1ms) ROLLBACK TO SAVEPOINT active_record_1

=&gt; false

irb(main):003:0&gt; p.errors

=&gt; #&lt;ActiveModel::Errors:0xb6765d48 @base=#&lt;Post id: nil, name: nil, title: nil, content: "A new post to test console", created_at: nil, updated_at: nil&gt;, @messages=#&lt;OrderedHash {:title=&gt;["is too short (minimum is 5 characters)", "can't be blank"], :name=&gt;["can't be blank"]}&gt;&gt;

This code shows creating a new <tt>Post</tt> instance, attempting to save it and getting <tt>false</tt> for a return value (indicating that the save failed), and inspecting the <tt>errors</tt> of the post.<span style="font-family: DejaVu Sans;">这段代码演示了创建一个</span>Post<span style="font-family: DejaVu Sans;">实例，并企图保存到数据库并得到一个失败的返回值（说明保存失败的原因），检查</span>post<span style="font-family: DejaVu Sans;">的错误信息。</span>

When you’re finished, type <tt>exit</tt> and hit <tt>return</tt> to exit the console.<span style="font-family: DejaVu Sans;">当你操作完成，输入</span>exit<span style="font-family: DejaVu Sans;">并回车退出</span>console<span style="font-family: DejaVu Sans;">。</span>

Unlike the development web server, the console does not automatically load your code afresh for each line.<span style="font-family: DejaVu Sans;">不像开发环境的</span>web<span style="font-family: DejaVu Sans;">服务器</span>console<span style="font-family: DejaVu Sans;">不会自动导入你每行输入的新的代码。</span>If you make changes to your models while the console is open, type <tt>reload!</tt> at the console prompt to load them.<span style="font-family: DejaVu Sans;">如果你改变了你的</span>moels<span style="font-family: DejaVu Sans;">并且</span>console<span style="font-family: DejaVu Sans;">是打开的，输入</span>reload!<span style="font-family: DejaVu Sans;">那么</span>console<span style="font-family: DejaVu Sans;">会立即导入他们。</span>

jhjguxin@jhjguxin-Aspire-4750:~/blog$ rails console

Loading development environment (Rails 3.1.1)

irb(main):001:0&gt; p=Post.new(:title=&gt;"test console",:name=&gt;"jhjguxin",:content=&gt;"A new post to test console")

=&gt; #&lt;Post id: nil, name: "jhjguxin", title: "test console", content: "A new post to test console", created_at: nil, updated_at: nil&gt;

irb(main):002:0&gt; p.save

SQL (13.4ms) INSERT INTO "posts" ("content", "created_at", "name", "title", "updated_at") VALUES (?, ?, ?, ?, ?) [["content", "A new post to test console"], ["created_at", Sat, 05 Nov 2011 15:55:17 UTC +00:00], ["name", "jhjguxin"], ["title", "test console"], ["updated_at", Sat, 05 Nov 2011 15:55:17 UTC +00:00]]

=&gt; true

irb(main):003:0&gt; reload!

Reloading...

=&gt; true

#########<span style="font-family: DejaVu Sans;">如果是</span>rails console --sandbox could not reload! Successfully.
<h4><a name="listing-all-posts"></a>6.7 Listing All Posts</h4>
The easiest place to start looking at functionality is with the code that lists all posts. <span style="font-family: DejaVu Sans;">寻找所有功能的地方是使用代码列出所有的</span>post<span style="font-family: DejaVu Sans;">。</span>Open the file <tt>app/controllers/posts_controller.rb</tt> and look at the <tt>index</tt> action:<span style="font-family: DejaVu Sans;">打开文件</span><tt>app/controllers/posts_controller.rb</tt><span style="font-family: DejaVu Sans;"><tt>，并且查看</tt></span><tt>index</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

<code>def</code> <code>index</code>

<code> </code><code>@posts</code> <code>=</code><code> </code><code>Post.all</code>

&nbsp;

<code> </code><code>respond_to</code><code> </code><code>do</code> <code>|format|</code>

<code> </code><code>format.html</code><code> </code><code>#</code><code> </code><code>index.html.erb</code>

<code> </code><code>format.json</code><code> </code><code>{</code><code> </code><code>render</code><code> </code><code>:json</code> <code>=&gt;</code><code> </code><code>@posts</code> <code>}</code>

<code> </code><code>end</code>

<code>end</code>

<tt>Post.all</tt> calls the <tt>Post</tt> model to return all of the posts currently in the database. Post.all<span style="font-family: DejaVu Sans;">调用</span>Post model<span style="font-family: DejaVu Sans;">并返回当前在数据库中的所有</span>post<span style="font-family: DejaVu Sans;">。</span>The result of this call is an array of posts that we store in an instance variable called <tt>@posts</tt>.<span style="font-family: DejaVu Sans;">本次调用的结果是一个</span>post<span style="font-family: DejaVu Sans;">的数组，并且我们将这个数组存储在一个叫做</span>@posts<span style="font-family: DejaVu Sans;">的实例变量中。</span>

For more information on finding records with Active Record, see <a href="http://guides.rubyonrails.org/active_record_querying.html"><span style="color: #000080;"><span style="text-decoration: underline;">Active</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Record</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Query</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Interface</span></span></a>.<span style="font-family: DejaVu Sans;">查找有关</span>Active Record<span style="font-family: DejaVu Sans;">更多的信息，可以查看</span><a href="http://guides.rubyonrails.org/active_record_querying.html"><span style="color: #000080;"><span style="text-decoration: underline;">Active</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Record</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Query</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Interface</span></span></a><span style="font-family: DejaVu Sans;">相关记录。</span>

The <tt>respond_to</tt> block handles both HTML and JSON calls to this action.<span style="font-family: DejaVu Sans;">这个</span>respond_to<span style="font-family: DejaVu Sans;">块处理了这个动作的</span>HTML<span style="font-family: DejaVu Sans;">和</span>JSON<span style="font-family: DejaVu Sans;">请求。</span>If you browse to <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/posts.json">http://localhost:3000/posts.json</a></span></span>, you’ll see a JSON containing all of the posts.<span style="font-family: DejaVu Sans;">如果你浏览</span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/posts.json">http://localhost:3000/posts.json</a></span></span><span style="font-family: DejaVu Sans;">，你将会看到一个</span>JSON<span style="font-family: DejaVu Sans;">包含着所有的</span>post<span style="font-family: DejaVu Sans;">。</span>The HTML format looks for a view in <tt>app/views/posts/</tt> with a name that corresponds to the action name. <span style="font-family: DejaVu Sans;">这个</span>HTML<span style="font-family: DejaVu Sans;">格式在</span><tt>app/views/posts/</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span>view<span style="font-family: DejaVu Sans;">中查找相对应的动作名称。</span>Rails makes all of the instance variables from the action available to the view.Rails<span style="font-family: DejaVu Sans;">使来自</span>action<span style="font-family: DejaVu Sans;">的所有的实例变量对应到（可用）</span>view<span style="font-family: DejaVu Sans;">。</span>Here’s <tt>app/views/posts/index.html.erb</tt>:

<code>&lt;h1&gt;Listing</code><code> </code><code>posts&lt;/h1&gt;</code>

&nbsp;

<code>&lt;table&gt;</code>

<code> </code><code>&lt;tr&gt;</code>

<code> </code><code>&lt;th&gt;Name&lt;/th&gt;</code>

<code> </code><code>&lt;th&gt;Title&lt;/th&gt;</code>

<code> </code><code>&lt;th&gt;Content&lt;/th&gt;</code>

<code> </code><code>&lt;th&gt;&lt;/th&gt;</code>

<code> </code><code>&lt;th&gt;&lt;/th&gt;</code>

<code> </code><code>&lt;th&gt;&lt;/th&gt;</code>

<code> </code><code>&lt;/tr&gt;</code>

&nbsp;

<code>&lt;%</code> <code>@posts.each</code> <code>do</code> <code>|post|</code><code> </code><code>%&gt;</code>

<code> </code><code>&lt;tr&gt;</code>

<code> </code><code>&lt;td&gt;&lt;%=</code> <code>post.name</code><code> </code><code>%&gt;&lt;/td&gt;</code>

<code> </code><code>&lt;td&gt;&lt;%=</code> <code>post.title</code><code> </code><code>%&gt;&lt;/td&gt;</code>

<code> </code><code>&lt;td&gt;&lt;%=</code> <code>post.content</code><code> </code><code>%&gt;&lt;/td&gt;</code>

<code> </code><code>&lt;td&gt;&lt;%=</code> <code>link_to</code><code> </code><code>'Show',</code><code> </code><code>post</code><code> </code><code>%&gt;&lt;/td&gt;</code>

<code> </code><code>&lt;td&gt;&lt;%=</code> <code>link_to</code><code> </code><code>'Edit',</code><code> </code><code>edit_post_path(post)</code><code> </code><code>%&gt;&lt;/td&gt;</code>

<code> </code><code>&lt;td&gt;&lt;%=</code> <code>link_to</code><code> </code><code>'Destroy',</code><code> </code><code>post,</code><code> </code><code>:confirm</code> <code>=&gt;</code><code> </code><code>'Are</code><code> </code><code>you</code><code> </code><code>sure?',</code><code> </code><code>:method</code> <code>=&gt;</code><code> </code><code>:delete</code> <code>%&gt;&lt;/td&gt;</code>

<code> </code><code>&lt;/tr&gt;</code>

<code>&lt;%</code> <code>end</code> <code>%&gt;</code>

<code>&lt;/table&gt;</code>

&nbsp;

<code>&lt;br</code> <code>/&gt;</code>

&nbsp;

<code>&lt;%=</code> <code>link_to</code><code> </code><code>'New</code><code> </code><code>post',</code><code> </code><code>new_post_path</code><code> </code><code>%&gt;</code>

This view iterates#<span style="font-family: DejaVu Sans;">迭代</span>over the contents of the <tt>@posts</tt> array to display content and links.<span style="font-family: DejaVu Sans;">这个</span>view<span style="font-family: DejaVu Sans;">迭代</span>@posts<span style="font-family: DejaVu Sans;">数组所有的内容并显示相关的内容和链接。</span>A few things to note in the view:<span style="font-family: DejaVu Sans;">关于视图</span>note<span style="font-family: DejaVu Sans;">一些信息：</span>
<ul>
	<li><tt>link_to</tt> builds a hyperlink to a particular destination link_to<span style="font-family: DejaVu Sans;">创建一个超链接到一个地方</span></li>
	<li><tt>edit_post_path</tt> and <tt>new_post_path</tt> are helpers that Rails provides as part of RESTful routing.<tt>edit_post_path</tt> and <tt>new_post_path</tt><span style="font-family: DejaVu Sans;"><tt>是</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>提供的</tt></span>RESTful<span style="font-family: DejaVu Sans;">路由向导。</span>You’ll see a variety of these helpers for the different actions that the controller includes. <span style="font-family: DejaVu Sans;">不同的具有</span>controller<span style="font-family: DejaVu Sans;">的</span>actions<span style="font-family: DejaVu Sans;">中你将会看到一系列的这样的向导。</span></li>
</ul>
In previous versions of Rails, you had to use <tt>&lt;%=h</tt><tt> </tt><tt>post.name</tt><tt> </tt><tt>%&gt;</tt> so that any HTML would be escaped before being inserted into the page.<span style="font-family: DejaVu Sans;">在以前的版本的</span>Rails<span style="font-family: DejaVu Sans;">中，你必须使用</span>&lt;%=h post.name %&gt; <span style="font-family: DejaVu Sans;">以避免一些</span>HTML<span style="font-family: DejaVu Sans;">可能会转义在插入到页面之前。</span>In Rails 3.0, this is now the default.<span style="font-family: DejaVu Sans;">在</span>Rails 3.0<span style="font-family: DejaVu Sans;">，作为默认。</span>To get unescaped HTML, you now use &lt;%= raw post.name %&gt;.<span style="font-family: DejaVu Sans;">得到一个非转义的</span>HTML<span style="font-family: DejaVu Sans;">，你现在使用</span>&lt;%=raw post.name%&gt;.

For more details on the rendering process, see <a href="http://guides.rubyonrails.org/layouts_and_rendering.html"><span style="color: #000080;"><span style="text-decoration: underline;">Layouts</span></span><span style="color: #000080;"><span style="text-decoration: underline;">and</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rendering</span></span><span style="color: #000080;"><span style="text-decoration: underline;">in</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span></a>.<span style="font-family: DejaVu Sans;">了解更过关于渲染处理流程，阅读</span><a href="http://guides.rubyonrails.org/layouts_and_rendering.html"><span style="color: #000080;"><span style="text-decoration: underline;">Layouts</span></span><span style="color: #000080;"><span style="text-decoration: underline;">and</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rendering</span></span><span style="color: #000080;"><span style="text-decoration: underline;">in</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span></a>.
<h4><a name="customizing-the-layout"></a>6.8 Customizing the Layout<span style="font-family: WenQuanYi Micro Hei;">定制布局</span></h4>
The view is only part of the story of how HTML is displayed in your web browser.view<span style="font-family: DejaVu Sans;">仅仅告诉</span>HTML<span style="font-family: DejaVu Sans;">要显示什么（内容）在你的</span>web<span style="font-family: DejaVu Sans;">浏览器里面。</span>Rails also has the concept of <tt>layouts</tt>, which are containers for views.Rails<span style="font-family: DejaVu Sans;">也有关于布局的概念（定义），那就是（布局）是对</span>viewi<span style="font-family: DejaVu Sans;">的包装。</span>When Rails renders a view to the browser, it does so by putting the view’s HTML into a layout’s HTML.<span style="font-family: DejaVu Sans;">当</span>Rails<span style="font-family: DejaVu Sans;">渲染一个</span>view<span style="font-family: DejaVu Sans;">到浏览器，它通常是（这样做）把</span>view<span style="font-family: DejaVu Sans;">的</span>HTML<span style="font-family: DejaVu Sans;">放进布局的</span>HTML<span style="font-family: DejaVu Sans;">中。</span>In previous versions of Rails, the <tt>rails</tt><tt> </tt><tt>generate</tt><tt> </tt><tt>scaffold</tt> command would automatically create a controller specific layout, like <tt>app/views/layouts/posts.html.erb</tt>, for the posts controller. <span style="font-family: DejaVu Sans;">在以前的版本中，</span><tt>rails</tt><tt> </tt><tt>generate</tt><tt> </tt><tt>scaffold</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>命令将会自动创建</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>对应指定的布局。</tt></span>However this has been changed in Rails 3.0. An application specific <tt>layout</tt> is used for all the controllers and can be found in <tt>app/views/layouts/application.html.erb</tt>. <span style="font-family: DejaVu Sans;">然而在</span>rails3.0<span style="font-family: DejaVu Sans;">中有所不同了。一个应用程序指定的布局适用于所有的</span>controllers<span style="font-family: DejaVu Sans;">，可以在</span><tt>app/views/layouts/application.html.erb</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>中找到</tt></span><tt>(</tt><span style="font-family: DejaVu Sans;"><tt>这就好像是</tt></span><tt>django</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>base.html)</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>Open this layout in your editor and modify the <tt>body</tt> tag:<span style="font-family: DejaVu Sans;">打开这个</span>layout<span style="font-family: DejaVu Sans;">在你的编辑器中并且修改</span>body<span style="font-family: DejaVu Sans;">标签：</span>

&lt;!DOCTYPE html&gt;

&lt;html&gt;

&lt;head&gt;

&lt;title&gt;Blog&lt;/title&gt;

&lt;%= stylesheet_link_tag "application" %&gt;

&lt;%= javascript_include_tag "application" %&gt;

&lt;%= csrf_meta_tags %&gt;

&lt;/head&gt;

&lt;body style="background: #EEEEEE;"&gt;

&nbsp;

&lt;%= yield %&gt;

&nbsp;

&lt;/body&gt;

&lt;/html&gt;

Now when you refresh the <tt>/posts</tt> page, you’ll see a gray background to the page. This same gray background will be used throughout all the views for posts.<span style="font-family: DejaVu Sans;">现在你刷新</span><tt>/posts</tt><span style="font-family: DejaVu Sans;"><tt>页面，你将会看到一个灰色的页面背景。并且相同的灰色背景将会使用在</tt></span><tt>posts</tt><span style="font-family: DejaVu Sans;"><tt>的所有视图中。</tt></span>
<h4><a name="creating-new-posts"></a><tt>6.9</tt><tt> </tt><tt>Creating</tt><tt> </tt><tt>New</tt><tt> </tt><tt>Posts</tt></h4>
Creating a new post involves two actions. The first is the <tt>new</tt> action, which instantiates an empty <tt>Post</tt> object:<span style="font-family: DejaVu Sans;">创建一个</span>new post <span style="font-family: DejaVu Sans;">包含两个</span>actions<span style="font-family: DejaVu Sans;">。首先是</span>new action<span style="font-family: DejaVu Sans;">，它会实例化一个空的</span>Post<span style="font-family: DejaVu Sans;">对象：</span>

<code>def</code> <code>new</code>

<code> </code><code>@post</code> <code>=</code><code> </code><code>Post.new</code>

&nbsp;

<code> </code><code>respond_to</code><code> </code><code>do</code> <code>|format|</code>

<code> </code><code>format.html</code><code> </code><code>#</code><code> </code><code>new.html.erb</code>

<code> </code><code>format.json</code><code> </code><code>{</code><code> </code><code>render</code><code> </code><code>:json</code> <code>=&gt;</code><code> </code><code>@post</code> <code>}</code>

<code> </code><code>end</code>

<code>end</code>

The <tt>new.html.erb</tt> view displays this empty Post to the user: <span style="font-family: DejaVu Sans;">这个</span>new.html.erb<span style="font-family: DejaVu Sans;">视图显示这个空的</span>post<span style="font-family: DejaVu Sans;">给用户：</span>

<code>&lt;h1&gt;New</code><code> </code><code>post&lt;/h1&gt;</code>

&nbsp;

<code>&lt;%=</code> <code>render</code><code> </code><code>'form'</code> <code>%&gt;</code>

&nbsp;

<code>&lt;%=</code> <code>link_to</code><code> </code><code>'Back',</code><code> </code><code>posts_path</code><code> </code><code>%&gt;</code>

The <tt>&lt;%=</tt><tt> </tt><tt>render</tt><tt> </tt><tt>'form'</tt><tt> </tt><tt>%&gt;</tt> line is our first introduction to <em>partials</em> in Rails.<tt>&lt;%=</tt><tt> </tt><tt>render</tt><tt> </tt><tt>'form'</tt><tt> </tt><tt>%&gt;</tt><span style="font-family: DejaVu Sans;"><tt>是我们第一个介绍的</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>partials</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>A partial is a snippet of HTML and Ruby code that can be reused in multiple locations.<span style="font-family: DejaVu Sans;">一个</span>partial<span style="font-family: DejaVu Sans;">是一个</span>HTML<span style="font-family: DejaVu Sans;">代码片段和</span>Ruby<span style="font-family: DejaVu Sans;">代码的组合可以在多目标对象中重用。（类似于</span>django<span style="font-family: DejaVu Sans;">的</span>include 'other.html'<span style="font-family: DejaVu Sans;">）</span>In this case, the form used to make a new post, is basically identical to a form used to edit a post, both have text fields for the name and title and a text area for the content with a button to make a new post or update the existing post.<span style="font-family: DejaVu Sans;">在本例中，</span>form<span style="font-family: DejaVu Sans;">用于创建</span>new post<span style="font-family: DejaVu Sans;">，它相当于一个用于编辑一个</span>post<span style="font-family: DejaVu Sans;">的表单，这个表单有一个</span>name text fields <span style="font-family: DejaVu Sans;">和</span>title text fields <span style="font-family: DejaVu Sans;">以及一个</span>content<span style="font-family: DejaVu Sans;">的</span>text area<span style="font-family: DejaVu Sans;">还有一个用于添加一个新的</span>post<span style="font-family: DejaVu Sans;">或者更新已经存在的</span>post<span style="font-family: DejaVu Sans;">的按钮。</span>

If you take a look at <tt>views/posts/_form.html.erb</tt> file, you will see the following:<span style="font-family: DejaVu Sans;">如果你看一下</span><tt>views/posts/_form.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>这个文件，你将会发现下面的内容：</tt></span>

&lt;%= form_for(@post) do |f| %&gt;

&lt;% if @post.errors.any? %&gt;

&lt;div id="error_explanation"&gt;

&lt;h2&gt;&lt;%= pluralize(@post.errors.count, "error") %&gt; prohibited this post from being saved:&lt;/h2&gt;

&lt;ul&gt;

&lt;% @post.errors.full_messages.each do |msg| %&gt;

&lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt;

&lt;% end %&gt;

&lt;/ul&gt;

&lt;/div&gt;

&lt;% end %&gt;

&lt;div&gt;

&lt;%= f.label :name %&gt;&lt;br /&gt;

&lt;%= f.text_field :name %&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;%= f.label :title %&gt;&lt;br /&gt;

&lt;%= f.text_field :title %&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;%= f.label :content %&gt;&lt;br /&gt;

&lt;%= f.text_area :content %&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;%= f.submit %&gt;

&lt;/div

&lt;% end %&gt;

<tt>This</tt><tt> </tt><tt>partial</tt><tt> </tt><tt>receives</tt><tt> </tt><tt>all</tt><tt> </tt><tt>the</tt><tt> </tt><tt>instance</tt><tt> </tt><tt>variables</tt><tt> </tt><tt>defined</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>calling</tt><tt> </tt><tt>view</tt><tt> </tt><tt>file,</tt><tt> </tt><tt>so</tt><tt> </tt><tt>in</tt><tt> </tt><tt>this</tt><tt> </tt><tt>case,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>controller</tt><tt> </tt><tt>assigned</tt><tt> </tt><tt>the</tt><tt> </tt><tt>new</tt><tt> </tt><tt>Post</tt><tt> </tt><tt>object</tt><tt> </tt><tt>to</tt><tt> </tt><tt>@post</tt><tt> </tt><tt>and</tt><tt> </tt><tt>so,</tt><tt> </tt><tt>this</tt><tt> </tt><tt>is</tt><tt> </tt><tt>available</tt><tt> </tt><tt>in</tt><tt> </tt><tt>both</tt><tt> </tt><tt>the</tt><tt> </tt><tt>view</tt><tt> </tt><tt>and</tt><tt> </tt><tt>partial</tt><tt> </tt><tt>as</tt><tt> </tt><tt>@post.</tt><span style="font-family: DejaVu Sans;"><tt>这个</tt></span><tt>partial</tt><span style="font-family: DejaVu Sans;"><tt>接收在</tt></span><tt>view</tt><span style="font-family: DejaVu Sans;"><tt>文件中定义的所有的实例变量，因此在本例中，</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>申请新的</tt></span><tt>Post</tt><span style="font-family: DejaVu Sans;"><tt>对象给</tt></span><tt>@post</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>@post</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>viewi</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>partial</tt><span style="font-family: DejaVu Sans;"><tt>都是可用的。</tt></span>

<tt>For</tt><tt> </tt><tt>more</tt><tt> </tt><tt>information</tt><tt> </tt><tt>on</tt><tt> </tt><tt>partials,</tt><tt> </tt><tt>refer</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><a href="http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials"><span style="color: #000080;"><span style="text-decoration: underline;">Layouts</span></span><span style="color: #000080;"><span style="text-decoration: underline;">and</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rendering</span></span><span style="color: #000080;"><span style="text-decoration: underline;">in</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span></a><tt> </tt><tt>guide.</tt><span style="font-family: DejaVu Sans;"><tt>有关</tt></span><tt>partials</tt><span style="font-family: DejaVu Sans;"><tt>的更多信息，参考</tt><tt></tt></span><a href="http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials"><span style="color: #000080;"><span style="text-decoration: underline;">Layouts</span></span><span style="color: #000080;"><span style="text-decoration: underline;">and</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rendering</span></span><span style="color: #000080;"><span style="text-decoration: underline;">in</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span></a><span style="font-family: DejaVu Sans;"><tt>指导。</tt></span>

<tt>The</tt><tt> </tt><tt>form_for</tt><tt> </tt><tt>block</tt><tt> </tt><tt>is</tt><tt> </tt><tt>used</tt><tt> </tt><tt>to</tt><tt> </tt><tt>create</tt><tt> </tt><tt>an</tt><tt> </tt><tt>HTML</tt><tt> </tt><tt>form.form_for</tt><span style="font-family: DejaVu Sans;"><tt>代码块用于创建一个</tt></span><tt>HTML</tt><span style="font-family: DejaVu Sans;"><tt>表单。</tt><tt></tt></span><tt>Within</tt><tt> </tt><tt>this</tt><tt> </tt><tt>block,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>have</tt><tt> </tt><tt>access</tt><tt> </tt><tt>to</tt><tt> </tt><tt>methods</tt><tt> </tt><tt>to</tt><tt> </tt><tt>build</tt><tt> </tt><tt>various</tt><tt> </tt><tt>controls</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form.</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>在这个代码块中你可以在访问方法的基础上在表单上创建各种控制。</tt></span><tt>For</tt><tt> </tt><tt>example,</tt><tt> </tt><tt>f.text_field</tt><tt> </tt><tt>:name</tt><tt> </tt><tt>tells</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>to</tt><tt> </tt><tt>create</tt><tt> </tt><tt>a</tt><tt> </tt><tt>text</tt><tt> </tt><tt>input</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form,</tt><tt> </tt><tt>and</tt><tt> </tt><tt>to</tt><tt> </tt><tt>hook</tt><tt> </tt><tt>it</tt><tt> </tt><tt>up</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>name</tt><tt> </tt><tt>attribute</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>instance</tt><tt> </tt><tt>being</tt><tt> </tt><tt>displayed.</tt><span style="font-family: DejaVu Sans;"><tt>比如，</tt></span><tt>f.test_field</tt><tt> </tt><tt>:name</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>告诉</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>在表单中创建一个</tt></span><tt>text</tt><tt> </tt><tt>input</tt><span style="font-family: DejaVu Sans;"><tt>。</tt><tt></tt></span><tt>You</tt><tt> </tt><tt>can</tt><tt> </tt><tt>only</tt><tt> </tt><tt>use</tt><tt> </tt><tt>these</tt><tt> </tt><tt>methods</tt><tt> </tt><tt>with</tt><tt> </tt><tt>attributes</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>model</tt><tt> </tt><tt>that</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>is</tt><tt> </tt><tt>based</tt><tt> </tt><tt>on</tt><tt> </tt><tt>(in</tt><tt> </tt><tt>this</tt><tt> </tt><tt>case</tt><tt> </tt><tt>name,</tt><tt> </tt><tt>title,</tt><tt> </tt><tt>and</tt><tt> </tt><tt>content).form</tt><span style="font-family: DejaVu Sans;"><tt>使用的方法基于</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>的相对应的字段属性（类型如</tt></span><tt>text_field</tt><tt> </tt><tt>or</tt><tt> </tt><tt>text_area</tt><span style="font-family: DejaVu Sans;"><tt>）（例如本例中的</tt></span><tt>name,title,content</tt><span style="font-family: DejaVu Sans;"><tt>）。</tt><tt></tt></span><tt>Rails</tt><tt> </tt><tt>uses</tt><tt> </tt><tt>form_for</tt><tt> </tt><tt>in</tt><tt> </tt><tt>preference</tt><span style="font-family: DejaVu Sans;"><tt>偏好优先</tt><tt></tt></span><tt>to</tt><tt> </tt><tt>having</tt><tt> </tt><tt>you</tt><tt> </tt><tt>write</tt><tt> </tt><tt>raw</tt><tt> </tt><tt>HTML</tt><tt> </tt><tt>because</tt><tt> </tt><tt>the</tt><tt> </tt><tt>code</tt><tt> </tt><tt>is</tt><tt> </tt><tt>more</tt><tt> </tt><tt>succinct#</tt><span style="font-family: DejaVu Sans;"><tt>简洁</tt></span><tt>,</tt><tt> </tt><tt>and</tt><tt> </tt><tt>because</tt><tt> </tt><tt>it</tt><tt> </tt><tt>explicitly</tt><span style="font-family: DejaVu Sans;"><tt>明确</tt><tt></tt></span><tt>ties</tt><span style="font-family: DejaVu Sans;"><tt>关系</tt><tt></tt></span><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>to</tt><tt> </tt><tt>a</tt><tt> </tt><tt>particular</tt><tt> </tt><tt>model</tt><tt> </tt><tt>instance.Rails</tt><span style="font-family: DejaVu Sans;"><tt>使用（偏向于使用）</tt></span><tt>form_for</tt><span style="font-family: DejaVu Sans;"><tt>列出你要输入的</tt></span><tt>HTML</tt><span style="font-family: DejaVu Sans;"><tt>行因为这样代码更加简洁，并却这样使得</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>particular</tt><tt> </tt><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>实例关系更加明显。</tt></span>

<tt>The</tt><tt> </tt><tt>form_for</tt><tt> </tt><tt>block</tt><tt> </tt><tt>is</tt><tt> </tt><tt>also</tt><tt> </tt><tt>smart</tt><tt> </tt><tt>enough</tt><tt> </tt><tt>to</tt><tt> </tt><tt>work</tt><tt> </tt><tt>out</tt><tt> </tt><tt>if</tt><tt> </tt><tt>you</tt><tt> </tt><tt>are</tt><tt> </tt><tt>doing</tt><tt> </tt><tt>a</tt><tt> </tt><em>New</em><em> </em><em>Post</em><tt> </tt><tt>or</tt><tt> </tt><tt>an</tt><tt> </tt><em>Edit</em><em> </em><em>Post</em><tt> </tt><tt>action,</tt><tt> </tt><tt>and</tt><tt> </tt><tt>will</tt><tt> </tt><tt>set</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>action</tt><tt> </tt><tt>tags</tt><tt> </tt><tt>and</tt><tt> </tt><tt>submit</tt><tt> </tt><tt>button</tt><tt> </tt><tt>names</tt><tt> </tt><tt>appropriately</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>HTML</tt><tt> </tt><tt>output.form_for</tt><span style="font-family: DejaVu Sans;"><tt>代码块同样也足够你定制你的</tt></span><tt>New</tt><tt> </tt><tt>Post</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>Edit</tt><tt> </tt><tt>Post</tt><tt> </tt><tt>action,</tt><span style="font-family: DejaVu Sans;"><tt>并且将会设置</tt></span><tt>form</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>标签和在</tt></span><tt>HTML</tt><span style="font-family: DejaVu Sans;"><tt>输出中显示的提交按钮名称。</tt></span>

<tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>need</tt><tt> </tt><tt>to</tt><tt> </tt><tt>create</tt><tt> </tt><tt>an</tt><tt> </tt><tt>HTML</tt><tt> </tt><tt>form</tt><tt> </tt><tt>that</tt><tt> </tt><tt>displays</tt><tt> </tt><tt>arbitrary#</tt><span style="font-family: DejaVu Sans;"><tt>任意</tt><tt></tt></span><tt>fields,</tt><tt> </tt><tt>not</tt><tt> </tt><tt>tied</tt><tt> </tt><tt>to</tt><tt> </tt><tt>a</tt><tt> </tt><tt>model,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>should</tt><tt> </tt><tt>use</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form_tag</tt><tt> </tt><tt>method,</tt><tt> </tt><tt>which</tt><tt> </tt><tt>provides</tt><tt> </tt><tt>shortcuts</tt><tt> </tt><tt>for</tt><tt> </tt><tt>building</tt><tt> </tt><tt>forms</tt><tt> </tt><tt>that</tt><tt> </tt><tt>are</tt><tt> </tt><tt>not</tt><tt> </tt><tt>necessarily</tt><tt> </tt><tt>tied</tt><tt> </tt><tt>to</tt><tt> </tt><tt>a</tt><tt> </tt><tt>model</tt><tt> </tt><tt>instance.</tt><span style="font-family: DejaVu Sans;"><tt>如果你需要创建一个</tt></span><tt>HTML</tt><span style="font-family: DejaVu Sans;"><tt>表单显示任意的域，而不绑定到</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>字段中，你应该使用</tt></span><tt>form_tag</tt><span style="font-family: DejaVu Sans;"><tt>方法，它快捷的保证了建立</tt></span><tt>forms</tt><span style="font-family: DejaVu Sans;"><tt>不必在绑定到一个</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>实例。</tt></span>

<tt>When</tt><tt> </tt><tt>the</tt><tt> </tt><tt>user</tt><tt> </tt><tt>clicks</tt><tt> </tt><tt>the</tt><tt> </tt><tt>Create</tt><tt> </tt><tt>Post</tt><tt> </tt><tt>button</tt><tt> </tt><tt>on</tt><tt> </tt><tt>this</tt><tt> </tt><tt>form,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>browser</tt><tt> </tt><tt>will</tt><tt> </tt><tt>send</tt><tt> </tt><tt>information</tt><tt> </tt><tt>back</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>create</tt><tt> </tt><tt>method</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>controller</tt><tt> </tt><tt>(Rails</tt><tt> </tt><tt>knows</tt><tt> </tt><tt>to</tt><tt> </tt><tt>call</tt><tt> </tt><tt>the</tt><tt> </tt><tt>create</tt><tt> </tt><tt>method</tt><tt> </tt><tt>because</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>is</tt><tt> </tt><tt>sent</tt><tt> </tt><tt>with</tt><tt> </tt><tt>an</tt><tt> </tt><tt>HTTP</tt><tt> </tt><tt>POST</tt><tt> </tt><tt>request;</tt><tt> </tt><tt>that</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>one</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>conventions</tt><tt> </tt><tt>that</tt><tt> </tt><tt>I</tt><tt> </tt><tt>mentioned</tt><tt> </tt><tt>earlier):</tt><span style="font-family: DejaVu Sans;"><tt>当用户点击这张表单上面的创建</tt></span><tt>Post</tt><span style="font-family: DejaVu Sans;"><tt>按钮，浏览器将会发送信息</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">——</span></tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>的方法回服务器（</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>知道调用</tt></span><tt>create</tt><span style="font-family: DejaVu Sans;"><tt>方法，因为</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>是以</tt></span><tt>HTTP</tt><tt> </tt><tt>POST</tt><span style="font-family: DejaVu Sans;"><tt>请求发送，这是我随后提到的一种协议之一）</tt></span>

<tt> </tt><tt>def</tt><tt> </tt><tt>create</tt>

<tt> </tt><tt>@post</tt><tt> </tt><tt>=</tt><tt> </tt><tt>Post.new(params[:post])</tt>

<tt> </tt><tt>respond_to</tt><tt> </tt><tt>do</tt><tt> </tt><tt>|format|</tt>

<tt> </tt><tt>if</tt><tt> </tt><tt>@post.save</tt>

<tt> </tt><tt>format.html</tt><tt> </tt><tt>{</tt><tt> </tt><tt>redirect_to</tt><tt> </tt><tt>@post,</tt><tt> </tt><tt>:notice</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>'Post</tt><tt> </tt><tt>was</tt><tt> </tt><tt>successfully</tt><tt> </tt><tt>created.'</tt><tt> </tt><tt>}</tt>

<tt> </tt><tt>format.json</tt><tt> </tt><tt>{</tt><tt> </tt><tt>render</tt><tt> </tt><tt>:json</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>@post,</tt><tt> </tt><tt>:status</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:created,</tt><tt> </tt><tt>:location</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>@post</tt><tt> </tt><tt>}</tt>

<tt> </tt><tt>else</tt>

<tt> </tt><tt>format.html</tt><tt> </tt><tt>{</tt><tt> </tt><tt>render</tt><tt> </tt><tt>:action</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>"new"</tt><tt> </tt><tt>}</tt>

<tt> </tt><tt>format.json</tt><tt> </tt><tt>{</tt><tt> </tt><tt>render</tt><tt> </tt><tt>:json</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>@post.errors,</tt><tt> </tt><tt>:status</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:unprocessable_entity</tt><tt> </tt><tt>}</tt>

<tt> </tt><tt>end</tt>

<tt> </tt><tt>end</tt>

<tt> </tt><tt>end</tt>

The <tt>create</tt> action instantiates a new Post object from the data supplied by the user on the form, which Rails makes available in the <tt>params</tt> hash.create action<span style="font-family: DejaVu Sans;">实例化一个新的</span>Post<span style="font-family: DejaVu Sans;">对象，这个对象给</span>form<span style="font-family: DejaVu Sans;">提供数据支持。</span>After successfully saving the new post, <tt>create</tt> returns the appropriate format that the user has requested (HTML in our case).<span style="font-family: DejaVu Sans;">当成功的保存了新</span>post<span style="font-family: DejaVu Sans;">，</span>create<span style="font-family: DejaVu Sans;">返回用户请求的适当的格式（在本例中是</span>HTML<span style="font-family: DejaVu Sans;">）。</span>It then redirects the user to the resulting post <tt>show</tt> action and sets a notice to the user that the Post was successfully created.<span style="font-family: DejaVu Sans;">然后重定向用户页面到结果显示的</span>post show action<span style="font-family: DejaVu Sans;">页面并且给出提示</span>Post<span style="font-family: DejaVu Sans;">成功的创建了。</span>

If the post was not successfully saved, due to a validation error, then the controller returns the user back to the <tt>new</tt> action with any error messages so that the user has the chance to fix the error and try again.<span style="font-family: DejaVu Sans;">如果</span>post<span style="font-family: DejaVu Sans;">没有保存成功，是因为（数据）验证错误，然后</span>controller<span style="font-family: DejaVu Sans;">控制用户页面回到</span>new action<span style="font-family: DejaVu Sans;">（包含验证错误新息）给用户。</span>

The “Post was successfully created.” message is stored inside of the Rails <tt>flash</tt> hash, (usually just called <em>the</em><em> </em><em>flash</em>) so that messages can be carried#<span style="font-family: DejaVu Sans;">载</span>over to another action, providing the user with useful information on the status of their request. “Post was successfully created.” <span style="font-family: DejaVu Sans;">这条消息被存储在</span>Rails<span style="font-family: DejaVu Sans;">的</span>flash<span style="font-family: DejaVu Sans;">的</span>hash<span style="font-family: DejaVu Sans;">表中，（通常之叫它</span>flash<span style="font-family: DejaVu Sans;">）因此消息可以转载到另一个</span>action<span style="font-family: DejaVu Sans;">，在请求状态中提供有用的信息给用户。</span>In the case of <tt>create</tt>, the user never actually sees any page rendered during the Post creation process, because it immediately redirects to the new Post as soon Rails saves the record.<span style="font-family: DejaVu Sans;">在这个新建例子（数据验证失败）中，用户实际上从来不看任何在页面创建进程中的渲染页面，因为它立刻重定向页面到</span>new Post<span style="font-family: DejaVu Sans;">当</span>Rails<span style="font-family: DejaVu Sans;">保存了这个记录。</span>The Flash carries over a message to the next action, so that when the user is redirected back to the <tt>show</tt> action, they are presented with a message saying “Post was successfully created.”Flash<span style="font-family: DejaVu Sans;">装载消息到接下来的</span>action<span style="font-family: DejaVu Sans;">，因此当用户被重定向到了</span>show action<span style="font-family: DejaVu Sans;">，他们立刻收到了一条消息<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>Post was successfully created.”<span style="font-family: DejaVu Sans;">。</span>
<h4><a name="showing-an-individual-post"></a>6.10 Showing an Individual Post<span style="font-family: WenQuanYi Micro Hei;">显示一条单个的</span>Post</h4>
When you click the <tt>show</tt> link for a post on the index page, it will bring you to a URL like <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/posts/1">http://localhost:3000/posts/1</a></span></span>. <span style="font-family: DejaVu Sans;">当你在</span>posts <span style="font-family: DejaVu Sans;">的主页面点击一个</span>post<span style="font-family: DejaVu Sans;">的</span>show<span style="font-family: DejaVu Sans;">这个超链接，他将会产生一个</span>url <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/posts/1">http://localhost:3000/posts/1</a></span></span><span style="font-family: DejaVu Sans;"><tt>。</tt></span>Rails interprets<span style="font-family: DejaVu Sans;">解释</span>this as a call to the <tt>show</tt> action for the resource, and passes in <tt>1</tt> as the <tt>:id</tt> parameter.Rails<span style="font-family: DejaVu Sans;">解释这是一个到</span>show action<span style="font-family: DejaVu Sans;">的</span>resource <span style="font-family: DejaVu Sans;">调用。</span>Here’s the <tt>show</tt> action:<span style="font-family: DejaVu Sans;">这里是</span>show action<span style="font-family: DejaVu Sans;">：</span>

def show

@post = Post.find(params[:id])

respond_to do |format|

format.html # show.html.erb

format.json { render :json =&gt; @post }

end

end

The <tt>show</tt> action uses <tt>Post.find</tt> to search for a single record in the database by its id value.<span style="font-family: DejaVu Sans;">这里的</span>show action<span style="font-family: DejaVu Sans;">使用</span>Post.find<span style="font-family: DejaVu Sans;">通过对应记录的</span>id<span style="font-family: DejaVu Sans;">来查找单个记录。</span>After finding the record, Rails displays it by using <tt>show.html.erb</tt>:<span style="font-family: DejaVu Sans;">当找到记录，</span>Rails<span style="font-family: DejaVu Sans;">使用</span>show.html.erb<span style="font-family: DejaVu Sans;">来显示它：</span>

&lt;p id="notice"&gt;&lt;%= notice %&gt;&lt;/p&gt;

&lt;p&gt;

&lt;b&gt;Name:&lt;/b&gt;

&lt;%= @post.name %&gt;

&lt;/p&gt;

&lt;p&gt;

&lt;b&gt;Title:&lt;/b&gt;

&lt;%= @post.title %&gt;

&lt;/p&gt;

&lt;p&gt;

&lt;b&gt;Content:&lt;/b&gt;

&lt;%= @post.content %&gt;

&lt;/p&gt;

&lt;%= link_to 'Edit', edit_post_path(@post) %&gt; |

&lt;%= link_to 'Back', posts_path %&gt;
<h4><a name="editing-posts"></a>6.11 Editing Posts<span style="font-family: WenQuanYi Micro Hei;">编辑</span>Posts</h4>
Like creating a new post, editing a post is a two-part process.<span style="font-family: DejaVu Sans;">类似创建一个新的</span>post<span style="font-family: DejaVu Sans;">，编辑一个</span>post<span style="font-family: DejaVu Sans;">也（分为）两部分。</span>The first step is a request to <tt>edit_post_path(@post)</tt> with a particular post. This calls the <tt>edit</tt> action in the controller:<span style="font-family: DejaVu Sans;">首先是到</span><tt>edit_post_path(@post)</tt><span style="font-family: DejaVu Sans;"><tt>请求一个特定的</tt></span><tt>post</tt><span style="font-family: DejaVu Sans;"><tt>。这里是调用的在</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>中的</tt></span><tt>edit</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

<code>def</code><tt> </tt><code>edit</code>

<code> </code><code>@post</code> <code>=</code><code> </code><code>Post.find(params[:id])</code>

<code>end</code>

After finding the requested post, Rails uses the <tt>edit.html.erb</tt> view to display it:<span style="font-family: DejaVu Sans;">在找到了请求的</span>post<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">使用</span><tt>edit.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>试图来显示它：</tt></span>

<code>&lt;h1&gt;Editing</code><code> </code><code>post&lt;/h1&gt;</code>

&nbsp;

<code>&lt;%=</code> <code>render</code><code> </code><code>'form'</code> <code>%&gt;</code>

&nbsp;

<code>&lt;%=</code> <code>link_to</code><code> </code><code>'Show',</code><code> </code><code>@post</code> <code>%&gt;</code> <code>|</code>

<code>&lt;%=</code> <code>link_to</code><code> </code><code>'Back',</code><code> </code><code>posts_path</code><code> </code><code>%&gt;</code>

<tt>Again,</tt><tt> </tt><tt>as</tt><tt> </tt><tt>with</tt><tt> </tt><tt>the</tt><tt> </tt><tt>new</tt><tt> </tt><tt>action,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>edit</tt><tt> </tt><tt>action</tt><tt> </tt><tt>is</tt><tt> </tt><tt>using</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>partial,</tt><tt> </tt><tt>this</tt><tt> </tt><tt>time</tt><tt> </tt><tt>however,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>will</tt><tt> </tt><tt>do</tt><tt> </tt><tt>a</tt><tt> </tt><tt>PUT</tt><tt> </tt><tt>action</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>PostsController</tt><tt> </tt><tt>and</tt><tt> </tt><tt>the</tt><tt> </tt><tt>submit</tt><tt> </tt><tt>button</tt><tt> </tt><tt>will</tt><tt> </tt><tt>display</tt><tt> “</tt><tt>Update</tt><tt> </tt><tt>Post</tt><tt>”</tt><span style="font-family: DejaVu Sans;"><tt>再一次的，就像</tt></span><tt>new</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>edit</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>也使用</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>部分，这次有所不同，</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>将会提交一个</tt></span><tt>PUT</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>PostsController</tt><span style="font-family: DejaVu Sans;"><tt>并且提交按钮将会显示</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></tt></span><tt>Update</tt><tt> </tt><tt>Post</tt><tt>”</tt>

<tt>Submitting</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>created</tt><tt> </tt><tt>by</tt><tt> </tt><tt>this</tt><tt> </tt><tt>view</tt><tt> </tt><tt>will</tt><tt> </tt><tt>invoke</tt><span style="font-family: DejaVu Sans;"><tt>调用</tt><tt></tt></span><tt>the</tt><tt> </tt><tt>update</tt><tt> </tt><tt>action</tt><tt> </tt><tt>within</tt><tt> </tt><tt>the</tt><tt> </tt><tt>controller:</tt><span style="font-family: DejaVu Sans;"><tt>提交的</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>由上面这个视图创建的并且还会调用</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>中的</tt></span><tt>update</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

<tt> </tt><tt>def</tt><tt> </tt><tt>update</tt>

<tt> </tt><tt>@post</tt><tt> </tt><tt>=</tt><tt> </tt><tt>Post.find(params[:id])</tt>

<tt> </tt><tt>respond_to</tt><tt> </tt><tt>do</tt><tt> </tt><tt>|format|</tt>

<tt> </tt><tt>if</tt><tt> </tt><tt>@post.update_attributes(params[:post])</tt>

<tt> </tt><tt>format.html</tt><tt> </tt><tt>{</tt><tt> </tt><tt>redirect_to</tt><tt> </tt><tt>@post,</tt><tt> </tt><tt>:notice</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>'Post</tt><tt> </tt><tt>was</tt><tt> </tt><tt>successfully</tt><tt> </tt><tt>updated.'</tt><tt> </tt><tt>}</tt>

<tt> </tt><tt>format.json</tt><tt> </tt><tt>{</tt><tt> </tt><tt>head</tt><tt> </tt><tt>:ok</tt><tt> </tt><tt>}</tt>

<tt> </tt><tt>else</tt>

<tt> </tt><tt>format.html</tt><tt> </tt><tt>{</tt><tt> </tt><tt>render</tt><tt> </tt><tt>:action</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>"edit"</tt><tt> </tt><tt>}</tt>

<tt> </tt><tt>format.json</tt><tt> </tt><tt>{</tt><tt> </tt><tt>render</tt><tt> </tt><tt>:json</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>@post.errors,</tt><tt> </tt><tt>:status</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:unprocessable_entity</tt><tt> </tt><tt>}</tt>

<tt> </tt><tt>end</tt>

<tt> </tt><tt>end</tt>

<tt> </tt><tt>end</tt>

<tt>In</tt><tt> </tt><tt>the</tt><tt> </tt><tt>update</tt><tt> </tt><tt>action,</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>first</tt><tt> </tt><tt>uses</tt><tt> </tt><tt>the</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>parameter</tt><tt> </tt><tt>passed</tt><tt> </tt><tt>back</tt><tt> </tt><tt>from</tt><tt> </tt><tt>the</tt><tt> </tt><tt>edit</tt><tt> </tt><tt>view</tt><tt> </tt><tt>to</tt><tt> </tt><tt>locate</tt><tt> </tt><tt>the</tt><tt> </tt><tt>database</tt><tt> </tt><tt>record</tt><tt> </tt><tt>that</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>being</tt><tt> </tt><tt>edited.</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>update</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>中，</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>首先使用</tt></span><tt>:id</tt><span style="font-family: DejaVu Sans;"><tt>参数从</tt></span><tt>edit</tt><tt> </tt><tt>view</tt><span style="font-family: DejaVu Sans;"><tt>（传值到）数据库记录下刚才编辑的内容。</tt><tt></tt></span><tt>The</tt><tt> </tt><tt>update_attributes#</tt><span style="font-family: DejaVu Sans;"><tt>更新</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>的属性</tt><tt></tt></span><tt>call</tt><tt> </tt><tt>then</tt><tt> </tt><tt>takes</tt><tt> </tt><tt>the</tt><tt> </tt><tt>rest</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>parameters</tt><tt> </tt><tt>from</tt><tt> </tt><tt>the</tt><tt> </tt><tt>request</tt><tt> </tt><tt>and</tt><tt> </tt><tt>applies</tt><tt> </tt><tt>them</tt><tt> </tt><tt>to</tt><tt> </tt><tt>this</tt><tt> </tt><tt>record.</tt><tt> </tt><tt>update_attributes</tt><span style="font-family: DejaVu Sans;"><tt>在应用一些（更多）参数的来自</tt></span><tt>request</tt><span style="font-family: DejaVu Sans;"><tt>的数据到</tt></span><tt>recode</tt><span style="font-family: DejaVu Sans;"><tt>时被调用。</tt><tt></tt></span><tt>If</tt><tt> </tt><tt>all</tt><tt> </tt><tt>goes</tt><tt> </tt><tt>well,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>user</tt><tt> </tt><tt>is</tt><tt> </tt><tt>redirected</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>post</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>show</tt><tt> </tt><tt>view.</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>如果一切成功，用户会被重定向到</tt></span><tt>post</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><span style="font-family: DejaVu Sans;"><tt>视图。</tt></span><tt>If</tt><tt> </tt><tt>there</tt><tt> </tt><tt>are</tt><tt> </tt><tt>any</tt><tt> </tt><tt>problems,</tt><tt> </tt><tt>it</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>back</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>edit</tt><tt> </tt><tt>view</tt><tt> </tt><tt>to</tt><tt> </tt><tt>correct</tt><tt> </tt><tt>them.</tt><span style="font-family: DejaVu Sans;"><tt>如果期间发生了任何错误，它将回到</tt></span><tt>edit</tt><span style="font-family: DejaVu Sans;"><tt>视图并（要求）改正他们。</tt></span>
<h4><a name="destroying-a-post1"></a><tt>6.12</tt><tt> </tt><tt>Destroying</tt><tt> </tt><tt>a</tt><tt> </tt><tt>Post</tt><tt> </tt><span style="font-family: WenQuanYi Micro Hei;"><tt>摧毁一个</tt></span><tt>post</tt></h4>
Finally, clicking one of the <tt>destroy</tt> links sends the associated id to the <tt>destroy</tt> action:<span style="font-family: DejaVu Sans;">最后，点击一个</span>destroy<span style="font-family: DejaVu Sans;">链接发送相关的</span>id<span style="font-family: DejaVu Sans;">到</span>destroy<span style="font-family: DejaVu Sans;">动作：</span>

<code>def</code> <code>destroy</code>

<code> </code><code>@post</code> <code>=</code><code> </code><code>Post.find(params[:id])</code>

<code> </code><code>@post.destroy</code>

&nbsp;

<code> </code><code>respond_to</code><code> </code><code>do</code> <code>|format|</code>

<code> </code><code>format.html</code><code> </code><code>{</code><code> </code><code>redirect_to</code><code> </code><code>posts_url</code><code> </code><code>}</code>

<code> </code><code>format.json</code><code> </code><code>{</code><code> </code><code>head</code><code> </code><code>:ok</code> <code>}</code>

<code> </code><code>end</code>

<code>end</code>

The <tt>destroy</tt> method of an Active Record model instance removes the corresponding record from the database.<span style="font-family: DejaVu Sans;">这个</span>destroy<span style="font-family: DejaVu Sans;">是</span>Active Recordmodel<span style="font-family: DejaVu Sans;">的实例（功能是）从数据库中移除相应的记录。</span>After that’s done, there isn’t any record to display, so Rails redirects the user’s browser to the index view for the model.<span style="font-family: DejaVu Sans;">当这个（操作）完成，这里没有任何记录显示，因此</span>Rails<span style="font-family: DejaVu Sans;">重定向用户的浏览器到</span>model<span style="font-family: DejaVu Sans;">的主页视图。</span>
<h3><a name="adding-a-second-model"></a>7 Adding a Second Model<span style="font-family: WenQuanYi Micro Hei;">添加第二个</span>Model<span style="font-family: WenQuanYi Micro Hei;">（</span>comment<span style="font-family: WenQuanYi Micro Hei;">）</span></h3>
Now that you’ve seen how a model built with scaffolding looks like, it’s time to add a second model to the application.<span style="font-family: DejaVu Sans;">你已经知道了通过</span>scaffolding<span style="font-family: DejaVu Sans;">生成的</span>model<span style="font-family: DejaVu Sans;">看起来是怎样的。</span>The second model will handle comments on blog posts.<span style="font-family: DejaVu Sans;">第二个</span>model<span style="font-family: DejaVu Sans;">用来处理</span>blog post<span style="font-family: DejaVu Sans;">的评论。</span>
<h4><a name="generating-a-model"></a>7.1 Generating a Model<span style="font-family: WenQuanYi Micro Hei;">构造一个</span>model</h4>
Models in Rails use a singular name, and their corresponding database tables use a plural name. Rails <span style="font-family: DejaVu Sans;">中的</span>Models<span style="font-family: DejaVu Sans;">使用一个单数名称，同时它们相关的数据库表使用一个复数名称。</span>For the model to hold comments, the convention is to use the name Comment.<span style="font-family: DejaVu Sans;">对于评论在</span>models<span style="font-family: DejaVu Sans;">中的代名词，习惯上使用的的是</span>Comment<span style="font-family: DejaVu Sans;">。</span>Even if you don’t want to use the entire apparatus set up by scaffolding, most Rails developers still use generators to make things like models and controllers.<span style="font-family: DejaVu Sans;">即使你不想完完全全的使用</span>scaffolding<span style="font-family: DejaVu Sans;">，大多数的</span>Rails<span style="font-family: DejaVu Sans;">仍然使用生成器来做这些事情比如</span>models<span style="font-family: DejaVu Sans;">和</span>controllers<span style="font-family: DejaVu Sans;">。</span>To create the new model, run this command in your terminal:<span style="font-family: DejaVu Sans;">要创建一个新的</span>model<span style="font-family: DejaVu Sans;">，在终端中运行下面这条命令：</span>

<code>rails</code><code> </code><code>generate</code><code> </code><code>model</code><code> </code><code>Comment</code><code> </code><code>commenter:string</code><code> </code><code>body:text</code><code> </code><code>post:references</code><code> </code><code>#references</code><span style="font-family: DejaVu Sans;"><code>引用</code></span>

This command will generate four files:<span style="font-family: DejaVu Sans;">这条命令将会生成四个文件：</span>
<ul>
	<li><tt>app/models/comment.rb</tt> – The model <span style="font-family: DejaVu Sans;">模型</span></li>
	<li><tt>db/migrate/20111108080402_create_comments.rb</tt> – The migration <span style="font-family: DejaVu Sans;">数据迁移</span></li>
	<li><tt>test/unit/comment_test.rb</tt> <span style="color: #800000;">and</span><tt>test/fixtures/comments.yml</tt> – The test harness. <span style="font-family: DejaVu Sans;">测试工具</span></li>
</ul>
First, take a look at <tt>comment.rb</tt>:<span style="font-family: DejaVu Sans;">首先，看一看</span>comment.rb:

<code>class</code> <code>Comment</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>belongs_to</code><code> </code><code>:post</code>

<code>end</code>

This is very similar to the <tt>post.rb</tt> model that you saw earlier.<span style="font-family: DejaVu Sans;">这和你刚刚看到</span>post.rb<span style="font-family: DejaVu Sans;">很近似。</span>The difference is the line <tt>belongs_to</tt><tt> </tt><tt>:post</tt>, which sets up an Active Record <em>association</em>. <span style="font-family: DejaVu Sans;">不同的是这行</span><tt>belongs_to</tt><tt> </tt><tt>:post</tt><span style="font-family: DejaVu Sans;"><tt>，他会安装一个</tt><tt></tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><tt> </tt><em>association<span style="font-family: DejaVu Sans;">。</span></em>You’ll learn a little about associations in the next section of this guide.<span style="font-family: DejaVu Sans;">你将会在接下来的</span>guide<span style="font-family: DejaVu Sans;">学习一点有关</span>associations<span style="font-family: DejaVu Sans;">的内容。</span>

In addition to the model, Rails has also made a migration to create the corresponding database table:<span style="font-family: DejaVu Sans;">除了模型，</span>Rails<span style="font-family: DejaVu Sans;">同样也产生了一个</span>migration<span style="font-family: DejaVu Sans;">来创建相应的数据库表单：</span>

class CreateComments &lt; ActiveRecord::Migration

def change

create_table :comments do |t|

t.string :commenter

t.text :body

t.references :post

t.timestamps

end

add_index :comments, :post_id

end

end

The <tt>t.references</tt> line sets up a foreign key column for the association between the two models.<span style="font-family: DejaVu Sans;">对于</span><tt>t.references</tt><span style="font-family: DejaVu Sans;"><tt>这行，会在两个</tt></span><tt>models</tt><span style="font-family: DejaVu Sans;"><tt>之间生成一个外键列从而形成一个关系（组合）。</tt></span>And the <tt>add_index</tt> line sets up an index for this association column. Go ahead and run the migration:<span style="font-family: DejaVu Sans;">而且<tt></tt></span><tt>add_index</tt> line<span style="font-family: DejaVu Sans;">生成一个首页关联到这个关系行：</span>

<code>$</code><code> </code><code>rake</code><code> </code><code>db:migrate</code>

Rails is smart enough to only execute the migrations that have not already been run against the current database, so in this case you will just see:Rails<span style="font-family: DejaVu Sans;">能够智能的只针对对没有被运行过的表单，执行</span>migrations<span style="font-family: DejaVu Sans;">生成当前的数据库，因此这里你只会看到：</span>
<h4><a name="associating-models"></a>7.2 Associating Models<span style="font-family: WenQuanYi Micro Hei;">关联</span>models</h4>
Active Record associations let you easily declare the relationship between two models. In the case of comments and posts, you could write out the relationships this way:Active Record associations<span style="font-family: DejaVu Sans;">让你很容易的申明两个</span>models<span style="font-family: DejaVu Sans;">之间的关系。在本例中的</span>comments<span style="font-family: DejaVu Sans;">和</span>posts<span style="font-family: DejaVu Sans;">，你可以写出这样描述关系：</span>
<ul>
	<li>Each comment belongs to one post <span style="font-family: DejaVu Sans;">一条</span>comment<span style="font-family: DejaVu Sans;">对应于一个</span>post</li>
	<li>One post can have many comments <span style="font-family: DejaVu Sans;">一个</span>post<span style="font-family: DejaVu Sans;">可以对应于多个</span>comments</li>
</ul>
In fact, this is very close to the syntax that Rails uses to declare this association.<span style="font-family: DejaVu Sans;">实际上，这也很接近</span>Rails<span style="font-family: DejaVu Sans;">申明的</span>association <span style="font-family: DejaVu Sans;">的语法。</span>You’ve already seen the line of code inside the Comment model that makes each comment belong to a Post:<span style="font-family: DejaVu Sans;">你已经看到了在</span>Comment model<span style="font-family: DejaVu Sans;">中的使每个</span>comment<span style="font-family: DejaVu Sans;">对应于一个</span>post<span style="font-family: DejaVu Sans;">的代码。</span>

You’ll need to edit the <tt>post.rb</tt> file to add the other side of the association:<span style="font-family: DejaVu Sans;">你将会需要编辑</span>post.rb<span style="font-family: DejaVu Sans;">文件来添加其他</span>association <span style="font-family: DejaVu Sans;">盟友。</span>

<code>class</code> <code>Post</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:name,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true</code>

<code> </code><code>validates</code><code> </code><code>:title,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true,</code>

<code> </code><code>:length</code> <code>=&gt;</code><code> </code><code>{</code><code> </code><code>:minimum</code> <code>=&gt;</code><code> </code><code>5</code> <code>}</code>

&nbsp;

<code> </code><code>has_many</code><code> </code><code>:comments</code>

<code>end</code>

These two declarations enable a good bit of automatic behavior. For example, if you have an instance variable <tt>@post</tt> containing a post, you can retrieve all the comments belonging to that post <strong>as</strong><strong> </strong><strong>the</strong><strong> </strong><strong>array</strong> <tt>@post.comments</tt>.

For more information on Active Record associations, see the <a href="http://guides.rubyonrails.org/association_basics.html"><span style="color: #000080;"><span style="text-decoration: underline;">Active</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Record</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Associations</span></span></a> guide.
<h4><a name="adding-a-route-for-comments"></a>7.3 Adding a Route for Comments<span style="font-family: WenQuanYi Micro Hei;">给</span>Comments<span style="font-family: WenQuanYi Micro Hei;">添加路由</span></h4>
As with the <tt>home</tt> controller, we will need to add a route so that Rails knows where we would like to navigate to see <tt>comments</tt>.<span style="font-family: DejaVu Sans;">作为</span>home controller<span style="font-family: DejaVu Sans;">，我们将还需要添加一个路由让</span>Rails<span style="font-family: DejaVu Sans;">知道我们导航到哪里可以看到评论。</span>Open up the <tt>config/routes.rb</tt> file again, you will see an entry that was added automatically for <tt>posts</tt> near the top by the scaffold generator, resources :posts, edit it as follows:<span style="font-family: DejaVu Sans;">再次打开</span><tt>config/routes.rb</tt><span style="font-family: DejaVu Sans;"><tt>文件，你将会看到</tt></span><tt>scaffold</tt><span style="font-family: DejaVu Sans;"><tt>创建器在顶部为</tt></span><tt>posts</tt><span style="font-family: DejaVu Sans;"><tt>自动添加的入口，</tt><tt></tt></span>resources :posts<span style="font-family: DejaVu Sans;">，把它改成如下：</span>

resources :posts do

resources :comments

end

This creates <tt>comments</tt> as a <em>nested</em><em> </em><em>resource</em> within <tt>posts</tt>.<span style="font-family: DejaVu Sans;">这里把</span>comments<span style="font-family: DejaVu Sans;">作为一个嵌套资源放在</span>posts<span style="font-family: DejaVu Sans;">中。</span>This is another part of capturing the hierarchical relationship that exists between posts and comments.<span style="font-family: DejaVu Sans;">这是在存在的</span>posts<span style="font-family: DejaVu Sans;">和</span>comments<span style="font-family: DejaVu Sans;">的分层关系的表现。</span>

For more information on routing, see the <a href="http://guides.rubyonrails.org/routing.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Routing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">from</span></span><span style="color: #000080;"><span style="text-decoration: underline;">the</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Outside</span></span><span style="color: #000080;"><span style="text-decoration: underline;">In</span></span></a> guide.<span style="font-family: DejaVu Sans;">关于</span>routing<span style="font-family: DejaVu Sans;">的更多的信息，查看</span><a href="http://guides.rubyonrails.org/routing.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Routing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">from</span></span><span style="color: #000080;"><span style="text-decoration: underline;">the</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Outside</span></span><span style="color: #000080;"><span style="text-decoration: underline;">In</span></span></a> guide<span style="font-family: DejaVu Sans;">。</span>
<h4><a name="generating-a-controller"></a>7.4 Generating a Controller<span style="font-family: WenQuanYi Micro Hei;">构造一个</span>Controller</h4>
With the model in hand, you can turn your attention to creating a matching controller.model<span style="font-family: DejaVu Sans;">已经到手了，你可以把你的注意力放到创建一个匹配的</span>controller<span style="font-family: DejaVu Sans;">上了。</span>Again, there’s a generator for this:<span style="font-family: DejaVu Sans;">类似的，像这样构造：</span>

<code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>controller</code><code> </code><code>Comments</code>

This creates six files and one empty directory:<span style="font-family: DejaVu Sans;">这里新建了</span>6<span style="font-family: DejaVu Sans;">个文件和一个空目录。</span>
<ul>
	<li><tt>app/controllers/comments_controller.rb</tt> – The controller</li>
	<li><tt>app/helpers/comments_helper.rb</tt> – A view helper file</li>
	<li><tt>test/functional/comments_controller_test.rb</tt> – The functional tests for the controller</li>
	<li><tt>test/unit/helpers/comments_helper_test.rb</tt> – The unit tests for the helper</li>
	<li><tt>app/views/comments/</tt> – Views of the controller are stored here</li>
	<li><tt>app/assets/stylesheets/comment.css.scss</tt> – Cascading style sheet for the controller</li>
	<li><tt>app/assets/javascripts/comment.js.coffee</tt> – CoffeeScript for the controller</li>
</ul>
Like with any blog, our readers will create their comments directly after reading the post, and once they have added their comment, will be sent back to the post show page to see their comment now listed.<span style="font-family: DejaVu Sans;">就像大多数</span>blog<span style="font-family: DejaVu Sans;">，我们的读者将会直接发表他们的评论在他们阅读</span>post<span style="font-family: DejaVu Sans;">的时候，并且一旦他们添加评论成功，将会回到</span>postshow<span style="font-family: DejaVu Sans;">页面去查看他们刚刚列出的评论。</span>Due to this, our <tt>CommentsController</tt> is there to provide a method to create comments and delete SPAM comments when they arrive.<span style="font-family: DejaVu Sans;">正因为这样</span>(<span style="font-family: DejaVu Sans;">的考虑</span>)<span style="font-family: DejaVu Sans;">，我们的</span><tt>CommentsController</tt><span style="font-family: DejaVu Sans;"><tt>如下，它提供一个方法来创建</tt></span><tt>comments</tt><span style="font-family: DejaVu Sans;"><tt>和删除垃圾评论。</tt></span>

&lt;p&gt;&lt;%= notice %&gt;&lt;/p&gt;

&nbsp;

&lt;p&gt;

&lt;b&gt;Name:&lt;/b&gt;

&lt;%= @post.name %&gt;

&lt;/p&gt;

&nbsp;

&lt;p&gt;

&lt;b&gt;Title:&lt;/b&gt;

&lt;%= @post.title %&gt;

&lt;/p&gt;

&nbsp;

&lt;p&gt;

&lt;b&gt;Content:&lt;/b&gt;

&lt;%= @post.content %&gt;

&lt;/p&gt;

&nbsp;

&lt;h2&gt;Add a comment:&lt;/h2&gt;

&lt;%= form_for([@post, @post.comments.build]) do |f| %&gt;

&lt;div&gt;

&lt;%= f.label :commenter %&gt;&lt;br /&gt;

&lt;%= f.text_field :commenter %&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;%= f.label :body %&gt;&lt;br /&gt;

&lt;%= f.text_area :body %&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;%= f.submit %&gt;

&lt;/div&gt;

&lt;% end %&gt;

&nbsp;

&lt;%= link_to 'Edit Post', edit_post_path(@post) %&gt; |

&lt;%= link_to 'Back to Posts', posts_path %&gt; |

This adds a form on the Post show page that creates a new comment, which will call the <tt>CommentsController</tt> <tt>create</tt> action, so let’s wire that up:<span style="font-family: DejaVu Sans;">这里添加一个</span>forms<span style="font-family: DejaVu Sans;">在</span>Post show<span style="font-family: DejaVu Sans;">页面用来创建一个新的评论，它将会调用</span><tt>CommentsController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>creat</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>，因此让我们补充上下面的内容：</tt></span>

<code>class</code><tt> </tt><code>CommentsController</code><code> </code><code>&lt;</code><code> </code><code>ApplicationController</code>

<code> </code><code>def</code> <code>create</code>

<code> </code><code>@post</code> <code>=</code><code> </code><code>Post.find(params[:post_id])</code>

<code> </code><code>@comment</code> <code>=</code><code> </code><code>@post.comments.create(params[:comment])</code>

<code> </code><code>redirect_to</code><code> </code><code>post_path(@post)</code>

<code> </code><code>end</code>

<code>end</code>

You’ll see a bit more complexity here than you did in the controller for posts.<span style="font-family: DejaVu Sans;">这里你看到的会比你在</span>controller<span style="font-family: DejaVu Sans;">中为</span>posts<span style="font-family: DejaVu Sans;">做的要复杂点。</span>That’s a side-effect of the nesting that you’ve set up; each request for a comment has to keep track#<span style="font-family: DejaVu Sans;">踪迹</span>of the post to which the comment is attached, thus the initial find action to the Post model to get the post in question.<span style="font-family: DejaVu Sans;">那就是你刚刚你刚补充的副作用的根源；每个面向</span>comment<span style="font-family: DejaVu Sans;">的请求都保持了它所依附的</span>post<span style="font-family: DejaVu Sans;">的踪迹，因此这样初始化</span>find action<span style="font-family: DejaVu Sans;">的时候匹配相应的</span>post model<span style="font-family: DejaVu Sans;">（时）得到了答案。</span>

In addition, the code takes advantage of some of the methods available for an association.<span style="font-family: DejaVu Sans;">此外，上面的代码带来的好处就是使得一些对于</span>association<span style="font-family: DejaVu Sans;">的方法可用。</span>We use the <tt>create</tt> method on <tt>@post.comments</tt> to create and save the comment.<span style="font-family: DejaVu Sans;">我们使用</span><tt>@post.comments</tt><span style="font-family: DejaVu Sans;"><tt>中的</tt></span>create<span style="font-family: DejaVu Sans;">方法来新建和保存</span>comment<span style="font-family: DejaVu Sans;">。</span>This will automatically link the comment so that it belongs to that particular post.<span style="font-family: DejaVu Sans;">这里将会自动连接到</span>link<span style="font-family: DejaVu Sans;">使得</span>comment<span style="font-family: DejaVu Sans;">依附于指定的</span>post<span style="font-family: DejaVu Sans;">。</span>

Once we have made the new comment, we send the user back to the original post using the <tt>post_path(@post)</tt> helper.<span style="font-family: DejaVu Sans;">一旦我们评论过后，我们使用</span>post_path(@post)<span style="font-family: DejaVu Sans;">助手导引用户到先前的</span>post<span style="font-family: DejaVu Sans;">。</span>As we have already seen, this calls the <tt>show</tt> action of the <tt>PostsController</tt> which in turn renders the <tt>show.html.erb</tt> template. <span style="font-family: DejaVu Sans;">正如我们已经看到的，这里调用</span>PostsController<span style="font-family: DejaVu Sans;">的</span>show action<span style="font-family: DejaVu Sans;">它将反过来渲染</span><tt>show.html.erb</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>模板。</tt></span>This is where we want the comment to show, so let’s add that to the <tt>app/views/posts/show.html.erb</tt>.<span style="font-family: DejaVu Sans;">这里也是我们想让</span>comment<span style="font-family: DejaVu Sans;">显示的地方，因此让我们添加（那些代码）到</span><tt>app/views/posts/show.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

&lt;p&gt;&lt;%= notice %&gt;&lt;/p&gt;

&nbsp;

&lt;p&gt;

&lt;b&gt;Name:&lt;/b&gt;

&lt;%= @post.name %&gt;

&lt;/p&gt;

&nbsp;

&lt;p&gt;

&lt;b&gt;Title:&lt;/b&gt;

&lt;%= @post.title %&gt;

&lt;/p&gt;

&nbsp;

&lt;p&gt;

&lt;b&gt;Content:&lt;/b&gt;

&lt;%= @post.content %&gt;

&lt;/p&gt;

&nbsp;

&lt;h2&gt;Comments&lt;/h2&gt;

&lt;% @post.comments.each do |comment| %&gt;

&lt;p&gt;

&lt;b&gt;Commenter:&lt;/b&gt;

&lt;%= comment.commenter %&gt;

&lt;/p&gt;

&nbsp;

&lt;p&gt;

&lt;b&gt;Comment:&lt;/b&gt;

&lt;%= comment.body %&gt;

&lt;/p&gt;

&lt;% end %&gt;

&nbsp;

&lt;h2&gt;Add a comment:&lt;/h2&gt;

&lt;%= form_for([@post, @post.comments.build]) do |f| %&gt;

&lt;div&gt;

&lt;%= f.label :commenter %&gt;&lt;br /&gt;

&lt;%= f.text_field :commenter %&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;%= f.label :body %&gt;&lt;br /&gt;

&lt;%= f.text_area :body %&gt;

&lt;/div&gt;

&lt;div&gt;

&lt;%= f.submit %&gt;

&lt;/div&gt;

&lt;% end %&gt;

&nbsp;

&lt;br /&gt;

&nbsp;

&lt;%= link_to 'Edit Post', edit_post_path(@post) %&gt; |

&lt;%= link_to 'Back to Posts', posts_path %&gt; |

Now you can add posts and comments to your blog and have them show up in the right places.<span style="font-family: DejaVu Sans;">现在你可以添加</span>posts<span style="font-family: DejaVu Sans;">和</span>comments<span style="font-family: DejaVu Sans;">到你的</span>blog<span style="font-family: DejaVu Sans;">同时随后他们会在相应的地方显示出来。</span>
<h3><a name="refactoring"></a>8 Refactoring<span style="font-family: WenQuanYi Micro Hei;">重构</span></h3>
Now that we have Posts and Comments working, if we take a look at the <tt>app/views/posts/show.html.erb</tt> template, it’s getting long and awkward. <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">现在我们已经有</span></span>Posts<span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">和</span></span>Comments<span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">开始工作了，如果我们注意一下</span></span><tt>app/views/posts/show.html.erb</tt> <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">模板，发现它变得太长而且很别扭。</span></span>We can use partials to clean this up.<span style="font-family: DejaVu Sans;">我们可以使用</span>partials<span style="font-family: DejaVu Sans;">来整理它。</span>
<h4><a name="rendering-partial-collections"></a>8.1 Rendering Partial<span style="font-family: WenQuanYi Micro Hei;">（局部）</span>Collections</h4>
First we will make a comment partial to extract showing all the comments for the post. <span style="font-family: DejaVu Sans;">首先我们会创建一个</span>comment partial<span style="font-family: DejaVu Sans;">来专门显示</span>post<span style="font-family: DejaVu Sans;">的所有的</span>comments<span style="font-family: DejaVu Sans;">。</span>Create the file <tt>app/views/comments/_comment.html.erb</tt> and put the following into it:<span style="font-family: DejaVu Sans;">创建</span><tt>app/views/comments/_comment.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>文件并输入下面的代码：</tt></span>

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Commenter:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>comment.commenter</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Comment:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>comment.body</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

<tt>Then</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>app/views/posts/show.html.erb</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>change</tt><tt> </tt><tt>it</tt><tt> </tt><tt>to</tt><tt> </tt><tt>look</tt><tt> </tt><tt>like</tt><tt> </tt><tt>the</tt><tt> </tt><tt>following:</tt><span style="font-family: DejaVu Sans;"><tt>然后在</tt><tt></tt></span><tt>app/views/posts/show.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>你可以相应的这样更改：</tt></span>

<code>&lt;p</code><tt> </tt><code>class="notice"&gt;&lt;%=</code><tt> </tt><code>notice</code><code> </code><code>%&gt;&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Name:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>@post.name</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Title:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>@post.title</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Content:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>@post.content</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;h2&gt;Comments&lt;/h2&gt;</code>

<code>&lt;%=</code> <code>render</code><code> </code><code>@post.comments</code><code> </code><code>%&gt;</code>

&nbsp;

<code>&lt;h2&gt;Add</code><code> </code><code>a</code><code> </code><code>comment:&lt;/h2&gt;</code>

<code>&lt;%=</code> <code>form_for([@post,</code><code> </code><code>@post.comments.build])</code><code> </code><code>do</code> <code>|f|</code><code> </code><code>%&gt;</code>

<code> </code><code>&lt;div</code> <code>class="field"&gt;</code>

<code> </code><code>&lt;%=</code> <code>f.label</code><code> </code><code>:commenter</code> <code>%&gt;&lt;br</code> <code>/&gt;</code>

<code> </code><code>&lt;%=</code> <code>f.text_field</code><code> </code><code>:commenter</code> <code>%&gt;</code>

<code> </code><code>&lt;/div&gt;</code>

<code> </code><code>&lt;div</code> <code>class="field"&gt;</code>

<code> </code><code>&lt;%=</code> <code>f.label</code><code> </code><code>:body</code> <code>%&gt;&lt;br</code> <code>/&gt;</code>

<code> </code><code>&lt;%=</code> <code>f.text_area</code><code> </code><code>:body</code> <code>%&gt;</code>

<code> </code><code>&lt;/div&gt;</code>

<code> </code><code>&lt;div</code> <code>class="actions"&gt;</code>

<code> </code><code>&lt;%=</code> <code>f.submit</code><code> </code><code>%&gt;</code>

<code> </code><code>&lt;/div&gt;</code>

<code>&lt;%</code> <code>end</code> <code>%&gt;</code>

&nbsp;

<code>&lt;br</code> <code>/&gt;</code>

&nbsp;

<code>&lt;%=</code> <code>link_to</code><code> </code><code>'Edit</code><code> </code><code>Post',</code><code> </code><code>edit_post_path(@post)</code><code> </code><code>%&gt;</code> <code>|</code>

<code>&lt;%=</code> <code>link_to</code><code> </code><code>'Back</code><code> </code><code>to</code><code> </code><code>Posts',</code><code> </code><code>posts_path</code><code> </code><code>%&gt;</code> <code>|</code>

<tt>This</tt><tt> </tt><tt>will</tt><tt> </tt><tt>now</tt><tt> </tt><tt>render</tt><tt> </tt><tt>the</tt><tt> </tt><tt>partial</tt><tt> </tt><tt>in</tt><tt> </tt><tt>app/views/comments/_comment.html.erb</tt><tt> </tt><tt>once</tt><tt> </tt><tt>for</tt><tt> </tt><tt>each</tt><tt> </tt><tt>comment</tt><tt> </tt><tt>that</tt><tt> </tt><tt>is</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>@post.comments</tt><tt> </tt><tt>collection.</tt><span style="font-family: DejaVu Sans;"><tt>这里会对</tt></span><tt>@post.comments</tt><span style="font-family: DejaVu Sans;"><tt>的每一个</tt></span><tt>comment</tt><span style="font-family: DejaVu Sans;"><tt>渲染</tt><tt></tt></span><tt>app/views/comments/_comment.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>模板。</tt><tt></tt></span><tt>As</tt><tt> </tt><tt>the</tt><tt> </tt><tt>render</tt><tt> </tt><tt>method</tt><tt> </tt><tt>iterates</tt><tt> </tt><tt>over</tt><tt> </tt><tt>the</tt><tt> </tt><tt>@post.comments</tt><tt> </tt><tt>collection,</tt><tt> </tt><tt>it</tt><tt> </tt><tt>assigns</tt><tt> </tt><tt>each</tt><tt> </tt><tt>comment</tt><tt> </tt><tt>to</tt><tt> </tt><tt>a</tt><tt> </tt><tt>local</tt><tt> </tt><tt>variable</tt><tt> </tt><tt>named</tt><tt> </tt><tt>the</tt><tt> </tt><tt>same</tt><tt> </tt><tt>as</tt><tt> </tt><tt>the</tt><tt> </tt><tt>partial,</tt><tt> </tt><tt>in</tt><tt> </tt><tt>this</tt><tt> </tt><tt>case</tt><tt> </tt><tt>comment</tt><tt> </tt><tt>which</tt><tt> </tt><tt>is</tt><tt> </tt><tt>then</tt><tt> </tt><tt>available</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>partial</tt><tt> </tt><tt>for</tt><tt> </tt><tt>us</tt><tt> </tt><tt>to</tt><tt> </tt><tt>show.</tt><span style="font-family: DejaVu Sans;"><tt>当渲染方法迭代</tt></span><tt>@post.comments</tt><span style="font-family: DejaVu Sans;"><tt>收集器的时候，它声明每个</tt></span><tt>comment</tt><span style="font-family: DejaVu Sans;"><tt>为本地变量命名和</tt></span><tt>partial</tt><span style="font-family: DejaVu Sans;"><tt>相同（这里为</tt></span><tt>comment</tt><span style="font-family: DejaVu Sans;"><tt>），通过这样在</tt></span><tt>partial</tt><span style="font-family: DejaVu Sans;"><tt>中的</tt></span><tt>comment</tt><span style="font-family: DejaVu Sans;"><tt>就可以显示给我们的用户了。</tt></span>
<h4><a name="rendering-a-partial-form"></a><tt>8.2</tt><tt> </tt><tt>Rendering</tt><tt> </tt><tt>a</tt><tt> </tt><tt>Partial</tt><tt> </tt><tt>Form</tt></h4>
<tt>Let</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>also</tt><tt> </tt><tt>move</tt><tt> </tt><tt>that</tt><tt> </tt><tt>new</tt><tt> </tt><tt>comment</tt><tt> </tt><tt>section</tt><tt> </tt><tt>out</tt><tt> </tt><tt>to</tt><tt> </tt><tt>its</tt><tt> </tt><tt>own</tt><tt> </tt><tt>partial.</tt><span style="font-family: DejaVu Sans;"><tt>同样让我们移动</tt></span><tt>new</tt><tt> </tt><tt>comment</tt><span style="font-family: DejaVu Sans;"><tt>部分到它自己的地方吧。</tt><tt></tt></span><tt>Again,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>create</tt><tt> </tt><tt>a</tt><tt> </tt><tt>file</tt><tt> </tt><tt>app/views/comments/_form.html.erb</tt><tt> </tt><tt>and</tt><tt> </tt><tt>in</tt><tt> </tt><tt>it</tt><tt> </tt><tt>you</tt><tt> </tt><tt>put:</tt><span style="font-family: DejaVu Sans;"><tt>类似的，创建一个文件</tt><tt></tt></span><tt>app/views/comments/_form.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>并且在里面放入下面代码：</tt></span>

<code>&lt;%=</code><tt> </tt><code>form_for([@post,</code><code> </code><code>@post.comments.build])</code><code> </code><code>do</code><tt> </tt><code>|f|</code><code> </code><code>%&gt;</code>

<code> </code><code>&lt;div</code> <code>class="field"&gt;</code>

<code> </code><code>&lt;%=</code> <code>f.label</code><code> </code><code>:commenter</code> <code>%&gt;&lt;br</code> <code>/&gt;</code>

<code> </code><code>&lt;%=</code> <code>f.text_field</code><code> </code><code>:commenter</code> <code>%&gt;</code>

<code> </code><code>&lt;/div&gt;</code>

<code> </code><code>&lt;div</code> <code>class="field"&gt;</code>

<code> </code><code>&lt;%=</code> <code>f.label</code><code> </code><code>:body</code> <code>%&gt;&lt;br</code> <code>/&gt;</code>

<code> </code><code>&lt;%=</code> <code>f.text_area</code><code> </code><code>:body</code> <code>%&gt;</code>

<code> </code><code>&lt;/div&gt;</code>

<code> </code><code>&lt;div</code> <code>class="actions"&gt;</code>

<code> </code><code>&lt;%=</code> <code>f.submit</code><code> </code><code>%&gt;</code>

<code> </code><code>&lt;/div&gt;</code>

<code>&lt;%</code> <code>end</code> <code>%&gt;</code>

<tt>Then</tt><tt> </tt><tt>you</tt><tt> </tt><tt>make</tt><tt> </tt><tt>the</tt><tt> </tt><tt>app/views/posts/show.html.erb</tt><tt> </tt><tt>look</tt><tt> </tt><tt>like</tt><tt> </tt><tt>the</tt><tt> </tt><tt>following:</tt><span style="font-family: DejaVu Sans;"><tt>接着你这样修改</tt><tt></tt></span><tt>app/views/posts/show.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>文件：</tt></span>

<code>&lt;p</code><tt> </tt><code>class="notice"&gt;&lt;%=</code><tt> </tt><code>notice</code><code> </code><code>%&gt;&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Name:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>@post.name</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Title:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>@post.title</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Content:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>@post.content</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;h2&gt;Comments&lt;/h2&gt;</code>

<code>&lt;%=</code> <code>render</code><code> </code><code>@post.comments</code><code> </code><code>%&gt;</code>

&nbsp;

<code>&lt;h2&gt;Add</code><code> </code><code>a</code><code> </code><code>comment:&lt;/h2&gt;</code>

<code>&lt;%=</code> <code>render</code><code> </code><code>"comments/form"</code> <code>%&gt;</code>

&nbsp;

<code>&lt;br</code> <code>/&gt;</code>

&nbsp;

<code>&lt;%=</code> <code>link_to</code><code> </code><code>'Edit</code><code> </code><code>Post',</code><code> </code><code>edit_post_path(@post)</code><code> </code><code>%&gt;</code> <code>|</code>

<code>&lt;%=</code> <code>link_to</code><code> </code><code>'Back</code><code> </code><code>to</code><code> </code><code>Posts',</code><code> </code><code>posts_path</code><code> </code><code>%&gt;</code> <code>|</code>

<tt>The</tt><tt> </tt><tt>second</tt><tt> </tt><tt>render</tt><tt> </tt><tt>just</tt><tt> </tt><tt>defines</tt><tt> </tt><tt>the</tt><tt> </tt><tt>partial</tt><tt> </tt><tt>template</tt><tt> </tt><tt>we</tt><tt> </tt><tt>want</tt><tt> </tt><tt>to</tt><tt> </tt><tt>render,</tt><tt> </tt><tt>comments/form,</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>is</tt><tt> </tt><tt>smart</tt><tt> </tt><tt>enough</tt><tt> </tt><tt>to</tt><tt> </tt><tt>spot</tt><tt> </tt><tt>the</tt><tt> </tt><tt>forward</tt><tt> </tt><tt>slash</tt><tt> </tt><tt>in</tt><tt> </tt><tt>that</tt><tt> </tt><tt>string</tt><tt> </tt><tt>and</tt><tt> </tt><tt>realize</tt><tt> </tt><tt>that</tt><tt> </tt><tt>you</tt><tt> </tt><tt>want</tt><tt> </tt><tt>to</tt><tt> </tt><tt>render</tt><tt> </tt><tt>the</tt><tt> </tt><tt>_form.html.erb</tt><tt> </tt><tt>file</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>app/views/comments</tt><tt> </tt><tt>directory.</tt><span style="font-family: DejaVu Sans;"><tt>第二个</tt></span><tt>render</tt><span style="font-family: DejaVu Sans;"><tt>仅仅定义了一个我们想渲染的</tt></span><tt>partial</tt><tt> </tt><tt>template</tt><tt> </tt><tt>comments/form</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>可以智能的识别字符串代表的含义，并且知道你是想</tt></span><tt>render</tt><tt> </tt><tt>_form.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>模板。</tt></span>

The <tt>@post</tt> object is available to any partials rendered in the view because we defined it as an instance variable.@post<span style="font-family: DejaVu Sans;">可以在任何的视图中</span>partials rendered<span style="font-family: DejaVu Sans;">，因为我们把它定义成的实例变量。</span>
<h3><a name="deleting-comments"></a><tt>9</tt><tt> </tt><tt>Deleting</tt><tt> </tt><tt>Comments</tt></h3>
Another important feature on a blog is being able to delete SPAM comments.<span style="font-family: DejaVu Sans;">另一个重要的功能就是可以删除垃圾评论。</span>To do this, we need to implement a link of some sort in the view and a <tt>DELETE</tt> action in the <tt>CommentsController</tt>.<span style="font-family: DejaVu Sans;">要达到这样的效果，我们需要在</span>view<span style="font-family: DejaVu Sans;">中实现某种链接和在</span>CommentsController<span style="font-family: DejaVu Sans;">中的</span>DELETE<span style="font-family: DejaVu Sans;">动作。</span>

<tt>So</tt><tt> </tt><tt>first,</tt><tt> </tt><tt>let</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>add</tt><tt> </tt><tt>the</tt><tt> </tt><tt>delete</tt><tt> </tt><tt>link</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>app/views/comments/_comment.html.erb</tt><tt> </tt><tt>partial:</tt><span style="font-family: DejaVu Sans;"><tt>首先，在</tt></span><tt>app/views/comments/_comment.html.erb</tt><tt> </tt><tt>partial</tt><span style="font-family: DejaVu Sans;"><tt>中添加</tt></span><tt>delete</tt><tt> </tt><tt>link</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Commenter:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>comment.commenter</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Comment:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>comment.body</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;%=</code> <code>link_to</code><code> </code><code>'Destroy</code><code> </code><code>Comment',</code><code> </code><code>[comment.post,</code><code> </code><code>comment],</code>

<code> </code><code>:confirm</code> <code>=&gt;</code><code> </code><code>'Are</code><code> </code><code>you</code><code> </code><code>sure?',</code>

<code> </code><code>:method</code> <code>=&gt;</code><code> </code><code>:delete</code> <code>%&gt;</code>

<code>&lt;/p&gt;</code>

Clicking this new “Destroy Comment” link will fire off a <tt>DELETE</tt><tt> </tt><tt>/posts/:id/comments/:id</tt> to our <tt>CommentsController</tt>, which can then use this to find the comment we want to delete, so let’s add a destroy action to our controller:<span style="font-family: DejaVu Sans;">点击<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>Destroy Comment”<span style="font-family: DejaVu Sans;">，</span>link<span style="font-family: DejaVu Sans;">将会发送</span><tt>DELETE</tt><tt> </tt><tt>/posts/:id/comments/:id</tt><span style="font-family: DejaVu Sans;"><tt>到我们的</tt></span><tt>CommentsController</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>CommentsController</tt><span style="font-family: DejaVu Sans;"><tt>将会利用刚刚收到的（消息）找到我们想删除哪条评论，因此让我们接着添加一个</tt></span><tt>destroy</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>到我们的</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

<code>class</code><tt> </tt><code>CommentsController</code><code> </code><code>&lt;</code><code> </code><code>ApplicationController</code>

&nbsp;

<code> </code><code>def</code> <code>create</code>

<code> </code><code>@post</code> <code>=</code><code> </code><code>Post.find(params[:post_id])</code>

<code> </code><code>@comment</code> <code>=</code><code> </code><code>@post.comments.create(params[:comment])</code>

<code> </code><code>redirect_to</code><code> </code><code>post_path(@post)</code>

<code> </code><code>end</code>

&nbsp;

<code> </code><code>def</code> <code>destroy</code>

<code> </code><code>@post</code> <code>=</code><code> </code><code>Post.find(params[:post_id])</code>

<code> </code><code>@comment</code> <code>=</code><code> </code><code>@post.comments.find(params[:id])</code>

<code> </code><code>@comment.destroy</code>

<code> </code><code>redirect_to</code><code> </code><code>post_path(@post)</code>

<code> </code><code>end</code>

&nbsp;

<code>end</code>

<tt>The</tt><tt> </tt><tt>destroy</tt><tt> </tt><tt>action</tt><tt> </tt><tt>will</tt><tt> </tt><tt>find</tt><tt> </tt><tt>the</tt><tt> </tt><tt>post</tt><tt> </tt><tt>we</tt><tt> </tt><tt>are</tt><tt> </tt><tt>looking</tt><tt> </tt><tt>at,</tt><tt> </tt><tt>locate</tt><tt> </tt><tt>the</tt><tt> </tt><tt>comment</tt><tt> </tt><tt>within</tt><tt> </tt><tt>the</tt><tt> </tt><tt>@post.comments</tt><tt> </tt><tt>collection,</tt><tt> </tt><tt>and</tt><tt> </tt><tt>then</tt><tt> </tt><tt>remove</tt><tt> </tt><tt>it</tt><tt> </tt><tt>from</tt><tt> </tt><tt>the</tt><tt> </tt><tt>database</tt><tt> </tt><tt>and</tt><tt> </tt><tt>send</tt><tt> </tt><tt>us</tt><tt> </tt><tt>back</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>show</tt><tt> </tt><tt>action</tt><tt> </tt><tt>for</tt><tt> </tt><tt>the</tt><tt> </tt><tt>post.destroy</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>将会找到那个我们正在阅读的</tt></span><tt>post</tt><span style="font-family: DejaVu Sans;"><tt>，并且定位</tt></span><tt>comment</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>@post.comments</tt><span style="font-family: DejaVu Sans;"><tt>收集器，然后从数据库</tt></span><tt>remove</tt><span style="font-family: DejaVu Sans;"><tt>它，最后传回到</tt></span><tt>post</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h4><a name="deleting-associated-objects"></a><tt>9.1</tt><tt> </tt><tt>Deleting</tt><tt> </tt><tt>Associated</tt><tt> </tt><tt>Objects</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>删除关联对象</tt></span></h4>
<a name="deleting-associated-objects1"></a>If you delete a post then its associated comments will also need to be deleted. <span style="font-family: DejaVu Sans;">如果你删除一个了</span>post<span style="font-family: DejaVu Sans;">，那么与之相关联的</span>comments<span style="font-family: DejaVu Sans;">也需要被删除。</span>Otherwise they would simply occupy space in the database.<span style="font-family: DejaVu Sans;">否则他们将会只是在数据库中占用空间（别无它用）。</span>Rails allows you to use the <tt>dependent</tt> option of an association to achieve this. Modify the Post model, <tt>app/models/post.rb</tt>, as follows:Rails<span style="font-family: DejaVu Sans;">允许你通过关系的依赖选项完成（上述功能）。修改</span>Post model<span style="font-family: DejaVu Sans;">。</span>

<code>class</code> <code>Post</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:name,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true</code>

<code> </code><code>validates</code><code> </code><code>:title,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true,</code>

<code> </code><code>:length</code> <code>=&gt;</code><code> </code><code>{</code><code> </code><code>:minimum</code> <code>=&gt;</code><code> </code><code>5</code> <code>}</code>

<code> </code><code>has_many</code><code> </code><code>:comments,</code><code> </code><code>:dependent</code> <code>=&gt;</code><code> </code><code>:destroy</code>

<code>end</code>
<h3><a name="security"></a>10 Security</h3>
If you were to publish your blog online, anybody would be able to add, edit and delete posts or delete comments.<span style="font-family: DejaVu Sans;">如果你就这样</span>publish<span style="font-family: DejaVu Sans;">你的</span>blog<span style="font-family: DejaVu Sans;">在互联网，任何人都可以添加，编辑和删除</span>post<span style="font-family: DejaVu Sans;">或者删除</span>comments<span style="font-family: DejaVu Sans;">。</span>

Rails provides a very simple HTTP authentication system that will work nicely in this situation.Rails<span style="font-family: DejaVu Sans;">提供了一个非常简单的</span>HTTP<span style="font-family: DejaVu Sans;">认证系统在这样的情况下会非常适合。</span>

In the <tt>PostsController</tt> we need to have a way to block access to the various actions if the person is not authenticated, here we can use the Rails <tt>http_basic_authenticate_with</tt> method, allowing access to the requested action if that method allows it.<span style="font-family: DejaVu Sans;">在</span><tt>PostsController</tt><span style="font-family: DejaVu Sans;"><tt>中我们需要一个方法来阻止没有通过认证的用户的操作，这里我们可以使用</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>的</tt><tt></tt></span><tt>http_basic_authenticate_with</tt><span style="font-family: DejaVu Sans;"><tt>这个方法，准许方法允许的请求的</tt></span><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

To use the authentication system, we specify it at the top of our <tt>PostsController</tt>, in this case, we want the user to be authenticated on every action, except for <tt>index</tt> and <tt>show</tt>, so we write that:<span style="font-family: DejaVu Sans;">要是用这个认证系统，我们需要在</span><tt>PostsController</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>的顶部</tt>在指定（即引用）它，这样我们希望用户在进行每个</span>action<span style="font-family: DejaVu Sans;">的时候都是通过授权的，除了</span>index<span style="font-family: DejaVu Sans;">和</span>show<span style="font-family: DejaVu Sans;">，因此我们这样写：</span>

<code>class</code> <code>PostsController</code><code> </code><code>&lt;</code><code> </code><code>ApplicationController</code>

&nbsp;

<code> </code><code>http_basic_authenticate_with</code><code> </code><code>:name</code> <code>=&gt;</code><code> </code><code>"dhh",</code><code> </code><code>:password</code> <code>=&gt;</code><code> </code><code>"secret",</code><code> </code><code>:except</code> <code>=&gt;</code><code> </code><code>:index</code>

&nbsp;

<code> </code><code>#</code><code> </code><code>GET</code><code> </code><code>/posts</code>

<code> </code><code>#</code><code> </code><code>GET</code><code> </code><code>/posts.json</code>

<code> </code><code>def</code> <code>index</code>

<code> </code><code>@posts</code> <code>=</code><code> </code><code>Post.all</code>

We also only want to allow authenticated users to delete comments, so in the <tt>CommentsController</tt> we write:<span style="font-family: DejaVu Sans;">我们同样希望只有授权用户能够删除评论，因此在</span><tt>CommentsController</tt><span style="font-family: DejaVu Sans;"><tt>这样写：</tt></span>

<code>class</code><tt> </tt><code>CommentsController</code><code> </code><code>&lt;</code><code> </code><code>ApplicationController</code>

&nbsp;

<code> </code><code>http_basic_authenticate_with</code><code> </code><code>:name</code> <code>=&gt;</code><code> </code><code>"dhh",</code><code> </code><code>:password</code> <code>=&gt;</code><code> </code><code>"secret",</code><code> </code><code>:only</code> <code>=&gt;</code><code> </code><code>:destroy</code>

&nbsp;

<code> </code><code>def</code> <code>create</code>

<code> </code><code>@post</code> <code>=</code><code> </code><code>Post.find(params[:post_id])</code>

<tt>Now</tt><tt> </tt><tt>if</tt><tt> </tt><tt>you</tt><tt> </tt><tt>try</tt><tt> </tt><tt>to</tt><tt> </tt><tt>create</tt><tt> </tt><tt>a</tt><tt> </tt><tt>new</tt><tt> </tt><tt>post,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>will</tt><tt> </tt><tt>be</tt><tt> </tt><tt>greeted</tt><tt> </tt><tt>with</tt><tt> </tt><tt>a</tt><tt> </tt><tt>basic</tt><tt> </tt><tt>HTTP</tt><tt> </tt><tt>Authentication</tt><tt> </tt><tt>challenge.</tt><span style="font-family: DejaVu Sans;"><tt>现在如果你尝试创建一个新的</tt></span><tt>post</tt><span style="font-family: DejaVu Sans;"><tt>，你将会迎来一个基于</tt></span><tt>HTTP</tt><span style="font-family: DejaVu Sans;"><tt>认证的挑战。</tt></span>
<h3><a name="building-a-multi-model-form"></a>11 Building a Multi-Model Form<span style="font-family: WenQuanYi Micro Hei;">构建一个多模型表单</span></h3>
Another feature of your average blog is the ability to tag posts. To implement this feature your application needs to interact with more than one model on a single form. Rails offers support for nested forms.<span style="font-family: DejaVu Sans;">另一个功能你的平衡的</span>blog<span style="font-family: DejaVu Sans;">是能够给</span>posts<span style="font-family: DejaVu Sans;">添加</span>tag<span style="font-family: DejaVu Sans;">。要想在你的程序中实现这个功能需要在一个</span>form<span style="font-family: DejaVu Sans;">中与超过一个</span>model<span style="font-family: DejaVu Sans;">互动。</span>Rails<span style="font-family: DejaVu Sans;">提供了嵌套</span>forms<span style="font-family: DejaVu Sans;">。</span>

To demonstrate this, we will add support for giving each post multiple tags, right in the form where you create the post. First, create a new model to hold the tags:<span style="font-family: DejaVu Sans;">为了演示这个（功能），你将会在你创建</span>post<span style="font-family: DejaVu Sans;">的</span>form<span style="font-family: DejaVu Sans;">中添加</span>post<span style="font-family: DejaVu Sans;">的多</span>tag<span style="font-family: DejaVu Sans;">支持。首先创建一个</span>new model<span style="font-family: DejaVu Sans;">来存放</span>tags<span style="font-family: DejaVu Sans;">：</span>

<code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>model</code><code> </code><code>tag</code><code> </code><code>name:string</code><code> </code><code>post:references</code>

Again, run the migration to create the database table:<span style="font-family: DejaVu Sans;">再次运行</span>migration<span style="font-family: DejaVu Sans;">来创建数据库表单：</span>

<code>$</code><code> </code><code>rake</code><code> </code><code>db:migrate</code>

Next, edit the <tt>post.rb</tt> file to create the other side of the association, and to tell Rails (via the <tt>accepts_nested_attributes_for</tt> macro) that you intend to edit tags via posts:<span style="font-family: DejaVu Sans;">接下来：编辑</span>post.rb<span style="font-family: DejaVu Sans;">文件来创建来创建另一个成员，并且告诉</span>Rails<span style="font-family: DejaVu Sans;">（通过</span>the <tt>accepts_nested_attributes_for</tt> <span style="font-family: DejaVu Sans;">宏）你打算通过</span>posts form<span style="font-family: DejaVu Sans;">来编辑</span>tags<span style="font-family: DejaVu Sans;">。</span>

class Post &lt; ActiveRecord::Base

validates :name, :presence =&gt; true

validates :title, :presence =&gt; true

validates :content,:presence =&gt; true,

:length =&gt; { :minimum =&gt; 5 }

&nbsp;

has_many :comments, :dependent =&gt; :destroy

has_many :tags

&nbsp;

accepts_nested_attributes_for :tags, :allow_destroy =&gt; :true,

:reject_if =&gt; proc { |attrs| attrs.all? { |k, v| v.blank? } }

end

<tt>The</tt><tt> </tt><tt>:allow_destroy</tt><tt> </tt><tt>option</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>nested</tt><tt> </tt><tt>attribute</tt><tt> </tt><tt>declaration</tt><tt> </tt><tt>tells</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>to</tt><tt> </tt><tt>display</tt><tt> </tt><tt>a</tt><tt> “</tt><tt>remove</tt><tt>” </tt><tt>checkbox</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>view</tt><tt> </tt><tt>that</tt><tt> </tt><tt>you</tt><tt>’</tt><tt>ll</tt><tt> </tt><tt>build</tt><tt> </tt><tt>shortly.</tt><span style="font-family: DejaVu Sans;"><tt>对于</tt></span><tt>:allow_destroy</tt><span style="font-family: DejaVu Sans;"><tt>嵌套属性的声明是告诉</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>显示一个</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></tt></span><tt>remove</tt><tt>”</tt><span style="font-family: DejaVu Sans;"><tt>复选框在视图中那样你可以快速创建（</tt></span><tt>tags</tt><span style="font-family: DejaVu Sans;"><tt>）。</tt><tt></tt></span><tt>The</tt><tt> </tt><tt>:reject_if</tt><tt> </tt><tt>option</tt><tt> </tt><tt>prevents</tt><tt> </tt><tt>saving</tt><tt> </tt><tt>new</tt><tt> </tt><tt>tags</tt><tt> </tt><tt>that</tt><tt> </tt><tt>do</tt><tt> </tt><tt>not</tt><tt> </tt><tt>have</tt><tt> </tt><tt>any</tt><tt> </tt><tt>attributes</tt><tt> </tt><tt>filled</tt><tt> </tt><tt>in.</tt><span style="font-family: DejaVu Sans;"><tt>对于</tt></span><tt>:reject_if</tt><span style="font-family: DejaVu Sans;"><tt>保证不保存没有任何内容的</tt></span><tt>tags</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

<tt>We</tt><tt> </tt><tt>will</tt><tt> </tt><tt>modify</tt><tt> </tt><tt>views/posts/_form.html.erb</tt><tt> </tt><tt>to</tt><tt> </tt><tt>render</tt><tt> </tt><tt>a</tt><tt> </tt><tt>partial</tt><tt> </tt><tt>to</tt><tt> </tt><tt>make</tt><tt> </tt><tt>a</tt><tt> </tt><tt>tag:</tt><span style="font-family: DejaVu Sans;"><tt>我们将要修改</tt><tt></tt></span><tt>views/posts/_form.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>来</tt></span><tt>render</tt><span style="font-family: DejaVu Sans;"><tt>（</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>的）一部分来创建</tt></span><tt>tag</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

<tt>&lt;%</tt><tt> </tt><tt>@post.tags.build</tt><tt> </tt><tt>%&gt;</tt>

<tt>&lt;%=</tt><tt> </tt><tt>form_for(@post)</tt><tt> </tt><tt>do</tt><tt> </tt><tt>|post_form|</tt><tt> </tt><tt>%&gt;</tt>

<tt> </tt><tt>&lt;%</tt><tt> </tt><tt>if</tt><tt> </tt><tt>@post.errors.any?</tt><tt> </tt><tt>%&gt;</tt>

<tt> </tt><tt>&lt;div</tt><tt> </tt><tt>id="errorExplanation"&gt;</tt>

<tt> </tt><tt>&lt;h2&gt;&lt;%=</tt><tt> </tt><tt>pluralize(@post.errors.count,</tt><tt> </tt><tt>"error")</tt><tt> </tt><tt>%&gt;</tt><tt> </tt><tt>prohibited</tt><tt> </tt><tt>this</tt><tt> </tt><tt>post</tt><tt> </tt><tt>from</tt><tt> </tt><tt>being</tt><tt> </tt><tt>saved:&lt;/h2&gt;</tt>

<tt> </tt><tt>&lt;ul&gt;</tt>

<tt> </tt><tt>&lt;%</tt><tt> </tt><tt>@post.errors.full_messages.each</tt><tt> </tt><tt>do</tt><tt> </tt><tt>|msg|</tt><tt> </tt><tt>%&gt;</tt>

<tt> </tt><tt>&lt;li&gt;&lt;%=</tt><tt> </tt><tt>msg</tt><tt> </tt><tt>%&gt;&lt;/li&gt;</tt>

<tt> </tt><tt>&lt;%</tt><tt> </tt><tt>end</tt><tt> </tt><tt>%&gt;</tt>

<tt> </tt><tt>&lt;/ul&gt;</tt>

<tt> </tt><tt>&lt;/div&gt;</tt>

<tt> </tt><tt>&lt;%</tt><tt> </tt><tt>end</tt><tt> </tt><tt>%&gt;</tt>

&nbsp;

<tt> </tt><tt>&lt;div</tt><tt> </tt><tt>class="field"&gt;</tt>

<tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>post_form.label</tt><tt> </tt><tt>:name</tt><tt> </tt><tt>%&gt;&lt;br</tt><tt> </tt><tt>/&gt;</tt>

<tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>post_form.text_field</tt><tt> </tt><tt>:name</tt><tt> </tt><tt>%&gt;</tt>

<tt> </tt><tt>&lt;/div&gt;</tt>

<tt> </tt><tt>&lt;div</tt><tt> </tt><tt>class="field"&gt;</tt>

<tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>post_form.label</tt><tt> </tt><tt>:title</tt><tt> </tt><tt>%&gt;&lt;br</tt><tt> </tt><tt>/&gt;</tt>

<tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>post_form.text_field</tt><tt> </tt><tt>:title</tt><tt> </tt><tt>%&gt;</tt>

<tt> </tt><tt>&lt;/div&gt;</tt>

<tt> </tt><tt>&lt;div</tt><tt> </tt><tt>class="field"&gt;</tt>

<tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>post_form.label</tt><tt> </tt><tt>:content</tt><tt> </tt><tt>%&gt;&lt;br</tt><tt> </tt><tt>/&gt;</tt>

<tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>post_form.text_area</tt><tt> </tt><tt>:content</tt><tt> </tt><tt>%&gt;</tt>

<tt> </tt><tt>&lt;/div&gt;</tt>

<tt> </tt><tt>&lt;h2&gt;Tags&lt;/h2&gt;</tt>

<tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>render</tt><tt> </tt><tt>:partial</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>'tags/form',</tt>

<tt> </tt><tt>:locals</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>{:form</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>post_form}</tt><tt> </tt><tt>%&gt;</tt>

<tt> </tt><tt>&lt;div</tt><tt> </tt><tt>class="actions"&gt;</tt>

<tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>post_form.submit</tt><tt> </tt><tt>%&gt;</tt>

<tt> </tt><tt>&lt;/div&gt;</tt>

<tt>&lt;%</tt><tt> </tt><tt>end</tt><tt> </tt><tt>%&gt;</tt>

<tt>Note</tt><tt> </tt><tt>that</tt><tt> </tt><tt>we</tt><tt> </tt><tt>have</tt><tt> </tt><tt>changed</tt><tt> </tt><tt>the</tt><tt> </tt><tt>f</tt><tt> </tt><tt>in</tt><tt> </tt><tt>form_for(@post)</tt><tt> </tt><tt>do</tt><tt> </tt><tt>|f|</tt><tt> </tt><tt>to</tt><tt> </tt><tt>post_form</tt><tt> </tt><tt>to</tt><tt> </tt><tt>make</tt><tt> </tt><tt>it</tt><tt> </tt><tt>easier</tt><tt> </tt><tt>to</tt><tt> </tt><tt>understand</tt><tt> </tt><tt>what</tt><tt> </tt><tt>is</tt><tt> </tt><tt>going</tt><tt> </tt><tt>on.</tt><span style="font-family: DejaVu Sans;"><tt>注意：我们已经更改</tt></span><code>form_for(@post)</code><code> </code><code>do</code><code> </code><code>|f|</code><span style="font-family: DejaVu Sans;"><tt>为</tt></span><code>form_for(@post)</code><code> </code><code>do</code><tt> </tt><code>|post_form|</code><span style="font-family: DejaVu Sans;"><code>这样会更加容易明白是怎么回事。</code></span>

<code>This</code><code> </code><code>example</code><code> </code><code>shows</code><code> </code><code>another</code><code> </code><code>option</code><code> </code><code>of</code><code> </code><code>the</code><code> </code><code>render</code><code> </code><code>helper,</code><code> </code><code>being</code><code> </code><code>able</code><code> </code><code>to</code><code> </code><code>pass</code><code> </code><code>in</code><code> </code><code>local</code><code> </code><code>variables,</code><code> </code><code>in</code><code> </code><code>this</code><code> </code><code>case,</code><code> </code><code>we</code><code> </code><code>want</code><code> </code><code>the</code><code> </code><code>local</code><code> </code><code>variable</code><code> </code><tt>form</tt><code> </code><code>in</code><code> </code><code>the</code><code> </code><code>partial</code><code> </code><code>to</code><code> </code><code>refer</code><code> </code><code>to</code><code> </code><code>the</code><code> </code><tt>post_form</tt><code> </code><code>object.</code><span style="font-family: DejaVu Sans;"><code>这个例子在</code></span><code>render</code><code> </code><code>helper</code><span style="font-family: DejaVu Sans;"><code>中使用另个方式（使用</code></span><code>f</code><span style="font-family: DejaVu Sans;"><code>），是为了说明我们希望的是在</code></span><code>form</code><span style="font-family: DejaVu Sans;"><code>中使用局部变量指向的</code></span><code>post_form</code><span style="font-family: DejaVu Sans;"><code>对象。</code></span>

<tt>We</tt><tt> </tt><tt>also</tt><tt> </tt><tt>add</tt><tt> </tt><tt>a</tt><tt> </tt><tt>@post.tags.build</tt><tt> </tt><tt>at</tt><tt> </tt><tt>the</tt><tt> </tt><tt>top</tt><tt> </tt><tt>of</tt><tt> </tt><tt>this</tt><tt> </tt><tt>form.</tt><tt> </tt><tt>This</tt><tt> </tt><tt>is</tt><tt> </tt><tt>to</tt><tt> </tt><tt>make</tt><tt> </tt><tt>sure</tt><tt> </tt><tt>there</tt><tt> </tt><tt>is</tt><tt> </tt><tt>a</tt><tt> </tt><tt>new</tt><tt> </tt><tt>tag</tt><tt> </tt><tt>ready</tt><tt> </tt><tt>to</tt><tt> </tt><tt>have</tt><tt> </tt><tt>its</tt><tt> </tt><tt>name</tt><tt> </tt><tt>filled</tt><tt> </tt><tt>in</tt><tt> </tt><tt>by</tt><tt> </tt><tt>the</tt><tt> </tt><tt>user.</tt><tt> </tt><tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>do</tt><tt> </tt><tt>not</tt><tt> </tt><tt>build</tt><tt> </tt><tt>the</tt><tt> </tt><tt>new</tt><tt> </tt><tt>tag,</tt><tt> </tt><tt>then</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>will</tt><tt> </tt><tt>not</tt><tt> </tt><tt>appear</tt><tt> </tt><tt>as</tt><tt> </tt><tt>there</tt><tt> </tt><tt>is</tt><tt> </tt><tt>no</tt><tt> </tt><tt>new</tt><tt> </tt><tt>Tag</tt><tt> </tt><tt>object</tt><tt> </tt><tt>ready</tt><tt> </tt><tt>to</tt><tt> </tt><tt>create.</tt><span style="font-family: DejaVu Sans;"><tt>我们还在</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>的顶部添加</tt></span><tt>@post.tags.build</tt><span style="font-family: DejaVu Sans;"><tt>。这里是为了确保每个新的</tt></span><tt>tag</tt><span style="font-family: DejaVu Sans;"><tt>都被用户填上了</tt></span><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>。如果你不创建新</tt></span><tt>tag</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>将不会显示它。</tt></span>

<tt>Now</tt><tt> </tt><tt>create</tt><tt> </tt><tt>the</tt><tt> </tt><tt>folder</tt><tt> </tt><tt>app/views/tags</tt><tt> </tt><tt>and</tt><tt> </tt><tt>make</tt><tt> </tt><tt>a</tt><tt> </tt><tt>file</tt><tt> </tt><tt>in</tt><tt> </tt><tt>there</tt><tt> </tt><tt>called</tt><tt> </tt><tt>_form.html.erb</tt><tt> </tt><tt>which</tt><tt> </tt><tt>contains</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>for</tt><tt> </tt><tt>the</tt><tt> </tt><tt>tag:</tt><span style="font-family: DejaVu Sans;"><tt>现在创建一个</tt><tt></tt></span><tt>app/views/tags</tt><span style="font-family: DejaVu Sans;"><tt>文件夹并且在里面新建一个</tt></span><tt>_form.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>包含以下内容：</tt></span>

<code>&lt;%=</code><tt> </tt><code>form.fields_for</code><code> </code><code>:tags</code><tt> </tt><code>do</code><tt> </tt><code>|tag_form|</code><code> </code><code>%&gt;</code>

<code> </code><code>&lt;div</code> <code>class="field"&gt;</code>

<code> </code><code>&lt;%=</code> <code>tag_form.label</code><code> </code><code>:name,</code><code> </code><code>'Tag:'</code> <code>%&gt;</code>

<code> </code><code>&lt;%=</code> <code>tag_form.text_field</code><code> </code><code>:name</code> <code>%&gt;</code>

<code> </code><code>&lt;/div&gt;</code>

<code> </code><code>&lt;%</code> <code>unless</code> <code>tag_form.object.nil?</code><code> </code><code>||</code><code> </code><code>tag_form.object.new_record?</code><code> </code><code>%&gt;</code>

<code> </code><code>&lt;div</code> <code>class="field"&gt;</code>

<code> </code><code>&lt;%=</code> <code>tag_form.label</code><code> </code><code>:_destroy,</code><code> </code><code>'Remove:'</code> <code>%&gt;</code>

<code> </code><code>&lt;%=</code> <code>tag_form.check_box</code><code> </code><code>:_destroy</code><code> </code><code>%&gt;</code>

<code> </code><code>&lt;/div&gt;</code>

<code> </code><code>&lt;%</code> <code>end</code> <code>%&gt;</code>

<code>&lt;%</code> <code>end</code> <code>%&gt;</code>

<tt>Finally,</tt><tt> </tt><tt>we</tt><tt> </tt><tt>will</tt><tt> </tt><tt>edit</tt><tt> </tt><tt>the</tt><tt> </tt><tt>app/views/posts/show.html.erb</tt><tt> </tt><tt>template</tt><tt> </tt><tt>to</tt><tt> </tt><tt>show</tt><tt> </tt><tt>our</tt><tt> </tt><tt>tags.</tt><span style="font-family: DejaVu Sans;"><tt>最后编辑</tt></span><tt>app/views/posts/show.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>模板显示我们的</tt></span><tt>tags</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

<code>&lt;p</code><tt> </tt><code>class="notice"&gt;&lt;%=</code><tt> </tt><code>notice</code><code> </code><code>%&gt;&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Name:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>@post.name</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Title:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>@post.title</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Content:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>@post.content</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Tags:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>@post.tags.map</code><code> </code><code>{</code><code> </code><code>|t|</code><code> </code><code>t.name</code><code> </code><code>}.join(",</code><code> </code><code>")</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;h2&gt;Comments&lt;/h2&gt;</code>

<code>&lt;%=</code> <code>render</code><code> </code><code>@post.comments</code><code> </code><code>%&gt;</code>

&nbsp;

<code>&lt;h2&gt;Add</code><code> </code><code>a</code><code> </code><code>comment:&lt;/h2&gt;</code>

<code>&lt;%=</code> <code>render</code><code> </code><code>"comments/form"</code> <code>%&gt;</code>

&nbsp;

&nbsp;

<code>&lt;%=</code> <code>link_to</code><code> </code><code>'Edit</code><code> </code><code>Post',</code><code> </code><code>edit_post_path(@post)</code><code> </code><code>%&gt;</code> <code>|</code>

<code>&lt;%=</code> <code>link_to</code><code> </code><code>'Back</code><code> </code><code>to</code><code> </code><code>Posts',</code><code> </code><code>posts_path</code><code> </code><code>%&gt;</code> <code>|</code>

<tt>With</tt><tt> </tt><tt>these</tt><tt> </tt><tt>changes</tt><tt> </tt><tt>in</tt><tt> </tt><tt>place,</tt><tt> </tt><tt>you</tt><tt>’</tt><tt>ll</tt><tt> </tt><tt>find</tt><tt> </tt><tt>that</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>edit</tt><tt> </tt><tt>a</tt><tt> </tt><tt>post</tt><tt> </tt><tt>and</tt><tt> </tt><tt>its</tt><tt> </tt><tt>tags</tt><tt> </tt><tt>directly</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>same</tt><tt> </tt><tt>view.</tt><span style="font-family: DejaVu Sans;"><tt>通过这写修改，你会发现你可以直接在</tt></span><tt>post</tt><tt> </tt><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>中编辑</tt></span><tt>tags</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

However, that method call <tt>@post.tags.map</tt><tt> </tt><tt>{</tt><tt> </tt><tt>|t|</tt><tt> </tt><tt>t.name</tt><tt> </tt><tt>}.join(",</tt><tt> </tt><tt>")</tt> is awkward, we could handle this by making a helper method.<span style="font-family: DejaVu Sans;">另外，</span><tt>@post.tags.map</tt><tt> </tt><tt>{</tt><tt> </tt><tt>|t|</tt><tt> </tt><tt>t.name</tt><tt> </tt><tt>}.join(",</tt><tt> </tt><tt>")</tt><span style="font-family: DejaVu Sans;"><tt>这个方法很别扭，我们可以通过编写一个</tt></span><tt>helper</tt><tt> </tt><tt>method</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

<tt>###</tt><span style="font-family: DejaVu Sans;"><tt>上面都还只能一次创建一个</tt></span><tt>tag</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>post</tt><tt> </tt><tt>form</tt>
<h3><a name="view-helpers"></a><tt>12</tt><tt> </tt><tt>View</tt><tt> </tt><tt>Helpers</tt></h3>
<tt>View</tt><tt> </tt><tt>Helpers</tt><tt> </tt><tt>live</tt><tt> </tt><tt>in</tt><tt> </tt><tt>app/helpers</tt><tt> </tt><tt>and</tt><tt> </tt><tt>provide</tt><tt> </tt><tt>small</tt><tt> </tt><tt>snippets</tt><tt> </tt><tt>of</tt><tt> </tt><tt>reusable</tt><tt> </tt><tt>code</tt><tt> </tt><tt>for</tt><tt> </tt><tt>views.View</tt><tt> </tt><tt>Helpers</tt><span style="font-family: DejaVu Sans;"><tt>放置在</tt></span><tt>app/helpers</tt><span style="font-family: DejaVu Sans;"><tt>，它提供了可重用的小代码片段给</tt></span><tt>view</tt><span style="font-family: DejaVu Sans;"><tt>。</tt><tt></tt></span><tt>In</tt><tt> </tt><tt>our</tt><tt> </tt><tt>case,</tt><tt> </tt><tt>we</tt><tt> </tt><tt>want</tt><tt> </tt><tt>a</tt><tt> </tt><tt>method</tt><tt> </tt><tt>that</tt><tt> </tt><tt>strings</tt><tt> </tt><tt>a</tt><tt> </tt><tt>bunch</tt><tt> </tt><tt>of</tt><tt> </tt><tt>objects</tt><tt> </tt><tt>together</tt><tt> </tt><tt>using</tt><tt> </tt><tt>their</tt><tt> </tt><tt>name</tt><tt> </tt><tt>attribute</tt><tt> </tt><tt>and</tt><tt> </tt><tt>joining</tt><tt> </tt><tt>them</tt><tt> </tt><tt>with</tt><tt> </tt><tt>a</tt><tt> </tt><tt>comma.</tt><span style="font-family: DejaVu Sans;"><tt>在本例，我们想要一个方法把（</tt></span><tt>tag</tt><span style="font-family: DejaVu Sans;"><tt>）放在一起（一个字符串中），并且使用逗号分割。</tt><tt></tt></span><tt>As</tt><tt> </tt><tt>this</tt><tt> </tt><tt>is</tt><tt> </tt><tt>for</tt><tt> </tt><tt>the</tt><tt> </tt><tt>Post</tt><tt> </tt><tt>show</tt><tt> </tt><tt>template,</tt><tt> </tt><tt>we</tt><tt> </tt><tt>put</tt><tt> </tt><tt>it</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>PostsHelper.</tt><span style="font-family: DejaVu Sans;"><tt>要想这样在</tt></span><tt>Post</tt><tt> </tt><tt>show</tt><span style="font-family: DejaVu Sans;"><tt>模板，我们在</tt></span><tt>PostHelper</tt><span style="font-family: DejaVu Sans;"><tt>中写入：</tt></span>

<tt>Now</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>edit</tt><tt> </tt><tt>the</tt><tt> </tt><tt>view</tt><tt> </tt><tt>in</tt><tt> </tt><tt>app/views/posts/show.html.erb</tt><tt> </tt><tt>to</tt><tt> </tt><tt>look</tt><tt> </tt><tt>like</tt><tt> </tt><tt>this:</tt><span style="font-family: DejaVu Sans;"><tt>现在你可以在</tt><tt></tt></span><tt>app/views/posts/show.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>中更改：</tt></span>

<code>&lt;p</code><tt> </tt><code>class="notice"&gt;&lt;%=</code><tt> </tt><code>notice</code><code> </code><code>%&gt;&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Name:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>@post.name</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Title:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>@post.title</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Content:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>@post.content</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;p&gt;</code>

<code> </code><code>&lt;b&gt;Tags:&lt;/b&gt;</code>

<code> </code><code>&lt;%=</code> <code>join_tags(@post)</code><code> </code><code>%&gt;</code>

<code>&lt;/p&gt;</code>

&nbsp;

<code>&lt;h2&gt;Comments&lt;/h2&gt;</code>

<code>&lt;%=</code> <code>render</code><code> </code><code>@post.comments</code><code> </code><code>%&gt;</code>

&nbsp;

<code>&lt;h2&gt;Add</code><code> </code><code>a</code><code> </code><code>comment:&lt;/h2&gt;</code>

<code>&lt;%=</code> <code>render</code><code> </code><code>"comments/form"</code> <code>%&gt;</code>

&nbsp;

&nbsp;

<code>&lt;%=</code> <code>link_to</code><code> </code><code>'Edit</code><code> </code><code>Post',</code><code> </code><code>edit_post_path(@post)</code><code> </code><code>%&gt;</code> <code>|</code>

<code>&lt;%=</code> <code>link_to</code><code> </code><code>'Back</code><code> </code><code>to</code><code> </code><code>Posts',</code><code> </code><code>posts_path</code><code> </code><code>%&gt;</code> <code>|</code>
<h3><a name="what-s-next"></a>13 What’s Next?<span style="font-family: WenQuanYi Micro Hei;">接下来做什么呢？</span></h3>
Now that you’ve seen your first Rails application, you should feel free to update it and experiment on your own. But you don’t have to do everything without help.<span style="font-family: DejaVu Sans;">现在你已经看到了你的第一个</span>Rails<span style="font-family: DejaVu Sans;">应用程序，你应该可以很轻松的继续更新它或者试验一下你的想法。</span>As you need assistance getting up and running with Rails, feel free to consult these support resources:<span style="font-family: DejaVu Sans;">当你在更新和运行</span>Rails<span style="font-family: DejaVu Sans;">的时候需要援助，咨询下面推荐的资源会让你感到轻松：</span>
<ul>
	<li>The <a href="http://guides.rubyonrails.org/index.html"><span style="color: #000080;"><span style="text-decoration: underline;">Ruby</span></span><span style="color: #000080;"><span style="text-decoration: underline;">on</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">guides</span></span></a></li>
	<li>The <a href="http://railstutorial.org/book"><span style="color: #000080;"><span style="text-decoration: underline;">Ruby</span></span><span style="color: #000080;"><span style="text-decoration: underline;">on</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Tutorial</span></span></a></li>
	<li>The <a href="http://groups.google.com/group/rubyonrails-talk"><span style="color: #000080;"><span style="text-decoration: underline;">Ruby</span></span><span style="color: #000080;"><span style="text-decoration: underline;">on</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">mailing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">list</span></span></a></li>
	<li>The <span style="color: #000080;"><span style="text-decoration: underline;"><a href="irc://irc.freenode.net/#rubyonrails">#rubyonrails</a></span></span> channel on irc.freenode.net</li>
	<li>The <a href="http://wiki.rubyonrails.org/"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Wiki</span></span></a></li>
</ul>
Rails also comes with built-in help that you can generate using the rake command-line utility:Rails<span style="font-family: DejaVu Sans;">同样也带有内置的帮助你可以使用</span>rake<span style="font-family: DejaVu Sans;">命令实用工具在你的应用程序中创建帮助文档：</span>
<ul>
	<li>Running <tt><strong>rake</strong></tt><tt><strong> </strong></tt><tt><strong>doc:guides</strong></tt> will put a full copy of the Rails Guides in the <tt>doc/guides</tt> folder of your application. Open <tt>doc/guides/index.html</tt> in your web browser to explore the Guides. <span style="font-family: DejaVu Sans;">运行</span><tt><strong>rake</strong></tt><tt><strong> </strong></tt><tt><strong>doc:guides</strong></tt><span style="font-family: DejaVu Sans;"><tt>将会输出所有</tt></span><tt>Rails</tt><tt> </tt><tt>Guides</tt><span style="font-family: DejaVu Sans;"><tt>的文档到你的应用程序中的</tt></span><tt>doc/guides</tt><span style="font-family: DejaVu Sans;"><tt>中。在你的浏览器中打开</tt></span><tt>/guides/index.html</tt><span style="font-family: DejaVu Sans;"><tt>浏览</tt></span><tt>Guides</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></li>
	<li>Running <tt>rake</tt><tt> </tt><tt>doc:rails</tt> will put a full copy of the API documentation for Rails in the <tt>doc/api</tt> folder of your application. Open <tt>doc/api/index.html</tt> in your web browser to explore the API documentation. <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">运行 </span></span><tt>rake</tt><tt> </tt><tt>doc:rails</tt><span style="font-family: DejaVu Sans;"><tt>将会</tt><tt>输出所有</tt></span><tt>Rails</tt><tt> API </tt><span style="font-family: DejaVu Sans;"><tt>的文档到你的应用程序中的</tt></span><tt>doc/api</tt><span style="font-family: DejaVu Sans;"><tt>中。</tt></span></li>
</ul>
#<span style="font-family: DejaVu Sans;">因为</span>redcloth<span style="font-family: DejaVu Sans;">的问题文档支持有点故障，虽然找到了一种解决方法但是不够完美以待官方或者来人修复。</span>
<h3><a name="configuration-gotchas"></a><a name="result_box"></a> 14 Configuration Gotchas<span style="font-family: WenQuanYi Micro Hei;">配置陷阱</span></h3>
The easiest way to work with Rails is to store all external data as UTF-8.Rails<span style="font-family: DejaVu Sans;">使用</span>Rails<span style="font-family: DejaVu Sans;">最简单的工作方式是存储所有的外部数据为</span>UTF-8<span style="font-family: DejaVu Sans;">编码。</span>If you don’t, Ruby libraries and Rails will often be able to convert your native data into UTF-8, but this doesn’t always work reliably, so you’re better off ensuring that all external data is UTF-8.<span style="font-family: DejaVu Sans;">如果不那样做，</span>Ruby libraries<span style="font-family: DejaVu Sans;">和</span>Rails<span style="font-family: DejaVu Sans;">通才会转换你的自然数据成</span>UTF-8<span style="font-family: DejaVu Sans;">编码，但是这样不是很可靠，因此你最好保证所有的外部数据是</span>UTF-8<span style="font-family: DejaVu Sans;">编码。</span>

If you have made a mistake in this area, the most common symptom is a black diamond with a question mark inside appearing in the browser. <span style="font-family: DejaVu Sans;">如果你在这里犯了错误，一般的症状就是在浏览器中出现钻石符号（可能是</span>^<span style="font-family: DejaVu Sans;">）变成了问号。</span>Another common symptom is characters like “Ã¼” appearing instead of “ü”. <span style="font-family: DejaVu Sans;">另一个普遍症状是<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>ü”<span style="font-family: DejaVu Sans;">变成了<span style="font-family: Liberation Serif,Times New Roman,serif;"> “</span></span>Ã¼”<span style="font-family: DejaVu Sans;">。</span>Rails takes a number of internal<span style="font-family: DejaVu Sans;">内部</span>steps to mitigate<span style="font-family: DejaVu Sans;">减轻</span>common causes of these problems that can be automatically detected<span style="font-family: DejaVu Sans;">检测</span>and corrected. However, if you have external data that is not stored as UTF-8, it can occasionally<span style="font-family: DejaVu Sans;">偶尔</span>result in these kinds of issues that cannot be automatically detected by Rails and corrected<span style="font-family: DejaVu Sans;">更正</span>.

Two very common sources of data that are not UTF-8:<span style="font-family: DejaVu Sans;">两种非常普遍的不是</span>UTF-8 <span style="font-family: DejaVu Sans;">编码的源数据：</span>
<ul>
	<li>Your text editor: Most text editors (such as Textmate), default to saving files as UTF-8. If your text editor does not, this can result in special characters that you enter in your templates (such as é) to appear as a diamond with a question mark inside in the browser. This also applies to your I18N translation files. Most editors that do not already default to UTF-8 (such as some versions of Dreamweaver) offer a way to change the default to UTF-8. Do so.</li>
	<li>Your database. Rails defaults to converting data from your database into UTF-8 at the boundary. However, if your database is not using UTF-8 internally, it may not be able to store all characters that your users enter. For instance, if your database is using Latin-1 internally, and your user enters a Russian, Hebrew, or Japanese character, the data will be lost forever once it enters the database. If possible, use UTF-8 as the internal storage of your database.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date>2011-11-10 03:05:45</wp:post_date>
		<wp:post_date_gmt>2011-11-10 03:05:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-started-with-rails-en-cn</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="book"><![CDATA[book]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ubuntu-11-10"><![CDATA[ubuntu 11.10]]></category>
		<category domain="post_tag" nicename="web"><![CDATA[web]]></category>
		<category domain="post_tag" nicename="%e7%bb%8f%e9%aa%8c"><![CDATA[经验]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>码农熬夜指南</title>
		<link></link>
		<pubDate>Thu, 10 Nov 2011 05:40:02 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=52</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

最近赶着交作业，所以不得已连着三天熬夜，感觉整个人都快斯巴达了。到处找了些关于熬夜的技巧，与大家共勉。当然，不用熬夜是最好啦，可惜作为天生乐观派的程序员，多数都是平时不用功，到了要交付的时候才伴随着最后期限呼啸而过的声音熬夜赶进度。

首先,能不熬夜还是不熬的好。

熬夜前的准备
下午时候，不要吃泡面来填饱肚子，以免火气太大。晚餐应多补充一些含维生素C或含有胶原蛋白的食物，鱼类、豆类这些。
拿热水泡脚很养人，对于熬夜时候保持精力也很管用。
开始熬夜前，来一颗维他命Ｂ群营养丸，维他命Ｂ能够解除疲劳，增强人体免疫力。拿医保卡去学校随便拿一瓶，也就是几十块的事情。

熬夜中
熬夜的人，最先想到的就是喝咖啡提神。但是咖啡因虽然提神，相对地会消耗体内与神经、肌肉协调有关的维他命B群，缺乏维他命B群的人本来就比较容易累，更可能形成恶性循环，养成酗茶、酗咖啡的习惯，需要量愈来愈多，效果却愈来愈差。因此，我个人比较推荐喝茶，绿茶很不错，可以提神，又可以消除体内多余的自由基，据说还有些防辐射的作用。不过貌似肠胃不好的人喝不得绿茶，那枸杞大枣茶或菊花茶也是很好的选择，提神而且有去火的功效。

熬夜时候不要吃太多甜食，高糖虽有高热量，刚开始让人兴奋，却会消耗维他命B群，会让人容易疲劳，也容易引来肥胖问题。

熬夜时候最好的食物是水果，这个道理就不用多说了。值得注意的是，花生米、杏仁、腰果、胡桃等干果类食品，含有丰富的蛋白质、维生素B、维生素E、钙和铁等矿物质以及植物油，而胆固醇的含量很低，对恢复体能有特殊的功效。绝对是熬夜必备之选啊。

熬夜时，大脑需氧量会增大，最好隔一个小时到走廊做一些简单易行的肌肉放松动作，一方面舒缓筋骨，预防颈椎病之类的；另一方面，可以多呼吸一些新鲜空气，提神又减压。

熬夜后
其实，熬夜时候因为要忙着码代码，精神一直紧绷着，倒是并不难受。反倒是熬夜之后，才是真正痛苦的时候，精神萎靡、头疼欲裂都是常事儿。这个确实没什么好办法，只能说按之前技巧来做，痛苦会少一些。 

熬完夜直接补觉到中午，我个人觉得这是最好的恢复方式。因为千理由万理由，熬夜最让人难受的还是睡眠时间不够。

如果没这个条件，那中午也至少要睡一个小时。常言道，“午睡一小时抵过晚上睡三小时”。

大体就这些了，大家有些好的建议也不妨提出来。要想熬夜精神好，就得有技巧啊。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date>2011-11-10 05:40:02</wp:post_date>
		<wp:post_date_gmt>2011-11-10 05:40:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%a0%81%e5%86%9c%e7%86%ac%e5%a4%9c%e6%8c%87%e5%8d%97</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%8c%87%e5%8d%97"><![CDATA[指南]]></category>
		<category domain="post_tag" nicename="%e7%86%ac%e5%a4%9c"><![CDATA[熬夜]]></category>
		<category domain="post_tag" nicename="%e7%a0%81%e5%86%9c"><![CDATA[码农]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[current postage rate]]></wp:comment_author>
			<wp:comment_author_email>jigglypuff10@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.currentpostagerates.org</wp:comment_author_url>
			<wp:comment_author_IP>208.57.171.86</wp:comment_author_IP>
			<wp:comment_date>2011-11-24 08:35:09</wp:comment_date>
			<wp:comment_date_gmt>2011-11-24 00:35:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[i love your blog, i have it in my rss reader and always like new things coming up from it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>107</wp:comment_id>
			<wp:comment_author><![CDATA[Maria]]></wp:comment_author>
			<wp:comment_author_email>prason89@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://marathonscuba.com</wp:comment_author_url>
			<wp:comment_author_IP>46.251.237.94</wp:comment_author_IP>
			<wp:comment_date>2012-02-13 03:29:12</wp:comment_date>
			<wp:comment_date_gmt>2012-02-12 19:29:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我喜欢，顶一个！]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>02.jpg</title>
		<link></link>
		<pubDate>Wed, 28 Dec 2011 14:14:10 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin-wordpress.stor.sinaapp.com/uploads/2011/12/02.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://jhjguxin-wordpress.stor.sinaapp.com/uploads/2011/12/02.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date>2011-12-28 22:14:10</wp:post_date>
		<wp:post_date_gmt>2011-12-28 14:14:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>02-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://jhjguxin-wordpress.stor.sinaapp.com/uploads/2011/12/02.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
			<wp:meta_value><![CDATA[twentyten]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/12/02.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>02.jpg</title>
		<link></link>
		<pubDate>Wed, 28 Dec 2011 14:15:06 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin-wordpress.stor.sinaapp.com/uploads/2011/12/02.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://jhjguxin-wordpress.stor.sinaapp.com/uploads/2011/12/02.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date>2011-12-28 22:15:06</wp:post_date>
		<wp:post_date_gmt>2011-12-28 14:15:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>02-jpg-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://jhjguxin-wordpress.stor.sinaapp.com/uploads/2011/12/02.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/12/02.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
			<wp:meta_value><![CDATA[twentyten]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>02.jpg</title>
		<link></link>
		<pubDate>Wed, 28 Dec 2011 14:16:55 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin-wordpress.stor.sinaapp.com/uploads/2011/12/02.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://jhjguxin-wordpress.stor.sinaapp.com/uploads/2011/12/02.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date>2011-12-28 22:16:55</wp:post_date>
		<wp:post_date_gmt>2011-12-28 14:16:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>02-jpg-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://jhjguxin-wordpress.stor.sinaapp.com/uploads/2011/12/02.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/12/02.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c6295a96c53e42cd9344717d4f404c00</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>python hashlib module</title>
		<link></link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=409</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>#-*- coding:utf-8 -*-
from hashlib import md5
content = 12
content_str = str(content)
ciphertext = md5(content_str).hexdigest() #加密
print ciphertext 

#from hashlib import md5
#ciphertext_str=raw_input() #写入要解密的密文,如827ccb0eea8a706c4c34a16891f84e7b
#MD5是不可逆的密码加密，可以说除了暴力破解外无法还原，但同样的输入加密出来的结果是一致的，因此要比较输入是否正确，只要比较一下加密后的结果即可，而Python中可以使用hA</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>409</wp:post_id>
		<wp:post_date>2012-04-12 17:46:38</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ruby-on-rails-use-endless-loop-when-server-starts</title>
		<link></link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=569</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>569</wp:post_id>
		<wp:post_date>2012-07-10 23:04:07</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails Active Record Named Scopes</title>
		<link></link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=677</guid>
		<description></description>
		<content:encoded><![CDATA[### Rails Active Record Named Scopes

[Active Record Named Scopes](http://api.rubyonrails.org/classes/ActiveRecord/Scoping.html)

[Instance Public methods](http://api.rubyonrails.org/classes/ActiveRecord/Scoping/ClassMethods.html)

`with_scope(scope = {}, action = :merge, &amp;block)`
`with_scope` lets you apply options to inner block incrementally. It takes a hash and the keys must be `:find` or `:create`. `:find` parameter is Relation while `:create` parameters are an attributes hash.

```ruby
class Article &lt; ActiveRecord::Base def self.create_with_scope with_scope(:find =&gt; where(:blog_id =&gt; 1), :create =&gt; { :blog_id =&gt; 1 }) do
find(1) # =&gt; SELECT * from articles WHERE blog_id = 1 AND id = 1
a = create(1)
a.blog_id # =&gt; 1
end
end
end
```

In nested scopings, all previous parameters are overwritten by the innermost rule, with the exception of where, includes, and joins operations in Relation, which are merged.

joins operations are uniqued so multiple scopes can join in the same table without table aliasing problems. If you need to join multiple tables, but still want one of the tables to be uniqued, use the array of strings format for your joins.

```ruby
class Article &lt; ActiveRecord::Base def self.find_with_scope with_scope(:find =&gt; where(:blog_id =&gt; 1).limit(1), :create =&gt; { :blog_id =&gt; 1 }) do
with_scope(:find =&gt; limit(10)) do
all # =&gt; SELECT * from articles WHERE blog_id = 1 LIMIT 10
end
with_scope(:find =&gt; where(:author_id =&gt; 3)) do
all # =&gt; SELECT * from articles WHERE blog_id = 1 AND author_id = 3 LIMIT 1
end
end
end
end
```

**You can ignore any previous scopings** by using the `with_exclusive_scope` method.

```ruby
class Article &lt; ActiveRecord::Base def self.find_with_exclusive_scope with_scope(:find =&gt; where(:blog_id =&gt; 1).limit(1)) do
with_exclusive_scope(:find =&gt; limit(10)) do
all # =&gt; SELECT * from articles LIMIT 10
end
end
end
end
```

**Note:** the `:find` scope also has effect on update and deletion methods, like update_all and delete_all.

[default_scope](http://api.rubyonrails.org/classes/ActiveRecord/Scoping/Default/ClassMethods.html)

`default_scope(scope = {})`
Use this macro in your model to set a default scope for all operations on the model.

```ruby
class Article &lt; ActiveRecord::Base default_scope where(:published =&gt; true)
end

Article.all # =&gt; SELECT * FROM articles WHERE published = true
```

The `default_scope` is also applied while creating/building a record. It is not applied while updating a record.

```ruby
Article.new.published # =&gt; true
Article.create.published # =&gt; true
```

You can also use `default_scope` with a block, in order to have it lazily evaluated:

```ruby
class Article &lt; ActiveRecord::Base default_scope { where(:published_at =&gt; Time.now - 1.week) }
end
```

(You can also pass any object which responds to call to the `default_scope` macro, and it will be called when building the default scope.)

If you use multiple `default_scope` declarations in your model then they will be merged together:

```ruby
class Article &lt; ActiveRecord::Base default_scope where(:published =&gt; true)
default_scope where(:rating =&gt; 'G')
end

Article.all # =&gt; SELECT * FROM articles WHERE published = true AND rating = 'G'
```

This is also the case with inheritance and module includes where the parent or module defines a `default_scope` and the child or including class defines a second one.

If you need to do more complex things with a default scope, you can alternatively define it as a class method:

```ruby
class Article &lt; ActiveRecord::Base def self.default_scope # Should return a scope, you can call 'super' here etc. end end ``` [activerecord/lib/active_record/scoping/named.rb](http://api.rubyonrails.org/classes/ActiveRecord/Scoping/Named/ClassMethods.html) `scope(name, scope_options = {})` Adds a class method for retrieving and querying objects. A scope represents a narrowing of a database query, such as `where(:color =&gt; :red).select('shirts.*').includes(:washing_instructions)`.

```ruby
class Shirt &lt; ActiveRecord::Base scope :red, where(:color =&gt; 'red')
scope :dry_clean_only, joins(:washing_instructions).where('washing_instructions.dry_clean_only = ?', true)
end
```

The above calls to scope define class methods `Shirt.red` and `Shirt.dry_clean_only`. `Shirt.red`, in effect, represents the query `Shirt.where(:color =&gt; 'red')`.

Note that this is simply ‘syntactic sugar’ for defining an actual class method:

```ruby
class Shirt &lt; ActiveRecord::Base def self.red where(:color =&gt; 'red')
end
end
```

Unlike `Shirt.find(...)`, however, the object returned by `Shirt.red` is not an Array; it resembles the association object constructed by a has_many declaration. For instance, you can invoke `Shirt.red.first`, `Shirt.red.count`, `Shirt.red.where(:size =&gt; 'small')`. Also, just as with the association objects, named scopes act like an Array, implementing Enumerable; `Shirt.red.each(&amp;block)`, `Shirt.red.first`, and `Shirt.red.inject(memo, &amp;block)` all behave as if `Shirt.red` really was an Array.

These named scopes are composable. For instance, `Shirt.red.dry_clean_only` will produce all shirts that are both red and dry clean only. Nested finds and calculations also work with these compositions: `Shirt.red.dry_clean_only.count` returns the number of garments for which these criteria obtain. Similarly with `Shirt.red.dry_clean_only.average(:thread_count)`.

All scopes are available as class methods on the `ActiveRecord::Base` descendant upon which the scopes were defined. But they are also available to has_many associations. If,

```ruby
class Person &lt; ActiveRecord::Base
has_many :shirts
end
```

then `elton.shirts.red.dry_clean_only` will return all of Elton’s red, dry clean only shirts.

Named scopes can also be procedural:

```ruby
class Shirt &lt; ActiveRecord::Base scope :colored, lambda { |color| where(:color =&gt; color) }
end
```

In this example, `Shirt.colored('puce')` finds all puce shirts.

On Ruby 1.9 you can use the ‘stabby lambda’ syntax:

```ruby
scope :colored, -&gt;(color) { where(:color =&gt; color) }
```

Note that scopes defined with scope will be evaluated when they are defined, rather than when they are used. For example, the following would be incorrect:

```ruby
class Post &lt; ActiveRecord::Base scope :recent, where('published_at &gt;= ?', Time.current - 1.week)
end
```

**The example above would be ‘frozen’ to the `Time.current` value when the Post class was defined**, and so the resultant SQL query would always be the same. The correct way to do this would be via a lambda, which will re-evaluate the scope each time it is called:

```ruby
class Post &lt; ActiveRecord::Base scope :recent, lambda { where('published_at &gt;= ?', Time.current - 1.week) }
end
```

Named scopes can also have extensions, just as with has_many declarations:

```ruby
class Shirt &lt; ActiveRecord::Base scope :red, where(:color =&gt; 'red') do
def dom_id
'red_shirts'
end
end
end
```

Scopes can also be used while creating/building a record.

```ruby
class Article &lt; ActiveRecord::Base scope :published, where(:published =&gt; true)
end

Article.published.new.published # =&gt; true
Article.published.create.published # =&gt; true
```

Class methods on your model are automatically available on scopes. Assuming the following setup:

```ruby
class Article &lt; ActiveRecord::Base scope :published, where(:published =&gt; true)
scope :featured, where(:featured =&gt; true)

def self.latest_article
order('published_at desc').first
end

def self.titles
map(&amp;:title)
end

end
```

We are able to call the methods like this:

```ruby
Article.published.featured.latest_article
Article.featured.titles
```

`scoped(options = nil)`
Returns an anonymous scope.

```ruby
posts = Post.scoped
posts.size # Fires "select count(*) from posts" and returns the count
posts.each {|p| puts p.name } # Fires "select * from posts" and loads post objects

fruits = Fruit.scoped
fruits = fruits.where(:color =&gt; 'red') if options[:red_only]
fruits = fruits.limit(10) if limited?
```

Anonymous scopes tend to be useful when procedurally generating complex queries, where passing intermediate values (scopes) around as first-class objects is convenient.

**You can define a scope that applies to all finders using `ActiveRecord::Base.default_scope`**.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>677</wp:post_id>
		<wp:post_date>2012-10-06 18:52:25</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails Active Record Named Scopes</title>
		<link></link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=678</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Rails Active Record Named Scopes</h3>

<p>&#91;Active Record Named Scopes&#93;(http://api.rubyonrails.org/classes/ActiveRecord/Scoping.html)</p>

<p>&#91;Instance Public methods&#93;(http://api.rubyonrails.org/classes/ActiveRecord/Scoping/ClassMethods.html)</p>

<p>&#96;with_scope(scope = {}, action = :merge, &amp;block)&#96;<br />
&#96;with_scope&#96; lets you apply options to inner block incrementally. It takes a hash and the keys must be &#96;:find&#96; or &#96;:create&#96;. &#96;:find&#96; parameter is Relation while &#96;:create&#96; parameters are an attributes hash.</p>

<p>&#96;<code></code>ruby<br />
class Article &lt; ActiveRecord::Base<br />
def self.create&#95;with&#95;scope<br />
with&#95;scope(:find => where(:blog&#95;id => 1), :create => { :blog_id => 1 }) do<br />
find(1) # => SELECT * from articles WHERE blog_id = 1 AND id = 1<br />
a = create(1)<br />
a.blog_id # => 1<br />
end<br />
end<br />
end<br />
&#96;<code></code></p>

<p>In nested scopings, all previous parameters are overwritten by the innermost rule, with the exception of where, includes, and joins operations in Relation, which are merged.</p>

<p>joins operations are uniqued so multiple scopes can join in the same table without table aliasing problems. If you need to join multiple tables, but still want one of the tables to be uniqued, use the array of strings format for your joins.</p>

<p>&#96;<code></code>ruby<br />
class Article &lt; ActiveRecord::Base<br />
def self.find&#95;with&#95;scope<br />
with&#95;scope(:find => where(:blog&#95;id => 1).limit(1), :create => { :blog_id => 1 }) do<br />
with_scope(:find => limit(10)) do<br />
all # => SELECT * from articles WHERE blog_id = 1 LIMIT 10<br />
end<br />
with&#95;scope(:find => where(:author&#95;id => 3)) do<br />
all # => SELECT * from articles WHERE blog&#95;id = 1 AND author&#95;id = 3 LIMIT 1<br />
end<br />
end<br />
end<br />
end<br />
&#96;<code></code></p>

<p><strong>You can ignore any previous scopings</strong> by using the &#96;with&#95;exclusive&#95;scope&#96; method.</p>

<p>&#96;<code></code>ruby<br />
class Article &lt; ActiveRecord::Base<br />
def self.find&#95;with&#95;exclusive_scope<br />
with&#95;scope(:find => where(:blog&#95;id => 1).limit(1)) do<br />
with&#95;exclusive&#95;scope(:find => limit(10)) do<br />
all # => SELECT * from articles LIMIT 10<br />
end<br />
end<br />
end<br />
end<br />
&#96;<code></code></p>

<p>&#42;&#42;Note:&#42;&#42; the &#96;:find&#96; scope also has effect on update and deletion methods, like update&#95;all and delete&#95;all.</p>

<p>&#91;default_scope&#93;(http://api.rubyonrails.org/classes/ActiveRecord/Scoping/Default/ClassMethods.html)</p>

<p>&#96;default_scope(scope = {})&#96;<br />
Use this macro in your model to set a default scope for all operations on the model.</p>

<p>&#96;<code></code>ruby<br />
class Article &lt; ActiveRecord::Base<br />
default_scope where(:published => true)<br />
end</p>

<p>Article.all # => SELECT * FROM articles WHERE published = true<br />
&#96;<code></code></p>

<p>The &#96;default_scope&#96; is also applied while creating/building a record. It is not applied while updating a record.</p>

<p>&#96;<code></code>ruby<br />
Article.new.published # => true<br />
Article.create.published # => true<br />
&#96;<code></code></p>

<p>You can also use &#96;default_scope&#96; with a block, in order to have it lazily evaluated:</p>

<p>&#96;<code></code>ruby<br />
class Article &lt; ActiveRecord::Base<br />
default&#95;scope { where(:published&#95;at => Time.now - 1.week) }<br />
end<br />
&#96;<code></code></p>

<p>(You can also pass any object which responds to call to the &#96;default_scope&#96; macro, and it will be called when building the default scope.)</p>

<p>If you use multiple &#96;default_scope&#96; declarations in your model then they will be merged together:</p>

<p>&#96;<code></code>ruby<br />
class Article &lt; ActiveRecord::Base<br />
default_scope where(:published => true)<br />
default_scope where(:rating => 'G')<br />
end</p>

<p>Article.all # => SELECT * FROM articles WHERE published = true AND rating = 'G'<br />
&#96;<code></code></p>

<p>This is also the case with inheritance and module includes where the parent or module defines a &#96;default_scope&#96; and the child or including class defines a second one.</p>

<p>If you need to do more complex things with a default scope, you can alternatively define it as a class method:</p>

<p>&#96;<code></code>ruby<br />
class Article &lt; ActiveRecord::Base<br />
def self.default_scope</p>

<h1>Should return a scope, you can call 'super' here etc.</h1>

<p>end<br />
end<br />
&#96;<code></code></p>

<p>&#91;activerecord/lib/active_record/scoping/named.rb&#93;(http://api.rubyonrails.org/classes/ActiveRecord/Scoping/Named/ClassMethods.html)</p>

<p>&#96;scope(name, scope_options = {})&#96;<br />
Adds a class method for retrieving and querying objects. A scope represents a narrowing of a database query, such as &#96;where(:color => :red).select('shirts.*').includes(:washing_instructions)&#96;.</p>

<p>&#96;<code></code>ruby<br />
class Shirt &lt; ActiveRecord::Base<br />
scope :red, where(:color => 'red')<br />
scope :dry&#95;clean&#95;only, joins(:washing&#95;instructions).where('washing&#95;instructions.dry&#95;clean&#95;only = ?', true)<br />
end<br />
&#96;<code></code></p>

<p>The above calls to scope define class methods &#96;Shirt.red&#96; and &#96;Shirt.dry&#95;clean&#95;only&#96;. &#96;Shirt.red&#96;, in effect, represents the query &#96;Shirt.where(:color => 'red')&#96;.</p>

<p>Note that this is simply ‘syntactic sugar’ for defining an actual class method:</p>

<p>&#96;<code></code>ruby<br />
class Shirt &lt; ActiveRecord::Base<br />
def self.red<br />
where(:color => 'red')<br />
end<br />
end<br />
&#96;<code></code></p>

<p>Unlike &#96;Shirt.find(...)&#96;, however, the object returned by &#96;Shirt.red&#96; is not an Array; it resembles the association object constructed by a has_many declaration. For instance, you can invoke &#96;Shirt.red.first&#96;, &#96;Shirt.red.count&#96;, &#96;Shirt.red.where(:size => 'small')&#96;. Also, just as with the association objects, named scopes act like an Array, implementing Enumerable; &#96;Shirt.red.each(&amp;block)&#96;, &#96;Shirt.red.first&#96;, and &#96;Shirt.red.inject(memo, &amp;block)&#96; all behave as if &#96;Shirt.red&#96; really was an Array.</p>

<p>These named scopes are composable. For instance, &#96;Shirt.red.dry&#95;clean&#95;only&#96; will produce all shirts that are both red and dry clean only. Nested finds and calculations also work with these compositions: &#96;Shirt.red.dry&#95;clean&#95;only.count&#96; returns the number of garments for which these criteria obtain. Similarly with &#96;Shirt.red.dry&#95;clean&#95;only.average(:thread_count)&#96;.</p>

<p>All scopes are available as class methods on the &#96;ActiveRecord::Base&#96; descendant upon which the scopes were defined. But they are also available to has_many associations. If,</p>

<p>&#96;<code></code>ruby<br />
class Person &lt; ActiveRecord::Base<br />
has_many :shirts<br />
end<br />
&#96;<code></code></p>

<p>then &#96;elton.shirts.red.dry&#95;clean&#95;only&#96; will return all of Elton’s red, dry clean only shirts.</p>

<p>Named scopes can also be procedural:</p>

<p>&#96;<code></code>ruby<br />
class Shirt &lt; ActiveRecord::Base<br />
scope :colored, lambda { |color| where(:color => color) }<br />
end<br />
&#96;<code></code></p>

<p>In this example, &#96;Shirt.colored('puce')&#96; finds all puce shirts.</p>

<p>On Ruby 1.9 you can use the ‘stabby lambda’ syntax:</p>

<p>&#96;<code></code>ruby<br />
scope :colored, ->(color) { where(:color => color) }<br />
&#96;<code></code></p>

<p>Note that scopes defined with scope will be evaluated when they are defined, rather than when they are used. For example, the following would be incorrect:</p>

<p>&#96;<code></code>ruby<br />
class Post &lt; ActiveRecord::Base<br />
scope :recent, where('published_at >= ?', Time.current - 1.week)<br />
end<br />
&#96;<code></code></p>

<p><strong>The example above would be ‘frozen’ to the &#96;Time.current&#96; value when the Post class was defined</strong>, and so the resultant SQL query would always be the same. The correct way to do this would be via a lambda, which will re-evaluate the scope each time it is called:</p>

<p>&#96;<code></code>ruby<br />
class Post &lt; ActiveRecord::Base<br />
scope :recent, lambda { where('published_at >= ?', Time.current - 1.week) }<br />
end<br />
&#96;<code></code></p>

<p>Named scopes can also have extensions, just as with has_many declarations:</p>

<p>&#96;<code></code>ruby<br />
class Shirt &lt; ActiveRecord::Base<br />
scope :red, where(:color => 'red') do<br />
def dom_id<br />
'red_shirts'<br />
end<br />
end<br />
end<br />
&#96;<code></code></p>

<p>Scopes can also be used while creating/building a record.</p>

<p>&#96;<code></code>ruby<br />
class Article &lt; ActiveRecord::Base<br />
scope :published, where(:published => true)<br />
end</p>

<p>Article.published.new.published # => true<br />
Article.published.create.published # => true<br />
&#96;<code></code></p>

<p>Class methods on your model are automatically available on scopes. Assuming the following setup:</p>

<p>&#96;<code></code>ruby<br />
class Article &lt; ActiveRecord::Base<br />
scope :published, where(:published => true)<br />
scope :featured, where(:featured => true)</p>

<p>def self.latest_article<br />
order('published_at desc').first<br />
end</p>

<p>def self.titles<br />
map(&amp;:title)<br />
end</p>

<p>end<br />
&#96;<code></code></p>

<p>We are able to call the methods like this:</p>

<p>&#96;<code></code>ruby<br />
Article.published.featured.latest_article<br />
Article.featured.titles<br />
&#96;<code></code></p>

<p>&#96;scoped(options = nil)&#96;<br />
Returns an anonymous scope.</p>

<p>&#96;<code></code>ruby<br />
posts = Post.scoped<br />
posts.size # Fires "select count(*) from posts" and returns the count<br />
posts.each {|p| puts p.name } # Fires "select * from posts" and loads post objects</p>

<p>fruits = Fruit.scoped<br />
fruits = fruits.where(:color => 'red') if options[:red_only]<br />
fruits = fruits.limit(10) if limited?<br />
&#96;<code></code></p>

<p>Anonymous scopes tend to be useful when procedurally generating complex queries, where passing intermediate values (scopes) around as first-class objects is convenient.</p>

<p><strong>You can define a scope that applies to all finders using &#96;ActiveRecord::Base.default_scope&#96;</strong>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>678</wp:post_id>
		<wp:post_date>2012-10-06 18:55:00</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="scopes"><![CDATA[Scopes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link></link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=742</guid>
		<description></description>
		<content:encoded><![CDATA[<pre>## ORM缓存引言

从10年前的2003年开始，在Web应用领域，ORM(对象-关系映射)框架就开始逐渐普及，并且流行开来，其中最广为人知的就是Java的开源ORM框架Hibernate，后来Hibernate也成为了EJB3的实现框架；2005年以后，ORM开始普及到其他编程语言领域，其中最有名气的是Ruby on rails框架的ORM － ActiveRecord。如今各种开源框架的ORM，乃至ODM(对象-文档关系映射，用在访问NoSQLDB)层出不穷，功能都十分强大，也很普及。

然而围绕ORM的性能问题，也一直有很多批评的声音。其实ORM的架构对插入缓存技术是非常容易的，我做的很多项目和产品，但凡使用ORM，缓存都是标配，性能都非常好。而且我发现业界使用ORM的案例都忽视了缓存的运用，或者说没有意识到ORM缓存可以带来巨大的性能提升。

## ORM缓存应用案例

我们去年有一个老产品重写的项目，这个产品有超过10年历史了，数据库的数据量很大，多个表都是上千万条记录，最大的表记录达到了9000万条，Web访问的请求数每天有300万左右。

老产品采用了传统的解决性能问题的方案：Web层采用了动态页面静态化技术，超过一定时间的文章生成静态HTML文件；对数据库进行分库分表，按年拆表。动态页面静态化和分库分表是应对大访问量和大数据量的常规手段，本身也有效。但它的缺点也很多，比方说增加了代码复杂度和维护难度，跨库运算的困难等等，这个产品的代码维护历来非常困难，导致bug很多。

进行产品重写的时候，我们放弃了动态页面静态化，采用了纯动态网页；放弃了分库分表，直接操作千万级，乃至近亿条记录的大表进行SQL查询；也没有采取读写分离技术，全部查询都是在单台主数据库上进行；数据库访问全部使用ActiveRecord，进行了大量的ORM缓存。上线以后的效果非常好：单台MySQL数据库服务器CPU的IO Wait低于5%；用单台1U服务器2颗4核至强CPU已经可以轻松支持每天350万动态请求量；最重要的是，插入缓存并不需要代码增加多少复杂度，可维护性非常好。

总之，采用ORM缓存是Web应用提升性能一种有效的思路，这种思路和传统的提升性能的解决方案有很大的不同，但它在很多应用场景(包括高度动态化的SNS类型应用)非常有效，而且不会显著增加代码复杂度，所以这也是我自己一直偏爱的方式。因此我一直很想写篇文章，结合示例代码介绍ORM缓存的编程技巧。

今年春节前后，我开发自己的个人网站项目，有意识的大量使用了ORM缓存技巧。对一个没多少访问量的个人站点来说，有些过度设计了，但我也想借这个机会把常用的ORM缓存设计模式写成示例代码，提供给大家参考。我的个人网站源代码是开源的，托管在github上：[robbin_site](https://github.com/robbin/robbin_site)

## ORM缓存的基本理念

我在2007年的时候写过一篇文章，分析ORM缓存的理念：[ORM对象缓存探讨](http://robbinfan.com/blog/3/orm-cache) ，所以这篇文章不展开详谈了，总结来说，ORM缓存的基本理念是：

* 以减少数据库服务器磁盘IO为最终目的，而不是减少发送到数据库的SQL条数。实际上使用ORM，会显著增加SQL条数，有时候会成倍增加SQL。
* 数据库schema设计的取向是尽量设计 _细颗粒度_ 的表，表和表之间用外键关联，颗粒度越细，缓存对象的单位越小，缓存的应用场景越广泛
* 尽量避免多表关联查询，尽量拆成多个表单独的主键查询，尽量多制造 `n + 1` 条查询，不要害怕“臭名昭著”的 `n + 1` 问题，实际上 `n + 1` 才能有效利用ORM缓存

## 利用表关联实现透明的对象缓存

在设计数据库的schema的时候，设计多个细颗粒度的表，用外键关联起来。当通过ORM访问关联对象的时候，ORM框架会将关联对象的访问转化成用主键查询关联表，发送 `n + 1`条SQL。而基于主键的查询可以直接利用对象缓存。

我们自己开发了一个基于ActiveRecord封装的对象缓存框架：[second_level_cache](https://github.com/csdn-dev/second_level_cache) ，从这个ruby插件的名称就可以看出，实现借鉴了Hibernate的二级缓存实现。这个对象缓存的配置和使用，可以看我写的[ActiveRecord对象缓存配置](http://robbinfan.com/blog/33/activerecord-object-cache) 。

下面用一个实际例子来演示一下对象缓存起到的作用：访问我个人站点的首页。 这个页面的数据需要读取三张表：blogs表获取文章信息，blog_contents表获取文章内容，accounts表获取作者信息。三张表的model定义片段如下，完整代码请看[models](https://github.com/robbin/robbin_site/tree/master/models) ：

	class Account &lt; ActiveRecord::Base
	  acts_as_cached
	  has_many :blogs
	end

	class Blog &lt; ActiveRecord::Base
	  acts_as_cached
	  belongs_to :blog_content, :dependent =&gt; :destroy 
	  belongs_to :account, :counter_cache =&gt; true
	end

	class BlogContent &lt; ActiveRecord::Base
	  acts_as_cached
	end

传统的做法是发送一条三表关联的查询语句，类似这样的：

	SELECT blogs.*, blog_contents.content, account.name 
		FROM blogs 
		LEFT JOIN blog_contents ON blogs.blog_content_id = blog_contents.id 
		LEFT JOIN accounts ON blogs.account_id = account.id

往往单条SQL语句就搞定了，但是复杂SQL的带来的表扫描范围可能比较大，造成的数据库服务器磁盘IO会高很多，数据库实际IO负载往往无法得到有效缓解。

我的做法如下，完整代码请看[home.rb](https://github.com/robbin/robbin_site/blob/master/app/controllers/home.rb) ：

	@blogs = Blog.order(&#039;id DESC&#039;).page(params[:page])

这是一条分页查询，实际发送的SQL如下：

	SELECT * FROM blogs ORDER BY id DESC LIMIT 20

转成了单表查询，磁盘IO会小很多。至于文章内容，则是通过`blog.content`的对象访问获得的，由于首页抓取20篇文章，所以实际上会多出来20条主键查询SQL访问blog_contents表。就像下面这样：

	DEBUG -  BlogContent Load (0.3ms)  SELECT `blog_contents`.* FROM `blog_contents` WHERE `blog_contents`.`id` = 29 LIMIT 1
	DEBUG -  BlogContent Load (0.2ms)  SELECT `blog_contents`.* FROM `blog_contents` WHERE `blog_contents`.`id` = 28 LIMIT 1
	DEBUG -  BlogContent Load (1.3ms)  SELECT `blog_contents`.* FROM `blog_contents` WHERE `blog_contents`.`id` = 27 LIMIT 1
	......
	DEBUG -  BlogContent Load (0.9ms)  SELECT `blog_contents`.* FROM `blog_contents` WHERE `blog_contents`.`id` = 10 LIMIT 1

但是主键查询SQL不会造成表的扫描，而且往往已经被数据库buffer缓存，所以基本不会发生数据库服务器的磁盘IO，因而总体的数据库IO负载会远远小于前者的多表联合查询。特别是当使用对象缓存之后，会缓存所有主键查询语句，这20条SQL语句往往并不会全部发生，特别是热点数据，缓存命中率很高：

	DEBUG -  Cache read: robbin/blog/29/1
	DEBUG -  Cache read: robbin/account/1/0
	DEBUG -  Cache read: robbin/blogcontent/29/0
	DEBUG -  Cache read: robbin/account/1/0
	DEBUG -  Cache read: robbin/blog/28/1
	......
	DEBUG -  Cache read: robbin/blogcontent/11/0
	DEBUG -  Cache read: robbin/account/1/0
	DEBUG -  Cache read: robbin/blog/10/1
	DEBUG -  Cache read: robbin/blogcontent/10/0
	DEBUG -  Cache read: robbin/account/1/0

拆分n+1条查询的方式，看起来似乎非常违反大家的直觉，但实际上这是真理，我实践经验证明：数据库服务器的瓶颈往往是磁盘IO，而不是SQL并发数量。因此 _拆分n+1条查询本质上是以增加n条SQL语句为代价，简化复杂SQL，换取数据库服务器磁盘IO的降低_  当然这样做以后，对于ORM来说，有额外的好处，就是可以高效的使用缓存了。

## 按照column拆表实现细粒度对象缓存

数据库的瓶颈往往在磁盘IO上，所以应该尽量避免对大表的扫描。传统的拆表是按照row去拆分，保持表的体积不会过大，但是缺点是造成应用代码复杂度很高；使用ORM缓存的办法，则是按照column进行拆表，原则一般是：

* 将大字段拆分出来，放在一个单独的表里面，表只有主键和大字段，外键放在主表当中
* 将不参与where条件和统计查询的字段拆分出来，放在独立的表中，外键放在主表当中

_按照column拆表本质上是一个去关系化的过程。主表只保留参与关系运算的字段，将非关系型的字段剥离到关联表当中，关联表仅允许主键查询，以Key-Value DB的方式来访问。因此这种缓存设计模式本质上是一种SQLDB和NoSQLDB的混合架构设计_

下面看一个实际的例子：文章的内容content字段是一个大字段，该字段不能放在blogs表中，否则会造成blogs表过大，表扫描造成较多的磁盘IO。我实际做法是创建blog_contents表，保存content字段，schema简化定义如下：

	CREATE TABLE `blogs` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `title` varchar(255) NOT NULL,
	  `blog_content_id` int(11) NOT NULL,
	  `content_updated_at` datetime DEFAULT NULL,
	  PRIMARY KEY (`id`),
	);

	CREATE TABLE `blog_contents` (
	  `id` int(11) NOT NULL AUTO_INCREMENT,
	  `content` mediumtext NOT NULL,
	  PRIMARY KEY (`id`)
	);

blog_contents表只有content大字段，其外键保存到主表blogs的blog_content_id字段里面。

model定义和相关的封装如下：

	class Blog &lt; ActiveRecord::Base
	  acts_as_cached
	  delegate :content, :to =&gt; :blog_content, :allow_nil =&gt; true

	  def content=(value)
	    self.blog_content ||= BlogContent.new
	    self.blog_content.content = value
	    self.content_updated_at = Time.now
	  end
	end

	class BlogContent &lt; ActiveRecord::Base
	  acts_as_cached
	  validates :content, :presence =&gt; true
	end    

在Blog类上定义了虚拟属性content，当访问`blog.content`的时候，实际上会发生一条主键查询的SQL语句，获取`blog_content.content`内容。由于BlogContent上面定义了对象缓存`acts_as_cached`，只要被访问过一次，content内容就会被缓存到memcached里面。

这种缓存技术实际会非常有效，因为： _只要缓存足够大，所有文章内容可以全部被加载到缓存当中，无论文章内容表有多么大，你都不需要再访问数据库了_  更进一步的是： _这张大表你永远都只需要通过主键进行访问，绝无可能出现表扫描的状况_  为何当数据量大到9000万条记录以后，我们的系统仍然能够保持良好的性能，秘密就在于此。

还有一点非常重要： _使用以上两种对象缓存的设计模式，你除了需要添加一条缓存声明语句acts_as_cached以外，不需要显式编写一行代码_  有效利用缓存的代价如此之低，何乐而不为呢？

以上两种缓存设计模式都不需要显式编写缓存代码，以下的缓存设计模式则需要编写少量的缓存代码，不过代码的增加量非常少。

## 写一致性缓存

写一致性缓存，叫做write-through cache，是一个CPU Cache借鉴过来的概念，意思是说，当数据库记录被修改以后，同时更新缓存，不必进行额外的缓存过期处理操作。但在应用系统中，我们需要一点技巧来实现写一致性缓存。来看一个例子：

我的网站文章原文是markdown格式的，当页面显示的时候，需要转换成html的页面，这个转换过程本身是非常消耗CPU的，我使用的是Github的markdown的库。Github为了提高性能，用C写了转换库，但如果是非常大的文章，仍然是一个耗时的过程，Ruby应用服务器的负载就会比较高。

我的解决办法是缓存markdown原文转换好的html页面的内容，这样当再次访问该页面的时候，就不必再次转换了，直接从缓存当中取出已经缓存好的页面内容即可，极大提升了系统性能。我的网站文章最终页的代码执行时间开销往往小于10ms，就是这个原因。代码如下：

	def md_content  # cached markdown format blog content
	  APP_CACHE.fetch(content_cache_key) { GitHub::Markdown.to_html(content, :gfm) }
	end

这里存在一个如何进行缓存过期的问题，当文章内容被修改以后，应该更新缓存内容，让老的缓存过期，否则就会出现数据不一致的现象。进行缓存过期处理是比较麻烦的，我们可以利用一个技巧来实现自动缓存过期：

	def content_cache_key
	  &quot;#{CACHE_PREFIX}/blog_content/#{self.id}/#{content_updated_at.to_i}&quot;
	end

当构造缓存对象的key的时候，我用文章内容被更新的时间来构造key值，这个文章内容更新时间用的是blogs表的content_updated_at字段，当文章被更新的时候，blogs表会进行update，更新该字段。因此每当文章内容被更新，缓存的页面内容的key就会改变，应用程序下次访问文章页面的时候，缓存就会失效，于是重新调用`GitHub::Markdown.to_html(content, :gfm)`生成新的页面内容。 而老的页面缓存内容再也不会被应用程序存取，根据memcached的LRU算法，当缓存填满之后，将被优先剔除。

除了文章内容缓存之外，文章的评论内容转换成html以后也使用了这种缓存设计模式。具体可以看相应的源代码：[blog_comment.rb](https://github.com/robbin/robbin_site/blob/master/models/blog_comment.rb)

## 片段缓存和过期处理

Web应用当中有大量的并非实时更新的数据，这些数据都可以使用缓存，避免每次存取的时候都进行数据库查询和运算。这种片段缓存的应用场景很多，例如：

* 展示网站的Tag分类统计(只要没有更新文章分类，或者发布新文章，缓存一直有效)
* 输出网站RSS(只要没有发新文章，缓存一直有效)
* 网站右侧栏(如果没有新的评论或者发布新文章，则在一段时间例如一天内基本不需要更新)

以上应用场景都可以使用缓存，代码示例：

	def self.cached_tag_cloud
	  APP_CACHE.fetch(&quot;#{CACHE_PREFIX}/blog_tags/tag_cloud&quot;) do
	    self.tag_counts.sort_by(&amp;:count).reverse
	  end
	end

对全站文章的Tag云进行查询，对查询结果进行缓存	

	&lt;% cache(&quot;#{CACHE_PREFIX}/layout/right&quot;, :expires_in =&gt; 1.day) do %&gt;

	&lt;div&gt;
	  &lt;% Blog.cached_tag_cloud.select {|t| t.count &gt; 2}.each do |tag| %&gt;
	  &lt;%= link_to &quot;#{tag.name}&lt;span&gt;#{tag.count}&lt;/span&gt;&quot;.html_safe, url(:blog, :tag, :name =&gt; tag.name) %&gt;
	  &lt;% end %&gt;
	&lt;/div&gt;
	......
	&lt;% end %&gt;

对全站右侧栏页面进行缓存，过期时间是1天。

缓存的过期处理往往是比较麻烦的事情，但在ORM框架当中，我们可以利用model对象的回调，很容易实现缓存过期处理。我们的缓存都是和文章，以及评论相关的，所以可以直接注册Blog类和BlogComment类的回调接口，声明当对象被保存或者删除的时候调用删除方法：

	class Blog &lt; ActiveRecord::Base
	  acts_as_cached
	  after_save :clean_cache
	  before_destroy :clean_cache
	  def clean_cache
	    APP_CACHE.delete(&quot;#{CACHE_PREFIX}/blog_tags/tag_cloud&quot;)   # clean tag_cloud
	    APP_CACHE.delete(&quot;#{CACHE_PREFIX}/rss/all&quot;)               # clean rss cache
	    APP_CACHE.delete(&quot;#{CACHE_PREFIX}/layout/right&quot;)          # clean layout right column cache in _right.erb
	  end
	end

	class BlogComment &lt; ActiveRecord::Base
	  acts_as_cached
	  after_save :clean_cache
	  before_destroy :clean_cache
	  def clean_cache
	    APP_CACHE.delete(&quot;#{CACHE_PREFIX}/layout/right&quot;)     # clean layout right column cache in _right.erb
	  end
	end  

在Blog对象的`after_save`和`before_destroy`上注册`clean_cache`方法，当文章被修改或者删除的时候，删除以上缓存内容。总之，可以利用ORM对象的回调接口进行缓存过期处理，而不需要到处写缓存清理代码。

## 对象写入缓存

我们通常说到缓存，总是认为缓存是提升应用读取性能的，其实缓存也可以有效的提升应用的写入性能。我们看一个常见的应用场景：记录文章点击次数这个功能。

文章点击次数需要每次访问文章页面的时候，都要更新文章的点击次数字段view_count，然后文章必须实时显示文章的点击次数，因此常见的读缓存模式完全无效了。每次访问都必须更新数据库，当访问量很大以后数据库是吃不消的，因此我们必须同时做到两点：

* 每次文章页面被访问，都要实时更新文章的点击次数，并且显示出来
* 不能每次文章页面被访问，都更新数据库，否则数据库吃不消

对付这种应用场景，我们可以利用对象缓存的不一致，来实现对象写入缓存。原理就是每次页面展示的时候，只更新缓存中的对象，页面显示的时候优先读取缓存，但是不更新数据库，让缓存保持不一致，积累到n次，直接更新一次数据库，但绕过缓存过期操作。具体的做法可以参考[blog.rb](https://github.com/robbin/robbin_site/blob/master/models/blog.rb) ：

    # blog viewer hit counter
	def increment_view_count
	  increment(:view_count)        # add view_count += 1
	  write_second_level_cache      # update cache per hit, but do not touch db
	                                # update db per 10 hits
	  self.class.update_all({:view_count =&gt; view_count}, :id =&gt; id) if view_count % 10 == 0
	end

`increment(:view_count)`增加view_count计数，关键代码是第2行`write_second_level_cache`，更新view_count之后直接写入缓存，但不更新数据库。累计10次点击，再更新一次数据库相应的字段。另外还要注意，如果blog对象不是通过主键查询，而是通过查询语句构造的，要优先读取一次缓存，保证页面点击次数的显示一致性，因此 [_blog.erb](https://github.com/robbin/robbin_site/blob/master/app/views/blog/_blog.erb) 这个页面模版文件开头有这样一段代码：

	&lt;% 
      # read view_count from model cache if model has been cached.
	  view_count = blog.view_count
	  if b = Blog.read_second_level_cache(blog.id)
	    view_count = b.view_count
	  end
	%&gt;

采用对象写入缓存的设计模式，就可以非常容易的实现写入操作的缓存，在这个例子当中，我们仅仅增加了一行缓存写入代码，而这个时间开销大约是1ms，就可以实现文章实时点击计数功能，是不是非常简单和巧妙？实际上我们也可以使用这种设计模式实现很多数据库写入的缓存功能。

常用的ORM缓存设计模式就是以上的几种，本质上都是非常简单的编程技巧，代码的增加量和复杂度也非常低，只需要很少的代码就可以实现，但是在实际应用当中，特别是当数据量很庞大，访问量很高的时候，可以发挥惊人的效果。我们实际的系统当中，缓存命中次数:SQL查询语句，一般都是5:1左右，即每次向数据库查询一条SQL，都会在缓存当中命中5次，数据主要都是从缓存当中得到，而非来自于数据库了。

## 其他缓存的使用技巧

还有一些并非ORM特有的缓存设计模式，但是在Web应用当中也比较常见，简单提及一下：

### 用数据库来实现的缓存

在我这个网站当中，每篇文章都标记了若干tag，而tag关联关系都是保存到数据库里面的，如果每次显示文章，都需要额外查询关联表获取tag，显然会非常消耗数据库。在我使用的`acts-as-taggable-on`插件中，它在blogs表当中添加了一个`cached_tag_list`字段，保存了该文章标记的tag。当文章被修改的时候，会自动相应更新该字段，避免了每次显示文章的时候都需要去查询关联表的开销。

### HTTP客户端缓存

基于资源协议实现的HTTP客户端缓存也是一种非常有效的缓存设计模式，我在2009年写过一篇文章详细的讲解了：[基于资源的HTTP Cache的实现介绍](http://robbinfan.com/blog/13/http-cache-implement) ，所以这里就不再复述了。

### 用缓存实现计数器功能

这种设计模式有点类似于对象写入缓存，利用缓存写入的低开销来实现高性能计数器。举一个例子：用户登录为了避免遭遇密码暴力破解，我限定了每小时每IP只能尝试登录5次，如果超过5次，拒绝该IP再次尝试登录。代码实现很简单，如下：

	post :login, :map =&gt; &#039;/login&#039; do
	  login_tries = APP_CACHE.read(&quot;#{CACHE_PREFIX}/login_counter/#{request.ip}&quot;)
	  halt 403 if login_tries &amp;&amp; login_tries.to_i &gt; 5  # reject ip if login tries is over 5 times
	  @account = Account.new(params[:account])
	  if login_account = Account.authenticate(@account.email, @account.password)
	    session[:account_id] = login_account.id
	    redirect url(:index)
	  else
	    # retry 5 times per one hour
	    APP_CACHE.increment(&quot;#{CACHE_PREFIX}/login_counter/#{request.ip}&quot;, 1, :expires_in =&gt; 1.hour)
	    render &#039;home/login&#039;
	  end
	end

等用户POST提交登录信息之后，先从缓存当中取该IP尝试登录次数，如果大于5次，直接拒绝掉；如果不足5次，而且登录失败，计数加1，显示再次尝试登录页面。

以上相关代码可以从这里获取：[robbin_site](https://github.com/robbin/robbin_site)</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>742</wp:post_id>
		<wp:post_date>2013-03-08 14:38:29</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Simple Django event calendar template tag</title>
		<link></link>
		<pubDate>Mon, 14 Nov 2011 04:56:49 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=56</guid>
		<description></description>
		<content:encoded><![CDATA[Simple Django event calendar template tag

<strong><a href="https://github.com/jhjguxin/blogserver">blogserver</a></strong> / <a href="https://github.com/jhjguxin/blogserver/tree/master/apps">apps</a> / <a href="https://github.com/jhjguxin/blogserver/tree/master/apps/blog">blog</a> / <a href="https://github.com/jhjguxin/blogserver/tree/master/apps/blog/templatetags">templatetags</a> / event_tags.py
<pre class="brush: python; gutter: true"></pre>
<pre>##### Here is the template tag code. It goes in a file named
# &quot;event_tags.py&quot; in a subdirectory of your app called &quot;templatetags&quot;.
#####

from calendar import HTMLCalendar
from django import template
from datetime import *
from itertools import groupby
import pdb
from django.utils.html import conditional_escape as esc
from blogserver.apps.blog.models import Post
register = template.Library()

def do_event_calendar(parser, token):
    &quot;&quot;&quot;
    The template tag&#039;s syntax is {% event_calendar year month event_list %}
    &quot;&quot;&quot;

    try:
        #tag_name, year, month, event_list = token.split_contents()
        tag_name= token.split_contents()
    except ValueError:
        raise template.TemplateSyntaxError, &quot;%r tag requires three arguments&quot; % token.contents.split()[0]
    #return EventCalendarNode(year, month, event_list)
    return EventCalendarNode()

class EventCalendarNode(template.Node):
    &quot;&quot;&quot;
    Process a particular node in the template. Fail silently.
    &quot;&quot;&quot;

    def __init__(self,):
        try:
            lToday = datetime.now()
            #self.year = template.Variable(year)
            #self.month = template.Variable(month)
            self.year = lToday.year
            self.month = lToday.month
            my_events = Post.objects.filter(date_published__year=self.year, date_published__month=self.month)
            #self.event_list = template.Variable(event_list)
            self.event_list = my_events
        except ValueError:
            raise template.TemplateSyntaxError

    def render(self, context):
        try:
            # Get the variables from the context so the method is thread-safe.
            #my_event_list = self.event_list.resolve(context)
            #my_year = self.year.resolve(context)
            #my_month = self.month.resolve(context)
            my_event_list = self.event_list
            my_year = self.year
            #pdb.set_trace()
            my_month = self.month
            cal = EventCalendar(my_event_list)
            return cal.formatmonth(int(my_year), int(my_month))
        except ValueError:
            return         
        except template.VariableDoesNotExist:
            return

class EventCalendar(HTMLCalendar):
    &quot;&quot;&quot;
    Overload Python&#039;s calendar.HTMLCalendar to add the appropriate events to
    each day&#039;s table cell.
    &quot;&quot;&quot;

    def __init__(self, events):
        super(EventCalendar, self).__init__()
        self.events = self.group_by_day(events)

    def formatday(self, day, weekday):
        if day != 0:
            cssclass = self.cssclasses[weekday]
            if date.today() == date(self.year, self.month, day):
                cssclass += &#039; today&#039;
            if day in self.events:
                cssclass += &#039; filled&#039;
                href=&quot;/%d/%02d/%02d/&quot;%(self.year,self.month,day)
                return self.day_cell(cssclass, &#039;&lt;span class=&quot;dayNumber&quot; title=&quot;click to view post&quot;&gt;&lt;a href=%s &gt;%d&lt;/a&gt;&lt;/span&gt;&#039; % (href,day))
            return self.day_cell(cssclass, &#039;&lt;span class=&quot;dayNumberNoEvents&quot;&gt;%d&lt;/span&gt;&#039; % (day))
        return self.day_cell(&#039;noday&#039;, &#039;&amp;nbsp;&#039;)

    def formatmonth(self, year, month):
        self.year, self.month = year, month
        return super(EventCalendar, self).formatmonth(year, month)

    def group_by_day(self, events):
        field = lambda event: event.date_published.day
        return dict(
            [(day, list(items)) for day, items in groupby(events, field)]
        )

    def day_cell(self, cssclass, body):
        return &#039;&lt;td class=&quot;%s&quot;&gt;%s&lt;/td&gt;&#039; % (cssclass, body)

# Register the template tag so it is available to templates
register.tag(&quot;event_calendar&quot;, do_event_calendar)</pre>
<div>

 <strong><a href="https://github.com/jhjguxin/blogserver">blogserver</a></strong>/ views.py
<div id="LC1"># Create your views here.</div>
<div id="LC2">from django.shortcuts import render_to_response</div>
<div id="LC3">import pdb</div>
<div id="LC4">from datetime import *</div>
<div id="LC5">from calendar import monthrange</div>
<div id="LC6">from blogserver.apps.blog.models import Post</div>
<div id="LC7">from django.template import RequestContext</div>
<div id="LC8">from django.utils.html import conditional_escape as esc</div>
<div id="LC9">from django.utils.safestring import mark_safe</div>
<div id="LC10">from itertools import groupby</div>
<div id="LC11">from calendar import HTMLCalendar, monthrange</div>
<div id="LC12">##### Here's code for the view to look up the event objects for to put in</div>
<div id="LC13"># the context for the template. It goes in your app's views.py file (or</div>
<div id="LC14"># wherever you put your views).</div>
<div id="LC15">#####</div>
<div id="LC17">def named_month(month_number):</div>
<div id="LC18">    """</div>
<div id="LC19">Return the name of the month, given the number.</div>
<div id="LC20">"""</div>
<div id="LC21">    return date(1900, month_number, 1).strftime("%B")</div>
<div id="LC23">def this_month(request):</div>
<div id="LC24">    """</div>
<div id="LC25">Show calendar of events this month.</div>
<div id="LC26">"""</div>
<div id="LC27">    today = datetime.now()</div>
<div id="LC28">    return calendar(request, today.year, today.month)</div>
<div id="LC31">def calendar(request, year, month, series_id=None):</div>
<div id="LC32">    """</div>
<div id="LC33">Show calendar of events for a given month of a given year.</div>
<div id="LC34">``series_id``</div>
<div id="LC35">The event series to show. None shows all event series.</div>
<div id="LC37">"""</div>
<div id="LC39">    my_year = int(year)</div>
<div id="LC40">    my_month = int(month)</div>
<div id="LC41">    my_calendar_from_month = datetime(my_year, my_month, 1)</div>
<div id="LC42">    my_calendar_to_month = datetime(my_year, my_month, monthrange(my_year, my_month)[1])</div>
<div id="LC44">    my_events = Post.objects.filter(date_published__year=my_year, date_published__month=my_month)</div>
<div id="LC45">    if series_id:</div>
<div id="LC46">        my_events = my_events.filter(series=series_id)</div>
<div id="LC48">    # Calculate values for the calendar controls. 1-indexed (Jan = 1)</div>
<div id="LC49">    my_previous_year = my_year</div>
<div id="LC50">    my_previous_month = my_month - 1</div>
<div id="LC51">    if my_previous_month == 0:</div>
<div id="LC52">        my_previous_year = my_year - 1</div>
<div id="LC53">        my_previous_month = 12</div>
<div id="LC54">    my_next_year = my_year</div>
<div id="LC55">    my_next_month = my_month + 1</div>
<div id="LC56">    if my_next_month == 13:</div>
<div id="LC57">        my_next_year = my_year + 1</div>
<div id="LC58">        my_next_month = 1</div>
<div id="LC59">    my_year_after_this = my_year + 1</div>
<div id="LC60">    my_year_before_this = my_year - 1</div>
<div id="LC61">    #pdb.set_trace()</div>
<div id="LC62">    return render_to_response("blog/calendar.html", { 'events_list': my_events,</div>
<div id="LC63">                                                        'month': my_month,</div>
<div id="LC64">                                                        'month_name': named_month(my_month),</div>
<div id="LC65">                                                        'year': my_year,</div>
<div id="LC66">                                                        'previous_month': my_previous_month,</div>
<div id="LC67">                                                        'previous_month_name': named_month(my_previous_month),</div>
<div id="LC68">                                                        'previous_year': my_previous_year,</div>
<div id="LC69">                                                        'next_month': my_next_month,</div>
<div id="LC70">                                                        'next_month_name': named_month(my_next_month),</div>
<div id="LC71">                                                        'next_year': my_next_year,</div>
<div id="LC72">                                                        'year_before_this': my_year_before_this,</div>
<div id="LC73">                                                        'year_after_this': my_year_after_this,</div>
<div id="LC74">    }, context_instance=RequestContext(request))</div>
<div id="LC75">def post_calendar(request):</div>
<div id="LC76">  #pdb.set_trace()</div>
<div id="LC77"># return render_to_response("base.html",)</div>
<div id="LC78">  lToday = datetime.now()</div>
<div id="LC79">  return calendar(request, lToday.year, lToday.month)</div>
<div id="LC81">def base_page(request):</div>
<div id="LC82">  #pdb.set_trace()</div>
<div id="LC83">  return render_to_response("base.html",)</div>
<div id="LC84">  #lToday = datetime.now()</div>
<div id="LC85">  #return calendar(request, lToday.year, lToday.month)</div>
<div id="LC86">##### Here's code for the view to look up the event objects for to put in</div>
<div id="LC87"># the context for the template. It goes in your app's views.py file (or</div>
<div id="LC88"># wherever you put your views).</div>
<div id="LC89">#####</div>
</div>
<div> <strong><a href="https://github.com/jhjguxin/blogserver">blogserver</a></strong> / <a href="https://github.com/jhjguxin/blogserver/tree/master/templates">templates</a> / <a href="https://github.com/jhjguxin/blogserver/tree/master/templates/blog">blog</a>/ calendar.html</div>
<div>at end do not forget to setting your url files</div>
<pre>
&lt;style type=&quot;text/css&quot;&gt;
/* Calendar */

#calendar table {
    width: 100%;
}

#calendar table tr th {
    text-align: center;
    font-size: 16px;
    background-color: #316497;
    color: #99ccff;
}

#calendar table tr td {
    width: 10%;
    border: 1px solid #555;
    vertical-align: top;
    height: 20px;
    padding: 2px;
}

#calendar td.noday {
    
}

#calendar td.filled {
    background-color: #99ccff;
}

#calendar td.today {
    border: 4px solid #316497;
}

#calendar .dayNumber {
    font-size: 16px !important;
    font-weight: bold;
}

#calendar a {
    font-size: 10px;
}

}
&lt;/style&gt;
{% load event_tags %}

&lt;div id=&quot;calendar&quot;&gt;
{% event_calendar year month events_list %}
&lt;/div&gt;
</pre>
<div>And I think the better way is bulit the calendar in css or js files and get event from the server</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date>2011-11-14 04:56:49</wp:post_date>
		<wp:post_date_gmt>2011-11-14 04:56:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>simple-django-event-calendar-template-tag</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="calendar"><![CDATA[calendar]]></category>
		<category domain="category" nicename="django"><![CDATA[django]]></category>
		<category domain="post_tag" nicename="tagm"><![CDATA[tagm]]></category>
		<category domain="post_tag" nicename="templates"><![CDATA[templates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>苹果饥饿营销自造尴尬 “黄牛”堵门叫卖iPhone4s</title>
		<link></link>
		<pubDate>Wed, 16 Nov 2011 02:16:25 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=58</guid>
		<description></description>
		<content:encoded><![CDATA[iPhone4s已经在几十个国家和地区上市销售，并于本月11日正式登陆中国香港，但因为iPhone4s在内地上市时间迟迟未定，已经望穿秋水的“果粉”只能继续守候下去。然而想继续通过饥饿营销积累客户的苹果，不得不面对自己制造的“尴尬”。随着昨日大量港版iPhone4s抵京，大批黄牛来到苹果三里屯官方零售店外堵门叫卖。

　　“iPhone4s要吗？港版无锁的！”在苹果三里屯零售店门口，一群手拿着苹果白色包装盒的黄牛，不断地招揽着过往行人，一发现有顾客从苹果店走出来，就立刻围上去。

　　一位刘姓男子透露，他卖的iPhone4s是昨天刚从深圳发到北京的，黑色16G版的现在卖5850元，不讲价。虽然比起4150元的官方定价，这名黄牛一口气加了1700元，但他表示这个价格还是港版上市后降了的，以前澳版的iPhone4s要价都超过6500元。这名黄牛“备货”十分充足，身后的书包里装了近百台iPhone4s。

　　隔着一道通明的玻璃墙，苹果店员自然对门外的黄牛一清二楚，除了在店门口立起一块不大的警示牌提醒消费者黄牛手中的iPhone4s“来源不明”外，苹果对黄牛们似乎无能为力。“iPhone4s的上市时间还没定，所以现在我们还没有相应的预订服务。”三里屯苹果旗舰店的一位负责人坦言，想从苹果官方渠道买到iPhone4s，可能还要等上很长一段时间。

　　面对苹果没货，黄牛堵门的情况，不禁有“果粉”发出疑问，“为什么iPhone4s在国内迟迟不能上市”。对此，苹果中国的负责人解释称，iPhone4s进入国内需要经过多重审核，以取得工信部的入网许可证，所以上市时间迟迟未定。然而苹果这一解释无法服众，一位业内人士表示，工信部的入网许可并不难拿，一般企业提出申请后10个工作日就能通过相应审核，而iPhone4s从发布至今已经1个多月。

　　“苹果之所以迟迟不定iPhone4s在中国内地的上市时间，无非还是想玩饥饿营销，吊起消费者的胃口。”这位业内人士直言，但如此营销造成黄牛堵门，不知苹果有何感想。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date>2011-11-16 02:16:25</wp:post_date>
		<wp:post_date_gmt>2011-11-16 02:16:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%8b%b9%e6%9e%9c%e9%a5%a5%e9%a5%bf%e8%90%a5%e9%94%80%e8%87%aa%e9%80%a0%e5%b0%b4%e5%b0%ac-%e2%80%9c%e9%bb%84%e7%89%9b%e2%80%9d%e5%a0%b5%e9%97%a8%e5%8f%ab%e5%8d%96iphone4s</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="iphone4s"><![CDATA[iPhone4s]]></category>
		<category domain="post_tag" nicename="%e5%86%85%e5%9c%b0"><![CDATA[内地]]></category>
		<category domain="post_tag" nicename="%e6%9e%9c%e7%b2%89"><![CDATA[果粉]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<category domain="post_tag" nicename="%e9%bb%84%e7%89%9b"><![CDATA[黄牛]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>日历js代码</title>
		<link></link>
		<pubDate>Wed, 16 Nov 2011 02:53:10 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=60</guid>
		<description></description>
		<content:encoded><![CDATA[a simple js calendar code:

code1:
<pre>
<Script LANGUAGE="JavaScript">
var months = new Array("一", "二", "三","四", "五", "六", "七", "八", "九","十", "十一", "十二");
var daysInMonth = new Array(31, 28, 31, 30, 31, 30, 31, 31,30, 31, 30, 31);
var days = new Array("日","一", "二", "三","四", "五", "六");
var classTemp;
var today=new getToday();
var year=today.year;
var month=today.month;
var newCal; 

function getDays(month, year) {
if (1 == month) return ((0 == year % 4) && (0 != (year % 100))) ||(0 == year % 400) ? 29 : 28;
else return daysInMonth[month];
}

function getToday() {
this.now = new Date();
this.year = this.now.getFullYear();
this.month = this.now.getMonth();
this.day = this.now.getDate();
}

function Calendar() {
newCal = new Date(year,month,1);
today = new getToday();   
var day = -1;
var startDay = newCal.getDay();
var endDay=getDays(newCal.getMonth(), newCal.getFullYear());
var daily = 0;
if ((today.year == newCal.getFullYear()) &&(today.month == newCal.getMonth()))
{
  day = today.day;
}
var caltable = document.all.caltable.tBodies.calendar;
var intDaysInMonth =getDays(newCal.getMonth(), newCal.getFullYear());

for (var intWeek = 0; intWeek < caltable.rows.length;intWeek++)
  for (var intDay = 0;intDay < caltable.rows[intWeek].cells.length;intDay++)
  {
  var cell = caltable.rows[intWeek].cells[intDay];
  var montemp=(newCal.getMonth()+1)<10?("0"+(newCal.getMonth()+1)):(newCal.getMonth()+1);       
  if ((intDay == startDay) && (0 == daily)){ daily = 1;}
  var daytemp=daily<10?("0"+daily):(daily);
  var d="<"+newCal.getFullYear()+"-"+montemp+"-"+daytemp+">";
  if(day==daily) cell.className="DayNow";
  else if(intDay==6) cell.className = "DaySat";
  else if (intDay==0) cell.className ="DaySun";
  else cell.className="Day";
  if ((daily > 0) && (daily <= intDaysInMonth))
  {
  cell.innerText = daily;
  daily++;
  } else
  {
  cell.className="CalendarTD";
  cell.innerText = "";
  }
}
document.all.year.value=year;
document.all.month.value=month+1;
}

function subMonth()
{
if ((month-1)<0)
{
  month=11;
  year=year-1;
} else
{
  month=month-1;
}
Calendar();
}

function addMonth()
{
if((month+1)>11)
{
  month=0;
  year=year+1;
} else
{
  month=month+1;
}
Calendar();
}

function setDate() 
{
if (document.all.month.value<1||document.all.month.value>12)
{
  alert("月的有效范围在1-12之间!");
  return;
}
year=Math.ceil(document.all.year.value);
month=Math.ceil(document.all.month.value-1);
Calendar();
}
</Script>

<Script>
function buttonOver()
{
var obj = window.event.srcElement;
obj.runtimeStyle.cssText = "background-color:#FFFFFF";
// obj.className="Hover";
}

function buttonOut()
{
var obj = window.event.srcElement;
window.setTimeout(function(){obj.runtimeStyle.cssText = "";},300);
}
</Script>

<Style>
Input {font-family: verdana;font-size: 9pt;text-decoration: none;background-color: #FFFFFF;height: 20px;border: 1px solid #666666;color:#000000;}

.Calendar {font-family: verdana;text-decoration: none;width: 170;background-color: #C0D0E8;font-size: 9pt;border:0px dotted #1C6FA5;}
.CalendarTD {font-family: verdana;font-size: 7pt;color: #000000;background-color:#f6f6f6;height: 20px;width:11%;text-align: center;}

.Title {font-family: verdana;font-size: 11pt;font-weight: normal;height: 24px;text-align: center;color: #333333;text-decoration: none;background-color: #A4B9D7;border-top-width: 1px;border-right-width: 1px;border-bottom-width: 1px;border-left-width: 1px;border-bottom-style:1px;border-top-color: #999999;border-right-color: #999999;border-bottom-color: #999999;border-left-color: #999999;}

.Day {font-family: verdana;font-size: 7pt;color:#243F65;background-color: #E5E9F2;height: 20px;width:11%;text-align: center;}
.DaySat {font-family: verdana;font-size: 7pt;color:#FF0000;text-decoration: none;background-color:#E5E9F2;text-align: center;height: 18px;width: 12%;}
.DaySun {font-family: verdana;font-size: 7pt;color: #FF0000;text-decoration: none;background-color:#E5E9F2;text-align: center;height: 18px;width: 12%;}
.DayNow {font-family: verdana;font-size: 7pt;font-weight: bold;color: #000000;background-color: #FFFFFF;height: 20px;text-align: center;}

.DayTitle {font-family: verdana;font-size: 9pt;color: #000000;background-color: #C0D0E8;height: 20px;width:11%;text-align: center;}
.DaySatTitle {font-family: verdana;font-size: 9pt;color:#FF0000;text-decoration: none;background-color:#C0D0E8;text-align: center;height: 20px;width: 12%;}
.DaySunTitle {font-family: verdana;font-size: 9pt;color: #FF0000;text-decoration: none;background-color: #C0D0E8;text-align: center;height: 20px;width: 12%;}

.DayButton {font-family: Webdings;font-size: 9pt;font-weight: bold;color: #243F65;cursor:hand;text-decoration: none;}

</Style>


<table border="0" cellpadding="0" cellspacing="1" class="Calendar" id="caltable">
<thead>
  <tr align="center" valign="middle"> 
<td colspan="7" class="Title">
  <a href="javaScript:subMonth();" title="上一月" Class="DayButton">3</a> <input name="year" type="text" size="4" maxlength="4" onkeydown="if (event.keyCode==13){setDate()}" onkeyup="this.value=this.value.replace(/[^0-9]/g,'')" onpaste="this.value=this.value.replace(/[^0-9]/g,'')"> 年 <input name="month" type="text" size="1" maxlength="2" onkeydown="if (event.keyCode==13){setDate()}" onkeyup="this.value=this.value.replace(/[^0-9]/g,'')" onpaste="this.value=this.value.replace(/[^0-9]/g,'')"> 月 <a href="JavaScript:addMonth();" title="下一月" Class="DayButton">4</a>
</td>
</tr>
<tr align="center" valign="middle"> 
<Script LANGUAGE="JavaScript"> 
  document.write("<TD class=DaySunTitle id=diary >" + days[0] + "</TD>"); 
  for (var intLoop = 1; intLoop < days.length-1;intLoop++) 
  document.write("<TD class=DayTitle id=diary>" + days[intLoop] + "</TD>"); 
  document.write("<TD class=DaySatTitle id=diary>" + days[intLoop] + "</TD>"); 
</Script>
</TR> 
</thead>
<TBODY border=1 cellspacing="0" cellpadding="0" ID="calendar" ALIGN=CENTER ONCLICK="getDiary()">
<Script LANGUAGE="JavaScript">
for (var intWeeks = 0; intWeeks < 6; intWeeks++)
{
  document.write("<TR style='cursor:hand'>");
  for (var intDays = 0; intDays < days.length;intDays++) document.write("<TD class=CalendarTD onMouseover='buttonOver();' onMouseOut='buttonOut();'></TD>");
  document.write("</TR>");
} 
</Script>
</TBODY>
</TABLE>
<Script LANGUAGE="JavaScript">
Calendar();
</Script>

</pre>

Code2:
<pre>
<Script LANGUAGE="JavaScript">
var months = new Array("一", "二", "三","四", "五", "六", "七", "八", "九","十", "十一", "十二");
var daysInMonth = new Array(31, 28, 31, 30, 31, 30, 31, 31,30, 31, 30, 31);
var days = new Array("日","一", "二", "三","四", "五", "六");
var classTemp;
var today=new getToday();
var year=today.year;
var month=today.month;
var newCal; 

function getDays(month, year) {
if (1 == month) return ((0 == year % 4) && (0 != (year % 100))) ||(0 == year % 400) ? 29 : 28;
else return daysInMonth[month];
}

function getToday() {
this.now = new Date();
this.year = this.now.getFullYear();
this.month = this.now.getMonth();
this.day = this.now.getDate();
}

function Calendar() {
newCal = new Date(year,month,1);
today = new getToday();   
var day = -1;
var startDay = newCal.getDay();
var endDay=getDays(newCal.getMonth(), newCal.getFullYear());
var daily = 0;
if ((today.year == newCal.getFullYear()) &&(today.month == newCal.getMonth()))
{
  day = today.day;
}
var caltable = document.all.caltable.tBodies.calendar;
var intDaysInMonth =getDays(newCal.getMonth(), newCal.getFullYear());

for (var intWeek = 0; intWeek < caltable.rows.length;intWeek++)
  for (var intDay = 0;intDay < caltable.rows[intWeek].cells.length;intDay++)
  {
  var cell = caltable.rows[intWeek].cells[intDay];
  var montemp=(newCal.getMonth()+1)<10?("0"+(newCal.getMonth()+1)):(newCal.getMonth()+1);       
  if ((intDay == startDay) && (0 == daily)){ daily = 1;}
  var daytemp=daily<10?("0"+daily):(daily);
  var d="<"+newCal.getFullYear()+"-"+montemp+"-"+daytemp+">";
  if(day==daily) cell.className="DayNow";
  else if(intDay==6) cell.className = "DaySat";
  else if (intDay==0) cell.className ="DaySun";
  else cell.className="Day";
  if ((daily > 0) && (daily <= intDaysInMonth))
  {
  cell.innerText = daily;
  daily++;
  } else
  {
  cell.className="CalendarTD";
  cell.innerText = "";
  }
}
document.all.year.value=year;
document.all.month.value=month+1;
}

function subMonth()
{
if ((month-1)<0)
{
  month=11;
  year=year-1;
} else
{
  month=month-1;
}
Calendar();
}

function addMonth()
{
if((month+1)>11)
{
  month=0;
  year=year+1;
} else
{
  month=month+1;
}
Calendar();
}

function setDate() 
{
if (document.all.month.value<1||document.all.month.value>12)
{
  alert("月的有效范围在1-12之间!");
  return;
}
year=Math.ceil(document.all.year.value);
month=Math.ceil(document.all.month.value-1);
Calendar();
}
</Script>

<Script>
function buttonOver()
{
var obj = window.event.srcElement;
obj.runtimeStyle.cssText = "background-color:#FFFFFF";
// obj.className="Hover";
}

function buttonOut()
{
var obj = window.event.srcElement;
window.setTimeout(function(){obj.runtimeStyle.cssText = "";},300);
}
</Script>

<Style>
Input {font-family: verdana;font-size: 9pt;text-decoration: none;background-color: #FFFFFF;height: 20px;border: 1px solid #666666;color:#000000;}

.Calendar {font-family: verdana;text-decoration: none;width: 170;background-color: #C0D0E8;font-size: 9pt;border:0px dotted #1C6FA5;}
.CalendarTD {font-family: verdana;font-size: 7pt;color: #000000;background-color:#f6f6f6;height: 20px;width:11%;text-align: center;}

.Title {font-family: verdana;font-size: 11pt;font-weight: normal;height: 24px;text-align: center;color: #333333;text-decoration: none;background-color: #A4B9D7;border-top-width: 1px;border-right-width: 1px;border-bottom-width: 1px;border-left-width: 1px;border-bottom-style:1px;border-top-color: #999999;border-right-color: #999999;border-bottom-color: #999999;border-left-color: #999999;}

.Day {font-family: verdana;font-size: 7pt;color:#243F65;background-color: #E5E9F2;height: 20px;width:11%;text-align: center;}
.DaySat {font-family: verdana;font-size: 7pt;color:#FF0000;text-decoration: none;background-color:#E5E9F2;text-align: center;height: 18px;width: 12%;}
.DaySun {font-family: verdana;font-size: 7pt;color: #FF0000;text-decoration: none;background-color:#E5E9F2;text-align: center;height: 18px;width: 12%;}
.DayNow {font-family: verdana;font-size: 7pt;font-weight: bold;color: #000000;background-color: #FFFFFF;height: 20px;text-align: center;}

.DayTitle {font-family: verdana;font-size: 9pt;color: #000000;background-color: #C0D0E8;height: 20px;width:11%;text-align: center;}
.DaySatTitle {font-family: verdana;font-size: 9pt;color:#FF0000;text-decoration: none;background-color:#C0D0E8;text-align: center;height: 20px;width: 12%;}
.DaySunTitle {font-family: verdana;font-size: 9pt;color: #FF0000;text-decoration: none;background-color: #C0D0E8;text-align: center;height: 20px;width: 12%;}

.DayButton {font-family: Webdings;font-size: 9pt;font-weight: bold;color: #243F65;cursor:hand;text-decoration: none;}

</Style>


<table border="0" cellpadding="0" cellspacing="1" class="Calendar" id="caltable">
<thead>
  <tr align="center" valign="middle"> 
<td colspan="7" class="Title">
  <a href="javaScript:subMonth();" title="上一月" Class="DayButton">3</a> <input name="year" type="text" size="4" maxlength="4" onkeydown="if (event.keyCode==13){setDate()}" onkeyup="this.value=this.value.replace(/[^0-9]/g,'')" onpaste="this.value=this.value.replace(/[^0-9]/g,'')"> 年 <input name="month" type="text" size="1" maxlength="2" onkeydown="if (event.keyCode==13){setDate()}" onkeyup="this.value=this.value.replace(/[^0-9]/g,'')" onpaste="this.value=this.value.replace(/[^0-9]/g,'')"> 月 <a href="JavaScript:addMonth();" title="下一月" Class="DayButton">4</a>
</td>
</tr>
<tr align="center" valign="middle"> 
<Script LANGUAGE="JavaScript"> 
  document.write("<TD class=DaySunTitle id=diary >" + days[0] + "</TD>"); 
  for (var intLoop = 1; intLoop < days.length-1;intLoop++) 
  document.write("<TD class=DayTitle id=diary>" + days[intLoop] + "</TD>"); 
  document.write("<TD class=DaySatTitle id=diary>" + days[intLoop] + "</TD>"); 
</Script>
</TR> 
</thead>
<TBODY border=1 cellspacing="0" cellpadding="0" ID="calendar" ALIGN=CENTER ONCLICK="getDiary()">
<Script LANGUAGE="JavaScript">
for (var intWeeks = 0; intWeeks < 6; intWeeks++)
{
  document.write("<TR style='cursor:hand'>");
  for (var intDays = 0; intDays < days.length;intDays++) document.write("<TD class=CalendarTD onMouseover='buttonOver();' onMouseOut='buttonOut();'></TD>");
  document.write("</TR>");
} 
</Script>
</TBODY>
</TABLE>
<Script LANGUAGE="JavaScript">
Calendar();
</Script>

</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date>2011-11-16 02:53:10</wp:post_date>
		<wp:post_date_gmt>2011-11-16 02:53:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%97%a5%e5%8e%86js%e4%bb%a3%e7%a0%81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="calendar"><![CDATA[calendar]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HTML4和HTML5之间的10个主要不同</title>
		<link></link>
		<pubDate>Thu, 17 Nov 2011 02:30:30 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=68</guid>
		<description></description>
		<content:encoded><![CDATA[HTML5是最新的HTML标准，或迟或早，所有的web程序员都会发现需要使用到这个最新的标准，而且，很多人都会感觉到，重新开发一个HTML5的网站，要比把一个网站从HTML4迁移到HTML5上容易的多，这是因为这两个版本之间有很大不同之处。

事实上，HTML5并没有对HTML4做什么重大的修改，它们很多东西都是相似的。

可是，其中有一些很重要的区别你需要知道。下面列出的就是一些HTML4和HTML5之间主要的不同之处(并不是全部，全部列出来是不可能的)：

1. HTML5标准还在制定中
这头一个不同之处显而易见，但非常重要，我需要先从它开始。也许你已经注意到了关于HTML5很酷的言论到处都是，但是事实情况是，HTML5是一个还未完成的标准。HTML4已经有10岁了，但它仍是当前正式的标准的事实没有改变。

另一方面，HTML5仍处在早期阶段，以后的修改会不断的出现。你必须考虑到这些，因为你在网站上使用的这些新增加或修改的网页元素会每年都出现一些变化，你需要不停的更新升级你的网站，这可不是你希望的。这就是目前为止，你最好在产品里使用HTML4，只在实验里使用HTML5的原因。

2. 简化的语法
更简单的doctype声明是HTML5里众多新特征之一。现在你只需要写&lt;!doctype html&gt;，这就行了。HTML5的语法兼容HTML4和XHTML1，但不兼容SGML。

3. 一个替代Flash的新 &lt;canvas&gt; 标记
对于Web用户来说，Flash既是一个惊喜，也是一种痛苦。有很多的Web开发人员对HTML5对Flash产生的威胁很不满。但对于那些忍受着要花几年时间加载和运行的臃肿的Flash视频的人来说，用新的 &lt;canvas&gt; 标记生成视频的技术已经到来。

目前， &lt;canvas&gt; 标记并不能提供所有的Flash具有的功能，但假以时日，Flash必将从web上淘汰。我们拭目以待，因为很多人还并不认同这种观点。

4. 新的 &lt;header&gt; 和 &lt;footer&gt; 标记
HTML5的设计是要更好的描绘网站的解剖结构。这就是为什么这些&lt;header&gt; 和&lt;footer&gt; 等新标记的出现，它们是专门为标志网站的这些部分设计的。

在开发网站时，你不在需要用&lt;div&gt;标记来标注网页的这些部分。

5. 新的 &lt;section&gt; 和 &lt;article&gt; 标记
跟&lt;header&gt; 和 &lt;footer&gt;标记类似，HTML5中引入的新的&lt;section&gt; 和 &lt;article&gt; 标记可以让开发人员更好的标注页面上的这些区域。

据推测，除了让代码更有组织外，它也能改善SEO效果，能让搜索引擎更容易的分析你的页面。

6. 新的 &lt;menu&gt; 和 &lt;figure&gt; 标记
新的&lt;menu&gt;标记可以被用作普通的菜单，也可以用在工具条和右键菜单上，虽然这些东西在页面上并不常用。

类似的，新的 &lt;figure&gt; 标记是一种更专业的管理页面上文字和图像的方式。当然，你可以用样式表来控制文字和图像，但使用HTML5内置的这个标记更适合。

7. 新的 &lt;audio&gt; 和 &lt;video&gt; 标记
新的&lt;audio&gt; 和 &lt;video&gt; 标记可能是HTML5中增加的最有用处的两个东西了。正如标记名称，它们是用来嵌入音频和视频文件的。

除此之外还有一些新的多媒体的标记和属性，例如&lt;track&gt;，它是用来提供跟踪视频的文字信息的。有了这些标记，HTML5使Web2.0特征变得越来越友好。问题在于，在HTML5还未被广泛的接受之前，Web2.0还是老的Web2.0。

8. 全新的表单设计
新的 &lt;form&gt; 和 &lt;forminput&gt; 标记对原有的表单元素进行的全新的修改，它们有很多的新属性(以及一些修改)。如果你经常的开发表单，你应该花时间更详细的研究一下。

9. 不再使用 &lt;b&gt; 和 &lt;font&gt; 标记
对我个人来说，这是一个让我不太理解的改动。我并不认为去除 &lt;b&gt; 和 &lt;font&gt;标记会带来多大的好处。我知道，官方的指导说这些标记可以通过CCS来做更好的处理，但这样一来，为了在文章一两个地方出现的这种标记，你就需要在独立的css和文本两个地方来实现这一的功能，岂不笨拙。也许我们以后会习惯这种方法。

10. 不再使用 &lt;frame&gt;, &lt;center&gt;, &lt;big&gt; 标记
事实上，我已经记不清曾经何时用过这些标记了，所以，我并不为去除这些标记感到悲哀。相同的原因，有更好的标记能实现它们的功能——这很好，任何作废的标记从标准中剔除都是受欢迎的。

这10个HTML5和HTML4之间的不同只是整个新的规范中的一小部分。除了这些主要的变动外，我还可以略提一下一些次要的改动，比如修改了&lt;ol&gt; 标记的属性，让它能够倒排序，对&lt;u&gt;标记也做了修改。

所有这些次要的改动数量众多。而且新的修改也在不断的增加，因此，如果你想实时跟踪最新的动向，你需要经常的查看w3.org的HTML4 和 HTML5之间的不同这个页面。如果你很心急，想在你的工作中使用这些新的标记和属性，我劝告你最好只是做实验，原因已经说的很清楚了，这些新标记和新属性在将来也许会有很大的改变，所以，除非你不断的更新你的代码，它们很可能会过期失效。

尽管如今大多数流行的浏览器的最新版都支持HTML5，但有些新的(或修改的)标记和属性它们并不支持，所以你的网页在用户的屏幕上有可能前后显示的不一致。耐心等待，等待HTML5真正可以实用时候。目前还不是时候。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date>2011-11-17 02:30:30</wp:post_date>
		<wp:post_date_gmt>2011-11-17 02:30:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>html4%e5%92%8chtml5%e4%b9%8b%e9%97%b4%e7%9a%8410%e4%b8%aa%e4%b8%bb%e8%a6%81%e4%b8%8d%e5%90%8c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="html"><![CDATA[html]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>guides rubyonrails Migrations (EN and CN)</title>
		<link></link>
		<pubDate>Mon, 21 Nov 2011 02:48:18 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=73</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Migrations</h2>
Migrations are a convenient way for you to alter<span style="font-family: DejaVu Sans;">移动</span>your database in a structured and organized manner.Migrations<span style="font-family: DejaVu Sans;">是一种很便捷的方法让你能够以一种结构化的和有组织的方式来迁移你的数据库。</span>You could edit fragments of SQL by hand but you would then be responsible for telling other developers that they need to go and run them.<span style="font-family: DejaVu Sans;">你可以手动编辑</span>SQL<span style="font-family: DejaVu Sans;">片段，而且你有责任把这些告诉其他的开发人员，因为他们需要开发和使用它们。</span>You’d also have to keep track of which changes need to be run against the production machines next time you deploy.<span style="font-family: DejaVu Sans;">你也可以跟踪对你部署的代码在接下来的</span>production<span style="font-family: DejaVu Sans;">机器（将会）发生的变化。</span>

Active Record tracks which migrations have already been run so all you have to do is update your source and run <tt>rake</tt><tt> </tt><tt>db:migrate</tt>.Active Record<span style="font-family: DejaVu Sans;">跟踪并迁移你已经运行过的（代码和数据），而你只需要在更新了你的源代码的时候执行</span><tt>rake</tt><tt> </tt><tt>db:migrate</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>Active Record will work out which migrations should be run.Active Recor<span style="font-family: DejaVu Sans;">将会计算出那些迁移需要被执行。</span>It will also update your <tt>db/schema.rb</tt> file to match the structure of your database.<span style="font-family: DejaVu Sans;">它还会更新你的</span><tt>db/schema.rb</tt><span style="font-family: DejaVu Sans;"><tt>文件使其于你的数据库结构相匹配。</tt></span>

<tt>Migrations</tt><tt> </tt><tt>also</tt><tt> </tt><tt>allow</tt><tt> </tt><tt>you</tt><tt> </tt><tt>to</tt><tt> </tt><tt>describe</tt><tt> </tt><tt>these</tt><tt> </tt><tt>transformations</tt><tt> </tt><tt>using</tt><tt> </tt><tt>Ruby.Migrations</tt><span style="font-family: DejaVu Sans;"><tt>同样允许你使用</tt></span><tt>Ruby</tt><span style="font-family: DejaVu Sans;"><tt>来描述这些转换。</tt><tt></tt></span><tt>The</tt><tt> </tt><tt>great</tt><tt> </tt><tt>thing</tt><tt> </tt><tt>about</tt><tt> </tt><tt>this</tt><tt> </tt><tt>is</tt><tt> </tt><tt>that</tt><tt> </tt><tt>(like</tt><tt> </tt><tt>most</tt><tt> </tt><tt>of</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>functionality)</tt><tt> </tt><tt>it</tt><tt> </tt><tt>is</tt><tt> </tt><tt>database</tt><tt> </tt><tt>independent:</tt><tt> </tt><tt>you</tt><tt> </tt><tt>don</tt><tt>’</tt><tt>t</tt><tt> </tt><tt>need</tt><tt> </tt><tt>to</tt><tt> </tt><tt>worry</tt><tt> </tt><tt>about</tt><tt> </tt><tt>the</tt><tt> </tt><tt>precise</tt><tt> </tt><tt>syntax</tt><tt> </tt><tt>of</tt><tt> </tt><tt>CREATE</tt><tt> </tt><tt>TABLE</tt><tt> </tt><tt>any</tt><tt> </tt><tt>more</tt><tt> </tt><tt>than</tt><tt> </tt><tt>you</tt><tt> </tt><tt>worry</tt><tt> </tt><tt>about</tt><tt> </tt><tt>variations</tt><tt> </tt><tt>on</tt><tt> </tt><tt>SELECT</tt><tt> </tt><tt>*</tt><tt> </tt><tt>(you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>drop</tt><tt> </tt><tt>down</tt><tt> </tt><tt>to</tt><tt> </tt><tt>raw</tt><tt> </tt><tt>SQL</tt><tt> </tt><tt>for</tt><tt> </tt><tt>database</tt><tt> </tt><tt>specific</tt><tt> </tt><tt>features).</tt><span style="font-family: DejaVu Sans;"><tt>值得高兴的事情是（就像大多数的</tt></span><tt>Active</tt><tt> </tt><tt>Record's</tt><span style="font-family: DejaVu Sans;"><tt>工厂）它是与数据独立的：你再也不需要担心准确的语法来</tt><tt></tt></span><tt>CREATE</tt><tt> </tt><tt>TABLE</tt><span style="font-family: DejaVu Sans;"><tt>也不需要担心</tt></span><tt>SELECT</tt><tt> </tt><tt>*</tt><span style="font-family: DejaVu Sans;"><tt>的变化。</tt><tt></tt></span><tt>For</tt><tt> </tt><tt>example</tt><tt> </tt><tt>you</tt><tt> </tt><tt>could</tt><tt> </tt><tt>use</tt><tt> </tt><tt>SQLite3</tt><tt> </tt><tt>in</tt><tt> </tt><tt>development,</tt><tt> </tt><tt>but</tt><tt> </tt><tt>MySQL</tt><tt> </tt><tt>in</tt><tt> </tt><tt>production.</tt><span style="font-family: DejaVu Sans;"><tt>例如你可以使用</tt></span><tt>SQLite3</tt><span style="font-family: DejaVu Sans;"><tt>开发，但是在发布的产品中使用</tt></span><tt>MySQL</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

<tt>You</tt><tt>’</tt><tt>ll</tt><tt> </tt><tt>learn</tt><tt> </tt><tt>all</tt><tt> </tt><tt>about</tt><tt> </tt><tt>migrations</tt><tt> </tt><tt>including:</tt><span style="font-family: DejaVu Sans;"><tt>下面你将了解到的</tt></span><tt>migrations</tt><span style="font-family: DejaVu Sans;"><tt>包括：</tt></span>
<ul>
	<li>The generators you can use to create them <span style="font-family: DejaVu Sans;">你可以使用</span>generators<span style="font-family: DejaVu Sans;">来创建他们（数据库表单）</span></li>
	<li>The methods Active Record provides to manipulate<span style="font-family: DejaVu Sans;">操纵</span>your database Active Record<span style="font-family: DejaVu Sans;">提供方法来操纵你的数据库</span></li>
	<li>The Rake tasks that manipulate them <span style="font-family: DejaVu Sans;">使用</span>Rake<span style="font-family: DejaVu Sans;">命令操作这些（迁移）</span></li>
	<li>How they relate to <tt>schema.rb</tt> <span style="font-family: DejaVu Sans;">它们是如何映射到</span>schema.rb</li>
</ul>
<h3><a name="anatomy-of-a-migration"></a><tt>1</tt><tt> </tt><tt>Anatomy</tt><tt> </tt><tt>of</tt><tt> </tt><tt>a</tt><tt> </tt><tt>Migration</tt></h3>
<tt>Before</tt><tt> </tt><tt>we</tt><tt> </tt><tt>dive</tt><tt> </tt><tt>into</tt><tt> </tt><tt>the</tt><tt> </tt><tt>details</tt><tt> </tt><tt>of</tt><tt> </tt><tt>a</tt><tt> </tt><tt>migration,</tt><tt> </tt><tt>here</tt><tt> </tt><tt>are</tt><tt> </tt><tt>a</tt><tt> </tt><tt>few</tt><tt> </tt><tt>examples</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>sorts</tt><tt> </tt><tt>of</tt><tt> </tt><tt>things</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>do:</tt><span style="font-family: DejaVu Sans;"><tt>在深入</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>的详细介绍之前，下面有一系列的例子你可以尝试一下：</tt></span>

<code>class</code><tt> </tt><code>CreateProducts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code>

<code> </code><code>def</code> <code>up</code>

<code> </code><code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code>

<code> </code><code>t.string</code><code> </code><code>:name</code>

<code> </code><code>t.text</code><code> </code><code>:description</code>

&nbsp;

<code> </code><code>t.timestamps</code>

<code> </code><code>end</code>

<code> </code><code>end</code>

&nbsp;

<code> </code><code>def</code> <code>down</code>

<code> </code><code>drop_table</code><code> </code><code>:products</code>

<code> </code><code>end</code>

<code>end</code>

<tt>This</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>adds</tt><tt> </tt><tt>a</tt><tt> </tt><tt>table</tt><tt> </tt><tt>called</tt><tt> </tt><tt>products</tt><tt> </tt><tt>with</tt><tt> </tt><tt>a</tt><tt> </tt><tt>string</tt><tt> </tt><tt>column</tt><tt> </tt><tt>called</tt><tt> </tt><tt>name</tt><tt> </tt><tt>and</tt><tt> </tt><tt>a</tt><tt> </tt><tt>text</tt><tt> </tt><tt>column</tt><tt> </tt><tt>called</tt><tt> </tt><tt>description.</tt><span style="font-family: DejaVu Sans;"><tt>这次</tt><tt></tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>添加了一个名叫</tt></span><tt>products</tt><span style="font-family: DejaVu Sans;"><tt>的表它有一个叫</tt></span><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>的字符串的列和一个叫</tt></span><tt>description</tt><span style="font-family: DejaVu Sans;"><tt>的文本框的列。</tt><tt></tt></span><tt>A</tt><tt> </tt><tt>primary</tt><tt> </tt><tt>key</tt><tt> </tt><tt>column</tt><tt> </tt><tt>called</tt><tt> </tt><tt>id</tt><tt> </tt><tt>will</tt><tt> </tt><tt>also</tt><tt> </tt><tt>be</tt><tt> </tt><tt>added,</tt><tt> </tt><tt>however</tt><tt> </tt><tt>since</tt><tt> </tt><tt>this</tt><tt> </tt><tt>is</tt><tt> </tt><tt>the</tt><tt> </tt><tt>default</tt><tt> </tt><tt>we</tt><tt> </tt><tt>do</tt><tt> </tt><tt>not</tt><tt> </tt><tt>need</tt><tt> </tt><tt>to</tt><tt> </tt><tt>ask</tt><tt> </tt><tt>for</tt><tt> </tt><tt>this.</tt><span style="font-family: DejaVu Sans;"><tt>一个名叫</tt></span><tt>id</tt><span style="font-family: DejaVu Sans;"><tt>的主键列也被添加，然而因为这是默认操作的不需要我们刻意添加。</tt><tt></tt></span><tt>The</tt><tt> </tt><tt>timestamp</tt><tt> </tt><tt>columns</tt><tt> </tt><tt>created_at</tt><tt> </tt><tt>and</tt><tt> </tt><tt>updated_at</tt><tt> </tt><tt>which</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt> </tt><tt>populates</tt><tt> </tt><tt>automatically</tt><tt> </tt><tt>will</tt><tt> </tt><tt>also</tt><tt> </tt><tt>be</tt><tt> </tt><tt>added.</tt><span style="font-family: DejaVu Sans;"><tt>还添加了</tt><tt></tt></span><tt>timestamp</tt><span style="font-family: DejaVu Sans;"><tt>字段，</tt></span><code>products</code><span style="font-family: DejaVu Sans;"><code>表单</code><tt>会在</tt><tt></tt></span><tt>created_at</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>updated_at</tt><span style="font-family: DejaVu Sans;"><tt>的时候通过</tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>自动填充</tt><tt></tt></span><tt>timestamp</tt><span style="font-family: DejaVu Sans;"><tt>字段。</tt><tt></tt></span><tt>Reversing</tt><tt> </tt><tt>this</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>is</tt><tt> </tt><tt>as</tt><tt> </tt><tt>simple</tt><tt> </tt><tt>as</tt><tt> </tt><tt>dropping</tt><tt> </tt><tt>the</tt><tt> </tt><tt>table.</tt><span style="font-family: DejaVu Sans;"><tt>撤销这次</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>就像</tt><tt></tt></span><tt>dropping</tt><span style="font-family: DejaVu Sans;"><tt>这个表。</tt></span>

&nbsp;

Migrations are not limited to changing the schema.Migrations<span style="font-family: DejaVu Sans;">不限制更改</span>schema<span style="font-family: DejaVu Sans;">。</span>You can also use them to fix bad data in the database or populate new fields:<span style="font-family: DejaVu Sans;">你可以使用（</span>schema<span style="font-family: DejaVu Sans;">）它们来修复坏的数据或者添加新的字段：</span>

<code>class</code> <code>AddReceiveNewsletterToUsers</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code>

<code> </code><code>def</code> <code>up</code>

<code> </code><code>change_table</code><code> </code><code>:users</code> <code>do</code> <code>|t|</code>

<code> </code><code>t.boolean</code><code> </code><code>:receive_newsletter,</code><code> </code><code>:default</code> <code>=&gt;</code><code> </code><code>false</code>

<code> </code><code>end</code>

<code> </code><code>User.update_all</code><code> </code><code>["receive_newsletter</code><code> </code><code>=</code><code> </code><code>?",</code><code> </code><code>true]</code>

<code> </code><code>end</code>

&nbsp;

<code> </code><code>def</code> <code>down</code>

<code> </code><code>remove_column</code><code> </code><code>:users,</code><code> </code><code>:receive_newsletter</code>

<code> </code><code>end</code>

<code>end</code>

Some <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/migrations.html#using-models-in-your-migrations">caveats</a></span></span> apply to using models in your migrations.<span style="font-family: DejaVu Sans;">一些在</span>model<span style="font-family: DejaVu Sans;">的</span>migrations<span style="font-family: DejaVu Sans;">中的<span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/migrations.html#using-models-in-your-migrations" target="_blank">注意事项</a></span></span>。</span>

This migration adds a <tt>receive_newsletter</tt> column to the <tt>users</tt> table.<span style="font-family: DejaVu Sans;">（上面）这个</span>migration<span style="font-family: DejaVu Sans;">添加一个</span><tt>receive_newsletter</tt><span style="font-family: DejaVu Sans;"><tt>字段到</tt></span><tt>user</tt><span style="font-family: DejaVu Sans;"><tt>表。</tt></span>We want it to default to <tt>false</tt> for new users, but existing users are considered to have already opted in, so we use the User model to set the flag to <tt>true</tt> for existing users.<span style="font-family: DejaVu Sans;">我们希望对于新用户默认设置</span><tt>receive_newsletter</tt><span style="font-family: DejaVu Sans;"><tt>字段为</tt></span><tt>fasle</tt><span style="font-family: DejaVu Sans;"><tt>，但是存在的用户被认为已经有（自己的）选择，因此我们通过在</tt></span><tt>User</tt><tt> </tt><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>中存在的用户设置为</tt></span><tt>True</tt><span style="font-family: DejaVu Sans;"><tt>的标识（来保留以后信息）。</tt></span>

Rails 3.1 makes migrations smarter by providing a new <tt>change</tt> method.Rails3.1<span style="font-family: DejaVu Sans;">通过提供一个新的</span>change<span style="font-family: DejaVu Sans;">方法，使得</span>migrations<span style="font-family: DejaVu Sans;">更加智能化。</span>This method is preferred<span style="font-family: DejaVu Sans;">首选</span>for writing constructive migrations (adding columns or tables).<span style="font-family: DejaVu Sans;">这个方法是用来做（数据库）结构迁移（添加或删除字段）的首选。</span>The migration knows how to migrate your database and reverse it when the migration is rolled back without the need to write a separate <tt>down</tt> method.migration<span style="font-family: DejaVu Sans;">知道怎样迁移你的数据库以及不需要单独的编写</span>down<span style="font-family: DejaVu Sans;">方法来处理回滚是的</span>migration<span style="font-family: DejaVu Sans;">。</span>

<code>class</code> <code>CreateProducts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code>

<code> </code><code>def</code> <code>change</code>

<code> </code><code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code>

<code> </code><code>t.string</code><code> </code><code>:name</code>

<code> </code><code>t.text</code><code> </code><code>:description</code>

&nbsp;

<code> </code><code>t.timestamps</code>

<code> </code><code>end</code>

<code> </code><code>end</code>

<code>end</code>
<h4><a name="migrations-are-classes"></a>1.1 Migrations are Classes Migrations<span style="font-family: WenQuanYi Micro Hei;">是一个类</span></h4>
A migration is a subclass of <tt>ActiveRecord::Migration</tt> that implements two methods: <tt>up</tt> (perform the required transformations) and <tt>down</tt> (revert them).<span style="font-family: DejaVu Sans;">一个</span>migration<span style="font-family: DejaVu Sans;">类是</span><tt>ActiveRecord::Migration</tt><span style="font-family: DejaVu Sans;">的子类，它实现了两个方法：</span>up<span style="font-family: DejaVu Sans;">（执行所请求的转换）和</span>down<span style="font-family: DejaVu Sans;">（撤销所做的更改）。</span>

Active Record provides methods that perform common data definition tasks in a database independent way (you’ll read about them in detail later):Active Record<span style="font-family: DejaVu Sans;">提供了了在数据库中执行常见数据定义的方法（你将会在后面看到详细的介绍）。</span>
<ul>
	<li><tt>create_table</tt></li>
	<li><tt>change_table</tt></li>
	<li><tt>drop_table</tt></li>
	<li><tt>add_column</tt></li>
	<li><tt>change_column</tt></li>
	<li><tt>rename_column</tt></li>
	<li><tt>remove_column</tt></li>
	<li><tt>add_index</tt></li>
	<li><tt>remove_index</tt></li>
</ul>
If you need to perform tasks specific to your database (for example create a <a href="http://guides.rubyonrails.org/migrations.html#active-record-and-referential-integrity"><span style="color: #000080;"><span style="text-decoration: underline;">foreign</span></span><span style="color: #000080;"><span style="text-decoration: underline;">key</span></span></a> constraint<span style="font-family: DejaVu Sans;">约束</span>) then the <tt>execute</tt> function allows you to execute arbitrary SQL.<span style="font-family: DejaVu Sans;">如果你在你的数据库中需要处理特殊的任务（例如创建一个</span>foreign key<span style="font-family: DejaVu Sans;">约束）那么</span>execute<span style="font-family: DejaVu Sans;">功能允许你执行任意的</span>SQL<span style="font-family: DejaVu Sans;">（语句）。</span>A migration is just a regular Ruby class so you’re not limited to these functions. migration<span style="font-family: DejaVu Sans;">仅仅是一个</span>Ruby<span style="font-family: DejaVu Sans;">类，因此你不必仅仅局限于现有的这些功能。</span>For example after adding a column you could write code to set the value of that column for existing records (if necessary using your models).<span style="font-family: DejaVu Sans;">例如在添加了一个字段之后你可以添加代码来设置这个字段在存在记录中的值（如果在你的</span>model<span style="font-family: DejaVu Sans;">中需要）。</span>

On databases that support transactions<span style="font-family: DejaVu Sans;">处理办理</span>with statements that change the schema (such as PostgreSQL or SQLite3), migrations are wrapped in a transaction.<span style="font-family: DejaVu Sans;">当数据库支持通过声明来改变数据库的结构（例如</span>PostgreSQL<span style="font-family: DejaVu Sans;">和</span>SQLite3<span style="font-family: DejaVu Sans;">），会在包含在</span>migration<span style="font-family: DejaVu Sans;">处理中（直接改变数据库的结构）。</span>If the database does not support this (for example MySQL) then when a migration fails the parts of it that succeeded will not be rolled back. <span style="font-family: DejaVu Sans;">如果数据库不支持这样的功能（比如</span>MySQL<span style="font-family: DejaVu Sans;">）然后</span>migration<span style="font-family: DejaVu Sans;">会有部分失败<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>成功添加的（数据）将不会回滚。</span>You will have to unpick the changes that were made by hand.<span style="font-family: DejaVu Sans;">你必须手动的分开这些改变。</span>
<h4><a name="what-s-in-a-name"></a>1.2 What’s in a Name <span style="font-family: WenQuanYi Micro Hei;">（数据库文件）名称中的信息</span></h4>
Migrations are stored in files in <tt>db/migrate</tt>, one for each migration class.Mgirations<span style="font-family: DejaVu Sans;">以单个文件的形式被存放在文件夹</span><tt>db/migrate</tt><span style="font-family: DejaVu Sans;"><tt>中</tt>。</span>The name of the file is of the form <tt>YYYYMMDDHHMMSS_create_products.rb</tt>, that is to say a UTC timestamp<span style="font-family: DejaVu Sans;">时间戳</span>identifying<span style="font-family: DejaVu Sans;">确定</span>the migration followed by an underscore<span style="font-family: DejaVu Sans;">下划线</span>followed by the name of the migration.<span style="font-family: DejaVu Sans;">（</span>migration<span style="font-family: DejaVu Sans;">）文件是以</span>form<span style="font-family: DejaVu Sans;">命名的，还看见了一个在</span>migration<span style="font-family: DejaVu Sans;">完成之时的时间戳接着是下划线接着是</span>migration<span style="font-family: DejaVu Sans;">的名字。</span>The name of the migration class (CamelCased version) should match the latter part of the file name. migraiton<span style="font-family: DejaVu Sans;">类（使用驼峰命名法）的名字应该和</span>migration<span style="font-family: DejaVu Sans;">文件的名称的最后部分相匹配。</span>For example <tt>20080906120000_create_products.rb</tt> should define <tt>CreateProducts</tt> and <tt>20080906120001_add_details_to_products.rb</tt> should define <tt>AddDetailsToProducts</tt>. If you do feel the need to change the file name then you <em>have</em><em> </em><em>to</em> update the name of the class inside or Rails will complain about a missing class.<span style="font-family: DejaVu Sans;">如果你觉得需要改变</span>migration<span style="font-family: DejaVu Sans;">文件的名字你必须同样修改文件里边</span>migration<span style="font-family: DejaVu Sans;">类的名字，不然</span>Rails<span style="font-family: DejaVu Sans;">会找不到</span>migration<span style="font-family: DejaVu Sans;">类。</span>

Internally Rails only uses the migration’s number (the timestamp) to identify them.<span style="font-family: DejaVu Sans;">在</span>Rails<span style="font-family: DejaVu Sans;">内部只使用</span>migration<span style="font-family: DejaVu Sans;">编号（时间戳）来确定他们。</span>Prior to Rails 2.1 the migration number started at 1 and was incremented each time a migration was generated.<span style="font-family: DejaVu Sans;">在</span>Rails2.1<span style="font-family: DejaVu Sans;">之前</span>migration<span style="font-family: DejaVu Sans;">编号从</span>1<span style="font-family: DejaVu Sans;">开始然后在每次</span>migration<span style="font-family: DejaVu Sans;">被创建过后增加。</span>With multiple developers it was easy for these to clash requiring you to rollback migrations and renumber them.<span style="font-family: DejaVu Sans;">随着开发人员的增多这样会使的很容易产生冲突这就需要你回滚</span>migrations<span style="font-family: DejaVu Sans;">和重新编号他们。</span>developers With Rails 2.1 this is largely avoided by using the creation time of the migration to identify them.Rails2.1<span style="font-family: DejaVu Sans;">的开发人员通过</span>migraiton<span style="font-family: DejaVu Sans;">文件的创建时间指明每个文件在很大程度上避免了冲突（的发生）。</span>You can revert to the old numbering scheme by adding the following line to <tt>config/application.rb</tt>.<span style="font-family: DejaVu Sans;">你可以还原带旧的版本通过在</span><tt>config/application.rb</tt><span style="font-family: DejaVu Sans;"><tt>文件中添加如下行：</tt></span>

<code>config.active_record.timestamped_migrations</code><code> </code><code>=</code><code> </code><code>false</code>

<tt>The</tt><tt> </tt><tt>combination</tt><span style="font-family: DejaVu Sans;"><tt>组合</tt><tt></tt></span><tt>of</tt><tt> </tt><tt>timestamps</tt><tt> </tt><tt>and</tt><tt> </tt><tt>recording</tt><tt> </tt><tt>which</tt><tt> </tt><tt>migrations</tt><tt> </tt><tt>have</tt><tt> </tt><tt>been</tt><tt> </tt><tt>run</tt><tt> </tt><tt>allows</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>to</tt><tt> </tt><tt>handle</tt><tt> </tt><tt>common</tt><tt> </tt><tt>situations</tt><tt> </tt><tt>that</tt><tt> </tt><tt>occur</tt><tt> </tt><tt>with</tt><tt> </tt><tt>multiple</tt><tt> </tt><tt>developers.</tt><span style="font-family: DejaVu Sans;"><tt>时间戳和</tt></span><tt>migrations</tt><span style="font-family: DejaVu Sans;"><tt>的名字的组合使得</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>可以处理多个开发人员的普遍情况。</tt></span>

<tt>For</tt><tt> </tt><tt>example</tt><tt> </tt><tt>Alice</tt><tt> </tt><tt>adds</tt><tt> </tt><tt>migrations</tt><tt> </tt><tt>20080906120000</tt><tt> </tt><tt>and</tt><tt> </tt><tt>20080906123000</tt><tt> </tt><tt>and</tt><tt> </tt><tt>Bob</tt><tt> </tt><tt>adds</tt><tt> </tt><tt>20080906124500</tt><tt> </tt><tt>and</tt><tt> </tt><tt>runs</tt><tt> </tt><tt>it.</tt><span style="font-family: DejaVu Sans;"><tt>比如</tt></span><tt>Alice</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>添加了</tt></span><tt>migration</tt><tt> </tt><tt>20080906120000</tt><tt> </tt><tt>and</tt><tt> </tt><tt>20080906123000</tt><span style="font-family: DejaVu Sans;"><tt>以及</tt></span><tt>Bob</tt><span style="font-family: DejaVu Sans;"><tt>添加并运行了</tt><tt></tt></span><tt>20080906124500</tt><span style="font-family: DejaVu Sans;"><tt>。</tt><tt></tt></span><tt>Alice</tt><tt> </tt><tt>finishes</tt><tt> </tt><tt>her</tt><tt> </tt><tt>changes</tt><tt> </tt><tt>and</tt><tt> </tt><tt>checks</tt><tt> </tt><tt>in</tt><tt> </tt><tt>her</tt><tt> </tt><tt>migrations</tt><tt> </tt><tt>and</tt><tt> </tt><tt>Bob</tt><tt> </tt><tt>pulls</tt><tt> </tt><tt>down</tt><tt> </tt><tt>the</tt><tt> </tt><tt>latest</tt><tt> </tt><tt>changes.</tt><tt> </tt><tt>Alice</tt><span style="font-family: DejaVu Sans;"><tt>完成了他的更改并提交在他的</tt></span><tt>migrationss</tt><span style="font-family: DejaVu Sans;"><tt>中，并且</tt></span><tt>Bob</tt><tt> </tt><tt>pull</tt><tt> </tt><tt>down</tt><span style="font-family: DejaVu Sans;"><tt>了最新的更改。</tt><tt></tt></span><tt>Rails</tt><tt> </tt><tt>knows</tt><tt> </tt><tt>that</tt><tt> </tt><tt>it</tt><tt> </tt><tt>has</tt><tt> </tt><tt>not</tt><tt> </tt><tt>run</tt><tt> </tt><tt>Alice</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>two</tt><tt> </tt><tt>migrations</tt><tt> </tt><tt>so</tt><tt> </tt><tt>rake</tt><tt> </tt><tt>db:migrate</tt><tt> </tt><tt>would</tt><tt> </tt><tt>run</tt><tt> </tt><tt>them</tt><tt> </tt><tt>(even</tt><tt> </tt><tt>though</tt><tt> </tt><tt>Bob</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>with</tt><tt> </tt><tt>a</tt><tt> </tt><tt>later</tt><tt> </tt><tt>timestamp</tt><tt> </tt><tt>has</tt><tt> </tt><tt>been</tt><tt> </tt><tt>run),</tt><tt> </tt><tt>and</tt><tt> </tt><tt>similarly</tt><tt> </tt><tt>migrating</tt><tt> </tt><tt>down</tt><tt> </tt><tt>would</tt><tt> </tt><tt>not</tt><tt> </tt><tt>run</tt><tt> </tt><tt>their</tt><tt> </tt><tt>down</tt><tt> </tt><tt>methods.</tt>

<tt>Of</tt><tt> </tt><tt>course</tt><tt> </tt><tt>this</tt><tt> </tt><tt>is</tt><tt> </tt><tt>no</tt><tt> </tt><tt>substitution</tt><tt> </tt><tt>for</tt><tt> </tt><tt>communication</tt><tt> </tt><tt>within</tt><tt> </tt><tt>the</tt><tt> </tt><tt>team.</tt><span style="font-family: DejaVu Sans;"><tt>当然这些在团队交流中是不可避免的。</tt><tt></tt></span><tt>For</tt><tt> </tt><tt>example,</tt><tt> </tt><tt>if</tt><tt> </tt><tt>Alice</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>removed</tt><tt> </tt><tt>a</tt><tt> </tt><tt>table</tt><tt> </tt><tt>that</tt><tt> </tt><tt>Bob</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>assumed</tt><tt> </tt><tt>to</tt><tt> </tt><tt>exist,</tt><tt> </tt><tt>then</tt><tt> </tt><tt>trouble</tt><tt> </tt><tt>would</tt><tt> </tt><tt>certainly</tt><tt> </tt><tt>strike.</tt><span style="font-family: DejaVu Sans;"><tt>例如如果</tt></span><tt>Alice</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>中移除了一个表但是</tt></span><tt>Bob's</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>migraion</tt><span style="font-family: DejaVu Sans;"><tt>假设它还在，那么麻烦就来了。</tt></span>
<h4><a name="changing-migrations"></a><tt>1.3</tt><tt> </tt><tt>Changing</tt><tt> </tt><tt>Migrations</tt></h4>
<tt>Occasionally</tt><tt> </tt><tt>you</tt><tt> </tt><tt>will</tt><tt> </tt><tt>make</tt><tt> </tt><tt>a</tt><tt> </tt><tt>mistake</tt><tt> </tt><tt>when</tt><tt> </tt><tt>writing</tt><tt> </tt><tt>a</tt><tt> </tt><tt>migration.</tt><span style="font-family: DejaVu Sans;"><tt>偶尔你在写入一个</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>的时候犯个错误。</tt><tt></tt></span><tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>have</tt><tt> </tt><tt>already</tt><tt> </tt><tt>run</tt><tt> </tt><tt>the</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>then</tt><tt> </tt><tt>you</tt><tt> </tt><tt>cannot</tt><tt> </tt><tt>just</tt><tt> </tt><tt>edit</tt><tt> </tt><tt>the</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>and</tt><tt> </tt><tt>run</tt><tt> </tt><tt>the</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>again:</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>thinks</tt><tt> </tt><tt>it</tt><tt> </tt><tt>has</tt><tt> </tt><tt>already</tt><tt> </tt><tt>run</tt><tt> </tt><tt>the</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>and</tt><tt> </tt><tt>so</tt><tt> </tt><tt>will</tt><tt> </tt><tt>do</tt><tt> </tt><tt>nothing</tt><tt> </tt><tt>when</tt><tt> </tt><tt>you</tt><tt> </tt><tt>run</tt><tt> </tt><tt>rake</tt><tt> </tt><tt>db:migrate.</tt><span style="font-family: DejaVu Sans;"><tt>如果你已经运行了</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>接着你不可能再去编辑和运行这个（错误的）</tt></span><tt>migraion</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>认为（你已经）运行了</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>因此在你运</tt></span><tt>rake</tt><tt> </tt><tt>db:migrate</tt><span style="font-family: DejaVu Sans;"><tt>的时候不会做任何改变。</tt><tt></tt></span><tt>You</tt><tt> </tt><tt>must</tt><tt> </tt><tt>rollback</tt><tt> </tt><tt>the</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>(for</tt><tt> </tt><tt>example</tt><tt> </tt><tt>with</tt><tt> </tt><tt>rake</tt><tt> </tt><tt>db:rollback),</tt><tt> </tt><tt>edit</tt><tt> </tt><tt>your</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>and</tt><tt> </tt><tt>then</tt><tt> </tt><tt>run</tt><tt> </tt><tt>rake</tt><tt> </tt><tt>db:migrate</tt><tt> </tt><tt>to</tt><tt> </tt><tt>run</tt><tt> </tt><tt>the</tt><tt> </tt><tt>corrected</tt><tt> </tt><tt>version.</tt><span style="font-family: DejaVu Sans;"><tt>你必须回滚</tt></span><tt>migation</tt><span style="font-family: DejaVu Sans;"><tt>（例如</tt></span><tt>rake</tt><tt> </tt><tt>db:rollback</tt><span style="font-family: DejaVu Sans;"><tt>），编辑修改你的</tt></span><tt>migraion</tt><span style="font-family: DejaVu Sans;"><tt>然后运行正确的版本</tt><tt></tt></span><tt>rake</tt><tt> </tt><tt>db:migrate</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

<tt>In</tt><tt> </tt><tt>general</tt><tt> </tt><tt>editing</tt><tt> </tt><tt>existing</tt><tt> </tt><tt>migrations</tt><tt> </tt><tt>is</tt><tt> </tt><tt>not</tt><tt> </tt><tt>a</tt><tt> </tt><tt>good</tt><tt> </tt><tt>idea:</tt><tt> </tt><tt>you</tt><tt> </tt><tt>will</tt><tt> </tt><tt>be</tt><tt> </tt><tt>creating</tt><tt> </tt><tt>extra</tt><tt> </tt><tt>work</tt><tt> </tt><tt>for</tt><tt> </tt><tt>yourself</tt><tt> </tt><tt>and</tt><tt> </tt><tt>your</tt><tt> </tt><tt>co-workers</tt><tt> </tt><tt>and</tt><tt> </tt><tt>cause</tt><tt> </tt><tt>major</tt><tt> </tt><tt>headaches</tt><tt> </tt><tt>if</tt><tt> </tt><tt>the</tt><tt> </tt><tt>existing</tt><tt> </tt><tt>version</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>has</tt><tt> </tt><tt>already</tt><tt> </tt><tt>been</tt><tt> </tt><tt>run</tt><tt> </tt><tt>on</tt><tt> </tt><tt>production</tt><tt> </tt><tt>machines.</tt><span style="font-family: DejaVu Sans;"><tt>在一般情况下，编辑存在的</tt></span><tt>migrations</tt><span style="font-family: DejaVu Sans;"><tt>不是一个好主意：因为这样你会给你自己或者你的合作成员产生额外的工作，头疼的原因是如果存在的</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>已经在</tt></span><tt>production</tt><span style="font-family: DejaVu Sans;"><tt>机器中运行。</tt><tt></tt></span><tt>Instead</tt><tt> </tt><tt>you</tt><tt> </tt><tt>should</tt><tt> </tt><tt>write</tt><tt> </tt><tt>a</tt><tt> </tt><tt>new</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>that</tt><tt> </tt><tt>performs</tt><tt> </tt><tt>the</tt><tt> </tt><tt>changes</tt><tt> </tt><tt>you</tt><tt> </tt><tt>require.</tt><span style="font-family: DejaVu Sans;"><tt>作为替代你应该编写一个新的</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>来执行你需要的更改。</tt><tt></tt></span><tt>Editing</tt><tt> </tt><tt>a</tt><tt> </tt><tt>freshly</tt><tt> </tt><tt>generated</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>that</tt><tt> </tt><tt>has</tt><tt> </tt><tt>not</tt><tt> </tt><tt>yet</tt><tt> </tt><tt>been</tt><tt> </tt><tt>committed</tt><tt> </tt><tt>to</tt><tt> </tt><tt>source</tt><tt> </tt><tt>control</tt><tt> </tt><tt>(or</tt><tt> </tt><tt>more</tt><tt> </tt><tt>generally</tt><tt> </tt><tt>which</tt><tt> </tt><tt>has</tt><tt> </tt><tt>not</tt><tt> </tt><tt>been</tt><tt> </tt><tt>propagated</tt><tt> </tt><tt>beyond</tt><tt> </tt><tt>your</tt><tt> </tt><tt>development</tt><tt> </tt><tt>machine)</tt><tt> </tt><tt>is</tt><tt> </tt><tt>relatively</tt><tt> </tt><tt>harmless.</tt><span style="font-family: DejaVu Sans;"><tt>编辑一个刚生成的还没有提交到软代码控制</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>（或者更一般的情况还没有传播出你的开发机器）相对危害较轻。</tt></span>
<h4><a name="supported-types"></a>1.4 Supported Types<span style="font-family: WenQuanYi Micro Hei;">支持的类型</span></h4>
Active Record supports the following types:Active Record<span style="font-family: DejaVu Sans;">支持如下类型：</span>
<ul>
	<li><tt>:primary_key</tt></li>
	<li><tt>:string</tt></li>
	<li><tt>:text</tt></li>
	<li><tt>:integer</tt></li>
	<li><tt>:float</tt></li>
	<li><tt>:decimal</tt> 10<span style="font-family: DejaVu Sans;">进制</span></li>
	<li><tt>:datetime</tt></li>
	<li><tt>:timestamp</tt></li>
	<li><tt>:time</tt></li>
	<li><tt>:date</tt></li>
	<li><tt>:binary</tt></li>
	<li><tt>:boolean</tt></li>
</ul>
These will be mapped onto an appropriate underlying<span style="font-family: DejaVu Sans;">底层</span>database type, for example with MySQL <tt>:string</tt> is mapped to <tt>VARCHAR(255)</tt>.<span style="font-family: DejaVu Sans;">这些将会被映射为合适底层数据库的类型，例如使用</span>MySQL :string<span style="font-family: DejaVu Sans;">类型将会映射成</span><tt>VARCHAR(255)</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>You can create columns of types not supported by Active Record when using the non-sexy syntax, for example<span style="font-family: DejaVu Sans;">你可以在创建</span>Active Record<span style="font-family: DejaVu Sans;">不支持的字段，使用</span>non-sexy<span style="font-family: DejaVu Sans;">语法，例如</span>

<code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code>

<code> </code><code>t.column</code><code> </code><code>:name,</code><code> </code><code>'polygon',</code><code> </code><code>:null</code> <code>=&gt;</code><code> </code><code>false</code>

<code>end</code>

This may however hinder<span style="font-family: DejaVu Sans;">阻碍</span>portability<span style="font-family: DejaVu Sans;">移植</span>to other databases.<span style="font-family: DejaVu Sans;">不过这可能会阻碍移植到其它数据库。</span>
<h3><a name="creating-a-migration"></a>2 Creating a Migration<span style="font-family: WenQuanYi Micro Hei;">新建一个</span>Migrateion</h3>
<h4><a name="creating-a-model"></a>2.1 Creating a Model<span style="font-family: WenQuanYi Micro Hei;">新建一个</span>Model</h4>
The model and scaffold generators will create migrations appropriate for adding a new model.model<span style="font-family: DejaVu Sans;">和</span>generators<span style="font-family: DejaVu Sans;">创建器会为添加的新的</span>model<span style="font-family: DejaVu Sans;">创建合适的</span>migrations<span style="font-family: DejaVu Sans;">。</span>This migration will already contain instructions for creating the relevant<span style="font-family: DejaVu Sans;">有关</span>table.<span style="font-family: DejaVu Sans;">这个</span>migration<span style="font-family: DejaVu Sans;">已经包含在有关创建的的表的说明中。</span>If you tell Rails what columns you want then statements<span style="font-family: DejaVu Sans;">声明</span>for adding those will also be created. For example, running<span style="font-family: DejaVu Sans;">如果你告诉</span>Rails<span style="font-family: DejaVu Sans;">将你随后声明的字段添加到创建</span>migrations<span style="font-family: DejaVu Sans;">中，例如，运行</span>

<code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>model</code><code> </code><code>Product</code><code> </code><code>name:string</code><code> </code><code>description:text</code>

<code>will</code><code> </code><code>create</code><code> </code><code>a</code><code> </code><code>migration</code><code> </code><code>that</code><code> </code><code>looks</code><code> </code><code>like</code><code> </code><code>this</code><code> </code><span style="font-family: DejaVu Sans;"><code>（</code></span><code>rails</code><span style="font-family: DejaVu Sans;"><code>）将会新建一个像这样的</code></span><code>migraion</code><span style="font-family: DejaVu Sans;"><code>：</code></span>

<code>class</code><code> </code><code>CreateProducts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code>

<code> </code><code>def</code> <code>change</code>

<code> </code><code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code>

<code> </code><code>t.string</code><code> </code><code>:name</code>

<code> </code><code>t.text</code><code> </code><code>:description</code>

&nbsp;

<code> </code><code>t.timestamps</code>

<code> </code><code>end</code>

<code> </code><code>end</code>

<code>end</code>

<code>You</code><code> </code><code>can</code><code> </code><code>append</code><code> </code><code>as</code><code> </code><code>many</code><code> </code><code>column</code><code> </code><code>name/type</code><code> </code><code>pairs</code><code> </code><code>as</code><code> </code><code>you</code><code> </code><code>want.</code><span style="font-family: DejaVu Sans;"><code>你可以随意增加字段或者类型对。</code><code></code></span><code>By</code><code> </code><code>default</code><code> </code><tt>t.timestamps</tt><code> </code><code>(which</code><code> </code><code>creates</code><code> </code><code>the</code><code> </code><tt>updated_at</tt><code> </code><code>and</code><code> </code><tt>created_at</tt><code> </code><code>columns</code><code> </code><code>that</code><code> </code><code>are</code><code> </code><code>automatically</code><code> </code><code>populated</code><code> </code><code>by</code><code> </code><code>Active</code><code> </code><code>Record)</code><code> </code><code>will</code><code> </code><code>be</code><code> </code><code>added</code><code> </code><code>for</code><code> </code><code>you.</code><span style="font-family: DejaVu Sans;"><code>默认的</code><code></code></span><code>t.timestamps</code><span style="font-family: DejaVu Sans;"><code>（</code></span><code>Active</code><code> </code><code>Record</code><code> </code><span style="font-family: DejaVu Sans;"><code>会自动生成</code></span><tt>updated_at</tt><span style="font-family: DejaVu Sans;"><code>和</code></span><tt>created_at</tt><span style="font-family: DejaVu Sans;"><tt>字段</tt><code>）会子添加在你的表中。</code></span>
<h4><a name="creating-a-standalone-migration"></a>2.2 Creating a Standalone Migration<span style="font-family: WenQuanYi Micro Hei;">新建一个独立的</span>Migration</h4>
If you are creating migrations for other purposes (for example to add a column to an existing table) then you can use the migration generator:<span style="font-family: DejaVu Sans;">如果你正在因为其他的目的新建</span>migrations<span style="font-family: DejaVu Sans;">（例如添加一个字段到一个存在的表）你可以使用</span>migration<span style="font-family: DejaVu Sans;">创建器：</span>

<code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>migration</code><code> </code><code>AddPartNumberToProducts</code>

This will create an empty but appropriately named migration:<span style="font-family: DejaVu Sans;">这里会新建一个空的但是合适的</span>migration<span style="font-family: DejaVu Sans;">：</span>

<code>class</code> <code>AddPartNumberToProducts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code>

<code> </code><code>def</code> <code>change</code>

<code> </code><code>end</code>

<code>end</code>

If the migration name is of the form “AddXXXToYYY” or “RemoveXXXFromYYY” and is followed by a list of column names and types then a migration containing the appropriate <tt>add_column</tt> and <tt>remove_column</tt> statements will be created.<span style="font-family: DejaVu Sans;">如果</span>migration<span style="font-family: DejaVu Sans;">命名为<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>AddXXXToYYY”<span style="font-family: DejaVu Sans;">或<span style="font-family: Liberation Serif,Times New Roman,serif;"> “</span></span>RemoveXXXFromYYY”<span style="font-family: DejaVu Sans;">格式并且后跟有一些字段名称或类型，那么一个</span>migration<span style="font-family: DejaVu Sans;">包含合适的</span><tt>add_column</tt><span style="font-family: DejaVu Sans;">和</span><tt>remove_column</tt><span style="font-family: DejaVu Sans;"><tt>将会被新建。</tt></span>

<code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>migration</code><code> </code><code>AddPartNumberToProducts</code><code> </code><code>part_number:string</code>

<code>ps</code><span style="font-family: DejaVu Sans;"><code>：如果已经创建了一个</code></span><code>AddPartNumberToProducts</code><span style="font-family: DejaVu Sans;"><code>那么运行</code></span><code>rails</code><code> </code><code>generate</code><code> </code><code>migration</code><code> </code><code>AddPartNumberToProducts</code><code> </code><code>part_number:string</code><code> </code><code>-f</code><span style="font-family: DejaVu Sans;"><code>进行覆盖新建</code></span>

<code>will</code><code> </code><code>generate</code><span style="font-family: DejaVu Sans;"><code>将会生成：</code></span>

<code>class</code><code> </code><code>AddPartNumberToProducts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code>

<code> </code><code>def</code> <code>change</code>

<code> </code><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:part_number,</code><code> </code><code>:string</code>

<code> </code><code>end</code>

<code>end</code>

<code>Similarly,</code><span style="font-family: DejaVu Sans;"><code>同样，</code></span>

<code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>migration</code><code> </code><code>RemovePartNumberFromProducts</code><code> </code><code>part_number:string</code>

<code>generates</code><span style="font-family: DejaVu Sans;"><code>生成</code></span>

<code>class</code><code> </code><code>RemovePartNumberFromProducts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code>

<code> </code><code>def</code> <code>up</code>

<code> </code><code>remove_column</code><code> </code><code>:products,</code><code> </code><code>:part_number</code>

<code> </code><code>end</code>

&nbsp;

<code> </code><code>def</code> <code>down</code>

<code> </code><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:part_number,</code><code> </code><code>:string</code>

<code> </code><code>end</code>

<code>end</code>

<code>You</code><code> </code><code>are</code><code> </code><code>not</code><code> </code><code>limited</code><code> </code><code>to</code><code> </code><code>one</code><code> </code><code>magically</code><span style="font-family: DejaVu Sans;"><code>神奇</code><code></code></span><code>generated</code><code> </code><code>column,</code><code> </code><code>for</code><code> </code><code>example</code><span style="font-family: DejaVu Sans;"><code>你不限制于一次只输入一个字段，例如</code></span>

<code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>migration</code><code> </code><code>AddDetailsToProducts</code><code> </code><code>part_number:string</code><code> </code><code>price:decimal</code>

<code>generates</code><span style="font-family: DejaVu Sans;"><code>生成</code></span>

<code>class</code><code> </code><code>AddDetailsToProducts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code>

<code> </code><code>def</code> <code>change</code>

<code> </code><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:part_number,</code><code> </code><code>:string</code>

<code> </code><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:price,</code><code> </code><code>:decimal</code>

<code> </code><code>end</code>

<code>end</code>

<code>As</code><code> </code><code>always,</code><code> </code><code>what</code><code> </code><code>has</code><code> </code><code>been</code><code> </code><code>generated</code><code> </code><code>for</code><code> </code><code>you</code><code> </code><code>is</code><code> </code><code>just</code><code> </code><code>a</code><code> </code><code>starting</code><code> </code><code>point.</code><code> </code><code>You</code><code> </code><code>can</code><code> </code><code>add</code><code> </code><code>or</code><code> </code><code>remove</code><code> </code><code>from</code><code> </code><code>it</code><code> </code><code>as</code><code> </code><code>you</code><code> </code><code>see</code><code> </code><code>fit.</code><span style="font-family: DejaVu Sans;"><code>一如往常，使用</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>创建器生成的</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>只是一个起点，你可以添加或删除其中的字段直到你满意为止。</code></span>

&nbsp;

<code>The</code><code> </code><code>generated</code><code> </code><code>migration</code><code> </code><code>file</code><code> </code><code>for</code><code> </code><code>destructive</code><code> </code><code>migrations</code><code> </code><code>will</code><code> </code><code>still</code><code> </code><code>be</code><code> </code><code>old-style</code><code> </code><code>using</code><code> </code><code>the</code><code> </code><tt>up</tt><code> </code><code>and</code><code> </code><tt>down</tt><code> </code><code>methods.</code><span style="font-family: DejaVu Sans;"><code>在创建的</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>文件中对</code></span><code>migrations</code><span style="font-family: DejaVu Sans;"><code>进行破坏性的操作仍然使用老式的</code></span><code>up</code><span style="font-family: DejaVu Sans;"><code>和</code></span><code>down</code><span style="font-family: DejaVu Sans;"><code>方法。</code><code></code></span><code>This</code><code> </code><code>is</code><code> </code><code>because</code><code> </code><code>Rails</code><code> </code><code>doesn</code><code>’</code><code>t</code><code> </code><code>know</code><code> </code><code>the</code><code> </code><code>original</code><code> </code><code>data</code><code> </code><code>types</code><code> </code><code>defined</code><code> </code><code>when</code><code> </code><code>you</code><code> </code><code>made</code><code> </code><code>the</code><code> </code><code>original</code><code> </code><code>changes.</code><span style="font-family: DejaVu Sans;"><code>这是因为当你对初始</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>做了更改，</code></span><code>Rails</code><span style="font-family: DejaVu Sans;"><code>不知道原始的数据类型定义。</code></span>

&nbsp;
<h3><a name="writing-a-migration"></a>3 Writing a Migration</h3>
Once you have created your migration using one of the generators it’s time to get to work!<span style="font-family: DejaVu Sans;">一旦你已经使用一种创建器创建了你的</span>migration<span style="font-family: DejaVu Sans;">，现在是时候开始工作了。</span>
<h4><a name="creating-a-table"></a>3.1 Creating a Table<span style="font-family: WenQuanYi Micro Hei;">创建一个表</span></h4>
Migration method <tt>create_table</tt> will be one of your workhorses. A typical use would be Migration<span style="font-family: DejaVu Sans;">方法</span><tt>create_table</tt><span style="font-family: DejaVu Sans;"><tt>将会是一个你的驮马。下面是他的典型形式</tt></span>

<code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code>

<code> </code><code>t.string</code><code> </code><code>:name</code>

<code>end</code>

which creates a <tt>products</tt> table with a column called <tt>name</tt> (and as discussed below, an implicit <tt>id</tt> column).<span style="font-family: DejaVu Sans;">上面的代码会创建一个</span>products<span style="font-family: DejaVu Sans;">表，其中包含了一个</span>name<span style="font-family: DejaVu Sans;">字段（和下面讨论的一样，一个隐藏的</span>id<span style="font-family: DejaVu Sans;">字段）</span>

The object yielded to the block allows you to create columns on the table.<span style="font-family: DejaVu Sans;">这个</span>migration<span style="font-family: DejaVu Sans;">类产生代码块让你创建表中的字段。</span>There are two ways of doing this: The first (traditional) form looks like<span style="font-family: DejaVu Sans;">有两种方法创建字段：首先（传统的）方式看起来像这样</span>

<code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code>

<code> </code><code>t.column</code><code> </code><code>:name,</code><code> </code><code>:string,</code><code> </code><code>:null</code> <code>=&gt;</code><code> </code><code>false</code>

<code>end</code>

the second form, the so called “sexy” migration, drops the somewhat redundant <tt>column</tt> method.<span style="font-family: DejaVu Sans;">第二种方式，也称为<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>sexy” migration<span style="font-family: DejaVu Sans;">，丢掉了有些冗余的</span>column<span style="font-family: DejaVu Sans;">方法。</span>Instead, the <tt>string</tt>, <tt>integer</tt>, etc. methods create a column of that type.<span style="font-family: DejaVu Sans;">作为替代，如</span>string,interger<span style="font-family: DejaVu Sans;">等等方法创建相应类型的字段。</span>Subsequent parameters are the same.<span style="font-family: DejaVu Sans;">其后的参赛也在同一个字段中。</span>

<code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code>

<code> </code><code>t.string</code><code> </code><code>:name,</code><code> </code><code>:null</code> <code>=&gt;</code><code> </code><code>false</code>

<code>end</code>

<code>HABTM,</code><code> </code><code>hasAndBelongsToMany</code><code> </code><span style="font-family: DejaVu Sans;"><code>这是</code></span><code>Active</code><code> </code><code>Recored</code><span style="font-family: DejaVu Sans;"><code>功能里面比较</code><code><span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></code><code>复杂</code><code><span style="font-family: Liberation Serif,Times New Roman,serif;">”</span></code><code>的一个东西。简单的来说，就是你有一个帖子，你给这个帖子定义了多个</code></span><code>tag</code><span style="font-family: DejaVu Sans;"><code>，</code><code></code><code>但是实际上</code></span><code>tag</code><span style="font-family: DejaVu Sans;"><code>也是独立的，一个</code></span><code>tag</code><span style="font-family: DejaVu Sans;"><code>会包含很多个不同的帖子。</code></span>

<code>By</code><code> </code><code>default</code><code> </code><tt>create_table</tt><code> </code><code>will</code><code> </code><code>create</code><code> </code><code>a</code><code> </code><code>primary</code><code> </code><code>key</code><code> </code><code>called</code><code> </code><tt>id</tt><code>.</code><span style="font-family: DejaVu Sans;"><code>通过默认的</code><code></code></span><tt>create_table</tt><span style="font-family: DejaVu Sans;"><tt>将会创建一个叫做</tt></span><tt>id</tt><span style="font-family: DejaVu Sans;"><tt>的主键。</tt><code></code></span><code>You</code><code> </code><code>can</code><code> </code><code>change</code><code> </code><code>the</code><code> </code><code>name</code><code> </code><code>of</code><code> </code><code>the</code><code> </code><code>primary</code><code> </code><code>key</code><code> </code><code>with</code><code> </code><code>the</code><code> </code><tt>:primary_key</tt><code> </code><code>option</code><code> </code><code>(don</code><code>’</code><code>t</code><code> </code><code>forget</code><code> </code><code>to</code><code> </code><code>update</code><code> </code><code>the</code><code> </code><code>corresponding</code><span style="font-family: DejaVu Sans;"><code>相应的</code><code></code></span><code>model)</code><code> </code><code>or</code><code> </code><code>if</code><code> </code><code>you</code><code> </code><code>don</code><code>’</code><code>t</code><code> </code><code>want</code><code> </code><code>a</code><code> </code><code>primary</code><code> </code><code>key</code><code> </code><code>at</code><code> </code><code>all</code><code> </code><code>(for</code><code> </code><code>example</code><code> </code><code>for</code><code> </code><code>a</code><code> </code><code>HABTM</code><code> </code><code>join</code><code> </code><code>table)</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>pass</code><code> </code><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>false</tt><code>.</code><span style="font-family: DejaVu Sans;"><code>你可以更改主键的名字通过使用</code></span><tt>:primary_key</tt><span style="font-family: DejaVu Sans;"><tt>选项（不要忘记更新其相应的</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>）或者你根本不想要主键（例如添加一个</tt></span><tt>HABTM</tt><span style="font-family: DejaVu Sans;"><tt>关系到表中）你可以通过</tt></span><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>false</tt><span style="font-family: DejaVu Sans;"><tt>。</tt><code></code></span><code>If</code><code> </code><code>you</code><code> </code><code>need</code><code> </code><code>to</code><code> </code><code>pass</code><code> </code><code>database</code><code> </code><code>specific</code><code> </code><code>options</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>place</code><code> </code><code>an</code><code> </code><code>SQL</code><code> </code><code>fragment</code><code> </code><code>in</code><code> </code><code>the</code><code> </code><tt>:options</tt><code> </code><code>option.</code><code> </code><code>For</code><code> </code><code>example</code><span style="font-family: DejaVu Sans;"><code>如果你需要数据库的特殊选项你可以放置一个</code></span><code>SQL</code><span style="font-family: DejaVu Sans;"><code>片段在</code></span><tt>:options</tt><span style="font-family: DejaVu Sans;"><tt>选项中。例如</tt></span>

<code>create_table</code><code> </code><code>:products,</code><code> </code><code>:options</code> <code>=&gt;</code><code> </code><code>"ENGINE=BLACKHOLE"</code> <code>do</code> <code>|t|</code>

<code> </code><code>t.string</code><code> </code><code>:name,</code><code> </code><code>:null</code> <code>=&gt;</code><code> </code><code>false</code>

<code>end</code>

will append <tt>ENGINE=BLACKHOLE</tt> to the SQL statement used to create the table (when using MySQL the default is <tt>ENGINE=InnoDB</tt>).<span style="font-family: DejaVu Sans;">将会添加</span><tt>ENGINE=BLACKHOLE</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>SQL</tt><span style="font-family: DejaVu Sans;"><tt>声明中用于创建表单（当使用</tt></span><tt>MySQL</tt><span style="font-family: DejaVu Sans;"><tt>默认的（</tt></span><tt>ENGINE</tt><span style="font-family: DejaVu Sans;"><tt>）是</tt></span><tt>InnoDB</tt><span style="font-family: DejaVu Sans;"><tt>）。</tt></span>
<h4><a name="changing-tables"></a><tt>3.2</tt><tt> </tt><tt>Changing</tt><tt> </tt><tt>Tables</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>更改表单</tt></span></h4>
A close cousin of <tt>create_table</tt> is <tt>change_table</tt>, used for changing existing tables. <tt>create_table</tt><span style="font-family: DejaVu Sans;"><tt>的一个近亲是</tt><tt></tt></span><tt>change_table</tt><span style="font-family: DejaVu Sans;"><tt>，用于更改存在的表单。</tt></span>It is used in a similar fashion to <tt>create_table</tt> but the object yielded to the block knows more tricks.<span style="font-family: DejaVu Sans;">它使用的是与</span><tt>create_table</tt><span style="font-family: DejaVu Sans;"><tt>类似的方法，但是其类产生的块能够知道更多的技巧。（如移除字段，重命名字段）</tt></span>For example<span style="font-family: DejaVu Sans;">例如</span>

<code>change_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code>

<code> </code><code>t.remove</code><code> </code><code>:description,</code><code> </code><code>:name</code>

<code> </code><code>t.string</code><code> </code><code>:part_number</code>

<code> </code><code>t.index</code><code> </code><code>:part_number</code>

<code> </code><code>t.rename</code><code> </code><code>:upccode,</code><code> </code><code>:upc_code</code>

<code>end</code>

removes the <tt>description</tt> and <tt>name</tt> columns, creates a <tt>part_number</tt> column and adds an index on it. Finally it renames the <tt>upccode</tt> column.<span style="font-family: DejaVu Sans;">移除</span><tt>description</tt><span style="font-family: DejaVu Sans;"><tt>字段和</tt></span><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>字段，创建一个</tt><tt></tt></span><tt>part_number</tt><span style="font-family: DejaVu Sans;"><tt>字段并且添加一个</tt></span><tt>index</tt><span style="font-family: DejaVu Sans;"><tt>（索引）给</tt><tt></tt></span><tt>part_number</tt><span style="font-family: DejaVu Sans;"><tt>。最后它重命名了</tt></span><code>:upccode</code><span style="font-family: DejaVu Sans;"><code>。</code></span>This is the same as doing<span style="font-family: DejaVu Sans;">下面的代码也可以达到同样的效果</span>

<code>remove_column</code><code> </code><code>:products,</code><code> </code><code>:description</code>

<code>remove_column</code><code> </code><code>:products,</code><code> </code><code>:name</code>

<code>add_column</code><code> </code><code>:products,</code><code> </code><code>:part_number,</code><code> </code><code>:string</code>

<code>add_index</code><code> </code><code>:products,</code><code> </code><code>:part_number</code>

<code>rename_column</code><code> </code><code>:products,</code><code> </code><code>:upccode,</code><code> </code><code>:upc_code</code>

&nbsp;

<tt>You</tt><tt> </tt><tt>don</tt><tt>’</tt><tt>t</tt><tt> </tt><tt>have</tt><tt> </tt><tt>to</tt><tt> </tt><tt>keep</tt><tt> </tt><tt>repeating</tt><tt> </tt><tt>the</tt><tt> </tt><tt>table</tt><tt> </tt><tt>name</tt><tt> </tt><tt>and</tt><tt> </tt><tt>it</tt><tt> </tt><tt>groups</tt><tt> </tt><tt>all</tt><tt> </tt><tt>the</tt><tt> </tt><tt>statements</tt><tt> </tt><tt>related</tt><tt> </tt><tt>to</tt><tt> </tt><tt>modifying</tt><tt> </tt><tt>one</tt><tt> </tt><tt>particular</tt><tt> </tt><tt>table.</tt><span style="font-family: DejaVu Sans;"><tt>你不必重复表单名称和组相关的所有声明，（而</tt><tt>只需要重复）修改表的一部分。</tt><tt></tt></span><tt>The</tt><tt> </tt><tt>individual</tt><span style="font-family: DejaVu Sans;"><tt>个别</tt><tt></tt></span><tt>transformation</tt><span style="font-family: DejaVu Sans;"><tt>转换</tt><tt></tt></span><tt>names</tt><tt> </tt><tt>are</tt><tt> </tt><tt>also</tt><tt> </tt><tt>shorter,</tt><tt> </tt><tt>for</tt><tt> </tt><tt>example</tt><tt> </tt><tt>remove_column</tt><tt> </tt><tt>becomes</tt><tt> </tt><tt>just</tt><tt> </tt><tt>remove</tt><tt> </tt><tt>and</tt><tt> </tt><tt>add_index</tt><tt> </tt><tt>becomes</tt><tt> </tt><tt>just</tt><tt> </tt><tt>index.</tt><span style="font-family: DejaVu Sans;"><tt>个别的转换方法的名称也更加简短了，例如</tt><tt></tt></span><tt>remove_column</tt><span style="font-family: DejaVu Sans;"><tt>变成</tt></span><tt>remove</tt><span style="font-family: DejaVu Sans;"><tt>，</tt><tt></tt></span><tt>add_index</tt><span style="font-family: DejaVu Sans;"><tt>变成</tt></span><tt>index</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span><tt>##</tt><span style="font-family: DejaVu Sans;"><tt>这里是说的新旧两种方法比较</tt></span>
<h4><a name="special-helpers"></a><tt>3.3</tt><tt> </tt><tt>Special</tt><tt> </tt><tt>Helpers</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>个别的</tt></span><tt>Helpers</tt></h4>
<a name="result_box"></a><tt>Active</tt><tt> </tt><tt>Record</tt><tt> </tt><tt>provides</tt><tt> </tt><tt>some</tt><tt> </tt><tt>shortcuts</tt><tt> </tt><tt>for</tt><tt> </tt><tt>common</tt><tt> </tt><tt>functionality.Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>提供了一些一般功能的快捷操作。</tt><tt></tt></span><tt>It</tt><tt> </tt><tt>is</tt><tt> </tt><tt>for</tt><tt> </tt><tt>example</tt><tt> </tt><tt>very</tt><tt> </tt><tt>common</tt><tt> </tt><tt>to</tt><tt> </tt><tt>add</tt><tt> </tt><tt>both</tt><tt> </tt><tt>the</tt><tt> </tt><tt>created_at</tt><tt> </tt><tt>and</tt><tt> </tt><tt>updated_at</tt><tt> </tt><tt>columns</tt><tt> </tt><tt>and</tt><tt> </tt><tt>so</tt><tt> </tt><tt>there</tt><tt> </tt><tt>is</tt><tt> </tt><tt>a</tt><tt> </tt><tt>method</tt><tt> </tt><tt>that</tt><tt> </tt><tt>does</tt><tt> </tt><tt>exactly</tt><tt> </tt><tt>that:</tt><span style="font-family: DejaVu Sans;"><tt>例如很常见的通过</tt></span><tt>created_at</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>updated_at</tt><span style="font-family: DejaVu Sans;"><tt>添加</tt><tt>字段等等</tt><tt>，这里是一个方法的简要例子</tt></span>

<code>create_table</code><code> </code><code>:products</code><tt> </tt><code>do</code><tt> </tt><code>|t|</code>

<code> </code><code>t.timestamps</code>

<code>end</code>

<tt>will</tt><tt> </tt><tt>create</tt><tt> </tt><tt>a</tt><tt> </tt><tt>new</tt><tt> </tt><tt>products</tt><tt> </tt><tt>table</tt><tt> </tt><tt>with</tt><tt> </tt><tt>those</tt><tt> </tt><tt>two</tt><tt> </tt><tt>columns</tt><tt> </tt><tt>(plus</tt><tt> </tt><tt>the</tt><tt> </tt><tt>id</tt><tt> </tt><tt>column)</tt><tt> </tt><tt>whereas.</tt><span style="font-family: DejaVu Sans;"><tt>将会新建一个</tt></span><tt>products</tt><span style="font-family: DejaVu Sans;"><tt>表单，有两个字段（加上</tt></span><tt>id</tt><span style="font-family: DejaVu Sans;"><tt>字段）。</tt></span>

<code>change_table</code><code> </code><code>:products</code><tt> </tt><code>do</code><tt> </tt><code>|t|</code>

<code> </code><code>t.timestamps</code>

<code>end</code>

<tt>adds</tt><tt> </tt><tt>those</tt><tt> </tt><tt>columns</tt><tt> </tt><tt>to</tt><tt> </tt><tt>an</tt><tt> </tt><tt>existing</tt><tt> </tt><tt>table.</tt><span style="font-family: DejaVu Sans;"><tt>添加一些字段到存在的表中。</tt></span>

&nbsp;

<tt>The</tt><tt> </tt><tt>other</tt><tt> </tt><tt>helper</tt><tt> </tt><tt>is</tt><tt> </tt><tt>called</tt><tt> </tt><tt>references</tt><tt> </tt><tt>(also</tt><tt> </tt><tt>available</tt><tt> </tt><tt>as</tt><tt> </tt><tt>belongs_to).</tt><tt> </tt><tt>In</tt><tt> </tt><tt>its</tt><tt> </tt><tt>simplest</tt><tt> </tt><tt>form</tt><tt> </tt><tt>it</tt><tt> </tt><tt>just</tt><tt> </tt><tt>adds</tt><tt> </tt><tt>some</tt><tt> </tt><tt>readability</tt><span style="font-family: DejaVu Sans;"><tt>另一个</tt></span><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>被称为</tt><tt></tt></span><tt>references</tt><span style="font-family: DejaVu Sans;"><tt>（也可用</tt></span><tt>belongs_to</tt><span style="font-family: DejaVu Sans;"><tt>）。在其最简单的形式，它仅仅增加一些可读性。</tt></span>

<code>create_table</code><code> </code><code>:products</code><tt> </tt><code>do</code><tt> </tt><code>|t|</code>

<code> </code><code>t.references</code><code> </code><code>:category</code>

<code>end</code>

<tt>will</tt><tt> </tt><tt>create</tt><tt> </tt><tt>a</tt><tt> </tt><tt>category_id</tt><tt> </tt><tt>column</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>appropriate</tt><tt> </tt><tt>type.</tt><span style="font-family: DejaVu Sans;"><tt>将会创建一个适当形式的</tt></span><tt>category_id</tt><span style="font-family: DejaVu Sans;"><tt>字段。</tt><tt></tt></span><tt>Note</tt><tt> </tt><tt>that</tt><tt> </tt><tt>you</tt><tt> </tt><tt>pass</tt><tt> </tt><tt>the</tt><tt> </tt><tt>model</tt><tt> </tt><tt>name,</tt><tt> </tt><tt>not</tt><tt> </tt><tt>the</tt><tt> </tt><tt>column</tt><tt> </tt><tt>name.</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt> </tt><tt>adds</tt><tt> </tt><tt>the</tt><tt> </tt><tt>_id</tt><tt> </tt><tt>for</tt><tt> </tt><tt>you.</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>注意那是你关联的</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>名称，不是字段名称。</tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>会给你添加</tt></span><tt>_id</tt><span style="font-family: DejaVu Sans;"><tt>。</tt><tt></tt></span><tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>have</tt><tt> </tt><tt>polymorphic</tt><span style="font-family: DejaVu Sans;"><tt>多态性</tt><tt></tt></span><tt>belongs_to</tt><tt> </tt><tt>associations</tt><tt> </tt><tt>then</tt><tt> </tt><tt>references</tt><tt> </tt><tt>will</tt><tt> </tt><tt>add</tt><tt> </tt><tt>both</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>columns</tt><tt> </tt><tt>required:</tt>

<code>create_table</code><code> </code><code>:products</code><tt> </tt><code>do</code><tt> </tt><code>|t|</code>

<code> </code><code>t.references</code><code> </code><code>:attachment,</code><code> </code><code>:polymorphic</code> <code>=&gt;</code><code> </code><code>{:default</code> <code>=&gt;</code><code> </code><code>'Photo'}</code>

<code>end</code>

<tt>will</tt><tt> </tt><tt>add</tt><tt> </tt><tt>an</tt><tt> </tt><tt>attachment_id</tt><tt> </tt><tt>column</tt><tt> </tt><tt>and</tt><tt> </tt><tt>a</tt><tt> </tt><tt>string</tt><tt> </tt><tt>attachment_type</tt><tt> </tt><tt>column</tt><tt> </tt><tt>with</tt><tt> </tt><tt>a</tt><tt> </tt><tt>default</tt><tt> </tt><tt>value</tt><tt> </tt><tt>of</tt><tt> ‘</tt><tt>Photo</tt><tt>’</tt><tt>.</tt><span style="font-family: DejaVu Sans;"><tt>将会添加一个</tt></span><tt>attachment_id</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>和一个</tt><tt></tt><tt>默认值是</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">‘</span></tt></span><tt>Photo</tt><tt>’</tt><span style="font-family: DejaVu Sans;"><tt>的字符串</tt></span><tt>attachment_type</tt><span style="font-family: DejaVu Sans;"><tt>字段。</tt></span>

<tt>The</tt><tt> </tt><tt>references</tt><tt> </tt><tt>helper</tt><tt> </tt><tt>does</tt><tt> </tt><tt>not</tt><tt> </tt><tt>actually</tt><tt> </tt><tt>create</tt><tt> </tt><tt>foreign</tt><tt> </tt><tt>key</tt><tt> </tt><tt>constraints</tt><tt> </tt><tt>for</tt><tt> </tt><tt>you.</tt><tt> </tt><tt>You</tt><tt> </tt><tt>will</tt><tt> </tt><tt>need</tt><tt> </tt><tt>to</tt><tt> </tt><tt>use</tt><tt> </tt><tt>execute</tt><tt> </tt><tt>for</tt><tt> </tt><tt>that</tt><tt> </tt><tt>or</tt><tt> </tt><tt>a</tt><tt> </tt><tt>plugin</tt><tt> </tt><tt>that</tt><tt> </tt><tt>adds</tt><tt> </tt><a href="http://guides.rubyonrails.org/migrations.html#active-record-and-referential-integrity"><span style="color: #000080;"><span style="text-decoration: underline;">foreign</span></span><span style="color: #000080;"><span style="text-decoration: underline;">key</span></span><span style="color: #000080;"><span style="text-decoration: underline;">support</span></span></a><tt>.references</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>没有真正创建外键约束给你。你需要使用</tt></span><tt>execute</tt><span style="font-family: DejaVu Sans;"><tt>或者一个</tt></span><tt>plugin</tt><span style="font-family: DejaVu Sans;"><tt>来添加外键支持。</tt></span>

<tt>If</tt><tt> </tt><tt>the</tt><tt> </tt><tt>helpers</tt><tt> </tt><tt>provided</tt><tt> </tt><tt>by</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt> </tt><tt>aren</tt><tt>’</tt><tt>t</tt><tt> </tt><tt>enough</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>use</tt><tt> </tt><tt>the</tt><tt> </tt><tt>execute</tt><tt> </tt><tt>function</tt><tt> </tt><tt>to</tt><tt> </tt><tt>execute</tt><tt> </tt><tt>arbitrary</tt><tt> </tt><tt>SQL.</tt><span style="font-family: DejaVu Sans;"><tt>如果</tt><tt></tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>提供的</tt></span><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>不足以满足，你可以使用</tt><tt></tt></span><tt>execute</tt><span style="font-family: DejaVu Sans;"><tt>功能来执行任意</tt></span><tt>SQL</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

<tt>For</tt><tt> </tt><tt>more</tt><tt> </tt><tt>details</tt><tt> </tt><tt>and</tt><tt> </tt><tt>examples</tt><tt> </tt><tt>of</tt><tt> </tt><tt>individual</tt><span style="font-family: DejaVu Sans;"><tt>个别</tt><tt></tt></span><tt>methods</tt><tt> </tt><tt>check</tt><tt> </tt><tt>the</tt><tt> </tt><tt>API</tt><tt> </tt><tt>documentation,</tt><tt> </tt><tt>in</tt><tt> </tt><tt>particular</tt><tt> </tt><tt>the</tt><tt> </tt><tt>documentation</tt><tt> </tt><tt>for</tt><tt> </tt><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html">ActiveRecord::ConnectionAdapters::SchemaStatements</a></span></span><tt> </tt><tt>(which</tt><tt> </tt><tt>provides</tt><tt> </tt><tt>the</tt><tt> </tt><tt>methods</tt><tt> </tt><tt>available</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>up</tt><tt> </tt><tt>and</tt><tt> </tt><tt>down</tt><tt> </tt><tt>methods),</tt><tt> </tt><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html">ActiveRecord::ConnectionAdapters::TableDefinition</a></span></span><tt> </tt><tt>(which</tt><tt> </tt><tt>provides</tt><tt> </tt><tt>the</tt><tt> </tt><tt>methods</tt><tt> </tt><tt>available</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>object</tt><tt> </tt><tt>yielded</tt><tt> </tt><tt>by</tt><tt> </tt><tt>create_table)</tt><tt> </tt><tt>and</tt><tt> </tt><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Table.html">ActiveRecord::ConnectionAdapters::Table</a></span></span><tt> </tt><tt>(which</tt><tt> </tt><tt>provides</tt><tt> </tt><tt>the</tt><tt> </tt><tt>methods</tt><tt> </tt><tt>available</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>object</tt><tt> </tt><tt>yielded</tt><tt> </tt><tt>by</tt><tt> </tt><tt>change_table).</tt>
<h4><a name="writing-your-change-method"></a><tt>3.4</tt><tt> </tt><tt>Writing</tt><tt> </tt><tt>Your</tt><tt> </tt><tt>change</tt><tt> </tt><tt>Method</tt></h4>
The <tt>change</tt> method removes the need to write both <tt>up</tt> and <tt>down</tt> methods in those cases that Rails know how to revert the changes automatically. <tt>change(migration</tt><span style="font-family: DejaVu Sans;"><tt>类方法</tt></span><tt>)</tt><span style="font-family: DejaVu Sans;"><tt>删除需要写进</tt></span><tt>up</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>down</tt><span style="font-family: DejaVu Sans;"><tt>的方法，那样</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>知道怎样自动撤销更改。</tt></span>Currently, the <tt>change</tt> method supports only these migration definitions:<span style="font-family: DejaVu Sans;">目前，</span>change<span style="font-family: DejaVu Sans;">方法支持如下的</span>migration<span style="font-family: DejaVu Sans;">定义：</span>
<ul>
	<li><tt>add_column</tt></li>
	<li><tt>add_index</tt></li>
	<li><tt>add_timestamps</tt></li>
	<li><tt>create_table</tt></li>
	<li><tt>remove_timestamps</tt></li>
	<li><tt>rename_column</tt></li>
	<li><tt>rename_index</tt></li>
	<li><tt>rename_table</tt></li>
</ul>
If you’re going to use other methods, you’ll have to write the <tt>up</tt> and <tt>down</tt> methods normally.<span style="font-family: DejaVu Sans;">如果你打算使用其他方法，你可以常规的写</span>up<span style="font-family: DejaVu Sans;">和</span>down<span style="font-family: DejaVu Sans;">方法。</span>
<h4><a name="writing-your-down-method"></a>3.5 Writing Your <tt>down</tt> Method</h4>
The <tt>down</tt> method of your migration should revert the transformations done by the <tt>up</tt> method.<span style="font-family: DejaVu Sans;">迁移的</span>down<span style="font-family: DejaVu Sans;">方法应该撤销</span>up<span style="font-family: DejaVu Sans;">方法做的转换。</span>In other words the database schema<span style="font-family: DejaVu Sans;">架构</span>should be unchanged if you do an <tt>up</tt> followed by a <tt>down</tt>.<span style="font-family: DejaVu Sans;">换句话说数据库架构应该没有改变，如果你在</span>up<span style="font-family: DejaVu Sans;">方法过后又执行</span>down<span style="font-family: DejaVu Sans;">方法。</span>For example if you create a table in the <tt>up</tt> method you should drop it in the <tt>down</tt> method. It is wise to do things in precisely the reverse order to in the <tt>up</tt> method.<span style="font-family: DejaVu Sans;">例如如果你创建使用</span>up<span style="font-family: DejaVu Sans;">方法一个表你应该在</span>down<span style="font-family: DejaVu Sans;">方法中去除它。</span>For example

<code>class</code> <code>ExampleMigration</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code>

&nbsp;

<code> </code><code>def</code> <code>up</code>

<code> </code><code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code>

<code> </code><code>t.references</code><code> </code><code>:category</code>

<code> </code><code>end</code>

<code> </code><code>#add</code><code> </code><code>a</code><code> </code><code>foreign</code><code> </code><code>key</code>

<code> </code><code>execute</code><code> </code><code>&lt;&lt;-SQL</code>

<code> </code><code>ALTER</code> <code>TABLE</code> <code>products</code>

<code> </code><code>ADD</code> <code>CONSTRAINT</code> <code>fk_products_categories</code>

<code> </code><code>FOREIGN</code> <code>KEY</code> <code>(category_id)</code>

<code> </code><code>REFERENCES</code> <code>categories(id)</code>

<code> </code><code>SQL</code>

&nbsp;

<code> </code><code>add_column</code><code> </code><code>:users,</code><code> </code><code>:home_page_url,</code><code> </code><code>:string</code>

&nbsp;

<code> </code><code>rename_column</code><code> </code><code>:users,</code><code> </code><code>:email,</code><code> </code><code>:email_address</code>

<code> </code><code>end</code>

&nbsp;

<code> </code><code>def</code> <code>down</code>

<code> </code><code>rename_column</code><code> </code><code>:users,</code><code> </code><code>:email_address,</code><code> </code><code>:email</code>

<code> </code><code>remove_column</code><code> </code><code>:users,</code><code> </code><code>:home_page_url</code>

<code> </code><code>execute</code><code> </code><code>"ALTER</code><code> </code><code>TABLE</code><code> </code><code>products</code><code> </code><code>DROP</code><code> </code><code>FOREIGN</code><code> </code><code>KEY</code><code> </code><code>fk_products_categories"</code>

<code> </code><code>drop_table</code><code> </code><code>:products</code>

<code> </code><code>end</code>

<code>end</code>

Sometimes your migration will do something which is just plain irreversible<span style="font-family: DejaVu Sans;">不可逆转的</span>, for example it might destroy some data.<span style="font-family: DejaVu Sans;">有时候你的</span>migration<span style="font-family: DejaVu Sans;">将会做一些不可逆转的事情。例如它可能会删除一些数据。</span>In cases like those when you can’t reverse the migration you can raise <tt>ActiveRecord::IrreversibleMigration</tt> from your <tt>down</tt> method.<span style="font-family: DejaVu Sans;">在这样的情况中你不能撤销</span>migration<span style="font-family: DejaVu Sans;">你可以在你的</span>down<span style="font-family: DejaVu Sans;">方法中</span>raise <tt>ActiveRecord::IrreversibleMigration</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>If someone tries to revert your migration an error message will be displayed saying that it can’t be done.<span style="font-family: DejaVu Sans;">如果有人尝试撤销你的</span>migration<span style="font-family: DejaVu Sans;">那么一个错误消息将会被显示<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>it can’t be done”<span style="font-family: DejaVu Sans;">。</span>
<h3><a name="running-migrations"></a>4 Running Migrations</h3>
Rails provides a set of rake tasks to work with migrations which boils down to running certain sets of migrations. Rails<span style="font-family: DejaVu Sans;">提供给</span>migrations<span style="font-family: DejaVu Sans;">一组</span>rake<span style="font-family: DejaVu Sans;">任务，它大致归纳于运行若干的</span>migrations<span style="font-family: DejaVu Sans;">。</span>The very first migration related rake task you use will probably be <tt>db:migrate</tt>.<span style="font-family: DejaVu Sans;">你使用的非常靠前的</span>migration<span style="font-family: DejaVu Sans;">相应于</span>rake<span style="font-family: DejaVu Sans;">的任务恰好是</span><tt>db:migrate</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>In its most basic form it just runs the <tt>up</tt> method for all the migrations that have not yet been run.<span style="font-family: DejaVu Sans;">其中它是最基本的形式，它仅仅运行</span>migrations <span style="font-family: DejaVu Sans;">还没被运行的</span>up<span style="font-family: DejaVu Sans;">方法。</span>If there are no such migrations it exits.<span style="font-family: DejaVu Sans;">如果没有这样的迁移它将会退出。</span>

Note that running the <tt> </tt><tt>db:migrate</tt> also invokes the <tt>db:schema:dump</tt> task, which will update your db/schema.rb file to match the structure of your database.<span style="font-family: DejaVu Sans;">注意运行</span><tt>db:migrate</tt><span style="font-family: DejaVu Sans;"><tt>也调用了</tt><tt></tt></span><tt>db:schema:dump</tt><span style="font-family: DejaVu Sans;"><tt>任务，它将会更新你的</tt><tt></tt></span><tt>db/schema.rb</tt><span style="font-family: DejaVu Sans;"><tt>来和你的数据库匹配。</tt></span>

<tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>specify</tt><tt> </tt><tt>a</tt><tt> </tt><tt>target</tt><tt> </tt><tt>version,</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt> </tt><tt>will</tt><tt> </tt><tt>run</tt><tt> </tt><tt>the</tt><tt> </tt><tt>required</tt><tt> </tt><tt>migrations</tt><tt> </tt><tt>(up</tt><tt> </tt><tt>or</tt><tt> </tt><tt>down)</tt><tt> </tt><tt>until</tt><tt> </tt><tt>it</tt><tt> </tt><tt>has</tt><tt> </tt><tt>reached</tt><tt> </tt><tt>the</tt><tt> </tt><tt>specified</tt><tt> </tt><tt>version.</tt><span style="font-family: DejaVu Sans;"><tt>如果你特别（指定了）一个目标版本，</tt><tt></tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>将会运行所请求的</tt></span><tt>migrations</tt><span style="font-family: DejaVu Sans;"><tt>（</tt></span><tt>up</tt><span style="font-family: DejaVu Sans;"><tt>或</tt></span><tt>down</tt><span style="font-family: DejaVu Sans;"><tt>）直到它已经达成了（与）指定版本（的匹配）。</tt><tt></tt></span><tt>The</tt><tt> </tt><tt>version</tt><tt> </tt><tt>is</tt><tt> </tt><tt>the</tt><tt> </tt><tt>numerical</tt><tt> </tt><tt>prefix</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>migration</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>filename.</tt><span style="font-family: DejaVu Sans;"><tt>版本号是</tt></span><tt>migration</tt><tt>‘</tt><tt>s</tt><span style="font-family: DejaVu Sans;"><tt>文件的数字前缀。</tt><tt></tt></span><tt>For</tt><tt> </tt><tt>example</tt><tt> </tt><tt>to</tt><tt> </tt><tt>migrate</tt><tt> </tt><tt>to</tt><tt> </tt><tt>version</tt><tt> </tt><tt>20080906120000</tt><tt> </tt><tt>run</tt><span style="font-family: DejaVu Sans;"><tt>例如迁移到</tt></span><tt>20080906120000</tt><span style="font-family: DejaVu Sans;"><tt>版本</tt></span>

<code>$</code><code> </code><code>rake</code><code> </code><code>db:migrate</code><code> </code><code>VERSION=20080906120000</code>

<code>If</code><code> </code><code>this</code><code> </code><code>is</code><code> </code><code>greater</code><code> </code><code>than</code><code> </code><code>the</code><code> </code><code>current</code><code> </code><code>version</code><code> </code><code>(i.e.</code><code> </code><code>it</code><code> </code><code>is</code><code> </code><code>migrating</code><code> </code><code>upwards)</code><code> </code><code>this</code><code> </code><code>will</code><code> </code><code>run</code><code> </code><code>the</code><code> </code><tt>up</tt><code> </code><code>method</code><code> </code><code>on</code><code> </code><code>all</code><code> </code><code>migrations</code><code> </code><code>up</code><code> </code><code>to</code><code> </code><code>and</code><code> </code><code>including</code><code> </code><code>20080906120000,</code><code> </code><code>if</code><code> </code><code>migrating</code><code> </code><code>downwards</code><code> </code><code>this</code><code> </code><code>will</code><code> </code><code>run</code><code> </code><code>the</code><code> </code><tt>down</tt><code> </code><code>method</code><code> </code><code>on</code><code> </code><code>all</code><code> </code><code>the</code><code> </code><code>migrations</code><code> </code><code>down</code><code> </code><code>to,</code><code> </code><code>but</code><code> </code><code>not</code><code> </code><code>including,</code><code> </code><code>20080906120000.</code><span style="font-family: DejaVu Sans;"><code>如果执行的版本比当前版本更优（新）</code></span><code>(i.e.</code><code> </code><code>it</code><code> </code><code>is</code><code> </code><code>migrating</code><code> </code><code>upwards)</code><span style="font-family: DejaVu Sans;"><code>这将会执行包含</code></span><code>20080906120000</code><span style="font-family: DejaVu Sans;"><code>的所有版本的</code></span><code>migrations</code><code> </code><code>up</code><span style="font-family: DejaVu Sans;"><code>方法，反之则执行不包括</code></span><code>20080906120000</code><span style="font-family: DejaVu Sans;"><code>的版本之外的所有版本的</code></span><code>migrations</code><code> </code><code>down</code><span style="font-family: DejaVu Sans;"><code>方法。</code></span>
<h4><a name="rolling-back1"></a><code>4.1</code><code> </code><code>Rolling</code><code> </code><code>Back</code></h4>
A common task is to rollback the last migration, for example if you made a mistake in it and wish to correct it.<span style="font-family: DejaVu Sans;">一个常用的任务来回滚最新的</span>migration<span style="font-family: DejaVu Sans;">，例如如果你在其中犯了一个错误希望</span>Rails<span style="font-family: DejaVu Sans;">能够改正它。</span>Rather than tracking down the version number associated with the previous migration you can run

<code>$</code><code> </code><code>rake</code><code> </code><span style="color: #000080;"><span style="text-decoration: underline;"><a href="db:rollback">db:rollback</a></span></span>

<code>This</code><code> </code><code>will</code><code> </code><code>run</code><code> </code><code>the</code><code> </code><tt>down</tt><code> </code><code>method</code><code> </code><code>from</code><code> </code><code>the</code><code> </code><code>latest</code><code> </code><code>migration.</code><span style="font-family: DejaVu Sans;"><code>这将会对最新的</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>执行</code></span><code>down</code><span style="font-family: DejaVu Sans;"><code>方法。</code><code></code></span><code>If</code><code> </code><code>you</code><code> </code><code>need</code><code> </code><code>to</code><code> </code><code>undo</code><code> </code><code>several</code><code> </code><code>migrations</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>provide</code><code> </code><code>a</code><code> </code><tt>STEP</tt><code> </code><code>parameter:</code><span style="font-family: DejaVu Sans;"><code>如果你需要撤销一系列的</code></span><code>migrations</code><span style="font-family: DejaVu Sans;"><code>你可以提供一个</code></span><code>STEP</code><code> </code><span style="font-family: DejaVu Sans;"><code>参数：</code></span>

<code>$</code><code> </code><code>rake</code><code> </code><code>db:rollback</code><code> </code><code>STEP=3</code>

<code>will</code><code> </code><code>run</code><code> </code><code>the</code><code> </code><tt>down</tt><code> </code><code>method</code><code> </code><code>from</code><code> </code><code>the</code><code> </code><code>last</code><code> </code><code>3</code><code> </code><code>migrations.</code><span style="font-family: DejaVu Sans;"><code>将会对最近的</code></span><code>3</code><span style="font-family: DejaVu Sans;"><code>次迁移执行</code></span><code>down</code><span style="font-family: DejaVu Sans;"><code>方法。</code></span>

<a name="rolling-back"></a>The rake <tt>db:migrate:redo</tt> task is a shortcut for doing a rollback and then migrating back up again. rake <tt>db:migrate:redo</tt><span style="font-family: DejaVu Sans;"><tt>任务是一个回滚后再次返回的快捷操作。</tt></span>As with the <tt>db:rollback</tt> task you can use the <tt>STEP</tt> parameter if you need to go more than one version back, for example<span style="font-family: DejaVu Sans;">通过</span>db<span style="font-family: DejaVu Sans;">：</span>rollback <span style="font-family: DejaVu Sans;">任务你可以使用</span>STEP<span style="font-family: DejaVu Sans;">参数如果你需要撤销超过一个版本，例如</span>

<code>$</code><code> </code><code>rake</code><code> </code><code>db:migrate:redo</code><code> </code><code>STEP=3</code>

<code>Neither</code><code> </code><code>of</code><code> </code><code>these</code><code> </code><code>Rake</code><code> </code><code>tasks</code><code> </code><code>do</code><code> </code><code>anything</code><code> </code><code>you</code><code> </code><code>could</code><code> </code><code>not</code><code> </code><code>do</code><code> </code><code>with</code><code> </code><tt>db:migrate</tt><code>,</code><code> </code><code>they</code><code> </code><code>are</code><code> </code><code>simply</code><code> </code><code>more</code><code> </code><code>convenient</code><span style="font-family: DejaVu Sans;"><code>方便</code><code></code></span><code>since</code><code> </code><code>you</code><code> </code><code>do</code><code> </code><code>not</code><code> </code><code>need</code><code> </code><code>to</code><code> </code><code>explicitly</code><code> </code><code>specify</code><code> </code><code>the</code><code> </code><code>version</code><code> </code><code>to</code><code> </code><code>migrate</code><code> </code><code>to.</code><span style="font-family: DejaVu Sans;"><code>（通过）上两次</code></span><code>rake</code><span style="font-family: DejaVu Sans;"><code>任务，你没有对</code></span><code>db:migrate</code><span style="font-family: DejaVu Sans;"><code>任何事情，如果你不需要指定明确的版本来迁移这样做都非常方便。</code></span>

Lastly, the <tt>db:reset</tt> task will drop the database, recreate it and load the current schema into it.<span style="font-family: DejaVu Sans;">最后，</span>

<tt>db:reset</tt><span style="font-family: DejaVu Sans;"><tt>任务将会</tt></span><tt>drop</tt><span style="font-family: DejaVu Sans;"><tt>数据库，重建它并且在其中导入正确的架构。</tt></span>

<code> This</code><code> </code><code>is</code><code> </code><code>not</code><code> </code><code>the</code><code> </code><code>same</code><code> </code><code>as</code><code> </code><code>running</code><code> </code><code>all</code><code> </code><code>the</code><code> </code><code>migrations</code><code> – </code><code>see</code><code> </code><code>the</code><code> </code><code>section</code><code> </code><code>on</code><code> </code><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/migrations.html#schema-dumping-and-you">schema.rb</a></span></span><code>.</code><span style="font-family: DejaVu Sans;"><code>这和运行所有的</code></span><code>migrations</code><span style="font-family: DejaVu Sans;"><code>不一样</code><code><span style="font-family: Liberation Serif,Times New Roman,serif;">——</span></code><code>阅读</code><code></code></span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/migrations.html#schema-dumping-and-you">schema.rb</a></span></span><span style="font-family: DejaVu Sans;"><code>章节。</code></span>
<h4><a name="being-specific"></a><code>4.2</code><code> </code><code>Being</code><code> </code><code>Specific</code><span style="font-family: WenQuanYi Micro Hei;"><code>开始指定的</code></span></h4>
If you need to run a specific migration up or down the <tt>db:migrate:up</tt> and <tt>db:migrate:down</tt> tasks will do that. <span style="font-family: DejaVu Sans;">如果你需要对一个指定的版本</span>migration<span style="font-family: DejaVu Sans;">执行</span>up<span style="font-family: DejaVu Sans;">或</span>down<span style="font-family: DejaVu Sans;">，那么</span><tt>db:migrate:up</tt> and <tt>db:migrate:down</tt><span style="font-family: DejaVu Sans;"><tt>任务会满足你。</tt></span>Just specify the appropriate version and the corresponding migration will have its <tt>up</tt> or <tt>down</tt> method invoked, for example<span style="font-family: DejaVu Sans;">指定适当的版本那么相应的</span>migration<span style="font-family: DejaVu Sans;">就会调用它的</span>up<span style="font-family: DejaVu Sans;">或</span>down<span style="font-family: DejaVu Sans;">方法，例如</span>

<code>$</code><code> </code><code>rake</code><code> </code><code>db:migrate:up</code><code> </code><code>VERSION=20080906120000</code>

<code>will</code><code> </code><code>run</code><code> </code><code>the</code><code> </code><tt>up</tt><code> </code><code>method</code><code> </code><code>from</code><code> </code><code>the</code><code> </code><code>20080906120000</code><code> </code><code>migration.</code><span style="font-family: DejaVu Sans;"><code>将会执行来自</code><code></code></span><code>20080906120000</code><span style="font-family: DejaVu Sans;"><code>版本的</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>的</code></span><code>up</code><span style="font-family: DejaVu Sans;"><code>方法。</code><code></code></span><code>These</code><code> </code><code>tasks</code><code> </code><code>check</code><code> </code><code>whether</code><code> </code><code>the</code><code> </code><code>migration</code><code> </code><code>has</code><code> </code><code>already</code><code> </code><code>run,</code><code> </code><code>so</code><code> </code><code>for</code><code> </code><code>example</code><code> </code><tt>db:migrate:up</tt><tt> </tt><tt>VERSION=20080906120000</tt><code> </code><code>will</code><code> </code><code>do</code><code> </code><code>nothing</code><code> </code><code>if</code><code> </code><code>Active</code><code> </code><code>Record</code><code> </code><code>believes</code><code> </code><code>that</code><code> </code><code>20080906120000</code><code> </code><code>has</code><code> </code><code>already</code><code> </code><code>been</code><code> </code><code>run.</code><span style="font-family: DejaVu Sans;"><code>这个任务会检查</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>是否已经运行，如果</code><code></code></span><code>Active</code><code> </code><code>Record</code><span style="font-family: DejaVu Sans;"><code>认为已经被运行过了</code><code></code></span><tt>db:migrate:up</tt><tt> </tt><tt>VERSION=20080906120000</tt><span style="font-family: DejaVu Sans;"><tt>将不会做任何事情。</tt></span>
<h4><a name="being-talkative"></a>4.3 Being Talkative<span style="font-family: WenQuanYi Micro Hei;">开始唠叨</span></h4>
By default migrations tell you exactly what they’re doing and how long it took.<span style="font-family: DejaVu Sans;">通过默认的</span>migrations<span style="font-family: DejaVu Sans;">会明确地告诉你他们做了什么以及花费了多长时间。</span>A migration creating a table and adding an index might produce output like this<span style="font-family: DejaVu Sans;">一次迁移创建一个表并且添加一个</span>index<span style="font-family: DejaVu Sans;">可能会产生这样的输出</span>

<code>20080906170109</code><code> </code><code>CreateProducts:</code><code> </code><code>migrating</code>

<code>--</code><code> </code><code>create_table(:products)</code>

<code> </code><code>-&gt;</code><code> </code><code>0.0021s</code>

<code>--</code><code> </code><code>add_index(:products,</code><code> </code><code>:name)</code>

<code> </code><code>-&gt;</code><code> </code><code>0.0026s</code>

<code>20080906170109</code><code> </code><code>CreateProducts:</code><code> </code><code>migrated</code><code> </code><code>(0.0059s)</code>

Several methods are provided that allow you to control all this:<span style="font-family: DejaVu Sans;">一些方法（被证明）允许你像下面这样控制</span>
<ul>
	<li><tt>suppress_messages</tt> takes a block as an argument and suppresses<span style="font-family: DejaVu Sans;">抑制</span>any output generated by the block. <tt>suppress_messages</tt><span style="font-family: DejaVu Sans;">获取一个</span>block<span style="font-family: DejaVu Sans;">作为一个参数并且抑制常规输出到</span>block</li>
	<li><tt>say</tt> takes a message argument and outputs it as is. A second boolean argument can be passed to specify whether to indent<span style="font-family: DejaVu Sans;">缩进</span>or not. <tt>say</tt><span style="font-family: DejaVu Sans;"><tt>获取一个</tt></span><tt>message</tt><span style="font-family: DejaVu Sans;"><tt>参数并且输出它。第二个布尔参数可以指定是否缩进</tt></span></li>
	<li><tt>say_with_time</tt> outputs text along with how long it took to run its block. If the block returns an integer it assumes it is the number of rows affected. say_with_time<span style="font-family: DejaVu Sans;"><tt>在文字旁边输出运行这个代码块花费了多少时间。如果</tt></span><tt>block</tt><span style="font-family: DejaVu Sans;"><tt>返回一个整数它假设这是受影响的代码行。</tt></span></li>
</ul>
For example, this migration<span style="font-family: DejaVu Sans;">例如，这个</span>migration

<code>class</code> <code>CreateProducts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code>

<code> </code><code>def</code> <code>change</code>

<code> </code><code>suppress_messages</code><code> </code><code>do</code>

<code> </code><code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code>

<code> </code><code>t.string</code><code> </code><code>:name</code>

<code> </code><code>t.text</code><code> </code><code>:description</code>

<code> </code><code>t.timestamps</code>

<code> </code><code>end</code>

<code> </code><code>end</code>

<code> </code><code>say</code><code> </code><code>"Created</code><code> </code><code>a</code><code> </code><code>table"</code>

<code> </code><code>suppress_messages</code><code> </code><code>{add_index</code><code> </code><code>:products,</code><code> </code><code>:name}</code>

<code> </code><code>say</code><code> </code><code>"and</code><code> </code><code>an</code><code> </code><code>index!",</code><code> </code><code>true</code>

<code> </code><code>say_with_time</code><code> </code><code>'Waiting</code><code> </code><code>for</code><code> </code><code>a</code><code> </code><code>while'</code> <code>do</code>

<code> </code><code>sleep</code><code> </code><code>10</code>

<code> </code><code>250</code>

<code> </code><code>end</code>

<code> </code><code>end</code>

<code>end</code>

generates the following output<span style="font-family: DejaVu Sans;">一般情况会得到如下输出</span>

== CreateProducts: migrating =================================================

-- Created a table

-&gt; and an index!

-- Waiting for a while

-&gt; 10.0108s

-&gt; 250 rows

== CreateProducts: migrated (10.0171s) =======================================

If you just want Active Record to shut up then running <tt>rake</tt><tt> </tt><tt>db:migrate</tt><tt> </tt><tt>VERBOSE=false</tt> will suppress<span style="font-family: DejaVu Sans;">抑制</span>all output.<span style="font-family: DejaVu Sans;">如果你希望让所有</span>Active Record<span style="font-family: DejaVu Sans;">闭嘴，那么运行</span><tt>rake</tt><tt> </tt><tt>db:migrate</tt><tt> </tt><tt>VERBOSE=false</tt><span style="font-family: DejaVu Sans;"><tt>会抑制所有的输出。</tt></span>
<h3><a name="using-models-in-your-migrations"></a>5 Using Models in Your Migrations<span style="font-family: WenQuanYi Micro Hei;">在你的</span>migration<span style="font-family: WenQuanYi Micro Hei;">中使用</span>Moldels</h3>
When creating or updating data in a migration it is often tempting to use one of your models<span style="font-family: DejaVu Sans;">新建或更新一个</span>migration<span style="font-family: DejaVu Sans;">的数据它通常会使你的</span>models<span style="font-family: DejaVu Sans;">更有诱惑力。</span>After all they exist to provide easy access to the underlying<span style="font-family: DejaVu Sans;">底层</span>data.<span style="font-family: DejaVu Sans;">毕竟他们的存在提供了对底层数据的访问。</span>This can be done, but some caution<span style="font-family: DejaVu Sans;">注意</span>should be observed<span style="font-family: DejaVu Sans;">观察</span>.<span style="font-family: DejaVu Sans;">这是可行的，但是有些地方需要注意。</span>

For example, problems occur when the model uses database columns which are (1) not currently in the database and (2) will be created by this or a subsequent migration.<span style="font-family: DejaVu Sans;">例如，问题焦点当</span>models<span style="font-family: DejaVu Sans;">使用数据库字段，但是</span>migration<span style="font-family: DejaVu Sans;">（</span>1<span style="font-family: DejaVu Sans;">）在数据库中没有这个字段而</span>migration<span style="font-family: DejaVu Sans;">（</span>2<span style="font-family: DejaVu Sans;">）将会被它本身的</span>migration<span style="font-family: DejaVu Sans;">文件或者随后的</span>migration<span style="font-family: DejaVu Sans;">创建。</span>

Consider this example, where Alice and Bob are working on the same code base which contains a <tt>Product</tt> model:<span style="font-family: DejaVu Sans;">思考这个例子，</span>Alice<span style="font-family: DejaVu Sans;">和</span>Bob<span style="font-family: DejaVu Sans;">工作在同样的代码中，其主要包含一个</span>Product<span style="font-family: DejaVu Sans;">模型：</span>

Bob goes on vacation. Bob<span style="font-family: DejaVu Sans;">在休假</span>

Alice creates a migration for the <tt>products</tt> table which adds a new column and initializes it. She also adds a validation to the Product model for the new column. Alice<span style="font-family: DejaVu Sans;">创建一个</span>products<span style="font-family: DejaVu Sans;">表单的</span>migration<span style="font-family: DejaVu Sans;">，其添加一个新的字段并初始化它。她也添加一个关于新字段的验证到</span>Product<span style="font-family: DejaVu Sans;">模型。</span>

rails generate migration AddFlagToProduct flag:int#<span style="font-family: DejaVu Sans;">然后再添加一部分这样通过创建器的话</span>model<span style="font-family: DejaVu Sans;">文件也一起创建了</span>

<code>#</code><code> </code><code>db/migrate/20100513121110_add_flag_to_product.rb</code>

&nbsp;

<code>class</code> <code>AddFlagToProduct</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code>

<code> </code><code>def</code> <code>change</code>

<code> </code><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:flag,</code><code> </code><code>:int</code>

<code> </code><code>Product.all.each</code> <code>{</code><code> </code><code>|f|</code><code> </code><code>f.update_attributes!(:flag</code> <code>=&gt;</code><code> </code><code>'false')</code><code> </code><code>}#</code><span style="font-family: DejaVu Sans;"><code>初始化置为</code></span><code>false</code>

<code> </code><code>end</code>

<code>end</code>

&nbsp;

<code>#</code><code> </code><code>app/model/product.rb</code>

&nbsp;

<code>class</code> <code>Product</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:flag,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true</code>

<code>end</code>

<code>Alice</code><code> </code><code>adds</code><code> </code><code>a</code><code> </code><code>second</code><code> </code><code>migration</code><code> </code><code>which</code><code> </code><code>adds</code><code> </code><code>and</code><code> </code><code>initializes</code><code> </code><code>another</code><code> </code><code>column</code><code> </code><code>to</code><code> </code><code>the</code><code> </code><tt>products</tt><code> </code><code>table</code><code> </code><code>and</code><code> </code><code>also</code><code> </code><code>adds</code><code> </code><code>a</code><code> </code><code>validation</code><code> </code><code>to</code><code> </code><code>the</code><code> </code><code>Product</code><code> </code><code>model</code><code> </code><code>for</code><code> </code><code>the</code><code> </code><code>new</code><code> </code><code>column.Alice</code><span style="font-family: DejaVu Sans;"><code>添加第二个</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>，在这个</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>中给</code></span><code>Products</code><span style="font-family: DejaVu Sans;"><code>表单添加并初始化了另一个字段，而且为</code></span><code>Product</code><code> </code><code>model</code><span style="font-family: DejaVu Sans;"><code>的新字段添加并初始化了验证。</code></span>

<code>#</code><code> </code><code>db/migrate/20100515121110_add_fuzz_to_product.rb</code>

&nbsp;

<code>class</code> <code>AddFuzzToProduct</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code>

<code> </code><code>def</code> <code>change</code>

<code> </code><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:fuzz,</code><code> </code><code>:string</code>

<code> </code><code>Product.all.each</code> <code>{</code><code> </code><code>|f|</code><code> </code><code>f.update_attributes!</code><code> </code><code>:fuzz</code> <code>=&gt;</code><code> </code><code>'fuzzy'</code> <code>}</code>

<code> </code><code>end</code>

<code>end</code>

<code>#</code><code> </code><code>app/model/product.rb</code>

&nbsp;

<code>class</code> <code>Product</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:flag,</code><code> </code><code>:fuzz,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true</code>

<code>end</code>

<code>Both</code><code> </code><code>migrations</code><code> </code><code>work</code><code> </code><code>for</code><code> </code><code>Alice.</code><span style="font-family: DejaVu Sans;"><code>两个</code></span><code>migrations</code><span style="font-family: DejaVu Sans;"><code>都是</code></span><code>Alice</code><span style="font-family: DejaVu Sans;"><code>编写的。</code></span>

<code>Bob</code><code> </code><code>comes</code><code> </code><code>back</code><code> </code><code>from</code><code> </code><code>vacation</code><span style="font-family: DejaVu Sans;"><code>假期</code><code></code></span><code>and:Bob</code><span style="font-family: DejaVu Sans;"><code>休假回来然后接着下面的工作</code></span>
<ol>
	<li><code>updates</code><code> </code><code>the</code><code> </code><code>source</code><code> – </code><code>which</code><code> </code><code>contains</code><code> </code><code>both</code><code> </code><code>migrations</code><code> </code><code>and</code><code> </code><code>the</code><code> </code><code>latests</code><code> </code><code>version</code><code> </code><code>of</code><code> </code><code>the</code><code> </code><code>Product</code><code> </code><code>model.</code><code> </code><span style="font-family: DejaVu Sans;"><code>更新源代码</code><code><span style="font-family: Liberation Serif,Times New Roman,serif;">——</span></code><code>包含</code></span><code>migrations</code><span style="font-family: DejaVu Sans;"><code>和最新版本的</code></span><code>Product</code><span style="font-family: DejaVu Sans;"><code>模型。</code></span></li>
	<li>runs outstanding migrations with <tt>rake</tt><tt> </tt><tt>db:migrate</tt>, which includes the one that updates the <tt>Product</tt> model. <span style="font-family: DejaVu Sans;">通过</span><tt>rake</tt><tt> </tt><tt>db:migrate</tt><span style="font-family: DejaVu Sans;">执行突出（最新版本的</span>migration<span style="font-family: DejaVu Sans;">）的</span>migrations<span style="font-family: DejaVu Sans;">，其中包含了更新</span>Product<span style="font-family: DejaVu Sans;">模型。</span></li>
</ol>
The migration crashes because when the model attempts<span style="font-family: DejaVu Sans;">尝试</span>to save, it tries to validate the second added column, which is not in the database when the <em>first</em> migration runs.<span style="font-family: DejaVu Sans;">数据迁移冲突因为当</span>model<span style="font-family: DejaVu Sans;">尝试保存时，它试图验证第二个添加的字段，然而它在第一次</span>migration<span style="font-family: DejaVu Sans;">运行时不在数据库中。（没有弄明白呢感觉好像两个迁移是分开的才会出现这样的错误）</span>

<code>rake</code><code> </code><code>aborted!</code>

<code>An</code><code> </code><code>error</code><code> </code><code>has</code><code> </code><code>occurred,</code><code> </code><code>this</code><code> </code><code>and</code><code> </code><code>all</code><code> </code><code>later</code><code> </code><code>migrations</code><code> </code><code>canceled:</code>

&nbsp;

<code>undefined</code><code> </code><code>method</code><code> </code><code>`fuzz'</code><code> </code><code>for</code><code> </code><code>#&lt;Product:0x000001049b14a0&gt;</code>

A fix for this is to create a local model within the migration.<span style="font-family: DejaVu Sans;">解决这个错误是在</span>migration<span style="font-family: DejaVu Sans;">创建一个本地的</span>model<span style="font-family: DejaVu Sans;">。</span>This keeps rails from running the validations, so that the migrations run to completion.<span style="font-family: DejaVu Sans;">这样在</span>rails<span style="font-family: DejaVu Sans;">运行中保持了验证，使得</span>migrations<span style="font-family: DejaVu Sans;">完成了验证。</span>

When using a faux model, it’s a good idea to call <tt>Product.reset_column_information</tt> to refresh the ActiveRecord cache for the Product model prior<span style="font-family: DejaVu Sans;">前</span>to updating data in the database.<span style="font-family: DejaVu Sans;">当使用一个人造的</span>model<span style="font-family: DejaVu Sans;">，调用</span><tt>Product.reset_column_information</tt><span style="font-family: DejaVu Sans;"><tt>来刷新在更新数据到数据库前的</tt></span><tt>Product</tt><tt> </tt><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>ActiveRecord</tt><span style="font-family: DejaVu Sans;"><tt>缓存是一个好主意。</tt></span>

<tt>If</tt><tt> </tt><tt>Alice</tt><tt> </tt><tt>had</tt><tt> </tt><tt>done</tt><tt> </tt><tt>this</tt><tt> </tt><tt>instead,</tt><tt> </tt><tt>there</tt><tt> </tt><tt>would</tt><tt> </tt><tt>have</tt><tt> </tt><tt>been</tt><tt> </tt><tt>no</tt><tt> </tt><tt>problem:</tt><span style="font-family: DejaVu Sans;"><tt>如果</tt></span><tt>Alice</tt><span style="font-family: DejaVu Sans;"><tt>这样做了就不会有问题了</tt></span>

<code>#</code><code> </code><code>db/migrate/20100513121110_add_flag_to_product.rb</code>

&nbsp;

<code>class</code> <code>AddFlagToProduct</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code>

<code> </code><code>class</code> <code>Product</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>end</code>

&nbsp;

<code> </code><code>def</code> <code>change</code>

<code> </code><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:flag,</code><code> </code><code>:int</code>

<code> </code><code>Product.reset_column_information</code>

<code> </code><code>Product.all.each</code> <code>{</code><code> </code><code>|f|</code><code> </code><code>f.update_attributes!(:flag</code> <code>=&gt;</code><code> </code><code>false)</code><code> </code><code>}</code>

<code> </code><code>end</code>

<code>end</code>

&nbsp;

<code>class</code><tt> </tt><code>AddFuzzToProduct</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code>

<code> </code><code>class</code> <code>Product</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>end</code>

<code> </code><code>def</code> <code>change</code>

<code> </code><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:fuzz,</code><code> </code><code>:string</code>

<code> </code><code>Product.reset_column_information</code>

<code> </code><code>Product.all.each</code> <code>{</code><code> </code><code>|f|</code><code> </code><code>f.update_attributes!</code><code> </code><code>:fuzz</code> <code>=&gt;</code><code> </code><code>'fuzzy'</code> <code>}</code>

<code> </code><code>end</code>

<code>end</code>

&nbsp;
<h3><a name="schema-dumping-and-you"></a><tt>6</tt><tt> </tt><tt>Schema</tt><tt> </tt><tt>Dumping</tt><tt> </tt><tt>and</tt><tt> </tt><tt>You</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>架构模式和你</tt></span></h3>
<h4><a name="what-are-schema-files-for"></a><tt>6.1</tt><tt> </tt><tt>What</tt><tt> </tt><tt>are</tt><tt> </tt><tt>Schema</tt><tt> </tt><tt>Files</tt><tt> </tt><tt>for?</tt></h4>
<tt>Migrations,</tt><tt> </tt><tt>mighty</tt><tt> </tt><tt>as</tt><tt> </tt><tt>they</tt><tt> </tt><tt>may</tt><tt> </tt><tt>be,</tt><tt> </tt><tt>are</tt><tt> </tt><tt>not</tt><tt> </tt><tt>the</tt><tt> </tt><tt>authoritative</tt><tt> </tt><tt>source</tt><tt> </tt><tt>for</tt><tt> </tt><tt>your</tt><tt> </tt><tt>database</tt><tt> </tt><tt>schema.</tt><tt> </tt><tt>Migrations</tt><span style="font-family: DejaVu Sans;"><tt>，很可能不是你的数据库</tt></span><tt>schema</tt><span style="font-family: DejaVu Sans;"><tt>的授权源。</tt><tt></tt></span><tt>That</tt><tt> </tt><tt>role</tt><tt> </tt><tt>falls</tt><tt> </tt><tt>to</tt><tt> </tt><tt>either</tt><tt> </tt><tt>db/schema.rb</tt><tt> </tt><tt>or</tt><tt> </tt><tt>an</tt><tt> </tt><tt>SQL</tt><tt> </tt><tt>file</tt><tt> </tt><tt>which</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt> </tt><tt>generates</tt><tt> </tt><tt>by</tt><tt> </tt><tt>examining</tt><tt> </tt><tt>the</tt><tt> </tt><tt>database.</tt><span style="font-family: DejaVu Sans;"><tt>这一规则影响到</tt><tt></tt></span><tt>db/schema.rb</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>SQL</tt><span style="font-family: DejaVu Sans;"><tt>文件它是</tt><tt></tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>创建器通过检查数据库生成的。</tt><tt></tt></span><tt>They</tt><tt> </tt><tt>are</tt><tt> </tt><tt>not</tt><tt> </tt><tt>designed</tt><tt> </tt><tt>to</tt><tt> </tt><tt>be</tt><tt> </tt><tt>edited,</tt><tt> </tt><tt>they</tt><tt> </tt><tt>just</tt><tt> </tt><tt>represent</tt><tt> </tt><tt>the</tt><tt> </tt><tt>current</tt><tt> </tt><tt>state</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>database.</tt><span style="font-family: DejaVu Sans;"><tt>他们的设计（原意）是不被编辑的，他们仅仅是当前数据库状态的一个表现。</tt></span>

There is no need (and it is error prone) to deploy<span style="font-family: DejaVu Sans;">部署</span>a new instance of an app by replaying the entire<span style="font-family: DejaVu Sans;">整个</span>migration history. It is much simpler and faster to just load into the database a description of the current schema.<span style="font-family: DejaVu Sans;">这里没有必要（并且是错误倾向）去通过</span>replaying<span style="font-family: DejaVu Sans;">整个</span>migration<span style="font-family: DejaVu Sans;">历史来部署一个</span>app<span style="font-family: DejaVu Sans;">的新的实例。更明智和更快捷的方式是</span>load<span style="font-family: DejaVu Sans;">数据库的描述（也就是）当前</span>schema<span style="font-family: DejaVu Sans;">。</span>

For example, this is how the test database is created: the current development database is dumped (either to <tt>db/schema.rb</tt> or <tt>db/development.sql</tt>) and then loaded into the test database.<span style="font-family: DejaVu Sans;">例如，这是测试数据库怎样被创建的：当前的开发数据库已经被转储（要么</span><tt>db/schema.rb</tt> <span style="font-family: DejaVu Sans;">要么</span><tt>db/development.sql</tt><span style="font-family: DejaVu Sans;">）然后被导入</span>test<span style="font-family: DejaVu Sans;">数据库。</span>

Schema files are also useful if you want a quick look at what attributes an Active Record object has. Schema<span style="font-family: DejaVu Sans;">文件在你希望快速的查看</span>Active Record object<span style="font-family: DejaVu Sans;">有些什么属性的时候也很有帮助。</span>This information is not in the model’s code and is frequently spread across several migrations but is all summed up in the schema file. <span style="font-family: DejaVu Sans;">这些信息不是</span>model<span style="font-family: DejaVu Sans;">中的代码并且频繁分布在多个</span>migrations<span style="font-family: DejaVu Sans;">但是是所有架构文件的总结。</span>The <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://agilewebdevelopment.com/plugins/annotate_models">annotate_models</a></span></span> plugin, which automatically adds (and updates) comments at the top of each model summarizing the schema, may also be of interest. <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://agilewebdevelopment.com/plugins/annotate_models">annotate_models</a></span></span> <span style="font-family: DejaVu Sans;">插件，它能够自动在每个</span>model<span style="font-family: DejaVu Sans;">汇总的顶部的添加（更新）</span>comments<span style="font-family: DejaVu Sans;">，可能你会有兴趣。</span>
<h4><a name="types-of-schema-dumps"></a><tt>6.2</tt><tt> </tt><tt>Types</tt><tt> </tt><tt>of</tt><tt> </tt><tt>Schema</tt><tt> </tt><tt>Dumps</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>架构转储的形式</tt></span></h4>
There are two ways to dump the schema. This is set in <tt>config/application.rb</tt> by the <tt>config.active_record.schema_format</tt> setting, which may be either <tt>:sql</tt> or <tt>:ruby</tt>.<span style="font-family: DejaVu Sans;">有两种方式来转储架构。这是（相关）设置在</span><tt>config/application.rb</tt><span style="font-family: DejaVu Sans;"><tt>通过</tt><tt></tt></span><tt>config.active_record.schema_format</tt><span style="font-family: DejaVu Sans;"><tt>来设置，其形式要么是</tt></span><tt>:sql</tt><span style="font-family: DejaVu Sans;"><tt>要么是</tt></span><tt>:ruby.</tt>

<tt>If</tt><tt> </tt><tt>:ruby</tt><tt> </tt><tt>is</tt><tt> </tt><tt>selected</tt><tt> </tt><tt>then</tt><tt> </tt><tt>the</tt><tt> </tt><tt>schema</tt><tt> </tt><tt>is</tt><tt> </tt><tt>stored</tt><tt> </tt><tt>in</tt><tt> </tt><tt>db/schema.rb.</tt><tt> </tt><tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>look</tt><tt> </tt><tt>at</tt><tt> </tt><tt>this</tt><tt> </tt><tt>file</tt><tt> </tt><tt>you</tt><tt>’</tt><tt>ll</tt><tt> </tt><tt>find</tt><tt> </tt><tt>that</tt><tt> </tt><tt>it</tt><tt> </tt><tt>looks</tt><tt> </tt><tt>an</tt><tt> </tt><tt>awful</tt><span style="font-family: DejaVu Sans;"><tt>可怕</tt><tt></tt></span><tt>lot</tt><tt> </tt><tt>like</tt><tt> </tt><tt>one</tt><tt> </tt><tt>very</tt><tt> </tt><tt>big</tt><tt> </tt><tt>migration:</tt><span style="font-family: DejaVu Sans;"><tt>如果</tt></span><tt>:ruby</tt><span style="font-family: DejaVu Sans;"><tt>被选中那么</tt></span><tt>schema</tt><span style="font-family: DejaVu Sans;"><tt>被存储在</tt><tt></tt></span><tt>db/schema.rb</tt><span style="font-family: DejaVu Sans;"><tt>。如果你查看这个文件你将会发现它看起来就像一个很大的</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

<code>ActiveRecord::Schema.define(:version</code><tt> </tt><code>=&gt;</code><code> </code><code>20080906171750)</code><code> </code><code>do</code>

<code> </code><code>create_table</code><code> </code><code>"authors",</code><code> </code><code>:force</code> <code>=&gt;</code><code> </code><code>true</code> <code>do</code> <code>|t|</code>

<code> </code><code>t.string</code><code> </code><code>"name"</code>

<code> </code><code>t.datetime</code><code> </code><code>"created_at"</code>

<code> </code><code>t.datetime</code><code> </code><code>"updated_at"</code>

<code> </code><code>end</code>

&nbsp;

<code> </code><code>create_table</code><code> </code><code>"products",</code><code> </code><code>:force</code> <code>=&gt;</code><code> </code><code>true</code> <code>do</code> <code>|t|</code>

<code> </code><code>t.string</code><code> </code><code>"name"</code>

<code> </code><code>t.text</code><code> </code><code>"description"</code>

<code> </code><code>t.datetime</code><code> </code><code>"created_at"</code>

<code> </code><code>t.datetime</code><code> </code><code>"updated_at"</code>

<code> </code><code>t.string</code><code> </code><code>"part_number"</code>

<code> </code><code>end</code>

<code>end</code>

<tt>In</tt><tt> </tt><tt>many</tt><tt> </tt><tt>ways</tt><tt> </tt><tt>this</tt><tt> </tt><tt>is</tt><tt> </tt><tt>exactly</tt><tt> </tt><tt>what</tt><tt> </tt><tt>it</tt><tt> </tt><tt>is.</tt><span style="font-family: DejaVu Sans;"><tt>在很多情况下它能够准确的（反应出</tt></span><tt>schema</tt><span style="font-family: DejaVu Sans;"><tt>）的信息。</tt><tt></tt></span><tt>This</tt><tt> </tt><tt>file</tt><tt> </tt><tt>is</tt><tt> </tt><tt>created</tt><tt> </tt><tt>by</tt><tt> </tt><tt>inspecting</tt><tt> </tt><tt>the</tt><tt> </tt><tt>database</tt><tt> </tt><tt>and</tt><tt> </tt><tt>expressing</tt><tt> </tt><tt>its</tt><tt> </tt><tt>structure</tt><tt> </tt><tt>using</tt><tt> </tt><tt>create_table,</tt><tt> </tt><tt>add_index,</tt><tt> </tt><tt>and</tt><tt> </tt><tt>so</tt><tt> </tt><tt>on.</tt><span style="font-family: DejaVu Sans;"><tt>这个文件被创建来检查数据库以及表达它的结构使用</tt><tt></tt></span><tt>create_table,</tt><tt> </tt><tt>add_index</tt><span style="font-family: DejaVu Sans;"><tt>等等。</tt><tt></tt></span><tt>Because</tt><tt> </tt><tt>this</tt><tt> </tt><tt>is</tt><tt> </tt><tt>database</tt><tt> </tt><tt>independent</tt><tt> </tt><tt>it</tt><tt> </tt><tt>could</tt><tt> </tt><tt>be</tt><tt> </tt><tt>loaded</tt><tt> </tt><tt>into</tt><tt> </tt><tt>any</tt><tt> </tt><tt>database</tt><tt> </tt><tt>that</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt> </tt><tt>supports.</tt><span style="font-family: DejaVu Sans;"><tt>由于数据库的独立性它可以被导入到</tt><tt></tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>支持的任何数据库中。</tt><tt></tt></span><tt>This</tt><tt> </tt><tt>could</tt><tt> </tt><tt>be</tt><tt> </tt><tt>very</tt><tt> </tt><tt>useful</tt><tt> </tt><tt>if</tt><tt> </tt><tt>you</tt><tt> </tt><tt>were</tt><tt> </tt><tt>to</tt><tt> </tt><tt>distribute</tt><tt> </tt><tt>an</tt><tt> </tt><tt>application</tt><tt> </tt><tt>that</tt><tt> </tt><tt>is</tt><tt> </tt><tt>able</tt><tt> </tt><tt>to</tt><tt> </tt><tt>run</tt><tt> </tt><tt>against</tt><tt> </tt><tt>multiple</tt><tt> </tt><tt>databases.</tt><span style="font-family: DejaVu Sans;"><tt>这会非常有用如果你发行一个应用程序它可能面对多个数据库运行。</tt></span>

<a name="result_box1"></a><tt>There</tt><tt> </tt><tt>is</tt><tt> </tt><tt>however</tt><tt> </tt><tt>a</tt><tt> </tt><tt>trade-off:</tt><tt> </tt><tt>db/schema.rb</tt><tt> </tt><tt>cannot</tt><tt> </tt><tt>express</tt><tt> </tt><tt>database</tt><tt> </tt><tt>specific</tt><tt> </tt><tt>items</tt><tt> </tt><tt>such</tt><tt> </tt><tt>as</tt><tt> </tt><tt>foreign</tt><tt> </tt><tt>key</tt><tt> </tt><tt>constraints,</tt><tt> </tt><tt>triggers</tt><tt> </tt><tt>or</tt><tt> </tt><tt>stored</tt><tt> </tt><tt>procedures.</tt><span style="font-family: DejaVu Sans;">然而，有一个权衡：</span>DB/ schema.rb<span style="font-family: DejaVu Sans;">不能表达数据库的具体项目，如外键约束，触发器或存储过程。</span><tt>While</tt><tt> </tt><tt>in</tt><tt> </tt><tt>a</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>execute</tt><tt> </tt><tt>custom</tt><tt> </tt><tt>SQL</tt><tt> </tt><tt>statements,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>schema</tt><tt> </tt><tt>dumper</tt><tt> </tt><tt>cannot</tt><tt> </tt><tt>reconstitute</tt><tt> </tt><tt>those</tt><tt> </tt><tt>statements</tt><tt> </tt><tt>from</tt><tt> </tt><tt>the</tt><tt> </tt><tt>database.</tt><span style="font-family: DejaVu Sans;"><tt>虽然在一个</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>你可以执行自定义的</tt></span><tt>SQL</tt><span style="font-family: DejaVu Sans;"><tt>表达式，</tt></span><tt>schema</tt><span style="font-family: DejaVu Sans;"><tt>储存器不能修复一些</tt></span><tt>SQL</tt><span style="font-family: DejaVu Sans;"><tt>的表达式（不能实现</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>rollback</tt><span style="font-family: DejaVu Sans;"><tt>等功能）。</tt><tt></tt></span><tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>are</tt><tt> </tt><tt>using</tt><tt> </tt><tt>features</tt><tt> </tt><tt>like</tt><tt> </tt><tt>this</tt><tt> </tt><tt>then</tt><tt> </tt><tt>you</tt><tt> </tt><tt>should</tt><tt> </tt><tt>set</tt><tt> </tt><tt>the</tt><tt> </tt><tt>schema</tt><tt> </tt><tt>format</tt><tt> </tt><tt>to</tt><tt> </tt><tt>:sql.</tt><span style="font-family: DejaVu Sans;"><tt>如果你正在使用这样的特性接着你应该设置</tt></span><tt>schema</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>格式为</tt></span><tt>:sql</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

<tt>Instead</tt><tt> </tt><tt>of</tt><tt> </tt><tt>using</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>schema</tt><tt> </tt><tt>dumper</tt><tt> </tt><tt>the</tt><tt> </tt><tt>database</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>structure</tt><tt> </tt><tt>will</tt><tt> </tt><tt>be</tt><tt> </tt><tt>dumped</tt><tt> </tt><tt>using</tt><tt> </tt><tt>a</tt><tt> </tt><tt>tool</tt><tt> </tt><tt>specific</tt><tt> </tt><tt>to</tt><tt> </tt><tt>that</tt><tt> </tt><tt>database</tt><tt> </tt><tt>(via</tt><tt> </tt><tt>the</tt><tt> </tt><tt>db:structure:dump</tt><tt> </tt><tt>Rake</tt><tt> </tt><tt>task)</tt><tt> </tt><tt>into</tt><tt> </tt><tt>db/#{Rails.env}_structure.sql.</tt><tt> </tt><tt>For</tt><tt> </tt><tt>example</tt><tt> </tt><tt>for</tt><tt> </tt><tt>PostgreSQL</tt><tt> </tt><tt>the</tt><tt> </tt><tt>pg_dump</tt><tt> </tt><tt>utility</tt><tt> </tt><tt>is</tt><tt> </tt><tt>used</tt><tt> </tt><tt>and</tt><tt> </tt><tt>for</tt><tt> </tt><tt>MySQL</tt><tt> </tt><tt>this</tt><tt> </tt><tt>file</tt><tt> </tt><tt>will</tt><tt> </tt><tt>contain</tt><tt> </tt><tt>the</tt><tt> </tt><tt>output</tt><tt> </tt><tt>of</tt><tt> </tt><tt>SHOW</tt><tt> </tt><tt>CREATE</tt><tt> </tt><tt>TABLE</tt><tt> </tt><tt>for</tt><tt> </tt><tt>the</tt><tt> </tt><tt>various</tt><tt> </tt><tt>tables.</tt><tt> </tt><tt>Loading</tt><tt> </tt><tt>this</tt><tt> </tt><tt>schema</tt><tt> </tt><tt>is</tt><tt> </tt><tt>simply</tt><tt> </tt><tt>a</tt><tt> </tt><tt>question</tt><tt> </tt><tt>of</tt><tt> </tt><tt>executing</tt><tt> </tt><tt>the</tt><tt> </tt><tt>SQL</tt><tt> </tt><tt>statements</tt><tt> </tt><tt>contained</tt><tt> </tt><tt>inside.</tt>

<a name="result_box2"></a>By definition this will be a perfect copy of the database’s structure but this will usually prevent loading the schema into a database other than the one used to create it.<span style="font-family: DejaVu Sans;">根据定义，这将是一个完美的复制数据库的结构，但通常会阻止加载到比其他用于创建一个数据库的架构。</span>
<h4><a name="schema-dumps-and-source-control"></a><tt>6.3</tt><tt> </tt><tt>Schema</tt><tt> </tt><tt>Dumps</tt><tt> </tt><tt>and</tt><tt> </tt><tt>Source</tt><tt> </tt><tt>Control</tt></h4>
Because schema dumps are the authoritative source for your database schema, it is strongly recommended<span style="font-family: DejaVu Sans;">建议</span>that you check them into source control.<span style="font-family: DejaVu Sans;">因为架构转储是你的数据库架构的授权源，强烈建议你检查他们到源控制。</span>
<h3><a name="active-record-and-referential-integrity"></a> 7 Active Record and Referential<span style="font-family: WenQuanYi Micro Hei;">参照</span>Integrity<span style="font-family: WenQuanYi Micro Hei;">完整</span></h3>
The Active Record way claims that intelligence belongs in your models, not in the database. As such, features such as triggers or foreign key constraints, which push some of that intelligence back into the database, are not heavily used.

Validations such as <tt>validates</tt><tt> </tt><tt>:foreign_key,</tt><tt> </tt><tt>:uniqueness</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt> are one way in which models can enforce data integrity. The <tt>:dependent</tt> option on associations allows models to automatically destroy child objects when the parent is destroyed. Like anything which operates at the application level these cannot guarantee referential integrity and so some people augment them with foreign key constraints.

Although Active Record does not provide any tools for working directly with such features, the <tt>execute</tt> method can be used to execute arbitrary SQL. There are also a number of plugins such as <span style="color: #000080;"><span style="text-decoration: underline;"><a href="https://github.com/harukizaemon/redhillonrails/tree/master/foreign_key_migrations/">foreign_key_migrations</a></span></span> which add foreign key support to Active Record (including support for dumping foreign keys in <tt>db/schema.rb</tt>).

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date>2011-11-21 02:48:18</wp:post_date>
		<wp:post_date_gmt>2011-11-21 02:48:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>guides-rubyonrails-migrations-en-and-cn</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="translate"><![CDATA[translate]]></category>
		<category domain="post_tag" nicename="%e7%bb%8f%e9%aa%8c"><![CDATA[经验]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Markdown Syntax Guide</title>
		<link></link>
		<pubDate>Tue, 22 Nov 2011 10:13:52 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=79</guid>
		<description></description>
		<content:encoded><![CDATA[Markdown Syntax Guide
The Allura code uses markdown syntax everywhere to allow you to create rich
text markup, and extends markdown in several ways to allow for quick linking
to other artifacts in your project.

Markdown was created to be easy to read, easy to write, and still readable in plain text format.

Links 
Reference Links 
Artifact Links 
Text 
Blockquotes 
Preformatted Text 
Lists 
Tables 
Headers 
Horizontal Rules 
Images 
Escapes 
More Headers 
Code Highlighting 
Includes 
Neighborhood Notifications 
Download Button 
Project Screenshots 
Thanks 
Links
Most URLs will automatically be turned into links. To be explicit, just write it like this:

<http://someurl>

<somebbob@example.com>

Output:

http://someurl

somebbob@example.com

To use text for the link, write it:

[like this](http://someurl)Output:

like this

You can add a *title* (which shows up under the cursor):

[like this](http://someurl "this title shows up when you hover")Output:

like this

Reference Links
You can also put the [link URL][1] below the current paragraph
like [this][2].

   [1]: http://url
   [2]: http://another.url "A funky title"
Output:

You can also put the link URL below the current paragraph like this.

Here the text "link URL" gets linked to "http://url", and the lines showing "[1]: http://url" won't show anything.

Or you can use a [shortcut][] reference, which links the text "shortcut" to the link named "[shortcut]" on the next paragraph.

Or you can use a [shortcut][] reference, which links the text
"shortcut" to the link named "[shortcut]" on the next paragraph.

[shortcut]: http://goes/with/the/link/name/textOutput:

Or you can use a shortcut reference, which links the text "shortcut" to the link named "shortcut" on the next paragraph.

Artifact Links
Any existing forge resource can be linked with surrounding square brackets ie [MyPage] or [#123].

Links to resources in other tools can be explicitly referenced by adding a tool identifier prefix to the link. So for instance `[developerwiki:MyPage]` can refer to a wiki page in a `developerwiki` instance. You can also link to tickets with `[tickets:#123]` assuming there's a 123 ticket in a Tracker instance mounted at `tickets`. The same is true for forums, or any of the other tools you have installed. You can even link to tickets in a subproject with `[subproject.tickets:#123]`.

[MyPage]
[developerwiki:MyPage]
[#123]
[tickets:#123]
No example output is available for this one because it only works on real artifacts. Try it in your project!

Text
Use * or _ to emphasize things:

*this is in italic*  and _so is this_

**this is in bold**  and __so is this__

***this is bold and italic***  and ___so is this___
Output:

this is in italic and so is this

this is in bold and so is this

this is bold and italic and so is this

You can strike through text using HTML like this:

<s>this is strike through text</s>
Output:

this is strike through text

Just write paragraphs like in a text file and they will display how
you would expect.  A blank line separates paragraphs.

So this is a new paragraph. But any text on adjacent lines
will all end up
in the same paragraph.
Output:

Just write paragraphs like in a text file and they will display how
you would expect. A blank line separates paragraphs.

So this is a new paragraph. But any text on adjacent lines
will all end up
in the same paragraph.

Blockquotes
Use the > character in front of a line, just like in email

> Use it if you're quoting a person, a song or whatever.

> You can use *italic* or lists inside them also.
And just like with other paragraphs,
all of these lines are still
part of the blockquote, even without the > character in front.

To end the blockquote, just put a blank line before the following
paragraph.
Output:

Use it if you're quoting a person, a song or whatever.

You can use italic or lists inside them also. And just like with other paragraphs, all of these lines are still part of the blockquote, even without the > character in front.

To end the blockquote, just put a blank line before the following
paragraph.

Preformatted Text
If you want some text to show up exactly as you write it, without Markdown doing anything to it, just indent every line by at least 4 spaces (or 1 tab).

    This line won't *have any markdown* formatting applied.
    I can even write <b>HTML</b> and it will show up as text.
    This is great for showing program source code, or HTML or even
    Markdown. <b>this won't show up as HTML</b> but
    exactly <i>as you see it in this text file</i>.

As a shortcut you can use backquotes to do the same thing while
inside a normal pargraph.  `This won't be *italic* or **bold**
at all.`
Output:

This line won't *have any markdown* formatting applied.
I can even write <b>HTML</b> and it will show up as text.
This is great for showing program source code, or HTML or even
Markdown. <b>this won't show up as HTML</b> but
exactly <i>as you see it in this text file</i>.
As a shortcut you can use backquotes to do the same thing while
inside a normal pargraph. This won't be *italic* or **bold**
at all.

Lists
* an asterisk starts an unordered list
* and this is another item in the list
+ or you can also use the + character
- or the - character

To start an ordered list, write this:

1. this starts a list *with* numbers
+  this will show as number "2"
*  this will show as number "3."
9. any number, +, -, or * will keep the list going.
    * just indent by 4 spaces (or tab) to make a sub-list
        1. keep indenting for more sub lists
    * here i'm back to the second level
Output:

an asterisk starts an unordered list 
and this is another item in the list 
or you can also use the + character 
or the - character 
To start an ordered list, write this:

this starts a list with numbers 
this will show as number "2" 
this will show as number "3." 
any number, +, -, or * will keep the list going. 
just indent by 4 spaces (or tab) to make a sub-list
keep indenting for more sub lists 
here i'm back to the second level 
Tables
You can create tables using pipes and dashes like this:

  First Header  | Second Header
  ------------- | -------------
  Content Cell  | Content Cell
  Content Cell  | Content Cell
Output:

First Header Second Header 
Content Cell Content Cell 
Content Cell Content Cell 

You can use markdown syntax within table cells for formatting:

  First Header   | Second Header
  -------------  | -------------
  *Content Cell* | Content Cell
  Content Cell   | Content Cell
Output:

First Header Second Header 
Content Cell Content Cell 
Content Cell Content Cell 

You can also create tables using HTML code.

Headers
Just put 1 or more dashes or equals signs (--- or ===) below the title.

This is a huge header
==================

this is a smaller header
------------------
Output:

This is a huge header
this is a smaller header
Horizontal Rule
Just put three or more *'s or -'s on a line:

----------------
Output:


--------------------------------------------------------------------------------

Or, you can use single spaces between then, like this:

* * *
Output:


--------------------------------------------------------------------------------

or

- - - - - - -
Output:


--------------------------------------------------------------------------------

Make sure you have a blank line above the dashes, though, or else:

you will get a header
---
Output:

you will get a header
Images
To include an image, just put a "!" in front of a text link:

![alternate text](https://sourceforge.net/images/icon_linux.gif)
Output:



The "alternate text" will show up if the browser can't load the image.

You can also use a title if you want, like this:

![tiny arrow](https://sourceforge.net/images/icon_linux.gif "tiny arrow")
Output:



To reference an attached image, just use the img macro. You can add more attributes:

[[img src=attached-image.jpg alt=foobar]]
Output:



Escapes
What if you want to just show asterisks, not italics?

* this shows up in italics: *a happy day*
* this shows the asterisks: \*a happy day\*
Output:

this shows up in italics: a happy day 
this shows the asterisks: *a happy day* 
The backslashes will disappear and leave the asterisks.

You can do the same with any of the characters that have a special meaning
for Markdown.

HTML tags may need to be escaped. <b> will be interpreted as a bold tag. Entity codes will be used. <foobar> isn't allowed and will be dropped, so you probably want to escape it:

<b>this will be bold</b>
you should escape &lt;unknown&gt; tags
&lt; special entities work
&amp;lt; if you want to escape it
Output:

this will be bold
you should escape <unknown> tags
< special entities work
&lt; if you want to escape it

Individual ampersands (&) and less-than signs (<) are fine, they will be shown as expected.

More Headers
More ways of doing headers:

# this is a huge header #
## this is a smaller header ##
### this is even smaller ###
#### more small ####
##### even smaller #####
###### smallest still: `<h6>` header
Output:

this is a huge header
this is a smaller header
this is even smaller
more small
even smaller
smallest still: <h6> header
You can use up to 6 # characters at the beginning of the line.

Code Highlighting
The Code highlighting used in the newforge is based on (http://www.freewisdom.org/projects/python-markdown/CodeHilite). It follows the same syntax as regular Markdown code blocks, except that there are two ways to tell the highlighter what language to use for the code block.

If the first line of the codeblock contains a shebang, the language is derived from that and line numbers are used.

    #!/usr/bin/python
    # Code goes here ...
Output:

1
2 #!/usr/bin/python
# Code goes here ...
 

If the first line contains a shebang, but the shebang line does not contain a path (a single / or even a space) or If the first line begins with three or more colons, the text following the colons identifies the language. In both cases, the first line is removed from the code block before processing.

    :::python
    # Code goes here ...
Output:

# Code goes here ...
You can also designate a code block by surrounding it with lines of tildes. The type of code highlighting to apply will be inferred based on the code within, or you can specify like above.

~~~~~~
<a href="#">My code</a>
~~~~~~
Output:

<a href="#">My code</a>
Includes
You can embed another wiki page directly:

[[include ref=SamplePage]]
No example output is available for this one because it only works on real wiki pages. Try it in your wiki!

Neighborhood Notifications
You can list updates from all projects in a neighborhood by tool type. Max_number (default is 5) and sort (default is pubdate) are optional:

[[neighborhood_feeds tool_name=Wiki max_number=10 sort=pubdate]]
Neighborhood Blog Posts
You can view blog posts from all projects in a neighborhood. Max_number (default is 5) and sort (default is timestamp) are optional:

[[neighborhood_blog_posts max_number=10 sort=timestamp]]
Project Blog Posts
You can view blog posts from all blogs in a project. Max_number (default is 5), mount point (leave empty to view posts from all blog tools in a project), and sort (default is timestamp) are optional:

[[project_blog_posts max_number=10 sort=timestamp mount_point=news]]
Download Button
You can display a download button that links to the best download available for the active project. Please note that if you use this macro and there is no download associated with your project, the button will not appear.

[[download_button]]
Project Screenshots
You can show all the screenshots for the current project as thumbnails that are linked to the full-size image.

[[project_screenshots]]
Thanks
Thanks to John Gruber and Aaron Swartz for creating Markdown.

This page is based on some examples from Greg Schueler, greg@vario.us

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date>2011-11-22 18:13:52</wp:post_date>
		<wp:post_date_gmt>2011-11-22 10:13:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>markdown-syntax-guide</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="guide"><![CDATA[guide]]></category>
		<category domain="post_tag" nicename="markdown"><![CDATA[markdown]]></category>
		<category domain="post_tag" nicename="syntax"><![CDATA[syntax]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6ce894130df6f910f316dfceee9ebdb7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2d38b9473a31e1b96557e743af2b2d87</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Django 国际化实例及原理分析</title>
		<link></link>
		<pubDate>Thu, 24 Nov 2011 04:02:08 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=81</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

当 Web 服务搭建好以后，可以接收来自全球不同国家用户访问。这样就要求开发人员调整软件，使之能适用于不同的语言，即国际化和本地化。国际化 -- Internationalization，i 和 n 之间有 18 个字母，简称 I18N,。本地化 -- localization， l 和 n 之间有 10 个字母，简称 L10N。国际化意味着 Web 产品有适用于任何地方的潜力，针对程序开发人员；本地化则是指使一个国际化的程序为了在某个特定地区使用而进行实际翻译的过程，针对翻译人员而言。

Django 提供了非常强大的翻译机制，开发者一旦理解它的实现，就能减少编码量，提高开发效率。

本文通过两个 Django 国际化实例循序渐进地介绍在 Django 环境里进行 Web 程序国际化和本地化开发的相关方法和知识。并结合 Django 国际化现有代码进行分析，向读者阐述 Django 国际化的原理与内部实现。学习本文，可以很好的掌握国际化 Django 程序的技术。

当 Web 服务搭建好以后，可以接收来自全球不同国家用户访问。这样就要求开发人员调整软件，使之能适用于不同的语言，即国际化和本地化。国际化 -- Internationalization，i 和 n 之间有 18 个字母，简称 I18N,。本地化 -- Localization， l 和 n 之间有 10 个字母，简称 L10N。国际化意味着 Web 产品有适用于任何地方的潜力，针对程序开发人员；本地化则是指使一个国际化的程序为了在某个特定地区使用而进行实际翻译的过程，针对翻译人员而言。

Django 提供了非常强大的翻译机制，开发者一旦理解它的实现，就能减少编码量，提高开发效率。

<a name="major1"></a>Django 国际化简介

Django 的开发和维护者对 Django 框架本身进行了完全国际化，我们可以在 ./Python2.5/site-packages/django/conf/locale/ 找到相关的语言文件。目前 Django-1.2.1 带着 52 个不同的本地化语言文件发行的，使用户能够方便的使用它现有的管理界面。

Django 国际化的本质就是开发者对需要翻译的字符串进行标记，并对字符串进行相应的翻译。当用户访问该 Web 时，Django 内部框架根据用户使用偏好进行 Web 呈现。

Django 国际化使用的翻译模块是使用 Python 自带的 gettext 标准模块。通过一个到 GNU gettext 消息目录库的接口，这个模块为 Python 程序提供了国际化 (I18N) 和本地化 (L10N)。

开发人员和翻译人员需要完成一下 3 个步骤：

1. 第一步：在 Python 代码和模板中嵌入待翻译的字符串，

2. 第二步：把那些字符串翻译成需要支持的语言，并进行相应的编译

3. 第三步：在 Django settings 文件中激活本地中间件，

下面我们将通过这个几个步骤，介绍两个实例，然后在每个实例后结合 Django 代码来向读者介绍 Django 国际化的原理。本文环境：CentOS release 5.3 (Final)，Python 2.5.5 ， gettext 版本为 gettext-0.14.6-4.el5，浏览器为 Fixfox 3.6.3., Django-1.2.1。请前往<a href="http://www.djangoproject.com/download/">http://www.djangoproject.com/download/</a>下载并安装 Django。

读者最好能边阅读本文，边在计算机上进行操作，达到最佳学习效果。因此，需要读者具备以下技能：
<ol type="1">
	<li>熟悉基本的 Linux 操作命令</li>
	<li>熟悉 Python 语法，对编写 Django 应用程序所有了解。</li>
</ol>
本文附带相关源代码，直接下载并解压缩到配置好 Django 的环境中，就可以运行看到效果。
<div> </div>
&nbsp;

<a name="major2"></a>针对 Python 代码的国际化实例及原理分析

对 Django 中 Python 代码进行国际化主要用到 ugettext()，gettext_noop()，gettext_lazy() 和 ungettext() 等函数。在本 Django 应用程序实例中，主要 Python 代码都集中在 models.py 和 views.py。 我们将 ugettext() 使用对 views.py 中的相关字符串进行实例化。接着，我们将会结合 Django 代码对整个过程的原理实现做详细的介绍。

<a name="minor2.1"></a>一个简单的 Python Web 程序

首先在 /home/jerry/ 目录下 , 创建名为 testsite 的 Project，请参考清单 1:
<a name="listing1"></a><strong>清单 1. 创建一名为 testsite 的 project</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 [root@localhost jerry]# django-admin.py startproject testsite
 [root@localhost jerry]# cd testsite/
 [root@localhost testsite]# ls
 __init__.py  manage.py  settings.py  urls.py</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

接着，在 /home/jerry/testsite 目录下创建一个名为 test1 的 Django App, 请参看清单 2。
<a name="listing2"></a><strong>清单 2. 创建名为 test1 的 Django App</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 [root@localhost testsite]# Python manage.py startapp test1
 [root@localhost testsite]# ls
 __init__.py  __init__.pyc  manage.py  settings.py  settings.pyc  test1  urls.py
 [root@localhost testsite]#cd test1</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

接着，在 test1 的 views.py 中添加代码获取今天周期几，具体代码参看清单 3。
<a name="listing3"></a><strong>清单 3. test1 的 views.py 中的代码</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 [root@localhost test1]# vim views.py

 # Create your views here.
 from django.http import HttpResponse
 import time

 def test1_view(request):
 # 获得系统本地时间，返回的格式是 UTC 中的 struct_time 数据
        t  = time.localtime()
 # 第 6 个元素是 tm_wday , 范围为 [0,6], 星期一 is 0
        n  = t[6]
 # 星期一到星期日字符串
weekdays = [&#039;Monday&#039;, &#039;Tuesday&#039;, &#039;Wednesday&#039;, &#039;Thursday&#039;, &#039;Friday&#039;, &#039;Saturday&#039;,
&#039;Sunday&#039;]
 # 返回一个 HttpResponse、，这段代码将用来返回服务器系统上是星期几。
        return HttpResponse(weekdays[n])</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

然后配置 URL, 在 url.py 增加用户访问 test1_view 的 url, 具体请参看清单 4。
<a name="listing4"></a><strong>清单 4. test1_view 的 url 配置</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 [root@localhost testsite]# vim urls.py
 from testsite.test1 import views

 urlpatterns = patterns(&#039;&#039;,
    …
    (r&#039;^test1_view$&#039;, views.test1_view),
 )

在 testsite 中，setting.py 中默认的语言设置为 en-us:

 LANGUAGE_CODE = &#039;en-us&#039;</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

在更新 url.py 和 setting.py 后，在 /home/jerry/testsite 目录下启动服务，具体参看清单 5：
<a name="listing5"></a><strong>清单 5. 启动 testsite 服务</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 root@localhost testsite]# Python manage.py runserver 0.0.0.0:8080</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

当启动服务没有错误提示，就可以在在浏览器中输入 Web 服务地址 : <a href="http://192.168.174.128:8080/test1_view">http://192.168.174.128:8080/test1_view</a>，就会看到英文星期几，具体见图 1:
<a name="fig1"></a><strong>图 1. test1 未国际化时的显示结果</strong>
<img src="http://www.ibm.com/developerworks/cn/web/1101_jinjh_djangoi18n/image003.jpg" alt="图 1. test1 未国际化时的显示结果" width="484" height="251" /> 

<a name="minor2.2"></a>对 Python 代码的国际化和本地化

接下来我们将对 views.py 中的字符串进行国际化和本地化。

<strong>指定待翻译的字符串</strong>

首先，代码中，使用函数 ugettext() 指定一个待翻译的字符串。另外，为了节约输入时间，代码中使用“from django.utils.translation import ugettext as _”即用短别名 _ 来引入这个函数。具体代码修改如下清单 6:
<a name="listing6"></a><strong>清单 6. 国际化 test1</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 [root@localhost test1]# vim views.py

 # Create your views here.
 from django.http import HttpResponse
 from django.utils.translation import ugettext as _
 import time

 def test1_view(request):
 # 获得系统本地时间，返回的格式是 UTC 中的 struct_time 数据
        t  = time.localtime()
 # 第 6 个元素是 tm_wday , 范围为 [0,6], 星期一 is 0
        n  = t[6]
 # 星期一到星期日字符串，每个字符串用 _() 标识出来。
weekdays = [_(&#039;Monday&#039;), _(&#039;Tuesday&#039;), _(&#039;Wednesday&#039;), _(&#039;Thursday&#039;),
_(&#039;Friday&#039;), _(&#039;Saturday&#039;), _(&#039;Sunday&#039;)]
 # 返回一个 HttpResponse

        return HttpResponse(weekdays[n])</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

<strong>创建语言文件</strong>

接下来，先在 test1 App 目录下创建 locale 目录，并运行“django-admin.py makemessages -l zh_CN”产生 locale/zh_CN/LC_MESSAGES/django.po 文件 , 具体操作请参看清单 7.
<a name="listing7"></a><strong>清单 7. 创建语言文件</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 [root@localhost test1]# mkdir locale
 [root@localhost test1]# ls
 __init__.py  __init__.pyc  locale  models.py  tests.py  views.py  views.pyc
 [root@localhost test1]# django-admin.py makemessages -l zh_CN</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

打开 locale/zh_CN/LC_MESSAGES/django.po 文件，其主要内容如清单 8：
<a name="listing8"></a><strong>清单 8. 更新 django.po 文件</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 #: views.py:12
 msgid &quot;Monday&quot;
 msgstr &quot;星期一&quot;

 #: views.py:12
 msgid &quot;Tuesday&quot;
 msgstr &quot;星期二&quot;

 #: views.py:12
 msgid &quot;Wednesday&quot;
 msgstr &quot;星期三&quot;

 #: views.py:12
 msgid &quot;Thursday&quot;
 msgstr &quot;星期四&quot;

 #: views.py:12
 msgid &quot;Friday&quot;
 msgstr &quot;星期五&quot;

 #: views.py:12
 msgid &quot;Saturday&quot;
 msgstr &quot;星期六&quot;

 #: views.py:12
 msgid &quot;Sunday&quot;
 msgstr &quot;星期天&quot;</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

这个文件是一个纯文本文件，包含用于翻译的原始字符串和目标语言字符串。

# 为前缀的行起注释作用。msgid 是在源文件中出现的翻译字符串。msgstr 是相应语言的翻译结果。注意语句前后都有引号。 刚创建时 msgstr 是空字符串，需要翻译人员翻译。这个文件，用户可以手动按格式添加一些内容。

<strong>编译信息文件</strong>

创建信息文件之后，每次对其做了修改，都需要用 django-admin.py compilemessages 编译成“.mo”文件供 gettext 使用，具体操作请参看清单 9。
<a name="listing9"></a><strong>清单 9. 编译信息文件</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 [root@localhost test1]# django-admin.py compilemessages</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

<strong>确认相关配置</strong>

首先需要确认 testsite 目录下 setting.py 的配置，主要需要核实 LANGUAGE_CODE，USE_I18N 和 MIDDLEWARE_CLASSES。主要配置请参看清单 10:
<a name="listing10"></a><strong>清单 10. setting.py 中的国际化相关配置</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 LANGUAGE_CODE = &#039;en-us&#039;
 USE_I18N = True
 MIDDLEWARE_CLASSES = (
    &#039;django.middleware.common.CommonMiddleware&#039;,
    &#039;django.contrib.sessions.middleware.SessionMiddleware&#039;,
    &#039;django.middleware.locale.LocaleMiddleware&#039;,
    &#039;django.contrib.auth.middleware.AuthenticationMiddleware&#039;,
 )</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

请注意注意 MIDDLEWARE_CLASSES 中的'django.middleware.locale.LocaleMiddleware', 需要放在'django.contrib.sessions.middleware.SessionMiddleware' 后面。

<strong>Firefox 语言顺序的选择</strong>

工具 - 〉选项 - 〉内容，语言栏这一项选着，将汉语 / 中国 [zh-cn] 移到最上面。这样页面将会根据浏览器的配置，优先中文显示，具体请参看图 2。
<a name="fig2"></a><strong>图 2. Firefox 中文选择</strong>
<img src="http://www.ibm.com/developerworks/cn/web/1101_jinjh_djangoi18n/image005.jpg" alt="图 2. Firefox 中文选择" width="510" height="483" /> 

<a name="listing11"></a><strong>启动 test1 服务</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 [root@localhost testsite]# Python manage.py runserver 0.0.0.0:8080</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

<strong>察看 test1 国际化效果</strong>

在 Firefox 中输入 服务地址 : <a href="http://192.168.174.128:8080/test1_view">http://192.168.174.128:8080/test1_view</a>, 就能看到中文星期四几，具体效果请参看图 3。
<a name="fig3"></a><strong>图 3. test1 国际化效果</strong>
<img src="http://www.ibm.com/developerworks/cn/web/1101_jinjh_djangoi18n/image007.jpg" alt="图 3. test1 国际化效果" width="472" height="276" /> 

<strong>指定待翻译的字符串另外一种方式</strong>

另外，_() 的参数也可以是变量，views.py 中的相关行可修改成如清单 11：
<a name="listing12"></a><strong>清单 11. _() 的参数为变量</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
  …
weekdays = [&#039;Monday&#039;, &#039;Tuesday&#039;, &#039;Wednesday&#039;, &#039;Thursday&#039;,
&#039;Friday&#039;, &#039;Saturday&#039;, &#039;Sunday&#039;]
return HttpResponse(_(weekdays[n]))
  … ..</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

此时运行，重新创建语言文件 :

[root@localhost test1]# django-admin.py makemessages -l zh_CN

processing language zh_CN

若之前没有 django.po 文件，此时也不会产生。需要自己将 weekdays 里面的每个元素按格式添加到 locale/zh_CN/LC_MESSAGES/django.po 中，再运行

django-admin.py compilemessages

这样国际化也可以成功。

<a name="minor2.3"></a>针对 Python 代码国际化原理分析

通过上面那个实例，可以了解到对 Python 代码国际化的全过程。接下来，我们结合 Django 代码来分析以下两个国际化的关键点的工作流程来理解 Python 代码的国际化的原理 :

1，配置文件 setting.py 中 USE_I18N = True

2, 指定翻译字符串的 4 个主要函数

django.utils.translation.ugettext()

django.utils.translation.gettext_noop()

django.utils.translation.gettext_lazy()

django.utils.translation.ungettext()

<strong>4 个主要函数的用途</strong>

其中：

django.utils.translation.ugettext()

指定一个翻译字符串，一般都用于 views.py

django.utils.translation.gettext_noop()

标记一个不需要立即翻译的字符串。 这个串会稍后从变量翻译。使用这种方法的环境是，有字符串必须以原始语言的形式存储（如储存在数据库中的字符串）而在最后需要被 翻译出来（如显示给用户时）。

django.utils.translation.gettext_lazy()

ugettext_lazy() 将字符串作为惰性参照存储，而不是实际翻译 , 一般会用于 models.py。 翻译工作将在字符串在字符串上下文中被用到时进行，比如在 Django 管理页面提交模板时。在 Django 模型中总是无一例外的使用惰性翻译。

django.utils.translation.ungettext()

函数包括三个参数： 单数形式的翻译字符串，复数形式的翻译字符串，和对象的个数（将以 count 变量传递给需要翻译的语言）。

<strong>主要函数实现原理和 USE_I18N 变量</strong>

在 /usr/local/lib/Python2.5/site-packages/django/utils/translation 中存在 __init__.py，trans_null.py 和 trans_real.py 3 个重要的文件。

__init__.py 表示该目录作为 Python 的一个包，在 Python 中可以为空。django.utils.translation 模块中的 __init__.py 包含了包级别的初始化代码。“__init__.py”文件定义了一个名为“__all__”的列表，这个列表就作为从包内导入 * 时要导入的所有模块的名字表。

具体代码如下 :

__all__ = ['gettext', 'gettext_noop', 'gettext_lazy', 'ngettext',

'ngettext_lazy', 'string_concat', 'activate', 'deactivate',

'get_language', 'get_language_bidi', 'get_date_formats',

'get_partial_date_formats', 'check_for_language', 'to_locale',

'get_language_from_request', 'templatize', 'ugettext', 'ugettext_lazy',

'ungettext', 'deactivate_all']

并且在 __init__.py 中定义了我们上面提到的几个函数：

def gettext_noop(message):

return real_gettext_noop(message)

def gettext(message):

return real_gettext(message)

def ugettext(message):

return real_ugettext(message)

def ungettext(singular, plural, number):

return real_ungettext(singular, plural, number)

gettext_lazy = lazy(gettext, str)

注意 : lazy 是一种延迟计算，使用它表示一种对结果的承诺，但只有当真正需要时才会去计算。只要你不是真是需要，你得到的并不是真正的结果。

USE_I18N 变量的如何产生作用的？

/usr/local/lib/Python2.5/site-packages/django/utils/translation/__init__.py 将调用本文件内的 delayed_loader（）函数。

在 delayed_loader（）函数中会把这些 real_* 函数替换成 trans_real 和 trans_null 中的函数，如 real_gettext 被替换成 trans_real.gettext 或者 trans_null.gettext。如果在项目的根目录 settings.py 中设置了 USE_I18N = True，表示我们在应用程序中采用国际化，则所有的函数被替换成 trans_real.*，否则，不采用国际化，将被替换成 trans_null.*。这个替换做一次，并且一次将所有的函数都替换掉。

trans_null.py 文件：不打算翻译时，为了性能考虑。 settings.USE_I18N = False 时，使用这个模块中函数 , 此时，django.utils.translation.trans_real 中的函数将不作任何事情。

trans_real.py 文件 : settings.USE_I18N = True 时，将会使用这个模块中的函数。我们看看上面几个函数在 trans_real.py 中的实现 :

def gettext(message):

return do_translate(message, 'gettext')

def ugettext(message):

return do_translate(message, 'ugettext')

def gettext_noop(message):

......

标识这个字符串将要翻译，但现在没有翻译。它可被用于在全局变量中存储基本语言的字符串 ( 因为它们可能在外部被使用 )，稍微翻译。

......

return message

gettext 和 ugettext 都调用了 do_translate（）函数。do_translate（）函数使用了 Python 的 gettext 模块来处理带翻译的字符串。从而通过 Python 的 gettext 模块来完成国际化和本地化。
<div> </div>
&nbsp;

<a name="major3"></a>针对 template 代码的国际化实例及原理分析

<a name="minor3.1"></a>一个较复杂的 Django 的国际化实例

<strong>创建名为 test2 的 Django App</strong>

同第一个实例在同一项目，在 testsite 目录里创建名为 test2 的 Django App.
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre> [root@localhost testsite]# Python manage.py startapp test2</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

<strong>创建 test2 的模版文件</strong>

在项目（Project）testsite 目录下创建 templates/test2/index.html 文件。具体操作及文件内容请参看清单 12。
<a name="listing13"></a><strong>清单 12. test2 的模版文件</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 [root@localhost testsite]#mkdir – p templates/test2
 [root@localhost testsite]#cd  templates/test2
 [root@localhost test2]#vim index.html

 {% load i18n %}
 &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;
 xml:lang=&quot;{{ LANGUAGE_CODE }}&quot; lang=&quot;{{ LANGUAGE_CODE }}&quot;&gt;

 &lt;head&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=ISO-8859-1&quot; /&gt;
    &lt;title&gt;Welcome to my site&lt;/title&gt;
         &lt;script  type=&quot;text/javascript&quot;&gt;
               function selectdo(obj) {
                        str=&quot;/i18n/setlang/&quot;;
                        myform = document.getElementById(&#039;testform&#039;);
                        myform.method = &quot;POST&quot;;
                        myform.action = str;
                        myform.submit();
                }
        &lt;/script&gt;

 &lt;/head&gt;
 &lt;body&gt;
        &lt;form name=&quot;testform&quot; id=&quot;testform&quot; method=&#039;post&#039;&gt;
            &lt;select id=&quot;language&quot; name=&quot;language&quot; onchange=&quot;selectdo(this)&quot;&gt;
           &lt;!--    &lt;input name=&quot;next&quot; type=&quot;hidden&quot; value=&quot;{{request.path}}&quot; /&gt;--&gt;
                &lt;option value=&quot;1&quot; &gt;{% trans &quot;Languages&quot; %}&lt;/option&gt;
                 {% for lang in LANGUAGES %}
                &lt;option value=&quot;{{ lang.0 }}&quot; &gt; {{ lang.1 }}&lt;/option&gt;
                 {% endfor %}
              &lt;/select&gt;
         &lt;/form&gt;
         &lt;p&gt;{% trans &quot;The first sentence is from the  template index.html&quot; %}&lt;/p&gt;
        {{ code }}
 &lt;/body&gt;
 &lt;/html&gt;</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

在代码中已经加入了国际化模版相关代码，下面 4 点需要注意：

1 ． `{% load i18n %}`

使模版能够访问到访问到标签。

2 ． `{% trans str %}`

标记翻译一个常量字符串或 可变内容

3 ． 模版中的 select 的 name 值必须为"language"

4. 将 testform 的 action 重定向到 /i18n/setlang/，启用了 django.views.i18n.set_language 视图，它的作用是设置用户语言偏好并重定向返回到前一页面。

它们的工作原理，将在“针对 template 代码国际化原理分析”进行剖析。

<strong>设置模版路径</strong>

我们需要在 setting.py 里配置 template 的路径，具体请参看清单 13：
<a name="listing14"></a><strong>清单 13. 设置模版路径</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 [root@localhost testsite] vim settings.py
 TEMPLATE_DIRS = (
      。。。。。。
     &#039;/home/jerry/testsite/templates&#039;,
 )</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

请注意 : Template 不能放在 app 目录下，需要放在 project 下面。否则，国际化将会失败，页面仅显示英文。

<strong>增加 test2 App 的 views.py 代码</strong>

在 /home/jerry/testsite/test2/views.py 增加一下内容，具体请参看清单 14：
<a name="listing15"></a><strong>清单 14. test2 的 views.py 内容</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 # Create your views here.
 from django.http import HttpResponse
 from django.shortcuts import render_to_response
 from django.template import RequestContext
 from django.utils.translation import ugettext_lazy as _

 def test2_view(request):
    code = _(&quot;The second sentence is from the Python code.&quot;);
    responseContext = {&#039;lang&#039;:request.LANGUAGE_CODE,
                        &#039;code&#039;:code,
                        }
    resp = render_to_response(&#039;test2/index.html&#039;, responseContext,
                                context_instance=RequestContext(request))
    return resp</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

<strong>更新 URL</strong>

修改 /home/jerry/testsite/urls.py，首先，我们需要从 testsite.test2.views 模块中导入所有函数。接着在 urlpatterns 中加入 test2_veiw 和 i18n 的 url，具体请参看清单 15。
<a name="listing16"></a><strong>清单 15. 更新 URL</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 from django.conf.urls.defaults import *
 from testsite.test2.views import *
。。。。。。

 urlpatterns = patterns(&#039;&#039;,
    。。。。。。
    (r&#039;^test2_view$&#039;, test2_view),
    (r&#039;^i18n/&#039;, include(&#039;django.conf.urls.i18n&#039;)),
 )</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

<strong>更新 setting</strong>

修改 /home/jerry/testsite/settings.py，更新国际化 相关的设置 , 具体请参看清单 16。
<a name="listing17"></a><strong>清单 16. 更新国际化相关设置</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 DATABASE_ENGINE = &#039;mysql&#039; # &#039;postgresql_psycopg2&#039;, &#039;postgresql&#039;
 DATABASE_NAME = &#039;test&#039; # Or path to database file if using sqlite3.
 DATABASE_USER = &#039;root&#039; # Not used with sqlite3.
 DATABASE_PASSWORD = &#039;1234&#039;  # Not used with sqlite3.
 DATABASE_HOST = &#039;&#039;  # Set to empty string for localhost. Not used with sqlite3.
 DATABASE_PORT = &#039;&#039;  # Set to empty string for default. Not used with sqlite3.

 USE_I18N = True

 ugettext = lambda s: s

 LANGUAGES = (
    (&#039;en-us&#039;, ugettext(&#039;English&#039;)),
    (&#039;zh-CN&#039;, ugettext(&#039;Chinese&#039;)),
 )

 TEMPLATE_CONTEXT_PROCESSORS = (
 #     &quot;django.core.context_processors.auth&quot;,
 #    &quot;django.core.context_processors.debug&quot;,

    &quot;django.core.context_processors.i18n&quot;,
 #    &quot;django.core.context_processors.request&quot;,
 )

 MIDDLEWARE_CLASSES = (
    &#039;django.middleware.common.CommonMiddleware&#039;,
    &#039;django.contrib.sessions.middleware.SessionMiddleware&#039;,
    &#039;django.middleware.locale.LocaleMiddleware&#039;,
    &#039;django.contrib.auth.middleware.AuthenticationMiddleware&#039;,
 )</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

这里需要注意，需要用数据库保存 session。在本实例中用到了 mysql test2 数据库中的 django_session 数据表。我们在 /home/jerry/testsite 目录下运行 Python manage.py syncdb 就能产生 django_session 了。具体见清单 17：
<a name="listing18"></a><strong>清单 17. 产生 django_session 数据表</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 [root@localhost testsite]# Python manage.py syncdb</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

<strong>创建并更新语言文件</strong>

创建 django.po 文件后，需要将其中 msgid 所在行引号内的英语，都翻译中文，写在 msgstr 所在行的引号内。具体请参看清单 18。
<a name="listing19"></a><strong>清单 18. 创建并更新语言文件</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 [root@localhost testsite]# django-admin.py makemessages -l zh_CN
 [root@localhost testsite]# vim locale/zh_CN/LC_MESSAGES/django.po
……
 #: settings.py:41
 msgid &quot;English&quot;
 msgstr &quot;英语&quot;

 #: settings.py:42
 msgid &quot;Chinese&quot;
 msgstr &quot;中文&quot;

 #: templates/test2/index.html:8
 msgid &quot;Welcome to my site&quot;
 msgstr &quot;欢迎访问我的网站&quot;

 #: templates/test2/index.html:24
 msgid &quot;Languages&quot;
 msgstr &quot;语言&quot;

 #: templates/test2/index.html:30
 msgid &quot;The first sentence is from the  template index.html&quot;
 msgstr &quot;第一句话来自 intex.html 模版。&quot;

 #: test2/views.py:8
 msgid &quot;The second sentence is from the Python code.&quot;
 msgstr &quot;第二句话来自 Python 代码。&quot;</pre>
</td>
</tr>
</tbody>
</table>
<a name="listing20"></a><strong>编译信息文件</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 [root@localhost testsite]#  django-admin.py compilemessages</pre>
</td>
</tr>
</tbody>
</table>
<a name="listing21"></a><strong>启动服务</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 [root@localhost testsite]# Python manage.py runserver 0.0.0.0:8080</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

<strong>察看结果</strong>

在 firfox 中输入 服务地址 : <a href="http://192.168.174.128:8080/test2_view">http://192.168.174.128:8080/test2_view</a>

应为 Firfox 浏览器的配置如图， 优先中文配置。所以，初始显示如图 4：
<a name="fig4"></a><strong>图 4. test2 中文显示效果</strong>
<img src="http://www.ibm.com/developerworks/cn/web/1101_jinjh_djangoi18n/image009.jpg" alt="图 4. test2 中文显示效果" width="475" height="321" /> 

当选择下拉框中的 English 时，页面将会迅速更新为图 5:
<a name="fig5"></a><strong>图 5. test2 英文显示效果</strong>
<img src="http://www.ibm.com/developerworks/cn/web/1101_jinjh_djangoi18n/image011.jpg" alt="图 5. test2 英文显示效果" width="476" height="331" /> 

<a name="minor3.2"></a>针对 template 代码国际化原理分析

本小节将结合 Django 代码来分析在 template 代码国际化所用到的关键点的工作原理。

<strong>Load i18n 实现原理</strong>

模板中的 `{% load %}` 标签用于加载已有的模板。

在 /usr/local/lib/Python2.5/site-packages/django/templatetags/i18n.py 文件中定义了指定模版中翻译字符串的模板标签。在 django 的模板前加入 `{% load i18n %}`，在 i18n.py 源文件中的定义标签就可以在有 load 语句的模板中使用了。

<strong>模板标签的实现原理</strong>

<strong>Django 模板两种常用模板标签</strong>

`{% trans %}` 模板标签标记需要翻译的字符串；如果只需要标记字符串而以后再翻译，可以使用 noop 选项。

在 `{% trans %}` 中不允许使用模板中的变量，只能使用单引号或双引号中的字符串。如果翻译时需要用到变量（占位符），可以使用 `{% blocktrans %}`。

如果需要在 blocktrans 标签内绑定多个表达式，可以用 and 来分隔。

为了表示单复数相关的内容，需要在 `{% blocktrans %}` 和 `{% endblocktrans %}` 之间使用 `{% plural %}` 标签来指定单复数形式。

<strong>模版标签实现分析</strong>

{% trans %}

通过 /usr/local/lib/Python2.5/site-packages/django/templatetags/i18n.py 文件 do_translate（）实现的。do_translate（）处理了 `{% trans %}` 的三种格式：
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre> {% trans &quot;this is a test&quot; %}
 {% trans &quot;this is a test&quot; noop %}
 {% trans variable %}</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

do_translate() 调用了 TranslateNode（），最后通过 django.utils.translation.ugettext() 来处理的。具体实现可参看 Django 源代码。

`{% blocktrans %}` 和 `{% endblocktrans %}`

通过 /usr/local/lib/Python2.5/site-packages/django/templatetags/i18n.py 文件 do_block_translate（）实现的。

用于翻译带参数的文本块

用法 :
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>{% blocktrans with foo|filter as bar and baz|filter as boo %}
This is {{ bar }} and {{ boo }}.
{% endblocktrans %}</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

另外，支持复数 ::
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>{% blocktrans count var|length as count %}
There is {{ count }} object.
{% plural %}
There are {{ count }} objects.
{% endblocktrans %}</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

do_block_translate（）条用了 BlockTranslateNode（），其内在机制是，所有的块和内嵌翻译调用 django.utils.translation.ugettext() 和 django.utils.translation.ungettext() 即相应的 gettext 或 ngettext 。

在 i18n.py 中，用 register.tag() 注册 Tag 名字和对应的处理方法 :

register.tag('trans', do_translate)

register.tag('blocktrans', do_block_translate)

这样 i18n.py 中定义标签就可以在 template 中使用了。

<strong>激活 set_language 重定向视图的实现原理</strong>

django.views.i18n.set_language 视图的主要作用是设置用户语言偏好并重定向返回到前一页面。

对 template 代码国际化时，需要在项目中的 urls.py 添加 url 到 urlpatterns 中 :
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre> urlpatterns += patterns(&#039;&#039;,
    (r&#039;^i18n/&#039;, include(&#039;django.conf.urls.i18n&#039;)),
 )</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

为什么呢？

我们继续深入 django.conf.urls.i18n 看看到底做什么处理。

在 /usr/local/lib/Python2.5/site-packages/django/conf/urls/i18n.py 中内容为 :
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre> from django.conf.urls.defaults import *

 urlpatterns = patterns(&#039;&#039;,
    (r&#039;^setlang/$&#039;, &#039;django.views.i18n.set_language&#039;),
 )</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

当用户在 url 附加上 /i18n/setlang/，就会重定向到 django.views.i18n.set_language()。

在 /usr/local/lib/Python2.5/site-packages/django/views/ i18n.py 中的 set_language() 函数的实现比较经典，如清单 19，供大家参考。
<a name="listing22"></a><strong>清单 19. 重定向视图函数 set_language</strong>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>
 def set_language(request):
    &quot;&quot;&quot;
当在 session 或 cookie 中设置所选择的语言时，会重定向到指定的网址。
URL 和语言代码需要在 request 的参数中被指定。由于这个视图改变用户如何看到网站的其他部分，
它必须只能通过 POST request. 如果调用 GET request,
它将重定向到 request 的那页，但没有任何状态改变。
    &quot;&quot;&quot;
    next = request.REQUEST.get(&#039;next&#039;, None)
    if not next:
        next = request.META.get(&#039;HTTP_REFERER&#039;, None)
    if not next:
        next = &#039;/&#039;
    response = http.HttpResponseRedirect(next)
    if request.method == &#039;POST&#039;:
        lang_code = request.POST.get(&#039;language&#039;, None)
        if lang_code and check_for_language(lang_code):
            if hasattr(request, &#039;session&#039;):
                request.session[&#039;django_language&#039;] = lang_code
            else:
                response.set_cookie(settings.LANGUAGE_COOKIE_NAME, lang_code)
 return response</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

从上面的代码，可以了解到保存了语言选择后，Django 根据以下算法来重定向页面：

（1）Django 在 POST 数据中寻找 next 参数。

（2）如果 next 参数不存在或为空，Django 尝试重定向页面为 HTML 头部信息中 Referer 的值。

（3）如果 Referer 也是空的，即该用户的浏览器并不发送 Referer 头信息，则页面将重定向到 / （页面根目录）。

这个视图是通过 POST 方法调用的，在请求中包含了 language 参数。所以在前面的模版的 select 的 name 和 id 必须为” language”。

如果 session 已启用，这个视图会将语言选择保存在用户的 session 中。 否则，它会以缺省名 django_language 在 cookie 中保存这个语言选择。( 这个名字可以通过 LANGUAGE_COOKIE_NAME 设置来改变 )。
<div> </div>
&nbsp;

<a name="major4"></a>小结

本文通过两个 Django 国际化实例向读者介绍了如何对 Django 程序中的 Python 和 template 代码进行国际化和本地化。并结合 Django 国际化现有代码框架进行分析，向读者阐述 Django 国际化的原理与内部实现。通过学习，可以很好的掌握国际化 Django 程序的技术。

&nbsp;
<div> </div>
&nbsp;

<a name="download"></a>下载
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<th scope="col">描述</th>
<th scope="col">名字</th>
<th scope="col">大小</th>
<th scope="col">下载方法</th>
</tr>
<tr>
<td scope="row">示例代码</td>
<td nowrap="nowrap">testsite.zip</td>
<td nowrap="nowrap">15KB</td>
<td nowrap="nowrap"><a href="http://www.ibm.com/developerworks/apps/download/index.jsp?contentid=620166&amp;filename=testsite.zip&amp;method=http&amp;locale=zh_CN">HTTP</a></td>
</tr>
</tbody>
</table>
<a href="http://www.ibm.com/developerworks/cn/whichmethod.html">关于下载方法的信息</a>

&nbsp;

<a name="resources"></a>参考资料

<strong>学习</strong>
<ul>
	<li><a href="http://docs.python.org/library/time.html">Python 库函数文件</a>：该页面能查到很多 time 相关的 Python 库函数。 </li>
	<li><a href="http://www.djangoproject.com/">Django 官方网站</a>，在上面可以下载到 Django 源代码，及其他文档。 </li>
	<li><a href="http://www.djangobook.com/">Django 书在线版</a>，关于 Django Web 框架介绍的一本免费书 。 </li>
	<li><a href="http://www.woodpecker.org.cn/share/projects/django/django-stepbystep/newtest/doc/">Django Step by Step 系列教程</a>，非常好的 Django 入门必备书籍。 </li>
	<li><a href="http://www.ibm.com/developerworks/cn/web/">developerWorks Web development 专区</a>：通过专门关于 Web 技术的文章和教程，扩展您在网站开发方面的技能。</li>
	<li><a href="http://www.ibm.com/developerworks/cn/ajax/">developerWorks Ajax 资源中心</a>：这是有关 Ajax 编程模型信息的一站式中心，包括很多文档、教程、论坛、blog、wiki 和新闻。任何 Ajax 的新信息都能在这里找到。</li>
	<li><a href="http://www.ibm.com/developerworks/cn/web20/">developerWorks Web 2.0 资源中心</a>，这是有关 Web 2.0 相关信息的一站式中心，包括大量 Web 2.0 技术文章、教程、下载和相关技术资源。您还可以通过 <a href="http://www.ibm.com/developerworks/cn/web20/newto/">Web 2.0 新手入门</a> 栏目，迅速了解 Web 2.0 的相关概念。</li>
	<li>查看 <a href="http://www.ibm.com/developerworks/cn/web/lp/html5/">HTML5 专题</a>，了解更多和 HTML5 相关的知识和动向。</li>
</ul>
</div>
<div>标签： <a href="http://jhjguxin.hwcrazy.com/tag/django/">django</a> <a href="http://jhjguxin.hwcrazy.com/tag/i18n/">i18n</a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2011-11-24 12:02:08</wp:post_date>
		<wp:post_date_gmt>2011-11-24 04:02:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>django-%e5%9b%bd%e9%99%85%e5%8c%96%e5%ae%9e%e4%be%8b%e5%8f%8a%e5%8e%9f%e7%90%86%e5%88%86%e6%9e%90</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="django"><![CDATA[django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[django]]></category>
		<category domain="post_tag" nicename="i18n"><![CDATA[i18n]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Active Record Validations and Callbacks 活动记录验证和回调</title>
		<link></link>
		<pubDate>Thu, 24 Nov 2011 05:38:46 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=86</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Active Record Validations and Callbacks <span style="font-family: WenQuanYi Micro Hei;">活动记录验证和回调</span></h2>
This guide teaches you how to hook<span style="font-family: DejaVu Sans;">勾子</span>into the life cycle of your Active Record objects.<span style="font-family: DejaVu Sans;">这个教程指导你怎样挂接到你的</span>Active Record objects<span style="font-family: DejaVu Sans;">的生存周期。</span>You will learn how to validate the state of objects before they go into the database, and how to perform custom operations at certain points in the object life cycle.<span style="font-family: DejaVu Sans;">你将会学习到在将数据对象存入数据库之前怎样验证它们的状态，以及在对象生存周期的一些点上怎样执行定制操作。</span>

After reading this guide and trying out the presented concepts, we hope that you’ll be able to:<span style="font-family: DejaVu Sans;">在阅读了这个教程以及尝试介绍的概念，我们希望你能够：</span>
<ul>
	<li>Understand the life cycle of Active Record objects <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">理解 </span></span>Active Record<span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">对象的生存周期</span></span></li>
	<li>Use the built-in Active Record validation helpers <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">使用内建的 </span></span>Active Record<span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">验证</span></span>helpers</li>
	<li>Create your own custom validation methods <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">创建属于你的定制验证方法</span></span></li>
	<li>Work with the error messages generated by the validation process <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">在验证过程中使用错误消息创建器工作</span></span></li>
	<li>Create callback methods that respond to events in the object life cycle <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">新建一个回调方法响应对象生存周期的事件</span></span></li>
	<li>Create special classes that encapsulate<span style="font-family: DejaVu Sans;">封装</span>common behavior for your callbacks <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">创建特殊的类来封装你回调的通常习惯（方法）</span></span></li>
	<li>Create Observers<span style="font-family: DejaVu Sans;">观察员</span>that respond to life cycle events outside of the original class <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">创建 </span></span>Observers<span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">来响应原类以外的生存周期事件</span></span></li>
</ul>
<h3>1 The Object Life Cycle</h3>
During the normal operation of a Rails application, objects may be created, updated, and destroyed. Active Record provides hooks into this <em>object</em><em> </em><em>life</em><em> </em><em>cycle</em> so that you can control your application and its data.<span style="font-family: DejaVu Sans;">一个</span>Rails<span style="font-family: DejaVu Sans;">应用程序的正常操作期间，对象可能被新建，更新，和销毁。</span>Active Record<span style="font-family: DejaVu Sans;">提供挂载到这个对象生存周期，以便你可以控制你的应用程序和数据。</span>

Validations allow you to ensure that only valid data is stored in your database. Callbacks and observers allow you to trigger<span style="font-family: DejaVu Sans;">触发</span>logic before or after an alteration<span style="font-family: DejaVu Sans;">改造变动</span>of an object’s state.<span style="font-family: DejaVu Sans;">验证允许你确保只有验证数据被存储到你的数据库。回调和观察员（监视器）允许你在变动一个对象的状态之前或之后触发逻辑。</span>
<h3>2 Validations Overview<span style="font-family: WenQuanYi Micro Hei;">验证概述</span></h3>
Before you dive into the detail of validations in Rails, you should understand a bit about how validations fit into the big picture.<span style="font-family: DejaVu Sans;">在你深入</span>Rails <span style="font-family: DejaVu Sans;">验证的详细说明之前，你应该明白一点就是关于怎样让验证适合于（</span>Rails<span style="font-family: DejaVu Sans;">）这幅大画卷。</span>
<h4>2.1 Why Use Validations?</h4>
Validations are used to ensure that only valid data is saved into your database. For example, it may be important to your application to ensure that every user provides a valid email address and mailing address.<span style="font-family: DejaVu Sans;">验证用于确保只有通过验证的数据被保存入你的数据库。例如，在你的应用程序中确认每个用户提供了一个有效的</span>Email<span style="font-family: DejaVu Sans;">地址和邮寄地址是非常重要的。</span>

There are several ways to validate data before it is saved into your database, including native database constraints, client-side validations, controller-level validations, and model-level validations.<span style="font-family: DejaVu Sans;">在数据被存储到你的数据库中之前这里有几种方法来验证它，包括本地数据库约束，客户端验证，控制层级别的验证和模型层级别的验证。</span>

Database constraints and/or stored procedures make the validation mechanisms database-dependent and can make testing and maintenance more difficult. However, if your database is used by other applications, it may be a good idea to use some constraints at the database level. Additionally, database-level validations can safely handle some things (such as uniqueness in heavily-used tables) that can be difficult to implement otherwise.
<ul>
	<li>Client-side validations can be useful, but are generally unreliable if used alone. If they are implemented using JavaScript, they may be bypassed if JavaScript is turned off in the user’s browser. However, if combined with other techniques, client-side validation can be a convenient way to provide users with immediate feedback as they use your site. <span style="font-family: DejaVu Sans;">客户端验证是很有用的，但是一般情况下单独使用是靠不住的。如果他们使用</span>JavaScript<span style="font-family: DejaVu Sans;">来实施（验证），它们可能被绕过如果用户的浏览器中</span>JavaScript<span style="font-family: DejaVu Sans;">被关闭的话。然而，如果联合其他的技术，客户端验证是一种方便的方法来提供用户即使反馈（验证信息）如果他们使用你的的站点。</span></li>
	<li>Controller-level validations can be tempting to use, but often become unwieldy and difficult to test and maintain. Whenever possible, it’s a good idea to <a href="http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model"><span style="color: #000080;"><span style="text-decoration: underline;">keep</span></span><span style="color: #000080;"><span style="text-decoration: underline;">your</span></span><span style="color: #000080;"><span style="text-decoration: underline;">controllers</span></span><span style="color: #000080;"><span style="text-decoration: underline;">skinny</span></span></a>, as it will make your application a pleasure to work with in the long run. <span style="font-family: DejaVu Sans;">控制层的验证的使用是诱人的，但是通常变得笨重和难以测试和维护。只要有可能，它是一个保持你的控制层苗条好主意，它也使得你的应用程序愉快的长时间工作。</span></li>
	<li>Model-level validations are the best way to ensure that only valid data is saved into your database. They are database agnostic, cannot be bypassed by end users, and are convenient to test and maintain. Rails makes them easy to use, provides built-in helpers for common needs, and allows you to create your own validation methods as well. <span style="font-family: DejaVu Sans;">模板层的验证是最好的方式来确保只有有效的数据被保存进了你的数据库。它们与数据库无关，不能被终端用户绕过，并且方便测试和维护。</span>Rails<span style="font-family: DejaVu Sans;">通过提供（基于）常规需要的内建的</span>helpers<span style="font-family: DejaVu Sans;">，使得它们容易使用，并且同样允许你新建属于你的验证方法。</span></li>
</ul>
<h4>2.2 When Does Validation Happen?<span style="font-family: WenQuanYi Micro Hei;">验证在什么时候发生？</span></h4>
There are two kinds of Active Record objects: those that correspond to a row inside your database and those that do not. When you create a fresh object, for example using the <tt>new</tt> method, that object does not belong to the database yet. Once you call <tt>save</tt> upon<span style="font-family: DejaVu Sans;">后</span>that object it will be saved into the appropriate database table. Active Record uses the <tt>new_record?</tt> instance method to determine whether an object is already in the database or not. Consider the following simple Active Record class:<span style="font-family: DejaVu Sans;">这里有两种</span>Active Record<span style="font-family: DejaVu Sans;">对象：一些对应于你数据库中的一行以及一些不是。当你创建一个新鲜的对象，例如使用新的方法，这个对象还不属于数据库。一旦你调用</span>save<span style="font-family: DejaVu Sans;">（函数）之后这个对象将会被适当的保存入数据表单。</span>Active Record<span style="font-family: DejaVu Sans;">使用</span><tt>new_record?</tt><span style="font-family: DejaVu Sans;"><tt>实例方法来决定一个对象是否已经被保存进了数据库。思考下面简单的</tt><tt></tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>类：</tt></span>

<code>class</code><tt> </tt><code>Person</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code>end</code>

<tt>We</tt><tt> </tt><tt>can</tt><tt> </tt><tt>see</tt><tt> </tt><tt>how</tt><tt> </tt><tt>it</tt><tt> </tt><tt>works</tt><tt> </tt><tt>by</tt><tt> </tt><tt>looking</tt><tt> </tt><tt>at</tt><tt> </tt><tt>some</tt><tt> </tt><tt>rails</tt><tt> </tt><tt>console</tt><tt> </tt><tt>output:</tt><span style="font-family: DejaVu Sans;"><tt>我们通过观察一些</tt></span><tt>rails</tt><span style="font-family: DejaVu Sans;"><tt>的控制台输可以明白它是怎么工作的：</tt></span>

<tt>$</tt><code>rails</code><code> </code><code>console</code>

<code>&gt;&gt;</code><code> </code><code>p</code><code> </code><code>=</code><code> </code><code>Person.new(:name</code><code> </code><code>=&gt;</code><code> </code><code>"John</code><code> </code><code>Doe")</code>

<code>=&gt;</code><code> </code><code>#&lt;Person</code><code> </code><code>id:</code><code> </code><code>nil,</code><code> </code><code>name:</code><code> </code><code>"John</code><code> </code><code>Doe",</code><code> </code><code>created_at:</code><code> </code><code>nil,</code><code> </code><code>:updated_at:</code><code> </code><code>nil&gt;</code>

<code>&gt;&gt;</code><code> </code><code>p.new_record?</code>

<code>=&gt;</code><code> </code><code>true</code>

<code>&gt;&gt;</code><code> </code><code>p.save</code>

<code>=&gt;</code><code> </code><code>true</code>

<code>&gt;&gt;</code><code> </code><code>p.new_record?</code>

<code>=&gt;</code><code> </code><code>false</code>

Creating and saving a new record will send an SQL <tt>INSERT</tt> operation to the database. Updating an existing record will send an SQL <tt>UPDATE</tt> operation instead. Validations are typically run before these commands are sent to the database. If any validations fail, the object will be marked as invalid and Active Record will not perform the <tt>INSERT</tt> or <tt>UPDATE</tt> operation. This helps to avoid storing an invalid object in the database. You can choose to have specific validations run when an object is created, saved, or updated.<span style="font-family: DejaVu Sans;">创建和保存一个新的记录将会发送一个</span>SQL <tt>INSERT</tt><span style="font-family: DejaVu Sans;"><tt>操作到数据库。更新一个存在的记录将会发送一个</tt><tt></tt></span><tt>SQL</tt><tt> </tt><tt>UPDATE</tt><span style="font-family: DejaVu Sans;"><tt>操作。验证通常在这些命令被发送到数据库之前运行。如果任何验证失败，这个对象将会标记为非法并且</tt><tt></tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>将不会执行</tt><tt></tt></span><tt>INSERT</tt><span style="font-family: DejaVu Sans;"><tt>或</tt></span><tt>UPDATE</tt><span style="font-family: DejaVu Sans;"><tt>操作。这有助于避免存储一个非法的数据到数据库。你可以在对象被创建，保存或更新的时候选择指定的验证执行。</tt></span>

There are many ways to change the state of an object in the database. Some methods will trigger<span style="font-family: DejaVu Sans;">触发</span>validations, but some will not. This means that it’s possible to save an object in the database in an invalid state if you aren’t careful.<span style="font-family: DejaVu Sans;">这里有很多方法来改变对象在数据库中的状态。一些方法将会触发验证，但是一些却不会。这里的意思是如果你不仔细的话就可能以一种非法的状态保存一个对象到数据库。</span>

The following methods trigger validations, and will save the object to the database only if the object is valid:<span style="font-family: DejaVu Sans;">下面的方法触发验证，并且如果对象是合法的话将会保存对象到数据库：</span>
<ul>
	<li><tt>create</tt></li>
	<li><tt>create!</tt></li>
	<li><tt>save</tt></li>
	<li><tt>save!</tt></li>
	<li><tt>update</tt></li>
	<li><tt>update_attributes</tt></li>
	<li><tt>update_attributes!</tt></li>
</ul>
The bang versions (e.g. <tt>save!</tt>) raise an exception if the record is invalid. The non-bang versions don’t: <tt>save</tt> and <tt>update_attributes</tt> return <tt>false</tt>, <tt>create</tt> and <tt>update</tt> just return the objects.<span style="font-family: DejaVu Sans;"><span style="color: #800000;">有感叹号的形式（例如</span></span><span style="color: #800000;">save!<span style="font-family: DejaVu Sans;">）在记录是非法的时候会唤起一个异常。没有感叹号形式的就不会：</span></span><tt><span style="color: #800000;">save</span></tt><span style="font-family: DejaVu Sans;"><tt><span style="color: #800000;">和</span></tt></span><tt><span style="color: #800000;">update_attributes</span></tt><span style="font-family: DejaVu Sans;"><tt><span style="color: #800000;">返回</span></tt></span><tt><span style="color: #800000;">false</span></tt><span style="color: #800000;">,</span><tt><span style="color: #800000;">create</span></tt><span style="font-family: DejaVu Sans;"><tt><span style="color: #800000;">和</span></tt></span><tt><span style="color: #800000;">update</span></tt><span style="font-family: DejaVu Sans;"><tt><span style="color: #800000;">只是返回这个对象</span></tt><tt>。</tt></span>
<h4>2.3 Skipping Validations<span style="font-family: WenQuanYi Micro Hei;">忽略验证</span></h4>
The following methods skip validations, and will save the object to the database regardless<span style="font-family: DejaVu Sans;">无论</span>of its validity. They should be used with caution.<span style="font-family: DejaVu Sans;">下面的方法会略过验证，并且将会保存对象到数据库而无论它的有效性。他们应该慎重使用。</span>
<ul>
	<li><tt>decrement!</tt> <span style="font-family: DejaVu Sans;">递减</span></li>
	<li><tt>decrement_counter</tt></li>
	<li><tt>increment!</tt></li>
	<li><tt>increment_counter</tt></li>
	<li><tt>toggle!</tt></li>
	<li><tt>touch</tt> <span style="font-family: DejaVu Sans;">切换</span></li>
	<li><tt>update_all</tt></li>
	<li><tt>update_attribute</tt></li>
	<li><tt>update_column</tt></li>
	<li><tt>update_counters</tt></li>
</ul>
Note that <tt>save</tt> also has the ability to skip validations if passed <tt>:validate</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>false</tt> as argument. This technique should be used with caution.<span style="font-family: DejaVu Sans;">注意</span>save<span style="font-family: DejaVu Sans;">也可以略过演奏如果通过使用</span><tt>:validate</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>false</tt><span style="font-family: DejaVu Sans;"><tt>作为参数。这个技术也应该慎重使用。</tt></span>
<ul>
	<li><tt>save(:validate</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>false)</tt></li>
</ul>
<h4>2.4 <tt>valid?</tt> and <tt>invalid?</tt></h4>
<ol>
	<li>To verify whether or not an object is valid, Rails uses the <tt>valid?</tt> method. You can also use this method on your own. <tt>valid?</tt> triggers your validations and returns true if no errors were added to the object, and false otherwise.<span style="font-family: DejaVu Sans;">验证一个对象是否有效，</span>Rails<span style="font-family: DejaVu Sans;">使用</span><tt>valid?</tt><span style="font-family: DejaVu Sans;"><tt>方法。你也可以使用属于你的方法。</tt></span><tt>valid?</tt><span style="font-family: DejaVu Sans;"><tt>触发你的验证并且返回</tt></span><tt>True</tt><span style="font-family: DejaVu Sans;"><tt>如果没有错误被添加到对象，否则就返回</tt></span><tt>false</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></li>
</ol>
<code>class</code> <code>Person</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:name,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true</code>

<code>end</code>

&nbsp;

<code>Person.create(:name</code> <code>=&gt;</code><code> </code><code>"John</code><code> </code><code>Doe").valid?</code><code> </code><code>#</code><code> </code><code>=&gt;</code><code> </code><code>true</code>

<code>Person.create(:name</code> <code>=&gt;</code><code> </code><code>nil).valid?</code><code> </code><code>#</code><code> </code><code>=&gt;</code><code> </code><code>false</code>

&nbsp;

When Active Record is performing validations, any errors found can be accessed through the <tt>errors</tt> instance method. By definition an object is valid if this collection is empty after running validations.<span style="font-family: DejaVu Sans;">当</span>Active Record<span style="font-family: DejaVu Sans;">在执行验证的时候，任何发现的错误都可以通过</span><tt>errors</tt><span style="font-family: DejaVu Sans;"><tt>实例方法来访问。通过定义一个对象是有效的如果这个集合在运行验证过后是空的。</tt></span>

Note that an object instantiated with <tt>new</tt> will not report errors even if it’s technically invalid, because validations are not run when using <tt>new</tt>.<span style="font-family: DejaVu Sans;">注意当实例化一个新的对象的时候将不会报告错误即使假设它的验证技术（得出数据）是非有效的，因为在使用</span>new<span style="font-family: DejaVu Sans;">的时候验证是没有运行的。</span>

<code>class</code> <code>Person</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:name,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true</code>

<code>end</code>

&nbsp;

<code>&gt;&gt;</code><code> </code><code>p</code><code> </code><code>=</code><code> </code><code>Person.new</code>

<code>=&gt;</code><code> </code><code>#&lt;Person</code><code> </code><code>id:</code><code> </code><code>nil,</code><code> </code><code>name:</code><code> </code><code>nil&gt;</code>

<code>&gt;&gt;</code><code> </code><code>p.errors</code>

<code>=&gt;</code><code> </code><code>{}</code>

&nbsp;

<code>&gt;&gt;</code><code> </code><code>p.valid?</code>

<code>=&gt;</code><code> </code><code>false</code>

<code>&gt;&gt;</code><code> </code><code>p.errors</code>

<code>=&gt;</code><code> </code><code>{:name=&gt;["can't</code><code> </code><code>be</code><code> </code><code>blank"]}</code>

&nbsp;

<code>&gt;&gt;</code><code> </code><code>p</code><code> </code><code>=</code><code> </code><code>Person.create</code>

<code>=&gt;</code><code> </code><code>#&lt;Person</code><code> </code><code>id:</code><code> </code><code>nil,</code><code> </code><code>name:</code><code> </code><code>nil&gt;</code>

<code>&gt;&gt;</code><code> </code><code>p.errors</code>

<code>=&gt;</code><code> </code><code>{:name=&gt;["can't</code><code> </code><code>be</code><code> </code><code>blank"]}</code>

&nbsp;

<code>&gt;&gt;</code><code> </code><code>p.save</code>

<code>=&gt;</code><code> </code><code>false</code>

&nbsp;

<code>&gt;&gt;</code><code> </code><code>p.save!</code>

<code>=&gt;</code><code> </code><code>ActiveRecord::RecordInvalid:</code><code> </code><code>Validation</code><code> </code><code>failed:</code><code> </code><code>Name</code><code> </code><code>can't</code><code> </code><code>be</code><code> </code><code>blank</code>

&nbsp;

<code>&gt;&gt;</code><code> </code><code>Person.create!</code>

<code>=&gt;</code><code> </code><code>ActiveRecord::RecordInvalid:</code><code> </code><code>Validation</code><code> </code><code>failed:</code><code> </code><code>Name</code><code> </code><code>can't</code><code> </code><code>be</code><code> </code><code>blank</code>

&nbsp;

<tt>invalid?</tt> is simply the inverse of <tt>valid?</tt>. <tt>invalid?</tt> triggers your validations and returns true if any errors were added to the object, and false otherwise. <tt>invalid?</tt><span style="font-family: DejaVu Sans;"><tt>是</tt></span><tt>valid?</tt><span style="font-family: DejaVu Sans;"><tt>简单的逆。</tt></span><tt>invalid?</tt><span style="font-family: DejaVu Sans;"><tt>触发你的验证如果有任何错误添加到对象中则返回</tt></span><tt>true</tt><span style="font-family: DejaVu Sans;"><tt>，否则返回</tt></span><tt>false</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h4>2.5 <tt>errors[]</tt></h4>
To verify whether or not a particular attribute of an object is valid, you can use <tt>errors[:attribute]</tt>. It returns an array of all the errors for <tt>:attribute</tt>. If there are no errors on the specified attribute, an empty array is returned.<span style="font-family: DejaVu Sans;">验证一个对象具体的属性是否有效，你可以使用</span><tt>errors[:attribute]</tt><span style="font-family: DejaVu Sans;"><tt>。它返回有关</tt></span><tt>:attribute</tt><span style="font-family: DejaVu Sans;"><tt>所有错误的数组。如果指定的属性没有错误，将会返回一个空数组。</tt></span>

This method is only useful <em>after</em> validations have been run, because it only inspects the errors collection and does not trigger validations itself. It’s different from the <tt>ActiveRecord::Base#invalid?</tt> method explained above because it doesn’t verify the validity of the object as a whole. It only checks to see whether there are errors found on an individual attribute of the object.<span style="font-family: DejaVu Sans;">这个方法只有在验证被执行过后才有用，因为它仅仅检查错误集合却不会自己触发验证。<tt>它和</tt></span><tt>ActiveRecord::Base#invalid?</tt><span style="font-family: DejaVu Sans;"><tt>方法上面解释的不同因为它不会整个验证对象的有效性。它仅仅检查这个对象的个别属性是否有错误被找到。</tt></span>

<code>class</code> <code>Person</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:name,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true</code>

<code>end</code>

&nbsp;

<code>&gt;&gt;</code><code> </code><code>Person.new.errors[:name].any?</code><code> </code><code>#</code><code> </code><code>=&gt;</code><code> </code><code>false</code>

<code>&gt;&gt;</code><code> </code><code>Person.create.errors[:name].any?</code><code> </code><code>#</code><code> </code><code>=&gt;</code><code> </code><code>true</code>

We’ll cover validation errors in greater depth in the <a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html#working-with-validation-errors"><span style="color: #000080;"><span style="text-decoration: underline;">Working</span></span><span style="color: #000080;"><span style="text-decoration: underline;">with</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Validation</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Errors</span></span></a> section. For now, let’s turn to the built-in validation helpers that Rails provides by default.<span style="font-family: DejaVu Sans;">我们将会非常深入的涵盖验证错误在</span><a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html#working-with-validation-errors"><span style="color: #000080;"><span style="text-decoration: underline;">Working</span></span><span style="color: #000080;"><span style="text-decoration: underline;">with</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Validation</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Errors</span></span></a><span style="font-family: DejaVu Sans;">。现在，让我们转入</span>Rails<span style="font-family: DejaVu Sans;">默认提供的内建的验证</span>helpers<span style="font-family: DejaVu Sans;">。</span>

&nbsp;
<h3>3 Validation Helpers</h3>
Active Record offers many pre-defined validation helpers that you can use directly inside your class definitions. These helpers provide common validation rules. Every time a validation fails, an error message is added to the object’s <tt>errors</tt> collection, and this message is associated with the field being validated.Active Record<span style="font-family: DejaVu Sans;">提供许多预定义的你可以插入你的类中直接使用的验证</span>helpers<span style="font-family: DejaVu Sans;">。这些</span>helpers<span style="font-family: DejaVu Sans;">提供常规验证规则。每次验证失败，一个错误消息会被添加到对象的</span>errors<span style="font-family: DejaVu Sans;">集合中，并且这些消息和被验证的</span>field<span style="font-family: DejaVu Sans;">相关。</span>

Each helper accepts an arbitrary number of attribute names, so with a single line of code you can add the same kind of validation to several attributes.<span style="font-family: DejaVu Sans;">每个</span>helper<span style="font-family: DejaVu Sans;">接受一个任意数目的属性名字，因此使用一行代码你可以给一些属性添加相同类型验证。</span>

All of them accept the <tt>:on</tt> and <tt>:message</tt> options, which define when the validation should be run and what message should be added to the <tt>errors</tt> collection if it fails, respectively<span style="font-family: DejaVu Sans;">个别的</span>. The <tt>:on</tt> option takes one of the values <tt>:save</tt> (the default), <tt>:create</tt> or <tt>:update</tt>. There is a default error message for each one of the validation helpers. These messages are used when the <tt>:message</tt> option isn’t specified. Let’s take a look at each one of the available helpers.<span style="font-family: DejaVu Sans;">所有的（</span>helpers<span style="font-family: DejaVu Sans;">）接受</span><tt>:on</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>:message</tt><span style="font-family: DejaVu Sans;"><tt>选项，用来对个别的（</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>）定义什么时候运行验证以及如果验证失败什么消息被添加到</tt></span><tt>errors</tt><span style="font-family: DejaVu Sans;"><tt>集合。</tt></span><tt>:on</tt><span style="font-family: DejaVu Sans;"><tt>选项获取</tt></span><tt>:save</tt><tt> </tt><tt>(</tt><span style="font-family: DejaVu Sans;"><tt>默认的</tt></span><tt>),</tt><tt> </tt><tt>:create</tt><span style="font-family: DejaVu Sans;"><tt>或</tt></span><tt>:update</tt><span style="font-family: DejaVu Sans;"><tt>的值。这里每个验证</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>是默认错误消息。这些消息在</tt><tt></tt></span><tt>:message</tt><span style="font-family: DejaVu Sans;"><tt>选项没有被指定时使用。下面我们来看看每个可用的</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h4><tt>3.1</tt><tt> </tt><tt>acceptance</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>接受承认</tt></span></h4>
Validates that a checkbox on the user interface was checked when a form was submitted. This is typically used when the user needs to agree to your application’s terms of service, confirm reading some text, or any similar concept. This validation is very specific to web applications and this ‘acceptance’ does not need to be recorded anywhere in your database (if you don’t have a field for it, the helper will just create a virtual attribute).<span style="font-family: DejaVu Sans;">这个是很特殊对于</span>web<span style="font-family: DejaVu Sans;">应用程序的验证并且这个<span style="font-family: Liberation Serif,Times New Roman,serif;">‘</span></span>acceptance’ <span style="font-family: DejaVu Sans;">不需要在你的数据库中的任何地方记录（如果没有一个它的</span>field<span style="font-family: DejaVu Sans;">，</span>helper<span style="font-family: DejaVu Sans;">将会仅仅创建一个虚拟属性）。</span>

<code>class</code><tt> </tt><code>Person</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:terms_of_service,</code><code> </code><code>:acceptance</code> <code>=&gt;</code><code> </code><code>true</code>

<code>end</code>

<tt>The</tt><tt> </tt><tt>default</tt><tt> </tt><tt>error</tt><tt> </tt><tt>message</tt><tt> </tt><tt>for</tt><tt> </tt><tt>this</tt><tt> </tt><tt>helper</tt><tt> </tt><tt>is</tt><tt> </tt><tt><strong>“</strong></tt><em><strong>must</strong></em><em><strong> </strong></em><em><strong>be</strong></em><em><strong> </strong></em><em><strong>accepted</strong></em><tt><strong>”</strong></tt><tt>.</tt>

<tt>It</tt><tt> </tt><tt>can</tt><tt> </tt><tt>receive</tt><tt> </tt><tt>an</tt><tt> </tt><tt>:accept</tt><tt> </tt><tt>option,</tt><tt> </tt><tt>which</tt><tt> </tt><tt>determines</tt><tt> </tt><tt>the</tt><tt> </tt><tt>value</tt><tt> </tt><tt>that</tt><tt> </tt><tt>will</tt><tt> </tt><tt>be</tt><tt> </tt><tt>considered</tt><tt> </tt><tt>acceptance.</tt><tt> </tt><tt>It</tt><tt> </tt><tt>defaults</tt><tt> </tt><tt>to</tt><tt> “</tt><tt>1</tt><tt>” </tt><tt>and</tt><tt> </tt><tt>can</tt><tt> </tt><tt>be</tt><tt> </tt><tt>easily</tt><tt> </tt><tt>changed.</tt><span style="font-family: DejaVu Sans;"><tt>它可以接收一个</tt></span><tt>:accept</tt><span style="font-family: DejaVu Sans;"><tt>选项，用来决定哪个值认为是接受。默认是</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">‘</span></tt></span><tt>1</tt><tt>’</tt><span style="font-family: DejaVu Sans;"><tt>并且可以很容易更改成其他的。</tt></span>

<code>class</code> <code>Person</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:terms_of_service,</code><code> </code><code>:acceptance</code> <code>=&gt;</code><code> </code><code>{</code><code> </code><code>:accept</code> <code>=&gt;</code><code> </code><code>'yes'</code> <code>}</code>

<code>end</code>

&nbsp;
<h4>3.2 <tt>validates_associated</tt></h4>
You should use this helper when your model has associations with other models and they also need to be validated. When you try to save your object, <tt>valid?</tt> will be called upon each one of the associated objects.

<code>class</code> <code>Library</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>has_many</code><code> </code><code>:books</code>

<code> </code><code>validates_associated</code><code> </code><code>:books</code>

<code>end</code>

This validation will work with all of the association types.

<span style="color: #800000;">Don</span><span style="color: #800000;">’</span><span style="color: #800000;">t</span><span style="color: #800000;">use</span><tt><span style="color: #800000;">validates_associated</span></tt><span style="color: #800000;">on</span><span style="color: #800000;">both</span><span style="color: #800000;">ends</span><span style="color: #800000;">of</span><span style="color: #800000;">your</span><span style="color: #800000;">associations.</span><span style="color: #800000;">They</span><span style="color: #800000;">would</span><span style="color: #800000;">call</span><span style="color: #800000;">each</span><span style="color: #800000;">other</span><span style="color: #800000;">in</span><span style="color: #800000;">an</span><span style="color: #800000;">infinite<span style="font-family: DejaVu Sans;">无限</span></span><span style="color: #800000;">loop.</span>

The default error message for <tt>validates_associated</tt> is “<em>is</em><em> </em><em>invalid</em>”. Note that each associated object will contain its own <tt>errors</tt> collection; errors do not bubble up<span style="font-family: DejaVu Sans;">冒泡</span>to the calling model.

&nbsp;
<h4>3.3 <tt>confirmation</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>确认</tt></span></h4>
You should use this helper when you have two text fields that should receive exactly the same content. For example, you may want to confirm an email address or a password. This validation creates a virtual attribute whose name is the name of the field that has to be confirmed with “_confirmation” appended.

<span style="font-family: DejaVu Sans;">你应该使用这个</span>helper<span style="font-family: DejaVu Sans;">当你有两个内容完全相同的文本框需要回收。（验证输入）</span>

<code>class</code> <code>Person</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:email,</code><code> </code><code>:confirmation</code> <code>=&gt;</code><code> </code><code>true</code>

<code>end</code>

In your view template you could use something like

<code>&lt;%=</code> <code>text_field</code><code> </code><code>:person,</code><code> </code><code>:email</code> <code>%&gt;</code>

<code>&lt;%=</code> <code>text_field</code><code> </code><code>:person,</code><code> </code><code>:email_confirmation</code> <code>%&gt;</code>

&nbsp;

This check is performed only if <tt>email_confirmation</tt> is not <tt>nil</tt>. To require confirmation, make sure to add a presence check for the confirmation attribute (we’ll take a look at <tt>presence</tt> later on this guide):

<code>class</code> <code>Person</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:email,</code><code> </code><code>:confirmation</code> <code>=&gt;</code><code> </code><code>true</code>

<code> </code><code>validates</code><code> </code><code>:email_confirmation,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true</code>

<code>end</code>

The default error message for this helper is “<em>doesn</em><em>’</em><em>t</em><em> </em><em>match</em><em> </em><em>confirmation</em>”.
<h4>3.4 <tt>exclusion</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>排除</tt></span></h4>
This helper validates that the attributes’ values are not included in a given set. In fact, this set can be any enumerable<span style="font-family: DejaVu Sans;">列举</span>object.

<code>class</code> <code>Account</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:subdomain,</code><code> </code><code>:exclusion</code> <code>=&gt;</code><code> </code><code>{</code><code> </code><code>:in</code> <code>=&gt;</code><code> </code><code>%w(www</code><code> </code><code>us</code><code> </code><code>ca</code><code> </code><code>jp),</code>

<code> </code><code>:message</code> <code>=&gt;</code><code> </code><code>"Subdomain</code><code> </code><code>%{value}</code><code> </code><code>is</code><code> </code><code>reserved."</code> <code>}</code>

<code>end</code>

The <tt>exclusion</tt> helper has an option <tt>:in</tt> that receives the set of values that will not be accepted for the validated attributes. The <tt>:in</tt> option has an alias called <tt>:within</tt> that you can use for the same purpose<span style="font-family: DejaVu Sans;">目的</span>, if you’d like to. This example uses the <tt>:message</tt> option to show how you can include the attribute’s value.

The default error message is “<em>is</em><em> </em><em>reserved</em>”.
<h4>3.5 <tt>format</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>格式（匹配）</tt></span></h4>
This helper validates the attributes’ values by testing whether they match a given regular expression<span style="font-family: DejaVu Sans;"><span style="color: #800000;">正则表达式</span></span>, which is specified using the <tt>:with</tt> option.

<code>class</code> <code>Product</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:legacy_code,</code><code> </code><code>:format</code> <code>=&gt;</code><code> </code><code>{</code><code> </code><code>:with</code> <code>=&gt;</code><code> </code><code>/\A[a-zA-Z]+\z/,</code>

<code> </code><code>:message</code> <code>=&gt;</code><code> </code><code>"Only</code><code> </code><code>letters</code><code> </code><code>allowed"</code> <code>}</code>

<code>end</code>

The default error message is “<em>is</em><em> </em><em>invalid</em>”.
<h4>3.6 <tt>inclusion</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>列入</tt></span></h4>
This helper validates that the attributes’ values are included in a given set. In fact, this set can be any enumerable object.

<code>class</code> <code>Coffee</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:size,</code><code> </code><code>:inclusion</code> <code>=&gt;</code><code> </code><code>{</code><code> </code><code>:in</code> <code>=&gt;</code><code> </code><code>%w(small</code><code> </code><code>medium</code><code> </code><code>large),</code>

<code> </code><code>:message</code> <code>=&gt;</code><code> </code><code>"%{value}</code><code> </code><code>is</code><code> </code><code>not</code><code> </code><code>a</code><code> </code><code>valid</code><code> </code><code>size"</code> <code>}</code>

<code>end</code>

The <tt>inclusion</tt> helper has an option <tt>:in</tt> that receives the set of values that will be accepted. The <tt>:in</tt> option has an alias called <tt>:within</tt> that you can use for the same purpose, if you’d like to. The previous example uses the <tt>:message</tt> option to show how you can include the attribute’s value.

The default error message for this helper is “<em>is</em><em> </em><em>not</em><em> </em><em>included</em><em> </em><em>in</em><em> </em><em>the</em><em> </em><em>list</em>”.
<h4>3.7 <tt>length</tt></h4>
This helper validates the length of the attributes’ values. It provides a variety of options, so you can specify length constraints in different ways:

class Person &lt; ActiveRecord::Base

validates :name, :length =&gt; { :minimum =&gt; 2 }

validates :bio, :length =&gt; { :maximum =&gt; 500 }

validates :password, :length =&gt; { :in =&gt; 6..20 }

validates :registration_number, :length =&gt; { :is =&gt; 6 }

end

The possible length constraint<span style="font-family: DejaVu Sans;">约束</span>options are:
<ul>
	<li><tt>:minimum</tt> – The attribute cannot have less than the specified length.</li>
	<li><tt>:maximum</tt> – The attribute cannot have more than the specified length.</li>
	<li><tt>:in</tt> (or <tt>:within</tt>) – The attribute length must be included in a given interval. The value for this option must be a range.</li>
	<li><tt>:is</tt> – The attribute length must be equal to the given value.</li>
</ul>
The default error messages depend on the type of length validation being performed. <span style="color: #800000;">You</span><span style="color: #800000;">can</span><span style="color: #800000;">personalize</span><span style="color: #800000;">these</span><span style="color: #800000;">messages</span><span style="color: #800000;">using</span><span style="color: #800000;">the</span><tt><span style="color: #800000;">:wrong_length</span></tt><span style="color: #800000;">,</span><tt><span style="color: #800000;">:too_long</span></tt><span style="color: #800000;">,</span><span style="color: #800000;">and</span><tt><span style="color: #800000;">:too_short</span></tt><span style="color: #800000;">options</span><span style="color: #800000;">and</span><tt><span style="color: #800000;">%{count}</span></tt><span style="color: #800000;">as</span><span style="color: #800000;">a</span><span style="color: #800000;">placeholder</span><span style="color: #800000;">for</span><span style="color: #800000;">the</span><span style="color: #800000;">number</span><span style="color: #800000;">corresponding</span><span style="color: #800000;">to</span><span style="color: #800000;">the</span><span style="color: #800000;">length</span><span style="color: #800000;">constraint</span><span style="color: #800000;">being</span><span style="color: #800000;">used.</span>You can still use the <tt>:message</tt> option to specify an error message.

<code>class</code> <code>Person</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:bio,</code><code> </code><code>:length</code> <code>=&gt;</code><code> </code><code>{</code><code> </code><code>:maximum</code> <code>=&gt;</code><code> </code><code>1000,</code>

<code> </code><code>:too_long</code> <code>=&gt;</code><code> </code><code>"%{count}</code><code> </code><code>characters</code><code> </code><code>is</code><code> </code><code>the</code><code> </code><code>maximum</code><code> </code><code>allowed"</code> <code>}</code>

<code>end</code>

This helper counts characters by default, but you can split the value in a different way using the <tt>:tokenizer</tt> option:

<code>class</code> <code>Essay</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:content,</code><code> </code><code>:length</code> <code>=&gt;</code><code> </code><code>{</code>

<code> </code><code>:minimum</code><code> </code> <code>=&gt;</code><code> </code><code>300,</code>

<code> </code><code>:maximum</code><code> </code> <code>=&gt;</code><code> </code><code>400,</code>

<code> </code><code>:tokenizer</code> <code>=&gt;</code><code> </code><code>lambda</code><code> </code><code>{</code><code> </code><code>|str|</code><code> </code><code>str.scan(/\w+/)</code><code> </code><code>},</code>

<code> </code><code>:too_short</code> <code>=&gt;</code><code> </code><code>"must</code><code> </code><code>have</code><code> </code><code>at</code><code> </code><code>least</code><code> </code><code>%{count}</code><code> </code><code>words",</code>

<code> </code><code>:too_long</code><code> </code> <code>=&gt;</code><code> </code><code>"must</code><code> </code><code>have</code><code> </code><code>at</code><code> </code><code>most</code><code> </code><code>%{count}</code><code> </code><code>words"</code>

<code> </code><code>}</code>

<code>end</code>

Note that the default error messages are plural<span style="font-family: DejaVu Sans;">多元的</span>(e.g., “is too short (minimum is %{count} characters)”). For this reason, when <tt>:minimum</tt> is 1 you should provide a personalized<span style="font-family: DejaVu Sans;">个性化</span>message or use <tt>validates_presence_of</tt> instead. When <tt>:in</tt> or <tt>:within</tt> have a lower limit of 1, you should either provide a personalized message or call <tt>presence</tt> prior<span style="font-family: DejaVu Sans;">前</span>to <tt>length</tt>.<span style="font-family: DejaVu Sans;">（当长度比</span>1<span style="font-family: DejaVu Sans;">还小就为空了应该使用</span><tt>validates_presence_of</tt><span style="font-family: DejaVu Sans;"><tt>来验证</tt>）</span>

The <tt>size</tt> helper is an alias for <tt>length</tt>.
<h4>3.8 <tt>numericality</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>只能输入数字</tt></span></h4>
This helper validates that your attributes have only numeric values. By default, it will match an optional sign followed by an integral or floating point number. To specify that only integral numbers are allowed set <tt>:only_integer</tt> to true.

If you set <tt>:only_integer</tt> to <tt>true</tt>, then it will use the

<code>/\A[+-]?\d+\Z/</code>

regular expression to validate the attribute’s value. Otherwise, it will try to convert the value to a number using <tt>Float</tt>.

<span style="color: #800000;">Note</span><span style="color: #800000;">that</span><span style="color: #800000;">the</span><span style="color: #800000;">regular</span><span style="color: #800000;">expression</span><span style="color: #800000;">above</span><span style="color: #800000;">allows</span><span style="color: #800000;">a</span><span style="color: #800000;">trailing</span><span style="color: #800000;">newline</span><span style="color: #800000;">character.<span style="font-family: DejaVu Sans;">请注意，上面的正则表达式允许一个尾随的换行符</span></span>

<code>class</code> <code>Player</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:points,</code><code> </code><code>:numericality</code> <code>=&gt;</code><code> </code><code>true</code>

<code> </code><code>validates</code><code> </code><code>:games_played,</code><code> </code><code>:numericality</code> <code>=&gt;</code><code> </code><code>{</code><code> </code><code>:only_integer</code> <code>=&gt;</code><code> </code><code>true</code> <code>}</code>

<code>end</code>

Besides <tt>:only_integer</tt>, this helper also accepts the following options to add constraints to acceptable values:
<ul>
	<li><tt>:greater_than</tt> – Specifies the value must be greater than the supplied value. The default error message for this option is “<em>must</em><em> </em><em>be</em><em> </em><em>greater</em><em> </em><em>than</em><em> </em><em>%{count}</em>”. <span style="font-family: DejaVu Sans;">大于</span></li>
	<li><tt>:greater_than_or_equal_to</tt> – Specifies the value must be greater than or equal to the supplied value. The default error message for this option is “<em>must</em><em> </em><em>be</em><em> </em><em>greater</em><em> </em><em>than</em><em> </em><em>or</em><em> </em><em>equal</em><em> </em><em>to</em><em> </em><em>%{count}</em>”.</li>
	<li><tt>:equal_to</tt> – Specifies the value must be equal to the supplied value. The default error message for this option is “<em>must</em><em> </em><em>be</em><em> </em><em>equal</em><em> </em><em>to</em><em> </em><em>%{count}</em>”.</li>
	<li><tt>:less_than</tt> – Specifies the value must be less than the supplied value. The default error message for this option is “<em>must</em><em> </em><em>be</em><em> </em><em>less</em><em> </em><em>than</em><em> </em><em>%{count}</em>”.</li>
	<li><tt>:less_than_or_equal_to</tt> – Specifies the value must be less than or equal the supplied value. The default error message for this option is “<em>must</em><em> </em><em>be</em><em> </em><em>less</em><em> </em><em>than</em><em> </em><em>or</em><em> </em><em>equal</em><em> </em><em>to</em><em> </em><em>%{count}</em>”.</li>
	<li><tt>:odd</tt> – Specifies the value must be an odd number if set to true. The default error message for this option is “<em>must</em><em> </em><em>be</em><em> </em><em>odd</em>”. <span style="font-family: DejaVu Sans;">奇数</span></li>
	<li><tt>:even</tt> – Specifies the value must be an even number if set to true. The default error message for this option is “<em>must</em><em> </em><em>be</em><em> </em><em>even</em>”. <span style="font-family: DejaVu Sans;">偶数</span></li>
</ul>
The default error message is “<em>is</em><em> </em><em>not</em><em> </em><em>a</em><em> </em><em>number</em>”.
<h4>3.9 <tt>presence</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>存在</tt></span></h4>
This helper validates that the specified attributes are not empty. It uses the <tt>blank?</tt> method to check if the value is either <tt>nil</tt> or a blank string, that is, a string that is either empty or consists of whitespace.

<code>class</code> <code>Person</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:name,</code><code> </code><code>:login,</code><code> </code><code>:email,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true</code>

<code>end</code>

If you want to be sure that an association is present, you’ll need to test whether the foreign key used to map the association is present, and not the associated object itself.

<code>class</code> <code>LineItem</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>belongs_to</code><code> </code><code>:order</code>

<code> </code><code>validates</code><code> </code><code>:order_id,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true</code>

<code>end</code>

Since <tt>false.blank?</tt> is true, if you want to validate the presence of a boolean field you should use <tt>validates</tt><tt> </tt><tt>:field_name,</tt><tt> </tt><tt>:inclusion</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>{</tt><tt> </tt><tt>:in</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>[true,</tt><tt> </tt><tt>false]</tt><tt> </tt><tt>}</tt>.

The default error message is “<em>can</em><em>’</em><em>t</em><em> </em><em>be</em><em> </em><em>empty</em>”.
<h4>3.10 <tt>uniqueness</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>独特性</tt></span></h4>
This helper validates that the attribute’s value is unique right before the object gets saved. It does not create a uniqueness constraint in the database, so it may happen that two different database connections create two records with the same value for a column that you intend to be unique. To avoid that, you must create a unique index in your database.

<code>class</code> <code>Account</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:email,</code><code> </code><code>:uniqueness</code> <code>=&gt;</code><code> </code><code>true</code>

<code>end</code>

The validation happens by performing an SQL query into the model’s table, searching for an existing record with the same value in that attribute.

There is a <tt>:scope</tt><span style="font-family: DejaVu Sans;"><tt>范围</tt></span>option that you can use to specify other attributes that are used to limit the uniqueness check:

<code>class</code> <code>Holiday</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:name,</code><code> </code><code>:uniqueness</code> <code>=&gt;</code><code> </code><code>{</code><code> </code><code>:scope</code> <code>=&gt;</code><code> </code><code>:year,</code>

<code> </code><code>:message</code> <code>=&gt;</code><code> </code><code>"should</code><code> </code><code>happen</code><code> </code><code>once</code><code> </code><code>per</code><code> </code><code>year"</code> <code>}</code>

<code>end</code>

There is also a <tt>:case_sensitive</tt> option that you can use to define whether the uniqueness constraint<span style="font-family: DejaVu Sans;">约束</span>will be case sensitive<span style="font-family: DejaVu Sans;">敏感</span>or not. This option defaults to true.

<code>class</code> <code>Person</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code>

<code> </code><code>validates</code><code> </code><code>:name,</code><code> </code><code>:uniqueness</code> <code>=&gt;</code><code> </code><code>{</code><code> </code><code>:case_sensitive</code> <code>=&gt;</code><code> </code><code>false</code> <code>}</code>

<code>end</code>

Note that some databases are configured to perform case-insensitive searches anyway.<span style="font-family: DejaVu Sans;">需要注意的是一些数据库配置为执行区分大小写的搜索。</span>

The default error message is “<em>has</em><em> </em><em>already</em><em> </em><em>been</em><em> </em><em>taken</em>”.
<h4>3.11 <tt>validates_with</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>通过指定类验证</tt></span></h4>
This helper passes the record to a separate class for validation.

class Person &lt; ActiveRecord::Base

validates_with GoodnessValidator

end

&nbsp;

class GoodnessValidator &lt; ActiveModel::Validator

def validate(record)

if record.first_name == "Evil"

record.errors[:base] &lt;&lt; "This person is evil"

end

end

end

The <tt>validates_with</tt> helper takes a class, or a list of classes to use for validation. There is no default error message for <tt>validates_with</tt>. You must manually add errors to the record’s errors collection in the validator class.

To implement the validate method, you must have a <tt>record</tt> parameter defined, which is the record to be validated.

Like all other validations, <tt>validates_with</tt> takes the <tt>:if</tt>, <tt>:unless</tt> and <tt>:on</tt> options. If you pass any other options, it will send those options to the validator class as <tt>options</tt>:

class Person &lt; ActiveRecord::Base

validates_with GoodnessValidator, :fields =&gt; [:first_name, :last_name]

end

&nbsp;

class GoodnessValidator &lt; ActiveModel::Validator

def validate(record)

if options[:fields].any?{|field| record.send(field) == "Evil" }

record.errors[:base] &lt;&lt; "This person is evil"

end

end

end
<h4>3.12 <tt>validates_each</tt></h4>
This helper validates attributes against a block. It doesn’t have a predefined validation function. You should create one using a block, and every attribute passed to <tt>validates_each</tt> will be tested against it. In the following example, we don’t want names and surnames to begin with lower case.

class Person &lt; ActiveRecord::Base

validates_each :name, :surname do |model, attr, value|

model.errors.add(attr, 'must start with upper case') if value =~ /\A[a-z]/

end

end

The block receives the model, the attribute’s name and the attribute’s value. You can do anything you like to check for valid data within the block. If your validation fails, you can add an error message to the model, therefore<span style="font-family: DejaVu Sans;">故</span>making it invalid.
<h3>4 Common Validation Options<span style="font-family: WenQuanYi Micro Hei;">常规验证选项</span></h3>
These are common validation options:
<h4>4.1 <tt>:allow_nil</tt></h4>
The <tt>:allow_nil</tt> option skips the validation when the value being validated is <tt>nil</tt>.

class Coffee &lt; ActiveRecord::Base

validates :size, :inclusion =&gt; { :in =&gt; %w(small medium large),

:message =&gt; "%{value} is not a valid size" }, :allow_nil =&gt; true

end

<tt><span style="color: #800000;">:allow_nil</span></tt><span style="color: #800000;">is</span><span style="color: #800000;">ignored</span><span style="color: #800000;">by</span><span style="color: #800000;">the</span><span style="color: #800000;">presence</span><span style="color: #800000;">validator.</span>
<h4>4.2 <tt>:allow_blank</tt></h4>
The <tt>:allow_blank</tt> option is similar to the <tt>:allow_nil</tt> option. This option will let validation pass if the attribute’s value is <tt>blank?</tt>, like <tt>nil</tt> or an empty string for example.

class Topic &lt; ActiveRecord::Base

validates :title, :length =&gt; { :is =&gt; 5 }, :allow_blank =&gt; true

end

&nbsp;

Topic.create("title" =&gt; "").valid? # =&gt; true

Topic.create("title" =&gt; nil).valid? # =&gt; true

<tt><span style="color: #800000;">:allow_blank</span></tt><span style="color: #800000;">is</span><span style="color: #800000;">ignored</span><span style="color: #800000;">by</span><span style="color: #800000;">the</span><span style="color: #800000;">presence</span><span style="color: #800000;">validator.</span>
<h4>4.3 <tt>:message</tt></h4>
As you’ve already seen, the <tt>:message</tt> option lets you specify the message that will be added to the <tt>errors</tt> collection when validation fails. When this option is not used, Active Record will use the respective default error message for each validation helper.
<h4>4.4 <tt>:on</tt></h4>
The <tt>:on</tt> option lets you specify when the validation should happen. The default behavior for all the built-in validation helpers is to be run on save (both when you’re creating a new record and when you’re updating it). If you want to change it, you can use <tt>:on</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:create</tt> to run the validation only when a new record is created or <tt>:on</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:update</tt> to run the validation only when a record is updated.<tt>:on</tt> <span style="font-family: DejaVu Sans;">选项让你指定什么时候产生验证。</span>

class Person &lt; ActiveRecord::Base

# it will be possible to update email with a duplicated value

validates :email, :uniqueness =&gt; true, :on =&gt; :create

&nbsp;

# it will be possible to create the record with a non-numerical age

validates :age, :numericality =&gt; true, :on =&gt; :update

&nbsp;

# the default (validates on both create and update)

validates :name, :presence =&gt; true, :on =&gt; :save

end
<h3>5 Conditional Validation<span style="font-family: WenQuanYi Micro Hei;">有附加条件的验证</span></h3>
Sometimes it will make sense<span style="font-family: DejaVu Sans;">感觉</span>to validate an object just when a given predicate is satisfied. You can do that by using the <tt>:if</tt> and <tt>:unless</tt> options, which can take a symbol, a string or a <tt>Proc</tt>. You may use the <tt>:if</tt> option when you want to specify when the validation <strong>should</strong> happen. If you want to specify when the validation <strong>should</strong><strong> </strong><strong>not</strong> happen, then you may use the <tt>:unless</tt> option.

<span style="font-family: DejaVu Sans;">有时候验证一个对象的时候如果给你一个判定性的（语句）你会感觉到满足。你可以使用</span>:if<span style="font-family: DejaVu Sans;">和</span>:unless<span style="font-family: DejaVu Sans;">选项达到这样的效果，它可以（判断）一个符号（标记），字符串或者是</span>Proc<span style="font-family: DejaVu Sans;">。</span>

&nbsp;

<em>Proc</em><em> </em><span style="font-family: DejaVu Sans;"><em>是</em></span><em>Ruby</em><em> </em><span style="font-family: DejaVu Sans;"><em>对</em></span><em>block</em><span style="font-family: DejaVu Sans;"><em>的面向对象的封装。</em></span>

&nbsp;
<h4>5.1 Using a Symbol with <tt>:if</tt> and <tt>:unless</tt></h4>
You can associate the <tt>:if</tt> and <tt>:unless</tt> options with a symbol corresponding to the name of a method that will get called right before validation happens. This is the most commonly used option.

class Order &lt; ActiveRecord::Base

validates :card_number, :presence =&gt; true, :if =&gt; :paid_with_card?

&nbsp;

def paid_with_card?

payment_type == "card"

end

end
<h4>5.2 Using a String with <tt>:if</tt> and <tt>:unless</tt></h4>
<span style="color: #800000;">You</span><span style="color: #800000;">can</span><span style="color: #800000;">also</span><span style="color: #800000;">use</span><span style="color: #800000;">a</span><span style="color: #800000;">string</span><span style="color: #800000;">that</span><span style="color: #800000;">will</span><span style="color: #800000;">be</span><span style="color: #800000;">evaluated</span><span style="color: #800000;">using</span><tt><span style="color: #800000;">eval</span></tt><span style="color: #800000;">and</span><span style="color: #800000;">needs</span><span style="color: #800000;">to</span><span style="color: #800000;">contain</span><span style="color: #800000;">valid</span><span style="color: #800000;">Ruby</span><span style="color: #800000;">code.</span>You should use this option only when the string represents a really short condition.

class Person &lt; ActiveRecord::Base

validates :surname, :presence =&gt; true, :if =&gt; "name.nil?"

end
<h4>5.3 Using a Proc with <tt>:if</tt> and <tt>:unless</tt></h4>
Finally, it’s possible to associate <tt>:if</tt> and <tt>:unless</tt> with a <tt>Proc</tt> object which will be called. Using a <tt>Proc</tt> object gives you the ability to write an inline condition instead of a separate<span style="font-family: DejaVu Sans;">单独</span>method. This option is best suited for one-liners.

class Account &lt; ActiveRecord::Base

validates :password, :confirmation =&gt; true,

:unless =&gt; Proc.new { |a| a.password.blank? }

end
<h4>5.4 Grouping conditional validations</h4>
Sometimes it is useful to have multiple validations use one condition, it can be easily achieved using <tt>with_options</tt>.

class User &lt; ActiveRecord::Base

with_options :if =&gt; :is_admin? do |admin|

admin.validates :password, :length =&gt; { :minimum =&gt; 10 }

admin.validates :email, :presence =&gt; true

end

end

All validations inside of <tt>with_options</tt> block will have automatically passed the condition <tt>:if</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:is_admin?</tt>
<h3><tt>6</tt><tt> </tt><tt>Performing</tt><tt> </tt><tt>Custom</tt><tt> </tt><tt>Validations</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>执行定制验证</tt></span></h3>
<tt>When</tt><tt> </tt><tt>the</tt><tt> </tt><tt>built-in</tt><tt> </tt><tt>validation</tt><tt> </tt><tt>helpers</tt><tt> </tt><tt>are</tt><tt> </tt><tt>not</tt><tt> </tt><tt>enough</tt><tt> </tt><tt>for</tt><tt> </tt><tt>your</tt><tt> </tt><tt>needs,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>write</tt><tt> </tt><tt>your</tt><tt> </tt><tt>own</tt><tt> </tt><tt>validators</tt><tt> </tt><tt>or</tt><tt> </tt><tt>validation</tt><tt> </tt><tt>methods</tt><tt> </tt><tt>as</tt><tt> </tt><tt>you</tt><tt> </tt><tt>prefer.</tt>
<h4>6.1 Custom Validators<span style="font-family: WenQuanYi Micro Hei;">定制验证器</span></h4>
Custom validators are classes that extend <tt>ActiveModel::Validator</tt>. These classes must implement a <tt>validate</tt> method which takes a record as an argument and performs the validation on it. The custom validator is called using the <tt>validates_with</tt> method.

class MyValidator &lt; ActiveModel::Validator

def validate(record)

if record.name.starts_with? 'X'

record.errors[:name] &lt;&lt; 'Need a name starting with X please!'

end

end

end

&nbsp;

class Person

include ActiveModel::Validations

validates_with MyValidator

end

The easiest way to add custom validators for validating individual attributes is with the convenient <tt>ActiveModel::EachValidator</tt>. In this case, the custom validator class must implement<span style="font-family: DejaVu Sans;">实施落实</span>a <tt>validate_each</tt> method which takes three arguments: record, attribute and value which correspond<span style="font-family: DejaVu Sans;">对应</span>to the instance, the attribute to be validated and the value of the attribute in the passed instance.

<span style="font-family: DejaVu Sans;">最简单的方法添加（需要）验证个别的属性到定制的</span>validatoras<span style="font-family: DejaVu Sans;">是便捷的使用</span><tt>ActiveModel::EachValidator</tt><span style="font-family: DejaVu Sans;"><tt>。在这个案例中，定制的</tt></span><tt>validator</tt><span style="font-family: DejaVu Sans;"><tt>类必须落实</tt><tt></tt></span><tt>validate_each</tt><span style="font-family: DejaVu Sans;"><tt>方法获得三个参数：与实例对应的</tt></span><tt>record,</tt><tt> </tt><tt>attribute</tt><tt> </tt><tt>and</tt><tt> </tt><tt>value</tt><span style="font-family: DejaVu Sans;"><tt>，（它们是）接下来的实例的属性和值</tt></span>

class EmailValidator &lt; ActiveModel::EachValidator

def validate_each(record, attribute, value)

unless value =~ /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/i

record.errors[attribute] &lt;&lt; (options[:message] || "is not an email")

end

end

end

&nbsp;

class Person &lt; ActiveRecord::Base

validates :email, :presence =&gt; true, :email =&gt; true

end

As shown in the example, you can also combine<span style="font-family: DejaVu Sans;">结合</span>standard validations with your own custom validators.

&nbsp;
<h4>6.2 Custom Methods<span style="font-family: WenQuanYi Micro Hei;">定制（验证）方法</span></h4>
You can also create methods that verify the state of your models and add messages to the <tt>errors</tt> collection when they are invalid. You must then register these methods by using one or more of the <tt>validate</tt>, <tt>validate_on_create</tt> or <tt>validate_on_update</tt> class methods, passing in the symbols<span style="font-family: DejaVu Sans;">符号</span>for the validation methods’ names.

<span style="font-family: DejaVu Sans;">你也可以创建方法验证你</span>models<span style="font-family: DejaVu Sans;">的状态以及在被验证的时候添加消息到</span>errors<span style="font-family: DejaVu Sans;">集合。你必须注册这些方法通过使用一个或多个这些方法：</span><tt>validate</tt>, <tt>validate_on_create</tt> or <tt>validate_on_update</tt><span style="font-family: DejaVu Sans;"><tt>类方法加上验证方法的名字。</tt></span>

You can pass more than one symbol for each class method and the respective<span style="font-family: DejaVu Sans;">各自的</span>validations will be run in the same order as they were registered.<span style="font-family: DejaVu Sans;">你可以添加一个或多个符号给（对应的）每一个类方法并且各自的验证将会按照与注册相同的顺序运行。</span>

class Invoice &lt; ActiveRecord::Base

validate :expiration_date_cannot_be_in_the_past,

:discount_cannot_be_greater_than_total_value

&nbsp;

def expiration_date_cannot_be_in_the_past

if !expiration_date.blank? and expiration_date &lt; Date.today

errors.add(:expiration_date, "can't be in the past")

end

end

&nbsp;

def discount_cannot_be_greater_than_total_value

if discount &gt; total_value

errors.add(:discount, "can't be greater than total value")

end

end

end

<span style="color: #800000;">You</span><span style="color: #800000;">can</span><span style="color: #800000;">even</span><span style="color: #800000;">create</span><span style="color: #800000;">your</span><span style="color: #800000;">own</span><span style="color: #800000;">validation</span><span style="color: #800000;">helpers</span><span style="color: #800000;">and</span><span style="color: #800000;">reuse</span><span style="color: #800000;">them</span><span style="color: #800000;">in</span><span style="color: #800000;">several</span><span style="color: #800000;">different</span><span style="color: #800000;">models.</span> For example, an application that manages surveys<span style="font-family: DejaVu Sans;">调查</span>may find it useful to express that a certain<span style="font-family: DejaVu Sans;">某些</span>field corresponds<span style="font-family: DejaVu Sans;">对应</span>to a set of choices:

ActiveRecord::Base.class_eval do

def self.validates_as_choice(attr_name, n, options={})

validates attr_name, :inclusion =&gt; { {:in =&gt; 1..n}.merge(options) }

end

end

Simply reopen <tt>ActiveRecord::Base</tt> and define a class method like that. You’d typically put this code somewhere in <tt>config/initializers</tt>. You can use this helper like this:

class Movie &lt; ActiveRecord::Base

validates_as_choice :rating, 5

end
<h3>7 Working with Validation Errors<span style="font-family: WenQuanYi Micro Hei;">工作与</span>Validation Errors</h3>
In addition to<span style="font-family: DejaVu Sans;">除了</span>the <tt>valid?</tt> and <tt>invalid?</tt> methods covered earlier, Rails provides a number of methods for working with the <tt>errors</tt> collection and inquiring<span style="font-family: DejaVu Sans;">疑问</span>about the validity of objects.

<span style="color: #800000;">The</span><span style="color: #800000;">following</span><span style="color: #800000;">is</span><span style="color: #800000;">a</span><span style="color: #800000;">list</span><span style="color: #800000;">of</span><span style="color: #800000;">the</span><span style="color: #800000;">most</span><span style="color: #800000;">commonly</span><span style="color: #800000;">used</span><span style="color: #800000;">methods.</span><span style="color: #800000;">Please</span><span style="color: #800000;">refer</span><span style="color: #800000;">to</span><span style="color: #800000;">the</span><tt><span style="color: #800000;">ActiveRecord::Errors</span></tt><span style="color: #800000;">documentation</span><span style="color: #800000;">for</span><span style="color: #800000;">a</span><span style="color: #800000;">list</span><span style="color: #800000;">of</span><span style="color: #800000;">all</span><span style="color: #800000;">the</span><span style="color: #800000;">available</span><span style="color: #800000;">methods.</span>
<h4>7.1 <tt>errors</tt></h4>
Returns an OrderedHash with all errors. Each<strong> </strong><strong>key</strong><strong> </strong><strong>is</strong><strong> </strong><strong>the</strong><strong> </strong><strong>attribute</strong><strong> </strong><strong>name</strong> and the <strong>value</strong><strong> </strong><strong>is</strong><strong> </strong><strong>an</strong><strong> </strong><strong>array</strong><strong> </strong><strong>of</strong><strong> </strong><strong>strings</strong><strong> </strong><strong>with</strong><strong> </strong><strong>all</strong><strong> </strong><strong>errors.</strong>

class Person &lt; ActiveRecord::Base

validates :name, :presence =&gt; true, :length =&gt; { :minimum =&gt; 3 }

end

&nbsp;

person = Person.new

person.valid? # =&gt; false

person.errors

# =&gt; {:name =&gt; ["can't be blank", "is too short (minimum is 3 characters)"]}

&nbsp;

person = Person.new(:name =&gt; "John Doe")

person.valid? # =&gt; true

person.errors # =&gt; []
<h4>7.2 <tt>errors[]</tt></h4>
<tt><strong>errors[]</strong></tt><strong> </strong><strong>is</strong><strong> </strong><strong>used</strong><strong> </strong><strong>when</strong><strong> </strong><strong>you</strong><strong> </strong><strong>want</strong><strong> </strong><strong>to</strong><strong> </strong><strong>check</strong><strong> </strong><strong>the</strong><strong> </strong><strong>error</strong><strong> </strong><strong>messages</strong><strong> </strong><strong>for</strong><strong> </strong><strong>a</strong><strong> </strong><strong>specific</strong><strong> </strong><strong>attribute.</strong><strong> </strong>It returns an array of strings with all error messages for the given attribute, each string with one error message. If there are no errors related to the attribute, it returns an empty array.

class Person &lt; ActiveRecord::Base

validates :name, :presence =&gt; true, :length =&gt; { :minimum =&gt; 3 }

end

&nbsp;

person = Person.new(:name =&gt; "John Doe")

person.valid? # =&gt; true

person.errors[:name] # =&gt; []

&nbsp;

person = Person.new(:name =&gt; "JD")

person.valid? # =&gt; false

person.errors[:name] # =&gt; ["is too short (minimum is 3 characters)"]

&nbsp;

person = Person.new

person.valid? # =&gt; false

person.errors[:name]

# =&gt; ["can't be blank", "is too short (minimum is 3 characters)"]
<h4>7.3 <tt>errors.add</tt></h4>
The <tt>add</tt> method lets you manually<span style="font-family: DejaVu Sans;">手动</span>add messages that are related to particular attributes. You can use the <tt>errors.full_messages</tt> or <tt>errors.to_a</tt> methods to view the messages in the <strong>form</strong> they <strong>might</strong><strong> </strong><strong>be</strong><strong> </strong><strong>displayed</strong><strong> </strong><strong>to</strong><strong> </strong><strong>a</strong><strong> </strong><strong>user</strong>. Those particular messages get the attribute name prepended<span style="font-family: DejaVu Sans;">前置</span>(and capitalized<span style="font-family: DejaVu Sans;">大写</span>). <tt>add</tt> receives<span style="font-family: DejaVu Sans;">接收</span>the name of the attribute you want to add the message to, and the message itself. #<span style="font-family: DejaVu Sans;">这里只是添加的消息并没有验证</span>

class Person &lt; ActiveRecord::Base

def a_method_used_for_validation_purposes

errors.add(:name, "cannot contain the characters !@#%*()_-+=")

end

end

&nbsp;

person = Person.create(:name =&gt; "!@#")

&nbsp;

person.errors[:name]

# =&gt; ["cannot contain the characters !@#%*()_-+="]

&nbsp;

person.errors.full_messages

# =&gt; ["Name cannot contain the characters !@#%*()_-+="]

&nbsp;

Another way to do this is using <tt>[]=</tt> setter

class Person &lt; ActiveRecord::Base

def a_method_used_for_validation_purposes

errors[:name] = "cannot contain the characters !@#%*()_-+="

end

end

&nbsp;

person = Person.create(:name =&gt; "!@#")

&nbsp;

person.errors[:name]

# =&gt; ["cannot contain the characters !@#%*()_-+="]

&nbsp;

person.errors.to_a

# =&gt; ["Name cannot contain the characters !@#%*()_-+="]
<h4>7.4 <tt>errors[:base]</tt></h4>
You can add error messages that are related to the object’s state as a whole, instead of being related to a specific attribute. <strong>You</strong><strong> </strong><strong>can</strong><strong> </strong><strong>use</strong><strong> </strong><strong>this</strong><strong> </strong><strong>method</strong><strong> </strong><strong>when</strong><strong> </strong><strong>you</strong><strong> </strong><strong>want</strong><strong> </strong><strong>to</strong><strong> </strong><strong>say</strong><strong> </strong><strong>that</strong><strong> </strong><strong>the</strong><strong> </strong><strong>object</strong><strong> </strong><strong>is</strong><strong> </strong><strong>invalid,</strong><strong> </strong><strong>no</strong><strong> </strong><strong>matter</strong><strong> </strong><strong>the</strong><strong> </strong><strong>values</strong><strong> </strong><strong>of</strong><strong> </strong><strong>its</strong><strong> </strong><strong>attributes.</strong><strong> </strong><strong>Since</strong><strong> </strong><tt><strong>errors[:base]</strong></tt><strong> </strong><strong>is</strong><strong> </strong><strong>an</strong><strong> </strong><strong>array,</strong><strong> </strong><strong>you</strong><strong> </strong><strong>can</strong><strong> </strong><strong>simply</strong><strong> </strong><strong>add</strong><strong> </strong><strong>a</strong><strong> </strong><strong>string</strong><strong> </strong><strong>to</strong><strong> </strong><strong>the</strong><strong> </strong><strong>array</strong><strong> </strong><strong>and</strong><strong> </strong><strong>uses</strong><strong> </strong><strong>it</strong><strong> </strong><strong>as</strong><strong> </strong><strong>the</strong><strong> </strong><strong>error</strong><strong> </strong><strong>message.</strong>

class Person &lt; ActiveRecord::Base

def a_method_used_for_validation_purposes

errors[:base] &lt;&lt; "This person is invalid because ..."

end

end
<h4>7.5 <tt>errors.clear</tt></h4>
The <tt>clear</tt> method is used when you intentionally<span style="font-family: DejaVu Sans;">有意</span>want to clear all the messages in the <tt>errors</tt> collection. <strong>Of</strong><strong> </strong><strong>course,</strong><strong> </strong><strong>calling</strong><strong> </strong><tt><strong>errors.clear</strong></tt><strong> </strong><strong>upon</strong><span style="font-family: DejaVu Sans;"><strong>在</strong></span><strong>...</strong><span style="font-family: DejaVu Sans;"><strong>之上</strong></span><strong>an</strong><strong> </strong><strong>invalid</strong><strong> </strong><strong>object</strong><strong> </strong><strong>won</strong><strong>’</strong><strong>t</strong><strong> </strong><strong>actually</strong><strong> </strong><strong>make</strong><strong> </strong><strong>it</strong><strong> </strong><strong>valid:</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>errors</strong></tt><strong> </strong><strong>collection</strong><strong> </strong><strong>will</strong><strong> </strong><strong>now</strong><strong> </strong><strong>be</strong><strong> </strong><strong>empty,</strong><strong> </strong><strong>but</strong><strong> </strong><strong>the</strong><strong> </strong><strong>next</strong><strong> </strong><strong>time</strong><strong> </strong><strong>you</strong><strong> </strong><strong>call</strong><strong> </strong><tt><strong>valid?</strong></tt><strong> </strong><strong>or</strong><strong> </strong><strong>any</strong><strong> </strong><strong>method</strong><strong> </strong><strong>that</strong><strong> </strong><strong>tries</strong><strong> </strong><strong>to</strong><strong> </strong><strong>save</strong><strong> </strong><strong>this</strong><strong> </strong><strong>object</strong><strong> </strong><strong>to</strong><strong> </strong><strong>the</strong><strong> </strong><strong>database,</strong><strong> </strong><strong>the</strong><strong> </strong><strong>validations</strong><strong> </strong><strong>will</strong><strong> </strong><strong>run</strong><strong> </strong><strong>again.</strong><strong> </strong><span style="color: #800000;">If</span><span style="color: #800000;">any</span><span style="color: #800000;">of</span><span style="color: #800000;">the</span><span style="color: #800000;">validations</span><span style="color: #800000;">fail,</span><span style="color: #800000;">the</span><tt><span style="color: #800000;">errors</span></tt><span style="color: #800000;">collection</span><span style="color: #800000;">will</span><span style="color: #800000;">be</span><span style="color: #800000;">filled</span><span style="color: #800000;">again.</span>

class Person &lt; ActiveRecord::Base

validates :name, :presence =&gt; true, :length =&gt; { :minimum =&gt; 3 }

end

&nbsp;

person = Person.new

person.valid? # =&gt; false

person.errors[:name]

# =&gt; ["can't be blank", "is too short (minimum is 3 characters)"]

&nbsp;

person.errors.clear

person.errors.empty? # =&gt; true

&nbsp;

p.save # =&gt; false

&nbsp;

p.errors[:name]

# =&gt; ["can't be blank", "is too short (minimum is 3 characters)"]
<h4>7.6 <tt>errors.size</tt></h4>
<tt>The</tt><tt> </tt><tt>size</tt><tt> </tt><tt>method</tt><tt> </tt><tt>returns</tt><tt> </tt><tt>the</tt><tt> </tt><tt>total</tt><tt> </tt><tt>number</tt><tt> </tt><tt>of</tt><tt> </tt><tt>error</tt><tt> </tt><tt>messages</tt><tt> </tt><tt>for</tt><tt> </tt><tt>the</tt><tt> </tt><tt>object.</tt>

class Person &lt; ActiveRecord::Base

validates :name, :presence =&gt; true, :length =&gt; { :minimum =&gt; 3 }

end

&nbsp;

person = Person.new

person.valid? # =&gt; false

person.errors.size # =&gt; 3

&nbsp;

person = Person.new(:name =&gt; "Andrea", :email =&gt; "andrea@example.com")

person.valid? # =&gt; true

person.errors.size # =&gt; 0
<h3>8 Displaying Validation Errors in the View<span style="font-family: WenQuanYi Micro Hei;">在视图中显示验证错误（信息）</span></h3>
Rails maintains an official plugin that provides helpers to display the error messages of your models in your view templates. You can install it as a plugin or as a Gem.
<h4>8.1 Installing as a plugin</h4>
$ rails plugin install git://github.com/joelmoss/dynamic_form.git
<h4>8.2 Installing as a Gem</h4>
Add this line in your Gemfile:

gem "dynamic_form"

Now you will have access to these two methods in your view templates
<h4>8.3 <tt>error_messages</tt> and <tt>error_messages_for</tt></h4>
When creating a form with the <tt>form_for</tt> helper, you can use the <tt>error_messages</tt> method on the form builder to render all failed validation messages for the current model instance.

class Product &lt; ActiveRecord::Base

validates :description, :value, :presence =&gt; true

validates :value, :numericality =&gt; true, :allow_nil =&gt; true

end

&lt;%= form_for(@product) do |f| %&gt;

&lt;%= f.error_messages %&gt;

&lt;p&gt;

&lt;%= f.label :description %&gt;&lt;br /&gt;

&lt;%= f.text_field :description %&gt;

&lt;/p&gt;

&lt;p&gt;

&lt;%= f.label :value %&gt;&lt;br /&gt;

&lt;%= f.text_field :value %&gt;

&lt;/p&gt;

&lt;p&gt;

&lt;%= f.submit "Create" %&gt;

&lt;/p&gt;

&lt;% end %&gt;

To get the idea, if you submit the form with empty fields you typically get this back, though styles are indeed missing by default:

You can also use the <tt>error_messages_for</tt> helper to display the error messages of a model assigned to a view template. It’s very similar to the previous example and will achieve exactly the same result.

<code>&lt;%=</code> <code>error_messages_for</code><code> </code><code>:product</code> <code>%&gt;</code>

The displayed text for each error message will always be formed by the capitalized name of the attribute that holds the error, followed by the error message itself.<span style="font-family: DejaVu Sans;">大写错误的属性名，后跟错误消息。</span>

&lt;%= f.error_messages :header_message =&gt; "Invalid product!",

:message =&gt; "You'll need to fix the following fields:",

:header_tag =&gt; :h3 %&gt;

Which results in the following content:

If you pass <tt>nil</tt> to any of these options, it will get rid of the respective section of the <tt>div</tt>.
<h4>8.4 Customizing the Error Messages CSS<span style="font-family: WenQuanYi Micro Hei;">定制错误消息的</span>CSS<span style="font-family: WenQuanYi Micro Hei;">样式</span></h4>
The selectors to customize the style of error messages are:<span style="font-family: DejaVu Sans;">定制错误消息的选择器是：</span>
<ul>
	<li><tt>field_with_errors</tt><tt> – </tt><tt>Style</tt><tt> </tt><tt>for</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>fields</tt><tt> </tt><tt>and</tt><tt> </tt><tt>labels</tt><tt> </tt><tt>with</tt><tt> </tt><tt>errors.</tt><tt> </tt><tt>Errors</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>form</tt><tt> </tt><tt>fields</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>labels</tt><span style="font-family: DejaVu Sans;"><tt>的样式</tt></span></li>
	<li><tt>#errorExplanation</tt> – Style for the <tt>div</tt> element with the error messages. error<span style="font-family: DejaVu Sans;">消息的</span>div<span style="font-family: DejaVu Sans;">元素样式</span></li>
	<li><tt>#errorExplanation</tt><tt> </tt><tt>h2</tt> – Style for the header of the <tt>div</tt> element. div<span style="font-family: DejaVu Sans;">元素包含的标题样式</span></li>
	<li><tt>#errorExplanation</tt><tt> </tt><tt>p</tt> – Style for the paragraph that holds the message that appears right below the header of the <tt>div</tt> element.div<span style="font-family: DejaVu Sans;">元素中出现在标题下方段落的样式</span></li>
	<li><tt>#errorExplanation</tt><tt> </tt><tt>ul</tt><tt> </tt><tt>li</tt> – Style for the list items with individual error messages. <span style="font-family: DejaVu Sans;">错误消息中个别的项目列表样式</span></li>
</ul>
Scaffolding<span style="font-family: DejaVu Sans;">脚手架</span>for example generates <tt>app/assets/stylesheets/scaffold.css.scss</tt>, which later compiles to <tt>app/assets/stylesheets/scaffold.css</tt> and defines the red-based style you saw above.

<strong>The</strong><strong> </strong><strong>name</strong><strong> </strong><strong>of</strong><strong> </strong><strong>the</strong><strong> </strong><strong>class</strong><strong> </strong><strong>and</strong><strong> </strong><strong>the</strong><strong> </strong><strong>id</strong><strong> </strong><strong>can</strong><strong> </strong><strong>be</strong><strong> </strong><strong>changed</strong><strong> </strong><strong>with</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>:class</strong></tt><strong> </strong><strong>and</strong><strong> </strong><tt><strong>:id</strong></tt><strong> </strong><strong>options,</strong><strong> </strong><strong>accepted</strong><strong> </strong><strong>by</strong><strong> </strong><strong>both</strong><strong> </strong><strong>helpers.</strong>

Scaffolding — <span style="font-family: DejaVu Sans;">基架</span>

<span style="font-family: DejaVu Sans;">　　基于数据库架构生成网页模板的过程。在</span>ASP .NET <span style="font-family: DejaVu Sans;">中，动态数据使用基架来简化基于</span>Web <span style="font-family: DejaVu Sans;">的</span>UI <span style="font-family: DejaVu Sans;">的生成过程。用户可以通过这种</span>UI <span style="font-family: DejaVu Sans;">来查看和更新数据库。</span>
<h4>8.5 Customizing the Error Messages HTML</h4>
By default, form fields with errors are displayed enclosed by a <tt>div</tt> element with the <tt>field_with_errors</tt> CSS class. However, it’s possible to override that.

The way form fields with errors are treated is defined by <tt>ActionView::Base.field_error_proc</tt>. This is a <tt>Proc</tt> that receives two parameters:
<ul>
	<li>A string with the HTML tag</li>
	<li>An instance of <tt>ActionView::Helpers::InstanceTag</tt>.</li>
</ul>
<strong>Here</strong><strong> </strong><strong>is</strong><strong> </strong><strong>a</strong><strong> </strong><strong>simple</strong><strong> </strong><strong>example</strong><strong> </strong><strong>where</strong><strong> </strong><strong>we</strong><strong> </strong><strong>change</strong><strong> </strong><strong>the</strong><strong> </strong><strong>Rails</strong><strong> </strong><strong>behavior</strong><strong> </strong><strong>to</strong><strong> </strong><strong>always</strong><strong> </strong><strong>display</strong><strong> </strong><strong>the</strong><strong> </strong><strong>error</strong><strong> </strong><strong>messages</strong><strong> </strong><strong>in</strong><strong> </strong><strong>front</strong><strong> </strong><strong>of</strong><strong> </strong><strong>each</strong><strong> </strong><strong>of</strong><strong> </strong><strong>the</strong><strong> </strong><strong>form</strong><strong> </strong><strong>fields</strong><strong> </strong><strong>with</strong><strong> </strong><strong>errors.</strong><strong> </strong>The error messages will be enclosed by a <tt>span</tt> element with a <tt>validation-error</tt> CSS class. There will be no <tt>div</tt> element enclosing the <tt>input</tt> element, so we get rid of that red border around the text field. You can use the <tt>validation-error</tt> CSS class to style it anyway you want.

ActionView::Base.field_error_proc = Proc.new do |html_tag, instance|

if instance.error_message.kind_of?(Array)

%(#{html_tag}&lt;span class="validation-error"&gt;&amp;nbsp;

#{instance.error_message.join(',')}&lt;/span&gt;).html_safe

else

%(#{html_tag}&lt;span class="validation-error"&gt;&amp;nbsp;

#{instance.error_message}&lt;/span&gt;).html_safe

end

end

This will result in something like the following:
<h3>9 Callbacks Overview<span style="font-family: WenQuanYi Micro Hei;">回调概述</span></h3>
Callbacks are methods that get called at certain moments of an object’s life cycle. With callbacks it’s possible to write code that will run whenever an Active Record object is created, saved, updated, deleted, validated, or loaded from the database.

<span style="font-family: DejaVu Sans;">回调是一种在对象生存周期中的某些情况中（使得对象）被调用的方法。通过</span>callbacks<span style="font-family: DejaVu Sans;">可以运行编写的代码无论</span>Active Record<span style="font-family: DejaVu Sans;">对象是在数据库被创建，保存，删除，验证或者是导入。</span>
<h4>9.1 Callback Registration</h4>
<strong>In</strong><strong> </strong><strong>order</strong><strong> </strong><strong>to</strong><strong> </strong><strong>use</strong><strong> </strong><strong>the</strong><strong> </strong><strong>available</strong><strong> </strong><strong>callbacks,</strong><strong> </strong><strong>you</strong><strong> </strong><strong>need</strong><strong> </strong><strong>to</strong><strong> </strong><strong>register</strong><strong> </strong><strong>them.</strong> You can do that by implementing<span style="font-family: DejaVu Sans;">实施</span>them as ordinary<span style="font-family: DejaVu Sans;">一般</span>methods, and then <strong>using</strong><strong> </strong><strong>a</strong><strong> </strong><strong>macro-style</strong><strong> </strong><strong>class</strong><strong> </strong><strong>method</strong><strong> </strong><strong>to</strong><strong> </strong><strong>register</strong><strong> </strong><strong>them</strong><strong> </strong><strong>as</strong><strong> </strong><strong>callbacks.</strong>

class User &lt; ActiveRecord::Base

validates :login, :email, :presence =&gt; true

&nbsp;

before_validation :ensure_login_has_a_value

&nbsp;

protected

def ensure_login_has_a_value

if login.nil?

self.login = email unless email.blank?

end

end

end

The macro-style class methods can also receive<span style="font-family: DejaVu Sans;">接收</span>a block. Consider using this style if the code inside your block is so short that it fits in just one line.

class User &lt; ActiveRecord::Base

validates :login, :email, :presence =&gt; true

&nbsp;

before_create do |user|

user.name = user.login.capitalize if user.name.blank?

end

end

It’s considered<span style="font-family: DejaVu Sans;">考虑</span>good practice to declare callback methods as being protected or private. If left public, they can be called from outside of the model and violate<span style="font-family: DejaVu Sans;">违反</span>the principle of object encapsulation<span style="font-family: DejaVu Sans;">封装</span>.<span style="font-family: DejaVu Sans;">（基于）周密的考虑声明</span>callback<span style="font-family: DejaVu Sans;">方法为</span>protected<span style="font-family: DejaVu Sans;">或者</span>private<span style="font-family: DejaVu Sans;">。如果是</span>public<span style="font-family: DejaVu Sans;">，他们可以被</span>model<span style="font-family: DejaVu Sans;">外调用这样违反了封装对象的原则。</span>
<h3>10 Available Callbacks</h3>
<strong>Here</strong><strong> </strong><strong>is</strong><strong> </strong><strong>a</strong><strong> </strong><strong>list</strong><strong> </strong><strong>with</strong><strong> </strong><strong>all</strong><strong> </strong><strong>the</strong><strong> </strong><strong>available</strong><strong> </strong><strong>Active</strong><strong> </strong><strong>Record</strong><strong> </strong><strong>callbacks</strong>, listed in the same order in which they will get called during the respective operations:
<h4>10.1 Creating an Object</h4>
<ul>
	<li><tt>before_validation</tt></li>
	<li><tt>after_validation</tt></li>
	<li><tt>before_save</tt></li>
	<li><tt>before_create</tt></li>
	<li><tt>around_create</tt></li>
	<li><tt>after_create</tt></li>
	<li><tt>after_save</tt></li>
</ul>
<h4>10.2 Updating an Object</h4>
<ul>
	<li><tt>before_validation</tt></li>
	<li><tt>after_validation</tt></li>
	<li><tt>before_save</tt></li>
	<li><tt>before_update</tt></li>
	<li><tt>around_update</tt></li>
	<li><tt>after_update</tt></li>
	<li><tt>after_save</tt></li>
</ul>
<h4>10.3 Destroying an Object</h4>
<ul>
	<li><tt>before_destroy</tt></li>
	<li><tt>after_destroy</tt></li>
	<li><tt>around_destroy</tt></li>
</ul>
<tt>after_save</tt> runs both on create and update, but always <em>after</em> the more specific callbacks <tt>after_create</tt> and <tt>after_update</tt>, no matter the order in which the macro calls were executed.<tt>after_save</tt><span style="font-family: DejaVu Sans;"><tt>总是在</tt><tt></tt></span><tt>after_create</tt><tt> </tt><tt>and</tt><tt> </tt><tt>after_update</tt><span style="font-family: DejaVu Sans;"><tt>的后面不管他们的微调用如何。</tt></span>
<h4>10.4 <tt>after_initialize</tt> and <tt>after_find</tt></h4>
The <tt>after_initialize</tt> callback will be called whenever an Active Record object is <strong>instantiated</strong>, either by directly using <tt><strong>new</strong></tt> or when a record is <strong>loaded</strong> from the database. It can be useful to avoid the need to directly override<span style="font-family: DejaVu Sans;">覆盖</span>your Active Record <tt>initialize</tt> method.

&nbsp;

The <tt>after_find</tt> callback will be called whenever <strong>Active</strong><strong> </strong><strong>Record</strong><strong> </strong><strong>loads</strong><strong> </strong><strong>a</strong><strong> </strong><strong>record</strong><strong> </strong><strong>from</strong><strong> </strong><strong>the</strong><strong> </strong><strong>database</strong>. <tt><strong>after_find</strong></tt><strong> </strong><strong>is</strong><strong> </strong><strong>called</strong><strong> </strong><strong>before</strong><strong> </strong><tt><strong>after_initialize</strong></tt><strong> </strong><strong>if</strong><strong> </strong><strong>both</strong><strong> </strong><strong>are</strong><strong> </strong><strong>defined.</strong>

&nbsp;

&nbsp;

The <tt>after_initialize</tt> and <tt>after_find</tt> callbacks have no <tt>before_*</tt> counterparts<span style="font-family: DejaVu Sans;">同行</span>, but they can be registered just like the other Active Record callbacks.

&nbsp;

class User &lt; ActiveRecord::Base

after_initialize do |user|

puts "You have initialized an object!"

end

&nbsp;

after_find do |user|

puts "You have found an object!"

end

end

&nbsp;

&gt;&gt; User.new

You have initialized an object!

=&gt; #&lt;User id: nil&gt;

&nbsp;

&gt;&gt; User.first

You have found an object!

You have initialized an object!

=&gt; #&lt;User id: 1&gt;
<h3>11 Running Callbacks</h3>
The following methods trigger callbacks:<span style="font-family: DejaVu Sans;">下面的方法触发回调：</span>
<ul>
	<li><tt>create</tt></li>
	<li><tt>create!</tt></li>
	<li><tt>decrement!</tt> <span style="font-family: DejaVu Sans;">递减</span></li>
	<li><tt>destroy</tt></li>
	<li><tt>destroy_all</tt></li>
	<li><tt>increment!</tt></li>
	<li><tt>save</tt></li>
	<li><tt>save!</tt></li>
	<li><tt>save(false)</tt></li>
	<li><tt>toggle!</tt></li>
	<li><tt>update</tt></li>
	<li><tt>update_attribute</tt></li>
	<li><tt>update_attributes</tt></li>
	<li><tt>update_attributes!</tt></li>
	<li><tt>valid?</tt></li>
</ul>
Additionally, the <tt>after_find</tt> callback is triggered by the following finder methods:<span style="font-family: DejaVu Sans;">此外，</span><tt>after_find</tt><span style="font-family: DejaVu Sans;"><tt>会被下面的查找方法触发：</tt></span>
<ul>
	<li><tt>all</tt></li>
	<li><tt>first</tt></li>
	<li><tt>find</tt></li>
	<li><tt>find_all_by_</tt><em>attribute</em></li>
	<li><tt>find_by_</tt><em>attribute</em></li>
	<li><tt>find_by_</tt><em>attribute</em><tt>!</tt></li>
	<li><tt>last</tt></li>
</ul>
The <tt>after_initialize</tt> callback is triggered every time a new object of the class is initialized.<span style="font-family: DejaVu Sans;">当类的一个新的对象被初始化的时候都会触发</span><tt>after_initialize</tt><span style="font-family: DejaVu Sans;"><tt>回调。</tt></span>
<h3>12 Skipping Callbacks</h3>
Just as with validations, it’s also possible to skip callbacks. These methods should be used with caution, however, because important business rules and application logic may be kept in callbacks. Bypassing them without understanding the potential<span style="font-family: DejaVu Sans;">潜在</span>implications<span style="font-family: DejaVu Sans;">影响</span>may lead to invalid data.<span style="font-family: DejaVu Sans;">正如验证，它有可能忽略回调。这些方法需要注意使用，然而，由于重要的业务规则和应用程序逻辑可能保持回调。没有明白潜在的影响就绕过它们可能会导致非法数据。</span>
<ul>
	<li><tt>decrement</tt></li>
	<li><tt>decrement_counter</tt></li>
	<li><tt>delete</tt></li>
	<li><tt>delete_all</tt></li>
	<li><tt>find_by_sql</tt></li>
	<li><tt>increment</tt></li>
	<li><tt>increment_counter</tt></li>
	<li><tt>toggle</tt></li>
	<li><tt>touch</tt></li>
	<li><tt>update_column</tt></li>
	<li><tt>update_all</tt></li>
	<li><tt>update_counters</tt></li>
</ul>
<h3>13 Halting Execution<span style="font-family: WenQuanYi Micro Hei;">停止执行</span></h3>
As you start registering new callbacks for your models, they will be queued for execution. This queue will include all your model’s validations, the registered callbacks, and the database operation to be executed.

The whole callback chain<span style="font-family: DejaVu Sans;">链</span>is wrapped in a transaction<span style="font-family: DejaVu Sans;">交易</span>. If any <em>before</em> callback method returns exactly <tt>false</tt> or raises an exception the execution chain gets halted and a ROLLBACK is issued; <em>after</em> callbacks can only accomplish<span style="font-family: DejaVu Sans;">完成</span>that by raising an exception.

Raising an arbitrary exception may break code that expects <tt>save</tt> and friends not to fail like that.<span style="font-family: DejaVu Sans;">抛出任意异常可能会打断代码预计的</span>save<span style="font-family: DejaVu Sans;">以及朋友们不想要的失败。</span>The <tt>ActiveRecord::Rollback</tt> exception is thought precisely<span style="font-family: DejaVu Sans;">正是</span>to tell Active Record a rollback is going on. That one is internally captured but not reraised.
<h3>14 Relational Callbacks Callbacks<span style="font-family: WenQuanYi Micro Hei;">相关</span></h3>
Callbacks work through model relationships, and can even be defined by them. Let’s take an example where a user has many posts. In our example, a user’s posts should be destroyed if the user is destroyed. So, we’ll add an <tt>after_destroy</tt> callback to the <tt>User</tt> model by way of its relationship to the <tt>Post</tt> model.

class User &lt; ActiveRecord::Base

has_many :posts, :dependent =&gt; :destroy

end

&nbsp;

class Post &lt; ActiveRecord::Base

after_destroy :log_destroy_action

&nbsp;

def log_destroy_action

puts 'Post destroyed'

end

end

&nbsp;

&gt;&gt; user = User.first

=&gt; #&lt;User id: 1&gt;

&gt;&gt; user.posts.create!

=&gt; #&lt;Post id: 1, user_id: 1&gt;

&gt;&gt; user.destroy

Post destroyed

=&gt; #&lt;User id: 1&gt;
<h3>15 Conditional Callbacks<span style="font-family: WenQuanYi Micro Hei;">有条件的回调</span></h3>
Like in validations, we can also make our callbacks conditional, calling them only when a given predicate is satisfied. You can do that by using the <tt>:if</tt> and <tt>:unless</tt> options, which can take a symbol, a string or a <tt>Proc</tt>. You may use the <tt>:if</tt> option when you want to specify when the callback <strong>should</strong> get called. If you want to specify when the callback <strong>should</strong><strong> </strong><strong>not</strong> be called, then you may use the <tt>:unless</tt> option.
<h4>15.1 Using <tt>:if</tt> and <tt>:unless</tt> with a Symbol</h4>
You can associate the <tt>:if</tt> and <tt>:unless</tt> options with a symbol corresponding to the name of a method that will get called right before the callback. When using the <tt>:if</tt> option, the callback won’t be executed if the method returns false; when using the <tt>:unless</tt> option, the callback won’t be executed if the method returns true. This is the most common option. Using this form of registration it’s also possible to register several different methods that should be called to check if the callback should be executed.

class Order &lt; ActiveRecord::Base

before_save :normalize_card_number, :if =&gt; :paid_with_card?

end
<h4>15.2 Using <tt>:if</tt> and <tt>:unless</tt> with a String</h4>
You can also use a string that will be evaluated using <tt>eval</tt> and needs to contain valid Ruby code. You should use this option only when the string represents a really short condition.

class Order &lt; ActiveRecord::Base

before_save :normalize_card_number, :if =&gt; "paid_with_card?"

end
<h4>15.3 Using <tt>:if</tt> and <tt>:unless</tt> with a Proc</h4>
Finally, it’s possible to associate <tt>:if</tt> and <tt>:unless</tt> with a <tt>Proc</tt> object. This option is best suited when writing short validation methods, usually one-liners.

class Order &lt; ActiveRecord::Base

before_save :normalize_card_number,

:if =&gt; Proc.new { |order| order.paid_with_card? }

end
<h4>15.4 Multiple Conditions for Callbacks</h4>
When writing conditional callbacks, it’s possible to mix both <tt>:if</tt> and <tt>:unless</tt> in the same callback declaration.

class Comment &lt; ActiveRecord::Base

after_create :send_email_to_author, :if =&gt; :author_wants_emails?,

:unless =&gt; Proc.new { |comment| comment.post.ignore_comments? }

end
<h3>16 Callback Classes</h3>
Sometimes the callback methods that you’ll write will be useful enough to be reused by other models. Active Record makes it possible to create classes that encapsulate the callback methods, so it becomes very easy to reuse them.

<strong>Here</strong><strong>’</strong><strong>s</strong><strong> </strong><strong>an</strong><strong> </strong><strong>example</strong><strong> </strong><strong>where</strong><strong> </strong><strong>we</strong><strong> </strong><strong>create</strong><strong> </strong><strong>a</strong><strong> </strong><strong>class</strong><strong> </strong><strong>with</strong><strong> </strong><strong>an</strong><strong> </strong><tt><strong>after_destroy</strong></tt><strong> </strong><strong>callback</strong><strong> </strong><strong>for</strong><strong> </strong><strong>a</strong><strong> </strong><tt><strong>PictureFile</strong></tt><strong> </strong><strong>model.</strong>

class PictureFileCallbacks

def after_destroy(picture_file)

if File.exists?(picture_file.filepath)

File.delete(picture_file.filepath)

end

end

end

When declared inside a class the callback method will receive the model object as a parameter. We can now use it this way:

class PictureFile &lt; ActiveRecord::Base

after_destroy PictureFileCallbacks.new

end

Note that we needed to instantiate a new <tt>PictureFileCallbacks</tt> object, since we declared our callback as an instance method. Sometimes it will make more sense to have it as a class method.

class PictureFileCallbacks

def self.after_destroy(picture_file)

if File.exists?(picture_file.filepath)

File.delete(picture_file.filepath)

end

end

end

If the callback method is declared this way, it won’t be necessary to instantiate a <tt>PictureFileCallbacks</tt> object.

class PictureFile &lt; ActiveRecord::Base

after_destroy PictureFileCallbacks

end

You can declare as many callbacks as you want inside your callback classes.
<h3>17 Observers<span style="font-family: WenQuanYi Micro Hei;">观测者</span></h3>
Observers are similar to callbacks, but with important differences. Whereas callbacks can pollute a model with code that isn’t directly related to its purpose, observers allow you to add the same functionality outside of a model. For example, it could be argued that a <tt>User</tt> model should not include code to send registration confirmation emails. <strong>Whenever</strong><strong> </strong><strong>you</strong><strong> </strong><strong>use</strong><strong> </strong><strong>callbacks</strong><strong> </strong><strong>with</strong><strong> </strong><strong>code</strong><strong> </strong><strong>that</strong><strong> </strong><strong>isn</strong><strong>’</strong><strong>t</strong><strong> </strong><strong>directly</strong><strong> </strong><strong>related</strong><strong> </strong><strong>to</strong><strong> </strong><strong>your</strong><strong> </strong><strong>model,</strong><strong> </strong><strong>you</strong><strong> </strong><strong>may</strong><strong> </strong><strong>want</strong><strong> </strong><strong>to</strong><strong> </strong><strong>consider</strong><strong> </strong><strong>creating</strong><strong> </strong><strong>an</strong><strong> </strong><strong>observer</strong><strong> </strong><strong>instead.</strong>

Observers<span style="font-family: DejaVu Sans;">与</span>callbacks<span style="font-family: DejaVu Sans;">很相似，但是有着很大不同。鉴于</span>callbacks<span style="font-family: DejaVu Sans;">能够影响</span>model<span style="font-family: DejaVu Sans;">通过代码那与他的目的并没有直接关联，</span>observers<span style="font-family: DejaVu Sans;">允许你在</span>model<span style="font-family: DejaVu Sans;">外添加相同的功能。</span>
<h4>17.1 Creating Observers</h4>
For example, imagine a <tt>User</tt> model where we want to send an email every time a new user is created. Because sending emails is not directly related to our model’s purpose, we could create an observer to contain this functionality.

<code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>observer</code><code> </code><code>User</code>

&nbsp;

class UserObserver &lt; ActiveRecord::Observer

def after_create(model)

# code to send confirmation email...

end

end

&nbsp;

As with callback classes, the observer’s methods receive the observed model as a parameter.
<h4>17.2 Registering Observers</h4>
Observers are conventionally placed inside of your <tt>app/models</tt> directory and registered in your application’s <tt>config/application.rb</tt> file. <strong>For</strong><strong> </strong><strong>example,</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>UserObserver</strong></tt><strong> </strong><strong>above</strong><strong> </strong><strong>would</strong><strong> </strong><strong>be</strong><strong> </strong><strong>saved</strong><strong> </strong><strong>as</strong><strong> </strong><tt><strong>app/models/user_observer.rb</strong></tt><strong> </strong><strong>and</strong><strong> </strong><strong>registered</strong><strong> </strong><strong>in</strong><strong> </strong><tt><strong>config/application.rb</strong></tt><strong> </strong><strong>this</strong><strong> </strong><strong>way:</strong>

<code>#</code><code> </code><code>Activate</code><code> </code><code>observers</code><code> </code><code>that</code><code> </code><code>should</code><code> </code><code>always</code><code> </code><code>be</code><code> </code><code>running</code>

<code>config.active_record.observers</code><code> </code><code>=</code><code> </code><code>:user_observer</code>

As usual, settings in <tt>config/environments</tt> take precedence<span style="font-family: DejaVu Sans;">优先权</span>over those in <tt>config/application.rb</tt>. So, if you prefer that an observer doesn’t run in all environments, you can simply register it in a specific environment instead.
<h4>17.3 Sharing Observers</h4>
By default, Rails will simply strip “Observer” from an observer’s name to find the model it should observe. However, observers can also be used to add behavior to more than one model, and so it’s possible to manually specify the models that our observer should observe.

class MailerObserver &lt; ActiveRecord::Observer

observe :registration, :user

&nbsp;

def after_create(model)

# code to send confirmation email...

end

end

In this example, the <tt>after_create</tt> method would be called whenever a <tt>Registration</tt> or <tt>User</tt> was created. Note that this new <tt>MailerObserver</tt> would also need to be registered in <tt>config/application.rb</tt> in order to take effect.

<code>config.active_record.observers</code><code> </code><code>=</code><code> </code><code>:mailer_observer#</code><span style="font-family: DejaVu Sans;"><code>与上面的类名相关</code></span>
<h3>18 Transaction Callbacks</h3>
There are two additional callbacks that are triggered by the completion of a database transaction: <tt>after_commit</tt> and <tt>after_rollback</tt>. These callbacks are very similar to the <tt>after_save</tt> callback except that they don’t execute until after database changes have either been committed or rolled back. They are most useful when your active record models need to interact with external systems which are not part of the database transaction.

Consider, for example, the previous example where the <tt>PictureFile</tt> model needs to delete a file after a record is destroyed. If anything raises an exception after the <tt>after_destroy</tt> callback is called and the transaction rolls back, the file will have been deleted and the model will be left in an inconsistent state. For example, suppose that <tt>picture_file_2</tt> in the code below is not valid and the <tt>save!</tt> method raises an error.

PictureFile.transaction do

picture_file_1.destroy

picture_file_2.save!

end

By using the <tt>after_commit</tt> callback we can account for this case.

class PictureFile &lt; ActiveRecord::Base

attr_accessor :delete_file

&nbsp;

after_destroy do |picture_file|

picture_file.delete_file = picture_file.filepath

end

&nbsp;

after_commit do |picture_file|

if picture_file.delete_file &amp;&amp; File.exist?(picture_file.delete_file)

File.delete(picture_file.delete_file)

picture_file.delete_file = nil

end

end

end

The <tt>after_commit</tt> and <tt>after_rollback</tt> callbacks are guaranteed to be called for all models created, updated, or destroyed within a transaction block. If any exceptions are raised within one of these callbacks, they will be ignored so that they don’t interfere with the other callbacks. As such, if your callback code could raise an exception, you’ll need to rescue it and handle it appropriately within the callback.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date>2011-11-24 13:38:46</wp:post_date>
		<wp:post_date_gmt>2011-11-24 05:38:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>active-record-validations-and-callbacks-%e6%b4%bb%e5%8a%a8%e8%ae%b0%e5%bd%95%e9%aa%8c%e8%af%81%e5%92%8c%e5%9b%9e%e8%b0%83</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="guide"><![CDATA[guide]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rubyonrails Guide to Active Record Associations</title>
		<link></link>
		<pubDate>Tue, 29 Nov 2011 07:31:07 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=89</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<h1>Active Record</h1>
Active Record（中文名：活动记录）是一种领域模型模式，特点是一个模型类对应关系型数据库中的一个表，而模型类的一个实例对应表中的一行记录。Active Record 和Row Gateway （行记录入口）十分相似，但前者是领域模型，后者是一种数据源模式。关系型数据库往往通过外键来表述实体关系，Active Record 在数据源层面上也将这种关系映射为对象的关联和聚集。

Active Record 适合非常简单的领域需求，尤其在领域模型和数据库模型十分相似的情况下。如果遇到更加复杂的领域模型结构（例如用到继承、策略的领域模型），往往需要使用分离数据源的领域模型，结合Data Mapper （数据映射器）使用。

Active Record 驱动框架一般兼有ORM 框架的功能，但ActivActive Recorde Record 不是简单的ORM，正如和Row Gateway 的区别。著名的例子是全栈（Full Stack）Web 开发框架Ruby on Rails ，其默认使用一个纯Ruby 写成的<strong>Active</strong><strong> </strong><strong>Record</strong><strong> </strong><strong>框架</strong>来驱动MVC 中的模型层。

对象关系映射（ORM）提供了概念性的、易于理解的模型化数据的方法。ORM方法论基于三个核心原则：简单：以最基本的形式建模数据。传达性：数据库结构被任何人都能理解的语言文档化。精确性：基于数据模型创建正确标准化了的结构。

在Martin Fowler 的《企业应用架构模式》一书中曾详细叙述了本模式。

以下是著名的Active Record 驱动框架：

SQLObject(Python)

Ruby on Rails ActiveRecord (Ruby)

Yii Framework ActiveRecord (PHP)

Castle ActiveRecord (.NET)
<h2>Migrations</h2>
Migrations are a convenient way for you to alter移动your database in a structured and organized manner.Migrations是一种很便捷的方法让你能够以一种结构化的和有组织的方式来迁移你的数据库。You could edit fragments of SQL by hand but you would then be responsible for telling other developers that they need to go and run them.你可以手动编辑SQL片段，而且你有责任把这些告诉其他的开发人员，因为他们需要开发和使用它们。You’d also have to keep track of which changes need to be run against the production machines next time you deploy.你也可以跟踪对你部署的代码在接下来的production机器（将会）发生的变化。

Active Record tracks which migrations have already been run so all you have to do is update your source and run <tt>rake</tt><tt> </tt><tt>db:migrate</tt>.Active Record跟踪并迁移你已经运行过的（代码和数据），而你只需要在更新了你的源代码的时候执行<tt>rake</tt><tt> </tt><tt>db:migrate</tt><tt>。</tt>Active Record will work out which migrations should be run.Active Recor将会计算出那些迁移需要被执行。It will also update your <tt>db/schema.rb</tt> file to match the structure of your database.它还会更新你的<tt>db/schema.rb</tt><tt>文件使其于你的数据库结构相匹配。</tt>

Rails使用的是<strong>Active</strong><strong> </strong><strong>Record</strong><strong> </strong><strong>框架</strong>来处理数据迁移，这里笔者把ActiveRecord框架放在一个地方学习了，如需了解Migration部分需要直接阅读Migration部分。

&nbsp;
<h2>Active Record Validations and Callbacks 活动记录验证和回调</h2>
This guide teaches you how to hook勾子into the life cycle of your Active Record objects.这个教程指导你怎样挂接到你的Active Record objects的生存周期。You will learn how to validate the state of objects before they go into the database, and how to perform custom operations at certain points in the object life cycle.你将会学习到在将数据对象存入数据库之前怎样验证它们的状态，以及在对象生存周期的一些点上怎样执行定制操作。

Rails使用的是<strong>Active</strong><strong> </strong><strong>Record</strong><strong> </strong><strong>框架</strong>来处理验证和回调，这里笔者把ActiveRecord框架放在一个地方学习了，如需了解Migration部分需要直接阅读ValidationsandCallbacks部分。
<h2><strong>A</strong><strong> </strong><strong>Guide</strong><strong> </strong><strong>to</strong><strong> </strong><strong>Active</strong><strong> </strong><strong>Record</strong><strong> </strong><strong>Associations</strong></h2>
This guide covers the association features of Active Record. By referring to this guide, you will be able to:本教程涵盖了Active Record的关系部分的特性。（通过）这个教程提及的，你将能够：
<ul>
	<li>Declare associations between Active Record models 在Active Record的models中声明（它们的）关系</li>
	<li>Understand the various types of Active Record associations 明白各种类型的Active Record关系</li>
	<li>Use the methods added to your models by creating associations 通过添加方法到models（的形式）来创建关系</li>
</ul>
<h3><a name="why-associations"></a>1 Why Associations?为什么（会有）Associations</h3>
Why do we need associations between models? Because they make common operations simpler and easier in your code. For example, consider a simple Rails application that includes a model for customers and a model for orders. Each customer can have many orders. Without associations, the model declarations would look like this:为什么在models之间需要关系？因为它们使得在你的代码中大多数操作更加简单和容易。例如，思考一个简单的Rails应用程序其中包含一个customers的models和一个orders的模型（生产者和消费者模型）。每个消费者可以拥有多个生产者。没有associations（的话），模型声明看起来像这样：

classCustomer&lt;ActiveRecord::Base

end

classOrder&lt;ActiveRecord::Base

end

Now,suppose we wanted to add a new order for an existing customer.We’d need to do something like this:现在假设我们想为一个存在的customer添加一个新的order。我们需要做如下事情：

@order=Order.create(:order_date=&gt;Time.now,

:customer_id=&gt;@customer.id)

Or consider deleting a customer, and ensuring that all of its orders get deleted as well:或者考虑删除一个customer，那么确保它的所有的orders也被删除。

@orders = Order.where(:customer_id =&gt; @customer.id)

@orders.each do |order|

order.destroy

end

@customer.destroy

With Active Record associations, we can streamline these — and other — operations by declaratively声明方式telling Rails that there is a connection between the two models. Here’s the revised code for setting up customers and orders:通过Active Record associations，我们可以精简这样的或者其它（类似的）操作通过声明的方式告诉Rails在两个models之间有一个连接。这里修订代码来设定customers和orders：

class Customer &lt; ActiveRecord::Base

has_many :orders, :dependent =&gt; :destroy

end

&nbsp;

class Order &lt; ActiveRecord::Base

belongs_to :customer

end

With this change, creating a new order for a particular customer is easier:通过这样的修改，创建一个新的order给一个特定的customer更加容易：

<code>@order</code> <code>=</code><code> </code><code>@customer.orders.create(:order_date</code> <code>=&gt;</code><code> </code><code>Time.now)</code>

Deleting a customer and all of its orders is <em>much</em> easier:删除一个customer和它的所有的orders也容易了许多：

@customer.destroy

To learn more about the different types of associations, read the next section of this guide. That’s followed by some tips and tricks for working with associations, and then by a complete reference参考to the methods and options for associations in Rails.想要学习更多不同的类型的associations，阅读guide接下来的部分。这些（内容）伴随这一些在（使用）associations工作发现的tips和tricks，然后是一些Rails的associations的一些方法和options的一些完整的参考。
<h3><a name="the-types-of-associations"></a>2 The Types of Associations</h3>
In Rails, an <em>association</em> is a connection between two Active Record models. Associations are implemented using macro-style calls, so that you can declaratively add features to your models. For example, by declaring that one model <tt>belongs_to</tt> another, you instruct Rails to maintain Primary Key–Foreign Key information between instances of the two models, and you also get a number of utility methods added to your model. Rails supports six types of associations:在Rails，一个<em>association</em><em>是一个在两个</em><em></em><em>Active</em><em></em><em>Record模型之间的连接。</em><em>Associations（通过）使用宏方式的调用实施，以至于你可以（以）声明的方式添加</em><em>features到你的</em><em>models。例如申明一个</em><em>model</em><em></em><tt>belongs_to</tt><tt>另一个（模型）。</tt><tt>Rails</tt><tt>支持六种类型的</tt><tt>associations</tt><tt>：</tt>
<ul>
	<li><tt>belongs_to</tt></li>
	<li><tt>has_one</tt></li>
	<li><tt>has_many</tt></li>
	<li><tt>has_many</tt><tt> </tt><tt>:through</tt></li>
	<li><tt>has_one</tt><tt> </tt><tt>:through</tt></li>
	<li><tt>has_and_belongs_to_many</tt></li>
</ul>
<tt>In </tt><tt>the</tt><tt> remainder</tt><tt> of</tt><tt> this</tt><tt> guide,</tt><tt>you</tt><tt>’</tt><tt>ll </tt><tt>learn </tt><tt>how</tt><tt> to</tt><tt> declare</tt><tt> and</tt><tt> use</tt><tt> the </tt><tt>various</tt><tt> forms</tt><tt> of</tt><tt> associations.</tt><tt> But</tt><tt>first,</tt><tt>a</tt><tt> quick</tt><tt> introduction</tt><tt> to</tt><tt> the </tt><tt>situations </tt><tt>where</tt><tt> each </tt><tt>association</tt><tt> type</tt><tt> is</tt><tt> appropriate.</tt><tt>在这个</tt><tt>guide</tt><tt>的其他的部分，你将会学习到怎样申明和使用各种的形式的</tt><tt>associations</tt><tt>。但是首先，做一个快速的说明：每种类型的</tt><tt>association</tt><tt>在什么情况下出现。</tt>
<h4><a name="the-belongs_to-association1"></a>2.1 The <tt>belongs_to</tt> Association</h4>
A <tt>belongs_to</tt> association sets up a one-to-one connection with another model, such that each instance of the declaring model “belongs to” one instance of the other model. For example, if your application includes customers and orders, and each order can be assigned to exactly one customer, you’d declare the order model this way:一个<tt>belongs_to</tt><tt>关系设立一个</tt><tt>one-to-one</tt><tt>连接到另一个</tt><tt>model</tt><tt>，通过这样声明</tt><tt>model</tt><tt>的每一个实例</tt><tt>“</tt><tt>belongs</tt><tt> </tt><tt>to</tt><tt>” </tt><tt>另一个模型的实例。例如，如果你的应用程序包含</tt><tt>customers</tt><tt>和</tt><tt>orders</tt><tt>，并且每个</tt><tt>order</tt><tt>能够关联到仅仅一个</tt><tt>customer</tt><tt>，你可以这样的方式申明</tt><tt>order</tt><tt>模型：</tt>

<tt>class</tt><tt> </tt><tt>Order</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Base</tt>

<tt> </tt><tt>belongs_to</tt><tt> </tt><tt>:customer</tt>

<tt>end</tt>
<h4><a name="the-has_one-association"></a>2.2 The <tt>has_one</tt> Association</h4>
A <tt>has_one</tt> association also sets up a one-to-one connection with another model, but with somewhat different semantics语义(and consequences结果). This association indicates that each instance of a model contains or possesses one instance of another model. For example, if each supplier in your application has only one account, you’d declare the supplier model like this:

<a name="the-belongs_to-association"></a> 一个<tt>has_one</tt><tt>关系也设定一个</tt><tt>one-to-one</tt><tt>连接到另一个</tt><tt>model</tt><tt>，但是有某些不同的语义（和结果）。这个关系指出了（声明的）模型的每一个实例包含或拥有一个其他模型的实例。例如你的应用程序中的每一个</tt><tt>supplier</tt><tt>仅仅只有一个</tt><tt>account</tt><tt>，你可以这样声明</tt><tt>supplier</tt><tt>模型：</tt>

<tt>class</tt><tt> </tt><tt>Supplier</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Base</tt>

<tt> </tt><tt>has_one</tt><tt> </tt><tt>:account</tt>

<tt>end</tt>

&nbsp;
<h4><a name="the-has_many-association"></a>2.3 The <tt>has_many</tt> Association</h4>
A <tt>has_many</tt> association indicates a one-to-many connection with another model. You’ll often find this association on the “other side” of a <tt>belongs_to</tt> association. This association indicates that each instance of the model has zero or more instances of another model. For example, in an application containing customers and orders, the customer model could be declared like this:

一个<tt>has_many</tt><tt>关系指定了一个</tt><tt>one-to-many</tt><tt>连接到另一个</tt><tt>model</tt><tt>。你会经常发现这个关系在</tt><tt>belongs_to</tt><tt>关系的另一个端。这个关系指明了（声明）模型的每一个实例有零个或多个其它模型的实例。例如，在一个应用程序中包含</tt><tt>customers</tt><tt>和</tt><tt>orders</tt><tt>，</tt><tt>customer</tt><tt>模型如下声明：</tt>

<tt>class</tt><tt> </tt><tt>Customer</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Base</tt>

<tt> </tt><tt>has_many</tt><tt> </tt><tt>:orders</tt>

<tt>end</tt>

The name of the other model is pluralized多元化when declaring a <tt>has_many</tt> association.

&nbsp;
<h4><a name="the-has_many-through-association"></a>2.4 The <tt>has_many</tt><tt> </tt><tt>:through</tt> Association</h4>
A <tt>has_many</tt><tt> </tt><tt>:through</tt> association is often used to set up a many-to-many connection with another model. This association indicates that the declaring model can be matched with zero or more instances of another model by proceeding <em>through</em> a third model. For example, consider a medical practice where patients make appointments to see physicians. The relevant association declarations could look like this:

<tt>一个</tt><tt>has_many</tt><tt> </tt><tt>:through</tt><tt>关系通常用于设定一个</tt><tt>many-to-many</tt><tt>连接到另一个模型。这个关系指定申明的模型可以通过第三个模型（中间模型）匹配零个或多个另一个模型的实例。例如，想想一个医疗实践（例子）其中病人约定时间去看医生。它们的有关关系声明可以如下：</tt>

class Physician &lt; ActiveRecord::Base

has_many :appointments

has_many :patients, :through =&gt; :appointments#通过约会有多个病人

end

&nbsp;

class Appointment &lt; ActiveRecord::Base

belongs_to :physician

belongs_to :patient

end

&nbsp;

class Patient &lt; ActiveRecord::Base

has_many :appointments

has_many :physicians, :through =&gt; :appointments

end

The collection of join models can be managed via通过the API. For example, if you assign加入模型的集合可以通过API管理。例如，如果你指定

physician.patients = patients

new join models are created for newly associated关联的objects, and if some are gone their rows are deleted.

<em><strong>Automatic</strong></em><em><strong> </strong></em><em><strong>deletion</strong></em><em><strong> </strong></em><em><strong>of</strong></em><em><strong> </strong></em><em><strong>join</strong></em><em><strong> </strong></em><em><strong>models</strong></em><em><strong> </strong></em><em><strong>is</strong></em><em><strong> </strong></em><em><strong>direct,</strong></em><em><strong> </strong></em><em><strong>no</strong></em><em><strong> </strong></em><em><strong>destroy</strong></em><em><strong> </strong></em><em><strong>callbacks</strong></em><em><strong> </strong></em><em><strong>are</strong></em><em><strong> </strong></em><em><strong>triggered.</strong></em>

The <tt>has_many</tt><tt> </tt><tt>:through</tt> association is also useful for setting up “shortcuts” through nested <tt>has_many</tt> associations. For example, if a document has many sections, and a section has many paragraphs, you may sometimes want to get a simple collection of all paragraphs in the document. You could set that up this way:

<tt>has_many</tt><tt> </tt><tt>:through</tt><tt>关系也有利于设定</tt><tt>‘</tt><tt>快捷方式</tt><tt>’</tt><tt>通过嵌套</tt><tt>has_many</tt><tt>关系。</tt>

class Document &lt; ActiveRecord::Base

has_many :sections

has_many :paragraphs, :through =&gt; :sections

end

&nbsp;

class Section &lt; ActiveRecord::Base

belongs_to :document

has_many :paragraphs

end

&nbsp;

class Paragraph &lt; ActiveRecord::Base

belongs_to :section

end

With <tt>:through</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:sections</tt> specified, Rails will now understand:因为<tt>:through</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:sections</tt><tt>被指定，</tt><tt>Rails</tt><tt>现在将会明白如下（语句）：</tt>

<code>@document.paragraphs</code>
<h4><a name="the-has_one-through-association"></a>2.5 The <tt>has_one</tt><tt> </tt><tt>:through</tt> Association</h4>
A <tt>has_one</tt><tt> </tt><tt>:through</tt> association sets up a one-to-one connection with another model. This association indicates that the declaring model can be matched with one instance of another model by proceeding <em>through</em> a third model. For example, if each supplier has one account, and each account is associated with one account history, then the customer model could look like this:

一个<tt>has_one</tt><tt> </tt><tt>:through</tt><tt>关系设定一个</tt><tt>one-to-one</tt><tt>连接到另一个模型。这个关系指明声明的模型可以匹配另个模型的一个实例通过第三个模型（中间模型）。例如，如果每个</tt><tt>supplier</tt><tt>（供应商）有一个</tt><tt>account</tt><tt>，并且每个</tt><tt>account</tt><tt>关联一个</tt><tt>account</tt><tt> </tt><tt>history</tt><tt>，那么</tt><tt>customer</tt><tt>模型将会像这样：</tt>

<tt>class</tt><tt> </tt><tt>Supplier</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Base</tt>

<tt> </tt><tt>has_one</tt><tt> </tt><tt>:account</tt>

<tt> </tt><tt>has_one</tt><tt> </tt><tt>:account_history,</tt><tt> </tt><tt>:through</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:account</tt>

<tt>end</tt>

&nbsp;

<tt>class</tt><tt> </tt><tt>Account</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Base</tt>

<tt> </tt><tt>belongs_to</tt><tt> </tt><tt>:supplier</tt>

<tt> </tt><tt>has_one</tt><tt> </tt><tt>:account_history</tt>

<tt>end</tt>

&nbsp;

<tt>class</tt><tt> </tt><tt>AccountHistory</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Base</tt>

<tt> </tt><tt>belongs_to</tt><tt> </tt><tt>:account</tt>

<tt>end</tt>

&nbsp;
<h4><a name="the-has_and_belongs_to_many-association"></a> 2.6 The <tt>has_and_belongs_to_many</tt> Association</h4>
A <tt>has_and_belongs_to_many</tt> association creates a direct many-to-many connection with another model, with no intervening干预model. For example, if your application includes assemblies and parts, with each assembly having many parts and each part appearing in many assemblies, you could declare the models this way:

<tt>一个</tt><tt>has_and_belongs_to_many</tt><tt>关系创建一个直接的</tt><tt>many-to-many</tt><tt>连接到另一个模型，没有干扰模型。例如，如果你的应用程序包含</tt><tt>assemblies</tt><tt>和</tt><tt>parts</tt><tt>，其中每个</tt><tt>assembly</tt><tt>拥有多个</tt><tt>parts</tt><tt>并且每个</tt><tt>part</tt><tt>发生在多个集会中，你可以以这样的方式声明模型：</tt>

<tt>class</tt><tt> </tt><tt>Assembly</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Base</tt>

<tt> </tt><tt>has_and_belongs_to_many</tt><tt> </tt><tt>:parts</tt>

<tt>end</tt>

&nbsp;

<tt>class</tt><tt> </tt><tt>Part</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Base</tt>

<tt> </tt><tt>has_and_belongs_to_many</tt><tt> </tt><tt>:assemblies</tt>

<tt>end</tt>

&nbsp;
<h4><a name="choosing-between-belongs_to-and-has_one"></a> 2.7 Choosing Between <tt>belongs_to</tt> and <tt>has_one</tt></h4>
If you want to set up a 1–1 relationship between two models, you’ll need to add <tt>belongs_to</tt> to one, and <tt>has_one</tt> to the other. How do you know which is which?

如果你想在两个模型间设定一个1-1的关系，你将需要添加belongs_to到一个（模型中），以及<tt>has_one</tt><tt>到另一个（模型中）。你是怎么知道谁是谁的呢？</tt>

<tt>The</tt><tt> </tt><tt>distinction</tt><tt>区别</tt><tt>is</tt><tt> </tt><tt>in</tt><tt> </tt><tt>where</tt><tt> </tt><tt>you</tt><tt> </tt><tt>place</tt><tt> </tt><tt>the</tt><tt> </tt><tt>foreign</tt><tt> </tt><tt>key</tt><tt> </tt><tt>(it</tt><tt> </tt><tt>goes</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>table</tt><tt> </tt><tt>for</tt><tt> </tt><tt>the</tt><tt> </tt><tt>class</tt><tt> </tt><tt>declaring</tt><tt> </tt><tt>the</tt><tt> </tt><tt>belongs_to</tt><tt> </tt><tt>association),</tt><tt> </tt><tt>but</tt><tt> </tt><tt>you</tt><tt> </tt><tt>should</tt><tt> </tt><tt>give</tt><tt> </tt><tt>some</tt><tt> </tt><tt>thought</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>actual</tt><tt> </tt><tt>meaning</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>data</tt><tt> </tt><tt>as</tt><tt> </tt><tt>well.</tt><tt> </tt><tt><strong>The</strong></tt><tt><strong> </strong></tt><tt><strong>has_one</strong></tt><tt><strong> </strong></tt><tt><strong>relationship</strong></tt><tt><strong> </strong></tt><tt><strong>says</strong></tt><tt><strong> </strong></tt><tt><strong>that</strong></tt><tt><strong> </strong></tt><tt><strong>one</strong></tt><tt><strong> </strong></tt><tt><strong>of</strong></tt><tt><strong> </strong></tt><tt><strong>something</strong></tt><tt><strong> </strong></tt><tt><strong>is</strong></tt><tt><strong> </strong></tt><tt><strong>yours</strong></tt><tt><strong> – </strong></tt><tt><strong>that</strong></tt><tt><strong> </strong></tt><tt><strong>is,</strong></tt><tt><strong> </strong></tt><tt><strong>that</strong></tt><tt><strong> </strong></tt><tt><strong>something</strong></tt><tt><strong> </strong></tt><tt><strong>points</strong></tt><tt><strong> </strong></tt><tt><strong>back</strong></tt><tt><strong> </strong></tt><tt><strong>to</strong></tt><tt><strong> </strong></tt><tt><strong>you</strong></tt><tt>.</tt><tt> </tt><tt>For</tt><tt> </tt><tt>example,</tt><tt> </tt><tt>it</tt><tt> </tt><tt>makes</tt><tt> </tt><tt>more</tt><tt> </tt><tt>sense</tt><tt> </tt><tt>to</tt><tt> </tt><tt>say</tt><tt> </tt><tt>that</tt><tt> </tt><tt>a</tt><tt> </tt><tt>supplier</tt><tt> </tt><tt>owns</tt><tt> </tt><tt>an</tt><tt> </tt><tt>account</tt><tt> </tt><tt>than</tt><tt> </tt><tt>that</tt><tt> </tt><tt>an</tt><tt> </tt><tt>account</tt><tt> </tt><tt>owns</tt><tt> </tt><tt>a</tt><tt> </tt><tt>supplier.</tt><tt> </tt><tt>This</tt><tt> </tt><tt>suggests</tt><tt> </tt><tt>that</tt><tt> </tt><tt>the</tt><tt> </tt><tt>correct</tt><tt> </tt><tt>relationships</tt><tt> </tt><tt>are</tt><tt> </tt><tt>like</tt><tt> </tt><tt>this:</tt>

class Supplier &lt; ActiveRecord::Base

has_one :account

end

&nbsp;

class Account &lt; ActiveRecord::Base

belongs_to :supplier

end

The corresponding migration might look like this:

class CreateSuppliers &lt; ActiveRecord::Migration

def change

create_table :suppliers do |t|

t.string :name

t.timestamps

end

&nbsp;

create_table :accounts do |t|

t.integer :supplier_id

t.string :account_number

t.timestamps

end

end

end

<em>Using</em><em> </em><tt><em>t.integer</em></tt><tt><em> </em></tt><tt><em>:supplier_id</em></tt><em> </em><em>makes</em><em> </em><em>the</em><em> </em><em>foreign</em><em> </em><em>key</em><em> </em><em>naming</em><em> </em><em>obvious</em><em> </em><em>and</em><em> </em><em>explicit.</em><em> </em><em>In</em><em> </em><em>current</em><em> </em><em>versions</em><em> </em><em>of</em><em> </em><em>Rails,</em><em> </em><em>you</em><em> </em><em>can</em><em> </em><em>abstract</em><em> </em><em>away</em><em> </em><em>this</em><em> </em><em>implementation</em><em> </em><em>detail</em><em> </em><em>by</em><em> </em><em>using</em><em> </em><tt><em>t.references</em></tt><tt><em> </em></tt><tt><em>:supplier</em></tt><em> </em><em>instead.</em><em>使用</em><tt><em>t.integer</em></tt><tt><em> </em></tt><tt><em>:supplier_id</em></tt><tt><em>使得外建命名明显和精确。在当前版本的</em></tt><tt><em>Rails</em></tt><tt><em>，你可以抽象掉这个实施细节通过使用</em></tt><tt><em>t.references</em></tt><tt><em> </em></tt><tt><em>:supplier</em></tt><tt><em>替代。</em></tt>
<h4><a name="choosing-between-has_many-through-and-ha"></a> 2.8 Choosing Between <tt>has_many</tt><tt> </tt><tt>:through</tt> and <tt>has_and_belongs_to_many</tt></h4>
Rails offers two different ways to declare a many-to-many relationship between models. The simpler way is to use <tt>has_and_belongs_to_many</tt>, which allows you to make the association directly:

Rails提供了两种不同的方式来声明一个模型间的many-to-many关系。比较简单的方式使用<tt>has_and_belongs_to_many</tt><tt>，它允许你直接的（创建）关系：</tt>

class Assembly &lt; ActiveRecord::Base

has_and_belongs_to_many :parts

end

&nbsp;

class Part &lt; ActiveRecord::Base

has_and_belongs_to_many :assemblies

end

The second way to declare a many-to-many relationship is to use <tt>has_many</tt><tt> </tt><tt>:through</tt>. This makes the association indirectly, through a join model:

第二种方式是声明一个many-to-many关系使用<tt>has_many</tt><tt> </tt><tt>:through</tt><tt>，它可以使得关系间接的，同加入一个模型：</tt>

class Assembly &lt; ActiveRecord::Base

has_many :manifests

has_many :parts, :through =&gt; :manifests

end

&nbsp;

class Manifest &lt; ActiveRecord::Base

belongs_to :assembly

belongs_to :part

end

&nbsp;

class Part &lt; ActiveRecord::Base

has_many :manifests

has_many :assemblies, :through =&gt; :manifests

end

The simplest rule of thumb is that you should set up a <tt>has_many</tt><tt> </tt><tt>:through</tt> relationship if you need to work with the relationship model as an independent entity实体.If you don’t need to do anything with the relationship model, it may be simpler to set up a <tt>has_and_belongs_to_many</tt> relationship (though you’ll need to remember to create the joining table in the database).最简单的使用规则是，如果你需要使用关系模型作为依赖实体来工作你应该设定一个<tt>has_many</tt><tt> </tt><tt>:through</tt><tt>关系</tt>。

<strong>You</strong><strong> </strong><strong>should</strong><strong> </strong><strong>use</strong><strong> </strong><tt><strong>has_many</strong></tt><tt><strong>:through</strong></tt><strong> </strong><strong>if</strong><strong> </strong><strong>you</strong><strong> </strong><strong>need</strong><strong> </strong><strong>validations,</strong><strong> </strong><strong>callbacks,</strong><strong> </strong><strong>or</strong><strong> </strong><strong>extra</strong><strong> </strong><strong>attributes</strong><strong> </strong><strong>on</strong><strong> </strong><strong>the</strong><strong> </strong><strong>join</strong><strong> </strong><strong>model.</strong>
<h4><a name="polymorphic-associations"></a>2.9 Polymorphic Associations多元关系</h4>
A slightly more advanced twist on associations is the <em>polymorphic</em><em> </em><em>association</em>.一个略微先进的关系枢纽是多元关系。With polymorphic associations, a model can belong to more than one other model, on a single association. 通过多态关系，（在单个关系中）一个模型可以属于超过一个其他的模型。For example, you might have a picture model that belongs to either an employee model or a product model. Here’s how this could be declared:例如，你可能有一个picture模型属于一个employee或者一个product模型。这是它们如何被定义的：

class Picture &lt; ActiveRecord::Base

belongs_to :imageable, :polymorphic =&gt; true

end

&nbsp;

class Employee &lt; ActiveRecord::Base

has_many :pictures, :as =&gt; :imageable

end

&nbsp;

class Product &lt; ActiveRecord::Base

has_many :pictures, :as =&gt; :imageable

end

You can think of a polymorphic <tt>belongs_to</tt> declaration as setting up an interface that any other model can use. From an instance of the <tt>Employee</tt> model, you can retrieve a collection of pictures: <tt>@employee.pictures</tt>.

你可以认为一个多元<tt>belongs_to</tt><tt>声明相当于设定一个其它任何模型可以使用的接口。来源于</tt><tt>Employee</tt><tt>模型的实例，你可以检索一个</tt><tt>pictures</tt><tt>的集合：</tt><tt>@employee.pictures</tt><tt>。</tt>

Similarly, you can retrieve <tt>@product.pictures</tt>.相近的，你可以检索<tt>@product.pictures</tt><tt>。</tt>

If you have an instance of the <tt>Picture</tt> model, you can get to its parent via <tt>@picture.imageable</tt>. To make this work, you need to declare both a foreign key column and a type column in the model that declares the polymorphic interface:如果你有一个Picture模型的实例，你可以得到它的父模型通过<tt>@picture.imageable</tt><tt>。要使这些工作，你需要声明一个外键字段和一个什么多元（关系）的接口的字段：</tt>

<tt>class</tt><tt> </tt><tt>CreatePictures</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Migration</tt>

<tt> </tt><tt>def</tt><tt> </tt><tt>change</tt>

<tt> </tt><tt>create_table</tt><tt> </tt><tt>:pictures</tt><tt> </tt><tt>do</tt><tt> </tt><tt>|t|</tt>

<tt> </tt><tt>t.string</tt><tt> </tt><tt>:name</tt>

<tt> </tt><tt>t.integer</tt><tt> </tt><tt>:imageable_id</tt>

<tt> </tt><tt>t.string</tt><tt> </tt><tt>:imageable_type</tt>

<tt> </tt><tt>t.timestamps</tt>

<tt> </tt><tt>end</tt>

<tt> </tt><tt>end</tt>

<tt>end</tt>

<tt>This</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>can</tt><tt> </tt><tt>be</tt><tt> </tt><tt>simplified</tt><tt> </tt><tt>by</tt><tt> </tt><tt>using</tt><tt> </tt><tt>the</tt><tt> </tt><tt>t.references</tt><tt> </tt><tt>form:</tt><tt>这个</tt><tt>migration</tt><tt>可以通过</tt><tt>t.references</tt><tt>形式简洁的（声明）：</tt>

<tt>class</tt><tt> </tt><tt>CreatePictures</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Migration</tt>

<tt> </tt><tt>def</tt><tt> </tt><tt>change</tt>

<tt> </tt><tt>create_table</tt><tt> </tt><tt>:pictures</tt><tt> </tt><tt>do</tt><tt> </tt><tt>|t|</tt>

<tt> </tt><tt>t.string</tt><tt> </tt><tt>:name</tt>

<tt> </tt><tt>t.references</tt><tt> </tt><tt>:imageable,</tt><tt> </tt><tt>:polymorphic</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt>

<tt> </tt><tt>t.timestamps</tt>

<tt> </tt><tt>end</tt>

<tt> </tt><tt>end</tt>

<tt>end</tt>
<h4><a name="self-joins"></a><tt>2.10</tt><tt> </tt><tt>Self</tt><tt> </tt><tt>Joins</tt></h4>
In designing a data model, you will sometimes find a model that should have a relation to itself. For example, you may want to store all employees in a single database model, but be able to trace relationships such as between manager and subordinates. This situation can be modeled with self-joining associations:在数据库设计中，有时你会发现一个模型具有一个（关联）到它自己的关系例如，你可能希望保存所有的employees在单个数据库模型中，但是能够跟踪关系比如在manager和subordinates之间。这个情况可以设定self-joining模型：

<tt>class</tt><tt> </tt><tt>Employee</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Base</tt>

<tt> </tt><tt>has_many</tt><tt> </tt><tt>:subordinates,</tt><tt> </tt><tt>:class_name</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>"Employee"</tt>

<tt> </tt><tt>belongs_to</tt><tt> </tt><tt>:manager,</tt><tt> </tt><tt>:class_name</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>"Employee",</tt>

<tt> </tt><tt>:foreign_key</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>"manager_id"</tt>

<tt>end</tt>

<tt>With</tt><tt> </tt><tt>this</tt><tt> </tt><tt>setup,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>retrieve</tt><tt> </tt><tt>@employee.subordinates</tt><tt> </tt><tt>and</tt><tt> </tt><tt>@employee.manager.</tt><tt>通过这个设定，你可以检索</tt><tt>@employee.subordinates</tt><tt> </tt><tt>and</tt><tt> </tt><tt>@employee.manager</tt><tt>。</tt>
<h3><a name="tips-tricks-and-warnings"></a><tt>3</tt><tt> </tt><tt>Tips</tt><tt>提示</tt><tt>,</tt><tt> </tt><tt>Tricks</tt><tt>窍门</tt><tt>,</tt><tt> </tt><tt>and</tt><tt> </tt><tt>Warnings</tt><tt>警告</tt></h3>
Here are a few things you should know to make efficient use of Active Record associations in your Rails applications:这里有一些事情你应该知道（它）使得在你的Rails应用程序使用Active Record关系变得高效：
<ul>
	<li><tt>Controlling</tt><tt>caching</tt><tt>控制缓存</tt></li>
	<li>Avoidingnamecollisions避免名称碰撞</li>
	<li>Updating the schema 更新结构</li>
	<li>Controlling association scope 控制关系范围</li>
</ul>
<h4><a name="controlling-caching"></a><tt>3.1</tt><tt> </tt><tt>Controlling</tt><tt> </tt><tt>Caching</tt></h4>
<a name="result_box"></a>All of the association methods are built around caching, which keeps the result of the most recent query available for further operations. The cache is even shared across methods. For example:所有的关系方法都创建在缓存周围，这使的最近的查询，可用于进一步的操作的结果。

customer.orders # retrieves orders from the database

customer.orders.size # uses the cached copy of orders

customer.orders.empty? # uses the cached copy of orders

But what if you want to reload the cache, because data might have been changed by some other part of the application? Just pass <tt>true</tt> to the association call:但是如果你想重载cache，因为数据可能被应用程序的其他部分改变？仅仅通过添加投入额到关系调用：

customer.orders # retrieves orders from the database

customer.orders.size # uses the cached copy of orders

customer.orders(true).empty? # discards the cached copy of orders

# and goes back to the database
<h4><a name="avoiding-name-collisions"></a><tt>3.2</tt><tt> </tt><tt>Avoiding</tt><tt> </tt><tt>Name</tt><tt> </tt><tt>Collisions</tt><tt>避免名称碰撞</tt></h4>
<tt>You</tt><tt> </tt><tt>are</tt><tt> </tt><tt>not</tt><tt> </tt><tt>free</tt><tt> </tt><tt>to</tt><tt> </tt><tt>use</tt><tt> </tt><tt>just</tt><tt> </tt><tt>any</tt><tt> </tt><tt>name</tt><tt> </tt><tt>for</tt><tt> </tt><tt>your</tt><tt> </tt><tt>associations.</tt><tt> </tt><tt>Because</tt><tt> </tt><tt>creating</tt><tt> </tt><tt>an</tt><tt> </tt><tt>association</tt><tt> </tt><tt>adds</tt><tt> </tt><tt>a</tt><tt> </tt><tt>method</tt><tt> </tt><tt>with</tt><tt> </tt><tt>that</tt><tt> </tt><tt>name</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>model,</tt><tt> </tt><tt>it</tt><tt> </tt><tt>is</tt><tt> </tt><tt>a</tt><tt> </tt><tt>bad</tt><tt> </tt><tt>idea</tt><tt> </tt><tt>to</tt><tt> </tt><tt>give</tt><tt> </tt><tt>an</tt><tt> </tt><tt>association</tt><tt> </tt><tt>a</tt><tt> </tt><tt>name</tt><tt> </tt><tt>that</tt><tt> </tt><tt>is</tt><tt> </tt><tt>already</tt><tt> </tt><tt>used</tt><tt> </tt><tt>for</tt><tt> </tt><tt>an</tt><tt> </tt><tt>instance</tt><tt> </tt><tt>method</tt><tt> </tt><tt>of</tt><tt> </tt><tt>ActiveRecord::Base.</tt><tt> </tt><tt>The</tt><tt> </tt><tt>association</tt><tt> </tt><tt>method</tt><tt> </tt><tt>would</tt><tt> </tt><tt>override</tt><tt> </tt><tt>the</tt><tt> </tt><tt>base</tt><tt> </tt><tt>method</tt><tt> </tt><tt>and</tt><tt> </tt><tt>break</tt><tt> </tt><tt>things.</tt><tt> </tt><tt>For</tt><tt> </tt><tt>instance,</tt><tt> </tt><tt>attributes</tt><tt> </tt><tt>or</tt><tt> </tt><tt>connection</tt><tt> </tt><tt>are</tt><tt> </tt><tt>bad</tt><tt> </tt><tt>names</tt><tt> </tt><tt>for</tt><tt> </tt><tt>associations.</tt>

<tt>你不能不限制的给你的关系使用任何名字。因为创建一个关系添加一个方法和你命名的名字到模型，给一个关系取一个在</tt><tt>ActiveRecord::Base</tt><tt>实例方法中已经使用了的方法不是个好主意。这个关系方法将会覆盖原有方法和打断事情。比如实例，</tt><tt>attributes</tt><tt> </tt><tt>or</tt><tt> </tt><tt>connection</tt><tt>是关系的坏名称。</tt>
<h4><a name="updating-the-schema"></a><tt>3.3</tt><tt> </tt><tt>Updating</tt><tt> </tt><tt>the</tt><tt> </tt><tt>Schema</tt></h4>
Associations are extremely useful, but they are not magic. You are responsible for maintaining your database schema to match your associations. In practice, this means two things, depending on what sort of associations you are creating. For <tt>belongs_to</tt> associations you need to create foreign keys, and for <tt>has_and_belongs_to_many</tt> associations you need to create the appropriate join table.

<tt>关系相当有用，但是它们不是魔法。你有责任注意你的数据库结构和你的关系的匹配。在实际中，这意味这两件事，依赖于你创建的何种关系。对于</tt><tt>belongs_to</tt><tt>关系你需要创建外键，对应</tt><tt>has_and_belongs_to_many</tt><tt>关系你需要创建适当的（关系）加入表中。</tt>
<h5><a name="creating-foreign-keys-for-belongs_to-ass"></a> <tt>3.3.1</tt><tt> </tt><tt>Creating</tt><tt> </tt><tt>Foreign</tt><tt> </tt><tt>Keys</tt><tt> </tt><tt>for</tt><tt> </tt><tt>belongs_to</tt><tt> </tt><tt>Associations</tt></h5>
When you declare a <tt>belongs_to</tt> association, you need to create foreign keys as appropriate. For example, consider this model:当你声明一个<tt>belongs_to</tt><tt>关系，你需要创建一个外键（作为合适的方式来更新数据结构）。例如，思考如下模型：</tt>

<tt>class</tt><tt> </tt><tt>Order</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Base</tt>

<tt> </tt><tt>belongs_to</tt><tt> </tt><tt>:customer</tt>

<tt>end</tt>

<tt>This</tt><tt> </tt><tt>declaration</tt><tt> </tt><tt>needs</tt><tt> </tt><tt>to</tt><tt> </tt><tt>be</tt><tt> </tt><tt>backed</tt><tt> </tt><tt>up</tt><tt> </tt><tt>by</tt><tt> </tt><tt>the</tt><tt> </tt><tt>proper</tt><tt> </tt><tt>foreign</tt><tt> </tt><tt>key</tt><tt> </tt><tt>declaration</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>orders</tt><tt> </tt><tt>table:</tt><tt>这个声明需要通过在生产者表单声明适当的外键备份。</tt>

<tt>class</tt><tt> </tt><tt>CreateOrders</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Migration</tt>

<tt> </tt><tt>def</tt><tt> </tt><tt>change</tt>

<tt> </tt><tt>create_table</tt><tt> </tt><tt>:orders</tt><tt> </tt><tt>do</tt><tt> </tt><tt>|t|</tt>

<tt> </tt><tt>t.datetime</tt><tt> </tt><tt>:order_date</tt>

<tt> </tt><tt>t.string</tt><tt> </tt><tt>:order_number</tt>

<tt> </tt><tt>t.integer</tt><tt> </tt><tt>:customer_id</tt>

<tt> </tt><tt>end</tt>

<tt> </tt><tt>end</tt>

<tt>end</tt>

If you create an association some time after you build the underlying底层model, you need to remember to create an <tt>add_column</tt> migration to provide the necessary foreign key.<strong>有时你创建的关系在你创建的底层模型之后，你需要记住创建一个</strong><strong>add_column</strong><strong> </strong><strong>migration</strong><strong>提供必须的外键。</strong>

&nbsp;

&nbsp;
<h5><a name="creating-join-tables-for-has_and_belongs"></a> 3.3.2 Creating Join Tables for <tt>has_and_belongs_to_many</tt> Associations</h5>
If you create a <tt>has_and_belongs_to_many</tt> association, you need to explicitly create the joining table. Unless the name of the join table is explicitly specified by using the <tt>:join_table</tt> option, Active Record creates the name by using the lexical order of the class names. So a join between customer and order models will give the default join table name of “customers_orders” because “c” outranks “o” in lexical ordering.

如果你创建了一个<tt>has_and_belongs_to_many</tt><tt>关系，你需要准确的创建</tt><tt>joining</tt><tt>表单。除非</tt><tt>join</tt><tt>表单使用</tt><tt>:join_table</tt><tt>选项准确的指定，（否则）</tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt>就会使用类名提供的的词汇创建表单名称。因此一个在</tt><tt>customer</tt><tt>和</tt><tt>order</tt><tt>模型之间</tt><tt>join</tt><tt>（的表单）将会默认插入表名</tt><tt>“</tt><tt>customers_orders</tt><tt>”</tt><tt>因为</tt><tt>‘</tt><tt>c</tt><tt>’</tt><tt>在</tt><tt>‘</tt><tt>o</tt><tt>’</tt><tt>前面在提供的词汇中。</tt>

The precedence优先between model names is calculated using the <tt><strong>&lt;</strong></tt><strong> </strong><strong>operator</strong><strong> </strong><strong>for</strong><strong> </strong><tt><strong>String</strong></tt>. This means that if the strings are of different lengths, and the strings are equal when compared up to the shortest length, then the longer string is considered of higher lexical precedence than the shorter one. For example, one would expect the tables “<strong>paper</strong><strong>_</strong>boxes” and “<strong>paper</strong><strong>s</strong>” to generate a join table name of “papers_paper_boxes” because of the length of the name “paper_boxes”, but it in fact generates a join table name of “paper_boxes_papers” (because the underscore ‘_’ is lexicographically字典<em>less</em> than ‘s’ in common encodings).

Whatever the name, you must manually手动generate the join table with an appropriate migration. For example, consider these associations:

class Assembly &lt; ActiveRecord::Base

has_and_belongs_to_many :parts

end

&nbsp;

class Part &lt; ActiveRecord::Base

has_and_belongs_to_many :assemblies

end

These need to be backed up by a migration to create the <tt>assemblies_parts</tt> table. This table should be created without a primary key:

class CreateAssemblyPartJoinTable &lt; ActiveRecord::Migration

def change

create_table :assemblies_parts, :<strong>id</strong><strong> </strong><strong>=&gt;</strong><strong> </strong><strong>false</strong> do |t|

t.integer :assembly_id

t.integer :part_id

end

end

end

We pass <tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>false</tt> to <tt>create_table</tt> because that table does not represent表示a model. That’s required for the association to work properly. If you observe观察any strange behavior in a <tt>has_and_belongs_to_many</tt> association like mangled错误models IDs, or exceptions about conflicting IDs chances are you forgot that bit.
<h4><a name="controlling-association-scope"></a>3.4 Controlling Association Scope控制关系范围</h4>
By default, associations look for objects only within the current module’s scope. This can be important when you declare Active Record models within a module. For example:默认情况，（通过）关系查找对象仅仅在当前模型范围中。这很重要点你在一个module中声明Active Record models例如：

module MyApplication

module Business

class Supplier &lt; ActiveRecord::Base

has_one :account

end

&nbsp;

class Account &lt; ActiveRecord::Base

belongs_to :supplier

end

end

end

This will work fine, because both the <tt>Supplier</tt> and the <tt>Account</tt> class are defined within the same scope.<strong> </strong><strong>But</strong><strong> </strong><strong>the</strong><strong> </strong><strong>following</strong><strong> </strong><strong>will</strong><strong> </strong><em><strong>not</strong></em><strong> </strong><strong>work,</strong><strong> </strong><strong>because</strong><strong> </strong><tt><strong>Supplier</strong></tt><strong> </strong><strong>and</strong><strong> </strong><tt><strong>Account</strong></tt><strong> </strong><strong>are</strong><strong> </strong><strong>defined</strong><strong> </strong><strong>in</strong><strong> </strong><strong>different</strong><strong> </strong><strong>scopes:</strong>

module MyApplication

module Business

class Supplier &lt; ActiveRecord::Base

has_one :account

end

end

&nbsp;

module Billing

class Account &lt; ActiveRecord::Base

belongs_to :supplier

end

end

end

<strong>To</strong><strong> </strong><strong>associate</strong><strong> </strong><strong>a</strong><strong> </strong><strong>model</strong><strong> </strong><strong>with</strong><strong> </strong><strong>a</strong><strong> </strong><strong>model</strong><strong> </strong><strong>in</strong><strong> </strong><strong>a</strong><strong> </strong><strong>different</strong><strong> </strong><strong>namespace,</strong><strong> </strong><strong>you</strong><strong> </strong><strong>must</strong><strong> </strong><strong>specify</strong><strong> </strong><strong>the</strong><strong> </strong><strong>complete</strong><strong> </strong><strong>class</strong><strong> </strong><strong>name</strong><strong> </strong><strong>in</strong><strong> </strong><strong>your</strong><strong> </strong><strong>association</strong><strong> </strong><strong>declaration</strong>:

module MyApplication

module Business

class Supplier &lt; ActiveRecord::Base

has_one :account,

:class_name =&gt; "MyApplication::Billing::Account"

end

end

&nbsp;

module Billing

class Account &lt; ActiveRecord::Base

belongs_to :supplier,

:class_name =&gt; "MyApplication::Business::Supplier"

end

end

end
<h3><a name="detailed-association-reference"></a>4 Detailed Association Reference具体关系参考</h3>
The following sections give the details of each type of association, including the methods that they add and the options that you can use when declaring an association.接下来的部分给出了每种关系的具体的介绍，包含当你声明一个关系时可以使用的（这些关系）添加的方法和选项。
<h5><a name="methods-added-by-belongs_to"></a>4.1.1 Methods Added by <tt>belongs_to</tt></h5>
When you declare a <tt>belongs_to</tt> association, the declaring class automatically gains受益four methods related to the association:
<ul>
	<li><em>association</em><tt>(force_reload</tt><tt> </tt><tt>=</tt><tt> </tt><tt>false)</tt><em> </em></li>
	<li><em>association</em><tt>=(associate)</tt></li>
	<li><tt>build_</tt><em>association</em><tt>(attributes</tt><tt> </tt><tt>=</tt><tt> </tt><tt>{})</tt></li>
	<li><tt>create_</tt><em>association</em><tt>(attributes</tt><tt> </tt><tt>=</tt><tt> </tt><tt>{})</tt></li>
</ul>
In all of these methods, <em>association</em> is replaced with the symbol passed as the first argument to <tt>belongs_to</tt>. For example, given the declaration:

class Order &lt; ActiveRecord::Base

belongs_to :customer

end

Each instance of the order model生产者模型will have these methods:

<code>customer</code>

<code>customer=</code>

<code>build_customer</code>

<code>create_customer</code>

&nbsp;

When initializing a new <tt>has_one</tt> or <tt>belongs_to</tt> association you must use the <tt>build_</tt> prefix构造前缀to build the association, rather than the <tt>association.</tt><tt> </tt><tt>build</tt> method that would be used for <tt>has_many</tt> or <tt>has_and_belongs_to_many</tt> associations. To create one, use the <tt>create_</tt> prefix新建前缀.
<h6><a name="belongs_to-association"></a>4.1.1.1 <em>association</em><tt>(force_reload</tt><tt> </tt><tt>=</tt><tt> </tt><tt>false)</tt></h6>
<strong>The</strong><strong> </strong><em><strong>association</strong></em><strong> </strong><strong>method</strong><strong> </strong><strong>returns</strong><strong> </strong><strong>the</strong><strong> </strong><strong>associated</strong><strong> </strong><strong>object,</strong> if any. If no associated object is found, it <strong>returns</strong><strong> </strong><tt><strong>nil</strong></tt>.

@customer = @order.customer

If the associated object has already been retrieved检索from the database for this object, the cached version will be returned. <strong>To</strong><strong> </strong><strong>override</strong><strong> </strong><strong>this</strong><strong> </strong><strong>behavior</strong><strong> </strong><strong>(and</strong><strong> </strong><strong>force</strong><strong> </strong><strong>a</strong><strong> </strong><strong>database</strong><strong> </strong><strong>read),</strong><strong> </strong><strong>pass</strong><strong> </strong><tt><strong>true</strong></tt><strong> </strong><strong>as</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>force_reload</strong></tt><strong> </strong><strong>argument.</strong>
<h6><a name="belongs_to-association_equal"></a>4.1.1.2 <em>association</em><tt>=(associate)</tt></h6>
<strong>The</strong><strong> </strong><em><strong>association</strong></em><tt><strong>=</strong></tt><strong> </strong><strong>method</strong><strong> </strong><strong>assigns</strong><strong> </strong><strong>an</strong><strong> </strong><strong>associated</strong><strong> </strong><strong>object</strong><strong> </strong><strong>to</strong><strong> </strong><strong>this</strong><strong> </strong><strong>object.</strong> Behind the scenes, this means <strong>extracting</strong><strong> </strong><strong>the</strong><strong> </strong><strong>primary</strong><strong> </strong><strong>key</strong><strong> </strong><strong>from</strong><strong> </strong><strong>the</strong><strong> </strong><strong>associate</strong><strong> </strong><strong>object</strong><strong> </strong><strong>and</strong><strong> </strong><strong>setting</strong><strong> </strong><strong>this</strong><strong> </strong><strong>object</strong><strong>’</strong><strong>s</strong><strong> </strong><strong>foreign</strong><strong> </strong><strong>key</strong><strong> </strong><strong>to</strong><strong> </strong><strong>the</strong><strong> </strong><strong>same</strong><strong> </strong><strong>value.</strong>

@order.customer = @customer
<h6><a name="belongs_to-build_association"></a>4.1.1.3 <tt>build_</tt><em>association</em><tt>(attributes</tt><tt> </tt><tt>=</tt><tt> </tt><tt>{})</tt></h6>
The <tt>build_</tt><em>association</em> method returns a new object of the associated type. This object will be instantiated from the passed attributes, and the link through this object’s foreign key will be set, but the associated object will <em>not</em> yet be saved.

@customer = @order.build_customer(:customer_number =&gt; 123,

:customer_name =&gt; "John Doe")
<h6><a name="belongs_to-create_association"></a>4.1.1.4 <tt>create_</tt><em>association</em><tt>(attributes</tt><tt> </tt><tt>=</tt><tt> </tt><tt>{})</tt></h6>
The <tt>create_</tt><em>association</em> method returns a new object of the associated type. This object will be instantiated from the passed attributes, and the link through this object’s foreign key will be set. In addition, the associated object <em>will</em> be saved (assuming that it passes any validations).

@customer = @order.create_customer(:customer_number =&gt; 123,

:customer_name =&gt; "John Doe")
<h5><a name="options-for-belongs_to"></a>4.1.2 Options for <tt>belongs_to</tt></h5>
In many situations, you can use the default behavior of <tt>belongs_to</tt> without any customization. But despite尽管Rails’ emphasis强调of convention公约over customization, you can alter that behavior in a number of ways. This section covers the options that you can pass when you create a <tt>belongs_to</tt> association. For example, an association with several options might look like this:

class Order &lt; ActiveRecord::Base

belongs_to :customer, :counter_cache =&gt; true,

:conditions =&gt; "active = 1"

end

The <tt>belongs_to</tt> association supports these options:
<ul>
	<li><tt>:autosave</tt></li>
	<li><tt>:class_name</tt></li>
	<li><tt>:conditions</tt> 条件</li>
	<li><tt>:counter_cache</tt></li>
	<li><tt>:dependent</tt></li>
	<li><tt>:foreign_key</tt></li>
	<li><tt>:include</tt></li>
	<li><tt>:polymorphic</tt> 多元</li>
	<li><tt>:readonly</tt></li>
	<li><tt>:select</tt></li>
	<li><tt>:touch</tt></li>
	<li><tt>:validate</tt></li>
</ul>
<h6><a name="belongs_to-autosave"></a>4.1.2.1 <tt>:autosave</tt></h6>
If you set the <tt>:autosave</tt> option to <tt>true</tt>, Rails will save any loaded members and destroy members that are marked for destruction whenever you save the parent object.
<h6><a name="belongs_to-class_name"></a>4.1.2.2 <tt>:class_name</tt></h6>
If the name of the other model cannot be derived from the association name, you can use the <tt>:class_name</tt> option to supply the model name. For example, if an order belongs to a customer, but the actual name of the model containing customers is <tt>Patron</tt>, you’d set things up this way:
<h6><a name="belongs_to-conditions"></a>4.1.2.3 <tt>:conditions</tt></h6>
The <tt>:conditions</tt> option lets you specify the conditions that the associated object must meet (in the syntax used by an SQL <tt>WHERE</tt> clause).

class Order &lt; ActiveRecord::Base

belongs_to :customer, :conditions =&gt; "active = 1"

end
<h6><a name="belongs_to-counter_cache"></a>4.1.2.4 <tt>:counter_cache</tt></h6>
The <tt>:counter_cache</tt> option can be used to make finding the number of belonging objects more efficient. Consider these models:

class Order &lt; ActiveRecord::Base

belongs_to :customer

end

class Customer &lt; ActiveRecord::Base

has_many :orders

end

With these declarations, asking for the value of <tt>@customer.orders.size</tt> requires making a call to the database to perform a <tt>COUNT(*)</tt> query. To avoid this call, you can add a counter cache to the <em>belonging</em> model:

class Order &lt; ActiveRecord::Base

belongs_to :customer, :counter_cache =&gt; true

end

class Customer &lt; ActiveRecord::Base

has_many :orders

end

<strong>With</strong><strong> </strong><strong>this</strong><strong> </strong><strong>declaration,</strong><strong> </strong><strong>Rails</strong><strong> </strong><strong>will</strong><strong> </strong><strong>keep</strong><strong> </strong><strong>the</strong><strong> </strong><strong>cache</strong><strong> </strong><strong>value</strong><strong> </strong><strong>up</strong><strong> </strong><strong>to</strong><strong> </strong><strong>date,</strong><strong> </strong><strong>and</strong><strong> </strong><strong>then</strong><strong> </strong><strong>return</strong><strong> </strong><strong>that</strong><strong> </strong><strong>value</strong><strong> </strong><strong>in</strong><strong> </strong><strong>response</strong><strong> </strong><strong>to</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>size</strong></tt><strong> </strong><strong>method.</strong>

Although the <tt>:counter_cache</tt> option is specified on the model that includes the <tt>belongs_to</tt> declaration, the actual column must be added to the <em>associated</em> model. In the case above, you would need to add a column named <tt>orders_count</tt> to the <tt>Customer</tt> model. You can override the default column name if you need to:

class Order &lt; ActiveRecord::Base

belongs_to :customer, :counter_cache =&gt; :count_of_orders

end

class Customer &lt; ActiveRecord::Base

has_many :orders

end

Counter cache columns are added to the containing model’s list of read-only attributes through <tt>attr_readonly</tt>.
<h6><a name="belongs_to-dependent"></a>4.1.2.5 <tt>:dependent</tt></h6>
<strong>If</strong><strong> </strong><strong>you</strong><strong> </strong><strong>set</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>:dependent</strong></tt><strong> </strong><strong>option</strong><strong> </strong><strong>to</strong><strong> </strong><tt><strong>:destroy</strong></tt><strong>,</strong><strong> </strong><strong>then</strong><strong> </strong><strong>deleting</strong><strong> </strong><strong>this</strong><strong> </strong><strong>object</strong><strong> </strong><strong>will</strong><strong> </strong><strong>call</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>destroy</strong></tt><strong> </strong><strong>method</strong><strong> </strong><strong>on</strong><strong> </strong><strong>the</strong><strong> </strong><strong>associated</strong><strong> </strong><strong>object</strong><strong> </strong><strong>to</strong><strong> </strong><strong>delete</strong><strong> </strong><strong>that</strong><strong> </strong><strong>object.</strong><strong> </strong>If <strong>you</strong><strong> </strong><strong>set</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>:dependent</strong></tt><strong> </strong><strong>option</strong><strong> </strong><strong>to</strong><strong> </strong><tt><strong>:delete</strong></tt><strong>,</strong><strong> </strong><strong>then</strong><strong> </strong><strong>deleting</strong><strong> </strong><strong>this</strong><strong> </strong><strong>object</strong><strong> </strong><strong>will</strong><strong> </strong><strong>delete</strong><strong> </strong><strong>the</strong><strong> </strong><strong>associated</strong><strong> </strong><strong>object</strong><strong> </strong><em><strong>without</strong></em><strong> </strong><strong>calling</strong><strong> </strong><strong>its</strong><strong> </strong><tt><strong>destroy</strong></tt><strong> </strong><strong>method</strong>.

You should not specify this option on a <tt>belongs_to</tt> association that is connected with a <tt>has_many</tt> association on the other class. Doing so can lead to orphaned records in your database.对应多个的话用了dependent的话删除一个和他的外键的话其他关联就失效了
<h6><a name="belongs_to-foreign_key"></a>4.1.2.6 <tt>:foreign_key</tt></h6>
By convention约定, Rails guesses that the column used to hold the foreign key on this model is the name of the association with the suffix <tt>_id</tt> added. The <tt>:foreign_key</tt> option lets you set the name of the foreign key directly:

class Order &lt; ActiveRecord::Base

belongs_to :customer, :class_name =&gt; "Patron",

:foreign_key =&gt; "patron_id"

end

In any case, Rails will not create foreign key columns for you. You need to explicitly define them as part of your migrations.
<h6><a name="belongs_to-includes"></a>4.1.2.7 <tt>:include</tt></h6>
You can use the <tt>:include</tt> option to specify second-order associations that should be eager-loaded when this association is used. For example, consider these models:

class LineItem &lt; ActiveRecord::Base

belongs_to :order

end

&nbsp;

class Order &lt; ActiveRecord::Base

belongs_to :customer

has_many :line_items

end

&nbsp;

class Customer &lt; ActiveRecord::Base

has_many :orders

end

If you frequently retrieve customers directly from line items (<tt>@line_item.order.customer</tt>), then you can make your code somewhat more efficient by including customers in the association from line items to orders:如果你频繁的从line_item（<tt>@line_item.order.customer</tt>）直接检索，那么你可以在line_item关系中包含customers，使得你的代码变得更加有效率：

class LineItem &lt; ActiveRecord::Base

belongs_to :order, :include =&gt; :customer

end

&nbsp;

class Order &lt; ActiveRecord::Base

belongs_to :customer

has_many :line_items

end

&nbsp;

class Customer &lt; ActiveRecord::Base

has_many :orders

end

There’s no need to use <tt>:include</tt> for immediate立即（直接）associations – that is, if you have <tt>Order</tt><tt> </tt><tt>belongs_to</tt><tt> </tt><tt>:customer</tt>, then the customer is eager-loaded automatically when it’s needed.
<h6><a name="belongs_to-polymorphic"></a>4.1.2.8 <tt>:polymorphic</tt></h6>
Passing <tt>true</tt> to the <tt>:polymorphic</tt> option indicates that this is a polymorphic association. Polymorphic associations were discussed in detail <a href="http://guides.rubyonrails.org/association_basics.html#polymorphic-associations">earlierinthisguide</a>.
<h6><a name="belongs_to-readonly"></a>4.1.2.9 <tt>:readonly</tt></h6>
If you set the <tt>:readonly</tt> option to <tt>true</tt>, then the associated object will be read-only when retrieved via the association.
<h6><a name="belongs_to-select"></a>4.1.2.10 <tt>:select</tt></h6>
The <tt>:select</tt> option lets you override the SQL <tt>SELECT</tt> clause that is used to retrieve data about the associated object. By default, Rails retrieves all columns.

If you set the <tt>:select</tt> option on a <tt>belongs_to</tt> association, you should also set the <tt>foreign_key</tt> option to guarantee保证the correct results.
<h6><a name="belongs_to-touch"></a>4.1.2.11 <tt>:touch</tt></h6>
<strong>If</strong><strong> </strong><strong>you</strong><strong> </strong><strong>set</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>:touch</strong></tt><strong> </strong><strong>option</strong><strong> </strong><strong>to</strong><strong> </strong><tt><strong>:true</strong></tt><strong>,</strong><strong> </strong><strong>then</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>updated_at</strong></tt><strong> </strong><strong>or</strong><strong> </strong><tt><strong>updated_on</strong></tt><strong> </strong><strong>timestamp</strong><strong> </strong><strong>on</strong><strong> </strong><strong>the</strong><strong> </strong><strong>associated</strong><strong> </strong><strong>object</strong><strong> </strong><strong>will</strong><strong> </strong><strong>be</strong><strong> </strong><strong>set</strong><strong> </strong><strong>to</strong><strong> </strong><strong>the</strong><strong> </strong><strong>current</strong><strong> </strong><strong>time</strong><strong> </strong><strong>whenever</strong><strong> </strong><strong>this</strong><strong> </strong><strong>object</strong><strong> </strong><strong>is</strong><strong> </strong><strong>saved</strong><strong> </strong><strong>or</strong><strong> </strong><strong>destroyed</strong>:

class Order &lt; ActiveRecord::Base

belongs_to :customer, :touch =&gt; true

end

&nbsp;

class Customer &lt; ActiveRecord::Base

has_many :orders

end

In this case, saving or destroying an order will update the timestamp on the associated customer. You can also specify a particular timestamp attribute to update:

class Order &lt; ActiveRecord::Base

belongs_to :customer, :touch =&gt; :orders_updated_at

end
<h6><a name="belongs_to-validate"></a>4.1.2.12 <tt>:validate</tt></h6>
<strong>If</strong><strong> </strong><strong>you</strong><strong> </strong><strong>set</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>:validate</strong></tt><strong> </strong><strong>option</strong><strong> </strong><strong>to</strong><strong> </strong><tt><strong>true</strong></tt><strong>,</strong><strong> </strong><strong>then</strong><strong> </strong><strong>associated</strong><strong> </strong><strong>objects</strong><strong> </strong><strong>will</strong><strong> </strong><strong>be</strong><strong> </strong><strong>validated</strong><strong> </strong><strong>whenever</strong><strong> </strong><strong>you</strong><strong> </strong><strong>save</strong><strong> </strong><strong>this</strong><strong> </strong><strong>object.</strong> By default, this is <tt>false</tt>: associated objects will not be validated when this object is saved.
<h5><a name="belongs_to-how_to_know_whether_theres_an"></a> 4.1.3 How To Know Whether There’s an Associated Object?怎样知道这里是否有Associated 对象?</h5>
To know whether there’s and associated object just check <em>association</em><tt>.nil?</tt>:

if @order.customer.nil?

@msg = "No customer found for this order"

end
<h5><a name="belongs_to-when_are_objects_saved"></a>4.1.4 When are Objects Saved?</h5>
<strong>Assigning</strong><strong> </strong><strong>an</strong><strong> </strong><strong>object</strong><strong> </strong><strong>to</strong><strong> </strong><strong>a</strong><strong> </strong><tt><strong>belongs_to</strong></tt><strong> </strong><strong>association</strong><strong> </strong><strong>does</strong><strong> </strong><em><strong>not</strong></em><strong> </strong><strong>automatically</strong><strong> </strong><strong>save</strong><strong> </strong><strong>the</strong><strong> </strong><strong>object.</strong> It does not save the associated object either.
<h4><a name="has_one-association-reference"></a>4.2 <tt>has_one</tt> Association Reference <tt>has_one</tt><tt>关系</tt>参考</h4>
The <tt>has_one</tt> association creates a one-to-one match with another model. In database terms, this association says that the other class contains the foreign key. If this class contains the foreign key, then you should use <tt>belongs_to</tt> instead.
<h5><a name="methods-added-by-has_one"></a>4.2.1 Methods Added by <tt>has_one</tt></h5>
When you declare a <tt>has_one</tt> association, the declaring class automatically gains four methods related to the association:
<ul>
	<li><tt>association</tt><tt>(force_reload</tt><tt> </tt><tt>=</tt><tt> </tt><tt>false)</tt><em> </em></li>
	<li><em>association</em><tt>=(associate)</tt></li>
	<li><tt>build_</tt><em>association</em><tt>(attributes</tt><tt> </tt><tt>=</tt><tt> </tt><tt>{})</tt></li>
	<li><tt>create_</tt><em>association</em><tt>(attributes</tt><tt> </tt><tt>=</tt><tt> </tt><tt>{})</tt></li>
</ul>
In all of these methods, <em>association</em> is replaced with the symbol passed as the first argument to <tt>has_one</tt>. For example, given the declaration:

class Supplier &lt; ActiveRecord::Base

has_one :account

end

Each instance of the <tt>Supplier</tt> model will have these methods:每一个Supplier模型的实例将会具有如下方法：

<code>account</code>

<code>account=</code>

<code>build_account</code>

<code>create_account</code>

When initializing a new <tt>has_one</tt> or <tt>belongs_to</tt> association you must use the <tt>build_</tt> prefix to build the association, rather than the <tt>association.build</tt> method that would be used for <tt>has_many</tt> or <tt>has_and_belongs_to_many</tt> associations. To create one, use the <tt>create_</tt> prefix.
<h6><a name="has_one-association"></a>4.2.1.1 <em>association</em><tt>(force_reload</tt><tt> </tt><tt>=</tt><tt> </tt><tt>false)</tt></h6>
The <em>association</em> method returns the associated object, if any. If no associated object is found, it returns <tt>nil</tt>.

@account = @supplier.account

If the associated object has already been retrieved from the database for this object, the cached version will be returned. To override this behavior (and force a database read), pass <tt>true</tt> as the <tt>force_reload</tt> argument.
<h6><a name="has_one-association_equal"></a>4.2.1.2 <em>association</em><tt>=(associate)</tt></h6>
The <em>association</em><tt>=</tt> method assigns an associated object to this object. Behind the scenes, this means extracting the primary key from this object and setting the associate object’s foreign key to the same value.

@supplier.account = @account
<h6><a name="has_one-build_association"></a>4.2.1.3 <tt>build_</tt><em>association</em><tt>(attributes</tt><tt> </tt><tt>=</tt><tt> </tt><tt>{})</tt></h6>
The <tt>build_</tt><em>association</em> method returns a new object of the associated type. <strong>This</strong><strong> </strong><strong>object</strong><strong> </strong><strong>will</strong><strong> </strong><strong>be</strong><strong> </strong><strong>instantiated</strong><strong> </strong><strong>from</strong><strong> </strong><strong>the</strong><strong> </strong><strong>passed</strong><strong> </strong><strong>attributes,</strong><strong> </strong><strong>and</strong><strong> </strong><strong>the</strong><strong> </strong><strong>link</strong><strong> </strong><strong>through</strong><strong> </strong><strong>its</strong><strong> </strong><strong>foreign</strong><strong> </strong><strong>key</strong><strong> </strong><strong>will</strong><strong> </strong><strong>be</strong><strong> </strong><strong>set,</strong><strong> </strong><strong>but</strong><strong> </strong><strong>the</strong><strong> </strong><strong>associated</strong><strong> </strong><strong>object</strong><strong> </strong><strong>will</strong><strong> </strong><em><strong>not</strong></em><strong>yet</strong><strong>be</strong><strong>saved</strong><strong>.</strong>

@account = @supplier.build_account(:terms =&gt; "Net 30")
<h6><a name="has_one-create_association"></a>4.2.1.4 <tt>create_</tt><em>association</em><tt>(attributes</tt><tt> </tt><tt>=</tt><tt> </tt><tt>{})</tt></h6>
The <tt>create_</tt><em>association</em> method returns a new object of the associated type. This object will be instantiated from the passed attributes, and the link through its foreign key will be set. In addition此外, the associated object <em><strong>will</strong></em><strong>be</strong><strong>saved</strong><strong>(assuming</strong><strong>that</strong><strong>it</strong><strong>passes</strong><strong>any</strong><strong>validations)</strong>.

@account = @supplier.create_account(:terms =&gt; "Net 30")
<h5><a name="options-for-has_one"></a>4.2.2 Options for <tt>has_one</tt></h5>
In many situations, you can use the default behavior of <tt>has_one</tt> without any customization. But despite Rails’ emphasis of convention over customization, you can alter that behavior in a number of ways. This section covers the options that you can pass when you create a <tt>has_one</tt> association. For example, an association with several options might look like this:

class Supplier &lt; ActiveRecord::Base

has_one :account, :class_name =&gt; "Billing", :dependent =&gt; :nullify

end

The <tt>has_one</tt> association supports these options:
<ul>
	<li><tt>:as</tt></li>
	<li><tt>:autosave</tt></li>
	<li><tt>:class_name</tt></li>
	<li><tt>:conditions</tt></li>
	<li><tt>:dependent</tt></li>
	<li><tt>:foreign_key</tt></li>
	<li><tt>:include</tt></li>
	<li><tt>:order</tt></li>
	<li><tt>:primary_key</tt></li>
	<li><tt>:readonly</tt></li>
	<li><tt>:select</tt></li>
	<li><tt>:source</tt></li>
	<li><tt>:source_type</tt></li>
	<li><tt>:through</tt></li>
	<li><tt>:validate</tt></li>
</ul>
<h6><a name="has_one-as"></a>4.2.2.1 <tt>:as</tt></h6>
Setting the <tt>:as</tt> option indicates that this is a polymorphic association. Polymorphic associations were discussed in detail <a href="http://guides.rubyonrails.org/association_basics.html#polymorphic-associations">earlierinthisguide</a>.
<h6><a name="has_one-autosave"></a>4.2.2.2 <tt>:autosave</tt></h6>
If you set the <tt>:autosave</tt> option to <tt>true</tt>, Rails will save any loaded members and destroy members that are marked for destruction <strong>whenever</strong><strong> </strong><strong>you</strong><strong> </strong><strong>save</strong><strong> </strong><strong>the</strong><strong> </strong><strong>parent</strong><strong> </strong><strong>object</strong>.
<h6><a name="has_one-class_name"></a>4.2.2.3 <tt>:class_name</tt></h6>
If the name of the other model cannot be derived from the association name, you can use the <tt>:class_name</tt> option to supply the model name. For example, if a supplier has an account, but the actual name of the model containing accounts is <tt>Billing</tt>, you’d set things up this way:

class Supplier &lt; ActiveRecord::Base

has_one :account, :class_name =&gt; "Billing"

end
<h6><a name="has_one-conditions"></a>4.2.2.4 <tt>:conditions</tt></h6>
The <tt>:conditions</tt> option lets you specify the conditions that the associated object must meet (in the syntax used by an SQL <tt>WHERE</tt> clause).

class Supplier &lt; ActiveRecord::Base

has_one :account, :conditions =&gt; "confirmed = 1"

end
<h6><a name="has_one-dependent"></a>4.2.2.5 <tt>:dependent</tt></h6>
If you set the <tt>:dependent</tt> option to <tt>:destroy</tt>, then deleting this object will call the <tt>destroy</tt> method on the associated object to delete that object. If you set the <tt>:dependent</tt> option to <tt>:delete</tt>, then deleting this object will delete the associated object <em>without</em> calling its <tt>destroy</tt> method. If you set the <tt>:dependent</tt> option to <tt>:nullify</tt>, then deleting this object will set the foreign key in the association object to <tt>NULL</tt>.
<h6><a name="has_one-foreign_key"></a>4.2.2.6 <tt>:foreign_key</tt></h6>
By convention, Rails guesses that the column used to hold the foreign key on the other model is the name of this model with the suffix <tt>_id</tt> added添加id后缀. The <tt>:foreign_key</tt> option lets you set the name of the foreign key directly:

class Supplier &lt; ActiveRecord::Base

has_one :account, :foreign_key =&gt; "supp_id"

end

In any case, Rails will not create foreign key columns for you. You need to explicitly define them as part of your migrations.
<h6><a name="has_one-include"></a>4.2.2.7 <tt>:include</tt></h6>
You can use the <tt>:include</tt> option to specify second-order associations that should be eager-loaded when this association is used. For example, consider these models:

class Supplier &lt; ActiveRecord::Base

has_one :account

end

&nbsp;

class Account &lt; ActiveRecord::Base

belongs_to :supplier

belongs_to :representative

end

&nbsp;

class Representative &lt; ActiveRecord::Base

has_many :accounts

end

If you frequently retrieve representatives directly from suppliers (<tt>@supplier.account.representative</tt>), then you can make your code somewhat more efficient by including representatives in the association from suppliers to accounts:

class Supplier &lt; ActiveRecord::Base

has_one :account, :include =&gt; :representative

end

&nbsp;

class Account &lt; ActiveRecord::Base

belongs_to :supplier

belongs_to :representative

end

&nbsp;

class Representative &lt; ActiveRecord::Base

has_many :accounts

end
<h6><a name="has_one-order"></a>4.2.2.8 <tt>:order</tt></h6>
The <tt>:order</tt> option dictates the order in which associated objects will be received (in the syntax used by an SQL <tt>ORDER</tt><tt> </tt><tt>BY</tt> clause). Because a <tt>has_one</tt> association will only retrieve a single associated object, this option should not be needed.
<h6><a name="has_one-primary_key"></a>4.2.2.9 <tt>:primary_key</tt></h6>
By convention, Rails guesses that the column used to hold the primary key of this model is <tt>id</tt>. You can override this and explicitly specify the primary key with the <tt>:primary_key</tt> option.
<h6><a name="has_one-readonly"></a>4.2.2.10 <tt>:readonly</tt></h6>
If you set the <tt>:readonly</tt> option to <tt>true</tt>, then the associated object will be read-only when retrieved via the association.
<h6><a name="has_one-select"></a>4.2.2.11 <tt>:select</tt></h6>
The <tt>:select</tt> option lets you override the SQL <tt>SELECT</tt> clause that is used to retrieve data about the associated object. By default, Rails retrieves all columns.
<h6><a name="has_one-source"></a>.2.2.12 <tt>:source</tt></h6>
The <tt>:source</tt> option specifies the source association name for a <tt>has_one</tt><tt> </tt><tt>:through</tt> association.
<h6><a name="has_one-source_type"></a>4.2.2.13 <tt>:source_type</tt></h6>
The <tt>:source_type</tt> option specifies the source association type for a <tt>has_one</tt><tt> </tt><tt>:through</tt> association that proceeds through a polymorphic association.
<h6><a name="has_one-through"></a>4.2.2.14 <tt>:through</tt></h6>
The <tt>:through</tt> option specifies a join model through which to perform the query. <tt>has_one</tt><tt> </tt><tt>:through</tt> associations were discussed in detail <a href="http://guides.rubyonrails.org/association_basics.html#the-has_one-through-association">earlierinthisguide</a>.
<h6><a name="has_one-validate"></a>4.2.2.15 <tt>:validate</tt></h6>
If you set the <tt>:validate</tt> option to <tt>true</tt>, then associated objects will be validated whenever you save this object. By default, this is <tt>false</tt>: associated objects will not be validated when this object is saved.
<h5><a name="has_one-how_to_know_whether_theres_an_as"></a> 4.2.3 How To Know Whether There’s an Associated Object?</h5>
To know whether there’s and associated object just check <em>association</em><tt>.nil?</tt>:

if @supplier.account.nil?

@msg = "No account found for this supplier"

end
<h5><a name="has_one-when_are_objects_saved"></a>4.2.4 When are Objects Saved?</h5>
When you assign an object to a <tt>has_one</tt> association, that object is automatically saved (in order to update its foreign key). In addition, any object being replaced is also automatically saved, because its foreign key will change too.

If either of these saves fails due to validation errors, then the assignment statement returns <tt>false</tt> and the assignment itself is cancelled.

If the parent object (the one declaring the <tt>has_one</tt> association) is unsaved (that is, <tt>new_record?</tt> returns <tt>true</tt>) then the child objects are not saved. <strong>They</strong><strong> </strong><strong>will</strong><strong> </strong><strong>automatically</strong><strong> </strong><strong>when</strong><strong> </strong><strong>the</strong><strong> </strong><strong>parent</strong><strong> </strong><strong>object</strong><strong> </strong><strong>is</strong><strong> </strong><strong>saved.</strong>

<strong>If</strong><strong> </strong><strong>you</strong><strong> </strong><strong>want</strong><strong> </strong><strong>to</strong><strong> </strong><strong>assign</strong><strong> </strong><strong>an</strong><strong> </strong><strong>object</strong><strong> </strong><strong>to</strong><strong> </strong><strong>a</strong><strong> </strong><tt><strong>has_one</strong></tt><strong> </strong><strong>association</strong><strong> </strong><strong>without</strong><strong> </strong><strong>saving</strong><strong> </strong><strong>the</strong><strong> </strong><strong>object,</strong><strong> </strong><strong>use</strong><strong> </strong><strong>the</strong><strong> </strong><em><strong>association</strong></em><tt><strong>.build</strong></tt><strong> </strong><strong>method</strong>.
<h4><a name="has_many-association-reference"></a>4.3 <tt>has_many</tt> Association Reference</h4>
<strong>The</strong><strong> </strong><tt><strong>has_many</strong></tt><strong> </strong><strong>association</strong><strong> </strong><strong>creates</strong><strong> </strong><strong>a</strong><strong> </strong><strong>one-to-many</strong><strong> </strong><strong>relationship</strong><strong> </strong><strong>with</strong><strong> </strong><strong>another</strong><strong> </strong><strong>model.</strong><strong> </strong>In database terms, this association says that the other class will have a foreign key that refers to instances of this class.
<h5><a name="methods-added-by-has_many"></a>4.3.1 Methods Added by <tt>has_many</tt></h5>
When you declare a <tt>has_many</tt> association, the declaring class automatically gains 13 methods related to the association:

<em>collection</em><tt>(force_reload</tt><tt> </tt><tt>=</tt><tt> </tt><tt>false)</tt>
<ul>
	<li><em>collection</em><tt>&lt;&lt;(object,</tt><tt> …</tt><tt>)</tt></li>
	<li><em>collection</em><tt>.delete(object,</tt><tt> …</tt><tt>)</tt></li>
	<li><em>collection</em><tt>=objects</tt></li>
	<li><em>collection_singular</em><tt>_ids</tt></li>
	<li><em>collection_singular</em><tt>_ids=ids</tt></li>
	<li><em>collection</em><tt>.clear</tt></li>
	<li><em>collection</em><tt>.empty?</tt></li>
	<li><em>collection</em><tt>.size</tt></li>
	<li><em>collection</em><tt>.find(</tt><tt>…</tt><tt>)</tt></li>
	<li><em>collection</em><tt>.where(</tt><tt>…</tt><tt>)</tt></li>
	<li><em>collection</em><tt>.exists?(</tt><tt>…</tt><tt>)</tt></li>
	<li><em>collection</em><tt>.build(attributes</tt><tt> </tt><tt>=</tt><tt> </tt><tt>{},</tt><tt> …</tt><tt>)</tt></li>
	<li><em>collection</em><tt>.create(attributes</tt><tt> </tt><tt>=</tt><tt> </tt><tt>{})</tt></li>
</ul>
In all of these methods, <em>collection</em> is replaced with the symbol passed as the first argument to <tt>has_many</tt>, and <em>collection_singular</em> is replaced with the singularized version of that symbol.. For example, given the declaration:

class Customer &lt; ActiveRecord::Base

has_many :orders

end

Each instance of the customer model will have these methods:

&nbsp;

orders(force_reload = false)

orders&lt;&lt;(object, ...)

orders.delete(object, ...)

orders=objects

order_ids

order_ids=ids

orders.clear

orders.empty?

orders.size

orders.find(...)

orders.where(...)

orders.exists?(...)

orders.build(attributes = {}, ...)

orders.create(attributes = {})
<h6><a name="has_many-collection"></a>4.3.1.1 <em>collection</em><tt>(force_reload</tt><tt> </tt><tt>=</tt><tt> </tt><tt>false)</tt></h6>
The <em>collection</em> method returns an array of all of the associated objects. If there are no associated objects, it returns an empty array.

@orders = @customer.orders
<h6><a name="has_many-collection-lt_lt"></a>4.3.1.2 <em>collection</em><tt>&lt;&lt;(object,</tt><tt> …</tt><tt>)</tt></h6>
The <em>collection</em><tt>&lt;&lt;</tt> method adds one or more objects to the collection by setting their foreign keys to the primary key of the calling model.

@customer.orders &lt;&lt; @order1
<h6><a name="has_many-collection-delete"></a>4.3.1.3 <em>collection</em><tt>.delete(object,</tt><tt> …</tt><tt>)</tt></h6>
The <em>collection</em><tt>.delete</tt> method removes one or more objects from the collection by setting their foreign keys to <tt>NULL</tt>.

@customer.orders.delete(@order1)

Additionally, objects will be destroyed if they’re associated with <tt>:dependent</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:destroy</tt>, and deleted if they’re associated with <tt>:dependent</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:delete_all</tt>.
<h6><a name="has_many-collection-equal"></a>4.3.1.4 <em>collection</em><tt>=objects</tt></h6>
The <em>collection</em><tt>=</tt> method makes the collection contain only the supplied objects, by adding and deleting as appropriate.
<h6><a name="has_many-collection_singular"></a>4.3.1.5 <em>collection_singular</em><tt>_ids</tt></h6>
The <em>collection_singular</em><tt>_ids</tt> method returns an array of the ids of the objects in the collection.

@order_ids = @customer.order_ids
<h6><a name="has_many-collection_singular_ids_ids"></a> 4.3.1.6 <em>collection_singular</em><tt>_ids=ids</tt></h6>
The <em>collection_singular</em><tt>_ids=</tt> method makes the collection contain only the objects identified确定by the supplied primary key values, by adding and deleting as appropriate适当.
<h6><a name="has_many-collection-clear"></a>4.3.1.7 <em>collection</em><tt>.clear</tt></h6>
The <em>collection</em><tt>.clear</tt> method removes every object from the collection. This destroys the associated objects if they are associated with <tt>:dependent</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:destroy</tt>, deletes them directly from the database if <tt>:dependent</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:delete_all</tt>, and otherwise sets their foreign keys to <tt>NULL</tt>.
<h6><a name="has_many-collection-empty"></a>4.3.1.8 <em>collection</em><tt>.empty?</tt></h6>
The <em>collection</em><tt>.empty?</tt> method returns <tt>true</tt> if the collection does not contain any associated objects.

&lt;% if @customer.orders.empty? %&gt;

No Orders Found

&lt;% end %&gt;
<h6><a name="has_many-collection-size"></a>4.3.1.9 <em>collection</em><tt>.size</tt></h6>
The <em>collection</em><tt>.size</tt> method returns the number of objects in the collection.

@order_count = @customer.orders.size
<h6><a name="has_many-collection-find"></a>4.3.1.10 <em>collection</em><tt>.find(</tt><tt>…</tt><tt>)</tt></h6>
The <em>collection</em><tt>.find</tt> method finds objects within the collection. It uses the same syntax and options as <tt>ActiveRecord::Base.find</tt>.

@open_orders = @customer.orders.where(:open =&gt; 1)
<h6><a name="has_many-collection-where"></a>4.3.1.11 <em>collection</em><tt>.where(</tt><tt>…</tt><tt>)</tt></h6>
The <em>collection</em><tt>.where</tt> method finds objects within the collection based on the conditions supplied but the objects are loaded lazily meaning that the database is queried only when the object(s) are accessed.

@open_orders = @customer.orders.where(:open =&gt; true) # No query yet

@open_order = @open_orders.first # Now the database will be queried
<h6><a name="has_many-collection-exists"></a>4.3.1.12 <em>collection</em><tt>.exists?(</tt><tt>…</tt><tt>)</tt></h6>
The <em>collection</em><tt>.exists?</tt> method checks whether an object meeting the supplied conditions exists in the collection. It uses the same syntax and options as <tt>ActiveRecord::Base.exists?</tt>.
<h6><a name="has_many-collection-build"></a>4.3.1.13 <em>collection</em><tt>.build(attributes</tt><tt> </tt><tt>=</tt><tt> </tt><tt>{},</tt><tt> …</tt><tt>)</tt></h6>
The <em>collection</em><tt>.build</tt> method returns one or more new objects of the associated type. These objects will be instantiated from the passed attributes, and the link through their foreign key will be created, but the associated objects will <em>not</em> yet be saved.

@order = @customer.orders.build(:order_date =&gt; Time.now,

:order_number =&gt; "A12345")
<h6><a name="has_many-collection-create"></a>4.3.1.14 <em>collection</em><tt>.create(attributes</tt><tt> </tt><tt>=</tt><tt> </tt><tt>{})</tt></h6>
The <em>collection</em><tt>.create</tt> method returns a new object of the associated type. This object will be instantiated from the passed attributes, the link through its foreign key will be created, and the associated object <em>will</em> be saved (assuming that it passes any validations).

@order = @customer.orders.create(:order_date =&gt; Time.now,

:order_number =&gt; "A12345")
<h5><a name="options-for-has_many"></a>4.3.2 Options for <tt>has_many</tt></h5>
In many situations, you can use the default behavior for <tt>has_many</tt> without any customization. But you can alter that behavior in a number of ways. This section covers the options that you can pass when you create a <tt>has_many</tt> association. For example, an association with several options might look like this:

class Customer &lt; ActiveRecord::Base

has_many :orders, :dependent =&gt; :delete_all, :validate =&gt; :false

end

The <tt>has_many</tt> association supports these options:
<ul>
	<li><tt>:as</tt></li>
	<li><tt>:autosave</tt></li>
	<li><tt>:class_name</tt></li>
	<li><tt>:conditions</tt></li>
	<li><tt>:counter_sql</tt></li>
	<li><tt>:dependent</tt></li>
	<li><tt>:extend</tt></li>
	<li><tt>:finder_sql</tt></li>
	<li><tt>:foreign_key</tt></li>
	<li><tt>:group</tt></li>
	<li><tt>:include</tt></li>
	<li><tt>:limit</tt></li>
	<li><tt>:offset</tt></li>
	<li><tt>:order</tt></li>
	<li><tt>:primary_key</tt></li>
	<li><tt>:readonly</tt></li>
	<li><tt>:select</tt></li>
	<li><tt>:source</tt></li>
	<li><tt>:source_type</tt></li>
	<li><tt>:through</tt></li>
	<li><tt>:uniq</tt></li>
	<li><tt>:validate</tt></li>
</ul>
<h6><a name="has_many-as"></a>4.3.2.1 <tt>:as</tt></h6>
Setting the <tt>:as</tt> option indicates that this is a polymorphic association, as discussed <a href="http://guides.rubyonrails.org/association_basics.html#polymorphic-associations">earlierinthisguide</a>.
<h6><a name="has_many-autosave"></a>4.3.2.2 <tt>:autosave</tt></h6>
If you set the <tt>:autosave</tt> option to <tt>true</tt>, Rails will save any loaded members and destroy members that are marked for destruction whenever you save the parent object.
<h6><a name="has_many-class_name"></a>4.3.2.3 <tt>:class_name</tt></h6>
If the name of the other model cannot be derived from the association name, you can use the <tt>:class_name</tt> option to supply the model name. For example, if a customer has many orders, but the actual name of the model containing orders is <tt>Transaction</tt>, you’d set things up this way:

class Customer &lt; ActiveRecord::Base

has_many :orders, :class_name =&gt; "Transaction"

end
<h6><a name="has_many-conditions"></a>4.3.2.4 <tt>:conditions</tt></h6>
The <tt>:conditions</tt> option lets you specify the conditions that the associated object must meet (in the syntax used by an SQL <tt>WHERE</tt> clause).

class Customer &lt; ActiveRecord::Base

has_many :confirmed_orders, :class_name =&gt; "Order",

:conditions =&gt; "confirmed = 1"

end

You can also set conditions via a hash:

class Customer &lt; ActiveRecord::Base

has_many :confirmed_orders, :class_name =&gt; "Order",

:conditions =&gt; { :confirmed =&gt; true }

end

If you use a hash-style <tt>:conditions</tt> option, then record creation via this association will be automatically scoped using the hash. In this case, using <tt>@customer.confirmed_orders.create</tt> or <tt>@customer.confirmed_orders.build</tt> will create orders where the confirmed column has the value <tt>true</tt>.

if you need to evaluate conditions dynamically at runtime, use a proc:
<h6><a name="has_many-counter_sql"></a>4.3.2.5 <tt>:counter_sql</tt></h6>
Normally Rails automatically generates the proper SQL to count the association members. With the <tt>:counter_sql</tt> option, you can specify a complete SQL statement to count them yourself.

If you specify <tt>:finder_sql</tt> but not <tt>:counter_sql</tt>, then the counter SQL will be generated by substituting <tt>SELECT</tt><tt> </tt><tt>COUNT(*)</tt><tt> </tt><tt>FROM</tt> for the <tt>SELECT</tt><tt> </tt><tt>...</tt><tt> </tt><tt>FROM</tt> clause of your <tt>:finder_sql</tt> statement.
<h6><a name="has_many-dependent"></a>4.3.2.6 <tt>:dependent</tt></h6>
If you set the <tt>:dependent</tt> option to <tt>:destroy</tt><tt>（删除映射链和映射对象）</tt>, then deleting this object will call the <tt>destroy</tt> method on the associated objects to delete those objects. If you set the <tt>:dependent</tt> option to <tt>:delete_all</tt><tt>（只删除映射链）</tt>, then deleting this object will delete the associated objects <em>without</em> calling their <tt>destroy</tt> method. If you set the <tt>:dependent</tt> option to <tt>:nullify</tt>, then deleting this object will set the foreign key in the associated objects to <tt>NULL</tt>.

This option is ignored when you use the <tt>:through</tt> option on the association.
<h6><a name="has_many-extend"></a>4.3.2.7 <tt>:extend</tt></h6>
The <tt>:extend</tt> option specifies a named module to extend the association proxy. Association extensions are discussed in detail <a href="http://guides.rubyonrails.org/association_basics.html#association-extensions">laterinthisguide</a>.
<h6><a name="has_many-finder_sql"></a>4.3.2.8 <tt>:finder_sql</tt></h6>
Normally Rails automatically generates the proper SQL to fetch the association members. With the <tt>:finder_sql</tt> option, you can specify a complete SQL statement to fetch them yourself. If fetching objects requires complex multi-table SQL, this may be necessary.
<h6><a name="has_many-foreign_key"></a>4.3.2.9 <tt>:foreign_key</tt></h6>
By convention, Rails guesses that the column used to hold the foreign key on the other model is the name of this model with the suffix <tt>_id</tt> added添加前缀. The <tt>:foreign_key</tt> option lets you set the name of the foreign key directly:

In any case, Rails will not create foreign key columns for you. You need to explicitly define them as part of your migrations.
<h6><a name="has_many-group"></a>4.3.2.10 <tt>:group</tt></h6>
The <tt>:group</tt> option supplies an attribute name to group the result set by, using a <tt>GROUP</tt><tt> </tt><tt>BY</tt> clause in the finder SQL.

class Customer &lt; ActiveRecord::Base

has_many :line_items, :through =&gt; :orders, :group =&gt; "orders.id"

end
<h6><a name="has_many-include"></a>4.3.2.11 <tt>:include</tt></h6>
You can use the <tt>:include</tt> option to specify second-order associations that should be eager-loaded when this association is used. For example, consider these models:

class Customer &lt; ActiveRecord::Base

has_many :orders

end

&nbsp;

class Order &lt; ActiveRecord::Base

belongs_to :customer

has_many :line_items

end

&nbsp;

class LineItem &lt; ActiveRecord::Base

belongs_to :order

end

If you frequently retrieve line items directly from customers (<tt>@customer.orders.line_items</tt>), then you can make your code somewhat more efficient by including line items in the association from customers to orders:

class Customer &lt; ActiveRecord::Base

has_many :orders, :include =&gt; :line_items

end

&nbsp;

class Order &lt; ActiveRecord::Base

belongs_to :customer

has_many :line_items

end

&nbsp;

class LineItem &lt; ActiveRecord::Base

belongs_to :order

end
<h6><a name="has_many-limit"></a>4.3.2.12 <tt>:limit</tt></h6>
The <tt>:limit</tt> option lets you restrict the total number of objects that will be fetched through an association.

class Customer &lt; ActiveRecord::Base

has_many :recent_orders, :class_name =&gt; "Order",

:order =&gt; "order_date DESC", :limit =&gt; 100

end
<h6><a name="has_many-offset"></a>4.3.2.13 <tt>:offset</tt></h6>
The <tt>:offset</tt> option lets you specify the starting offset for fetching objects via an association. For example, if you set <tt>:offset</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>11</tt>, it will skip the first 11 records.
<h6><a name="has_many-order"></a>4.3.2.14 <tt>:order</tt></h6>
The <tt>:order</tt> option dictates the order in which associated objects will be received (in the syntax used by an SQL <tt>ORDER</tt><tt> </tt><tt>BY</tt> clause).

class Customer &lt; ActiveRecord::Base

has_many :orders, :order =&gt; "date_confirmed DESC"

end
<h6><a name="has_many-primary_key"></a>4.3.2.15 <tt>:primary_key</tt></h6>
By convention, Rails guesses that the column used to hold the primary key of the association is <tt>id</tt>. You can override this and explicitly specify the primary key with the <tt>:primary_key</tt> option.
<h6><a name="has_many-readonly"></a>4.3.2.16 <tt>:readonly</tt></h6>
If you set the <tt>:readonly</tt> option to <tt>true</tt>, then the associated objects will be read-only when retrieved via the association.
<h6><a name="has_many-select"></a>4.3.2.17 <tt>:select</tt></h6>
The <tt>:select</tt> option lets you override the SQL <tt>SELECT</tt> clause that is used to retrieve data about the associated objects. By default, Rails retrieves all columns.

If you specify your own <tt>:select</tt>, be sure to include the primary key and foreign key columns of the associated model. If you do not, Rails will throw an error.
<h6><a name="has_many-source"></a>4.3.2.18 <tt>:source</tt></h6>
The <tt>:source</tt> option specifies the source association name for a <tt>has_many</tt><tt> </tt><tt>:through</tt> association. You only need to use this option if the name of the source association cannot be automatically inferred from the association name.
<h6><a name="has_many-source_type"></a>4.3.2.19 <tt>:source_type</tt></h6>
The <tt>:source_type</tt> option specifies the source association type for a <tt>has_many</tt><tt> </tt><tt>:through</tt> association that proceeds through a polymorphic association.
<h6><a name="has_many-through"></a>4.3.2.20 <tt>:through</tt></h6>
The <tt>:through</tt> option specifies a join model through which to perform the query. <tt>has_many</tt><tt> </tt><tt>:through</tt> associations provide a way to implement many-to-many relationships, as discussed <a href="http://guides.rubyonrails.org/association_basics.html#the-has_many-through-association">earlierinthisguide</a>.
<h6><a name="has_many-uniq"></a>4.3.2.21 <tt>:uniq</tt></h6>
Set the <tt>:uniq</tt> option to true to keep the collection free of duplicates. This is mostly useful together with the <tt>:through</tt> option.

class Person &lt; ActiveRecord::Base

has_many :readings

has_many :posts, :through =&gt; :readings

end

&nbsp;

person = Person.create(:name =&gt; 'john')

post = Post.create(:name =&gt; 'a1')

person.posts &lt;&lt; post

person.posts &lt;&lt; post

person.posts.inspect # =&gt; [#&lt;Post id: 5, name: "a1"&gt;, #&lt;Post id: 5, name: "a1"&gt;]

Reading.all.inspect # =&gt; [#&lt;Reading id: 12, person_id: 5, post_id: 5&gt;, #&lt;Reading id: 13, person_id: 5, post_id: 5&gt;]

In the above case there are two readings and <tt>person.posts</tt> brings out both of them even though these records are pointing to the same post.

Now let’s set <tt>:uniq</tt> to true:

class Person

has_many :readings

has_many :posts, :through =&gt; :readings, :uniq =&gt; true

end

&nbsp;

person = Person.create(:name =&gt; 'honda')

post = Post.create(:name =&gt; 'a1')

person.posts &lt;&lt; post

person.posts &lt;&lt; post

person.posts.inspect # =&gt; [#&lt;Post id: 7, name: "a1"&gt;]

Reading.all.inspect # =&gt; [#&lt;Reading id: 16, person_id: 7, post_id: 7&gt;, #&lt;Reading id: 17, person_id: 7, post_id: 7&gt;]

In the above case there are still two readings. However <tt>person.posts</tt> shows only one post because the collection loads only unique records.
<h6><a name="has_many-validate"></a>4.3.2.22 <tt>:validate</tt></h6>
If you set the <tt>:validate</tt> option to <tt>false</tt>, then associated objects will not be validated whenever you save this object. By default, this is <tt>true</tt>: associated objects will be validated when this object is saved.
<h5><a name="has_many-when_are_objects_saved"></a>4.3.3 When are Objects Saved?</h5>
When you assign an object to a <tt>has_many</tt> association, that object is automatically saved (in order to update its foreign key). If you assign multiple objects in one statement, then they are all saved.

If any of these saves fails due to validation errors, then the assignment statement returns <tt>false</tt> and the assignment itself is cancelled.

If the parent object (the one declaring the <tt>has_many</tt> association) is unsaved (that is, <tt>new_record?</tt> returns <tt>true</tt>) then the child objects are not saved when they are added. All unsaved members of the association will automatically be saved when the parent is saved.

If you want to assign an object to a <tt>has_many</tt> association without saving the object, use the <em>collection</em><tt>.build</tt> method.
<h4><a name="has_and_belongs_to_many-association-refe"></a> 4.4 <tt>has_and_belongs_to_many</tt> Association Reference</h4>
The <tt>has_and_belongs_to_many</tt> association creates a many-to-many relationship with another model. In database terms, this associates two classes via an intermediate join table that includes foreign keys referring to each of the classes.
<h5><a name="methods-added-by-has_and_belongs_to_many"></a> 4.4.1 Methods Added by <tt>has_and_belongs_to_many</tt></h5>
When you declare a <tt>has_and_belongs_to_many</tt> association, the declaring class automatically gains 13 methods related to the association:
<ul>
	<li><em>collection</em><tt>(force_reload</tt><tt> </tt><tt>=</tt><tt> </tt><tt>false)</tt></li>
	<li><em>collection</em><tt>&lt;&lt;(object,</tt><tt> …</tt><tt>)</tt></li>
	<li><em>collection</em><tt>.delete(object,</tt><tt> …</tt><tt>)</tt></li>
	<li><em>collection</em><tt>=objects</tt></li>
	<li><em>collection_singular</em><tt>_ids</tt></li>
	<li><em>collection_singular</em><tt>_ids=ids</tt></li>
	<li><em>collection</em><tt>.clear</tt></li>
	<li><em>collection</em><tt>.empty?</tt></li>
	<li><em>collection</em><tt>.size</tt></li>
	<li><em>collection</em><tt>.find(</tt><tt>…</tt><tt>)</tt></li>
	<li><em>collection</em><tt>.where(</tt><tt>…</tt><tt>)</tt></li>
	<li><em>collection</em><tt>.exists?(</tt><tt>…</tt><tt>)</tt></li>
	<li><em>collection</em><tt>.build(attributes</tt><tt> </tt><tt>=</tt><tt> </tt><tt>{})</tt></li>
	<li><em>collection</em><tt>.create(attributes</tt><tt> </tt><tt>=</tt><tt> </tt><tt>{})</tt></li>
</ul>
In all of these methods, <em>collection</em> is replaced with the symbol passed as the first argument to <tt>has_and_belongs_to_many</tt>, and <em>collection_singular</em> is replaced with the singularized version of that symbol. For example, given the declaration:

class Part &lt; ActiveRecord::Base

has_and_belongs_to_many :assemblies

end

Each instance of the part model will have these methods:

assemblies(force_reload = false)

assemblies&lt;&lt;(object, ...)

assemblies.delete(object, ...)

assemblies=objects

assembly_ids

assembly_ids=ids

assemblies.clear

assemblies.empty?

assemblies.size

assemblies.find(...)

assemblies.where(...)

assemblies.exists?(...)

assemblies.build(attributes = {}, ...)

assemblies.create(attributes = {})
<h6><a name="additional-column-methods"></a>4.4.1.1 Additional Column Methods</h6>
If the join table for a <tt>has_and_belongs_to_many</tt> association has additional columns beyond the two foreign keys, these columns will be added as attributes to records retrieved via that association. Records returned with additional attributes will always be read-only, because Rails cannot save changes to those attributes.

The use of extra attributes on the join table in a <tt>has_and_belongs_to_many</tt> association is deprecated. If you require this sort of complex behavior on the table that joins two models in a many-to-many relationship, you should use a <tt>has_many</tt><tt> </tt><tt>:through</tt> association instead of <tt>has_and_belongs_to_many</tt>.
<h6><a name="has_and_belongs_to_many-collection"></a>4.4.1.2 <em>collection</em><tt>(force_reload</tt><tt> </tt><tt>=</tt><tt> </tt><tt>false)</tt></h6>
The <em>collection</em> method returns an array of all of the associated objects. If there are no associated objects, it returns an empty array.

@assemblies = @part.assemblies
<h6><a name="has_and_belongs_to_many-collection-lt_lt"></a> 4.4.1.3 <em>collection</em><tt>&lt;&lt;(object,</tt><tt> …</tt><tt>)</tt></h6>
The <em>collection</em><tt>&lt;&lt;</tt> method adds one or more objects to the collection by creating records in the join table.

@part.assemblies &lt;&lt; @assembly1

This method is aliased as <em>collection</em><tt>.concat</tt> and <em>collection</em><tt>.push</tt>.
<h6><a name="has_and_belongs_to_many-collection-delet"></a> 4.4.1.4 <em>collection</em><tt>.delete(object,</tt><tt> …</tt><tt>)</tt></h6>
The <em>collection</em><tt>.delete</tt> method removes one or more objects from the collection by deleting records in the join table. This does not destroy the objects.

@part.assemblies.delete(@assembly1)
<h6><a name="has_and_belongs_to_many-collection-equal"></a> 4.4.1.5 <em>collection</em><tt>=objects</tt></h6>
The <em>collection</em><tt>=</tt> method makes the collection contain only the supplied objects, by adding and deleting as appropriate.
<h6><a name="has_and_belongs_to_many-collection_singu"></a> 4.4.1.6 <em>collection_singular</em><tt>_ids</tt></h6>
The <em>collection_singular</em><tt>_ids</tt> method returns an array of the ids of the objects in the collection.

@assembly_ids = @part.assembly_ids
<h6>4.4.1.7 <em>collection_singular</em><tt>_ids=ids</tt></h6>
The <em>collection_singular</em><tt>_ids=</tt> method makes the collection contain only the objects identified by the supplied primary key values, by adding and deleting as appropriate.
<h6><a name="has_and_belongs_to_many-collection-clear"></a> 4.4.1.8 <em>collection</em><tt>.clear</tt></h6>
The <em>collection</em><tt>.clear</tt> method removes every object from the collection by deleting the rows from the joining table. This does not destroy the associated objects.
<h6><a name="has_and_belongs_to_many-collection-empty"></a> 4.4.1.9 <em>collection</em><tt>.empty?</tt></h6>
The <em>collection</em><tt>.empty?</tt> method returns <tt>true</tt> if the collection does not contain any associated objects.

&lt;% if @part.assemblies.empty? %&gt;

This part is not used in any assemblies

&lt;% end %&gt;
<h6><a name="has_and_belongs_to_many-collection-size"></a> 4.4.1.10 <em>collection</em><tt>.size</tt></h6>
The <em>collection</em><tt>.size</tt> method returns the number of objects in the collection.

@assembly_count = @part.assemblies.size
<h6><a name="has_and_belongs_to_many-collection-find"></a> 4.4.1.11 <em>collection</em><tt>.find(</tt><tt>…</tt><tt>)</tt></h6>
The <em>collection</em><tt>.find</tt> method finds objects within the collection. It uses the same syntax and options as <tt>ActiveRecord::Base.find</tt>. It also adds the additional condition that the object must be in the collection.

@new_assemblies = @part.assemblies.all(

:conditions =&gt; ["created_at &gt; ?", 2.days.ago])

Starting Rails 3, supplying options to <tt>ActiveRecord::Base.find</tt> method is discouraged. Use <em>collection</em><tt>.where</tt> instead when you need to pass conditions.
<h6><a name="has_and_belongs_to_many-collection-where"></a> 4.4.1.12 <em>collection</em><tt>.where(</tt><tt>…</tt><tt>)</tt></h6>
The <em>collection</em><tt>.where</tt> method finds objects within the collection based on the conditions supplied but the objects are loaded lazily meaning that the database is queried only when the object(s) are accessed. It also adds the additional condition that the object must be in the collection.

@new_assemblies = @part.assemblies.where("created_at &gt; ?", 2.days.ago)
<h6><a name="has_and_belongs_to_many-collection-exist"></a> 4.4.1.13 <em>collection</em><tt>.exists?(</tt><tt>…</tt><tt>)</tt></h6>
The <em>collection</em><tt>.exists?</tt> method checks whether an object meeting the supplied conditions exists in the collection. It uses the same syntax and options as <tt>ActiveRecord::Base.exists?</tt>.
<h6><a name="has_and_belongs_to_many-collection-build"></a> 4.4.1.14 <em>collection</em><tt>.build(attributes</tt><tt> </tt><tt>=</tt><tt> </tt><tt>{})</tt></h6>
The <em>collection</em><tt>.build</tt> method returns a new object of the associated type. This object will be instantiated from the passed attributes, and the link through the join table will be created, but the associated object will <em>not</em> yet be saved.

@assembly = @part.assemblies.build(

{:assembly_name =&gt; "Transmission housing"})
<h6><a name="has_and_belongs_to_many-create-attribute"></a> 4.4.1.15 <em>collection</em><tt>.create(attributes</tt><tt> </tt><tt>=</tt><tt> </tt><tt>{})</tt></h6>
The <em>collection</em><tt>.create</tt> method returns a new object of the associated type. This object will be instantiated from the passed attributes, the link through the join table will be created, and the associated object <em>will</em> be saved (assuming that it passes any validations).

@assembly = @part.assemblies.create(

{:assembly_name =&gt; "Transmission housing"})
<h5><a name="options-for-has_and_belongs_to_many"></a> 4.4.2 Options for <tt>has_and_belongs_to_many</tt></h5>
In many situations, you can use the default behavior for <tt>has_and_belongs_to_many</tt> without any customization. But you can alter that behavior in a number of ways. This section covers the options that you can pass when you create a <tt>has_and_belongs_to_many</tt> association. For example, an association with several options might look like this:

class Parts &lt; ActiveRecord::Base

has_and_belongs_to_many :assemblies, :uniq =&gt; true,

:read_only =&gt; true

end

The <tt>has_and_belongs_to_many</tt> association supports these options:
<ul>
	<li><tt>:association_foreign_key</tt></li>
	<li><tt>:autosave</tt></li>
	<li><tt>:class_name</tt></li>
	<li><tt>:conditions</tt></li>
	<li><tt>:counter_sql</tt></li>
	<li><tt>:delete_sql</tt></li>
	<li><tt>:extend</tt></li>
	<li><tt>:finder_sql</tt></li>
	<li><tt>:foreign_key</tt></li>
	<li><tt>:group</tt></li>
	<li><tt>:include</tt></li>
	<li><tt>:insert_sql</tt></li>
	<li><tt>:join_table</tt></li>
	<li><tt>:limit</tt></li>
	<li><tt>:offset</tt></li>
	<li><tt>:order</tt></li>
	<li><tt>:readonly</tt></li>
	<li><tt>:select</tt></li>
	<li><tt>:uniq</tt></li>
	<li><tt>:validate</tt></li>
</ul>
<h6><a name="has_and_belongs_to_many-association_fore"></a> 4.4.2.1 <tt>:association_foreign_key</tt></h6>
By convention, Rails guesses that the column in the join table used to hold the foreign key pointing to the other model is the name of that model with the suffix <tt>_id</tt> added. The <tt>:association_foreign_key</tt> option lets you set the name of the foreign key directly:

The <tt>:foreign_key</tt> and <tt>:association_foreign_key</tt> options are useful when setting up a many-to-many self-join. For example:

class User &lt; ActiveRecord::Base

has_and_belongs_to_many :friends, :class_name =&gt; "User",

:foreign_key =&gt; "this_user_id",

:association_foreign_key =&gt; "other_user_id"

end
<h6><a name="has_and_belongs_to_many-autosave"></a>4.4.2.2 <tt>:autosave</tt></h6>
If you set the <tt>:autosave</tt> option to <tt>true</tt>, Rails will save any loaded members and destroy members that are marked for destruction whenever you save the parent object.
<h6><a name="has_and_belongs_to_many-class_name"></a>4.4.2.3 <tt>:class_name</tt></h6>
If the name of the other model cannot be derived from the association name, you can use the <tt>:class_name</tt> option to supply the model name. For example, if a part has many assemblies, but the actual name of the model containing assemblies is <tt>Gadget</tt>, you’d set things up this way:

class Parts &lt; ActiveRecord::Base

has_and_belongs_to_many :assemblies, :class_name =&gt; "Gadget"

end
<h6><a name="has_and_belongs_to_many-conditions"></a>4.4.2.4 <tt>:conditions</tt></h6>
The <tt>:conditions</tt> option lets you specify the conditions that the associated object must meet (in the syntax used by an SQL <tt>WHERE</tt> clause).

class Parts &lt; ActiveRecord::Base

has_and_belongs_to_many :assemblies,

:conditions =&gt; "factory = 'Seattle'"

end

You can also set conditions via a hash:

class Parts &lt; ActiveRecord::Base

has_and_belongs_to_many :assemblies,

:conditions =&gt; { :factory =&gt; 'Seattle' }

end

If you use a hash-style <tt>:conditions</tt> option, then record creation via this association will be automatically scoped using the hash. In this case, using <tt>@parts.assemblies.create</tt> or <tt>@parts.assemblies.build</tt> will create orders where the <tt>factory</tt> column has the value “Seattle”.
<h6><a name="has_and_belongs_to_many-counter_sql"></a> 4.4.2.5 <tt>:counter_sql</tt></h6>
Normally Rails automatically generates the proper SQL to count the association members. With the <tt>:counter_sql</tt> option, you can specify a complete SQL statement to count them yourself.

If you specify <tt>:finder_sql</tt> but not <tt>:counter_sql</tt>, then the counter SQL will be generated by substituting <tt>SELECT</tt><tt> </tt><tt>COUNT(*)</tt><tt> </tt><tt>FROM</tt> for the <tt>SELECT</tt><tt> </tt><tt>...</tt><tt> </tt><tt>FROM</tt> clause of your <tt>:finder_sql</tt> statement.
<h6><a name="has_and_belongs_to_many-delete_sql"></a>4.4.2.6 <tt>:delete_sql</tt></h6>
Normally Rails automatically generates the proper SQL to remove links between the associated classes. With the <tt>:delete_sql</tt> option, you can specify a complete SQL statement to delete them yourself.
<h6><a name="has_and_belongs_to_many-extend"></a>4.4.2.7 <tt>:extend</tt></h6>
The <tt>:extend</tt> option specifies a named module to extend the association proxy. Association extensions are discussed in detail <a href="http://guides.rubyonrails.org/association_basics.html#association-extensions">laterinthisguide</a>.
<h6><a name="has_and_belongs_to_many-finder_sql"></a>4.4.2.8 <tt>:finder_sql</tt></h6>
Normally Rails automatically generates the proper SQL to fetch the association members. With the <tt>:finder_sql</tt> option, you can specify a complete SQL statement to fetch them yourself. If fetching objects requires complex multi-table SQL, this may be necessary.
<h6><a name="has_and_belongs_to_many-foreign_key"></a> 4.4.2.9 <tt>:foreign_key</tt></h6>
By convention, Rails guesses that the column in the join table used to hold the foreign key pointing to this model is the name of this model with the suffix <tt>_id</tt> added. The <tt>:foreign_key</tt> option lets you set the name of the foreign key directly:

class User &lt; ActiveRecord::Base

has_and_belongs_to_many :friends, :class_name =&gt; "User",

:foreign_key =&gt; "this_user_id",

:association_foreign_key =&gt; "other_user_id"

end
<h6><a name="has_and_belongs_to_many-group"></a>4.4.2.10 <tt>:group</tt></h6>
The <tt>:group</tt> option supplies an attribute name to group the result set by, using a <tt>GROUP</tt><tt> </tt><tt>BY</tt> clause in the finder SQL.

class Parts &lt; ActiveRecord::Base

has_and_belongs_to_many :assemblies, :group =&gt; "factory"

end
<h6><a name="has_and_belongs_to_many-include"></a>4.4.2.11 <tt>:include</tt></h6>
You can use the <tt>:include</tt> option to specify second-order associations that should be eager-loaded when this association is used.
<h6><a name="has_and_belongs_to_many-insert_sql"></a>4.4.2.12 <tt>:insert_sql</tt></h6>
Normally Rails automatically generates the proper SQL to create links between the associated classes. With the <tt>:insert_sql</tt> option, you can specify a complete SQL statement to insert them yourself.
<h6><a name="has_and_belongs_to_many-join_table"></a>4.4.2.13 <tt>:join_table</tt></h6>
If the default name of the join table, based on lexical ordering, is not what you want, you can use the <tt>:join_table</tt> option to override the default.
<h6><a name="has_and_belongs_to_many-limit"></a>4.4.2.14 <tt>:limit</tt></h6>
The <tt>:limit</tt> option lets you restrict the total number of objects that will be fetched through an association.

class Parts &lt; ActiveRecord::Base

has_and_belongs_to_many :assemblies, :order =&gt; "created_at DESC",

:limit =&gt; 50

end
<h6><a name="has_and_belongs_to_many-offset"></a>4.4.2.15 <tt>:offset</tt></h6>
The <tt>:offset</tt> option lets you specify the starting offset for fetching objects via an association. For example, if you set <tt>:offset</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>11</tt>, it will skip the first 11 records.
<h6><a name="has_and_belongs_to_many-order"></a>4.4.2.16 <tt>:order</tt></h6>
The <tt>:order</tt> option dictates the order in which associated objects will be received (in the syntax used by an SQL <tt>ORDER</tt><tt> </tt><tt>BY</tt> clause).

class Parts &lt; ActiveRecord::Base

has_and_belongs_to_many :assemblies, :order =&gt; "assembly_name ASC"

end
<h6><a name="has_and_belongs_to_many-readonly"></a>4.4.2.17 <tt>:readonly</tt></h6>
If you set the <tt>:readonly</tt> option to <tt>true</tt>, then the associated objects will be read-only when retrieved via the association.
<h6><a name="has_and_belongs_to_many-select"></a>4.4.2.18 <tt>:select</tt></h6>
The <tt>:select</tt> option lets you override the SQL <tt>SELECT</tt> clause that is used to retrieve data about the associated objects. By default, Rails retrieves all columns.
<h6><a name="has_and_belongs_to_many-uniq"></a>4.4.2.19 <tt>:uniq</tt></h6>
Specify the <tt>:uniq</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt> option to remove duplicates from the collection.
<h6><a name="has_and_belongs_to_many-validate"></a>4.4.2.20 <tt>:validate</tt></h6>
If you set the <tt>:validate</tt> option to <tt>false</tt>, then associated objects will not be validated whenever you save this object. By default, this is <tt>true</tt>: associated objects will be validated when this object is saved.
<h5><a name="has_and_belongs_to_many-when_are_objects"></a> 4.4.3 When are Objects Saved?</h5>
When you assign an object to a <tt>has_and_belongs_to_many</tt> association, that object is automatically saved (in order to update the join table). If you assign multiple objects in one statement, then they are all saved.

If any of these saves fails due to validation errors, then the assignment statement returns <tt>false</tt> and the assignment itself is cancelled.

If the parent object (the one declaring the <tt>has_and_belongs_to_many</tt> association) is unsaved (that is, <tt>new_record?</tt> returns <tt>true</tt>) then the child objects are not saved when they are added. All unsaved members of the association will automatically be saved when the parent is saved.

If you want to assign an object to a <tt>has_and_belongs_to_many</tt> association without saving the object, use the <em>collection</em><tt>.build</tt> method.
<h4><a name="association-callbacks"></a>4.5 Association Callbacks</h4>
Normal callbacks hook into the life cycle of Active Record objects, allowing you to work with those objects at various points. For example, you can use a <tt>:before_save</tt> callback to cause something to happen just before an object is saved.

Association callbacks are similar to normal callbacks, but they are triggered by events in the life cycle of a collection. There are four available association callbacks:
<ul>
	<li><tt>before_add</tt></li>
	<li><tt>after_add</tt></li>
	<li><tt>before_remove</tt></li>
	<li><tt>after_remove</tt></li>
</ul>
You define association callbacks by adding options to the association declaration. For example:

class Customer &lt; ActiveRecord::Base

has_many :orders, :before_add =&gt; :check_credit_limit

&nbsp;

def check_credit_limit(order)

...

end

end

You can stack callbacks on a single event by passing them as an array:

class Customer &lt; ActiveRecord::Base

has_many :orders,

:before_add =&gt; [:check_credit_limit, :calculate_shipping_charges]

&nbsp;

def check_credit_limit(order)

...

end

&nbsp;

def calculate_shipping_charges(order)

...

end

end

If a <tt>before_add</tt> callback throws an exception, the object does not get added to the collection. Similarly, if a <tt>before_remove</tt> callback throws an exception, the object does not get removed from the collection.
<h4><a name="association-extensions"></a>4.6 Association Extensions</h4>
You’re not limited to the functionality that Rails automatically builds into association proxy objects. You can also extend these objects through anonymous modules, adding new finders, creators, or other methods. For example:

class Customer &lt; ActiveRecord::Base

has_many :orders do

def find_by_order_prefix(order_number)

find_by_region_id(order_number[0..2])

end

end

end

If you have an extension that should be shared by many associations, you can use a named extension module. For example:

module FindRecentExtension

def find_recent

where("created_at &gt; ?", 5.days.ago)

end

end

&nbsp;

class Customer &lt; ActiveRecord::Base

has_many :orders, :extend =&gt; FindRecentExtension

end

&nbsp;

class Supplier &lt; ActiveRecord::Base

has_many :deliveries, :extend =&gt; FindRecentExtension

end

To include more than one extension module in a single association, specify an array of modules:

class Customer &lt; ActiveRecord::Base

has_many :orders,

:extend =&gt; [FindRecentExtension, FindActiveExtension]

end

Extensions can refer to the internals of the association proxy using these three accessors访问器:
<ul>
	<li><tt>proxy_owner</tt> returns the object that the association is a part of.</li>
	<li><tt>proxy_reflection</tt> returns the reflection object that describes the association.</li>
	<li><tt>proxy_target</tt> returns the associated object for <tt>belongs_to</tt> or <tt>has_one</tt>, or the collection of associated objects for <tt>has_many</tt> or <tt>has_and_belongs_to_many</tt>.</li>
</ul>
&nbsp;

Now,supposewewantedtoaddaneworderforanexistingcustomer.We’dneedtodosomethinglikethis:现在假设我们想为一个存在的customer添加一个新的order。我们需要做如下事情：

</div>
<div>标签： <a href="http://jhjguxin.hwcrazy.com/tag/guide/">guide</a> <a href="http://jhjguxin.hwcrazy.com/tag/rails/">rails</a> <a href="http://jhjguxin.hwcrazy.com/tag/ruby/">ruby</a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date>2011-11-29 15:31:07</wp:post_date>
		<wp:post_date_gmt>2011-11-29 07:31:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rubyonrails-guide-to-active-record-associations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="guide"><![CDATA[guide]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nginx缓存cache的5种方案</title>
		<link></link>
		<pubDate>Wed, 30 Nov 2011 09:54:46 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=91</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

1. 客户端浏览器上的缓存(非Cookie, Cookie中的内容为: 键和值均为string类型的键值对)

我们可以通过在Http回应中增加特定的头部说明来指定浏览器的缓存策略; 添加头部说明的手段既可以通过页面指令声明设置, 也可以通过编程方式设置.

&nbsp;

对于图片、Javascript脚本、CSS等资源, 可以在IIS管理器中, 右击图片等资源, 选择”属性” --&gt; HttpHeaders后, 勾选Enable Content Expiration并设置时间即可. 一种值得推荐的手段是, 将需要缓存的资源分类, 如: image/dynamic/、image/static/, 这样我们可以再文件夹上, 选择属性中的HttpHeaders进行设置. 否则, 针对每一个静态资源设置HttpHeaders将是件非常痛苦的事情. 此外, 还可以采用一款名为CacheRight的工具可以提供缓存资源的统一配置.

&nbsp;

<strong>查看或设置浏览器缓存位置:</strong>  IE --&gt; Internet选项 --&gt; 常规 --&gt; 临时Internet文件 --&gt; 设置

<strong> </strong>

<strong>Html</strong><strong>文件的Head</strong><strong>中的缓存设置:</strong>

&lt;meta http-equiv="pragma" content="no-cache" /&gt;

&lt;meta http-equiv="Cache-Control" content="no-cache" /&gt;

&lt;meta http-equiv="expires" content="Wed, 26 Feb 1997 08:21:57 GMT" /&gt;

<strong>浏览器中关于Cache</strong><strong>的3</strong><strong>属性:</strong>

Cache-Control:

设置相对过期时间, max-age指明以秒为单位的缓存时间. 若对静态资源只缓存一次, 可以设置max-age的值为315360000000 (一万年).

<strong>Http</strong><strong>协议的cache-control</strong><strong>的常见取值及其组合释义:</strong>

no-cache: 数据内容不能被缓存, 每次请求都重新访问服务器, 若有max-age, 则缓存期间不访问服务器.

no-store: 不仅不能缓存, 连暂存也不可以(即: 临时文件夹中不能暂存该资源)

private(默认): 只能在浏览器中缓存, 只有在第一次请求的时候才访问服务器, 若有max-age, 则缓存期间不访问服务器.

public: 可以被任何缓存区缓存, 如: 浏览器、服务器、代理服务器等

max-age: 相对过期时间, 即以秒为单位的缓存时间.

no-cache, private: 打开新窗口时候重新访问服务器, 若设置max-age, 则缓存期间不访问服务器.

private, 正数的max-age: 后退时候不会访问服务器

no-cache, 正数的max-age: 后退时会访问服务器

点击刷新: 无论如何都会访问服务器.

Expires:

设置以分钟为单位的绝对过期时间, 优先级比Cache-Control低, 同时设置Expires和Cache-Control则后者生效.

Last-Modified:

该资源的最后修改时间, 在浏览器下一次请求资源时, 浏览器将先发送一个请求到服务器上, 并附上If-Unmodified-Since头来说明浏览器所缓存资源的最后修改时间, 如果服务器发现没有修改, 则直接返回304(Not Modified)回应信息给浏览器(内容很少), 如果服务器对比时间发现修改了, 则照常返回所请求的资源.

&nbsp;

注意:

Last-Modified属性通常和Expires或Cache-Control属性配合使用, 因为即使浏览器设置缓存, 当用户点击”刷新”按钮时, 浏览器会忽略缓存继续向服务器发送请求, 这时Last-Modified将能够很好的减小回应开销.

&nbsp;

ETag将返回给浏览器一个资源ID, 如果有了新版本则正常发送并附上新ID, 否则返回304， 但是在服务器集群情况下, 每个服务器将返回不同的ID, 因此不建议使用ETag.

&nbsp;

以上描述的客户端浏览器缓存是指存储位置在客户端浏览器, 但是对客户端浏览器缓存的实际设置工作是在服务器上的资源中完成的. 虽然刚才我们介绍了有关于客户端浏览器缓存的属性, 但是实际上对这些属性的设置工作都需要在服务器的资源中做设置. 我们有两种操作手段对浏览器缓存进行设置, 一个是通过页面指令声明来设置, 另外一个是通过编程方式来设置.

&nbsp;

浏览器缓存的设置手段:

第一: 通过页面指令声明来设置HTTP的缓存

页面指令&lt;%@ OutputCache Location=”Any” Duration=”10” VaryByParam=”ProductId” VaryByHeader=”Accept-Language”%&gt;中的Location用来设置缓存的位置, 该属性常见的值为:

Any(默认): 输出缓存可以位于任何地点, 对应于HttpCacheability.Public. 如: 客户端浏览器、代理服务器或服务器本身.

Client: 只能位于发出请求的客户端浏览器, 对应于HttpCacheability.Private.

Downstream: 输出缓存可以位于除服务器本身的其他任何地方, 如: 客户端浏览器、代理服务器.

Server: 输出缓存位于Web服务器本身, 对应于HttpCacheability.Server

ServerAndClient: 输出缓存只能位于服务器本身或客户端浏览器, 对应于HttpCacheability.Private和HttpCacheability.Server

None: 禁用输出缓存, 对应于HttpCacheability.NoCache.

VaryByParam属性: 根据请求参数的不同而缓存不同的版本. 多个值用分号(;)分隔, *号表示为任意参数或参数组合缓存不同版本, “none”表示只缓存一个版本.

VaryByHeader属性: 根据请求头来缓存不同的版本, 如同一页面的不同语言版本.

VaryByCustom属性: 根据自定义参数来缓存不同的版本, 如: VaryByCunstom=”browser”是系统已实现的, 根据浏览器名称和版本号缓存不同的版本. 也可以, 根据自定义参数来缓存, 如: VaryByCustom=”happy”, 此时系统不知道如何解释happy, 因此需要在Global.asax或IHttpModule实现类中重写GetVaryByCustomString()方法, 来完成处理逻辑.

VaryByControl属性: 根据用户控件中的服务器控件ID来缓存不同版本.

更高级的方式, 是通过配置文件来设置HTTP的缓存.

页面指令为&lt;%@ OutputCache CacheProfile=”cacheconfig”%&gt;, 其中cacheconfig是配置文件中的缓存配置节中CacheProfile的名称.
<div>View Code
<div id="cnblogs_code_open_c6451953-d048-4c1a-aa1d-39b4e297c264">
<div>&lt;system.web&gt;
&lt;caching&gt;
&lt;outputCacheSettings&gt;
&lt;outputCacheProfiles&gt;
&lt;add name="cacheconfig" duration="10" varyByParam="none"/&gt;
&lt;/outputCacheProfiles&gt;
&lt;/outputCacheSettings&gt;
&lt;/caching&gt;
&lt;/system.web&gt;</div>
<div>
<h1>nginx缓存cache的5种方案</h1>
1、传统缓存之一（404）

这个办法是把nginx的404错误定向到后端，然后用proxy_store把后端返回的页面保存。

配置：

location / {
root /home/html/;#主目录
expires 1d;#网页的过期时间
error_page 404 =200 /fetch$request_uri;#404定向到/fetch目录下
}

location /fetch/ {#404定向到这里
internal;#指明这个目录不能在外部直接访问到
expires 1d;#网页的过期时间
alias /home/html/;#虚拟目录文件系统地址要和locaion /一致，proxy_store会将文件保存到这目录下
proxy_pass ;#后端upstream地址，/fetch同时是一个代理
proxy_set_header Accept-Encoding '';#让后端不要返回压缩（gzip或deflate）的内容，保存压缩后的内容会引发乱子。
proxy_store on;#指定nginx将代理返回的文件保存
proxy_temp_path /home/tmp;#临时目录，这个目录要和/home/html在同一个硬盘分区内
}

使用的时候还有要注意是nginx要有权限往/home/tmp和/home/html下有写入文件的权限，在linux下nginx一般会配置成nobody用户运行，这样这两个目录就要chown nobody，设成nobody用户专用，当然也可以chmod 777，不过所有有经验的系统管理员都会建议不要随便使用777。

2、传统缓存之二（!-e）

原理和404跳转基本一致，但更简洁一些：

location / {
root /home/html/;
proxy_store on;
proxy_set_header Accept-Encoding '';
proxy_temp_path /home/tmp;
if ( !-f $request_filename )
{
        proxy_pass ;
}
}

可以看到这个配置比404节约了不少代码，它是用!-f来判断请求的文件在文件系统上存不存在，不存在就proxy_pass到后端，返回同样是用proxy_store保存。

两种传统缓存都有着基本一样的优点和缺点：

缺点1：不支持带参数的动态链接，比如read.php?id=1，因为nginx只保存文件名，所以这个链接只在文件系统下保存为read.php，这样用户访问read.php?id=2时会返回不正确的结果。同时不支持这种形式的首页和二级目录，因为nginx非常老实，会将这样的请求照链接写入文件系统，而这个链接显然是一个目录，所以保存失败。这些情况都需要写rewrite才能正确保存。
缺点2：nginx内部没有缓存过期和清理的任何机制，这些缓存的文件会永久性地保存在机器上，如果要缓存的东西非常多，那就会撑暴整个硬盘空间。为此可以使用一个shell脚本定期清理，同时可以撰写php等动态程序来做实时更新。
缺点3：只能缓存200状态码，因此后端返回301/302/404等状态码都不会缓存，假如恰好有一个访问量很大的伪静态链接被删除，那就会不停穿透导致后端承载不小压力。
缺点4：nginx不会自动选择内存或硬盘作为存储介质，一切由配置决定，当然在当前的操作系统里都会有操作系统级的文件缓存机制，所以存在硬盘上也不需要过分担心大并发读取造成的io性能问题。

nginx传统缓存的缺点也是它和squid等缓存软件的不同之特色，所以也可看作其优点。在生产应用中它常常用作和squid的搭档，squid对于带?的链接往往无法阻挡，而nginx能将其访问拦住，例如：?和在squid上会被当做两个链接，所以会造成两次穿透；而nginx只会保存一次，无论链接变成还是，均不能透过nginx缓存，从而有效地保护了后端主机。

nginx会非常老实地将链接形式保存到文件系统中，这样对于一个链接，可以很方便地查阅它在缓存机器上的缓存状态和内容，也可以很方便地和别的文件管理器如rsync等配合使用，它完完全全就是一个文件系统结构。

这两种传统缓存都可以在linux下将文件保存到/dev/shm里，一般我也是这么做的，这样可以利用系统内存来做缓存，利用内存的话，清理过期内容速度就会快得多。使用/dev/shm/时除了要把tmp目录也指向到/dev/shm这个分区外，如果有大量小文件和目录，还要修改一下这个内存分区的inode数量和最大容量：

mount -o size=2500M -o nr_inodes=480000 -o noatime,nodiratime -o remount /dev/shm

上面的命令在一台有3G内存的机器上使用，因为/dev/shm默认最大内存是系统内存的一半就是1500M，这条命令将其调大成2500M，同时shm系统inode数量默认情况下可能是不够用的，但有趣的是它可以随意调节，这里调节为480000保守了点，但也基本够用了。

3、基于memcached的缓存

nginx对memcached有所支持，但是功能并不是特别之强，性能上还是非常之优秀。

location /mem/ {
    if ( $uri ~ "^/mem/([0-9A-Za-z_]*)$" )
    {
     set $memcached_key "$1";
     memcached_pass     192.168.1.2:11211;
    }
    expires 70;
}

这个配置会将指明到memcached的abc这个key去取数据。

nginx目前没有写入memcached的任何机制，所以要往memcached里写入数据得用后台的动态语言完成，可以利用404定向到后端去写入数据。

4、基于第三方插件ncache

ncache是新浪兄弟开发的一个不错的项目，它利用nginx和memcached实现了一部分类似squid缓存的功能，我并没有使用这个插件的经验，可以参考：

&nbsp;

5、nginx新开发的proxy_cache功能

从nginx-0.7.44版开始，nginx支持了类似squid较为正规的cache功能，目前还处于开发阶段，支持相当有限，这个缓存是把链接用md5编码hash后保存，所以它可以支持任意链接，同时也支持404/301/302这样的非200状态。

配置：

首先配置一个cache空间：

proxy_cache_path /path/to/cache levels=1:2 keys_zone=NAME:10m inactive=5m max_size=2m clean_time=1m;

#注意这个配置是在server标签外，levels指定该缓存空间有两层hash目录，第一层目录是1个字母，第二层为2个字母，保存的文件名就会类似/path/to/cache/c/29/b7f54b2df7773722d382f4809d65029c；keys_zone为这个空间起个名字，10m指空间大小为10MB；inactive的5m指缓存默认时长5分钟；max_size的2m是指单个文件超过2m的就不缓存；clean_time指定一分钟清理一次缓存。

location / {
    proxy_pass ;

    proxy_cache NAME;#使用NAME这个keys_zone

    proxy_cache_valid 200 302 1h;#200和302状态码保存1小时
    proxy_cache_valid 301 1d;#301状态码保存一天
    proxy_cache_valid any 1m;#其它的保存一分钟
}

ps：支持cache的0.7.44到0.7.51这几个版本的稳定性均有问题，访问有些链接会出现错误，所以这几个版本最好不要在生产环境中使用。nginx-0.7下目前所知较为稳定的版本是0.7.39。稳定版0.6.36版也是近期更新，如果在配置里没有使用到0.7的一些新标签新功能，也可以使用0.6.36版。

</div>
</div>
</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>91</wp:post_id>
		<wp:post_date>2011-11-30 17:54:46</wp:post_date>
		<wp:post_date_gmt>2011-11-30 09:54:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nginx%e7%bc%93%e5%ad%98cache%e7%9a%845%e7%a7%8d%e6%96%b9%e6%a1%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cache"><![CDATA[cache]]></category>
		<category domain="post_tag" nicename="nginx"><![CDATA[nginx]]></category>
		<category domain="post_tag" nicename="web"><![CDATA[web]]></category>
		<category domain="post_tag" nicename="website-manage"><![CDATA[website-manage]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Active Record-Query Interface-CN</title>
		<link></link>
		<pubDate>Fri, 02 Dec 2011 09:54:26 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=94</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Active Record</h1>
Active Record<span style="font-family: DejaVu Sans;">（中文名：活动记录）是一种领域模型模式，特点是一个模型类对应关系型数据库中的一个表，而模型类的一个实例对应表中的一行记录。</span>Active Record <span style="font-family: DejaVu Sans;">和</span>Row Gateway <span style="font-family: DejaVu Sans;">（行记录入口）十分相似，但前者是领域模型，后者是一种数据源模式。关系型数据库往往通过外键来表述实体关系，</span>Active Record <span style="font-family: DejaVu Sans;">在数据源层面上也将这种关系映射为对象的关联和聚集。</span>

<span style="font-family: DejaVu Sans;">　　</span>Active Record <span style="font-family: DejaVu Sans;">适合非常简单的领域需求，尤其在领域模型和数据库模型十分相似的情况下。如果遇到更加复杂的领域模型结构（例如用到继承、策略的领域模型），往往需要使用分离数据源的领域模型，结合</span>Data Mapper <span style="font-family: DejaVu Sans;">（数据映射器）使用。</span>

<span style="font-family: DejaVu Sans;">　　</span>Active Record <span style="font-family: DejaVu Sans;">驱动框架一般兼有</span>ORM <span style="font-family: DejaVu Sans;">框架的功能，但</span>ActivActive Recorde Record <span style="font-family: DejaVu Sans;">不是简单的</span>ORM<span style="font-family: DejaVu Sans;">，正如和</span>Row Gateway <span style="font-family: DejaVu Sans;">的区别。著名的例子是全栈（</span>Full Stack<span style="font-family: DejaVu Sans;">）</span>Web <span style="font-family: DejaVu Sans;">开发框架</span>Ruby on Rails <span style="font-family: DejaVu Sans;">，其默认使用一个纯</span>Ruby <span style="font-family: DejaVu Sans;">写成的</span><strong>Active</strong><strong> </strong><strong>Record</strong><strong> </strong><span style="font-family: DejaVu Sans;"><strong>框架</strong>来驱动</span>MVC <span style="font-family: DejaVu Sans;">中的模型层。</span>

<span style="font-family: DejaVu Sans;">　　对象关系映射（</span>ORM<span style="font-family: DejaVu Sans;">）提供了概念性的、易于理解的模型化数据的方法。</span>ORM<span style="font-family: DejaVu Sans;">方法论基于三个核心原则：简单：以最基本的形式建模数据。传达性：数据库结构被任何人都能理解的语言文档化。精确性：基于数据模型创建正确标准化了的结构。</span>

<span style="font-family: DejaVu Sans;">　　在</span>Martin Fowler <span style="font-family: DejaVu Sans;">的《企业应用架构模式》一书中曾详细叙述了本模式。</span>

<span style="font-family: DejaVu Sans;">　　以下是著名的</span>Active Record <span style="font-family: DejaVu Sans;">驱动框架：</span>

<span style="font-family: DejaVu Sans;">　　</span>SQLObject(Python)

<span style="font-family: DejaVu Sans;">　　</span>Ruby on Rails ActiveRecord (Ruby)

<span style="font-family: DejaVu Sans;">　　</span>Yii Framework ActiveRecord (PHP)

<span style="font-family: DejaVu Sans;">　　</span>Castle ActiveRecord (.NET)
<h2>Migrations</h2>
Migrations are a convenient way for you to alter<span style="font-family: DejaVu Sans;">移动</span>your database in a structured and organized manner.Migrations<span style="font-family: DejaVu Sans;">是一种很便捷的方法让你能够以一种结构化的和有组织的方式来迁移你的数据库。</span>You could edit fragments of SQL by hand but you would then be responsible for telling other developers that they need to go and run them.<span style="font-family: DejaVu Sans;">你可以手动编辑</span>SQL<span style="font-family: DejaVu Sans;">片段，而且你有责任把这些告诉其他的开发人员，因为他们需要开发和使用它们。</span>You’d also have to keep track of which changes need to be run against the production machines next time you deploy.<span style="font-family: DejaVu Sans;">你也可以跟踪对你部署的代码在接下来的</span>production<span style="font-family: DejaVu Sans;">机器（将会）发生的变化。</span>

Active Record tracks which migrations have already been run so all you have to do is update your source and run <tt>rake</tt><tt> </tt><tt>db:migrate</tt>.Active Record<span style="font-family: DejaVu Sans;">跟踪并迁移你已经运行过的（代码和数据），而你只需要在更新了你的源代码的时候执行</span><tt>rake</tt><tt> </tt><tt>db:migrate</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>Active Record will work out which migrations should be run.Active Recor<span style="font-family: DejaVu Sans;">将会计算出那些迁移需要被执行。</span>It will also update your <tt>db/schema.rb</tt> file to match the structure of your database.<span style="font-family: DejaVu Sans;">它还会更新你的</span><tt>db/schema.rb</tt><span style="font-family: DejaVu Sans;"><tt>文件使其于你的数据库结构相匹配。</tt></span>

Rails<span style="font-family: DejaVu Sans;">使用的是</span><strong>Active</strong><strong> </strong><strong>Record</strong><strong> </strong><span style="font-family: DejaVu Sans;"><strong>框架</strong>来处理数据迁移，这里笔者把</span>Active Record <span style="font-family: DejaVu Sans;">框架放在一个地方学习了，如需了解</span>Migration<span style="font-family: DejaVu Sans;">部分需要直接阅读</span>Migration<span style="font-family: DejaVu Sans;">部分。</span>

&nbsp;
<h2>Active Record Validations and Callbacks <span style="font-family: WenQuanYi Micro Hei;">活动记录验证和回调</span></h2>
This guide teaches you how to hook<span style="font-family: DejaVu Sans;">勾子</span>into the life cycle of your Active Record objects.<span style="font-family: DejaVu Sans;">这个教程指导你怎样挂接到你的</span>Active Record objects<span style="font-family: DejaVu Sans;">的生存周期。</span>You will learn how to validate the state of objects before they go into the database, and how to perform custom operations at certain points in the object life cycle.<span style="font-family: DejaVu Sans;">你将会学习到在将数据对象存入数据库之前怎样验证它们的状态，以及在对象生存周期的一些点上怎样执行定制操作。</span>

Rails<span style="font-family: DejaVu Sans;">使用的是</span><strong>Active</strong><strong> </strong><strong>Record</strong><strong> </strong><span style="font-family: DejaVu Sans;"><strong>框架</strong>来处理验证和回调，这里笔者把</span>Active Record <span style="font-family: DejaVu Sans;">框架放在一个地方学习了，如需了解</span>Migration<span style="font-family: DejaVu Sans;">部分需要直接阅读</span>Validations and Callbacks <span style="font-family: DejaVu Sans;">部分。</span>
<h2><strong>A</strong><strong> </strong><strong>Guide</strong><strong> </strong><strong>to</strong><strong> </strong><strong>Active</strong><strong> </strong><strong>Record</strong><strong> </strong><strong>Associations</strong></h2>
This guide covers the association features of Active Record. By referring to this guide, you will be able to:<span style="font-family: DejaVu Sans;">本教程涵盖了</span>Active Record<span style="font-family: DejaVu Sans;">的关系部分的特性。（通过）这个教程提及的，你将能够：</span>
<ul>
	<li>Declare associations between Active Record models <span style="font-family: DejaVu Sans;">在</span>Active Record<span style="font-family: DejaVu Sans;">的</span>models<span style="font-family: DejaVu Sans;">中声明（它们的）关系</span></li>
	<li>Understand the various types of Active Record associations <span style="font-family: DejaVu Sans;">明白各种类型的</span>Active Record<span style="font-family: DejaVu Sans;">关系</span></li>
	<li>Use the methods added to your models by creating associations <span style="font-family: DejaVu Sans;">通过添加方法到</span>models<span style="font-family: DejaVu Sans;">（的形式）来创建关系</span></li>
</ul>
<h2>Active Record Query Interface<span style="font-family: WenQuanYi Micro Hei;">（基于）活动记录的查询接口</span></h2>
This guide covers different ways to retrieve data from the database using Active Record. By referring to this guide, you will be able to:

<span style="font-family: DejaVu Sans;">这个教程涵盖了使用基于</span>Active Record <span style="font-family: DejaVu Sans;">的不同方式从数据库检索数据。同过参考这个教程，你可以掌握：</span>
<ul>
	<li>Find records using a variety of methods and conditions <span style="font-family: DejaVu Sans;">使用各种方法和条件查找记录</span></li>
	<li>Specify the order, retrieved attributes, grouping, and other properties of the found records<span style="font-family: DejaVu Sans;">对查找的记录指定顺序，检索属性，组，和其他属性</span></li>
	<li>Use eager<span style="font-family: DejaVu Sans;">急于</span>loading to reduce the number of database queries needed for data retrieval <span style="font-family: DejaVu Sans;">使用预先加载，以减少数据检索所需的数据库查询数量</span></li>
	<li>Use dynamic finders methods <span style="font-family: DejaVu Sans;">使用多元搜索方法</span></li>
	<li>Check for the existence of particular records <span style="font-family: DejaVu Sans;">在特定的记录部分检查存在的记录</span></li>
	<li>Perform various calculations on Active Record models <span style="font-family: DejaVu Sans;">在</span>Active Record <span style="font-family: DejaVu Sans;">模型中执行各种计算</span></li>
</ul>
<span style="color: #800000;">This</span><span style="color: #800000;">Guide</span><span style="color: #800000;">is</span><span style="color: #800000;">based</span><span style="color: #800000;">on</span><span style="color: #800000;">Rails</span><span style="color: #800000;">3.0.</span><span style="color: #800000;">Some</span><span style="color: #800000;">of</span><span style="color: #800000;">the</span><span style="color: #800000;">code</span><span style="color: #800000;">shown</span><span style="color: #800000;">here</span><span style="color: #800000;">will</span><span style="color: #800000;">not</span><span style="color: #800000;">work</span><span style="color: #800000;">in</span><span style="color: #800000;">other</span><span style="color: #800000;">versions</span><span style="color: #800000;">of</span><span style="color: #800000;">Rails.</span>

If you’re used to using raw SQL to find database records then, generally, you will find that there are better ways to carry out<span style="font-family: DejaVu Sans;">进行</span>the same operations in Rails. Active Record insulates you from the need to use SQL in most cases.<span style="font-family: DejaVu Sans;">如果你使用过原生的</span>SQL<span style="font-family: DejaVu Sans;">（语句）来查询数据库，那么，一般情况下，你将会发现（对数据库）进行同样的操作在</span>Rails<span style="font-family: DejaVu Sans;">中会有这更好的方法。</span>Active Record<span style="font-family: DejaVu Sans;">在大多数情况下会让你远离你（以前）需要使用的</span>SQL<span style="font-family: DejaVu Sans;">查询语句。</span>

Code examples throughout this guide will refer to one or more of the following models:<span style="font-family: DejaVu Sans;">贯穿这个教材代码示例将会参考一个或多个下面的模型：</span>

All of the following models use <tt>id</tt> as the primary key, unless specified otherwise.<span style="font-family: DejaVu Sans;">所有的模型都会使用</span>id<span style="font-family: DejaVu Sans;">作为主键，除非指定了其他主键。</span>

<em>class Client &lt; ActiveRecord::Base</em>

<em>has_one :address</em>

<em>has_many :orders</em>

<em>has_and_belongs_to_many :roles</em>

<em>end</em>

&nbsp;

<em>class Address &lt; ActiveRecord::Base</em>

<em>belongs_to :client</em>

<em>end</em>

&nbsp;

<em>class Order &lt; ActiveRecord::Base</em>

<em>belongs_to :client, :counter_cache =&gt; true</em>

<em>end</em>

&nbsp;

<em>class Role &lt; ActiveRecord::Base</em>

<em>has_and_belongs_to_many :clients</em>

<em>end</em>

Active Record will perform queries on the database for you and is compatible<span style="font-family: DejaVu Sans;">兼容</span>with most database systems (MySQL, PostgreSQL and SQLite to name a few). Regardless of which database system you’re using, the Active Record method format will always be the same.

Active Record<span style="font-family: DejaVu Sans;">将会为你在数据库中执行查询并且它兼容大多数的数据库系统（</span>MySQL, PostgreSQL and SQLite<span style="font-family: DejaVu Sans;">这里仅仅列举这些）。不管你使用的是何种数据库系统，</span>Active Record<span style="font-family: DejaVu Sans;">的方法格式通常是相同的。</span>
<h3><a name="retrieving-objects-from-the-database"></a> 1 Retrieving Objects from the Database<span style="font-family: WenQuanYi Micro Hei;">在数据库中检索对象</span></h3>
To retrieve objects from the database, Active Record provides several finder methods. Each finder method allows you to pass arguments into it to perform certain queries on your database without writing raw SQL.

<span style="font-family: DejaVu Sans;">为了从数据库中检索对象，</span>Active Record<span style="font-family: DejaVu Sans;">提供了一些查询方法。每个查询方法都运行你带入参数并在数据库中执行查询而不用写</span>SQL<span style="font-family: DejaVu Sans;">自身的语句。</span>

The methods are:
<ul>
	<li><tt>where</tt></li>
	<li><tt>select</tt></li>
	<li><tt>group</tt></li>
	<li><tt>order</tt></li>
	<li><tt>reorder</tt></li>
	<li><tt>reverse_order</tt> <span style="font-family: DejaVu Sans;">逆向排序</span></li>
	<li><tt>limit</tt></li>
	<li><tt>offset</tt> <span style="font-family: DejaVu Sans;">偏移</span></li>
	<li><tt>joins</tt></li>
	<li><tt>includes</tt></li>
	<li><tt>lock</tt></li>
	<li><tt>readonly</tt></li>
	<li><tt>from</tt></li>
	<li><tt>having</tt></li>
</ul>
All of the above methods return an instance of <tt>ActiveRecord::Relation</tt>.<span style="font-family: DejaVu Sans;">所有以上方法会返回一个</span><tt>ActiveRecord::Relation</tt><span style="font-family: DejaVu Sans;"><tt>的实例。</tt></span>

Primary operation of <tt>Model.find(options)</tt> can be summarized as:

<tt>Model.find(options)</tt><span style="font-family: DejaVu Sans;"><tt>主要的操作可以被概括为：</tt></span>
<ul>
	<li>Convert the supplied options to an equivalent SQL query. <span style="font-family: DejaVu Sans;">转换提供的（查询）选项为等同的</span>SQL<span style="font-family: DejaVu Sans;">查询</span></li>
	<li>Fire the SQL query and retrieve the corresponding results from the database. <span style="font-family: DejaVu Sans;">开始</span>SQL<span style="font-family: DejaVu Sans;">查询并且检索从数据库相应的结果</span></li>
	<li>Instantiate the equivalent Ruby object of the appropriate model for every resulting row. <span style="font-family: DejaVu Sans;">把每个（数据库中原生的）结果实例化等同的</span>Ruby<span style="font-family: DejaVu Sans;">对象</span></li>
	<li>Run <tt>after_find</tt> callbacks if any. <span style="font-family: DejaVu Sans;">运行</span><tt>after_find</tt><span style="font-family: DejaVu Sans;"><tt>进行回调如果需要</tt></span></li>
</ul>
<h4><a name="retrieving-a-single-object"></a>1.1 Retrieving a Single Object<span style="font-family: WenQuanYi Micro Hei;">检索单个对象</span></h4>
Active Record lets you retrieve a single object using five different ways.

Active Record<span style="font-family: DejaVu Sans;">让你可以使用五种不同的方法检索单个对象。</span>
<h5><a name="using-a-primary-key"></a>1.1.1 Using a Primary Key<span style="font-family: WenQuanYi Micro Hei;">使用主键查询</span></h5>
Using <tt>Model.find(primary_key)</tt>, you can retrieve the object corresponding to the supplied <em>primary</em><em> </em><em>key</em> and matching the supplied options (if any). For example:

<span style="font-family: DejaVu Sans;"><tt>使用</tt></span><tt>Model.find(primary_key)</tt><span style="font-family: DejaVu Sans;"><tt>，你可以检索对象通过提供相应的主键或者匹配提供的其他选项（如果存在）。例如：</tt></span>

<tt><em>#</em></tt><tt><em> </em></tt><tt><em>Find</em></tt><tt><em> </em></tt><tt><em>the</em></tt><tt><em> </em></tt><tt><em>client</em></tt><tt><em> </em></tt><tt><em>with</em></tt><tt><em> </em></tt><tt><em>primary</em></tt><tt><em> </em></tt><tt><em>key</em></tt><tt><em> </em></tt><tt><em>(id)</em></tt><tt><em> </em></tt><tt><em>1.</em></tt>

<tt><em>rails</em></tt><tt><em> </em></tt><tt><em>console</em></tt>

<tt><em>Loading development environment (Rails 3.1.1)</em></tt>

<tt><em>irb(main):001:0&gt; p=Post.find(1)</em></tt>

<tt> </tt><tt><em>Post Load (9.0ms) SELECT "posts".* FROM "posts" WHERE "posts"."id" = ? LIMIT 1 [["id", 1]]</em></tt>

<tt><em>=&gt; #&lt;Post id: 1, name: "</em></tt><span style="font-family: DejaVu Sans;"><tt><em>阿飞姐姐</em></tt></span><tt><em>", title: "</em></tt><span style="font-family: DejaVu Sans;"><tt><em>接口姐姐</em></tt></span><tt><em>", content: "12342424", created_at: "2011-11-05 15:10:41", updated_at: "2011-11-05 15:10:41"&gt;</em></tt>

<tt>SQL</tt><tt> </tt><tt>equivalent</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>above</tt><tt> </tt><tt>is:</tt>

<tt><em>SELECT * FROM posts WHERE (posts.id = 1)</em></tt>

<tt>Model.find(primary_key)</tt> will raise an <tt>ActiveRecord::RecordNotFound</tt> exception if no matching record is found.

<tt>Model.find(primary_key)</tt><span style="font-family: DejaVu Sans;"><tt>如果没有记录匹配则会抛出一个</tt><tt></tt></span><tt>ActiveRecord::RecordNotFound</tt><span style="font-family: DejaVu Sans;"><tt>异常。</tt></span>
<h5><a name="first"></a>1.1.2 <tt>first</tt></h5>
<tt>Model.first</tt> finds the first record matched by the supplied options. For example:

<tt>Model.first</tt><span style="font-family: DejaVu Sans;"><tt>找到与提供的选项匹配的第一条记录。例如：</tt></span>

<tt><em>client = Client.first</em></tt>

<tt><em>=&gt; #&lt;Client id: 1, first_name: "Lifo"&gt;</em></tt>

<tt><em>irb(main):018:0&gt; Post.first</em></tt>

<tt> </tt><tt><em>Post Load (0.4ms) SELECT "posts".* FROM "posts" LIMIT 1</em></tt>

<tt><em>=&gt; #&lt;Post id: 2, name: "jhjguxin", title: "test console", content: "A new post to test console", created_at: "2011-11-05 15:55:17", updated_at: "2011-11-05 15:55:17"</em></tt>

SQL equivalent of the above is:

<tt><em>SELECT * FROM clients LIMIT 1</em></tt>

<tt>Model.first</tt> returns <tt>nil</tt> if no matching record is found. No exception will be raised.

<span style="font-family: DejaVu Sans;"><tt>如果没有记录匹配</tt></span><tt>Model.first</tt><span style="font-family: DejaVu Sans;"><tt>会返回</tt></span><tt>nil</tt><span style="font-family: DejaVu Sans;"><tt>。不会抛出异常。</tt></span>
<h5><a name="last"></a>1.1.3 <tt>last</tt></h5>
<tt>Model.last</tt> finds the last record matched by the supplied options. For example:

<tt><em>client = Client.last</em></tt>

<tt><em>=&gt; #&lt;Client id: 221, first_name: "Russel"&gt;</em></tt>

SQL equivalent of the above is:<span style="font-family: DejaVu Sans;">上面等同的</span>SQL<span style="font-family: DejaVu Sans;">语句是：</span>

<tt><em>SELECT * FROM clients ORDER BY clients.id DESC LIMIT 1</em></tt>

<tt><em>##SELECT "posts".* FROM "posts" ORDER BY "posts"."id" DESC LIMIT 1</em></tt>

<tt>Model.last</tt> returns <tt>nil</tt> if no matching record is found. No exception will be raised.

<span style="font-family: DejaVu Sans;">如果没有记录匹配</span><tt>Model.last</tt><span style="font-family: DejaVu Sans;"><tt>会返回</tt></span><tt>nil</tt><span style="font-family: DejaVu Sans;"><tt>。不会抛出异常。</tt></span>
<h4><a name="retrieving-multiple-objects"></a>1.2 Retrieving Multiple Objects<span style="font-family: WenQuanYi Micro Hei;">检索多个目标</span></h4>
<h5><a name="using-multiple-primary-keys"></a>1.2.1 Using Multiple Primary Keys<span style="font-family: WenQuanYi Micro Hei;">使用多个主键</span></h5>
<tt>Model.find(array_of_primary_key)</tt> also accepts an array of <em>primary</em><em> </em><em>keys</em>. An array of all the matching records for the supplied <em>primary</em><em> </em><em>keys</em> is returned. For example:

<tt>Model.find(array_of_primary_key)</tt><span style="font-family: DejaVu Sans;"><tt>也接受一个主键数组。将会返回一个由所有与提供的主键匹配的记录组成的数组。例如：</tt></span>

<tt><em># Find the clients with primary keys 1 and 10.</em></tt>

<tt><em>client = Client.find(1, 10) # Or even Client.find([1, 10])</em></tt>

<tt><em>=&gt; [#&lt;Client id: 1, first_name: =&gt; "Lifo"&gt;, #&lt;Client id: 10, first_name: =&gt; "Ryan"&gt;]</em></tt>

SQL equivalent of the above is:

<tt><em>SELECT * FROM clients WHERE (clients.id IN (1,10))</em></tt>

<tt><span style="color: #800000;">Model.find(array_of_primary_key)</span></tt><span style="color: #800000;">will</span><span style="color: #800000;">raise</span><span style="color: #800000;">an</span><tt><span style="color: #800000;">ActiveRecord::RecordNotFound</span></tt><span style="color: #800000;">exception</span><span style="color: #800000;">unless</span><span style="color: #800000;">a</span><span style="color: #800000;">matching</span><span style="color: #800000;">record</span><span style="color: #800000;">is</span><span style="color: #800000;">found</span><span style="color: #800000;">for</span><strong><span style="color: #800000;">all</span></strong><span style="color: #800000;">of</span><span style="color: #800000;">the</span><span style="color: #800000;">supplied</span><span style="color: #800000;">primary</span><span style="color: #800000;">keys.</span>

<tt><span style="color: #800000;">Model.find(array_of_primary_key)</span></tt><span style="font-family: DejaVu Sans;"><tt><span style="color: #800000;">只要有一条记录没有找到就会抛出</span></tt><tt></tt></span><tt><span style="color: #800000;">ActiveRecord::RecordNotFound</span></tt><span style="font-family: DejaVu Sans;"><tt><span style="color: #800000;">异常</span></tt></span>

<tt><span style="color: #800000;">ActiveRecord::RecordNotFound:</span></tt><tt></tt><tt><span style="color: #800000;">Couldn't</span></tt><tt></tt><tt><span style="color: #800000;">find</span></tt><tt></tt><tt><span style="color: #800000;">all</span></tt><tt></tt><tt><span style="color: #800000;">Posts</span></tt><tt></tt><tt><span style="color: #800000;">with</span></tt><tt></tt><tt><span style="color: #800000;">IDs</span></tt><tt></tt><tt><span style="color: #800000;">(2,</span></tt><tt></tt><tt><span style="color: #800000;">4,</span></tt><tt></tt><tt><span style="color: #800000;">5)</span></tt><tt></tt><tt><span style="color: #800000;">(found</span></tt><tt></tt><tt><span style="color: #800000;">2</span></tt><tt></tt><tt><span style="color: #800000;">results,</span></tt><tt></tt><tt><span style="color: #800000;">but</span></tt><tt></tt><tt><span style="color: #800000;">was</span></tt><tt></tt><tt><span style="color: #800000;">looking</span></tt><tt></tt><tt><span style="color: #800000;">for</span></tt><tt></tt><tt><span style="color: #800000;">3)</span></tt>
<h4><a name="retrieving-multiple-objects-in-batches"></a> 1.3 Retrieving Multiple Objects in Batches<span style="font-family: WenQuanYi Micro Hei;">分批次的检索多个目标</span></h4>
Sometimes you need to iterate<span style="font-family: DejaVu Sans;">反复重复</span>over a large set of records. For example to send a newsletter to all users, to export some data, etc.

<span style="font-family: DejaVu Sans;">有时候你需要遍历大量的记录，例如发送一条业务通讯给所有的用户，输出一些数据，等等。</span>

The following may seem very straight forward at first:

<span style="font-family: DejaVu Sans;">首先（通过）以下内容看起来会非常直观</span>

<tt><em># Very inefficient when users table has thousands of rows.</em></tt>

<tt><em>User.all.each do |user|</em></tt>

<tt> </tt><tt><em>NewsLetter.weekly_deliver(user)</em></tt>

<tt><em>end</em></tt>

But if the total number of rows in the table is very large, the above approach may vary from being under performant to just plain<span style="font-family: DejaVu Sans;">平原</span>impossible.

<span style="font-family: DejaVu Sans;">但是如果（数据）表单的行有非常大的量，上面的方法在执行（的时候）不可能性能（还是那么）平稳。</span>

This is because <tt>User.all.each</tt> makes Active Record fetch <em>the</em><em> </em><em>entire</em><em> </em><em>table</em>, build a model object per row, and keep the entire array in the memory. Sometimes that is just too many objects and demands too much memory.

<span style="font-family: DejaVu Sans;">这是因为</span><tt>User.all.each</tt><span style="font-family: DejaVu Sans;"><tt>使得</tt><tt></tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>获取整个表单，给每一行数据创建一个</tt></span><tt>object</tt><tt> </tt><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>，并且保留整个数组在内存中。有时会有太多的对象并且需要太多的内存。</tt></span>

&nbsp;

<strong>Configuring</strong><strong> </strong><strong>the</strong><strong> </strong><strong>batch</strong><strong> </strong><strong>size<span style="font-family: DejaVu Sans;">配置批次大小</span></strong>

Behind the scenes <tt>find_each</tt> fetches rows in batches of <tt>1000</tt> and yields them one by one. The size of the underlying batches is configurable via the <tt>:batch_size</tt> option.<span style="font-family: DejaVu Sans;">在使用</span><tt>find_each</tt><span style="font-family: DejaVu Sans;"><tt>获取</tt></span><tt>1000</tt><span style="font-family: DejaVu Sans;"><tt>次记录行并且一个接一个的</tt></span><tt>yield</tt><span style="font-family: DejaVu Sans;"><tt>它们的情况中。（确定）下面（查找）批次的大小是通过配置</tt></span><tt>:batch_size</tt><span style="font-family: DejaVu Sans;"><tt>选项。</tt></span>

To fetch <tt>User</tt> records in batch size of <tt>5000</tt>:

<tt><em>User.find_each(:batch_size =&gt; 5000) do |user|</em></tt>

<tt> </tt><tt><em>NewsLetter.weekly_deliver(user)</em></tt>

<tt><em>end</em></tt>

&nbsp;

<strong>Starting</strong><strong> </strong><strong>batch</strong><strong> </strong><strong>find</strong><strong> </strong><strong>from</strong><strong> </strong><strong>a</strong><strong> </strong><strong>specific</strong><strong> </strong><strong>primary</strong><strong> </strong><strong>key<span style="font-family: DejaVu Sans;">通过一个指定的主键开始批次查找</span></strong>

Records are fetched in ascending order on the primary key, which must be an integer. The <tt>:start</tt> option allows you to configure the first ID of the sequence if the lowest is not the one you need. This may be useful for example to be able to resume an interrupted batch process if it saves the last processed ID as a checkpoint.<span style="font-family: DejaVu Sans;">这会非常有用比如能够减少因为设置最后处理的</span>ID<span style="font-family: DejaVu Sans;">作为</span>checkpoint<span style="font-family: DejaVu Sans;">引起的中断。</span>

<span style="font-family: DejaVu Sans;">（这里）是按照主键值的升序排列获取记录的，主键值必须是整数。</span><tt>:start</tt><span style="font-family: DejaVu Sans;"><tt>选项允许你配置序列的开始</tt></span><tt>ID</tt><span style="font-family: DejaVu Sans;"><tt>如果排序最低的（记录）不是你需要的。</tt></span>

To send newsletters only to users with the primary key starting from <tt>2000</tt>:

User.find_each(:batch_size =&gt; 5000, :start =&gt; 2000) do |user|

NewsLetter.weekly_deliver(user)

end

<strong>Additional</strong><strong> </strong><strong>options<span style="font-family: DejaVu Sans;">其他（附加）选项</span></strong>

<tt>find_each</tt> accepts the same options as the regular <tt>find</tt> method. However, <tt>:order</tt> and <tt>:limit</tt> are needed internally and hence not allowed to be passed explicitly.

<tt>find_each</tt><span style="font-family: DejaVu Sans;"><tt>接受和正则</tt></span><tt>find</tt><span style="font-family: DejaVu Sans;"><tt>方法相同的选项。</tt></span>
<h5><a name="find_in_batches"></a>1.3.2 <tt>find_in_batches</tt></h5>
You can also work by chunks instead of row by row using <tt>find_in_batches</tt>. This method is analogous to <tt>find_each</tt>, but it yields arrays of models instead:

<span style="font-family: DejaVu Sans;"><tt>通过使用</tt></span><tt>find_in_batches</tt><span style="font-family: DejaVu Sans;">你也可以用</span>chunks<span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">替代数据行。这个方法类似于 </span></span><tt>find_each</tt><span style="font-family: DejaVu Sans;"><tt>，但是作为替代它（会输出）到一个数组区域：</tt></span>

<tt><em># Works in chunks of 1000 invoices at a time.</em></tt>

<tt><em>Invoice.find_in_batches(:include =&gt; :invoice_lines) do |invoices|</em></tt>

<tt> </tt><tt><em>export.add_invoices(invoices)</em></tt>

<tt><em>end</em></tt>

The above will yield the supplied block with <tt>1000</tt> invoices every time.<span style="font-family: DejaVu Sans;">上面的语句每次会提供给语句</span>1000invoices<span style="font-family: DejaVu Sans;">。</span>
<h3><a name="conditions"></a>2 Conditions<span style="font-family: WenQuanYi Micro Hei;">条件</span></h3>
The <tt>where</tt> method allows you to specify conditions to limit the records returned, representing the <tt>WHERE</tt>-part of the SQL statement. Conditions can either be specified as a string, array, or hash.

where<span style="font-family: DejaVu Sans;">方法允许你指定条件限制记录返回（的内容），表示</span>SQL<span style="font-family: DejaVu Sans;">部分的</span>WHERE<span style="font-family: DejaVu Sans;">部分。条件可以指定为一个字符串，数组，或者</span>hash<span style="font-family: DejaVu Sans;">（字典）。</span>
<h4><a name="pure-string-conditions"></a>2.1 Pure String Conditions<span style="font-family: WenQuanYi Micro Hei;">纯字符串条件</span></h4>
If you’d like to add conditions to your find, you could just specify them in there, just like <tt>Client.where("orders_count</tt><tt> </tt><tt>=</tt><tt> </tt><tt>'2'")</tt>. This will find all clients <strong>where</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>orders_count</strong></tt><strong> </strong><strong>field</strong><strong>’</strong><strong>s</strong><strong> </strong><strong>value</strong><strong> </strong><strong>is</strong><strong> </strong><strong>2</strong>.

<strong>Building</strong><strong> </strong><strong>your</strong><strong> </strong><strong>own</strong><strong> </strong><strong>conditions</strong><strong> </strong><strong>as</strong><strong> </strong><strong>pure</strong><strong> </strong><strong>strings</strong><strong> </strong><strong>can</strong><strong> </strong><strong>leave</strong><strong> </strong><strong>you</strong><strong> </strong><strong>vulnerable</strong><span style="font-family: DejaVu Sans;"><strong>脆弱</strong></span><strong>to</strong><strong> </strong><strong>SQL</strong><strong> </strong><strong>injection</strong><span style="font-family: DejaVu Sans;"><strong>注入</strong></span><strong>exploits</strong><span style="font-family: DejaVu Sans;"><strong>漏洞</strong></span><strong>.</strong> For example, <tt>Client.where("first_name</tt><tt> </tt><tt>LIKE</tt><tt> </tt><tt>'%#{params[:first_name]}%'")</tt> is not safe. See the next section for the preferred way to handle conditions using an array.
<h4><a name="array-conditions"></a>2.2 Array Conditions</h4>
Now what if that number could vary, say as an argument from somewhere? The find then becomes something like:

<span style="font-family: DejaVu Sans;">现在，如果这个数字可能会有所不同，（比如说）作为某个地方的一个参数？查找会变成如下：</span>

<tt><span style="color: #000000;"><span style="font-size: small;"><em>Client.where("orders_count = ?", params[:orders])</em></span></span></tt>

Active Record will go through the first element in the conditions value and any additional elements will replace the question marks <tt>(?)</tt> in the first element.

Active Record<span style="font-family: DejaVu Sans;">将会在第一个元素中表示条件（语句）并且其他元素取代第一个元素中的问号。</span>

Or if you want to specify two conditions, you can do it like:

<tt><em>Client.where("orders_count = ? AND locked = ?", params[:orders], false)</em></tt>

In this example, the first question mark will be replaced with the value in <tt>params[:orders]</tt> and the second will be replaced with the SQL representation of <tt>false</tt>, which depends on the adapter.

The reason for doing code like:

<tt><em>Client.where("orders_count = ?", params[:orders])</em></tt>

instead of:

<tt><em>Client.where("orders_count = #{params[:orders]}")</em></tt>

is because of argument safety. Putting the variable directly into the conditions string will pass the variable to the database <strong>as-is</strong>. This means that it will be an unescaped variable directly from a user who may have malicious intent. If you do this, you put your entire database at risk because once a user finds out he or she can exploit your database they can do just about anything to it. Never ever put your arguments directly inside the conditions string.

<span style="font-family: DejaVu Sans;">（这里）是基于参数安全（考虑）。将变量直接放入条件字符串将会（原封不动的传送变量）到数据库。他的意思是这个参数有可能将会是以一个来自用户的恶意的非转义的变量。如果你这样做，你就把整个数据库放在了风险之中，因为一旦有用户找到他们或者它可以利用（漏洞）对你数据库做任何操作。永远不要直接把你的参数放在条件字符串中。</span>

For more information on the dangers of SQL injection, see the <a href="http://guides.rubyonrails.org/security.html#sql-injection"><span style="color: #000080;"><span style="text-decoration: underline;">Ruby</span></span><span style="color: #000080;"><span style="text-decoration: underline;">on</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Security</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Guide</span></span></a>.
<h5><a name="placeholder-conditions"></a>2.2.1 Placeholder Conditions<span style="font-family: WenQuanYi Micro Hei;">条件（参数）占位符</span></h5>
Similar to the <tt>(?)</tt> replacement style of params, you can also specify keys/values hash in your array conditions:<span style="font-family: DejaVu Sans;">最简单的是使用（？）替代参数的形式，你也可以指定</span>keys/values hash<span style="font-family: DejaVu Sans;">在你的条件语句数组中：</span>

<tt><em>Client.where("created_at &gt;= :start_date AND created_at &lt;= :end_date",</em></tt>

<tt> </tt><tt><em>{:start_date =&gt; params[:start_date], :end_date =&gt; params[:end_date]})</em></tt>

This makes for clearer readability if you have a large number of variable conditions.<span style="font-family: DejaVu Sans;">当你有大量的条件变量时这样表示更加简洁和可读性更好。</span>
<h5><a name="array-range_conditions"></a>2.2.2 Range Conditions<span style="font-family: WenQuanYi Micro Hei;">范围条件</span></h5>
If you’re looking for a range inside of a table (for example, users created in a certain timeframe) you can use the conditions option coupled with the <tt>IN</tt> SQL statement for this. If you had two dates coming in from a controller you could do something like this to look for a range:

<span style="font-family: DejaVu Sans;">如果你正在一个表中限定一个条件范围查找（例如，用户限定在一定的时间表中创建）你可以使用条件选项加上（这个参数的）</span>IN SQL<span style="font-family: DejaVu Sans;">声明。如果有来自一个</span>controller<span style="font-family: DejaVu Sans;">的两个日期，你可以做些事情查找一个范围：</span>

<tt><em>Client.where(:created_at =&gt; (params[:start_date].to_date)..(params[:end_date].to_date))</em></tt>

<tt><em>This query will generate something similar to the following SQL:</em></tt>

<tt><em>SELECT "clients".* FROM "clients" WHERE ("clients"."created_at" BETWEEN '2010-09-29' AND '2010-11-30')</em></tt>
<h4><a name="hash-conditions"></a>2.3 Hash Conditions Hash<span style="font-family: WenQuanYi Micro Hei;">字典条件</span></h4>
Active Record also allows you to pass in hash conditions which can increase the readability of your conditions syntax. With hash conditions, you pass in a hash with keys of the fields you want conditionalised and the values of how you want to conditionalise them:

Active Record<span style="font-family: DejaVu Sans;">同样也允许你通过</span>hash<span style="font-family: DejaVu Sans;">条件来增加你条件语句的可读性。在</span>hash<span style="font-family: DejaVu Sans;">条件，以键作为你的条件化参数并且相应的值则是具体的条件限制。</span>

Only equality, range and subset checking are possible with Hash conditions.
<h5><a name="equality-conditions"></a>2.3.1 Equality Conditions<span style="font-family: WenQuanYi Micro Hei;">等同条件</span></h5>
<tt><em>Client.where(:locked =&gt; true)</em></tt>

<strong>The</strong><strong> </strong><strong>field</strong><strong> </strong><strong>name</strong><strong> </strong><strong>can</strong><strong> </strong><strong>also</strong><strong> </strong><strong>be</strong><strong> </strong><strong>a</strong><strong> </strong><strong>string:</strong>

<tt><em>Client.where('locked' =&gt; true)</em></tt>
<h5><a name="hash-range_conditions"></a>2.3.2 Range Conditions</h5>
The good thing about this is that we can pass in a range for our fields without it generating a large query as shown in the preamble of this section.

<tt><em>Client.where(:created_at =&gt; (Time.now.midnight – 1.day)..Time.now.midnight)</em></tt>

This will find all clients created yesterday by using a <tt>BETWEEN</tt> SQL statement:

<span style="font-family: DejaVu Sans;">这将会通过使用一个</span><tt>BETWEEN</tt> SQL<span style="font-family: DejaVu Sans;">声明查找</span>client<span style="font-family: DejaVu Sans;">中昨天创建的记录。</span>

<tt><em>SELECT * FROM clients WHERE (clients.created_at BETWEEN '2008-12-21 00:00:00' AND '2008-12-22 00:00:00')</em></tt>

This demonstrates a shorter syntax for the examples in <a href="http://guides.rubyonrails.org/active_record_querying.html#array-conditions"><span style="color: #000080;"><span style="text-decoration: underline;">Array</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Conditions</span></span></a>
<h5><a name="subset-conditions"></a>2.3.3 Subset Conditions<span style="font-family: WenQuanYi Micro Hei;">子集条件</span></h5>
If you want to find records using the <tt>IN</tt> expression you can pass an array to the conditions hash:

<span style="font-family: DejaVu Sans;">如果想使用</span>IN<span style="font-family: DejaVu Sans;">表达式查找记录你可以在条件</span>hash<span style="font-family: DejaVu Sans;">字典中加上一个数组：</span>

<tt><em>Client.where(:orders_count =&gt; [1,3,5])</em></tt>

This code will generate SQL like this:

<tt><em>SELECT * FROM clients WHERE (clients.orders_count IN (1,3,5))</em></tt>
<h3><a name="ordering"></a>3 Ordering<span style="font-family: WenQuanYi Micro Hei;">排序</span></h3>
To retrieve records from the database in a specific order, you can use the <tt><strong>order</strong></tt> method.

<span style="font-family: DejaVu Sans;">如果你想检索记录从数据库中并且以一种指定的方式排序，你可以使用</span>order<span style="font-family: DejaVu Sans;">方法。</span>

For example, if you’re getting a set of records and want to order them in ascending order by the <tt>created_at</tt> field in your table:

<tt><em>Client.order("created_at")</em></tt>

<tt><em>You could specify ASC or DESC as well:</em></tt>

<tt><em>Client.order("created_at DESC")</em></tt>

<tt><em># OR</em></tt>

<tt><em>Client.order("created_at ASC")</em></tt>

Or ordering by multiple fields:<span style="font-family: DejaVu Sans;">或者按照多个</span>fields<span style="font-family: DejaVu Sans;">排序：</span>

<tt><em>Client.order("orders_count ASC, created_at DESC")</em></tt>
<h3><a name="selecting-specific-fields"></a>4 Selecting Specific Fields</h3>
By default, <tt>Model.find</tt> selects all the fields from the result set using <tt>select</tt><tt> </tt><tt>*</tt>.

<span style="font-family: DejaVu Sans;">默认情况中，</span><tt>Model.find</tt><span style="font-family: DejaVu Sans;"><tt>会选择所有的</tt></span><tt>fields</tt><span style="font-family: DejaVu Sans;"><tt>作为结果并且（对数据库执行）</tt></span><tt>select</tt><tt> </tt><tt>*</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

To select only a subset of fields from the result set, you can specify the subset via the <tt>select</tt> method.

<span style="font-family: DejaVu Sans;">要想只选中</span>fields<span style="font-family: DejaVu Sans;">中的一个子集作为结果，你可以通过</span>select<span style="font-family: DejaVu Sans;">方法指定子集。</span>

<span style="color: #800000;">If</span><span style="color: #800000;">the</span><tt><span style="color: #800000;">select</span></tt><span style="color: #800000;">method</span><span style="color: #800000;">is</span><span style="color: #800000;">used,</span><span style="color: #800000;">all</span><span style="color: #800000;">the</span><span style="color: #800000;">returning</span><span style="color: #800000;">objects</span><span style="color: #800000;">will</span><span style="color: #800000;">be</span><a href="http://guides.rubyonrails.org/active_record_querying.html#readonly-objects"><span style="color: #000080;"><span style="text-decoration: underline;">read</span></span><span style="color: #000080;"><span style="text-decoration: underline;">only</span></span></a><span style="color: #800000;">.</span>

For example, to select only <tt>viewable_by</tt> and <tt>locked</tt> columns:

<tt><em>Client.select("viewable_by, locked")</em></tt>

The SQL query used by this find call will be somewhat like:

<tt><em>SELECT viewable_by, locked FROM clients</em></tt>

Be careful because this also means you’re initializing a model object with only the fields that you’ve selected. <strong>If</strong><strong> </strong><strong>you</strong><strong> </strong><strong>attempt</strong><strong> </strong><strong>to</strong><strong> </strong><strong>access</strong><strong> </strong><strong>a</strong><strong> </strong><strong>field</strong><strong> </strong><strong>that</strong><strong> </strong><strong>is</strong><strong> </strong><strong>not</strong><strong> </strong><strong>in</strong><strong> </strong><strong>the</strong><strong> </strong><strong>initialized</strong><strong> </strong><strong>record</strong><strong> </strong><strong>you</strong><strong>’</strong><strong>ll</strong><strong> </strong><strong>receive</strong>:

ActiveModel::MissingAttributeError: missing attribute: &lt;attribute&gt;

<strong>Where</strong><strong> </strong><tt><strong>&lt;attribute&gt;</strong></tt><strong> </strong><strong>is</strong><strong> </strong><strong>the</strong><strong> </strong><strong>attribute</strong><strong> </strong><strong>you</strong><strong> </strong><strong>asked</strong><strong> </strong><strong>for.</strong> The <tt>id</tt> method will not raise the <tt>ActiveRecord::MissingAttributeError</tt>, so just be careful when working with associations because they need the <tt>id</tt> method to function properly.

You can also call SQL functions within the select option. For example, if you would like to only grab a single record per unique value in a certain field by using the <tt>DISTINCT</tt> function you can do it like this:

<tt><em>Client.select("DISTINCT(name)")</em></tt>

&nbsp;
<h3><a name="limit-and-offset"></a>5 Limit and Offset</h3>
To apply <tt>LIMIT</tt> to the SQL fired by the <tt>Model.find</tt>, <strong>you</strong><strong> </strong><strong>can</strong><strong> </strong><strong>specify</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>LIMIT</strong></tt><strong> </strong><strong>using</strong><strong> </strong><tt><strong>limit</strong></tt><strong> </strong><strong>and</strong><strong> </strong><tt><strong>offset</strong></tt><strong> </strong><strong>methods</strong><strong> </strong><strong>on</strong><strong> </strong><strong>the</strong><strong> </strong><strong>relation.</strong>

You can use <tt>limit</tt> to specify the number of records to be retrieved, and use <tt>offset</tt> to specify the number of records to skip before starting to return the records. For example

<tt><em>Client.limit(5)</em></tt>

will return a maximum of 5 clients and because it specifies no offset it will return the first 5 in the table. The SQL it executes looks like this:

<tt><em>SELECT * FROM clients LIMIT 5</em></tt>

Adding <tt>offset</tt> to that

<tt><em>Client.limit(5).offset(30)</em></tt>

will return instead a maximum of 5 clients beginning with the 31st. The SQL looks like:

<span style="font-family: DejaVu Sans;">将会返回最大</span>5<span style="font-family: DejaVu Sans;">个</span>clients<span style="font-family: DejaVu Sans;">并且从第</span>31<span style="font-family: DejaVu Sans;">个开始。这个</span>SQL<span style="font-family: DejaVu Sans;">看起来是：</span>

<tt><em>SELECT * FROM clients LIMIT 5 OFFSET 30</em></tt>
<h3><a name="group"></a>6 Group</h3>
To apply a <tt>GROUP</tt><tt> </tt><tt>BY</tt> clause to the SQL fired by the finder, you can specify the <tt>group</tt> method on the find.

For example, if you want to find a collection of the dates orders were created on:

<tt><em>Order.select("date(created_at) as ordered_date, sum(price) as total_price").group("date(created_at)")</em></tt>

And this will give you a single <tt>Order</tt><span style="font-family: DejaVu Sans;"><tt>生产者</tt></span>object for each date where there are orders in the database.

The SQL that would be executed would be something like this:

<tt><em>SELECT date(created_at) as ordered_date, sum(price) as total_price FROM orders GROUP BY date(created_at)</em></tt>
<h3><a name="having"></a>7 Having</h3>
SQL uses the <tt>HAVING</tt> clause<span style="font-family: DejaVu Sans;">短语</span>to specify conditions on the <tt>GROUP</tt><tt> </tt><tt>BY</tt> fields. You can add the <tt>HAVING</tt> clause to the SQL fired by the <tt>Model.find</tt> by adding the <tt>:having</tt> option to the find.

For example:

<tt><em>Order.select("date(created_at) as ordered_date, sum(price) as total_price").group("date(created_at)").having("sum(price) &gt; ?", 100)</em></tt>

The SQL that would be executed would be something like this:

<tt><em>SELECT date(created_at) as ordered_date, sum(price) as total_price FROM orders GROUP BY date(created_at) HAVING sum(price) &gt; 100</em></tt>

This will return single order objects for each day, but only those that are ordered more than $100 in a day.
<h3><a name="overriding-conditions"></a>8 Overriding Conditions<span style="font-family: WenQuanYi Micro Hei;">覆盖条件</span></h3>
<h4><a name="except"></a>8.1 <tt>except</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>排除</tt></span></h4>
You can specify certain conditions to be excepted by using the <tt>except</tt> method. For example:

<tt><em>Post.where('id &gt; 10').limit(20).order('id asc').except(:order)#</em></tt><span style="font-family: DejaVu Sans;"><tt><em>取消排序</em></tt></span>

<tt><em>The SQL that would be executed:</em></tt>

<tt><em>SELECT * FROM posts WHERE id &gt; 10 LIMIT 20</em></tt>

<tt><em>irb(main):006:0&gt; Post.where('id &gt; 1').limit(20).order('id desc')</em></tt>

<tt> </tt><tt><em>Post Load (0.4ms) SELECT "posts".* FROM "posts" WHERE (id &gt; 1) ORDER BY id desc LIMIT 20</em></tt>

<tt><em>=&gt; [#&lt;Post id: 4, name: "2134", title: "2134", content: "21343242134", created_at: "2011-11-09 10:25:38", updated_at: "2011-11-09 10:25:38"&gt;, #&lt;Post id: 2, name: "jhjguxin", title: "test console", content: "A new post to test console", created_at: "2011-11-05 15:55:17", updated_at: "2011-11-05 15:55:17"&gt;]</em></tt>

<tt><em>irb(main):007:0&gt; Post.where('id &gt; 1').limit(20).order('id desc').except(:order)</em></tt>

<tt> </tt><tt><em>Post Load (0.4ms) SELECT "posts".* FROM "posts" WHERE (id &gt; 1) LIMIT 20</em></tt>

<tt><em>=&gt; [#&lt;Post id: 2, name: "jhjguxin", title: "test console", content: "A new post to test console", created_at: "2011-11-05 15:55:17", updated_at: "2011-11-05 15:55:17"&gt;, #&lt;Post id: 4, name: "2134", title: "2134", content: "21343242134", created_at: "2011-11-09 10:25:38", updated_at: "2011-11-09 10:25:38"&gt;]</em></tt>
<h4><a name="only"></a>8.2 <tt>only</tt></h4>
You can also override conditions using the <tt>only</tt> method. For example:

<tt><em>Post.where('id &gt; 10').limit(20).order('id desc').only(:order, :where)</em></tt>

The SQL that would be executed:

<tt><em>SELECT * FROM posts WHERE id &gt; 10 ORDER BY id DESC</em></tt>
<h4><a name="reorder"></a>8.3 <tt>reorder</tt></h4>
The <tt>reorder</tt> method overrides the default scope order. For example:

<tt><em>class Post &lt; ActiveRecord::Base</em></tt>

<tt> </tt><tt><em>..</em></tt>

<tt> </tt><tt><em>..</em></tt>

<tt> </tt><tt><em>has_many :comments, :order =&gt; 'posted_at DESC'</em></tt>

<tt><em>end</em></tt>

&nbsp;

<tt><em>Post.find(10).comments.reorder('name')</em></tt>

The SQL that would be executed:

<tt><em>SELECT * FROM posts WHERE id = 10 ORDER BY name</em></tt>

In case the <tt>reorder</tt> clause is not used, the SQL executed would be:

<tt><em>SELECT * FROM posts WHERE id = 10 ORDER BY posted_at DESC</em></tt>

If no ordering clause is specified in the query, the <tt>reverse_order</tt> orders by the primary key in reverse<span style="font-family: DejaVu Sans;">撤销</span>order.

<tt><em>Client.where("orders_count &gt; 10").reverse_order</em></tt>

The SQL that would be executed:

<tt><em>SELECT * FROM clients WHERE orders_count &gt; 10 ORDER BY clients.id DESC</em></tt>

<strong>This</strong><strong> </strong><strong>method</strong><strong> </strong><strong>accepts</strong><strong> </strong><strong><strong>no</strong></strong><strong> </strong><strong>arguments.</strong>
<h3><a name="readonly-objects"></a>9 Readonly Objects</h3>
Active Record provides <tt>readonly</tt> method on a relation to explicitly disallow modification or deletion of any of the returned object. Any attempt to alter or destroy a readonly record will not succeed, raising an <tt>ActiveRecord::ReadOnlyRecord</tt> exception.

<tt><em>client = Client.readonly.first</em></tt>

<tt><em>client.visits += 1</em></tt>

<tt><em>client.save</em></tt>

<strong>As</strong><strong> </strong><tt><strong>client</strong></tt><strong> </strong><strong>is</strong><strong> </strong><strong>explicitly</strong><strong> </strong><strong>set</strong><strong> </strong><strong>to</strong><strong> </strong><strong>be</strong><strong> </strong><strong>a</strong><strong> </strong><strong>readonly</strong><strong> </strong><strong>object</strong>, the above code will raise an <tt>ActiveRecord::ReadOnlyRecord</tt> exception when<strong> </strong><strong>calling</strong><strong> </strong><tt><strong>client.save</strong></tt><strong> </strong><strong>with</strong><strong> </strong><strong>an</strong><strong> </strong><strong>updated</strong><strong> </strong><strong>value</strong><strong> </strong><strong>of</strong><strong> </strong><em><strong>visits</strong></em>.
<h3><a name="locking-records-for-update"></a>10 Locking Records for Update</h3>
Locking is helpful for preventing race conditions when updating records in the database and ensuring atomic updates.

Active Record provides two locking mechanisms:
<ul>
	<li>Optimistic<span style="font-family: DejaVu Sans;">乐观</span>Locking</li>
	<li>Pessimistic<span style="font-family: DejaVu Sans;">悲观</span>Locking</li>
</ul>
<h4><a name="optimistic-locking"></a>10.1 Optimistic Locking</h4>
<strong>Optimistic</strong><strong> </strong><strong>locking</strong><strong> </strong><strong>allows</strong><strong> </strong><strong>multiple</strong><strong> </strong><strong>users</strong><strong> </strong><strong>to</strong><strong> </strong><strong>access</strong><strong> </strong><strong>the</strong><strong> </strong><strong>same</strong><strong> </strong><strong>record</strong><strong> </strong><strong>for</strong><strong> </strong><strong>edits</strong>, and assumes<span style="font-family: DejaVu Sans;">假定</span>a minimum of conflicts with the data. It does this by <strong>checking</strong><strong> </strong><strong>whether</strong><strong> </strong><strong>another</strong><strong> </strong><strong>process</strong><strong> </strong><strong>has</strong><strong> </strong><strong>made</strong><strong> </strong><strong>changes</strong> to a record <strong>since</strong><strong> </strong><strong>it</strong><strong> </strong><strong>was</strong><strong> </strong><strong>opened</strong>. An <tt>ActiveRecord::StaleObjectError</tt> exception is thrown if that has occurred<span style="font-family: DejaVu Sans;">发生</span>and the update is ignored.

<strong>Optimistic</strong><strong> </strong><strong>locking</strong><strong> </strong><strong>column</strong>

<strong>In</strong><strong> </strong><strong>order</strong><strong> </strong><strong>to</strong><strong> </strong><strong>use</strong><strong> </strong><strong>optimistic</strong><strong> </strong><strong>locking</strong>, the table <strong>needs</strong><strong> </strong><strong>to</strong><strong> </strong><strong>have</strong><strong> </strong><strong>a</strong><strong> </strong><strong>column</strong><strong> </strong><strong>called</strong><strong> </strong><tt><strong>lock_version</strong></tt>. Each time the record is <strong>updated</strong>, Active Record increments the <tt><strong>lock_version</strong></tt> column. If an update request is made with a lower value in the <tt>lock_version</tt> field than is currently in the <tt>lock_version</tt> column in the database, the update request will fail with an <tt>ActiveRecord::StaleObjectError</tt>. Example:

<tt><em>c1 = Client.find(1)</em></tt>

<tt><em>c2 = Client.find(1)</em></tt>

&nbsp;

<tt><em>c1.first_name = "Michael"</em></tt>

<tt><em>c1.save</em></tt>

&nbsp;

<tt><em>c2.name = "should fail"</em></tt>

<tt><em>c2.save # Raises a ActiveRecord::StaleObjectError</em></tt>

You’re then responsible<span style="font-family: DejaVu Sans;">有责任</span>for dealing<span style="font-family: DejaVu Sans;">处理</span>with the conflict by rescuing the exception and either rolling back, merging, or otherwise apply the business logic needed to resolve the conflict.

<span style="color: #800000;">You</span><span style="color: #800000;">must</span><span style="color: #800000;">ensure</span><span style="color: #800000;">that</span><span style="color: #800000;">your</span><span style="color: #800000;">database</span><span style="color: #800000;">schema</span><span style="color: #800000;">defaults</span><span style="color: #800000;">the</span><tt><span style="color: #800000;">lock_version</span></tt><span style="color: #800000;">column</span><span style="color: #800000;">to</span><tt><span style="color: #800000;">0</span></tt><span style="color: #800000;">.</span>

This behavior can be turned off by setting <tt><strong>ActiveRecord::Base.lock_optimistically</strong></tt><tt><strong> </strong></tt><tt><strong>=</strong></tt><tt><strong> </strong></tt><tt><strong>false</strong></tt><strong>.</strong>

<strong>To</strong><strong> </strong><strong>override</strong><strong> </strong><strong>the</strong><strong> </strong><strong>name</strong><strong> </strong><strong>of</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>lock_version</strong></tt><strong> </strong><strong>column</strong>, <tt>ActiveRecord::Base</tt> provides a class method called <tt>set_locking_column</tt>:

<tt><em>class Client &lt; ActiveRecord::Base</em></tt>

<tt> </tt><tt><em>set_locking_column :lock_client_column</em></tt>

<tt><em>end</em></tt>
<h4><a name="pessimistic-locking"></a>10.2 Pessimistic Locking</h4>
Pessimistic locking uses a locking mechanism provided by the underlying<span style="font-family: DejaVu Sans;">底层</span>database. Using <tt>lock</tt> when building a relation obtains an exclusive lock on the selected rows. Relations using <tt>lock</tt> are usually wrapped inside a transaction for preventing deadlock conditions.

<span style="font-family: DejaVu Sans;">在语句块的一个流程中使用</span>lock<span style="font-family: DejaVu Sans;">通常是为了防止死锁情况出现。</span>

For example:

<tt><em>Item.transaction do</em></tt>

<tt> </tt><tt><em>i = Item.lock.first</em></tt>

<tt> </tt><tt><em>i.name = 'Jones'</em></tt>

<tt> </tt><tt><em>i.save</em></tt>

<tt><em>end</em></tt>

The above session produces the following SQL for a MySQL backend:

You can also pass raw SQL to the <tt>lock</tt> method for allowing different types of locks. For example, MySQL has an expression called <tt>LOCK</tt><tt> </tt><tt>IN</tt><tt> </tt><tt>SHARE</tt><tt> </tt><tt>MODE</tt> where you can lock a record but still allow other queries to read it. To specify this expression just pass it in as the lock option:

<tt><em>SQL (0.2ms) BEGIN</em></tt>

<tt><em>Item Load (0.3ms) SELECT * FROM `items` LIMIT 1 FOR UPDATE</em></tt>

<tt><em>Item Update (0.4ms) UPDATE `items` SET `updated_at` = '2009-02-07 18:05:56', `name` = 'Jones' WHERE `id` = 1</em></tt>

<tt><em>SQL (0.8ms) COMMIT</em></tt>

You can also pass raw SQL to the <tt>lock</tt> method for allowing different types of locks. For example, MySQL has an expression called <tt>LOCK</tt><tt> </tt><tt>IN</tt><tt> </tt><tt>SHARE</tt><tt> </tt><tt>MODE</tt> <strong>where</strong><strong> </strong><strong>you</strong><strong> </strong><strong>can</strong><strong> </strong><strong>lock</strong><strong> </strong><strong>a</strong><strong> </strong><strong>record</strong><strong> </strong><strong>but</strong><strong> </strong><strong>still</strong><strong> </strong><strong>allow</strong><strong> </strong><strong>other</strong><strong> </strong><strong>queries</strong><strong> </strong><strong>to</strong><strong> </strong><strong>read</strong><strong> </strong><strong>it</strong>. To specify this expression just pass it in as the lock option:

<tt><em>Item.transaction do</em></tt>

<tt> </tt><tt><em>i = Item.lock("LOCK IN SHARE MODE").find(1)</em></tt>

<tt> </tt><tt><em>i.increment!(:views)</em></tt>

<tt><em>end</em></tt>
<h3><a name="joining-tables"></a>11 Joining Tables</h3>
Active Record provides a finder method called <tt>joins</tt> for specifying <tt>JOIN</tt> clauses<span style="font-family: DejaVu Sans;">短语</span>on the resulting SQL. There are multiple ways to use the <tt>joins</tt> method.
<h4><a name="using-a-string-sql-fragment"></a>11.1 Using a String SQL Fragment</h4>
You can just supply the raw SQL specifying the <tt><strong>JOIN</strong></tt><strong> </strong>clause to <tt>joins</tt>:

<tt><em>Client.joins('LEFT OUTER JOIN addresses ON addresses.client_id = clients.id')</em></tt>

This will result in the following SQL:

<tt><em>SELECT clients.* FROM clients LEFT OUTER JOIN addresses ON addresses.client_id = clients.id</em></tt>
<h4><a name="using-array-hash-of-named-associations"></a> 11.2 Using Array/Hash of Named Associations</h4>
<span style="color: #800000;">This</span><span style="color: #800000;">method</span><span style="color: #800000;">only</span><span style="color: #800000;">works</span><span style="color: #800000;">with</span><tt><span style="color: #800000;">INNER</span></tt><tt></tt><tt><span style="color: #800000;">JOIN</span></tt><span style="color: #800000;">.</span>

Active Record lets you use the names of the <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/association_basics.html">associations</a></span></span> defined on the model as a shortcut for specifying <tt>JOIN</tt> clause for those associations when using the <tt>joins</tt> method.

For example, consider the following <tt>Category</tt>, <tt>Post</tt>, <tt>Comments</tt> and <tt>Guest</tt> models:

<tt><em>class Category &lt; ActiveRecord::Base</em></tt>

<tt> </tt><tt><em>has_many :posts</em></tt>

<tt><em>end</em></tt>

&nbsp;

<tt><em>class Post &lt; ActiveRecord::Base</em></tt>

<tt> </tt><tt><em>belongs_to :category</em></tt>

<tt> </tt><tt><em>has_many :comments</em></tt>

<tt> </tt><tt><em>has_many :tags</em></tt>

<tt><em>end</em></tt>

&nbsp;

<tt><em>class Comment &lt; ActiveRecord::Base</em></tt>

<tt> </tt><tt><em>belongs_to :post</em></tt>

<tt> </tt><tt><em>has_one :guest</em></tt>

<tt><em>end</em></tt>

&nbsp;

<tt><em>class Guest &lt; ActiveRecord::Base</em></tt>

<tt> </tt><tt><em>belongs_to :comment</em></tt>

<tt><em>end</em></tt>

&nbsp;

<tt><em>class Tag &lt; ActiveRecord::Base</em></tt>

<tt> </tt><tt><em>belongs_to :post</em></tt>

<tt><em>end</em></tt>

Now all of the following will produce the expected join queries using <tt>INNER</tt><tt> </tt><tt>JOIN</tt>:
<h5><a name="joining-a-single-association"></a>11.2.1 Joining a Single Association</h5>
<tt><em>Category.joins(:posts)</em></tt>

This produces:

<tt><em>SELECT categories.* FROM categories</em></tt>

<tt> </tt><tt><em>INNER JOIN posts ON posts.category_id = categories.id</em></tt>

Or, in English: “return a Category object for <strong>all</strong><strong> </strong><strong>categories</strong><strong> </strong><strong>with</strong><strong> </strong><strong>posts</strong>”. Note that you will see duplicate categories if more than one post has the same category. If you want unique<span style="font-family: DejaVu Sans;">唯一的</span>categories, you can use Category.joins(:post).select(“distinct(categories.id)”).

<span style="font-family: DejaVu Sans;">或者，用英语说：<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span>返回所有</span>posts<span style="font-family: DejaVu Sans;">的所有</span>categories<span style="font-family: DejaVu Sans;">到</span>Category<span style="font-family: DejaVu Sans;">对象<span style="font-family: Liberation Serif,Times New Roman,serif;">”</span>。请注意，如果超过一个</span>post<span style="font-family: DejaVu Sans;">具有相同的</span>categories<span style="font-family: DejaVu Sans;">，你会看到重复的</span>categories<span style="font-family: DejaVu Sans;">。如果你想要唯一的</span>categories<span style="font-family: DejaVu Sans;">，你可以使用</span>Category.joins(:post).select(“distinct(categories.id)”)<span style="font-family: DejaVu Sans;">。</span>
<h5><a name="joining-multiple-associations"></a>11.2.2 Joining Multiple Associations</h5>
<tt><em>Post.joins(:category, :comments)#</em></tt><span style="font-family: DejaVu Sans;"><tt><em>两个参数之间是与关系</em></tt></span>

This produces:

<tt><em>SELECT posts.* FROM posts</em></tt>

<tt> </tt><tt><em>INNER JOIN categories ON posts.category_id = categories.id</em></tt>

<tt> </tt><tt><em>INNER JOIN comments ON comments.post_id = posts.id</em></tt>

Or, in English: “return all posts that have a category and at<strong> </strong><strong>least</strong><strong> </strong><strong>one</strong><strong> </strong><strong>comment</strong>”. Note again that posts with multiple comments will show up multiple times.
<h5><a name="joining-nested-associations-single-level"></a> 11.2.3 Joining Nested Associations (Single Level)</h5>
&nbsp;

<tt><em>Post.joins(:comments =&gt; :guest)</em></tt>

This produces:

<tt><em>SELECT posts.* FROM posts</em></tt>

<tt> </tt><tt><em>INNER JOIN comments ON comments.post_id = posts.id</em></tt>

<tt> </tt><tt><em>INNER JOIN guests ON guests.comment_id = comments.id</em></tt>

Or, in English: “return all posts that have<strong> </strong><strong>a</strong><strong> </strong><strong>comment</strong><strong> </strong><strong>made</strong><strong> </strong><strong>by</strong><strong> </strong><strong>a</strong><strong> </strong><strong>guest</strong>.”
<h5><a name="joining-nested-associations-multiple-lev"></a> 11.2.4 Joining Nested Associations (Multiple Level)</h5>
<tt><em>Category.joins(:posts =&gt; [{:comments =&gt; :guest}, :tags])</em></tt>

This produces:

<tt><em>SELECT categories.* FROM categories</em></tt>

<tt> </tt><tt><em>INNER JOIN posts ON posts.category_id = categories.id</em></tt>

<tt> </tt><tt><em>INNER JOIN comments ON comments.post_id = posts.id</em></tt>

<tt> </tt><tt><em>INNER JOIN guests ON guests.comment_id = comments.id</em></tt>

<tt> </tt><tt><em>INNER JOIN tags ON tags.post_id = posts.id</em></tt>

<span style="font-family: DejaVu Sans;">返回</span>post<span style="font-family: DejaVu Sans;">的</span>category<span style="font-family: DejaVu Sans;">，并且这个</span>post<span style="font-family: DejaVu Sans;">至少有一个</span>commit<span style="font-family: DejaVu Sans;">是</span>guest<span style="font-family: DejaVu Sans;">提交而且这个</span>post<span style="font-family: DejaVu Sans;">至少有一个</span>tag<span style="font-family: DejaVu Sans;">。</span>
<h4><a name="specifying-conditions-on-the-joined-tabl"></a> 11.3 Specifying Conditions on the Joined Tables</h4>
You can specify conditions on the joined tables using the regular <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/active_record_querying.html#array-conditions">Array</a></span></span> and <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/active_record_querying.html#pure-string-conditions">String</a></span></span> conditions. <a href="http://guides.rubyonrails.org/active_record_querying.html#hash-conditions"><span style="color: #000080;"><span style="text-decoration: underline;">Hash</span></span><span style="color: #000080;"><span style="text-decoration: underline;">conditions</span></span></a> provides a special syntax for specifying conditions for the joined tables:

<span style="font-family: DejaVu Sans;">你可以在</span>joined tables <span style="font-family: DejaVu Sans;">的时候通过使用正则数组和字符串条件（表达式）来指定条件。</span>Hash<span style="font-family: DejaVu Sans;">条件提供了一个特殊的语法来指定</span>joined tables<span style="font-family: DejaVu Sans;">的条件：</span>

<tt><em>time_range = (Time.now.midnight - 1.day)..Time.now.midnight</em></tt>

<tt><em>Client.joins(:orders).where('orders.created_at' =&gt; time_range)</em></tt>

An alternative and cleaner syntax is to nest the hash conditions:<span style="font-family: DejaVu Sans;">一个更简洁的替代语法是将条件嵌入</span>Hash<span style="font-family: DejaVu Sans;">条件中。</span>

<tt><em>time_range = (Time.now.midnight - 1.day)..Time.now.midnight</em></tt>

<tt><em>Client.joins(:orders).where(:orders =&gt; {:created_at =&gt; time_range})</em></tt>

This will find all clients who have orders that were created yesterday, again using a <tt>BETWEEN</tt> SQL expression.<span style="font-family: DejaVu Sans;">这将会查找所有的</span>clients<span style="font-family: DejaVu Sans;">，它们都有</span>orders<span style="font-family: DejaVu Sans;">并且，</span>order<span style="font-family: DejaVu Sans;">在昨天创建，再一次使用</span>BETWEEN SQL<span style="font-family: DejaVu Sans;">语句。</span>
<h3><a name="eager-loading-associations"></a>12 Eager Loading Associations</h3>
Eager loading<span style="font-family: DejaVu Sans;">快速导入</span>is the mechanism for loading the associated records of the objects returned by <tt>Model.find</tt> using as few queries as possible.

Eager loading<span style="font-family: DejaVu Sans;">快速导入是一个导入记录的关系的机器，它通过</span><tt>Model.find</tt><span style="font-family: DejaVu Sans;"><tt>返回对象，并使用尽可能少的查询。</tt></span>

<strong>N</strong><strong> </strong><strong>+</strong><strong> </strong><strong>1</strong><strong> </strong><strong>queries</strong><strong> </strong><strong>problem</strong>

Consider the following code, which finds 10 clients and prints their postcodes:

<tt><em>clients = Client.limit(10)</em></tt>

&nbsp;

<tt><em>clients.each do |client|</em></tt>

<tt> </tt><tt><em>puts client.address.postcode</em></tt>

<tt><em>end</em></tt>

<strong>This</strong><strong> </strong><strong>code</strong><strong> </strong><strong>looks</strong><strong> </strong><strong>fine</strong><strong> </strong><strong>at</strong><strong> </strong><strong>the</strong><strong> </strong><strong>first</strong><strong> </strong><strong>sight</strong>. But the problem lies within the total number of queries executed. The above code executes 1 ( to find 10 clients ) + 10 ( one per each client to load the address ) = <strong>11</strong> queries in total.<span style="font-family: DejaVu Sans;">上面的代码执行一次（找到</span>10<span style="font-family: DejaVu Sans;">个</span>clients<span style="font-family: DejaVu Sans;">）</span>+10<span style="font-family: DejaVu Sans;">（每一个</span>client<span style="font-family: DejaVu Sans;">导入地址）</span>

<strong>Solution</strong><strong> </strong><strong>to</strong><strong> </strong><strong>N</strong><strong> </strong><strong>+</strong><strong> </strong><strong>1</strong><strong> </strong><strong>queries</strong><strong> </strong><strong>problem</strong>

Active Record lets you specify in advance all the associations that are going to be loaded. This is possible by specifying the <tt>includes</tt> method of the <tt>Model.find</tt> call. With <tt>includes</tt>, Active Record ensures that all of the specified associations are loaded using the minimum possible number of queries.

Revisiting the above case, we could rewrite <tt>Client.all</tt> to use eager load addresses:

<tt><em>clients = Client.includes(:address).limit(10)</em></tt>

&nbsp;

<tt><em>clients.each do |client|</em></tt>

<tt> </tt><tt><em>puts client.address.postcode</em></tt>

<tt><em>end</em></tt>

The above code will execute just <strong>2</strong> queries, as opposed to <strong>11</strong> queries in the previous case:

<span style="font-family: DejaVu Sans;">上面的代码将执行</span>2<span style="font-family: DejaVu Sans;">查询，而不是在以前的情况下，以</span>11<span style="font-family: DejaVu Sans;">查询：</span>

<tt><em>SELECT * FROM clients LIMIT 10</em></tt>

<tt><em>SELECT addresses.* FROM addresses</em></tt>

<tt> </tt><tt><em>WHERE (addresses.client_id IN (1,2,3,4,5,6,7,8,9,10))</em></tt>
<h4><a name="eager-loading-multiple-associations"></a> 12.1 Eager Loading Multiple Associations</h4>
Active Record lets you eager load any number of associations with a single <tt>Model.find</tt> call by using an array, hash, or a nested hash of array/hash with the <tt>includes</tt> method.

Active Record<span style="font-family: DejaVu Sans;">可以通过</span>includes<span style="font-family: DejaVu Sans;">方法加上数组，</span>hash<span style="font-family: DejaVu Sans;">或者使用数组和</span>hash<span style="font-family: DejaVu Sans;">嵌套的</span>hash<span style="font-family: DejaVu Sans;">字典调用单个</span><tt>Model.find</tt><span style="font-family: DejaVu Sans;"><tt>方法快速导入任何数目的关系。</tt></span>
<h5><a name="array-of-multiple-associations"></a>12.1.1 Array of Multiple Associations</h5>
<tt><em>Post.includes(:category, :comments)</em></tt>

This loads all the posts and the associated category and comments for each post.
<h5><a name="nested-associations-hash"></a>12.1.2 Nested Associations Hash</h5>
<tt><em>Category.includes(:posts =&gt; [{:comments =&gt; :guest}, :tags]).find(1)</em></tt>

This will find the <strong>category</strong><strong> </strong><strong>with</strong><strong> </strong><strong>id</strong><strong> </strong><strong>1</strong> and <strong>eager</strong><strong> </strong><strong>load</strong> all of the associated posts<span style="font-family: DejaVu Sans;">以及快速导入分类为</span>id<span style="font-family: DejaVu Sans;">为</span>1<span style="font-family: DejaVu Sans;">的</span>post, the associated posts’ tags and comments<span style="font-family: DejaVu Sans;">和</span>post<span style="font-family: DejaVu Sans;">的</span>tags<span style="font-family: DejaVu Sans;">和</span>comments, and every comment’s guest association<span style="font-family: DejaVu Sans;">并且每个</span>comments<span style="font-family: DejaVu Sans;">是由</span>guest<span style="font-family: DejaVu Sans;">创建的</span>.
<h4><a name="specifying-conditions-on-eager-loaded-as"></a> 12.2 Specifying Conditions on Eager Loaded Associations</h4>
Even though Active Record lets you specify conditions on the eager loaded associations just like <tt>joins</tt>, <strong>the</strong><strong> </strong><strong>recommended</strong><strong> </strong><strong>way</strong><strong> </strong><strong>is</strong><strong> </strong><strong>to</strong><strong> </strong><strong>use</strong><strong> </strong><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/active_record_querying.html#joining-tables"><strong>joins</strong></a></span></span><strong> </strong><strong>instead.</strong>

However if you must do this, you may use <tt>where</tt> as you would normally.

<tt><em>Post.includes(:comments).where("comments.visible", true)</em></tt>

This would generate a query which contains a <tt>LEFT</tt><tt> </tt><tt>OUTER</tt><tt> </tt><tt>JOIN</tt> whereas the <tt>joins</tt> method would generate one using the <tt>INNER</tt><tt> </tt><tt>JOIN</tt> function instead.

<tt><em>SELECT "posts"."id" AS t0_r0, ... "comments"."updated_at" AS t1_r5 FROM "posts" LEFT OUTER JOIN "comments" ON "comments"."post_id" = "posts"."id" WHERE (comments.visible = 1)</em></tt>

If there was no <tt>where</tt> condition, this would generate the normal set of two queries.

If, in the case of this <tt>includes</tt> query,<strong> </strong><strong>there</strong><strong> </strong><strong>were</strong><strong> </strong><strong>no</strong><strong> </strong><strong>comments</strong><strong> </strong><strong>for</strong><strong> </strong><strong>any</strong><strong> </strong><strong>posts</strong>, all the posts would <strong>still</strong><strong> </strong><strong>be</strong><strong> </strong><strong>loaded</strong>. <span style="color: #800000;">By</span><span style="color: #800000;">using</span><tt><span style="color: #800000;">joins</span></tt> (an INNER JOIN), the join conditions <strong>must</strong> match, <strong>otherwise</strong><strong> </strong><strong>no</strong><strong> </strong><strong>records</strong><strong> </strong><strong>will</strong><strong> </strong><strong>be</strong><strong> </strong><strong>returned.</strong>
<h3><a name="scopes"></a>13 Scopes<span style="font-family: WenQuanYi Micro Hei;">作用域</span></h3>
Scoping allows you to specify commonly-used ARel<span style="font-family: DejaVu Sans;">（</span>Arel is a relational algebra engine for Ruby

<span style="font-family: DejaVu Sans;">） </span>queries which can be referenced as method calls on the association objects or models. With these scopes, you can use every method previously covered such as <tt>where</tt>, <tt>joins</tt> and <tt>includes</tt>. All scope methods will return an <tt>ActiveRecord::Relation</tt> object which will allow for further methods (such as other scopes) to be called on it.

<span style="font-family: DejaVu Sans;">作用域允许你指定通常使用的</span>Arel<span style="font-family: DejaVu Sans;">（</span>Arel<span style="font-family: DejaVu Sans;">是一个用于</span>Ruby<span style="font-family: DejaVu Sans;">的关系代数引擎）查询它可以在对象或模型调用方法的时候被引用。通过这些作用域，你可以使用比如</span>where<span style="font-family: DejaVu Sans;">，</span>joins<span style="font-family: DejaVu Sans;">和</span>includes<span style="font-family: DejaVu Sans;">这些方法覆盖以前的（方法）。所有的</span>scope<span style="font-family: DejaVu Sans;">方法将会返回一个 </span><tt>ActiveRecord::Relation</tt><span style="font-family: DejaVu Sans;"><tt>对象它将允许一些以后的方法（例如其他的作用域）被其调用。</tt></span>

To define a simple scope, we use the <tt>scope</tt> method inside the class, passing the ARel query that we’d like run when this scope is called:

<tt><em>class Post &lt; ActiveRecord::Base</em></tt>

<tt> </tt><tt><em>scope :published, where(:published =&gt; true)</em></tt>

<tt><em>end</em></tt>

<tt><em>Just like before, these methods are also chainable</em></tt><span style="font-family: DejaVu Sans;"><tt><em>可链式的</em></tt></span><tt><em>:</em></tt>

<tt><em>class Post &lt; ActiveRecord::Base</em></tt>

<tt> </tt><tt><em>scope :published, where(:published =&gt; true).joins(:category)</em></tt>

<tt><em>end</em></tt>

Scopes are also chainable within scopes:<span style="font-family: DejaVu Sans;">作用域对作用域中也是可链式的：</span>

<tt><em>class Post &lt; ActiveRecord::Base</em></tt>

<tt> </tt><tt><em>scope :published, where(:published =&gt; true)</em></tt>

<tt> </tt><tt><em>scope :published_and_commented, published.and(self.arel_table[:comments_count].gt(0))</em></tt>

<tt><em>end</em></tt>

To call this <tt>published</tt> scope we can call it on either the class:<span style="font-family: DejaVu Sans;">调用这个</span>published<span style="font-family: DejaVu Sans;">作用域我们可以在类中调用：</span>

<tt><em>Post.published =&gt; [published posts]</em></tt>

Or on an association consisting of <tt>Post</tt> objects:<span style="font-family: DejaVu Sans;">或者是在组成</span>Post<span style="font-family: DejaVu Sans;">对象的关系（成员）中调用：</span>

<tt><em>category = Category.first</em></tt>

<tt><em>category.posts.published =&gt; [published posts belonging to this category]</em></tt>
<h4><a name="working-with-times"></a>13.1 Working with times<span style="font-family: WenQuanYi Micro Hei;">工作中的时间（字段）</span></h4>
If you’re working with dates or times within scopes, due to how they are evaluated, you will need to use a lambda so that the scope is evaluated every time.

<span style="font-family: DejaVu Sans;">如果你在工作中遇到时间（字段）或者包含有时间（字段）的作用域，由于他们的求值方式，你将需要使用一个匿名函数来使得每次调用域都会计算时间的值。</span>

<tt><em>class Post &lt; ActiveRecord::Base</em></tt>

<tt> </tt><tt><em>scope :last_week, lambda { where("created_at &lt; ?", Time.zone.now ) }</em></tt>

<tt><em>end</em></tt>

Without the <tt>lambda</tt>, this <tt>Time.zone.now</tt> will only be called once.
<h4><a name="passing-in-arguments"></a>13.2 Passing in arguments</h4>
When a <tt>lambda</tt> is used for a <tt>scope</tt>, it can take arguments:

<tt><em>class Post &lt; ActiveRecord::Base</em></tt>

<tt> </tt><tt><em>scope :1_week_before, lambda { |time| where("created_at &lt; ?", time)</em></tt>

<tt><em>end</em></tt>

This may then be called using this:

<tt><em>Post.1_week_before(Time.zone.now)</em></tt>

However, this is just duplicating<span style="font-family: DejaVu Sans;">复制 </span>the functionality<span style="font-family: DejaVu Sans;">功能 </span>that would be provided to you by a class method.<span style="font-family: DejaVu Sans;">然而，这样仅仅通过一个类方法提供给来复制（使用）这个功能。</span>

<tt><em>class Post &lt; ActiveRecord::Base</em></tt>

<tt> </tt><tt><em>def self.1_week_before(time)</em></tt>

<tt> </tt><tt><em>where("created_at &lt; ?", time)</em></tt>

<tt> </tt><tt><em>end</em></tt>

<tt><em>end</em></tt>

Using a class method is the preferred way to accept arguments for scopes. These methods will still be accessible<span style="font-family: DejaVu Sans;">访问 </span>on the association objects:

<span style="font-family: DejaVu Sans;">使用一个类方法是一个完美的方法来让</span>scopes<span style="font-family: DejaVu Sans;">获取参数。这个方法仍然访问</span>objects<span style="font-family: DejaVu Sans;">的</span>association<span style="font-family: DejaVu Sans;">。</span>

<tt><em>category.posts.1_week_before(time)</em></tt>
<h4><a name="working-with-scopes"></a>13.3 Working with scopes<span style="font-family: WenQuanYi Micro Hei;">使用作用域来工作</span></h4>
Where a relational object is required, the <tt>scoped</tt> method may come in handy. This will return an <tt>ActiveRecord::Relation</tt> object which can have further scoping applied to it afterwards. A place where this may come in handy is on associations

<tt><em>client = Client.find_by_first_name("Ryan")</em></tt>

<tt><em>orders = client.orders.scoped</em></tt>

With this new <tt>orders</tt> object, we are able to ascertain that this object can have more scopes applied to it. For instance,<strong> if we wanted to return orders only in the last 30 days at a later point</strong>.

<tt><em>orders.where("created_at &gt; ?", 30.days.ago)</em></tt>
<h4><a name="applying-a-default-scope"></a>13.4 Applying a default scope</h4>
If we wish for <strong>a scope</strong> to be <strong>applied</strong> across <strong>all queries</strong><span style="font-family: DejaVu Sans;"><strong>所有查询</strong> </span>to the model we can use the <tt><strong>default_scope</strong></tt> method within the model itself.

<tt><em>class Client &lt; ActiveRecord::Base</em></tt>

<tt> </tt><tt><em>default_scope where("removed_at IS NULL")</em></tt>

<tt><em>end</em></tt>

When queries are executed on this model, the SQL query will now look something like this:

<tt><em>SELECT * FROM clients WHERE removed_at IS NULL</em></tt>
<h4><a name="removing-all-scoping"></a>13.5 Removing all scoping</h4>
If we wish to remove scoping for any reason we can use the <tt>unscoped</tt> method. This is especially useful if a <tt>default_scope</tt> is specified in the model and should not be applied for this particular query.

<tt><em>Client.unscoped.all</em></tt>

This method removes all scoping and will do a normal query on the table.
<h3><a name="dynamic-finders"></a>14 Dynamic Finders<span style="font-family: WenQuanYi Micro Hei;">动态查询</span></h3>
For every field (also known as an attribute) you define in your table, Active Record provides a finder method. If you have a field called <tt>first_name</tt> on your <tt>Client</tt> model for example, you get <tt>find_by_first_name</tt> and <tt>find_all_by_first_name</tt> for free from Active Record. If you have a <tt>locked</tt> field on the <tt>Client</tt> model, you also get <tt>find_by_locked</tt> and <tt>find_all_by_locked</tt> methods.

<span style="font-family: DejaVu Sans;">在你表中定义的每个</span>field<span style="font-family: DejaVu Sans;">（通常被看着一个属性）， </span>Active Record<span style="font-family: DejaVu Sans;">都提供了一个</span>finder<span style="font-family: DejaVu Sans;">方法。例如，如果你有一个</span>field<span style="font-family: DejaVu Sans;">名叫</span>first_name<span style="font-family: DejaVu Sans;">在你的</span>Client<span style="font-family: DejaVu Sans;">模型中，你会免费的从</span>Active Record <span style="font-family: DejaVu Sans;">得到</span>find_by_first_name<span style="font-family: DejaVu Sans;">和</span>find_all_by_first_name<span style="font-family: DejaVu Sans;">方法。如果你在</span>Client<span style="font-family: DejaVu Sans;">模型中有一个</span>locked field<span style="font-family: DejaVu Sans;">，你也会获得</span>find_by_locked<span style="font-family: DejaVu Sans;">和</span>find_all_by_locked<span style="font-family: DejaVu Sans;">方法。</span>

You can also use <tt>find_last_by_*</tt> methods which will find the last record matching your argument.

<span style="font-family: DejaVu Sans;"><strong>你也可以使用</strong></span><strong>find_last_by_*</strong><span style="font-family: DejaVu Sans;"><strong>方法，它将会查找在机器中匹配你的参数的最后的记录。</strong></span>

You can specify an exclamation point (<tt>!</tt>) on the end of the dynamic finders to get them to raise an <tt>ActiveRecord::RecordNotFound</tt> error if they do not return any records, like <tt>Client.find_by_name!("Ryan")</tt>

<span style="font-family: DejaVu Sans;">你也可以在动态</span>finders<span style="font-family: DejaVu Sans;">末尾指定一个感叹号来来的到查询结果或者如果他们没有返回任何参数则抛出一个 </span><tt>ActiveRecord::RecordNotFound</tt><span style="font-family: DejaVu Sans;"><tt>错误。</tt></span>

<strong>If you want to find both by name and locked</strong>, you can chain these finders together by simply typing <tt>and</tt> between the fields. For example, <tt>Client.find_by_first_name_and_locked("Ryan", true).</tt>

<span style="color: #800000;">Up to and including Rails 3.1, when the number of arguments passed to a dynamic finder method is lesser than the number of fields, say </span><tt><span style="color: #800000;">Client.find_by_name_and_locked(“Ryan”)</span></tt><span style="color: #800000;">, the behavior is to pass </span><tt><span style="color: #800000;">nil</span></tt><span style="color: #800000;"> as the missing argument.<span style="font-family: DejaVu Sans;">如果参数少于动态</span></span><span style="color: #800000;">finder<span style="font-family: DejaVu Sans;">的</span></span><span style="color: #800000;">fields<span style="font-family: DejaVu Sans;">的数目，习惯上是对缺少的</span></span><span style="color: #800000;">fields<span style="font-family: DejaVu Sans;">传递一个</span></span><span style="color: #800000;">nil<span style="font-family: DejaVu Sans;">。 </span></span><span style="color: #800000;">This is </span><strong><span style="color: #800000;">unintentional</span></strong><span style="color: #800000;"> and this behavior will be changed in Rails 3.2 to throw an </span><tt><span style="color: #800000;">ArgumentError</span></tt><span style="color: #800000;">.<span style="font-family: DejaVu Sans;">这样做是没有意义的并且这个约定将会在</span></span><span style="color: #800000;">Rails 3.2<span style="font-family: DejaVu Sans;">中修改成抛出一个 </span></span><tt><span style="color: #800000;">ArgumentError</span></tt><span style="font-family: DejaVu Sans;"><tt><span style="color: #800000;">错误。</span></tt></span>

There’s another set of dynamic finders that let you find or create/initialize objects if they aren’t found. These work in a similar fashion to the other finders and can be used like <tt>find_or_create_by_first_name(params[:first_name])</tt>. Using this will first perform a find and then create if the find returns <tt>nil</tt>. The SQL looks like this for <tt>Client.find_or_create_by_first_name("Ryan")</tt>:

&nbsp;

<tt><em>SELECT * FROM clients WHERE (clients.first_name = 'Ryan') LIMIT 1</em></tt>

<tt><em>BEGIN</em></tt>

<tt><em>INSERT INTO clients (first_name, updated_at, created_at, orders_count, locked)</em></tt>

<tt> </tt><tt><em>VALUES('Ryan', '2008-09-28 15:39:12', '2008-09-28 15:39:12', 0, '0')</em></tt>

<tt><em>COMMIT</em></tt>

<tt><em>irb(main):134:0&gt; p=Post.find_or_create_by_name_and_title_and_content('1111111','111111111','11111111')</em></tt>

<tt> </tt><tt><em>Post Load (0.4ms) SELECT "posts".* FROM "posts" WHERE "posts"."title" = '111111111' AND "posts"."content" = '11111111' AND "posts"."name" = '1111111' LIMIT 1</em></tt>

<tt> </tt><tt><em>SQL (429.0ms) INSERT INTO "posts" ("content", "created_at", "name", "title", "updated_at") VALUES (?, ?, ?, ?, ?) [["content", "11111111"], ["created_at", Fri, 02 Dec 2011 08:42:39 UTC +00:00], ["name", "1111111"], ["title", "111111111"], ["updated_at", Fri, 02 Dec 2011 08:42:39 UTC +00:00]]</em></tt>

<tt><em>=&gt; #&lt;Post id: 5, name: "1111111", title: "111111111", content: "11111111", created_at: "2011-12-02 08:42:39", updated_at: "2011-12-02 08:42:39"&gt;</em></tt>

&nbsp;

<tt>find_or_create</tt>’s sibling, <tt>find_or_initialize</tt>, will find an object and if it does not exist will act similarly to calling <tt>new</tt> with the arguments you passed in. For example:

client = Client.find_or_initialize_by_first_name('Ryan')

will either assign an existing client object with the name “Ryan” to the client local variable, or initialize a new object similar to calling <tt>Client.new(:first_name =&gt; 'Ryan')</tt>. From here, you can modify other fields in client by calling the attribute setters on it: <tt>client.locked = true</tt> and when you want to write it to the database just call <tt>save</tt> on it.
<h3><a name="finding-by-sql"></a>15 Finding by SQL</h3>
If you’d like to use your own SQL to find records in a table you can use <tt>find_by_sql</tt>. The <tt>find_by_sql</tt> method will return an array of objects even if the underlying query returns just a single record. For example you could run this query:

<tt><em>Client.find_by_sql("SELECT * FROM clients</em></tt>

<tt> </tt><tt><em>INNER JOIN orders ON clients.id = orders.client_id</em></tt>

<tt> </tt><tt><em>ORDER clients.created_at desc")</em></tt>

<tt>find_by_sql</tt> provides you with a simple way of making custom calls to the database and retrieving instantiated objects.
<h3><a name="select_all"></a>16 <tt>select_all</tt></h3>
<tt>find_by_sql</tt> has a close relative called <tt>connection#select_all</tt>. <tt>select_all</tt> will retrieve objects from the database using custom SQL just like <tt>find_by_sql</tt> but will not instantiate them. Instead, you will get an array of hashes where each hash indicates<span style="font-family: DejaVu Sans;">指示 </span>a record.

<tt><em>Client.connection.select_all("SELECT * FROM clients WHERE id = '1'")</em></tt>
<h3><tt><span style="color: #000000;">15</span></tt><span style="font-family: WenQuanYi Micro Hei;"><tt><span style="color: #000000;">和</span></tt></span><tt><span style="color: #000000;">16 </span></tt><span style="font-family: WenQuanYi Micro Hei;"><tt><span style="color: #000000;">综合比较</span></tt></span></h3>
<tt><em>irb(main):174:0&gt; p=Post.find_by_sql("SELECT * FROM posts WHERE (posts.id = 1)") Post Load (1.7ms) SELECT * FROM posts WHERE (posts.id = 1)</em></tt>

<tt><em>=&gt; [#&lt;Post id: 1, name: "name111111111111111", title: "title111111111111111", content: "content111111111111111", created_at: "2011-12-02 08:56:33", updated_at: "2011-12-02 08:56:33"&gt;] </em></tt>

<tt><em>irb(main):175:0&gt; puts p</em></tt>

<tt><em>#&lt;Post:0xb6bf4d64&gt;</em></tt>

<tt><em>=&gt; nil</em></tt>

<tt><em>irb(main):176:0&gt; p=Post.connection.select_all("SELECT * FROM posts WHERE id = '1'")</em></tt>

<tt> </tt><tt><em>(0.6ms) SELECT * FROM posts WHERE id = '1'</em></tt>

<tt><em>=&gt; [{"name"=&gt;"name111111111111111", "created_at"=&gt;"2011-12-02 08:56:33.397313", "title"=&gt;"title111111111111111", "updated_at"=&gt;"2011-12-02 08:56:33.397313", "id"=&gt;1, "content"=&gt;"content111111111111111"}]</em></tt>

<tt><em>irb(main):177:0&gt; puts p</em></tt>

<tt><em>namename111111111111111created_at2011-12-02 08:56:33.397313titletitle111111111111111updated_at2011-12-02 08:56:33.397313id1contentcontent111111111111111</em></tt>

<tt><em>=&gt; nil</em></tt>
<h3><a name="existence-of-objects"></a>17 Existence of Objects<span style="font-family: WenQuanYi Micro Hei;">目标是否存在</span></h3>
If you simply want to check for the existence of the object there’s a method called <tt>exists?</tt>. This method will query the database using the same query as <tt>find</tt>, but instead of returning an object or collection of objects it will return either <tt>true</tt> or <tt>false</tt>.

<tt><em>Client.exists?(1)</em></tt>

The <tt>exists?</tt> method also takes multiple ids, but the catch is that it will return true if any one of those records exists.

<tt><em>Client.exists?(1,2,3)</em></tt>

<tt><em># or</em></tt>

<tt><em>Client.exists?([1,2,3])</em></tt>

It’s even possible to use <tt>exists?</tt> without any arguments on a model or a relation.

<tt><em>Client.where(:first_name =&gt; 'Ryan').exists?</em></tt>

The above returns <tt>true</tt> if there is at least one client with the <tt>first_name</tt> ‘Ryan’ and <tt>false</tt> otherwise.

<tt><em>Client.exists?</em></tt>

<strong>The above returns </strong><tt><strong>false</strong></tt><strong> if the </strong><tt><strong>clients</strong></tt><strong> table is empty and </strong><tt><strong>true</strong></tt><strong> otherwise.</strong>

You can also use <tt>any?</tt> and <tt>many?</tt> to check for existence on a model or relation.

<tt><em># via a model</em></tt>

<tt><em>Post.any?</em></tt>

<tt><em>Post.many?</em></tt>

&nbsp;

<tt><em># via a named scope</em></tt>

<tt><em>Post.recent.any?</em></tt>

<tt><em>Post.recent.many?</em></tt>

&nbsp;

<tt><em># via a relation</em></tt>

<tt><em>Post.where(:published =&gt; true).any?</em></tt>

<tt><em>Post.where(:published =&gt; true).many?</em></tt>

&nbsp;

<tt><em># via an association</em></tt>

<tt><em>Post.first.categories.any?#</em></tt><span style="font-family: DejaVu Sans;"><tt><em>第一个</em></tt></span><tt><em>post</em></tt><span style="font-family: DejaVu Sans;"><tt><em>的</em></tt></span><tt><em>category</em></tt><span style="font-family: DejaVu Sans;"><tt><em>是否存在</em></tt></span>

<tt><em>Post.first.categories.many?</em></tt>
<h3><a name="calculations"></a>18 Calculations</h3>
This section uses count as an example method in this preamble, but the options described apply to all sub-sections.

All calculation methods work directly on a model:

<tt><em>Client.count</em></tt>

<tt><em># SELECT count(*) AS count_all FROM clients</em></tt>

Or on a relation:

<tt><em>Client.where(:first_name =&gt; 'Ryan').count</em></tt>

<tt><em># SELECT count(*) AS count_all FROM clients WHERE (first_name = 'Ryan')</em></tt>

<tt><em>Post.first.tags.count</em></tt>

You can also use various finder methods on a relation for performing complex calculations:

<tt><em>Client.includes("orders").where(:first_name =&gt; 'Ryan', :orders =&gt; {:status =&gt; 'received'}).count</em></tt>

<tt><em>#Post.includes('tags').where(:id=&gt;"2",:tags=&gt;{:name=&gt;'123'}).count</em></tt>

Which will execute:

<tt><em>SELECT count(DISTINCT clients.id) AS count_all FROM clients</em></tt>

<tt> </tt><tt><em>LEFT OUTER JOIN orders ON orders.client_id = client.id WHERE</em></tt>

<tt> </tt><tt><em>(clients.first_name = 'Ryan' AND orders.status = 'received')</em></tt>
<h4><a name="count"></a>18.1 Count</h4>
If you want to see how many records are in your model’s table you could call <tt>Client.count</tt> and that will return the number. If you want to be more specific and find all the clients with their age present in the database you can use <tt>Client.count(:age)</tt>.

For options, please see the parent section, <a href="http://guides.rubyonrails.org/active_record_querying.html#calculations">Calculations</a>.
<h4><a name="average"></a>18.2 Average<span style="font-family: WenQuanYi Micro Hei;">平均值</span></h4>
If you want to see the average of a certain number in one of your tables you can call the <tt>average</tt> method on the class that relates to the table. This method call will look something like this:

<tt><em>Client.average("orders_count")</em></tt>

<tt><em>irb(main):215:0&gt; puts Post.average('created_at')</em></tt>

<tt> </tt><tt><em>(1.4ms) SELECT AVG("posts"."created_at") AS avg_id FROM "posts" </em></tt>

<tt><em>2011.0</em></tt>
<h4><a name="minimum"></a>18.3 Minimum</h4>
If you want to find the minimum value of a field in your table you can call the <tt>minimum</tt> method on the class that relates to the table. This method call will look something like this:

<tt><em>Client.minimum("age")</em></tt>

For options, please see the parent section, <a href="http://guides.rubyonrails.org/active_record_querying.html#calculations">Calculations</a>.
<h4><a name="maximum"></a>18.4 Maximum</h4>
If you want to find the maximum value of a field in your table you can call the <tt>maximum</tt> method on the class that relates to the table. This method call will look something like this:

<tt><em>Client.maximum("age")</em></tt>

For options, please see the parent section, <a href="http://guides.rubyonrails.org/active_record_querying.html#calculations">Calculations</a>.
<h4><a name="sum1"></a>18.5 Sum</h4>
If you want to find the sum of a field for all records in your table you can call the <tt>sum</tt> method on the class that relates to the table. This method call will look something like this:

<a name="sum"></a><tt><em>Client.sum("orders_count")</em></tt>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date>2011-12-02 17:54:26</wp:post_date>
		<wp:post_date_gmt>2011-12-02 09:54:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>active-record-query-interface-cn</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="cn"><![CDATA[CN]]></category>
		<category domain="post_tag" nicename="interface"><![CDATA[interface]]></category>
		<category domain="post_tag" nicename="query"><![CDATA[query]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="syntax"><![CDATA[syntax]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>42</wp:comment_id>
			<wp:comment_author><![CDATA[Beth]]></wp:comment_author>
			<wp:comment_author_email>greenmaster@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://fitnessequipmentsreviews.com/</wp:comment_author_url>
			<wp:comment_author_IP>180.109.222.0</wp:comment_author_IP>
			<wp:comment_date>2011-12-29 01:18:01</wp:comment_date>
			<wp:comment_date_gmt>2011-12-28 17:18:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[强大！]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>MAC OS快捷键 </title>
		<link></link>
		<pubDate>Tue, 06 Dec 2011 16:05:40 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=98</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

<strong>全局</strong><strong>
</strong>Cmd-C 复制文件
Cmd-V 粘贴文件
Option-拖动复制文件到新地址
Cmd-拖动移动并自动对齐
Cmd-Delete 删除
Cmd-Option-拖动做替身(快捷方式)
Cmd-Shift-Delete 清空垃圾桶
Cmd-Shift-Option-Delete 强制清空垃圾桶
Tab 选定下一个项目
Shift-Tab 选定上一个项目
Return 执行默认动作
Escape 关闭对话框
Page Up 向上翻页
向上箭头选取上一个文件
Page Down 向下翻页
向下箭头选取下一个文件
Cmd-Shift-G 打开’前往文件夹’对话框
Cmd-句号[.] 关闭对话框

<strong>Exposé</strong><strong> </strong><strong>和系统的快捷</strong><strong></strong>
F8 切换Space
Shift-F8 慢速切换Space
F9（默认设置）使用Exposé 显示所有打开的窗口
F10（默认设置）使用Exposé 在某个应用程序中显示所有打开的窗口
F11（默认设置）使用Exposé 隐藏所有打开的窗口并显示桌面
Cmd-H 隐藏程序
Cmd-Option-H 隐藏其他程序
Cmd-Q 退出程序
Cmd-Shift-Q 退出所有程序并且注销用户
Cmd-Option-Shift-Q 强制注销用户
Cmd-Tab 切换到下一个应用程序
Cmd-Shift-Tab 切换到上一个应用程序
Cmd-拖动整理菜单栏
按下Option 键并点按一个窗口切换窗口并隐藏当前窗口
按住Option 并点按Dock 图标切换到另一个应用程序并隐藏当前应用程序
按下Control 键并点按该项查看某个项的快捷（上下文）菜单
将光标移到该词上面，然后按Cmd-Control-D 使用Dictionary 查看对字词在应用程序中的定义

<strong>停止响应</strong>
Cmd-句号[.] 停止进程
Cmd-Option-Escape 打开’强制退出’
电源键关机
Cmd-Option-Shift-电源键强制关机或重新启动（在某些电脑上）
Cmd-Control-电源键强制重启


<strong>Finder</strong>
Cmd-点击标题查看当前窗口的路径
Cmd-双击(文件夹上) 新窗口中打开文件夹
Option-双击(文件夹上) 新窗口中打开文件夹并关闭当前窗口
Cmd-1 用图标浏览
Cmd-2 用列表浏览
Cmd-Option-向右箭头列表模式下显示包含的目录
向左箭头列表模式下关闭选定目录
Cmd-向下箭头在图标或列表模式下打开选定目录
Cmd-Option-向下箭头在图标或列表模式下在新窗口打开选定目录并关闭当前窗口
Cmd-Shift-Option-向下箭头(慢速)在图标或列表模式下在新窗口打开选定目录并关闭当前窗口
Cmd-向上箭头打开上一级目录
Cmd-Option-向上箭头打开上一级目录并关闭当前目录
Cmd-3 用分栏浏览
Cmd-4 用cover flow浏览
Cmd-Y 打开快速查看
Cmd-Option-Y 用幻灯片显示
Cmd-Shift-H 打开用户文件夹
Cmd-Option-Shift-向上箭头聚焦桌面
Cmd-Shift-I 打开iDisk
Cmd-Shift-D 打开桌面
Cmd-Shift-C 打开’电脑’
Cmd-Shift-K 打开网络
Cmd-Shift-A 打开应用程序
双击标题最小化窗口
Cmd-M 最小化窗口
Option-点击按钮应用到所有激活的窗口
按下并按住滚动条快速浏览长文稿
按住Option 键并点按滚动条迅速在“滚动到当前位置”和“滚动到页面”之间切换
Cmd-波浪符号(~) 激活当前应用程序中的上一个或下一个窗口

<strong>Dock</strong>
拖动分割线自定义Dock大小
Option-拖动分割线调整Dock到合适大小
Control-点击显示Dock快捷菜单
Control-点击图标显示项目的快捷菜单
Cmd-点击打开图标所在文件夹
Option-点击切换并隐藏当前程序
Cmd-Option-点击切换并隐藏所有程序
Cmd-Option-拖动强制程序打开文件
Cmd-Option-D 显示/隐藏Dock

<strong>启动</strong>
*快捷键只能在启动时使用
当您看到进程指示器（看起来像旋转的齿轮）时，请按住左边的Shift 键。防止自动登录
听到启动音之后立即按住Shift 键，然后当您看到进程指示器（看起来像旋转的齿轮）时释放该键。以安全模式启动（只
有必要的Mac OS X 项被启动，一些功能和应用程序可能无法正常工作。）
在登录屏幕上点按“登录”按钮之后，请按住Shift 键。防止登录时打开“登录项”和Finder 窗口
C 从光盘启动
N 从默认的NetBoot 磁盘映像启动
T 以目标磁盘模式启动
Option 选择启动磁盘（在某些电脑上）
Cmd-X 使用Mac OS X 而不是Mac OS 9 来进行启动（如果两者均位于同一宗卷上）
按住鼠标键推出可去掉的光盘
Cmd-Option-P-R 还原参数RAM
Cmd-V 显示详细的状态信息（详细模式）
Cmd-S 以单一用户模式启动


<strong>Safari</strong>
Cmd-Option-F google搜索栏
Option-向上箭头向上翻页
Option-向下箭头向下翻页
Cmd-点击链接在后台用新标签打开
Cmd-Shift-点击链接打开并激活新标签
Cmd-Option-点击链接打开新窗口
Option-点击Close 按钮关闭其他标签
Cmd-Shift-] 选取下一个标签
Cmd-Shift-[ 选取上一个标签
Cmd-Shift-H 打开主页
Cmd-Shift-K 切换’禁止弹出窗口'
Cmd-Option-E 清空缓存
Cmd-Option-R 不用缓存并刷新页面
Cmd-F 查找
Cmd-M 最小化窗口
Shift-点击按钮慢动作动画效果
Cmd-加号[+] 增大字体
Cmd-减号[-] 减小字体
Cmd-0 默认字体

<strong>Dashboard</strong>
使用这些快捷来处理Dashboard 和Dashboard widget。
F12（默认设置）显示或隐藏Dashboard
Cmd-R 重新载入当前widget
Cmd-等号(=) 显示或隐藏widget 栏
Cmd-向左箭头键，Cmd-向右箭头键滚动widget 栏
注:要更改Dashboard 的快捷，请选取“文件”&gt;“系统偏好设置”，点按“Exposé &amp; Spaces”，然后点按“Exposé”。


<strong>Front</strong><strong> </strong><strong>Row</strong>
您可以使用键盘来控制Front Row 而无需使用Apple Remote 遥控器。
Cmd-Esc (Escape) 打开Front Row
Cmd-Esc 或Esc 从打开的菜单中关闭Front Row
向上箭头键，向下箭头键浏览菜单和列表
Cmd-Esc 或Esc 返回上一级菜单
空格键或Return 选择菜单或列表中的项
空格键或Return 播放和暂停音频或视频
向上箭头键，向下箭头键更改音量
向右箭头键，向左箭头键前往下一个或上一个歌曲或照片
向右箭头键，向左箭头键前往所播放DVD 的下一章或上一章
右箭头键，左箭头键（按住按钮）快进或倒回歌曲、视频或DVD
在某些Apple 键盘和便携式电脑上，您或许也可以使用特定按键来更改音量和控制回放。


<strong>键盘导航</strong>
Control-F1 打开/关闭全键盘控制
Control-F2 聚焦菜单栏
Control-F3 聚焦Dock
Control-F4 聚焦活跃窗口或下一个窗口
Control-F5 聚焦窗口工具栏
Control-F6 聚焦浮动窗口
Control-F7 在控制或文本框与列表之间移动
Control-F8 聚焦菜单栏中的状态菜单
Cmd-Accent [`] 聚焦活跃应用程序的下一个窗口
Cmd-Shift-Accent [`] 聚焦活跃应用程序的上一个窗口
Cmd-Option-Accent [`] 聚焦窗口抽屉
Cmd-Option-T 显示或隐藏字符调板

</div>
<div>标签： <a href="http://jhjguxin.hwcrazy.com/tag/apple/">apple</a> <a href="http://jhjguxin.hwcrazy.com/tag/mac/">mac</a> <a href="http://jhjguxin.hwcrazy.com/tag/shortcuts/">shortcuts</a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date>2011-12-07 00:05:40</wp:post_date>
		<wp:post_date_gmt>2011-12-06 16:05:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mac-os%e5%bf%ab%e6%8d%b7%e9%94%ae</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apple"><![CDATA[apple]]></category>
		<category domain="post_tag" nicename="mac"><![CDATA[mac]]></category>
		<category domain="post_tag" nicename="shortcuts"><![CDATA[shortcuts]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>python中的编码问题</title>
		<link></link>
		<pubDate>Wed, 07 Dec 2011 05:37:19 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=101</guid>
		<description></description>
		<content:encoded><![CDATA[这里简单的说一下。（下面内容基本上时从《Python.Core.Programming.2ed》上摘的）
Unicode是计算机可以支持这个星球上的多种语言的秘密武器，在Unicode之前，用的都是ASCII，ASCII吗非常简单，每个英文字符都用7位二进制数的方式存储在计算机内，其范围是32到126.它的实现原理这里也不说了。
但是ASCII码只能表示95个可打印的字符，后来把ASCII扩展到了8位，这样就能表示223个字符了，虽然这个来表示欧美字母语言已经足够了，但是对于像中文等语系来说就太少了。于是Unicode码诞生了。
Unicode通过使用一个或者多个字节来表示一个字符，这样就突破了ASCII的限制，这样，Unicode可以表示超过90000个字符了。
 
Python 与Unicode
 
为了让Unicode和ASCII码值的字符串看起来尽可能的相像，Python的字符串从原来的简单数据类型改变成了真正的对象，ASCII字符串成了ＳｔｒｉｎｇＴｙｐｅ，而Ｕｎｉｃｏｄｅ字符串成了UnicodeType类型，他们的行为非常相近。String模块里面都有相应的处理函数。String模块已经停止了更新，只保留了对ＡＳＸＩＩ码的支持，string模块已经不推荐使用，在任何要跟Ｕｎｉｃｏｄｅ兼容的代码里都不要再用该模块，Python保留该模块仅仅为了向后兼容。
Python里面默认所有字面上的字符串都用ASCII编码，可以通过在字符串前面加一个‘ｕ’前缀的方式声明Ｕｎｉｃｏｄｅ字符串，这个‘ｕ’前缀告诉Python后面的字符串要编成Ｕｎｉｃｏｄｅ字符串。
 
&gt;&gt;&gt; "Hello World" #ASCII string
'Hello World'
&gt;&gt;&gt; u"Hello World" #Unicode string
u'Hello World'
 
内建的str()函数和chr（）函数不能处理Unicode，它们只能处理常规ASCII编码的字符串，如果一个Unicode字符串作为参数传给了str（）函数，它会首先被转换成ASCII码字符串然后交给str（）函数。
 
Codecs
 
Codec是把Coder/DECoder得首字母组合，它定义了文本跟二进制的转换方式，跟ASCII那种用一个字节把字符转换成数字的方式不同，Unicode用的是多字节，这导致了Unicode支持多种不同的编码方式，比如说codec支持的四种耳熟能详的编码方式是：ASCII，ISO8859—1/Latin-1，UTF-8,和UTF-16
最著名的是UTF-8编码，它也用一个字节来编码ASCII字符，这让那些必须同时处理ASCII码和Unicode码文本的程序员的工作变得非常轻松，因为ASCII字符的UTF-8编码和ASCII编码完全相同。
UTF-8编码可以用1到4个字节来表示其他语言的字符，这给那些需要直接处理Unicode数据的程序员带来了麻烦，因为他们没有办法按照固定长度逐一读出各个字符，幸运的是我们不需要掌握直接读取Unicode数据的方法，Python已经替我们完成了相关细节，我们无需为处理多字节字符的复杂问题而担心。
UTF-16也是一种变长编码，但是它不常用。
 
编码解码
 
Unicode支持多种编码格式，这为程序员带来了额外的负担，每当你向一个文件写入字符串的时候，你必须定义一个编码用于把对应的Unicode内容转换成你定义的格式，Python通过Unicode字符串的encode()函数解决了这个问题，该函数接受字符串中的字符为参数，输出你指定的编码格式的内容。
所以，每次我们写一个Unicode字符串到磁盘上我们都要用指定的编码器给他“编码“一下，相应地，当我们从这个文件读取数据时，我们必须”解码”该文件，使之成为Unicode字符串对象。
简单的例子：
<div><code>#!/usr/bin/env python
# -*- coding: UTF-8 -*-
import chardet
#chardet.detect(u'啊啊算法')
def u(s, encoding):
if isinstance(s, unicode):#用来判断是否为unicode
return s
else:
try:
return unicode(s, encoding)# 不是的话就转成unicode
except IOError:
print('error\n')</code>#s=r'\u6df1\u5733\u71c3\u6c14\u4e2d\u7b7e\u7387'
#zh = reduce(lambda x,y: x + unichr(int(y, 16)), s.split(r"\u"))
#print zh
def jiema(getstring):
fstr=r""
list_str=getstring.split(r'\u')
for single in list_str:
if single != '':
fstr+=unichr(int(single,16))
print fstrif __name__=='__main__':
coding=['utf','ascii','gb2312','gbk']
a='\u8bf7\u91cd\u65b0\u767b\u5f55'#这里没有加u得到的 就是ascii码
#if chardet.detect(u'啊啊算法')
if chardet.detect(a)['encoding']=='ascii':
print "beging to call jiema ...."
jiema(a)
else:
print "beging to zhuanma"
for code in coding:
print code
print u(a,code)
print """Python里面默认所有字面上的字符串都用ASCII编码，可以通过在字符串前面加一个‘ｕ’前缀的方式声明Ｕｎｉｃｏｄｅ字符串，这个‘ｕ’前缀告诉Python后面的字符串要编成Ｕｎｉｃｏｄｅ字符串。"""
print """ASCII 是一种字符集,包括大小写的英文字母、数字、控制字符等，它用一个字节表示，范围是 0-127Unicode分为UTF-8和UTF-16。UTF-8变长度的，最多 6 个字节，小于 127 的字符用一个字节表示，与 ASCII 字符集的结果一样，ASCII 编码下的英语文本不需要修改就可以当作 UTF-8 编码进行处理。"""
<div>标签： <a href="http://jhjguxin.hwcrazy.com/tag/python/">python</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date>2011-12-07 13:37:19</wp:post_date>
		<wp:post_date_gmt>2011-12-07 05:37:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python%e4%b8%ad%e7%9a%84%e7%bc%96%e7%a0%81%e9%97%ae%e9%a2%98</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Layouts and Rendering in Rails</title>
		<link></link>
		<pubDate>Thu, 08 Dec 2011 13:12:41 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=106</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Layouts and Rendering in Rails</h2>
This guide covers the basic layout features of Action Controller and Action View. By referring to this guide, you will be able to:

<span style="font-family: DejaVu Sans;">这个教程涵盖了</span>Action Controller and Action View<span style="font-family: DejaVu Sans;">的基础布局。通过这个教程，你可以了解到如下内容：</span>
<ul>
	<li>Use the various rendering methods built into Rails <span style="font-family: DejaVu Sans;">使用</span>Rails<span style="font-family: DejaVu Sans;">内建的各种渲染方法</span></li>
	<li>Create layouts with multiple content sections <span style="font-family: DejaVu Sans;">使用多个</span>content sections<span style="font-family: DejaVu Sans;">创建</span>layouts</li>
	<li>Use partials to DRY up your views <span style="font-family: DejaVu Sans;">在你的</span>view<span style="font-family: DejaVu Sans;">里面使用</span>partials</li>
	<li>Use nested layouts (sub-templates) <span style="font-family: DejaVu Sans;">使用嵌套</span>layouts<span style="font-family: DejaVu Sans;">（</span>sub-templates<span style="font-family: DejaVu Sans;">）</span></li>
</ul>
<h3><a name="overview-how-the-pieces-fit-together"></a> 1 Overview: How the Pieces Fit Together<span style="font-family: WenQuanYi Micro Hei;">概述：如何完整的组合在一起</span></h3>
This guide focuses on the interaction between Controller and View in the Model-View-Controller triangle. As you know, the Controller is responsible for orchestrating the whole process of handling a request in Rails, though it normally hands off any heavy code to the Model. But then, when it’s time to send a response back to the user, the Controller hands things off to the View. It’s that handoff that is the subject of this guide.

<span style="font-family: DejaVu Sans;">这个教程主要着重于在</span>model-view-controller<span style="font-family: DejaVu Sans;">三角（关系）中的</span>controller<span style="font-family: DejaVu Sans;">和</span>view<span style="font-family: DejaVu Sans;">之间的交互。众所周知，</span>controller<span style="font-family: DejaVu Sans;">是负责编排在</span>Rails<span style="font-family: DejaVu Sans;">处理请求的全过程，通过这样它一般可以让</span>model<span style="font-family: DejaVu Sans;">从沉重的代码中解放出来。但是接下来，什么时候是发回一个响应给用户呢，</span>controller<span style="font-family: DejaVu Sans;">把事情交给</span>view.<span style="font-family: DejaVu Sans;">这就是</span>handoff<span style="font-family: DejaVu Sans;">这也是这个教程的主题。</span>

In broad strokes, this involves deciding what should be sent as the response and calling an appropriate method to create that response. If the response is a full-blown view, Rails also does some extra work to wrap<span style="font-family: DejaVu Sans;">包裹</span>the view in a layout and possibly to pull in partial views. You’ll see all of those paths later in this guide.

<span style="font-family: DejaVu Sans;">在广泛的划分情况下，这涉及到决定应该发送什么作为响应或者调用一个适当的方法来创建一个响应。如果这个响应是一个</span>full-blown<span style="font-family: DejaVu Sans;">的</span>view<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">同样做一些额外的工作来在</span>layout<span style="font-family: DejaVu Sans;">中包装视图或者有可能的话调入其他部分</span>view<span style="font-family: DejaVu Sans;">。在后部分你将会看到完整的教程。</span>
<h3><a name="creating-responses"></a>2 Creating Responses<span style="font-family: WenQuanYi Micro Hei;">创建一个回应</span></h3>
From the controller’s point of view, there are three ways to create an HTTP response:

<span style="font-family: DejaVu Sans;">基于</span>controller<span style="font-family: DejaVu Sans;">的</span>view<span style="font-family: DejaVu Sans;">观点，这里有三种方法来创建一个</span>HTTP response<span style="font-family: DejaVu Sans;">：</span>
<ul>
	<li>Call <tt>render</tt> to create a full response to send back to the browser <span style="font-family: DejaVu Sans;">调用一个</span>render<span style="font-family: DejaVu Sans;">来创建以个完全回应</span>full response<span style="font-family: DejaVu Sans;">回传给浏览器。</span></li>
	<li>Call <tt>redirect_to</tt> to send an HTTP redirect status code to the browser <span style="font-family: DejaVu Sans;">调用一个</span>redirect_to<span style="font-family: DejaVu Sans;">来发送一个</span>HTTP<span style="font-family: DejaVu Sans;">重定向状态码给浏览器</span></li>
	<li>Call <tt>head</tt> to create a response consisting solely of HTTP headers to send back to the browser <span style="font-family: DejaVu Sans;">调用</span>head<span style="font-family: DejaVu Sans;">创建一个响应，只包括</span>HTTP<span style="font-family: DejaVu Sans;">头并将其发送回浏览器</span></li>
</ul>
I’ll cover each of these methods in turn. But first, a few words about the very easiest thing that the controller can do to create a response: nothing at all.

<span style="font-family: DejaVu Sans;">我将会依次（介绍）每种方法。但在此之前，用少量的文字说明最简单的事情<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span></span>controller<span style="font-family: DejaVu Sans;">创建一个回应：什么都没有。</span>
<h4><a name="rendering-by-default-convention-over-con"></a> 2.1 Rendering by Default: Convention Over Configuration in Action<span style="font-family: WenQuanYi Micro Hei;">以默认方式渲染：</span>Action<span style="font-family: WenQuanYi Micro Hei;">约定优于配置</span></h4>
You’ve heard that Rails promotes “convention over configuration”. Default rendering is an excellent example of this. By default, controllers in Rails automatically render views with names that correspond to valid routes. For example, if you have this code in your <tt>BooksController</tt> class:

<span style="font-family: DejaVu Sans;">你已经听过了</span>Rails<span style="font-family: DejaVu Sans;">的原则<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span>约定优于配置<span style="font-family: Liberation Serif,Times New Roman,serif;">”</span>。在这里默认的渲染是一个优秀的例子。<strong>默认情况中，</strong></span><strong>Rails</strong><span style="font-family: DejaVu Sans;"><strong>中的</strong></span><strong>controllers</strong><span style="font-family: DejaVu Sans;"><strong>自动渲染视图通过在</strong></span><strong>routes</strong><span style="font-family: DejaVu Sans;"><strong>中验证对应的视图名字</strong>。例如，如果你的（视图代码）在你的</span><tt>BooksController</tt><span style="font-family: DejaVu Sans;"><tt>类</tt>中：</span>

###rails generate scaffold Book title:string content:text

&nbsp;

class BooksController &lt; ApplicationController

end

And the following in your routes file:<span style="font-family: DejaVu Sans;">并且将下面的代码放入你的</span>routes<span style="font-family: DejaVu Sans;">文件中：</span>

resources :books

And you have a view file <tt>app/views/books/index.html.erb</tt>:

Rails will automatically render <tt>app/views/books/index.html.erb</tt> when you navigate to <tt>/books</tt> and you will see “Books are coming soon!” on your screen.

Rails<span style="font-family: DejaVu Sans;">将会自动渲染</span>render <tt>app/views/books/index.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>当你导航到</tt></span><tt>/books</tt><span style="font-family: DejaVu Sans;"><tt>并且你将会看到在你的屏幕上会出现</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></tt></span><tt>Books</tt><tt> </tt><tt>are</tt><tt> </tt><tt>coming</tt><tt> </tt><tt>soon!</tt><tt>”</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

<tt>However</tt><tt> </tt><tt>a</tt><tt> </tt><tt>coming</tt><tt> </tt><tt>soon</tt><tt> </tt><tt>screen</tt><tt> </tt><tt>is</tt><tt> </tt><tt>only</tt><tt> </tt><tt>minimally</tt><tt> </tt><tt>useful,</tt><tt> </tt><tt>so</tt><tt> </tt><tt>you</tt><tt> </tt><tt>will</tt><tt> </tt><tt>soon</tt><tt> </tt><tt>create</tt><tt> </tt><tt>your</tt><tt> </tt><tt>Book</tt><tt> </tt><tt>model</tt><tt> </tt><tt>and</tt><tt> </tt><tt>add</tt><tt> </tt><tt>the</tt><tt> </tt><tt>index</tt><tt> </tt><tt>action</tt><tt> </tt><tt>to</tt><tt> </tt><tt>BooksController:</tt>

<span style="font-family: DejaVu Sans;"><tt>无论如何</tt><tt></tt></span><tt>a</tt><tt> </tt><tt>coming</tt><tt> </tt><tt>soon</tt><tt> </tt><tt>screen</tt><span style="font-family: DejaVu Sans;"><tt>只是一个很小的用途，因此接着很快你将会创建你的</tt></span><tt>Book</tt><span style="font-family: DejaVu Sans;"><tt>模型并且添加</tt></span><tt>index</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>到</tt><tt></tt></span><tt>BooksController</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

<tt>class</tt><tt> </tt><tt>BooksController</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ApplicationController</tt>

<tt> </tt><tt>def</tt><tt> </tt><tt>index</tt>

<tt> </tt><tt>@books</tt><tt> </tt><tt>=</tt><tt> </tt><tt>Book.all</tt>

<tt> </tt><tt>end</tt>

<tt>end</tt>

<tt>Note</tt><tt> </tt><tt>that</tt><tt> </tt><tt>we</tt><tt> </tt><tt>don</tt><tt>’</tt><tt>t</tt><tt> </tt><tt>have</tt><tt> </tt><tt>explicit</tt><tt> </tt><tt>render</tt><tt> </tt><tt>at</tt><tt> </tt><tt>the</tt><tt> </tt><tt>end</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>index</tt><tt> </tt><tt>action</tt><tt> </tt><tt>in</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>按照</tt></span><tt>accordance</tt><tt> </tt><tt>with</tt><tt> “</tt><tt>convention</tt><tt> </tt><tt>over</tt><tt> </tt><tt>configuration</tt><tt>” </tt><tt>principle.</tt><tt> </tt><tt>The</tt><tt> </tt><tt>rule</tt><tt> </tt><tt>is</tt><tt> </tt><tt>that</tt><tt> </tt><tt>if</tt><tt> </tt><tt>you</tt><tt> </tt><tt>do</tt><tt> </tt><tt>not</tt><tt> </tt><tt>explicitly</tt><tt> </tt><tt>render</tt><tt> </tt><tt>something</tt><tt> </tt><tt>at</tt><tt> </tt><tt>the</tt><tt> </tt><tt>end</tt><tt> </tt><tt>of</tt><tt> </tt><tt>a</tt><tt> </tt><tt>controller</tt><tt> </tt><tt>action,</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>will</tt><tt> </tt><tt>automatically</tt><tt> </tt><tt>look</tt><tt> </tt><tt>for</tt><tt> </tt><tt>the</tt><tt> </tt><tt>action_name.html.erb</tt><tt> </tt><tt>template</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>controller</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>view</tt><tt> </tt><tt>path</tt><tt> </tt><tt>and</tt><tt> </tt><tt>render</tt><tt> </tt><tt>it.</tt><tt> </tt><tt>So</tt><tt> </tt><tt>in</tt><tt> </tt><tt>this</tt><tt> </tt><tt>case,</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>will</tt><tt> </tt><tt>render</tt><tt> </tt><tt>the</tt><tt> </tt><tt>app/views/books/index.html.erb</tt><tt> </tt><tt>file.</tt>

<span style="font-family: DejaVu Sans;">注意按照<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span>约定优于配置<span style="font-family: Liberation Serif,Times New Roman,serif;">”</span>原则，在</span>index action<span style="font-family: DejaVu Sans;">结束的时候，我们没有明确的渲染。这里的规则是如果你在使用一个</span>controller action<span style="font-family: DejaVu Sans;">结束的时候没有明确的</span>render<span style="font-family: DejaVu Sans;">一些事物，</span>Rails<span style="font-family: DejaVu Sans;">将会自动的在</span>controller<span style="font-family: DejaVu Sans;">的视图目录中找到</span><tt>action_name.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>文件并渲染它。因此在这个例子中，</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>将会渲染</tt><tt></tt></span><tt>app/views/books/index.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>文件。</tt></span>

If we want to display the properties of all the books in our view, we can do so with an ERB template like this:

<span style="font-family: DejaVu Sans;">如果我们想在我们的视图中显示所有</span>books<span style="font-family: DejaVu Sans;">的属性，我们可以这样做使用一个如下的</span>ERB<span style="font-family: DejaVu Sans;">模板：</span>

&lt;h1&gt;Listing Books&lt;/h1&gt;

&nbsp;

&lt;table&gt;

&lt;tr&gt;

&lt;th&gt;Title&lt;/th&gt;

&lt;th&gt;Summary&lt;/th&gt;

&lt;th&gt;&lt;/th&gt;

&lt;th&gt;&lt;/th&gt;

&lt;th&gt;&lt;/th&gt;

&lt;/tr&gt;

&nbsp;

&lt;% @books.each do |book| %&gt;

&lt;tr&gt;

&lt;td&gt;&lt;%= book.title %&gt;&lt;/td&gt;

&lt;td&gt;&lt;%= book.content %&gt;&lt;/td&gt;

&lt;td&gt;&lt;%= link_to 'Show', book %&gt;&lt;/td&gt;

&lt;td&gt;&lt;%= link_to 'Edit', edit_book_path(book) %&gt;&lt;/td&gt;

&lt;td&gt;&lt;%= link_to 'Remove', book, :confirm =&gt; 'Are you sure?', :method =&gt; :delete %&gt;&lt;/td&gt;

&lt;/tr&gt;

&lt;% end %&gt;

&lt;/table&gt;

&nbsp;

&lt;br /&gt;

&nbsp;

&lt;%= link_to 'New book', new_book_path %&gt;

&nbsp;

The actual rendering is done by subclasses of <tt>ActionView::TemplateHandlers</tt>. This guide does not dig into that process, but it’s important to know that the file extension on your view controls the choice of template handler. In Rails 2, the standard extensions are <tt>.erb</tt> for ERB (HTML with embedded Ruby), and <tt>.builder</tt> for Builder (XML generator).

actual<span style="font-family: DejaVu Sans;">渲染是通过</span><tt>ActionView::TemplateHandlers</tt><span style="font-family: DejaVu Sans;"><tt>的子类完成的。这个教程不会（深入）挖掘那个过程，但是知道一些文件存在在你的</tt></span><tt>view</tt><tt> </tt><tt>controls</tt><span style="font-family: DejaVu Sans;"><tt>，被选择用来做</tt></span><tt>template</tt><tt> </tt><tt>handler</tt><span style="font-family: DejaVu Sans;"><tt>这很重要。在</tt></span><tt>Rails2</tt><span style="font-family: DejaVu Sans;"><tt>中</tt></span><tt>ERB</tt><span style="font-family: DejaVu Sans;"><tt>（</tt></span><tt>HTML</tt><tt> </tt><tt>with</tt><tt> </tt><tt>embedded</tt><tt> </tt><tt>Ruby</tt><span style="font-family: DejaVu Sans;"><tt>）标准的扩展名是</tt></span><tt>.erb</tt><span style="font-family: DejaVu Sans;"><tt>，并且</tt></span><tt>.builder</tt><span style="font-family: DejaVu Sans;"><tt>是</tt></span><tt>Builder</tt><span style="font-family: DejaVu Sans;"><tt>（</tt></span><tt>XML</tt><span style="font-family: DejaVu Sans;"><tt>生成器）的扩展名。</tt></span>
<h4><a name="using-render"></a>2.2 Using <tt>render</tt></h4>
In most cases, the <tt>ActionController::Base#render</tt> method does the heavy lifting of rendering your application’s content for use by a browser. There are a variety of ways to customize the behaviour of <tt>render</tt>. You can render the default view for a Rails template, or a specific template, or a file, or inline code, or nothing at all. You can render text, JSON, or XML. You can specify the content type or HTTP status of the rendered response as well.

<span style="font-family: DejaVu Sans;">在大多数例子中，</span><tt>ActionController::Base#render</tt><span style="font-family: DejaVu Sans;"><tt>方法通过浏览器将你的应用程序的内容生动的</tt></span><tt>rendering</tt><span style="font-family: DejaVu Sans;"><tt>给用户。这里有多种方法来定制</tt></span><tt>render</tt><span style="font-family: DejaVu Sans;"><tt>的习惯。你可以</tt></span><tt>render</tt><span style="font-family: DejaVu Sans;"><tt>一个</tt></span><tt>Rails</tt><tt> </tt><tt>template</tt><span style="font-family: DejaVu Sans;"><tt>为默认的视图，或者指定一个</tt></span><tt>template</tt><span style="font-family: DejaVu Sans;"><tt>，或者一个文件，或者一个内联代码，或者什么都没有。你可以</tt></span><tt>render</tt><tt> </tt><tt>text</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>JSON</tt><span style="font-family: DejaVu Sans;"><tt>，或者</tt></span><tt>XML</tt><span style="font-family: DejaVu Sans;"><tt>。你可以指定上下文类型或者</tt></span><tt>HTTP</tt><span style="font-family: DejaVu Sans;"><tt>回应</tt></span><tt>rendered</tt><span style="font-family: DejaVu Sans;"><tt>的状态。</tt></span>

If you want to see the exact results of a call to <tt>render</tt> without needing to inspect<span style="font-family: DejaVu Sans;">检查</span>it in a browser, you can call <tt>render_to_string</tt>. This method takes exactly the same options as <tt>render</tt>, but it returns a string instead of sending a response back to the browser.

<span style="font-family: DejaVu Sans;">如果你想查看调用一个</span>render<span style="font-family: DejaVu Sans;">在浏览器中不需要检查的那些额外的结果。你可以调用</span>render_to_string<span style="font-family: DejaVu Sans;">。这个方法获取和</span>render<span style="font-family: DejaVu Sans;">完全的</span>options<span style="font-family: DejaVu Sans;">，但是它返回的一个字符串而不是发送一个</span>response<span style="font-family: DejaVu Sans;">回浏览器。</span>
<h5><a name="rendering-nothing"></a>2.2.1 Rendering Nothing</h5>
<strong>Perhaps</strong><strong> </strong><strong>the</strong><strong> </strong><strong>simplest</strong><strong> </strong><strong>thing</strong><strong> </strong><strong>you</strong><strong> </strong><strong>can</strong><strong> </strong><strong>do</strong><strong> </strong><strong>with</strong><strong> </strong><tt><strong>render</strong></tt><strong> </strong><strong>is</strong><strong> </strong><strong>to</strong><strong> </strong><strong>render</strong><strong> </strong><strong>nothing</strong><strong> </strong><strong>at</strong><strong> </strong><strong>all:</strong>

render :nothing =&gt; true

If you look at the response for this using cURL, you will see the following:

<span style="font-family: DejaVu Sans;">如果你使用</span>cURL<span style="font-family: DejaVu Sans;">查看回应，你将会看到如下内容：</span>

#curl -I 127.0.0.1:3000/books#<span style="font-family: DejaVu Sans;">此命令就是访问</span>HTTP status<span style="font-family: DejaVu Sans;">的</span>

$ curl -i 127.0.0.1:3000/books

HTTP/1.1 200 OK

Connection: close

Date: Sun, 24 Jan 2010 09:25:18 GMT

Transfer-Encoding: chunked

Content-Type: */*; charset=utf-8

X-Runtime: 0.014297

Set-Cookie: _blog_session=...snip...; path=/; HttpOnly

Cache-Control: max-age=0, private, must-revalidate

We see there is an empty response (no data after the <tt>Cache-Control</tt> line), but the request was successful because Rails has set the response to 200 OK. <strong>You</strong><strong> </strong><strong>can</strong><strong> </strong><strong>set</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>:status</strong></tt><strong> </strong><strong>option</strong><strong> </strong><strong>on</strong><strong> </strong><strong>render</strong><strong> </strong><strong>to</strong><strong> </strong><strong>change</strong><strong> </strong><strong>this</strong><strong> </strong><strong>response.</strong><strong> </strong><strong>Rendering</strong><strong> </strong><strong>nothing</strong><strong> </strong><strong>can</strong><strong> </strong><strong>be</strong><strong> </strong><strong>useful</strong><strong> </strong><strong>for</strong><strong> </strong><strong>AJAX</strong><strong> </strong><strong>requests</strong><strong> </strong><strong>where</strong><strong> </strong><strong>all</strong><strong> </strong><strong>you</strong><strong> </strong><strong>want</strong><strong> </strong><strong>to</strong><strong> </strong><strong>send</strong><strong> </strong><strong>back</strong><strong> </strong><strong>to</strong><strong> </strong><strong>the</strong><strong> </strong><strong>browser</strong><strong> </strong><strong>is</strong><strong> </strong><strong>an</strong><strong> </strong><strong>acknowledgment</strong><strong> </strong><strong>that</strong><strong> </strong><strong>the</strong><strong> </strong><strong>request</strong><strong> </strong><strong>was</strong><strong> </strong><strong>completed.</strong>

def index

&nbsp;

render :nothing =&gt; true,:status=&gt;500

&nbsp;

end

jhjguxin@jhjguxin-virtual-machine:~/blog$ curl -I 127.0.0.1:3000/books

&nbsp;

HTTP/1.1 300 Multiple Choices

HTTP/1.1 500 Internal Server Error

&nbsp;

You should probably be using the <tt>head</tt> method, discussed later in this guide, instead of <tt>render</tt><tt> </tt><tt>:nothing</tt>. This provides additional<span style="font-family: DejaVu Sans;">额外</span>flexibility<span style="font-family: DejaVu Sans;">灵活的</span>and makes it <strong>explicit</strong><strong> </strong><strong>that</strong><strong> </strong><strong>you</strong><strong>’</strong><strong>re</strong><strong> </strong><strong>only</strong><strong> </strong><strong>generating</strong><strong> </strong><strong>HTTP</strong><strong> </strong><strong>headers.</strong><span style="font-family: DejaVu Sans;"><strong>（使用</strong></span><strong>render</strong><strong> </strong><strong>:nothing</strong><span style="font-family: DejaVu Sans;"><strong>提供了额外的灵活性它能够准确的只创建</strong></span><strong>HTTP</strong><strong> </strong><strong>headers</strong><span style="font-family: DejaVu Sans;"><strong>）</strong></span>
<h5><a name="rendering-an-action-s-view"></a>2.2.2 Rendering an Action’s View<span style="font-family: WenQuanYi Micro Hei;">渲染一个动作的视图</span></h5>
If you want to render the view that corresponds to a different action within the same template, you can use <tt>render</tt> with the name of the view:

<span style="font-family: DejaVu Sans;">如果你想</span>render<span style="font-family: DejaVu Sans;">的视图对应着不同的</span>action<span style="font-family: DejaVu Sans;">在一个相同的</span>template<span style="font-family: DejaVu Sans;">中，你可以使用</span>render<span style="font-family: DejaVu Sans;">加上视图的名字。</span>

def update

@book = Book.find(params[:id])

if @book.update_attributes(params[:book])

redirect_to(@book)

else

render "edit"

end

end

If the call to <tt>update_attributes</tt> fails, calling the <tt>update</tt> action in this controller will render the <tt>edit.html.erb</tt> template belonging to the same controller.

If you prefer<span style="font-family: DejaVu Sans;">如果你喜欢</span>, you can use <strong>a</strong><strong> </strong><strong>symbol</strong><strong> </strong><strong>instead</strong><strong> </strong><strong>of</strong><strong> </strong><strong>a</strong><strong> </strong><strong>string</strong><strong> </strong><strong>to</strong><strong> </strong><strong>specify</strong><strong> </strong><strong>the</strong><strong> </strong><strong>action</strong><strong> </strong><strong>to</strong><strong> </strong><strong>render</strong>:

def update

@book = Book.find(params[:id])

if @book.update_attributes(params[:book])

redirect_to(@book)

else

render :edit

end

end

To be explicit, you can use <tt>render</tt> with the <tt>:action</tt> option (though this is no longer necessary in Rails 3.0):

def update

@book = Book.find(params[:id])

if @book.update_attributes(params[:book])

redirect_to(@book)

else

render :action =&gt; "edit"

end

end

Using <tt>render</tt> with <tt>:action</tt> is a frequent source of confusion for Rails newcomers. The specified action is used to determine which view to render, but Rails does not run any of the code for that action in the controller. Any instance variables that you require in the view must be set up in the current action before calling <tt>render</tt>.

<span style="font-family: DejaVu Sans;">使用</span>render<span style="font-family: DejaVu Sans;">和</span>:action<span style="font-family: DejaVu Sans;">是来（处理）来自</span>Rails<span style="font-family: DejaVu Sans;">的新访客的频繁混乱的（请求）。指定的</span>action<span style="font-family: DejaVu Sans;">是用来决定渲染哪个视图，但是</span>Rails<span style="font-family: DejaVu Sans;">并没有在</span>controller<span style="font-family: DejaVu Sans;">中为那个</span>action<span style="font-family: DejaVu Sans;">运行任何代码。不管在视图中的你请求的何种实例必须在调用</span>render<span style="font-family: DejaVu Sans;">之前被</span>set up<span style="font-family: DejaVu Sans;">到当前</span>action<span style="font-family: DejaVu Sans;">中。</span>
<h5><a name="rendering-an-action-s-template-from-anot"></a> 2.2.3 Rendering an Action’s Template from Another Controller<span style="font-family: WenQuanYi Micro Hei;">从另一个</span>controller<span style="font-family: WenQuanYi Micro Hei;">渲染一个</span>actions<span style="font-family: WenQuanYi Micro Hei;">的</span>template</h5>
What if you want to render a template from an entirely different controller from the one that contains the action code? You can also do that with <tt>render</tt>, which accepts the full path (relative to <tt>app/views</tt>) of the template to render. For example, if you’re running code in an <tt>AdminProductsController</tt> that lives in <tt>app/controllers/admin</tt>, you can render the results of an action to a template in <tt>app/views/products</tt> this way:

<span style="font-family: DejaVu Sans;">如果你想</span>render<span style="font-family: DejaVu Sans;">一个</span>template<span style="font-family: DejaVu Sans;">它的</span>action<span style="font-family: DejaVu Sans;">来自完全不同的</span>controller<span style="font-family: DejaVu Sans;">？你也可以使用</span>render<span style="font-family: DejaVu Sans;">来（达到目的），它接收</span>template<span style="font-family: DejaVu Sans;">的全路径（相对于</span>app/views#<span style="font-family: DejaVu Sans;">项目路径为根目录）来</span>render<span style="font-family: DejaVu Sans;">。</span>

<span style="font-family: DejaVu Sans;">例如，你正在运行的代码在</span><tt>AdminProductsController</tt><span style="font-family: DejaVu Sans;"><tt>存放在</tt><tt></tt></span><tt>app/controllers/admin</tt><span style="font-family: DejaVu Sans;"><tt>中你可以</tt></span><tt>render</tt><span style="font-family: DejaVu Sans;"><tt>一个</tt></span><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>的结果到</tt></span><tt>app/views/products</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>的一个</tt></span><tt>template</tt><span style="font-family: DejaVu Sans;"><tt>中用这样的方法：</tt></span><tt>
render</tt><tt> </tt><tt>'products/show'</tt>

Rails knows that this view belongs to a different controller because of the embedded slash character in the string. If you want to be explicit<span style="font-family: DejaVu Sans;">如果你想准确的表达</span>, you can use the <tt>:template</tt> option (which was required on Rails 2.2 and earlier):

render :template =&gt; 'products/show'
<h5><a name="rendering-an-arbitrary-file"></a>2.2.4 Rendering an Arbitrary File<span style="font-family: WenQuanYi Micro Hei;">渲染任意文件</span></h5>
The <tt>render</tt> method can also use a view that’s entirely outside of your application (perhaps you’re sharing views between two Rails applications):

render<span style="font-family: DejaVu Sans;">方法也可以使用一个完全脱离你的</span>application<span style="font-family: DejaVu Sans;">的视图（可能你在两个</span>Rails<span style="font-family: DejaVu Sans;">之间共享视图）</span>

render "/u/apps/warehouse_app/current/app/views/products/show"

Rails determines that this is a file render because of the leading slash character<span style="font-family: DejaVu Sans;">斜线字符</span>. To be explicit, you can use the <tt>:file</tt> option (which was required on Rails 2.2 and earlier):

Rails<span style="font-family: DejaVu Sans;">认为这个是一个文件</span>render<span style="font-family: DejaVu Sans;">是因为开头的斜线字符。更准确的（表示），你可以使用</span>:file<span style="font-family: DejaVu Sans;">选项（它至少需要</span>Rails2.2<span style="font-family: DejaVu Sans;">或者更高）。</span>

render :file =&gt;

"/u/apps/warehouse_app/current/app/views/products/show"

The <tt>:file</tt> option takes an absolute file-system path. Of course, you need to have rights to the view that you’re using to render the content.

:file<span style="font-family: DejaVu Sans;">选项获取一个完全文件系统路径。当然，你需要有权限（查看）你正在渲染的视图。</span>

By default, the file is rendered without using the current layout. If you want Rails to put the file into the current layout, you need to add the <tt>:layout</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt> option.

<span style="font-family: DejaVu Sans;">默认情况下，这个文件没有使用当前的</span>layout<span style="font-family: DejaVu Sans;">来</span>render<span style="font-family: DejaVu Sans;">。如果你想</span>Rails<span style="font-family: DejaVu Sans;">把这个文件渲染到当前</span>layout<span style="font-family: DejaVu Sans;">，你需要添加</span>:layout=&gt;true<span style="font-family: DejaVu Sans;">选项。</span>

&nbsp;

If you’re running Rails on Microsoft Windows, you should use the <tt>:file</tt> option to render a file, because Windows filenames do not have the same format as Unix filenames.<span style="font-family: DejaVu Sans;">如果你正在</span>Microsoft Windows<span style="font-family: DejaVu Sans;">中运行</span>Rails<span style="font-family: DejaVu Sans;">，你应该使用</span>:file<span style="font-family: DejaVu Sans;">选项来</span>render<span style="font-family: DejaVu Sans;">一个文件，因为</span>Windows<span style="font-family: DejaVu Sans;">文件名称与</span>Unix<span style="font-family: DejaVu Sans;">文件名称并不相同（这里的文件名称应该包含了路径）。</span>
<h5><a name="wrapping-it-up"></a>2.2.5 Wrapping it up<span style="font-family: WenQuanYi Micro Hei;">包装起来</span></h5>
The above three ways of rendering (rendering another template within the controller, rendering a template within another controller and rendering an arbitrary file on the file system) are actually variants of the same action.

<span style="font-family: DejaVu Sans;">这里总共有三种</span>rendering<span style="font-family: DejaVu Sans;">的方法（在</span>controller<span style="font-family: DejaVu Sans;">中</span>rendering<span style="font-family: DejaVu Sans;">另一个</span>template<span style="font-family: DejaVu Sans;">，使用另一个</span>controller render<span style="font-family: DejaVu Sans;">一个</span>template<span style="font-family: DejaVu Sans;">或者渲染一个文件系统上的任意类型的文件）实际上它们是相同</span>action<span style="font-family: DejaVu Sans;">的变种。</span>

In fact, in the BooksController class, inside of the update action where we want to render the edit template if the book does not update successfully, all of the following render calls would all render the <tt>edit.html.erb</tt> template in the <tt>views/books</tt> directory:

<span style="font-family: DejaVu Sans;">事实上，在</span>BooksController<span style="font-family: DejaVu Sans;">类中，在</span>update action<span style="font-family: DejaVu Sans;">中如果</span>book<span style="font-family: DejaVu Sans;">没有更新成功的话我们希望</span>render edit template<span style="font-family: DejaVu Sans;">，所有的后续</span>render<span style="font-family: DejaVu Sans;">调用将会全部</span>render<span style="font-family: DejaVu Sans;">在</span><tt>views/books</tt><span style="font-family: DejaVu Sans;"><tt>目录中的</tt></span><tt>edit.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span><tt>(edit</tt><span style="font-family: DejaVu Sans;"><tt>的各种</tt></span><tt>render</tt><span style="font-family: DejaVu Sans;"><tt>方式</tt></span><tt>)</tt>

render :edit

render :action =&gt; :edit

render 'edit'

render 'edit.html.erb'

render :action =&gt; 'edit'

render :action =&gt; 'edit.html.erb'

render 'books/edit'

render 'books/edit.html.erb'

render :template =&gt; 'books/edit'

render :template =&gt; 'books/edit.html.erb'

render '/path/to/rails/app/views/books/edit'

render '/path/to/rails/app/views/books/edit.html.erb'

render :file =&gt; '/path/to/rails/app/views/books/edit'

render :file =&gt; '/path/to/rails/app/views/books/edit.html.erb'

Which one you use is really a matter of style and convention, but the rule of thumb is to use the simplest one that makes sense for the code you are writing.

<span style="font-family: DejaVu Sans;">你实际使用的格式与风格和公约有关，但一般规则是使用最简单的一个，使你正在编写的代码的意义。</span>
<h5><a name="using-render-with-inline"></a>2.2.6 Using <tt>render</tt> with <tt>:inline</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>（使用）</tt></span><tt>:inline</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>和</tt></span><tt>render</tt></h5>
The <tt>render</tt> method can do without a view completely, if you’re willing to use the <tt>:inline</tt> option to supply ERB as part of the method call. This is perfectly valid:

render<span style="font-family: DejaVu Sans;">方法可以完全没有视图而（单独）使用，如果你使用</span>:inline<span style="font-family: DejaVu Sans;">选项来提供</span>ERB<span style="font-family: DejaVu Sans;">（</span>ERB<span style="font-family: DejaVu Sans;">标签）作为方法调用（的参数）。这完全合法的：</span>

render :inline =&gt;

"&lt;% products.each do |p| %&gt;&lt;p&gt;&lt;%= p.name %&gt;&lt;/p&gt;&lt;% end %&gt;"

&nbsp;

There is seldom<span style="font-family: DejaVu Sans;">很少</span>any good reason to use this option. Mixing ERB into your controllers defeats the MVC orientation of Rails and will make it harder for other developers to follow the logic of your project. Use a separate<span style="font-family: DejaVu Sans;">单独</span>erb view instead.

<span style="font-family: DejaVu Sans;">（很少有好的理由来使用这个选项）。在你的</span>controllers<span style="font-family: DejaVu Sans;">中复杂的</span>ERB<span style="font-family: DejaVu Sans;">使得你的</span>Rails<span style="font-family: DejaVu Sans;">（应用程序）在</span>MVC<span style="font-family: DejaVu Sans;">方面很失败，并且使得其他开发人员很难跟随你项目的逻辑。（最好）使用单个</span>erb<span style="font-family: DejaVu Sans;">视图替代。</span>

&nbsp;

By default, inline rendering uses ERB. You can force it to use Builder instead with the <tt>:type</tt> option:

<span style="font-family: DejaVu Sans;">默认情况下，</span>inline rendering<span style="font-family: DejaVu Sans;">使用</span>ERB<span style="font-family: DejaVu Sans;">。你可以使用创建器强制替代它通过</span>:type<span style="font-family: DejaVu Sans;">选项：</span>

render :inline =&gt;

"xml.p {'Horrid coding practice!'}", :type =&gt; :builder
<h5><a name="rendering-text"></a>2.2.7 Rendering Text<span style="font-family: WenQuanYi Micro Hei;">渲染文本</span></h5>
You can send plain text – with no markup at all – back to the browser by using the <tt>:text</tt> option to <tt>render</tt>:

<span style="font-family: DejaVu Sans;">你可以发送纯文本<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>没有做任何标记<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>返回到浏览器通过在</span>render<span style="font-family: DejaVu Sans;">中使用</span>:text<span style="font-family: DejaVu Sans;">选项：</span>

render :text =&gt; "OK"

Rendering pure text is most useful when you’re responding to AJAX or web service requests that are expecting something other than proper HTML.

Rendering<span style="font-family: DejaVu Sans;">纯文本在你回应到</span>AJAZ<span style="font-family: DejaVu Sans;">或者</span>web service<span style="font-family: DejaVu Sans;">请求的时候非常有用（因为）此时用户期待适当的</span>HTML<span style="font-family: DejaVu Sans;">以外的东西。</span>

&nbsp;

By default, if you use the <tt>:text</tt> option, the text is rendered without using the current layout. If you want Rails to put the text into the current layout, you need to add the <tt>:layout</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt> option.

<span style="font-family: DejaVu Sans;">作为默认的，如果你是用</span>:text<span style="font-family: DejaVu Sans;">选项，</span>text<span style="font-family: DejaVu Sans;">并没有被</span>render<span style="font-family: DejaVu Sans;">到当前</span>layout<span style="font-family: DejaVu Sans;">。如果你希望</span>Rails<span style="font-family: DejaVu Sans;">放置</span>text<span style="font-family: DejaVu Sans;">到当前的</span>layout<span style="font-family: DejaVu Sans;">，你需要添加</span>:layout=&gt;true<span style="font-family: DejaVu Sans;">选项。</span>
<h5><a name="rendering-json"></a>2.2.8 Rendering JSON<span style="font-family: WenQuanYi Micro Hei;">渲染</span>JSON</h5>
JSON is a JavaScript data format used by many AJAX libraries. Rails has built-in support for converting objects to JSON and rendering that JSON back to the browser:

JSON<span style="font-family: DejaVu Sans;">是</span>JavaScript<span style="font-family: DejaVu Sans;">数据格式它被很多</span>AJAX<span style="font-family: DejaVu Sans;">库使用。</span>Rails<span style="font-family: DejaVu Sans;">内建支持转换对象成</span>JSON<span style="font-family: DejaVu Sans;">并且</span>rendering<span style="font-family: DejaVu Sans;">这些</span>JSON<span style="font-family: DejaVu Sans;">反馈给浏览器：</span>

render :json =&gt; @product

You don’t need to call <tt>to_json</tt> on the object that you want to render. If you use the <tt>:json</tt> option, <tt>render</tt> will automatically call <tt>to_json</tt> for you.

<span style="font-family: DejaVu Sans;">你不必对你</span>render<span style="font-family: DejaVu Sans;">的</span>object<span style="font-family: DejaVu Sans;">调用</span>to_json<span style="font-family: DejaVu Sans;">。如果你使用</span>:json<span style="font-family: DejaVu Sans;">选项，</span>render<span style="font-family: DejaVu Sans;">将会自动为你调用</span>to_json<span style="font-family: DejaVu Sans;">。</span>
<h5><a name="rendering-xml"></a>2.2.9 Rendering XML</h5>
Rails also has built-in support for converting objects to XML and rendering that XML back to the caller:

render :xml =&gt; @product

You don’t need to call <tt>to_xml</tt> on the object that you want to render. If you use the <tt>:xml</tt> option, <tt>render</tt> will automatically call <tt>to_xml</tt> for you.
<h5><a name="rendering-vanilla-javascript"></a>2.2.10 Rendering Vanilla JavaScript<span style="font-family: WenQuanYi Micro Hei;">渲染香草味的的</span>JavaScript</h5>
Rails can render vanilla JavaScript:

render :js =&gt; "alert('Hello Rails');"

<strong>This</strong><strong> </strong><strong>will</strong><strong> </strong><strong>send</strong><strong> </strong><strong>the</strong><strong> </strong><strong>supplied</strong><strong> </strong><strong>string</strong><strong> </strong><strong>to</strong><strong> </strong><strong>the</strong><strong> </strong><strong>browser</strong><strong> </strong><strong>with</strong><strong> </strong><strong>a</strong><strong> </strong><strong>MIME</strong><strong> </strong><strong>type</strong><strong> </strong><strong>of</strong><strong> </strong><tt><strong>text/javascript</strong></tt><strong>.</strong>
<h5><a name="options-for-render"></a>2.2.11 Options for <tt>render</tt></h5>
Calls to the <tt>render</tt> method generally accept four options:
<ul>
	<li><tt>:content_type</tt></li>
	<li><tt>:layout</tt></li>
	<li><tt>:status</tt></li>
	<li><tt>:location</tt></li>
</ul>
<h6><a name="the-content_type-option"></a>2.2.11.1 The <tt>:content_type</tt> Option</h6>
By default, Rails will serve the results of a rendering operation with the MIME content-type of <tt>text/html</tt> (or <tt>application/json</tt> if you use the <tt>:json</tt> option, or <tt>application/xml</tt> for the <tt>:xml</tt> option.). There are times when you might like to change this, and you can do so by setting the <tt>:content_type</tt> option:

<span style="font-family: DejaVu Sans;">默认情况下，</span>Rails<span style="font-family: DejaVu Sans;">将会帮助渲染操作通过使用</span><tt>text/html</tt><span style="font-family: DejaVu Sans;"><tt>的</tt><tt></tt></span><tt>MIME</tt><tt> </tt><tt>content-type</tt><span style="font-family: DejaVu Sans;"><tt>（或者如果你使用</tt></span><tt>:json</tt><span style="font-family: DejaVu Sans;"><tt>选项则是</tt></span><tt>application/json</tt><span style="font-family: DejaVu Sans;"><tt>，或者如果是</tt></span><tt>:xml</tt><span style="font-family: DejaVu Sans;"><tt>选项</tt></span><tt>application/xml</tt><span style="font-family: DejaVu Sans;"><tt>）。有时你可以改成这样，你可以通过设置</tt></span><tt>:content_type</tt><span style="font-family: DejaVu Sans;"><tt>选项达成：</tt></span>

render :file =&gt; filename, :content_type =&gt; 'application/rss'
<h6><a name="the-layout-option"></a>2.2.11.2 The <tt>:layout</tt> Option</h6>
With most of the options to <tt>render</tt>, the rendered content is displayed as part of the current layout. You’ll learn more about layouts and how to use them later in this guide.

<span style="font-family: DejaVu Sans;">它是</span>render<span style="font-family: DejaVu Sans;">的常见的选项，通过这个选项被</span>rendered<span style="font-family: DejaVu Sans;">的内容被显示为当前</span>layout<span style="font-family: DejaVu Sans;">的一部分。在本教程的随后部分你将了解更多的</span>layouts<span style="font-family: DejaVu Sans;">的知识以及如何使用它们。</span>

You can use the <tt>:layout</tt> option to tell Rails to use a specific file as the layout for the current action:

render :layout =&gt; 'special_layout'

You can also tell Rails to render with no layout at all:

render :layout =&gt; false
<h6><a name="the-status-option"></a>2.2.11.3 The <tt>:status</tt> Option</h6>
Rails will automatically generate a response with the correct HTTP status code (in most cases, this is <tt>200</tt><tt> </tt><tt>OK</tt>). You can use the <tt>:status</tt> option to change this:

Rails<span style="font-family: DejaVu Sans;">将会自动生成（包含）正确的</span>HTTP<span style="font-family: DejaVu Sans;">状态码的响应（在大多数情况，</span>200 <span style="font-family: DejaVu Sans;">是</span>OK<span style="font-family: DejaVu Sans;">）。你可以使用</span>:status<span style="font-family: DejaVu Sans;">选项来更改这些</span>:

render :status =&gt; 500

#or

render :status =&gt; :forbidden

<strong>Rails</strong><strong> </strong><strong>understands</strong><strong> </strong><strong>both</strong><strong> </strong><strong>numeric</strong><strong> </strong><strong>status</strong><strong> </strong><strong>codes</strong><strong> </strong><strong>and</strong><strong> </strong><strong>symbols</strong><strong> </strong><strong>for</strong><strong> </strong><strong>status</strong><strong> </strong><strong>codes.</strong>
<h6><a name="the-location-option"></a>2.2.11.4 The <tt>:location</tt> Option</h6>
<strong>You</strong><strong> </strong><strong>can</strong><strong> </strong><strong>use</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>:location</strong></tt><strong> </strong><strong>option</strong><strong> </strong><strong>to</strong><strong> </strong><strong>set</strong><strong> </strong><strong>the</strong><strong> </strong><strong>HTTP</strong><strong> </strong><tt><strong>Location</strong></tt><strong> </strong><strong>header:</strong>

render :xml =&gt; photo, :location =&gt; photo_url(photo)
<h5><a name="finding-layouts"></a>2.2.12 Finding Layouts</h5>
To find the current layout, Rails first looks for a file in <tt>app/views/layouts</tt> with the same base name as the controller. For example, rendering actions from the <tt>PhotosController</tt> class will use <tt>app/views/layouts/photos.html.erb</tt> (or <tt>app/views/layouts/photos.builder</tt>). If there is no such controller-specific layout, Rails will use <tt>app/views/layouts/application.html.erb</tt> or <tt>app/views/layouts/application.builder</tt>. If there is no <tt>.erb</tt> layout, Rails will use a <tt>.builder</tt> layout if one exists. Rails also provides several ways to more precisely assign specific layouts to individual controllers and actions.

<span style="font-family: DejaVu Sans;">要查找正确的</span>layout<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">首先查找</span><tt>app/views/layouts</tt><span style="font-family: DejaVu Sans;"><tt>中与</tt></span><tt>controller</tt><tt> </tt><tt>base</tt><tt> </tt><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>相同的文件。</tt></span><tt>For</tt><tt> </tt><tt>example,</tt><tt> </tt><tt>rendering</tt><tt> </tt><tt>actions</tt><tt> </tt><tt>from</tt><tt> </tt><tt>the</tt><tt> </tt><tt>PhotosController</tt><tt> </tt><tt>class</tt><tt> </tt><tt>will</tt><tt> </tt><tt>use</tt><tt> </tt><tt>app/views/layouts/photos.html.erb</tt><tt> </tt><tt>(or</tt><tt> </tt><tt>app/views/layouts/photos.builder).</tt><tt> </tt><tt>If</tt><tt> </tt><tt>there</tt><tt> </tt><tt>is</tt><tt> </tt><tt>no</tt><tt> </tt><tt>such</tt><tt> </tt><tt>controller-specific</tt><tt> </tt><tt>layout,</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>will</tt><tt> </tt><tt>use</tt><tt> </tt><tt>app/views/layouts/application.html.erb</tt><tt> </tt><tt>or</tt><tt> </tt><tt>app/views/layouts/application.builder.</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>如果没有找到</tt></span><tt>.reb</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>layout</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>将会使用一个</tt></span><tt>.builder</tt><span style="font-family: DejaVu Sans;"><tt>如果存在。</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>也提供一些方法来恰当的分派</tt></span><tt>assign</tt><span style="font-family: DejaVu Sans;"><tt>指定的</tt></span><tt>layouts</tt><span style="font-family: DejaVu Sans;"><tt>到个别的</tt></span><tt>controllers</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>actions</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h6><a name="specifying-layouts-on-a-per-controller-b"></a> 2.2.12.1 Specifying Layouts on a per-Controller Basis</h6>
You can override the automatic layout conventions in your controllers by using the <tt>layout</tt> declaration in the controller. For example:

<span style="font-family: DejaVu Sans;">你可以通过在</span>controller<span style="font-family: DejaVu Sans;">（类）中使用</span>layout<span style="font-family: DejaVu Sans;">决定（指定的）</span>layout<span style="font-family: DejaVu Sans;">来覆盖自动</span>layout<span style="font-family: DejaVu Sans;">公约。例如：</span>

class ProductsController &lt; ApplicationController

layout "inventory"

#...

end

With this declaration, all methods within <tt> </tt><tt>ProductsController</tt> will use <tt>app/views/layouts/inventory.html.erb</tt> for their layout.

<span style="font-family: DejaVu Sans;">通过这个声明，在</span><tt>ProductsController</tt><span style="font-family: DejaVu Sans;"><tt>中所有的方法都将使用</tt><tt></tt></span><tt>app/views/layouts/inventory.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>作为他们的</tt></span><tt>layout</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

To assign a specific layout for the entire application, use a declaration in your <tt>ApplicationController</tt> class:

<span style="font-family: DejaVu Sans;"><strong>要分配一个指定的</strong></span><strong>layout</strong><span style="font-family: DejaVu Sans;"><strong>给整个</strong></span><strong>application</strong><span style="font-family: DejaVu Sans;"><strong>，在你的</strong></span><tt><strong>ApplicationController</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>类（</strong></tt></span><tt><strong>app/controllers/application_controller.rb</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>）</strong></tt><strong>使用一个声明：</strong></span>

class ApplicationController &lt; ActionController::Base

layout "main"

#...

end

With this declaration, all views in the entire application will use <tt>app/views/layouts/main.html.erb</tt> for their layout.<span style="font-family: DejaVu Sans;">通过这个声明，整个应用程序中的</span>view<span style="font-family: DejaVu Sans;">将会使用</span><tt>app/views/layouts/main.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>作为他们的</tt></span><tt>layout</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h6><a name="choosing-layouts-at-runtime"></a>2.2.12.2 Choosing Layouts at Runtime<span style="font-family: WenQuanYi Micro Hei;">在运行的时候选择</span>layout</h6>
You can use a symbol to defer the choice of layout until a request is processed:

<span style="font-family: DejaVu Sans;">你可以使用一个</span>symbol<span style="font-family: DejaVu Sans;">来推迟选择的</span>layout<span style="font-family: DejaVu Sans;">直到一个请求被处理：</span>

class ProductsController &lt; ApplicationController

layout :products_layout

&nbsp;

def show

@product = Product.find(params[:id])

end

&nbsp;

private

def products_layout

@current_user.special? ? "special" : "products"

end

&nbsp;

end

Now, if the current user is a special user, they’ll get a special layout when viewing a product. You can even use an inline method to determine the layout:

<span style="font-family: DejaVu Sans;">现在，如果当前用户是一个特殊用户，他们将得到一个特殊的</span>layout<span style="font-family: DejaVu Sans;">当其正在访问一个</span>product<span style="font-family: DejaVu Sans;">。你甚至可以使用一个内联方法来确定</span>layout<span style="font-family: DejaVu Sans;">：</span>

You can also decide the layout by passing a Proc object, the block you give the Proc will be given the <tt>controller</tt> instance, so you can make decisions based on the current request. For example:

<span style="font-family: DejaVu Sans;">你也可以通过一个</span>Proc object<span style="font-family: DejaVu Sans;">来决定</span>layout<span style="font-family: DejaVu Sans;">，你给出的</span>Proc<span style="font-family: DejaVu Sans;">块将会被传递给</span>controller<span style="font-family: DejaVu Sans;">实例，因此你可以在当前的请求的基础上作出（指定</span>layout<span style="font-family: DejaVu Sans;">的）决定。</span>

class ProductsController &lt; ApplicationController

layout Proc.new { |controller| controller.request.xhr? ? 'popup' : 'application' }

end

##<span style="font-family: DejaVu Sans;">块里面的内容是什么意思呢？</span>
<h6><a name="conditional-layouts"></a>2.2.12.3 Conditional Layouts<span style="font-family: WenQuanYi Micro Hei;">条件</span>layouts</h6>
Layouts specified at the controller level support <tt>:only</tt> and <tt>:except</tt> options that take either a method name or an array of method names which correspond to method names within the controller:

<span style="font-family: DejaVu Sans;">在</span>controller<span style="font-family: DejaVu Sans;">级别的</span>layouts<span style="font-family: DejaVu Sans;">指定支持</span>:only and :except<span style="font-family: DejaVu Sans;">选项它们获取一个方法名或者一个方法名组成的数组它们对应于在</span>controller<span style="font-family: DejaVu Sans;">中的方法名。</span>

class ProductsController &lt; ApplicationController

layout "product", :except =&gt; [:index, :rss]

end

With this declaration, the <tt>product</tt> layout would be used for everything but the <tt>rss</tt> and <tt>index</tt> methods.

<span style="font-family: DejaVu Sans;">通过这个声明，</span>product<span style="font-family: DejaVu Sans;">将会使用任何</span>layout<span style="font-family: DejaVu Sans;">但是除了</span>rss<span style="font-family: DejaVu Sans;">和</span>index<span style="font-family: DejaVu Sans;">方法。</span>
<h6><a name="layout-inheritance"></a>2.2.12.4 Layout Inheritance layout<span style="font-family: WenQuanYi Micro Hei;">继承</span></h6>
Layouts are shared downwards in the hierarchy, and more specific layouts always override more general ones. For example:
<ul>
	<li><tt>application_controller.rb</tt></li>
</ul>
class ApplicationController &lt; ActionController::Base

layout "main"

end
<ul>
	<li><tt><span style="color: #000000;"><span style="font-size: small;">posts_controller.rb</span></span></tt></li>
</ul>
class PostsController &lt; ApplicationController

end
<ul>
	<li><tt>special_</tt><tt><span style="color: #000000;"><span style="font-size: small;">posts</span></span></tt><tt>_controller.rb</tt></li>
</ul>
class SpecialPostsController &lt; PostsController

layout "special"

end
<ul>
	<li><tt><span style="color: #000000;"><span style="font-size: small;">old_posts_controller.rb</span></span></tt></li>
</ul>
class OldPostsController &lt; SpecialPostsController

layout nil

&nbsp;

def show

@post = Post.find(params[:id])

end

&nbsp;

def index

@old_posts = Post.older

render :layout =&gt; "old"

end

# ...

end

In this application:
<ul>
	<li>In general, views will be rendered in the <tt>main</tt> layout</li>
	<li><tt>PostsController#index</tt> will use the <tt>main</tt> layout</li>
	<li><tt>SpecialPostsController#index</tt> will use the <tt>special</tt> layout</li>
	<li><tt>OldPostsController#show</tt> will use<strong> </strong><strong>no</strong><strong> </strong><strong>layout</strong><strong> </strong><strong>at</strong><strong> </strong><strong>all</strong><strong> </strong></li>
	<li><tt>OldPostsController#index</tt> will use the <tt>old</tt> layout</li>
</ul>
<h5><a name="avoiding-double-render-errors"></a>2.2.13 Avoiding Double Render Errors<span style="font-family: WenQuanYi Micro Hei;">避免两次</span>render<span style="font-family: WenQuanYi Micro Hei;">错误</span></h5>
Sooner or later, most Rails developers will see the error message “Can only render or redirect once per action”. While this is annoying, it’s relatively easy to fix. Usually it happens because of a fundamental misunderstanding of the way that <tt>render</tt> works.

<span style="font-family: DejaVu Sans;">迟早，多大数</span>Rails<span style="font-family: DejaVu Sans;">开发人员将会看到<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>Can only render or redirect once per action”.<span style="font-family: DejaVu Sans;">当这恼人的</span>(<span style="font-family: DejaVu Sans;">消息出现的时候</span>)<span style="font-family: DejaVu Sans;">，它相当容易修复。它发生的通常情况是因为对</span>render<span style="font-family: DejaVu Sans;">工作方式的根本误解。</span>

For example, here’s some code that will trigger this error:

<span style="font-family: DejaVu Sans;">例如，这些代码将会触发这个错误：</span>

def show

@book = Book.find(params[:id])

if @book.special?

render :action =&gt; "special_show"

end

render :action =&gt; "regular_show"

end

If <tt>@book.special?</tt> evaluates to <tt>true</tt>, Rails will start the rendering process to dump<span style="font-family: DejaVu Sans;">转储</span>the <tt>@book</tt> variable into the <tt>special_show</tt> view.<strong> </strong><strong>But</strong><strong> </strong><strong>this</strong><strong> </strong><strong>will</strong><strong> </strong><em><strong>not</strong></em><strong> </strong><strong>stop</strong><strong> </strong><strong>the</strong><strong> </strong><strong>rest</strong><strong> </strong><strong>of</strong><strong> </strong><strong>the</strong><strong> </strong><strong>code</strong><strong> </strong><strong>in</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>show</strong></tt><strong> </strong><strong>action</strong><strong> </strong><strong>from</strong><strong> </strong><strong>running</strong>, and <strong>when</strong><strong> </strong><strong>Rails</strong><strong> </strong><strong>hits</strong><strong> </strong><strong>the</strong><strong> </strong><strong>end</strong><strong> </strong><strong>of</strong><strong> </strong><strong>the</strong><strong> </strong><strong>action,</strong><strong> </strong><strong>it</strong><strong> </strong><strong>will</strong><strong> </strong><strong>start</strong><strong> </strong><strong>to</strong><strong> </strong><strong>render</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>regular_show</strong></tt><strong> </strong><strong>view</strong><strong> – </strong><strong>and</strong><strong> </strong><strong>throw</strong><strong> </strong><strong>an</strong><strong> </strong><strong>error</strong>. The solution is simple: make sure that you have only one call to <tt>render</tt> or <tt>redirect</tt> in a single code path. One thing that can help is <tt>and</tt><tt> </tt><tt>return</tt>. Here’s a patched version of the method:

def show

@book = Book.find(params[:id])

if @book.special?

render :action =&gt; "special_show" and return

end

render :action =&gt; "regular_show"

end

Make sure you use <tt>and</tt><tt> </tt><tt>return</tt> and not <tt>&amp;&amp;</tt><tt> </tt><tt>return</tt> because while the former will work, the latter will not due to operator precedence in the Ruby Language.

<span style="font-family: DejaVu Sans;">确保你使用的是</span>and return<span style="font-family: DejaVu Sans;">而不是</span>&amp;&amp; return<span style="font-family: DejaVu Sans;">因为即使</span>former<span style="font-family: DejaVu Sans;">将会工作，然而随后的却不会那是因为</span>ruby<span style="font-family: DejaVu Sans;">语言中的运算优先操作。</span>

irb(main):019:0&gt; 1+3 and p 3+4

7

=&gt; nil

irb(main):020:0&gt; 1+3 &amp;&amp; p 3+4

SyntaxError: compile error

(irb):20: syntax error, unexpected tINTEGER, expecting kDO or '{' or '('

1+3 &amp;&amp; p 3+4

^

from (irb):20

from :0

irb(main):021:0&gt; 1+3 &amp;&amp;(p 3+4)

7

=&gt; nil

irb(main):022:0&gt; false and 3+4

=&gt; false
<h4><a name="using-redirect_to"></a>2.3 Using <tt>redirect_to</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>使用重定向</tt></span></h4>
<strong>Another</strong><strong> </strong><strong>way</strong><strong> </strong><strong>to</strong><strong> </strong><strong>handle</strong><strong> </strong><strong>returning</strong><strong> </strong><strong>responses</strong><strong> </strong><strong>to</strong><strong> </strong><strong>an</strong><strong> </strong><strong>HTTP</strong><strong> </strong><strong>request</strong><strong> </strong><strong>is</strong><strong> </strong><strong>with</strong><strong> </strong><tt><strong>redirect_to</strong></tt>. As you’ve seen, <tt>render</tt> tells Rails which view (or other asset) to use in constructing a response. The <tt>redirect_to</tt> method does something completely different: it tells the browser to send a new request for a different URL. For example, you could redirect from wherever you are in your code to the index of photos in your application with this call:

<span style="font-family: DejaVu Sans;">另一种方法是使用</span><tt>redirect_to</tt><span style="font-family: DejaVu Sans;"><tt>来处理</tt></span><tt>HTTP</tt><span style="font-family: DejaVu Sans;"><tt>请求返回响应。正如你看到的，</tt></span><tt>render</tt><span style="font-family: DejaVu Sans;"><tt>通知</tt></span><tt>Rails</tt><tt>——</tt><span style="font-family: DejaVu Sans;"><tt>视图（或者其他</tt></span><tt>asset</tt><span style="font-family: DejaVu Sans;"><tt>）使用其他（</tt></span><tt>layout</tt><span style="font-family: DejaVu Sans;"><tt>）结构来响应。</tt><tt></tt></span><tt>redirect_to</tt><span style="font-family: DejaVu Sans;"><tt>方法做一些完全不同的事情：它告诉浏览器发送一个新的请求给不同的</tt></span><tt>URL</tt><span style="font-family: DejaVu Sans;"><tt>。例如，无论你在你代码的哪里你可以重定向到</tt></span><tt>photos</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>index</tt><span style="font-family: DejaVu Sans;"><tt>，在你的应用程序中使用这个掉用：</tt></span>

<code>redirect_to</code><code> </code><code>photos_path</code>

You can use <tt>redirect_to</tt> <strong>with</strong><strong> </strong><strong>any</strong><strong> </strong><strong>arguments</strong> that you <strong>could</strong><strong> </strong><strong>use</strong><strong> </strong><strong>with</strong><strong> </strong><tt><strong>link_to</strong></tt><strong> </strong><strong>or</strong><strong> </strong><tt><strong>url_for</strong></tt>. In addition, <strong>there</strong><strong>’</strong><strong>s</strong><strong> </strong><strong>a</strong><strong> </strong><strong>special</strong><strong> </strong><strong>redirect</strong><strong> </strong><strong>that</strong><strong> </strong><strong>sends</strong><strong> </strong><strong>the</strong><strong> </strong><strong>user</strong><strong> </strong><strong>back</strong><strong> </strong><strong>to</strong><strong> </strong><strong>the</strong><strong> </strong><strong>page</strong><strong> </strong><strong>they</strong><strong> </strong><strong>just</strong><strong> </strong><strong>came</strong><strong> </strong><strong>from:</strong><span style="font-family: DejaVu Sans;"><strong>这里是特殊的重定向发送（命令）给用户（的浏览器）回到原来的页面：</strong></span>

redirect_to :back
<h5><a name="getting-a-different-redirect-status-code"></a> 2.3.1 Getting a Different Redirect Status Code</h5>
Rails uses HTTP status code 302 (temporary redirect) when you call <tt> </tt><tt>redirect_to</tt>. If you’d like to use a different status code (perhaps 301, permanent redirect), you can do so by using the <tt>:status</tt> option:

Rails<span style="font-family: DejaVu Sans;">使用</span>HTTP<span style="font-family: DejaVu Sans;">状态代码</span>301(<span style="font-family: DejaVu Sans;">临时重定向</span>)<span style="font-family: DejaVu Sans;">当你调用</span><tt>redirect_to</tt><span style="font-family: DejaVu Sans;"><tt>。如果你想使用一个不同的状态代码（可能是</tt></span><tt>301</tt><span style="font-family: DejaVu Sans;"><tt>，永久重定向），你可以通过使用</tt></span><tt>:status</tt><span style="font-family: DejaVu Sans;"><tt>选项：</tt></span>

redirect_to photos_path, :status =&gt; 301

Just like the <tt>:status</tt> option for <tt>render</tt>, <tt>:status</tt> for <tt>redirect_to</tt> accepts both numeric and symbolic header designations<span style="font-family: DejaVu Sans;">名称</span>.
<h5><a name="the-difference-between-render-and-redire"></a> 2.3.2 The Difference Between <tt>render</tt> and <tt>redirect_to</tt></h5>
Sometimes inexperienced developers conceive of <tt>redirect_to</tt> as a sort of <tt>goto</tt> command, moving execution from one place to another in your Rails code. <strong>This</strong><strong> </strong><strong>is</strong><strong> </strong><em><strong>not</strong></em><strong> </strong><strong>correct.</strong><strong> </strong><strong>Your</strong><strong> </strong><strong>code</strong><strong> </strong><strong>stops</strong><strong> </strong><strong>running</strong><strong> </strong><strong>and</strong><strong> </strong><strong>waits</strong><strong> </strong><strong>for</strong><strong> </strong><strong>a</strong><strong> </strong><strong>new</strong><strong> </strong><strong>request</strong><strong> </strong><strong>for</strong><strong> </strong><strong>the</strong><strong> </strong><strong>browser.</strong><strong> </strong>It just happens that you’ve told the browser what request it should make next, by sending back an HTTP 302 status code.

<span style="font-family: DejaVu Sans;">有时缺乏经验的开发人员心中构想的</span><tt>redirect_to</tt><span style="font-family: DejaVu Sans;"><tt>就像一种</tt></span><tt>goto</tt><span style="font-family: DejaVu Sans;"><tt>命令，从你的</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>代码的一个地方移动到另一个地方执行。</tt></span>

Consider these actions to see the difference:

def index

@books = Book.all

end

&nbsp;

def show

@book = Book.find_by_id(params[:id])

if @book.nil?

render :action =&gt; "index"

end

end

With the code in this form, there will likely be a problem if the <tt>@book</tt> variable is <tt>nil</tt>. Remember, a <tt>render</tt><tt> </tt><tt>:action</tt> <strong>doesn</strong><strong>’</strong><strong>t</strong><strong> </strong><strong>run</strong><strong> </strong><strong>any</strong><strong> </strong><strong>code</strong><strong> </strong><strong>in</strong><strong> </strong><strong>the</strong><strong> </strong><strong>target</strong><strong> </strong><strong>action</strong>, so nothing will set up the <tt>@books</tt> variable that the <tt>index</tt> view is presumably<span style="font-family: DejaVu Sans;">可能</span>depending on<span style="font-family: DejaVu Sans;">（实际验证结果也就是说</span>@books<span style="font-family: DejaVu Sans;">为空）</span>. One way to fix this is to redirect instead of rendering:

def index

@books = Book.all

end

&nbsp;

def show

@book = Book.find_by_id(params[:id])

if @book.nil?

redirect_to :action =&gt; :index

end

end

<strong>With</strong><strong> </strong><strong>this</strong><strong> </strong><strong>code,</strong><strong> </strong><strong>the</strong><strong> </strong><strong>browser</strong><strong> </strong><strong>will</strong><strong> </strong><strong>make</strong><strong> </strong><strong>a</strong><strong> </strong><strong>fresh</strong><strong> </strong><strong>request</strong><strong> </strong><strong>for</strong><strong> </strong><strong>the</strong><strong> </strong><strong>index</strong><strong> </strong><strong>page,</strong><strong> </strong><strong>the</strong><strong> </strong><strong>code</strong><strong> </strong><strong>in</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>index</strong></tt><strong> </strong><strong>method</strong><strong> </strong><strong>will</strong><strong> </strong><strong>run,</strong><strong> </strong><strong>and</strong><strong> </strong><strong>all</strong><strong> </strong><strong>will</strong><strong> </strong><strong>be</strong><strong> </strong><strong>well.</strong>

The only downside to this code, is that it requires a round trip<span style="font-family: DejaVu Sans;">旅</span>to the browser, the browser requested the show action with <tt>/books/1</tt> and the controller finds that there are no books, so the controller sends out a 302 redirect response to the browser telling it to go to <tt>/books/</tt>, the browser complies<span style="font-family: DejaVu Sans;">依从</span>and sends a new request back to the controller asking now for the <tt>index</tt> action, the controller then gets all the books in the database and renders the index template, sending it back down to the browser which then shows it on your screen.

<span style="font-family: DejaVu Sans;">这段代码仅有的缺点，是它需要浏览器兜一个圈，浏览器通过向服务器发送</span>/books/1<span style="font-family: DejaVu Sans;">请求</span>show action<span style="font-family: DejaVu Sans;">同时</span>controller<span style="font-family: DejaVu Sans;">发现数据库没有这本书，因此</span>controller<span style="font-family: DejaVu Sans;">发出一个</span>302<span style="font-family: DejaVu Sans;">重定向响应给浏览器告诉它导航到</span>/books/<span style="font-family: DejaVu Sans;">，浏览器依从（响应）并且发回一个新的请求来申请现在（进行）</span>index action<span style="font-family: DejaVu Sans;">，</span>controller<span style="font-family: DejaVu Sans;">随后从数据库中获取所有的</span>books<span style="font-family: DejaVu Sans;">并且</span>renders<span style="font-family: DejaVu Sans;">到</span>index template<span style="font-family: DejaVu Sans;">，发送它至浏览器然后在你的</span>screen<span style="font-family: DejaVu Sans;">得到显示。</span>

While in a small app, this added latency might not be a problem, it is something to think about when speed of response is of the essence<span style="font-family: DejaVu Sans;">本质</span>. One way to handle this double request (though a contrived example) could be:

<span style="font-family: DejaVu Sans;">然而在一个小的</span>app<span style="font-family: DejaVu Sans;">，加载延迟不是问题，有时候是基于响应速度为主的考虑。一种方式来处理这个两次请求（通过一个人为的例子）可以像这样：</span>

def index

@books = Book.all

end

&nbsp;

def show

@book = Book.find_by_id(params[:id])

if @book.nil?

@books = Book.all

render "index", :alert =&gt; 'Your book was not found!'

end

end

Which would detect<span style="font-family: DejaVu Sans;">检测</span>that there are no books, populate<span style="font-family: DejaVu Sans;">填充</span>the <tt>@books</tt> instance variable with all the books in the database and then directly render the <tt>index.html.erb</tt> template returning it to the browser with a flash alert message telling the user what happened.
<h4><a name="using-head-to-build-header-only-response"></a> 2.4 Using <tt>head</tt> To Build Header-Only Responses<span style="font-family: WenQuanYi Micro Hei;">使用</span>head<span style="font-family: WenQuanYi Micro Hei;">来创建一个</span>Header-Only<span style="font-family: WenQuanYi Micro Hei;">响应</span></h4>
<strong>The</strong><strong> </strong><tt><strong>head</strong></tt><strong> </strong><strong>method</strong><strong> </strong><strong>can</strong><strong> </strong><strong>be</strong><strong> </strong><strong>used</strong><strong> </strong><strong>to</strong><strong> </strong><strong>send</strong><strong> </strong><strong>responses</strong><strong> </strong><strong>with</strong><strong> </strong><strong>only</strong><strong> </strong><strong>headers</strong><strong> </strong><strong>to</strong><strong> </strong><strong>the</strong><strong> </strong><strong>browser.</strong><strong> </strong>It provides a more obvious alternative to calling <tt>render</tt><tt> </tt><tt>:nothing</tt>.<span style="font-family: DejaVu Sans;">它提供一个</span><tt>render</tt><tt> </tt><tt>:nothing</tt><span style="font-family: DejaVu Sans;"><tt>明显的替代。</tt></span>The <tt>head</tt> method takes one parameter, which is interpreted<span style="font-family: DejaVu Sans;">解释执行</span>as a hash of header names and values. For example, you can return only an error header:

head :bad_request

Which would produce the following header:

HTTP/1.1 400 Bad Request

Connection: close

Date: Sun, 24 Jan 2010 12:15:53 GMT

Transfer-Encoding: chunked

Content-Type: text/html; charset=utf-8

X-Runtime: 0.013483

Set-Cookie: _blog_session=...snip...; path=/; HttpOnly

Cache-Control: no-cache

Or you can use other HTTP headers to convey additional information:

<span style="font-family: DejaVu Sans;">或者你可以使用其他的</span>HTTP headers<span style="font-family: DejaVu Sans;">来传递额外信息：</span>

head :created, :location =&gt; photo_path(@photo)

Which would produce:<span style="font-family: DejaVu Sans;">这将会生成：</span>

HTTP/1.1 201 Created

Connection: close

Date: Sun, 24 Jan 2010 12:16:44 GMT

Transfer-Encoding: chunked

Location: /photos/1

Content-Type: text/html; charset=utf-8

X-Runtime: 0.083496

Set-Cookie: _blog_session=...snip...; path=/; HttpOnly

Cache-Control: no-cache
<h3><a name="structuring-layouts"></a>3 Structuring Layouts<span style="font-family: WenQuanYi Micro Hei;">结构布局</span></h3>
When Rails renders a view as a response, it does so by combining the view with the current layout (using the rules for finding the current layout that were covered earlier in this guide). Within a layout, you have access to three tools for combining different bits of output to form the overall response:

<span style="font-family: DejaVu Sans;">当</span>Rails<span style="font-family: DejaVu Sans;">渲染一个视图作为响应，它这样做了通过联合视图和当前的</span>layout<span style="font-family: DejaVu Sans;">（使用规则来查找当前的</span>layout<span style="font-family: DejaVu Sans;">，它在这个教程的早期被介绍了）。在一个</span>layout<span style="font-family: DejaVu Sans;">中，你访问三种工具来整合不同的输出块，以形成整体的回应：</span>
<ul>
	<li>Asset tags</li>
	<li><tt>yield</tt> and <tt>content_for</tt></li>
	<li>Partials</li>
</ul>
<h4><a name="asset-tags"></a>3.1 Asset Tags<span style="font-family: WenQuanYi Micro Hei;">标签资源</span></h4>
Asset tags provide methods for generating HTML that links views to feeds, JavaScript, stylesheets, images, videos and audios. These are the six asset tags available in Rails:

<span style="font-family: DejaVu Sans;">标签资产提供方法来创建</span>HTML<span style="font-family: DejaVu Sans;">链接视图到</span>feeds<span style="font-family: DejaVu Sans;">，</span>JavaScript<span style="font-family: DejaVu Sans;">，</span>stylesheets<span style="font-family: DejaVu Sans;">，</span>images<span style="font-family: DejaVu Sans;">，</span>videos<span style="font-family: DejaVu Sans;">和</span>audios<span style="font-family: DejaVu Sans;">。</span>Rails<span style="font-family: DejaVu Sans;">中有六个</span>asset tags<span style="font-family: DejaVu Sans;">可用。</span>
<ul>
	<li><tt>auto_discovery_link_tag</tt></li>
	<li><tt>javascript_include_tag</tt></li>
	<li><tt>stylesheet_link_tag</tt></li>
	<li><tt>image_tag</tt></li>
	<li><tt>video_tag</tt></li>
	<li><tt>audio_tag</tt></li>
</ul>
You can use these tags in layouts or other views, although the tags other than <tt>image_tag</tt> are most commonly used in the <tt>&lt;head&gt;</tt> section of a layout.

<span style="font-family: DejaVu Sans;">你可以使用这些</span>tags<span style="font-family: DejaVu Sans;">在</span>layout<span style="font-family: DejaVu Sans;">或者其他的</span>views<span style="font-family: DejaVu Sans;">，即使</span>tags <tt>image_tag</tt><span style="font-family: DejaVu Sans;">超过通常使用的在</span>layout<span style="font-family: DejaVu Sans;">的</span>&lt;head&gt;<span style="font-family: DejaVu Sans;">部分使用。</span>

The asset tags do <em>not</em> verify the existence of the assets at the specified locations; they simply assume<span style="font-family: DejaVu Sans;">假设</span>that you know what you’re doing and generate the link.

Asset tags<span style="font-family: DejaVu Sans;">并不验证</span>asstes<span style="font-family: DejaVu Sans;">存在的性在</span>specified locations<span style="font-family: DejaVu Sans;">；他们假设你知道他们正在做的什么并且生成链接。</span>
<h5><a name="linking-to-feeds-with-auto_discovery_lin"></a> 3.1.1 Linking to Feeds with <tt>auto_discovery_link_tag</tt></h5>
The <tt>auto_discovery_link_tag</tt> helper builds HTML that most browsers and newsreaders can use to detect the presences of RSS or ATOM feeds. It takes the type of the link (<tt>:rss</tt> or <tt>:atom</tt>), a hash of options that are passed through to url_for, and a hash of options for the tag:

<span style="font-family: DejaVu Sans;">对于</span><tt>auto_discovery_link_tag</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>创建</tt></span><tt>HTML</tt><span style="font-family: DejaVu Sans;"><tt>，那些浏览器和新读者能够检测存在的</tt></span><tt>RSS</tt><span style="font-family: DejaVu Sans;"><tt>或者</tt></span><tt>ATOM</tt><span style="font-family: DejaVu Sans;"><tt>。它带有</tt></span><tt>link</tt><span style="font-family: DejaVu Sans;"><tt>类型的参数为</tt></span><tt>(:rss</tt><tt> </tt><tt>or</tt><tt> </tt><tt>:atom)</tt><span style="font-family: DejaVu Sans;"><tt>，一个</tt></span><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>字典的选项可以通过它来指定</tt><tt></tt></span><tt>url_for</tt><span style="font-family: DejaVu Sans;"><tt>以及</tt></span><tt>tag</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>选项。</tt></span>

&lt;%= auto_discovery_link_tag(:rss, {:action =&gt; "feed"},

{:title =&gt; "RSS Feed"}) %&gt;

There are three tag options available for <tt>auto_discovery_link_tag</tt>:
<ul>
	<li><tt>:rel</tt> specifies the <tt>rel</tt> value in the link (defaults to “alternate”)</li>
	<li><tt>:type</tt> specifies an explicit MIME type. Rails will generate an appropriate MIME type automatically.</li>
	<li><tt>:title</tt> specifies the title of the link</li>
</ul>
MIME<span style="font-family: DejaVu Sans;">类型就是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。</span>
<h5><a name="linking-to-javascript-files-with-javascr"></a> 3.1.2 Linking to JavaScript Files with <tt>javascript_include_tag</tt></h5>
The <tt>javascript_include_tag</tt> helper returns an HTML <tt>script</tt> tag for each source provided. Rails looks in <tt>public/javascripts</tt> for these files by default, but you can specify a full path relative to the document root, or a URL, if you prefer. For example, to include <tt>public/javascripts/main.js</tt>:

<tt>javascript_include_tag</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>返回一个</tt></span><tt>HTML</tt><tt> </tt><tt>script</tt><tt> </tt><tt>tag</tt><span style="font-family: DejaVu Sans;"><tt>给每个提供的源。</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>默认在</tt><tt></tt></span><tt>public/javascripts</tt><span style="font-family: DejaVu Sans;"><tt>查找这些文件，但是你可以指定一个全路径关联到文档目录，或者一个</tt></span><tt>URL</tt><span style="font-family: DejaVu Sans;"><tt>，如果你喜欢。例如，要包含</tt></span><tt>public/javascripts/main.js:</tt>

&lt;%= javascript_include_tag "main" %&gt;

To include <tt>public/javascripts/main.js</tt> and <tt>public/javascripts/columns.js</tt>:

&lt;%= javascript_include_tag "main", "columns" %&gt;

To include <tt>public/javascripts/main.js</tt> and <tt>public/photos/columns.js</tt>:

&lt;%= javascript_include_tag "main", "/photos/columns" %&gt;

To include <tt>http://example.com/main.js</tt>:

&lt;%= javascript_include_tag "http://example.com/main.js" %&gt;

If the application does not use the asset pipeline, the <tt>:defaults</tt> option loads jQuery by default:

<span style="font-family: DejaVu Sans;">如果应用程序没有使用</span>asset<span style="font-family: DejaVu Sans;">管道，</span>:defautls<span style="font-family: DejaVu Sans;">选项默认导入</span>jQuery<span style="font-family: DejaVu Sans;">：</span>

&lt;%= javascript_include_tag :defaults %&gt;

And you can in any case override the expansion in <tt>config/application.rb</tt>:

<span style="font-family: DejaVu Sans;">并且你可以随意覆盖这个扩展在</span><tt>config/application.rb</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

config.action_view.javascript_expansions[:defaults] = %w(foo.js bar.js)

When using <tt>:defaults</tt>, if an <tt>application.js</tt> file exists in <tt>public/javascripts</tt> it will be included as well at then end.

<span style="font-family: DejaVu Sans;">如果使用</span>:defaults<span style="font-family: DejaVu Sans;">，如果一个</span>application.js<span style="font-family: DejaVu Sans;">文件存在于</span>public/javascripts<span style="font-family: DejaVu Sans;">他将会同样被导入在随后。</span>

Also, the <tt>:all</tt> option loads every JavaScript file in <tt>public/javascripts</tt>:<span style="font-family: DejaVu Sans;">（不包含子目录）</span>

&lt;%= javascript_include_tag :all %&gt;

Note that your defaults of choice will be included first, so they will be available to all subsequently<span style="font-family: DejaVu Sans;">随后</span>included files.

<span style="font-family: DejaVu Sans;">注意你默认的选择将会首先被</span>inclueded<span style="font-family: DejaVu Sans;">，因此他们将于随后导入所有的文件。</span>

You can supply the <tt>:recursive</tt> option to load files in subfolders of <tt>public/javascripts</tt> as well:

<span style="font-family: DejaVu Sans;">你也可以提供</span>:recursive<span style="font-family: DejaVu Sans;">（递归）选项来导入在</span><tt>public/javascripts</tt> <span style="font-family: DejaVu Sans;">子文件夹中的文件：</span>

&lt;%= javascript_include_tag :all, :recursive =&gt; true %&gt;

If you’re loading multiple JavaScript files, you can create a better user experience by combining multiple files into a single download. To make this happen in production, specify <tt>:cache</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt> in your <tt>javascript_include_tag</tt>:

<span style="font-family: DejaVu Sans;">如果你正在导入多个的</span>JavaScript<span style="font-family: DejaVu Sans;">文件，你可以创建一个更好的用户体验通过整合多个文件到一个单独的下载（</span>all.js<span style="font-family: DejaVu Sans;">）。要得到这样的效果在产品中，在你的</span><tt>javascript_include_tag</tt><span style="font-family: DejaVu Sans;"><tt>中</tt>指定</span><tt>:cache</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt>

&lt;%= javascript_include_tag "main", "columns", :cache =&gt; true %&gt;

You can even use dynamic paths such as <tt>cache/#{current_site}/main/display</tt>.

<span style="font-family: DejaVu Sans;">你可以使用多元路径例如</span><tt>cache/#{current_site}/main/display</tt>
<h5><a name="linking-to-css-files-with-stylesheet_lin"></a> 3.1.3 Linking to CSS Files with <tt>stylesheet_link_tag</tt></h5>
The <tt>stylesheet_link_tag</tt> helper returns an HTML <tt>&lt;link&gt;</tt> tag for each source provided. Rails looks in <tt>public/stylesheets</tt> for these files by default, but you can specify a full path relative to the document root, or a URL, if you prefer. For example, to include <tt>public/stylesheets/main.css</tt>:

<tt>stylesheet_link_tag</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>返回一个</tt></span><tt>HTML</tt><tt> </tt><tt>&lt;link&gt;</tt><span style="font-family: DejaVu Sans;"><tt>标签给每一个提供的源。</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>默认在</tt><tt></tt></span><tt>public/stylesheets</tt><span style="font-family: DejaVu Sans;"><tt>查找这些文件，但是你可以指定一个全路径关联到文档目录，或者一个</tt></span><tt>URL</tt><span style="font-family: DejaVu Sans;"><tt>，如果你喜欢。例如，要导入</tt></span><tt>public/stylesheets/main.css:</tt>

&lt;%= stylesheet_link_tag "main" %&gt;

To include <tt>public/stylesheets/main.css</tt> and <tt>public/stylesheets/columns.css</tt>:

&lt;%= stylesheet_link_tag "main", "columns" %&gt;

To include <tt>public/stylesheets/main.css</tt> and <tt>public/photos/columns.css</tt>:

&lt;%= stylesheet_link_tag "main", "/photos/columns" %&gt;

To include <tt>http://example.com/main.css</tt>:

&lt;%= stylesheet_link_tag "http://example.com/main.css" %&gt;

By default, <tt>stylesheet_link_tag</tt> creates links with <tt>media="screen"</tt><tt> </tt><tt>rel="stylesheet"</tt><tt> </tt><tt>type="text/css"</tt>. You can override any of these defaults by specifying an appropriate option (<tt>:media</tt>, <tt>:rel</tt>, or <tt>:type</tt>):

<span style="font-family: DejaVu Sans;">默认情况，</span><tt>stylesheet_link_tag</tt><span style="font-family: DejaVu Sans;"><tt>创建</tt></span><tt>links</tt><span style="font-family: DejaVu Sans;"><tt>使用</tt></span><tt>media="screen"</tt><tt> </tt><tt>rel="stylesheet"</tt><tt> </tt><tt>type="text/css"</tt><span style="font-family: DejaVu Sans;"><tt>。你可以覆盖这些默认设置的任何一个通过指定一个适当的选项</tt><tt></tt></span><tt>(:media,</tt><tt> </tt><tt>:rel,</tt><tt> </tt><tt>or</tt><tt> </tt><tt>:type):</tt>

&lt;%= stylesheet_link_tag "main_print", :media =&gt; "print" %&gt;

The <tt>all</tt> option links every CSS file in <tt>public/stylesheets</tt>:<span style="font-family: DejaVu Sans;">（不包含子目录）</span>

&lt;%= stylesheet_link_tag :all %&gt;

You can supply the <tt>:recursive</tt> option to link files in subfolders of <tt>public/stylesheets</tt> as well:<span style="font-family: DejaVu Sans;">（递归导入</span><tt>public/stylesheets</tt><span style="font-family: DejaVu Sans;"><tt>所有的样式</tt>）</span>

&lt;%= stylesheet_link_tag :all, :recursive =&gt; true %&gt;

If you’re loading multiple CSS files, you can create a better user experience by combining multiple files into a single download. To make this happen in production, specify <tt>:cache</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt> in your <tt>stylesheet_link_tag</tt>:<span style="font-family: DejaVu Sans;">（使用</span>cache<span style="font-family: DejaVu Sans;">来改善用户体验）</span>

&lt;%= stylesheet_link_tag "main", "columns", :cache =&gt; true %&gt;

By default, the combined file will be delivered as <tt>stylesheets/all.css</tt>. You can specify a location for the cached asset file instead:

<span style="font-family: DejaVu Sans;">默认情况下组合文件会交付为</span><tt>stylesheets/all.css</tt><span style="font-family: DejaVu Sans;"><tt>。你可以指定一个</tt></span><tt>lacation</tt><span style="font-family: DejaVu Sans;"><tt>给</tt></span><tt>cached</tt><tt> </tt><tt>asset</tt><span style="font-family: DejaVu Sans;"><tt>文件替代：</tt></span>

<tt>&lt;%=</tt><tt> </tt><tt>stylesheet_link_tag</tt><tt> </tt><tt>"main",</tt><tt> </tt><tt>"columns",</tt>

<tt> </tt><tt>:cache</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>'cache/main/display'</tt><tt> </tt><tt>%&gt;</tt>

You can even use dynamic paths such as <tt>cache/#{current_site}/main/display.</tt>
<h5><a name="linking-to-images-with-image_tag"></a><tt>3.1.4</tt><tt> </tt><tt>Linking</tt><tt> </tt><tt>to</tt><tt> </tt><tt>Images</tt><tt> </tt><tt>with</tt><tt> </tt><tt>image_tag</tt></h5>
The <tt>image_tag</tt> helper builds an HTML <tt>&lt;img</tt><tt> </tt><tt>/&gt;</tt> tag to the specified file. By default, files are loaded from <tt>public/images</tt>.

<tt>image_tag</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>对于指定的文件创建一个</tt></span><tt>HTML</tt><tt> </tt><tt>&lt;img</tt><tt> </tt><tt>/&gt;</tt><span style="font-family: DejaVu Sans;"><tt>标签。默认情况，文件会从</tt><tt></tt></span><tt>public/images</tt><span style="font-family: DejaVu Sans;"><tt>被导入。</tt></span>

<span style="color: #800000;">Note</span><span style="color: #800000;">that</span><span style="color: #800000;">you</span><span style="color: #800000;">must</span><span style="color: #800000;">specify</span><span style="color: #800000;">the</span><span style="color: #800000;">extension</span><span style="color: #800000;">of</span><span style="color: #800000;">the</span><span style="color: #800000;">image.</span><span style="color: #800000;">Previous</span><span style="color: #800000;">versions</span><span style="color: #800000;">of</span><span style="color: #800000;">Rails</span><span style="color: #800000;">would</span><span style="color: #800000;">allow</span><span style="color: #800000;">you</span><span style="color: #800000;">to</span><span style="color: #800000;">just</span><span style="color: #800000;">use</span><span style="color: #800000;">the</span><span style="color: #800000;">image</span><span style="color: #800000;">name</span><span style="color: #800000;">and</span><span style="color: #800000;">would</span><span style="color: #800000;">append</span><tt><span style="color: #800000;">.png</span></tt><span style="color: #800000;">if</span><span style="color: #800000;">no</span><span style="color: #800000;">extension</span><span style="color: #800000;">was</span><span style="color: #800000;">given</span><span style="color: #800000;">but</span><span style="color: #800000;">Rails</span><span style="color: #800000;">3.0</span><span style="color: #800000;">does</span><span style="color: #800000;">not.</span>

<span style="font-family: DejaVu Sans;"><span style="color: #800000;">注意你必须指定图像文件的扩展名。以前版本的</span></span><span style="color: #800000;">Rails<span style="font-family: DejaVu Sans;">能够允许你仅仅使用图像文件名称就会被添加</span></span><span style="color: #800000;">.png<span style="font-family: DejaVu Sans;">即使没有扩增名被给出。但是</span></span><span style="color: #800000;">Rails</span><span style="color: #800000;">3.0<span style="font-family: DejaVu Sans;">不这样了</span>。</span>

&lt;%= image_tag "header.png" %&gt;

You can supply a path to the image if you like:

<span style="font-family: DejaVu Sans;">你可以给</span>image<span style="font-family: DejaVu Sans;">提供一个路径如果你喜欢：</span>

&lt;%= image_tag "icons/delete.gif" %&gt;

You can supply a hash of additional HTML options:

<code>&lt;%=</code> <code>image_tag</code><code> </code><code>"icons/delete.gif",</code><code> </code><code>{:height</code> <code>=&gt;</code><code> </code><code>45}</code><code> </code><code>%&gt;</code>

You can also supply an alternate image to show on mouseover:<span style="font-family: DejaVu Sans;">你可以提供一个在鼠标经过的备用图像。</span>

&lt;%= image_tag "home.gif", :onmouseover =&gt; "menu/home_highlight.gif" %&gt;

You can supply alternate text for the image which will be used if the user has images turned off in their browser. If you do not specify an alt text explicitly, it defaults to the file name of the file, capitalized and with no extension. For example, these two image tags would return the same code:

<span style="font-family: DejaVu Sans;">你可以提供一个备用文字给</span>image<span style="font-family: DejaVu Sans;">它们将在用户的浏览器关闭图像（显示）的时候使用。如果你不准确的指定一个</span>alt<span style="font-family: DejaVu Sans;">文本，它默认是文件的文件名，大写（首字母）并且没有扩展名。例如，下面的两个</span>image<span style="font-family: DejaVu Sans;">标签将会返回同样的代码：</span>

&lt;%= image_tag "home.gif" %&gt;

&lt;%= image_tag "home.gif", :alt =&gt; "Home" %&gt;

You can also specify a special size tag, in the format “{width}x{height}”:

&lt;%= image_tag "home.gif", :size =&gt; "50x20" %&gt;

In addition to the above special tags, you can supply a final hash of standard HTML options, such as <tt>:class</tt>, <tt>:id</tt> or <tt>:name</tt>:

&lt;%= image_tag "home.gif", :alt =&gt; "Go Home",

:id =&gt; "HomeImage",

:class =&gt; 'nav_bar' %&gt;
<h5><a name="linking-to-videos-with-video_tag"></a>3.1.5 Linking to Videos with <tt>video_tag</tt></h5>
The <tt>video_tag</tt> helper builds an HTML 5 <tt>&lt;video&gt;</tt> tag to the specified file. By default, files are loaded from <tt>public/videos</tt>.

<tt>video_tag</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>给指定文件创建一个</tt></span><tt>HTML</tt><tt> </tt><tt>5</tt><tt> </tt><tt>&lt;video&gt;</tt><span style="font-family: DejaVu Sans;"><tt>标签。默认的，文件会从</tt><tt></tt></span><tt>public/videos</tt><span style="font-family: DejaVu Sans;"><tt>被导入。</tt></span>

&lt;%= video_tag "movie.ogg" %&gt;

Produces<span style="font-family: DejaVu Sans;">生成</span>

&lt;video src="/videos/movie.ogg" /&gt;

Like an <tt>image_tag</tt> you can supply a path, either absolute, or relative to the <tt>public/videos</tt> directory. <strong>Additionally</strong><strong> </strong><strong>you</strong><strong> </strong><strong>can</strong><strong> </strong><strong>specify</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>:size</strong></tt><tt><strong> </strong></tt><tt><strong>=&gt;</strong></tt><tt><strong> </strong></tt><tt><strong>"#{width}x#{height}"</strong></tt><strong> </strong><strong>option</strong><strong> </strong><strong>just</strong><strong> </strong><strong>like</strong><strong> </strong><strong>an</strong><strong> </strong><tt><strong>image_tag</strong></tt><strong>.</strong> <strong>Video</strong><strong> </strong><strong>tags</strong><strong> </strong><strong>can</strong><strong> </strong><strong>also</strong><strong> </strong><strong>have</strong><strong> </strong><strong>any</strong><strong> </strong><strong>of</strong><strong> </strong><strong>the</strong><strong> </strong><strong>HTML</strong><strong> </strong><strong>options</strong><strong> </strong><strong>specified</strong><strong> </strong><strong>at</strong><strong> </strong><strong>the</strong><strong> </strong><strong>end</strong> (<tt>id</tt>, <tt>class</tt> et al).

The video tag also supports all of the <tt>&lt;video&gt;</tt> HTML options through the HTML options hash, including:

video<span style="font-family: DejaVu Sans;">标签同样支持所有的</span><tt>&lt;video&gt;</tt> HTML<span style="font-family: DejaVu Sans;">选项通过</span>HTML<span style="font-family: DejaVu Sans;">选项的</span>hash<span style="font-family: DejaVu Sans;">字典，包含：</span>
<ul>
	<li><tt>:poster</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>'image_name.png'</tt>, provides an image to put in place of the video before it starts playing.</li>
	<li><tt>:autoplay</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt>, starts playing the video on page load.</li>
	<li><tt>:loop</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt>, loops the video once it gets to the end.</li>
	<li><tt>:controls</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt>, provides browser supplied controls for the user to interact with the video.</li>
	<li><tt>:autobuffer</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt>, the video will pre load the file for the user on page load.</li>
</ul>
You can also specify multiple videos to play by passing an array of videos to the <tt>video_tag</tt>:

&lt;%= video_tag ["trailer.ogg", "movie.ogg"] %&gt;

This will produce:

&lt;video&gt;&lt;source src="trailer.ogg" /&gt;&lt;source src="movie.ogg" /&gt;&lt;/video&gt;
<h5><a name="linking-to-audio-files-with-audio_tag"></a> 3.1.6 Linking to Audio files with <tt>audio_tag</tt></h5>
The <tt>audio_tag</tt> helper builds an HTML 5 <tt>&lt;audio&gt;</tt> tag to the specified file. By default, files are loaded from <tt>public/audios</tt>.

&lt;%= audio_tag "music.mp3" %&gt;

You can supply a path to the audio file if you like:

&lt;%= audio_tag "music/first_song.mp3" %&gt;

You can also supply a hash of additional options, such as <tt>:id</tt>, <tt>:class</tt> etc.

Like the <tt>video_tag</tt>, the <tt>audio_tag</tt> has special options:
<ul>
	<li><tt>:autoplay</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt>, starts playing the audio on page load</li>
	<li><tt>:controls</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt>, provides browser supplied controls for the user to interact with the audio.</li>
	<li><tt>:autobuffer</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt>, the audio will pre load the file for the user on page load.</li>
</ul>
<h4><a name="understanding-yield"></a>3.2 Understanding <tt>yield</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>未知的</tt></span><tt>yield</tt></h4>
Within the context of a layout, <tt>yield</tt> identifies a section where content from the view should be inserted. The simplest way to use this is to have a single <tt>yield</tt>, into which the entire contents of the view currently being rendered is inserted:

<span style="font-family: DejaVu Sans;">在</span>layout<span style="font-family: DejaVu Sans;">的</span>context<span style="font-family: DejaVu Sans;">（上下文）中，</span>yield<span style="font-family: DejaVu Sans;">表示一节来自</span>view<span style="font-family: DejaVu Sans;">的内容将会被插入。最简单的方法来使用这个是有一个</span>yield<span style="font-family: DejaVu Sans;">，视图的整个内容将会被</span>rendered <span style="font-family: DejaVu Sans;">插入。</span>

&lt;html&gt;

&lt;head&gt;

&lt;/head&gt;

&lt;body&gt;

&lt;%= yield %&gt;

&lt;/body&gt;

&lt;/html&gt;

You can also create a layout with multiple yielding regions:<span style="font-family: DejaVu Sans;">你也可以创建一个</span>layout<span style="font-family: DejaVu Sans;">有多个</span>yield<span style="font-family: DejaVu Sans;">区域。</span>

&lt;html&gt;

&lt;head&gt;

&lt;%= yield :head %&gt;

&lt;/head&gt;

&lt;body&gt;

&lt;%= yield %&gt;

&lt;/body&gt;

&lt;/html&gt;

The main body of the view will always render into the unnamed <tt>yield</tt>. To render content into a named <tt>yield</tt>, you use the <tt>content_for</tt> method.

<span style="font-family: DejaVu Sans;">视图的</span>body<span style="font-family: DejaVu Sans;">将会总是</span>render<span style="font-family: DejaVu Sans;">一个</span>unnamed yield<span style="font-family: DejaVu Sans;">。要</span>render<span style="font-family: DejaVu Sans;">内容给一个知名的</span>yield<span style="font-family: DejaVu Sans;">，使用</span><tt>content_for</tt><span style="font-family: DejaVu Sans;"><tt>方法。</tt></span>
<h4><a name="using-content_for"></a>3.3 Using <tt>content_for</tt></h4>
The <tt>content_for</tt> method allows you to insert content into a named <tt>yield</tt> block in your layout. For example, this view would work with the layout that you just saw:

<tt>content_for</tt><span style="font-family: DejaVu Sans;"><tt>允许你插入内容到知名的</tt></span><tt>yield</tt><span style="font-family: DejaVu Sans;"><tt>块到你的</tt></span><tt>layout</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

&lt;% content_for :head do %&gt;

&lt;title&gt;A simple page&lt;/title&gt;

&lt;% end %&gt;

&nbsp;

&lt;p&gt;Hello, Rails!&lt;/p&gt;

The result of rendering this page into the supplied layout would be this HTML:

&lt;html&gt;

&lt;head&gt;

&lt;title&gt;A simple page&lt;/title&gt;

&lt;/head&gt;

&lt;body&gt;

&lt;p&gt;Hello, Rails!&lt;/p&gt;

&lt;/body&gt;

&lt;/html&gt;

The <tt>content_for</tt> method is very helpful when your layout contains distinct regions such as sidebars and footers that should get their own blocks of content inserted. It’s also useful for inserting tags that load page-specific JavaScript or css files into the header of an otherwise generic layout.
<h4><a name="using-partials"></a>3.4 Using Partials</h4>
Partial templates – usually just called “partials” – are another device for breaking the rendering process into more manageable chunks. With a partial, you can move the code for rendering a particular piece of a response to its own file.

Partial templates-<span style="font-family: DejaVu Sans;">通常被称为<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>partials”-<span style="font-family: DejaVu Sans;">是另一个设备（单元）分解渲染过程到易于管理的多个块中。通过一个</span>partial<span style="font-family: DejaVu Sans;">，你可以渲染了一个特定块的文件，通过</span>respense<span style="font-family: DejaVu Sans;">这个文件来响应特定的代码。</span>
<h5><a name="naming-partials"></a>3.4.1 Naming Partials<span style="font-family: WenQuanYi Micro Hei;">命名</span>Partials</h5>
To render a partial as part of a view, you use the <tt>render</tt> method within the view:

&lt;%= render "menu" %&gt;

This will render a file named <tt>_menu.html.erb</tt> at that point within the view being rendered. Note the leading underscore character: partials are named with a leading underscore<span style="font-family: DejaVu Sans;">下划线</span>to distinguish<span style="font-family: DejaVu Sans;">区分</span>them from regular views, even though they are referred to without the underscore. This holds true even when you’re pulling in a partial from another folder:

<span style="font-family: DejaVu Sans;">这将会</span>render<span style="font-family: DejaVu Sans;">一个名为</span><tt>_menu.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>的文件在渲染视图的</tt></span><tt>Partials</tt><span style="font-family: DejaVu Sans;"><tt>插入点的时候。注意起始的下划线字符：</tt></span><tt><span style="color: #800000;"><strong>partials</strong></span></tt><span style="font-family: DejaVu Sans;"><tt><span style="color: #800000;"><strong>被命名为以下划线（</strong></span></tt></span><tt><span style="color: #800000;"><strong>'_'</strong></span></tt><span style="font-family: DejaVu Sans;"><tt><span style="color: #800000;"><strong>）开始的规则来区分它们和视图</strong></span></tt><tt>，即使他们（的调用没有下划线）。这在你从除当前视图所在文件夹之外调入也一样成立：</tt></span>

<tt>&lt;%=</tt><tt> </tt><tt>render</tt><tt> </tt><tt>"shared/menu"</tt><tt> </tt><tt>%&gt;</tt>

That code will pull in the partial from <tt>app/views/shared/_menu.html.erb</tt>.
<h5><a name="using-partials-to-simplify-views"></a>3.4.2 Using Partials to Simplify Views</h5>
One way to use partials is to treat them as the equivalent of subroutines: as a way to move details out of a view so that you can grasp what’s going on more easily. For example, you might have a view that looked like this:

&lt;%= render "shared/ad_banner" %&gt;

&nbsp;

&lt;h1&gt;Products&lt;/h1&gt;

&nbsp;

&lt;p&gt;Here are a few of our fine products:&lt;/p&gt;

...

&nbsp;

&lt;%= render "shared/footer" %&gt;

Here,<strong> </strong><strong>the</strong><strong> </strong><tt><strong>_ad_banner.html.erb</strong></tt><strong> </strong><strong>and</strong><strong> </strong><tt><strong>_footer.html.erb</strong></tt><strong> </strong><strong>partials</strong><strong> </strong><strong>could</strong><strong> </strong><strong>contain</strong><strong> </strong><strong>content</strong><strong> </strong><strong>that</strong><strong> </strong><strong>is</strong><strong> </strong><strong>shared</strong><strong> </strong><strong>among</strong><strong> </strong><strong>many</strong><strong> </strong><strong>pages</strong><strong> </strong><strong>in</strong><strong> </strong><strong>your</strong><strong> </strong><strong>application.</strong> You don’t need to see the details of these sections when you’re concentrating on a particular page.

For content that is shared among all pages in your application, you can use partials directly from layouts.

For content that is shared among all pages in your application, you can use partials directly from layouts.
<h5><a name="partial-layouts"></a>3.4.3 Partial Layouts</h5>
A partial can use its own layout file, just as a view can use a layout. For example, you might call a partial like this:

<span style="font-family: DejaVu Sans;">一个</span>partial<span style="font-family: DejaVu Sans;">可以使用它们自己的</span>layout<span style="font-family: DejaVu Sans;">文件，就像一个视图可以使用一个</span>layout<span style="font-family: DejaVu Sans;">。例如你可以这样调用一个</span>partial<span style="font-family: DejaVu Sans;">：</span>

&lt;%= render :partial =&gt; "link_area", :layout =&gt; "graybar" %&gt;

This would look for a partial named <tt>_link_area.html.erb</tt> and render it using the layout <tt>_graybar.html.erb</tt>. Note that layouts for partials follow the same leading-underscore naming as regular partials, and are placed in the same folder with the partial that they belong to (not in the master <tt>layouts</tt> folder).

<span style="font-family: DejaVu Sans;">这将会查找一个名叫</span><tt>_link_area.html.erb</tt><span style="font-family: DejaVu Sans;">的</span>partial<span style="font-family: DejaVu Sans;">并且在</span><tt>_graybar.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>中</tt></span>render<span style="font-family: DejaVu Sans;">和使用它。</span>

Also note that<strong> </strong><strong>explicitly</strong><strong> </strong><strong>specifying</strong><strong> </strong><tt><strong>:partial</strong></tt><strong> </strong><strong>is</strong><strong> </strong><strong>required</strong> when passing additional options such as <tt>:layout</tt>.
<h5><a name="passing-local-variables"></a>3.4.4 Passing Local Variables</h5>
You can also pass local variables into partials, making them even more powerful and flexible. For example, you can use this technique to reduce duplication between new and edit pages, while still keeping a bit of distinct content:
<ul>
	<li><tt>new.html.erb</tt><tt> </tt></li>
</ul>
&lt;h1&gt;New zone&lt;/h1&gt;

&lt;%= error_messages_for :zone %&gt;

&lt;%= render :partial =&gt; "form", :locals =&gt; { :zone =&gt; @zone } %&gt;
<ul>
	<li><tt><span style="color: #000000;"><span style="font-size: small;">edit.html.erb</span></span></tt></li>
</ul>
&lt;h1&gt;Editing zone&lt;/h1&gt;

&lt;%= error_messages_for :zone %&gt;

&lt;%= render :partial =&gt; "form", :locals =&gt; { :zone =&gt; @zone } %&gt;
<ul>
	<li><tt>_</tt><tt><span style="color: #000000;"><span style="font-size: small;">form.html.erb</span></span></tt></li>
</ul>
&lt;%= form_for(zone) do |f| %&gt;

&lt;p&gt;

&lt;b&gt;Zone name&lt;/b&gt;&lt;br /&gt;

&lt;%= f.text_field :name %&gt;

&lt;/p&gt;

&lt;p&gt;

&lt;%= f.submit %&gt;

&lt;/p&gt;

&lt;% end %&gt;

Although the same partial will be rendered into both views, Action View’s submit helper will return “Create Zone” for the new action and “Update Zone” for the edit action.

<strong>Every</strong><strong> </strong><strong>partial</strong><strong> </strong><strong>also</strong><strong> </strong><strong>has</strong><strong> </strong><strong>a</strong><strong> </strong><strong>local</strong><strong> </strong><strong>variable</strong><strong> </strong><strong>with</strong><strong> </strong><strong>the</strong><strong> </strong><strong>same</strong><strong> </strong><strong>name</strong><strong> </strong><strong>as</strong><strong> </strong><strong>the</strong><strong> </strong><strong>partial</strong> (minus the underscore). You can pass an object in to this local variable via the <tt>:object</tt> option:

&lt;%= render :partial =&gt; "customer", :object =&gt; @new_customer %&gt;

Within the <tt>customer</tt> partial, the <tt>customer</tt> variable will refer to<span style="font-family: DejaVu Sans;">引用</span><tt>@new_customer</tt> from the parent view.

In previous versions of Rails, <strong>the</strong><strong> </strong><strong>default</strong><span style="font-family: DejaVu Sans;"><strong>默认情况</strong></span><strong>local</strong><strong> </strong><strong>variable</strong><strong> </strong><strong>would</strong><strong> </strong><strong>look</strong><strong> </strong><strong>for</strong><strong> </strong><strong>an</strong><strong> </strong><strong>instance</strong><strong> </strong><strong>variable</strong><strong> </strong><strong>with</strong><strong> </strong><strong>the</strong><strong> </strong><strong>same</strong><strong> </strong><strong>name</strong><strong> </strong><strong>as</strong><strong> </strong><strong>the</strong><strong> </strong><strong>partial</strong><strong> </strong><strong>in</strong><strong> </strong><strong>the</strong><strong> </strong><strong>parent</strong>. This behavior was deprecated<span style="font-family: DejaVu Sans;">增加</span>in 2.3 and has been <strong>removed</strong><strong> </strong><strong>in</strong><strong> </strong><strong>Rails</strong><strong> </strong><strong>3.0.</strong><span style="font-family: DejaVu Sans;"><strong>（可以自己添加如上）</strong></span>

If you have an instance of a model to render into a partial, you can use a shorthand syntax:

&lt;%= render @customer %&gt;

Assuming<span style="font-family: DejaVu Sans;">假设</span>that the <tt>@customer</tt> instance variable contains an instance of the <tt>Customer</tt> model, this will use <tt>_customer.html.erb</tt> to render it and will pass the local variable <tt>customer</tt> into the partial which will refer to the <tt>@customer</tt> instance variable in the parent view.

<span style="font-family: DejaVu Sans;">假设</span><tt>@customer</tt><span style="font-family: DejaVu Sans;"><tt>实例变量包含在一个</tt><tt></tt></span><tt>Customer</tt><span style="font-family: DejaVu Sans;"><tt>的实例中，这将会使用</tt></span><tt>_customer.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>来</tt></span><tt>render</tt><span style="font-family: DejaVu Sans;"><tt>它并且传递本地变量</tt><tt></tt></span><tt>customer</tt><span style="font-family: DejaVu Sans;"><tt>给</tt><tt></tt></span><tt>partial</tt><span style="font-family: DejaVu Sans;"><tt>引用</tt></span><tt>@customer</tt><span style="font-family: DejaVu Sans;"><tt>实例变量的父视图。</tt></span>
<h5><a name="rendering-collections"></a>3.4.5 Rendering Collections</h5>
Partials are very useful in rendering collections. When you pass a collection to a partial via the <tt>:collection</tt> option, the partial will be inserted once for each member in the collection:
<ul>
	<li><tt>index.html.erb</tt></li>
</ul>
&lt;h1&gt;Products&lt;/h1&gt;

&lt;%= render :partial =&gt; "product", :collection =&gt; @products %&gt;
<ul>
	<li><tt>_product.html.erb</tt></li>
</ul>
&lt;p&gt;Product Name: &lt;%= product.name %&gt;&lt;/p&gt;

When a partial is called with a pluralized collection, then the individual instances of the partial have access to the member of the collection being rendered via a variable named after the partial. In this case, the partial is <tt>_product</tt>, and within the <tt>_product</tt> partial, you can refer to <tt>product</tt> to get the instance that is being rendered.

<span style="font-family: DejaVu Sans;">当一个</span>partial<span style="font-family: DejaVu Sans;">被通过一个多元的</span>collection<span style="font-family: DejaVu Sans;">调用，然后</span>partial <span style="font-family: DejaVu Sans;">的个别的实例会访问</span>collection<span style="font-family: DejaVu Sans;">的成员并开始被</span>rendered<span style="font-family: DejaVu Sans;">通过一个在</span>partial<span style="font-family: DejaVu Sans;">后面的变量名。在本例中</span>the partial is <tt>_product</tt>,<span style="font-family: DejaVu Sans;">并且在</span><tt>_product</tt> partial<span style="font-family: DejaVu Sans;">中，你可以引用</span>product<span style="font-family: DejaVu Sans;">来得到被开始渲染的实例。</span>

In Rails 3.0, there is also a shorthand for this. Assuming <tt>@products</tt> is a collection of <tt>product</tt> instances, you can simply write this in the <tt>index.html.erb</tt> to produce the same result:

<span style="font-family: DejaVu Sans;">在</span>Rails 3.0<span style="font-family: DejaVu Sans;">中有一个快捷操作。假设</span><tt>@products</tt><span style="font-family: DejaVu Sans;"><tt>是一个</tt></span><tt>product</tt><span style="font-family: DejaVu Sans;"><tt>实例的集合，你可以简单的在</tt><tt></tt></span><tt>index.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>中写入下面的代码来产生相同的结果：</tt></span>

&lt;h1&gt;Products&lt;/h1&gt;

&lt;%= render @products %&gt;

Rails determines the name of the partial to use by looking at the model name in the collection. In fact, you can even create a heterogeneous<span style="font-family: DejaVu Sans;">合成</span>collection and render it this way, and Rails will choose the proper partial for each member of the collection:
<ul>
	<li><tt>index.html.erb</tt><tt> </tt></li>
</ul>
&lt;h1&gt;Contacts&lt;/h1&gt;

&lt;%= render [customer1, employee1, customer2, employee2] %&gt;
<ul>
	<li><tt>customers/_customer.html.erb</tt><tt> </tt></li>
</ul>
&lt;p&gt;Customer: &lt;%= customer.name %&gt;&lt;/p&gt;
<ul>
	<li><tt>employees/_employee.html.erb</tt></li>
</ul>
&lt;p&gt;Employee: &lt;%= employee.name %&gt;&lt;/p&gt;

In this case, Rails will use the customer or employee partials as appropriate for each member of the collection.
<h5><a name="local-variables"></a>3.4.6 Local Variables</h5>
To use a custom local variable name within the partial, specify the <tt>:as</tt> option in the call to the partial:

&lt;%= render :partial =&gt; "product", :collection =&gt; @products, :as =&gt; :item %&gt;

With this change, <strong>you</strong><strong> </strong><strong>can</strong><strong> </strong><strong>access</strong><strong> </strong><strong>an</strong><strong> </strong><strong>instance</strong><strong> </strong><strong>of</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>@products</strong></tt><strong> </strong><strong>collection</strong><strong> </strong><strong>as</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>item</strong></tt><strong> </strong><strong>local</strong><strong> </strong><strong>variable</strong><strong> </strong><strong>within</strong><strong> </strong><strong>the</strong><strong> </strong><strong>partial</strong>.<span style="font-family: DejaVu Sans;">你可以访问</span>item<span style="font-family: DejaVu Sans;">本地变量来访问</span><tt><strong>@products</strong></tt><tt><strong> </strong></tt><tt><strong>collection</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>的实例。</strong></tt></span>

&nbsp;

You can also<strong> </strong><strong>pass</strong><strong> </strong><strong>in</strong><strong> </strong><strong>arbitrary</strong><strong> </strong><strong>local</strong><strong> </strong><strong>variables</strong><strong> </strong><strong>to</strong><strong> </strong><strong>any</strong><strong> </strong><strong>partial</strong><strong> </strong><strong>you</strong><strong> </strong><strong>are</strong><strong> </strong><strong>rendering</strong><strong> </strong><strong>with</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>:locals</strong></tt><tt><strong> </strong></tt><tt><strong>=&gt;</strong></tt><tt><strong> </strong></tt><tt><strong>{}</strong></tt><strong> </strong><strong>option:</strong>

&lt;%= render :partial =&gt; 'products', :collection =&gt; @products,

:as =&gt; :item, :locals =&gt; {:title =&gt; "Products Page"} %&gt;

Would render a partial <tt>_products.html.erb</tt> once for each instance of <tt>product</tt> in the <tt>@products</tt> instance variable passing the instance to the partial as a local variable <strong>called</strong><strong> </strong><tt><strong>item</strong></tt><strong> </strong><strong>and</strong><strong> </strong><strong>to</strong><strong> </strong><strong>each</strong><strong> </strong><strong>partial</strong>,<strong> </strong><strong>make</strong><strong> </strong><strong>the</strong><strong> </strong><strong>local</strong><strong> </strong><strong>variable</strong><strong> </strong><tt><strong>title</strong></tt><strong> </strong><strong>available</strong><strong> </strong><strong>with</strong><strong> </strong><strong>the</strong><strong> </strong><strong>value</strong><strong> </strong><tt><strong>Products</strong></tt><tt><strong> </strong></tt><tt><strong>Page</strong></tt><strong>.</strong>

Rails also makes a counter variable available within a partial called by the collection, named after the member of the collection followed by <tt>_counter</tt>. <strong>For</strong><strong> </strong><strong>example,</strong><strong> </strong><strong>if</strong><strong> </strong><strong>you</strong><strong>’</strong><strong>re</strong><strong> </strong><strong>rendering</strong><strong> </strong><tt><strong>@products</strong></tt><strong>,</strong><strong> </strong><strong>within</strong><strong> </strong><strong>the</strong><strong> </strong><strong>partial</strong><strong> </strong><strong>you</strong><strong> </strong><strong>can</strong><strong> </strong><strong>refer</strong><strong> </strong><strong>to</strong><strong> </strong><tt><strong>product_counter</strong></tt><strong> </strong><strong>to</strong><strong> </strong><strong>tell</strong><strong> </strong><strong>you</strong><strong> </strong><strong>how</strong><strong> </strong><strong>many</strong><strong> </strong><strong>times</strong><strong> </strong><strong>the</strong><strong> </strong><strong>partial</strong><strong> </strong><strong>has</strong><strong> </strong><strong>been</strong><strong> </strong><strong>rendered.</strong><strong> </strong>This does not work in conjunction<span style="font-family: DejaVu Sans;">结合</span>with the <tt>:as</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:value</tt> option.

You can also specify a second partial to be rendered between instances of the main partial by using the <tt>:spacer_template</tt> option:
<h5><a name="spacer-templates"></a>3.4.7 Spacer Templates<span style="font-family: WenQuanYi Micro Hei;">间隔</span>templates</h5>
&lt;%= render @products, :spacer_template =&gt; "product_ruler" %&gt;

Rails will render the <tt>_product_ruler</tt> partial (<strong>with</strong><strong> </strong><strong>no</strong><strong> </strong><strong>data</strong><strong> </strong><strong>passed</strong><strong> </strong><strong>in</strong><strong> </strong><strong>to</strong><strong> </strong><strong>it</strong>) <strong>between</strong><strong> </strong><strong>each</strong><strong> </strong><strong>pair</strong><strong> </strong><strong>of</strong><strong> </strong><tt><strong>_product</strong></tt><strong> </strong><strong>partials</strong>.
<h4><a name="using-nested-layouts"></a>3.5 Using Nested Layouts<span style="font-family: WenQuanYi Micro Hei;">使用嵌套</span>layouts</h4>
You may find that your application requires a layout that differs slightly<span style="font-family: DejaVu Sans;">略有不同</span>from your regular application layout to support one particular controller. Rather than repeating the main layout and editing it, you can accomplish<span style="font-family: DejaVu Sans;">完成</span>this by using nested layouts (sometimes called sub-templates). Here’s an example:

Suppose<span style="font-family: DejaVu Sans;">假设</span>you have the following <tt>ApplicationController</tt> layout:
<ul>
	<li><tt>app/views/layouts/application.html.erb</tt></li>
</ul>
&lt;html&gt;

&lt;head&gt;

&lt;title&gt;&lt;%= @page_title or 'Page Title' %&gt;&lt;/title&gt;

&lt;%= stylesheet_link_tag 'layout' %&gt;

&lt;style type="text/css"&gt;&lt;%= yield :stylesheets %&gt;&lt;/style&gt;

&lt;/head&gt;

&lt;body&gt;

&lt;div id="top_menu"&gt;Top menu items here&lt;/div&gt;

&lt;div id="menu"&gt;Menu items here&lt;/div&gt;

&lt;div id="content"&gt;&lt;%= content_for?(:content) ? yield(:content) : yield %&gt;&lt;/div&gt;

&lt;/body&gt;

&lt;/html&gt;

On pages generated by <tt>NewsController</tt>, you want to hide the top menu and add a right menu:
<ul>
	<li><tt>app/views/layouts/news.html.erb</tt></li>
</ul>
&lt;% content_for :stylesheets do %&gt;

#top_menu {display: none}

#right_menu {float: right; background-color: yellow; color: black}

&lt;% end %&gt;

&lt;% content_for :content do %&gt;

&lt;div id="right_menu"&gt;Right menu items here&lt;/div&gt;

&lt;%= content_for?(:news_content) ? yield(:news_content) : yield %&gt;

&lt;% end %&gt;

&lt;%= render :template =&gt; 'layouts/application' %&gt;

#&lt;<span style="font-family: DejaVu Sans;">表达式</span>1&gt;?&lt;<span style="font-family: DejaVu Sans;">表达式</span>2&gt;:&lt;<span style="font-family: DejaVu Sans;">表达式</span>3&gt;; "?"<span style="font-family: DejaVu Sans;">运算符的含义是</span>: <span style="font-family: DejaVu Sans;">先求表达式</span>1<span style="font-family: DejaVu Sans;">的值</span>, <span style="font-family: DejaVu Sans;">如果为真</span>, <span style="font-family: DejaVu Sans;">则执行表达式</span>2<span style="font-family: DejaVu Sans;">，并返回表达式</span>2<span style="font-family: DejaVu Sans;">的结果</span>; <span style="font-family: DejaVu Sans;">如果表达式</span>1<span style="font-family: DejaVu Sans;">的值为假</span>, <span style="font-family: DejaVu Sans;">则执行表达式</span>3 <span style="font-family: DejaVu Sans;">，并返回表达式</span>3<span style="font-family: DejaVu Sans;">的结果</span>.

That’s it. The News views will use the new layout, hiding the top menu and adding a new right menu inside the “content” div.

There are several ways of getting similar results with different sub-templating schemes using this technique. Note that there is no limit in nesting levels. One can use the <tt>ActionView::render</tt> method via <tt>render</tt><tt> </tt><tt>:template</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>'layouts/news'</tt> to base a new layout on the News layout. If you are sure you will not subtemplate the <tt>News</tt> layout, you can <strong>replace</strong> the <tt>content_for?(:news_content)</tt><tt> </tt><tt>?</tt><tt> </tt><tt>yield(:news_content)</tt><tt> </tt><tt>:</tt><tt> </tt><tt>yield</tt> <strong>with</strong><strong> </strong><strong>simply</strong><strong> </strong><tt><strong>yield</strong></tt><strong>.</strong>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date>2011-12-08 21:12:41</wp:post_date>
		<wp:post_date_gmt>2011-12-08 13:12:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>layouts-and-rendering-in-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="guide"><![CDATA[guide]]></category>
		<category domain="post_tag" nicename="layouts"><![CDATA[layouts]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rendering"><![CDATA[rendering]]></category>
		<category domain="post_tag" nicename="templates"><![CDATA[templates]]></category>
		<category domain="post_tag" nicename="view"><![CDATA[view]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Django开发必知必会</title>
		<link></link>
		<pubDate>Thu, 15 Dec 2011 13:27:16 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=108</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="cnblogs_post_body">
<h1>Django开发必知必会</h1>
<div id="id1">
<h1>版权说明</h1>
由于最近发现很多转载笔者的文章而没有说明作者和出处,所以特别在些声明.

本博客所有内容采用 Creative Commons Licenses 许可使用. 引用本内容时，请保留 <strong>朱涛</strong>, <strong>出处</strong> ，并且 <strong>非商业</strong> .

</div>
<div id="id2">
<h1>摘要</h1>
Django 作为 python 社区中最流利的web框架,它所强调的就是 <strong>快速开发</strong>, <strong>复用</strong>, <strong>可读</strong>. 本文主要介绍使用 Django 来开发所需要了解的知识,其中也包含了一些指导性的原则以及笔者的一些经验之谈.
<div id="contents">

Contents
<ul>
	<li>版权说明</li>
	<li>摘要</li>
	<li>基本知识
<ul>
	<li>熟悉python和django</li>
	<li>其它的相关技术</li>
</ul>
</li>
	<li>可用的资源</li>
	<li>高级知识
<ul>
	<li>使用virtualenv+pip来构建独立的开发环境</li>
	<li>使用fabric进行部署</li>
</ul>
</li>
	<li>推荐的开发流程</li>
	<li>结论</li>
	<li>参考资料</li>
</ul>
</div>
</div>
<div id="id3">
<h1>基本知识</h1>
<div id="python-django">
<h2>熟悉python和django</h2>
Django 是基于 python 的,所以在开发前需要熟悉相关的技术.

python 推荐几本比较好的书,包括:
<ol>
	<li>learning python</li>
	<li>python cookbook</li>
</ol>
熟读 Django 的 官方文档 和相关的书籍，这些都是必须。比较好的书籍有：
<ol>
	<li>Django Book</li>
	<li>Pro Django</li>
	<li>Practical Django Projects</li>
</ol>
更多参考 django相关资源.

</div>
<div id="id4">
<h2>其它的相关技术</h2>
作为web开发的程序员,还需要了解其它的相关技术,包括:
<ul>
	<li>html</li>
	<li>css</li>
	<li>javascript ( jquery 等)</li>
	<li>ajax</li>
	<li>网络知识和标准,如 http 协议, TCP/IP网络架构等.</li>
</ul>
</div>
</div>
<div id="id5">
<h1>可用的资源</h1>
掌握了上面提到的基本知识外,我们对 python, Django 及web开发的相关技术有了一定的熟悉,也对 python 和 Django 的 哲学也有一定的了解,如 <em>Don't Repeat Yourself</em>,<em>Keep It Simple, Stupid</em>, <em>Don't Reinvent Wheels</em> 等.

所以,在开始一个项目之前我们需要了解已有哪些可用的资源.

而在可用的资源中,最需要跟踪的一个项目就是 pinax ，它提供了站点所必须的一些常用功能，而 所采用的方式便是提供一些 <strong>可复用的app</strong>, 使得我们很容易集成到我们的环境中， 或者基于 pinax 二次开发。

除此之外，还需要了解一些特定领域的相关资源，如：
<ul>
	<li>商店 satchmo</li>
	<li>地理 GeoDjango</li>
	<li>OpenId django-openid</li>
	<li>等等</li>
</ul>
在获得特定领域的相关资源后，会大大地提高开发的效率，从而降低成本。

</div>
<div id="id6">
<h1>高级知识</h1>
掌握上面提到的技术,这时就基本上是一个合格的 Django 程序员了,但是除此之外,还需要了解一些高级的知识.
<div id="virtualenv-pip">
<h2>使用virtualenv+pip来构建独立的开发环境</h2>
virtualenv 用 于建立一个独立的（与其它module)的虚拟环境，从而使得不同的虚拟环境下的 程序可以依赖于不同版本的module,例如某个django project是基于0.96的，而另外的project是基于 1.1的，所以就必须有不同的虚拟环境。 了解更多参考： pip and virtualenv

使用 pip 来 <strong>复制</strong> 已有的依赖。 pip 是用来取代 easy_install 的，除此而外， 我们还可以很方便地使用 pip 来 <strong>复制</strong> 我们当前的工作环境。例如，我们建立一个<em>requirements.txt</em> 文件 来记录我们当前工作环境中的相关依赖程序，然后输入 <cite>pip install -r /path/to/requirements.txt</cite>, 那么相应的 依赖软件会自动安装。前提是你的系统已经安装了 pip.

除此而外，当你需要部署一个django项目时，可以使用 wsgi 很方便地进行部署，具体参考 virtualenv and wsgi.

</div>
<div id="fabric">
<h2>使用fabric进行部署</h2>
参考 Deploying Python Web Applications

另外,我们还可以使用 python 的强大功能,来实现例如配置文件的路径自适应, 利用调试状态来设定特定的属性等.

</div>
</div>
<div id="id7">
<h1>推荐的开发流程</h1>
可使用下面的开发流程来进行 Django 的开发(假设是从新开始一个项目的)：
<ol>
	<li>使用 virtualenv 建立相应的独立环境</li>
	<li>使用 easy_install 和 pip 安装相应的依赖模块</li>
	<li>多人开发时可将当前的所有模块 <strong>复制</strong> 给同事( <cite>pip</cite> 有 <em>feeze</em> 命令来输出当前环境下的所有依赖模块及版本,以保证所有的开发人员使用相同的代码库)</li>
	<li>为服务器也建立相应的独立环境,并使用 fabric 进行自动化部署.</li>
	<li>最后,使用 wsgi 和web服务器来发布产品</li>
</ol>
</div>
<div id="id8">
<h1>结论</h1>
利用 Django 的 <strong>复用</strong>, <strong>快速开发</strong> 等特性来进行Web开发, 其实是有一定的规律可循的, 除了上面介绍的一些开发知识(技巧)外,如果在开发中你发现某个过程很繁琐,你这时候就要考虑去调研 是否已经存在相关的解决方案.而不要一味地,耗时地去完成.

</div>
<div id="id9">
<h1>参考资料</h1>
<ol>
	<li>Notes on using pip and virtualenv with Django</li>
	<li>啄木鸟社区</li>
	<li>django相关资源</li>
</ol>
</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date>2011-12-15 21:27:16</wp:post_date>
		<wp:post_date_gmt>2011-12-15 13:27:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>django%e5%bc%80%e5%8f%91%e5%bf%85%e7%9f%a5%e5%bf%85%e4%bc%9a</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="developer"><![CDATA[developer]]></category>
		<category domain="category" nicename="django"><![CDATA[django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[django]]></category>
		<category domain="post_tag" nicename="nodes"><![CDATA[nodes]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Python 的虛擬環境及多版本開發利器─Virtualenv 與 Pythonbrew</title>
		<link></link>
		<pubDate>Thu, 15 Dec 2011 13:29:38 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=110</guid>
		<description></description>
		<content:encoded><![CDATA[Virtualenv 和 Pythonbrew 都是可以創造虛擬（獨立）Python 環境的工具，只是虛擬（獨立）標的不同。

Virtualenv 可以隔離函數庫需求不同的專案，讓它們不會互相影響。在建立並啟動虛擬環境後，透過 <code>pip</code> 安裝的套件會被放在虛擬環境中，專案就可以擁有一個獨立的環境。

簡而言之，Virtualenv 可以幫你做到：
<ul>
	<li>在沒有權限的情況下安裝新套件</li>
	<li>不同專案可以使用不同版本的相同套件</li>
	<li>套件版本升級時不會影響其他專案</li>
</ul>
Pythonbrew 則可以在家目錄中安裝多個 Python，並迅速地切換版本；也可以在指定的 Python 版本下批次測試你的 Python 程式；另外更整合了 Virtualenv。

這篇文章會詳細介紹這兩個工具，讓你在多人開發及多版本開發的環境中更得心應手。

&nbsp;
<h3>事前準備</h3>
Python 的 package 通常會上傳至 <a href="http://pypi.python.org/pypi" target="_blank">PyPI</a>，有很多工具都可以從 <a href="http://pypi.python.org/pypi">PyPI</a> 安裝 package。下面會使用 <code>easy_install</code> 這個工具（由 <a href="http://pypi.python.org/pypi/setuptools" target="_blank">setuptools</a> 提供）來安裝 Virtualenv 和 Pythonbrew。
<h4>01. Linux</h4>
如果不知道 <code>easy_install</code> 或還沒安裝 setuptools，在 Debian/Ubuntu 可以用下列指令安裝：
<pre><code>$ sudo apt-get install python-setuptools </code></pre>
在 Fedora/CentOS/Redhat/openSUSE，則可以使用：
<pre><code>$ su - # yum install python-setuptools </code></pre>
<h4>02. Windows</h4>
在 Windows 則可以從 <a href="http://pypi.python.org/pypi/setuptools" target="_blank">setuptools</a> 的頁面找到 <code>*.exe</code> 格式的安裝檔案。安裝完後，可以在 <code>C:\PythonX.Y\Scripts\</code>（X.Y 是 Python 的版本）下找到 <code>easy_install.exe</code>。記得把這個路徑放進 Windows 環境變數中的 PATH。

接著就可以輕鬆安裝任何在 <a href="http://pypi.python.org/pypi" target="_blank">PyPI</a> 的 Python Package 囉。
<h3>Virtualenv - Virtual Python Environment builder</h3>
<h4>01. 安裝</h4>
Pythonbrew 已整合了 Virtualenv，如果不想額外安裝一個套件，也可以不要裝 Virtualenv。

如果需要安裝，請於命令列模式下輸入下列指令：
<pre><code># easy_install virtualenv </code></pre>
<h4>02. 使用方法</h4>
<h5>I. 建立虛擬環境</h5>
請於命令列模式下輸入下列指令：
<pre><code>$ virtualenv [指定虛擬環境的名稱] </code></pre>
例如下列指令會建立名為 "ENV" 的虛擬環境：
<pre><code>$ virtualenv ENV </code></pre>
預設在建立虛擬環境時，會依賴系統環境中的 site packages，如果想<em>完全不依賴</em>系統的 packages，可以加上參數 <code>--no-site-packages</code> 來建立虛擬環境：
<pre><code>$ virtualenv --no-site-packages [指定虛擬環境的名稱] </code></pre>
<div id="ii.-啟動虛擬環境">
<h3>II. 啟動虛擬環境</h3>
請先切換當前目錄至建立的虛擬環境中。前例中，建立名稱為 "ENV"，則：
<pre><code>$ cd ENV </code></pre>
接著，啟動虛擬環境：
<pre><code>$ source bin/activate </code></pre>
在 Windows 環境中則改用：
<pre><code>&gt; \path\to\env\Scripts\activate.bat </code></pre>
然後就可以注意到，在 shell 提示字元的最前面多了虛擬環境的名稱提示：
<pre><code>(ENV) ...$ </code></pre>
<h5>III. 退出虛擬環境</h5>
請於命令列模式下輸入下列指令：
<pre><code>$ deactivate </code></pre>
就可以回到系統原先的 Python 環境。
<h5>IV. 在虛擬環境安裝新的 Python 套件</h5>
Virtualenv 在安裝時會附帶 <code>pip</code> 這個 Python 的套件安裝工具，當虛擬環境被啟動時，由它安裝的 package 會出現在虛擬環境的資料夾中，用法是：
<pre><code>(ENV)...$ pip install [套件名稱] </code></pre>
如果系統也有安裝 <code>pip</code>，請特別注意是否已經<em>啟動</em>虛擬環境，否則套件會被安裝到系統中，而非虛擬環境裡。

如果想要避免 <code>pip</code> 在沒有進入虛擬環境時被使用，可以在 <code>~/.bashrc</code> 加上：
<pre><code>export PIP_REQUIRE_VIRTUALENV=true </code></pre>
要求 <code>pip</code> 一定要在虛擬環境中執行。

也可以用下面的設定，讓系統的 <code>pip</code> 自動使用啟動中的虛擬環境。
<pre><code>export PIP_RESPECT_VIRTUALENV=true </code></pre>
避免意外將套件安裝至系統環境。
<h5>V. 從程式中指定使用虛擬環境的函數庫</h5>
無法從 Shell 啟動虛擬環境的情況，像是使用 <a href="http://www.modpython.org/" target="_blank">mod_python</a> 或 <a href="http://code.google.com/p/modwsgi/" target="_blank">mod_wsgi</a>，這時可以在 Python 的程式中加上：
<pre><code>activate_this = '/path/to/env/bin/activate_this.py' execfile(activate_this, dict(__file__=activate_this)) </code></pre>
來使用安裝在虛擬環境中的 packages。
<h4>03. 延伸套件：Virtualenvwrapper</h4>
Virtualenvwrapper 是一個 Virtualenv 的 extension，可使虛擬環境的管理變得更容易。

詳細來說，Virtualenvwrapper 提供下述功能：
<ol>
	<li>將所有的虛擬環境整合在一個目錄下。</li>
	<li>管理（新增、移除、複製）所有的虛擬環境。</li>
	<li>可以使用一個命令切換虛擬環境。</li>
	<li>Tab 補全虛擬環境的名字。</li>
	<li>每個操作都提供允許使用者自訂的 hooks。</li>
	<li>可撰寫容易分享的 extension plugin 系統。</li>
</ol>
<h5>I. 安裝</h5>
請於命令列模式下輸入下列指令：
<pre><code># easy_install virtualenvwrapper </code></pre>
<h5>II. 使用方法</h5>
於 <code>$WORKON_HOME</code>製作虛擬環境：
<pre><code>$ mkvirtualenv [-i package] [-r requirements_file] [virtualenv options] ENVNAME </code></pre>
列出所有的虛擬環境：
<pre><code>$ lsvirtualenv [-b] [-l] [-h] </code></pre>
<code>-b</code> 是簡短模式；<code>-l</code> 是詳細模式（預設）；<code>-h</code> 是印出 help 資訊。

移除虛擬環境：
<pre><code>$ rmvirtualenv ENVNAME </code></pre>
複製虛擬環境：
<pre><code>$ cpvirtualenv ENVNAME TARGETENVNAME </code></pre>
啟動虛擬環境：
<pre><code>$ workon [environment_name] </code></pre>
如果只輸入 <code>workon</code>，則會列出所有的虛擬環境。

離開虛擬環境一樣是使用 <code>deactivate</code>。

可以使用下面的設定來告訴 <code>pip</code> Virtualenv 的路徑。
<pre><code>export PIP_VIRTUALENV_BASE=$WORKON_HOME </code></pre>
Virtualenvwrapper 的功能當然不只如此，更多功能可以參考 <a href="http://www.doughellmann.com/docs/virtualenvwrapper/index.html" target="_blank">Virtualenvwrapper 的官方文件</a>。
<h3>Pythonbrew</h3>
<h4>01. 安裝</h4>
Pythonbrew 是個比較新的專案，雖然比較新，卻非常完整。它也有整合上面介紹的 Virtualenv。可以用類似 Virtualenvwrapper 的方式來操作 Virtualenv。

安裝方式與 Virtualenv 一樣，只要輸入下面的指令就可以了：
<pre><code># easy_install $ pythonbrew </code></pre>
Pythonbrew 官方有推薦的安裝方式，但這篇教學為求一致性，就不額外介紹了，可以參考 <a href="https://github.com/utahta/$%20pythonbrew/blob/master/README.rst" target="_blank">pythonbrew/README.rst</a>。

對於 Windows 的使用者，很可惜地，Pythonbrew 暫時沒有支援 Windows 的計畫 (<a href="https://github.com/utahta/$%20pythonbrew/issues/6" target="_blank">#6: Windows Support? - Issues - utahta/pythonbrew - GitHub</a>)。所以 Windows 暫時還沒辦法使用 Pythonbrew 囉。

經過 <code>easy_install</code> 的安裝後，還需要在 shell 執行：
<pre><code>$ pythonbrew_install </code></pre>
才會把初始的設定檔和資料夾配置進你的家目錄。接著要修改 <code>~/.bashrc</code> 的配置：
<pre><code>$ echo "source ~/.pythonbrew/etc/bashrc" &gt;&gt; ~/.bashrc </code></pre>
這樣就算安裝完全囉。

Pythonbrew 使用 <code>curl</code> 來抓取資料，如果你的系統沒有，請記得安裝。Ubuntu 上可以使用這行指令：
<pre><code>$ sudo apt-get install curl </code></pre>
<h4>02. 編譯前準備</h4>
因為 Pythonbrew 採取下載 tarball，並編譯、安裝的方法，所以我們要先為系統準備好編譯 Python 所需的套件。

也因為許多 Linux 發行版都已打包 Python，所以我們可以偷懶一點，用已經打包好的套件來解決編譯所需的相依性。在 Ubuntu/Debian 上，可以透過：
<pre><code>$ sudo apt-get build-dep python2.7 </code></pre>
來安裝所有編譯 Python 2.7 所需的套件。雖然已經能夠安裝得相當完整，但還是缺少了 <code>gdbm</code> 這個 module，如果需要的話，可以透過：
<pre><code>$ sudo apt-get build-dep python-gdbm </code></pre>
來安裝編譯 <code>gdbm</code> 所需的套件。

註：<code>bsddb185</code>、<code>linuxaudiodev</code>、<code>ossaudiodev</code>、<code>sunaudiodev</code> 等是按以上方式安裝後，仍會缺少的 module。其中 <code>ossaudiodev</code>（Open Sound System）在隨 Ubuntu 發布的 Python 中有提供，列出來讓大家參考。

Fedora/CentOS/Redhat/openSUSE 則可以使用 <code>yum-builddep</code> 這個指令。
<h4>03. 使用方法</h4>
Pythonbrew 的操作不外乎安裝、移除、列出及使用新的 Python 版本，下面是依照初次使用時所需的指令順序來介紹。
<h5>I. 列出可安裝的版本</h5>
首先我們用 <code>list --know</code> 列出可以安裝的 Python 版本：
<pre><code>$ pythonbrew list --know </code></pre>
</div>
<div id="ii.-安裝新的版本">
<h5>II. 安裝新的版本</h5>
接著利用 <code>install VERSION</code> 來下載並編譯 Python 到本機，除了接 Python 的版本編號以外，也可以接 Python 的 tarball 路徑或網址來安裝；也能調整編譯 Python 的選項。下面是一些例子：
<pre><code>$ pythonbrew install 2.7.2 $ pythonbrew install --verbose 2.7.2 $ pythonbrew install --force 2.7.2 $ pythonbrew install --no-test 2.7.2 $ pythonbrew install --configure="CC=gcc_4.1" 2.7.2 $ pythonbrew install --no-setuptools 2.7.2 $ pythonbrew install http://www.python.org/ftp/python/2.7/Python-2.7.2.tgz $ pythonbrew install /path/to/Python-2.7.2.tgz $ pythonbrew install /path/to/Python-2.7.2 $ pythonbrew install 2.7.2 3.2 </code></pre>
<h5>III. 清理安裝時產生的檔案</h5>
下載的 Python tarball 會放在 <code>~/.pythonbrew/dists/</code> 下；而編譯則會在 <code>~/.pythonbrew/build/</code> 下進行。如果想清理這兩個目錄，可以使用：
<pre><code>$ pythonbrew cleanup </code></pre>
<h5>IV. 列出所有已安裝的版本</h5>
安裝好之後，可以使用 <code>list</code> 命令列出所有已安裝的 Python 版本：
<pre><code>$ pythonbrew list </code></pre>
後面有打星號的，就是現在正在使用的 Python 版本。
<h5>V. 切換已安裝的版本</h5>
可以使用 <code>switch</code> 來切換預設的 Python 版本：
<pre><code>$ pythonbrew switch VERSION </code></pre>
如果只想在當前的 shell 下切換，可以使用 <code>use</code>：
<pre><code>$ pythonbrew use VERSION </code></pre>
要切換回預設的環境時，使用 <code>off</code>：
<pre><code>$ pythonbrew off </code></pre>
就會返回系統環境的 Python 了。
<h5>VI. 批次在不同版本下測試</h5>
最重要的是，可以用系統內所有安裝過的 Python 版本，或指定的 Python 版本來測試自己的程式！
<pre><code>$ pythonbrew py test.py # 使用所有有安裝的版本 $ pythonbrew py -v test.py # 詳細輸出 $ pythonbrew py -p 2.7.2 -p 3.2 test.py # 指定特定的版本 </code></pre>
<h5>VII. 移除已安裝的版本</h5>
若想移除已經安裝的 Python，則可以使用 <code>uninstall</code>：
<pre><code>$ pythonbrew uninstall 2.7.2 $ pythonbrew uninstall 2.7.2 3.2 </code></pre>
<h5>VIII. 與 Virtualenv 的整合</h5>
要注意 Pythonbrew 中所提供的 Virtualenv，是基於 Pythonbrew 中所安裝的 Python（置於 <code>~/.pythonbrew/venvs/Python-VERSION/</code> 下）。在不使用 Pythonbrew 的情況下，無法使用附屬於 Pythonbrew 的 <code>venv</code> 功能。

Pythonbrew 提供了和 Virtualenvwrapper 類似的功能，只是沒有像 Virtualenvwrapper 那麼完整的 plugin 系統。所有在 Pythonbrew 中的 Virtualenv 指令都以 <code>venv</code> 作為第一個副命令。
<pre><code>$ pythonbrew venv create [指定虛擬環境的名稱] $ pythonbrew venv list $ pythonbrew venv use [指定虛擬環境的名稱] $ pythonbrew venv delete [指定虛擬環境的名稱] </code></pre>
離開虛擬環境一樣是使用 <code>deactivate</code>。
<h5>IX. Buildout</h5>
如果有使用 <a href="http://www.buildout.org/" target="_blank">Buildout</a> 這個工具，也可以透過 Pythonbrew 來執行：
<pre><code>$ pythonbrew buildout $ pythonbrew buildout -p 2.6.6 # 指定版本 </code></pre>
</div>
<div id="x.-自我更新">
<h5>X. 自我更新</h5>
最後，Pythonbrew 有內建更新自己的指令：
<pre><code>$ pythonbrew update $ pythonbrew update --master $ pythonbrew update --develop </code></pre>
Virtualenv 和 Pythonbrew 就介紹到這邊，如果想獲得更多資訊，可以多多參考它們的官網哦。祝大家玩得愉快。
<h3>參考資料</h3>
<ul>
	<li><a href="http://www.virtualenv.org/" target="_blank">www.virtualenv.org</a></li>
	<li><a href="https://github.com/utahta/pythonbrew" target="_blank">utahta/pythonbrew - GitHub</a></li>
	<li><a href="http://pypi.python.org/pypi/setuptools" target="_blank">setuptools - PyPI</a></li>
	<li><a href="http://pypi.python.org/pypi/pip" target="_blank">pip - PyPI</a></li>
	<li><a href="http://www.doughellmann.com/docs/virtualenvwrapper/" target="_blank">virtualenvwrapper documentaion</a></li>
	<li><a href="http://stackoverflow.com/questions/6171210/building-python-and-more-on-missing-modules" target="_blank">Building Python and more on missing modules - Stack Overflow</a></li>
</ul>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date>2011-12-15 21:29:38</wp:post_date>
		<wp:post_date_gmt>2011-12-15 13:29:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-%e7%9a%84%e8%99%9b%e6%93%ac%e7%92%b0%e5%a2%83%e5%8f%8a%e5%a4%9a%e7%89%88%e6%9c%ac%e9%96%8b%e7%99%bc%e5%88%a9%e5%99%a8%e2%94%80virtualenv-%e8%88%87-pythonbrew</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="pythonbrew"><![CDATA[Pythonbrew]]></category>
		<category domain="post_tag" nicename="virtualenv"><![CDATA[Virtualenv]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>django学习笔记：django-pagination分页应用和内置的分页处理 </title>
		<link></link>
		<pubDate>Sat, 17 Dec 2011 08:13:06 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=113</guid>
		<description></description>
		<content:encoded><![CDATA[---
layout: post
title: "django学习笔记：django-pagination分页应用和内置的分页处理 "
date: 2011-12-17 16:13
comments: true
categories: [django,python]
tags: [django,pagination]
---
## django学习笔记：django-pagination分页应用和内置的分页处理
<div>

<strong>django-pagination的分页</strong>

<pre>
{% load pagination_tags %} ＃导入pagination模板标签

{% autopaginate scenics_list 15 %} # 加上这一行处理分页，后面跟的那个整数表示每页多少条记录。
{% for scenic in scenics_list %}
{{ scenic.title }}
{% endfor %}

{% paginate %} # 秀出分页</pre>

<a name="entrymore"></a>
－－－－－－－－－－－－ 分割线 －－－－－－－－－－－－－
<strong>原django自带的分页：</strong>
<div>
from django.views.generic import list_detail, create_update #导入通用视图
scenic_list_info = {
'queryset': Scenic.objects.all(), #必要参数，要列出的对象的QuerySet显示出来的结果集; 其余为可选参数。
'template_name': 'scenics/scenic_list.html', #模板名称，不指定的话默认使用 templates/_list.html
'template_object_name': 'scenics', #在模板中，通用视图会通过在template_object_name后追加一个_list的方式来创建一个表示列表项目的变量名 scenics_list 。以便制作友好的模板Context，在模板中引用 {% for scenic in scenics_list %} 。
'allow_empty': True,
'paginate_by': 15, #一个整型数，分页时用到，用来制定每页显示多少条记录。
#'extra_context': {'book_list': Book.objects.all()}
#'extra_context': {'string':'aaa','query':get_query} #向通用视图传递额外的数据，以字典形式存储
}</div>

<pre>
&lt;div style=&quot;text-align:center;width:75%;font-size:12px;&quot;&gt;
{% if is_paginated %}
{% ifequal page 1 %}
首页
{% else %}
&lt;a href=&quot;?page=1&quot;&gt;首页&lt;/a&gt;
{% endifequal %}
{% if has_previous %}
&lt;a href=&quot;?page={{ previous }}&quot;&gt;上一页&lt;/a&gt;
{% else %}
上一页
{% endif %}
{% if has_next %}
&lt;a href=&quot;?page={{ next }}&quot;&gt;下一页&lt;/a&gt;
{% else %}
下一页
{% endif %}
{% ifequal page pages %}
末页
{% else %}
&lt;a href=&quot;?page={{ pages }}&quot;&gt;末页&lt;/a&gt;
{% endifequal %}
&amp;nbsp;&amp;nbsp;
当前页：{{ page }}/{{ pages }}
&amp;nbsp;&amp;nbsp;
{% endif %}
&lt;/div&gt;
</pre>
</div>
<div>标签： <a href="http://jhjguxin.hwcrazy.com/tag/django/">django</a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>113</wp:post_id>
		<wp:post_date>2011-12-17 16:13:06</wp:post_date>
		<wp:post_date_gmt>2011-12-17 08:13:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>django%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%ef%bc%9adjango-pagination%e5%88%86%e9%a1%b5%e5%ba%94%e7%94%a8%e5%92%8c%e5%86%85%e7%bd%ae%e7%9a%84%e5%88%86%e9%a1%b5%e5%a4%84%e7%90%86</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="django"><![CDATA[django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[django]]></category>
		<category domain="post_tag" nicename="pagination"><![CDATA[pagination]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>File Uploading using Rails</title>
		<link></link>
		<pubDate>Tue, 20 Dec 2011 07:55:26 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=117</guid>
		<description></description>
		<content:encoded><![CDATA[You may have a requirement in which you want your site visitors to upload a file on your server. Rails makes it very easy to handle this requirement. Now we will proceed with a simple and small Rails project.

As usual, let's start off with a new Rails application called <strong>upload</strong>. So let's create basic structure of the application by using simple rails command.
<table cellpadding="5">
<tbody>
<tr>
<td>
<pre>C:\ruby&gt; rails upload</pre>
</td>
</tr>
</tbody>
</table>
Now let's decide where you would like to save your uploaded files. Assume this is <strong>data</strong> directory inside your public section. So create this directory and check the permissions.
<table cellpadding="5">
<tbody>
<tr>
<td>
<pre>C:\ruby&gt; cd upload
C:\ruby&gt; mkdir upload\public\data</pre>
</td>
</tr>
</tbody>
</table>
Our next step will be as usual, to create controller and models, so let's do that:
<h2>Creating Model:</h2>
Because this is not a database based application so we can keep name whatever is comfortable to us. Assume we have to create a <strong>DataFile</strong> model.
<table cellpadding="5">
<tbody>
<tr>
<td>
<pre>C:\ruby&gt; ruby script/generate model DataFile
      exists  app/models/
      exists  test/unit/
      exists  test/fixtures/
      create  app/models/data_file.rb
      create  test/unit/data_file_test.rb
      create  test/fixtures/data_files.yml
      create  db/migrate
      create  db/migrate/001_create_data_files.rb</pre>
</td>
</tr>
</tbody>
</table>
Now we will create a method called <strong>save</strong> in <strong>data_file.rb</strong> model file. This method will be called by the application controller.
<table cellpadding="5">
<tbody>
<tr>
<td>
<pre>class DataFile &lt; ActiveRecord::Base
  def self.save(upload)
    name =  upload['datafile'].original_filename
    directory = "public/data"
    # create the file path
    path = File.join(directory, name)
    # write the file
    File.open(path, "wb") { |f| f.write(upload['datafile'].read) }
  end
end</pre>
</td>
</tr>
</tbody>
</table>
The above function will take CGI object <strong>upload</strong> and will extract uploaded file name using helper function <strong>original_filename</strong> and finally it will store uploaded file into "public/data" directory. You can call helper function <strong>content_type</strong> to know media type of the uploaded file.

Here <strong>File</strong> is a ruby object and join is a helper function will concatenate directory name alongwith file name and will return full file path.

Next, to open a file in write mode we are using open helper function provided by <strong>File</strong> object. Further we are reading data from the passed data file and writing into output file.
<h2>Creating Controller:</h2>
Now let's create a controller for our upload project:
<table cellpadding="5">
<tbody>
<tr>
<td>
<pre>C:\ruby&gt; ruby script/generate controller Upload
      exists  app/controllers/
      exists  app/helpers/
      create  app/views/upload
      exists  test/functional/
      create  app/controllers/upload_controller.rb
      create  test/functional/upload_controller_test.rb
      create  app/helpers/upload_helper.rb</pre>
</td>
</tr>
</tbody>
</table>
Now we will create two controller functions first function <strong>index</strong> will call a view file to take user input and second function <strong>uploadFile</strong> takes file information from the user and passes it to the 'DataFile' model. We set the upload directory to the 'uploads' directory we created earlier "directory = 'data'".
<table cellpadding="5">
<tbody>
<tr>
<td>
<pre>class UploadController &lt; ApplicationController
  def index
     render :file =&gt; 'app\views\upload\uploadfile.rhtml'
  end
  def uploadFile
    post = DataFile.save(params[:upload])
    render :text =&gt; "File has been uploaded successfully"
  end
end</pre>
</td>
</tr>
</tbody>
</table>
Here we are calling function defined in model file. The <strong>render</strong> function is being used to redirect to view file as well as to display a message.
<h2>Creating View:</h2>
Finally we will create a view file <strong>uploadfile.rhtml</strong> which we have mentioned in controller. Populate this file with the following code:
<table cellpadding="5">
<tbody>
<tr>
<td>
<pre>&lt;h1&gt;File Upload&lt;/h1&gt;
&lt;%= start_form_tag ({:action =&gt; 'uploadFile'}, 
                        :multipart =&gt; true) %&gt;
&lt;p&gt;&lt;label for="upload_file"&gt;Select File&lt;/label&gt; : 
&lt;%= file_field 'upload', 'datafile' %&gt;&lt;/p&gt;
&lt;%= submit_tag "Upload" %&gt;
&lt;%= end_form_tag %&gt;</pre>
</td>
</tr>
</tbody>
</table>
Here everything is same what we have explained in earlier chapters. Only new tag is <strong>file_field</strong> which will create a button to select a file from user's computer.

By setting the multipart parameter to true, you ensure that your action properly passes along the binary data from the file.

Here, an important point to note is that we have assigned <strong>"uploadFile"</strong> as the method name in :action, which will be called when you click the <strong>Upload</strong> button.

This will show you a screen as follows:

<center><img src="http://www.tutorialspoint.com/images/upload-file.gif" alt="Upload File" />

</center>Now you select a file and upload it, this file will be uploaded into app/public/data directory with the actual file name and a message will be displayed to you saying that "File has been uploaded successfully".

<strong>NOTE:</strong> If a file with the same name already exists in your output directory then it will be over-written.
<h2>Files uploaded from Internet Explorer:</h2>
Internet Explorer includes the entire path of a file in the filename sent, so the <strong>original_filename</strong> routine will return something like:
<table cellpadding="5">
<tbody>
<tr>
<td>
<pre>C:\Documents and Files\user_name\Pictures\My File.jpg</pre>
</td>
</tr>
</tbody>
</table>
instead of just:
<table cellpadding="5">
<tbody>
<tr>
<td>
<pre>My File.jpg</pre>
</td>
</tr>
</tbody>
</table>
This is easily handled by <strong>File.basename</strong>, which strips out everything before the filename.
<table cellpadding="5">
<tbody>
<tr>
<td>
<pre>def sanitize_filename(file_name)
  # get only the filename, not the whole path (from IE)
  just_filename = File.basename(file_name) 
  # replace all none alphanumeric, underscore or perioids
  # with underscore
  just_filename.sub(/[^\w\.\-]/,'_') 
end</pre>
</td>
</tr>
</tbody>
</table>
<h2>Deleting an existing File:</h2>
If you want to delete any existing file then its simple and need to write following code:
<table cellpadding="5">
<tbody>
<tr>
<td>
<pre>  def cleanup
    File.delete("#{RAILS_ROOT}/dirname/#{@filename}") 
            if File.exist?("#{RAILS_ROOT}/dirname/#{@filename}")
  end</pre>
</td>
</tr>
</tbody>
</table>
For a complete detail on <strong>File</strong> object, you need to go through Ruby Reference Manual.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date>2011-12-20 15:55:26</wp:post_date>
		<wp:post_date_gmt>2011-12-20 07:55:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>file-uploading-using-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="file"><![CDATA[file]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="upload"><![CDATA[upload]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails Form helpers</title>
		<link></link>
		<pubDate>Wed, 21 Dec 2011 15:22:45 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=120</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Rails Form helpers</h2>
Forms in web applications are an essential interface for user input. However, form markup can quickly become tedious to write and maintain because of form control naming and their numerous attributes. Rails deals away with these complexities by providing view helpers for generating form markup. However, since they have different use-cases, developers are required to know all the differences between similar helper methods before putting them to use.

Forms<span style="font-family: DejaVu Sans;">在</span>web<span style="font-family: DejaVu Sans;">应用程序中是一个必不可少的提供用户输入的</span>interface<span style="font-family: DejaVu Sans;">（接口）。然而，形式标记的编写和维护很快就变得十分乏味是因为表单控件的命名和它们的许多属性。</span>Rails<span style="font-family: DejaVu Sans;">处理这些复杂的（事物）通过提供</span>view helpers<span style="font-family: DejaVu Sans;">来创建</span>form markup<span style="font-family: DejaVu Sans;">。然而，自从有了不同的用户需求，开发人员需要知道所有的</span>similar helper <span style="font-family: DejaVu Sans;">方法间的的不同在使用它们之前。</span>

In this guide you will:<span style="font-family: DejaVu Sans;">在这个</span>guide<span style="font-family: DejaVu Sans;">中你可以了解到：</span>
<ul>
	<li>Create search forms and similar kind of generic forms not representing any specific model in your application<span style="font-family: DejaVu Sans;">在你的应用程序中，创建</span>search forms<span style="font-family: DejaVu Sans;">和生成类似的</span>forms<span style="font-family: DejaVu Sans;">它们不代表任何指定的</span>model</li>
	<li>Make model-centric forms for creation and editing of specific database records<span style="font-family: DejaVu Sans;">制造</span>model-centric forms<span style="font-family: DejaVu Sans;">来创建和编辑指定的数据库记录</span></li>
	<li>Generate select boxes from multiple types of data <span style="font-family: DejaVu Sans;">从多种数据生成</span>select boxes</li>
	<li>Understand the date and time helpers Rails provides <span style="font-family: DejaVu Sans;">明白</span>Rails<span style="font-family: DejaVu Sans;">提供的</span>date<span style="font-family: DejaVu Sans;">和</span>time helpers</li>
	<li>Learn what makes a file upload form different <span style="font-family: DejaVu Sans;">学习什么使得一个文件</span>upload form<span style="font-family: DejaVu Sans;">变得不同</span></li>
	<li>Learn some cases of building forms to external resources <span style="font-family: DejaVu Sans;">学习某些情况下为</span>external resources<span style="font-family: DejaVu Sans;">（外部资源）构建</span>forms</li>
	<li>Find out where to look for complex forms <span style="font-family: DejaVu Sans;">找出在哪里查找复杂的</span>forms</li>
</ul>
This guide is not intended to be a complete documentation of available form helpers and their arguments. Please visit <a href="http://api.rubyonrails.org/"><span style="color: #000080;"><span style="text-decoration: underline;">the</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">API</span></span><span style="color: #000080;"><span style="text-decoration: underline;">documentation</span></span></a> for a complete reference.

<span style="font-family: DejaVu Sans;">本教程不大算成为一个包含可用的</span>form helpers<span style="font-family: DejaVu Sans;">和它们的参数的完整的文档。请访问</span><a href="http://api.rubyonrails.org/"><span style="color: #000080;"><span style="text-decoration: underline;">the</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">API</span></span><span style="color: #000080;"><span style="text-decoration: underline;">documentation</span></span></a><span style="font-family: DejaVu Sans;">得到完整的参考。</span>
<h3><a name="dealing-with-basic-forms"></a>1 Dealing with Basic Forms</h3>
The most basic form helper is <tt>form_tag</tt>.<span style="font-family: DejaVu Sans;">最基本的</span>form helper<span style="font-family: DejaVu Sans;">是</span>form_tag<span style="font-family: DejaVu Sans;">。</span>

&lt;%= form_tag do %&gt;

Form contents

&lt;% end %&gt;

When called without arguments like this, it creates a <tt>&lt;form&gt;</tt> tag which, when submitted, will POST to the current page. For instance, assuming the current page is <tt>/home/index</tt>, the generated HTML will look like this (some line breaks added for readability):

<span style="font-family: DejaVu Sans;">当像这样无参调用时，它创建一个</span>&lt;form&gt;<span style="font-family: DejaVu Sans;">标签，当提交这个表单时，会提交到当前页面。作为实例，假设当前页面是</span><tt>/home/index</tt><span style="font-family: DejaVu Sans;"><tt>，创建的</tt></span><tt>HTML</tt><span style="font-family: DejaVu Sans;"><tt>将会像这样（有一些换行为了增加可读性）：</tt></span>

&lt;form accept-charset="UTF-8" action="/home/index" method="post"&gt;

&lt;div style="margin:0;padding:0"&gt;

&lt;input name="utf8" type="hidden" value="&amp;#x2713;" /&gt;

&lt;input name="authenticity_token" type="hidden" value="f755bb0ed134b76c432144748a6d4b7a7ddf2b71" /&gt;

&lt;/div&gt;

Form contents

&lt;/form&gt;

Now, you’ll notice that the HTML contains something extra: a <tt>div</tt> element with two hidden input elements inside. This div is important, because the form cannot be successfully submitted without it. The first input element with name <tt>utf8</tt> enforces browsers to properly respect your form’s character encoding and is generated for all forms whether their actions are “GET” or “POST”. The second input element with name <tt>authenticity_token</tt> is a security feature of Rails called <strong>cross-site</strong><strong> </strong><strong>request</strong><strong> </strong><strong>forgery</strong><strong> </strong><strong>protection</strong>, and form helpers generate it for every non-GET form (provided that this security feature is enabled). You can read more about this in the <a href="http://guides.rubyonrails.org/security.html#_cross_site_reference_forgery_csrf"><span style="color: #000080;"><span style="text-decoration: underline;">Security</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Guide</span></span></a>.

<span style="font-family: DejaVu Sans;">现在，你将会注意到</span>HTML<span style="font-family: DejaVu Sans;">包含一些额外的东西：一个</span>div<span style="font-family: DejaVu Sans;">元素和在里边的两个隐藏的</span>input<span style="font-family: DejaVu Sans;">元素。这个</span>div<span style="font-family: DejaVu Sans;">很重要，因为如果没有它</span>form<span style="font-family: DejaVu Sans;">不能够成功的被提交。第一个</span>input<span style="font-family: DejaVu Sans;">元素有</span>name utf8<span style="font-family: DejaVu Sans;">会强制浏览器合适的遵循你的</span>form's<span style="font-family: DejaVu Sans;">的字符编码并且无论是它创建的所有</span>forms<span style="font-family: DejaVu Sans;">还是它们的</span>actions<span style="font-family: DejaVu Sans;">（<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>GET” or “POST”<span style="font-family: DejaVu Sans;">）。第二个</span>input<span style="font-family: DejaVu Sans;">元素使用</span>name <tt>authenticity_token</tt><span style="font-family: DejaVu Sans;"><tt>它是一个</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>的安全特性调用</tt><tt></tt></span><strong>cross-site</strong><strong> </strong><strong>request</strong><strong> </strong><strong>forgery</strong><strong> </strong><strong>protection<span style="font-family: DejaVu Sans;">（站间请求保护）</span></strong><span style="font-family: DejaVu Sans;"><strong>，并且</strong></span><strong>form</strong><strong> </strong><strong>helpers<span style="font-family: DejaVu Sans;">为每个</span></strong><strong>non-GET</strong><strong> </strong><strong>form</strong><strong> </strong><strong>(<span style="font-family: DejaVu Sans;">确保这个安全特性是有效的</span></strong><strong>)</strong><strong> </strong><span style="font-family: DejaVu Sans;"><strong>创建它。你可以阅读关于他的更多信息在</strong><strong></strong></span><a href="http://guides.rubyonrails.org/security.html#_cross_site_reference_forgery_csrf"><span style="color: #000080;"><span style="text-decoration: underline;">Security</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Guide</span></span></a><span style="font-family: DejaVu Sans;"><strong>中。</strong></span>

Throughout this guide, the <tt>div</tt> with the hidden input elements will be excluded<span style="font-family: DejaVu Sans;">排除</span>from code samples for brevity<span style="font-family: DejaVu Sans;">短暂</span>.<span style="font-family: DejaVu Sans;">通过这个教程，</span>div<span style="font-family: DejaVu Sans;">里面的两个隐藏的</span>input<span style="font-family: DejaVu Sans;">元素将会从</span>samples code<span style="font-family: DejaVu Sans;">暂时排除。</span>
<h4><a name="a-generic-search-form"></a>1.1 A Generic Search Form<span style="font-family: WenQuanYi Micro Hei;">通用搜索表单</span></h4>
One of the most basic forms you see on the web is a search form. This form contains:

<span style="font-family: DejaVu Sans;">搜索表单是你在</span>web<span style="font-family: DejaVu Sans;">上最常见的基本表单之一。这个表单包含：</span>
<ol>
	<li>a form element with “GET” method,</li>
	<li>a label for the input,</li>
	<li>a text input element, and</li>
	<li>a submit element.</li>
</ol>
To create this form you will use <tt>form_tag</tt>, <tt>label_tag</tt>, <tt>text_field_tag</tt>, and <tt>submit_tag</tt>, respectively. Like this:

<span style="font-family: DejaVu Sans;">要创建这个表单你将会分别使用</span>form_tag,label_tag,text_field_tag,and submit_tag<span style="font-family: DejaVu Sans;">。</span>

&lt;%= form_tag("/search", :method =&gt; "get") do %&gt;

&lt;%= label_tag(:q, "Search for:") %&gt;

&lt;%= text_field_tag(:q) %&gt;

&lt;%= submit_tag("Search") %&gt;

&lt;% end %&gt;

This will generate the following HTML:<span style="font-family: DejaVu Sans;">这将会生成随后的</span>HTML<span style="font-family: DejaVu Sans;">：</span>

&lt;form accept-charset="UTF-8" action="/search" method="get"&gt;

&lt;label for="q"&gt;Search for:&lt;/label&gt;

&lt;input id="q" name="q" type="text" /&gt;#label <span style="font-family: DejaVu Sans;">和</span>input<span style="font-family: DejaVu Sans;">的</span>for<span style="font-family: DejaVu Sans;">和</span>id<span style="font-family: DejaVu Sans;">的值的统一是为了将它们关联起来选中</span>label<span style="font-family: DejaVu Sans;">则</span>input<span style="font-family: DejaVu Sans;">则被激活</span>

&lt;input name="commit" type="submit" value="Search" /&gt;

&lt;/form&gt;

For every form input, an ID attribute is generated from its name (“q” in the example). These IDs can be very useful for CSS styling or manipulation of form controls with JavaScript.

<span style="font-family: DejaVu Sans;">对于每个</span>form input<span style="font-family: DejaVu Sans;">，</span>ID<span style="font-family: DejaVu Sans;">属性被从它的</span>name<span style="font-family: DejaVu Sans;">生成（本例中是</span>q<span style="font-family: DejaVu Sans;">）。这些</span>IDs<span style="font-family: DejaVu Sans;">在</span>CSS styling<span style="font-family: DejaVu Sans;">中非常有用或者使用</span>JavaScript<span style="font-family: DejaVu Sans;">操作</span>form controls<span style="font-family: DejaVu Sans;">。</span>

Besides <tt>text_field_tag</tt> and <tt>submit_tag</tt>, there is a similar helper for <em>every</em> form control in HTML.<span style="font-family: DejaVu Sans;">下面的</span><tt>text_field_tag</tt> and <tt>submit_tag</tt><span style="font-family: DejaVu Sans;"><tt>，它们是每个</tt></span><tt>form</tt><tt> </tt><tt>control</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>HTML</tt><span style="font-family: DejaVu Sans;"><tt>中的</tt></span><tt>similar</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

Always use “GET” as the method for search forms. This allows users to bookmark a specific search and get back to it. More generally Rails encourages you to use the right HTTP verb for an action.

<span style="font-family: DejaVu Sans;">通常对</span>search forms<span style="font-family: DejaVu Sans;">使用<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>GET”<span style="font-family: DejaVu Sans;">方法。这允许用户将一个指定的搜索（的</span>url<span style="font-family: DejaVu Sans;">添加）书签并（通过这个书签）取回查询结果。更常规的方法</span>Rails<span style="font-family: DejaVu Sans;">鼓励你对于一个</span>HTTP <span style="font-family: DejaVu Sans;">动作使用正确的</span>verb(<span style="font-family: DejaVu Sans;">动词</span>)<span style="font-family: DejaVu Sans;">。</span>
<h4><a name="multiple-hashes-in-form-helper-calls"></a> 1.2 Multiple Hashes in Form Helper Calls</h4>
The <tt>form_tag</tt> helper accepts 2 arguments: the path for the action and an options hash. This hash specifies the method of form submission and HTML options such as the form element’s class.

<tt>form_tag</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>接收两个参数：</tt></span><tt>path</tt><span style="font-family: DejaVu Sans;"><tt>的值为动作的路径以及一个</tt></span><tt>options</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>字典。</tt></span>

<span style="font-family: DejaVu Sans;"><tt>这个</tt></span><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>字典指定提交</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>的方法和（一些）</tt></span><tt>HTML</tt><span style="font-family: DejaVu Sans;"><tt>选项如</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>元素的</tt></span><tt>class</tt><span style="font-family: DejaVu Sans;"><tt>属性。</tt></span>

As with the <tt>link_to</tt> helper, the path argument doesn’t have to be given a string; it can be a hash of URL parameters recognizable by Rails’ routing mechanism, which will turn the hash into a valid URL. However, since both arguments to <tt>form_tag</tt> are hashes, you can easily run into a problem if you would like to specify both. For instance, let’s say you write this:

<span style="font-family: DejaVu Sans;">如同</span>link_to helper<span style="font-family: DejaVu Sans;">，</span>path<span style="font-family: DejaVu Sans;">参数不是必须是被提供给一个</span>string<span style="font-family: DejaVu Sans;">；它可以是被</span>Rails<span style="font-family: DejaVu Sans;">的</span>routing mechanism<span style="font-family: DejaVu Sans;">组织的一个</span>URL<span style="font-family: DejaVu Sans;">参数的</span>hash<span style="font-family: DejaVu Sans;">字典，他将转接</span>hash<span style="font-family: DejaVu Sans;">（键）到一个有效的</span>URL<span style="font-family: DejaVu Sans;">。然而，</span>

<span style="font-family: DejaVu Sans;">既然两个参数</span><tt>form_tag</tt><span style="font-family: DejaVu Sans;"><tt>都是</tt></span><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>字典形式，你可以容易的陷入一个问题如果你想指定他们两个。下面的实例，让告诉你写下如下代码：</tt></span>

form_tag(:controller =&gt; "people", :action =&gt; "search", :method =&gt; "get", :class =&gt; "nifty_form")

# =&gt; '&lt;form accept-charset="UTF-8" action="/people/search?method=get&amp;class=nifty_form" method="post"&gt;'

Here, <tt>method</tt> and <tt>class</tt> are appended to the query string of the generated URL because you even though you mean to write two hashes, you really only specified one. So you need to tell Ruby which is which by delimiting the first hash (or both) with curly brackets. This will generate the HTML you expect:

<span style="font-family: DejaVu Sans;">这里，</span>method<span style="font-family: DejaVu Sans;">和</span>class<span style="font-family: DejaVu Sans;">被添加到生成的</span>UIR<span style="font-family: DejaVu Sans;">的</span>query<span style="font-family: DejaVu Sans;">字符串中是因为即使你曾经意图写的两个</span>hash<span style="font-family: DejaVu Sans;">字段，你实际上只指定了一个。因此你需要告诉</span>Ruby<span style="font-family: DejaVu Sans;">其中的那一个被限制为第一个</span>hash<span style="font-family: DejaVu Sans;">（或者两个都）使用大括号。这是生成的</span>HTML<span style="font-family: DejaVu Sans;">你期望的：</span>

form_tag({:controller =&gt; "people", :action =&gt; "search"}, :method =&gt; "get", :class =&gt; "nifty_form")

# =&gt; '&lt;form accept-charset="UTF-8" action="/people/search" method="get"&gt;'
<h4><a name="helpers-for-generating-form-elements"></a> 1.3 Helpers for Generating Form Elements</h4>
Rails provides a series of helpers for generating form elements such as checkboxes, text fields, and radio buttons. These basic helpers, with names ending in “_tag” (such as <tt>text_field_tag</tt> and <tt>check_box_tag</tt>), generate just a single <tt>&lt;input&gt;</tt> element. The first parameter to these is always the name of the input. When the form is submitted, the name will be passed along with the form data, and will make its way to the <tt>params</tt> hash in the controller with the value entered by the user for that field. For example, if the form contains <tt>&lt;%=</tt><tt> </tt><tt>text_field_tag(:query)</tt><tt> </tt><tt>%&gt;</tt>, then you would be able to get the value of this field in the controller with <tt>params[:query]</tt>.

Rails<span style="font-family: DejaVu Sans;">提供一系列的</span>helpers<span style="font-family: DejaVu Sans;">来创建</span>form<span style="font-family: DejaVu Sans;">元素例如</span>checkboxes<span style="font-family: DejaVu Sans;">，</span>text fields<span style="font-family: DejaVu Sans;">以及</span>radio buttons<span style="font-family: DejaVu Sans;">。这些基本的</span>helpers<span style="font-family: DejaVu Sans;">，使用<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>_tag”<span style="font-family: DejaVu Sans;">结尾（例如</span><tt>text_field_tag</tt> and <tt>check_box_tag</tt><span style="font-family: DejaVu Sans;">），创建一个单独的</span>&lt;input&gt;<span style="font-family: DejaVu Sans;">元素。其第一个参数通常是</span>input<span style="font-family: DejaVu Sans;">的</span>name<span style="font-family: DejaVu Sans;">。当这个</span>form<span style="font-family: DejaVu Sans;">被提交的时候，名称也将会和</span>form data<span style="font-family: DejaVu Sans;">一起（提交），并且将会以它的方式将它和用户输入到</span>field<span style="font-family: DejaVu Sans;">中的值传递到</span>controller<span style="font-family: DejaVu Sans;">中的</span>params hash<span style="font-family: DejaVu Sans;">中。例如，如果</span>form<span style="font-family: DejaVu Sans;">包含</span><tt>&lt;%=</tt><tt> </tt><tt>text_field_tag(:query)</tt><tt> </tt><tt>%&gt;</tt><span style="font-family: DejaVu Sans;"><tt>，然后你可以在</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>使用</tt><tt></tt></span><tt>params[:query]</tt><span style="font-family: DejaVu Sans;"><tt>获取这个</tt></span><tt>field</tt><span style="font-family: DejaVu Sans;"><tt>中的值。</tt></span>

When naming inputs, Rails uses certain conventions that make it possible to submit parameters with non-scalar values such as arrays or hashes, which will also be accessible in <tt>params</tt>. You can read more about them in <a href="http://guides.rubyonrails.org/form_helpers.html#understanding-parameter-naming-conventions"><span style="color: #000080;"><span style="text-decoration: underline;">chapter</span></span><span style="color: #000080;"><span style="text-decoration: underline;">7</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">this</span></span><span style="color: #000080;"><span style="text-decoration: underline;">guide</span></span></a>. For details on the precise usage of these helpers, please refer to the <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html"><span style="color: #000080;"><span style="text-decoration: underline;">API</span></span><span style="color: #000080;"><span style="text-decoration: underline;">documentation</span></span></a>.

<span style="font-family: DejaVu Sans;">当命名了</span>inputs<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">使用某些公约使得提交</span>parameters<span style="font-family: DejaVu Sans;">和</span>non-scalar<span style="font-family: DejaVu Sans;">（非标量）的值例如</span>arrays<span style="font-family: DejaVu Sans;">或者</span>hashes<span style="font-family: DejaVu Sans;">成为了可能，其也可以通过使用</span><tt>params</tt><span style="font-family: DejaVu Sans;"><tt>来访问。你可以阅读</tt><tt></tt></span><a href="http://guides.rubyonrails.org/form_helpers.html#understanding-parameter-naming-conventions"><span style="color: #000080;"><span style="text-decoration: underline;">chapter</span></span><span style="color: #000080;"><span style="text-decoration: underline;">7</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">this</span></span><span style="color: #000080;"><span style="text-decoration: underline;">guide</span></span></a><span style="font-family: DejaVu Sans;"><tt>来了解更多的信息。要知道这些</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>的精确用法的描述，请参阅</tt><tt></tt></span><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html"><span style="color: #000080;"><span style="text-decoration: underline;">API</span></span><span style="color: #000080;"><span style="text-decoration: underline;">documentation</span></span></a><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h5><a name="checkboxes"></a>1.3.1 Checkboxes<span style="font-family: WenQuanYi Micro Hei;">复选框</span></h5>
Checkboxes are form controls that give the user a set of options they can enable or disable:

Checkboxes<span style="font-family: DejaVu Sans;">是</span>form<span style="font-family: DejaVu Sans;">控件它提供给用户一个设置选项这个选项可以选中和取消选中：</span>

&lt;%= check_box_tag(:pet_dog) %&gt;

&lt;%= label_tag(:pet_dog, "I own a dog") %&gt;

&lt;%= check_box_tag(:pet_cat) %&gt;

&lt;%= label_tag(:pet_cat, "I own a cat") %&gt;

This generates the following:<span style="font-family: DejaVu Sans;">这将生成随后的代码：</span>

&lt;input id="pet_dog" name="pet_dog" type="checkbox" value="1" /&gt;

&lt;label for="pet_dog"&gt;I own a dog&lt;/label&gt;

&lt;input id="pet_cat" name="pet_cat" type="checkbox" value="1" /&gt;

&lt;label for="pet_cat"&gt;I own a cat&lt;/label&gt;

The first parameter to <tt>check_box_tag</tt>, of course, is the name of the input. The second parameter, naturally, is the value of the input. This value will be included in the form data (and be present in <tt>params</tt>) when the checkbox is checked.

<tt>check_box_tag</tt><span style="font-family: DejaVu Sans;"><tt>的第一个参数，当然是</tt></span><tt>input</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>。第二个参数，自然地，是</tt></span><tt>input</tt><span style="font-family: DejaVu Sans;"><tt>输入的值。这个</tt></span><tt>value</tt><span style="font-family: DejaVu Sans;"><tt>将会包含在</tt></span><tt>form</tt><tt> </tt><tt>data</tt><span style="font-family: DejaVu Sans;"><tt>中（并且使用</tt></span><tt>params</tt><span style="font-family: DejaVu Sans;"><tt>表示）当</tt></span><tt>checkbox</tt><span style="font-family: DejaVu Sans;"><tt>被选中。</tt></span>
<h5><a name="radio-buttons"></a>1.3.2 Radio Buttons<span style="font-family: WenQuanYi Micro Hei;">单选按钮</span></h5>
Radio buttons, while similar to checkboxes, are controls that specify a set of options in which they are mutually exclusive (i.e., the user can only pick one):

<span style="font-family: DejaVu Sans;">单选框，它和复选框很类似，它是一种控件指定一些设置选项这些选项之间是相互排斥的（</span>i.e., <span style="font-family: DejaVu Sans;">用户仅仅只能选择一个）：</span>

&lt;%= radio_button_tag(:age, "child") %&gt;

&lt;%= label_tag(:age_child, "I am younger than 21") %&gt;

&lt;%= radio_button_tag(:age, "adult") %&gt;

&lt;%= label_tag(:age_adult, "I'm over 21") %&gt;

Output:<span style="font-family: DejaVu Sans;">输出：</span>

&lt;input id="age_child" name="age" type="radio" value="child" /&gt;

&lt;label for="age_child"&gt;I am younger than 21&lt;/label&gt;

&lt;input id="age_adult" name="age" type="radio" value="adult" /&gt;

&lt;label for="age_adult"&gt;I'm over 21&lt;/label&gt;

As with <tt>check_box_tag</tt>, the second parameter to <tt>radio_button_tag</tt> is the value of the input. Because these two radio buttons share the same name (age) the user will only be able to select one, and <tt>params[:age]</tt> will contain either “child” or “adult”.

<span style="font-family: DejaVu Sans;">正如</span><tt>check_box_tag</tt><span style="font-family: DejaVu Sans;"><tt>，</tt><tt></tt></span><tt>radio_button_tag</tt><span style="font-family: DejaVu Sans;"><tt>的第二个参数是</tt></span><tt>input</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>value</tt><span style="font-family: DejaVu Sans;"><tt>。因为这两个</tt></span><tt>radio</tt><tt> </tt><tt>buttons</tt><span style="font-family: DejaVu Sans;"><tt>分享相同的</tt></span><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>（</tt></span><tt>age</tt><span style="font-family: DejaVu Sans;"><tt>）用户仅仅能够选择一个，并且</tt></span><tt>params[:age]</tt><span style="font-family: DejaVu Sans;"><tt>将会包含或者</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></tt></span><tt>child</tt><tt>”</tt><span style="font-family: DejaVu Sans;"><tt>或者</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></tt></span><tt>adult</tt><tt>”</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

Always use labels for checkbox and radio buttons. They associate text with a specific option and make it easier for users to click the inputs by expanding<span style="font-family: DejaVu Sans;">扩大</span>the clickable region.

<span style="font-family: DejaVu Sans;">经常把</span>checkbox<span style="font-family: DejaVu Sans;">或</span>radio button<span style="font-family: DejaVu Sans;">和</span>labels<span style="font-family: DejaVu Sans;">标签一起使用。他们<strong>将文字</strong></span><strong>text</strong><span style="font-family: DejaVu Sans;"><strong>和一个特定的选项管理起来并且通过扩大可点击区域使得用户能够更加容易点击。</strong></span>
<h4><a name="other-helpers-of-interest"></a>1.4 Other Helpers of Interest<span style="font-family: WenQuanYi Micro Hei;">其他有趣的</span>Helpers</h4>
Other form controls worth mentioning are textareas, password fields, hidden fields, search fields, telephone fields, URL fields and email fields:

<span style="font-family: DejaVu Sans;">其他值得一提的</span>form<span style="font-family: DejaVu Sans;">控件是</span>textareas<span style="font-family: DejaVu Sans;">，</span>password<span style="font-family: DejaVu Sans;">，</span>fields<span style="font-family: DejaVu Sans;">，</span>hidden fields<span style="font-family: DejaVu Sans;">，</span>search fields<span style="font-family: DejaVu Sans;">，</span>telephone fields<span style="font-family: DejaVu Sans;">，</span>URL fields<span style="font-family: DejaVu Sans;">和</span>email fields<span style="font-family: DejaVu Sans;">：</span>

other helpers of interest&lt;br /&gt;

&lt;%= label_tag(:message, "content") %&gt;

&lt;%= text_area_tag(:message, "Hi, nice site", :size =&gt; "24x6") %&gt;&lt;br /&gt;

&lt;%= label_tag(:password, "password") %&gt;

&lt;%= password_field_tag(:password) %&gt;&lt;br /&gt;

&nbsp;

&lt;%= hidden_field_tag(:parent_id, "5") %&gt;&lt;br /&gt;

&lt;%= label_tag(:user_name, "search:") %&gt;

&lt;%= search_field(:user, :name) %&gt;&lt;br /&gt;

&lt;%= label_tag(:user_phone, "phone") %&gt;

&lt;%= telephone_field(:user, :phone) %&gt;&lt;br /&gt;

&lt;%= label_tag(:user_homepage, "homepage") %&gt;

&lt;%= url_field(:user, :homepage) %&gt;&lt;br /&gt;

&lt;%= label_tag(:user_address, "address") %&gt;

&lt;%= email_field(:user, :address) %&gt;&lt;br /&gt;

Output:<span style="font-family: DejaVu Sans;">输出：</span>

&lt;label for="message"&gt;content&lt;/label&gt;

&lt;textarea cols="24" id="message" name="message" rows="6"&gt;Hi, nice site&lt;/textarea&gt;&lt;br /&gt;

&lt;label for="password"&gt;password&lt;/label&gt;

&lt;input id="password" name="password" type="password" /&gt;&lt;br /&gt;

&nbsp;

&lt;input id="parent_id" name="parent_id" type="hidden" value="5" /&gt;&lt;br /&gt;

&lt;label for="user_name"&gt;search:&lt;/label&gt;

&lt;input id="user_name" name="user[name]" size="30" type="search" /&gt;&lt;br /&gt;

&lt;label for="user_phone"&gt;phone&lt;/label&gt;

&lt;input id="user_phone" name="user[phone]" size="30" type="tel" /&gt;&lt;br /&gt;

&lt;label for="user_homepage"&gt;homepage&lt;/label&gt;

&lt;input id="user_homepage" name="user[homepage]" size="30" type="url" /&gt;&lt;br /&gt;

&lt;label for="user_address"&gt;address&lt;/label&gt;

&lt;input id="user_address" name="user[address]" size="30" type="email" /&gt;&lt;br /

Hidden inputs are not shown to the user but instead hold data like any textual input. Values inside them can be changed with JavaScript.

Hidden inputs<span style="font-family: DejaVu Sans;">不显示给用户但是它可以</span>hold<span style="font-family: DejaVu Sans;">任何文本形式数据的输入。</span>Hidden<span style="font-family: DejaVu Sans;">里面的值可以用</span>JavaScript<span style="font-family: DejaVu Sans;">改变。</span>

The search, telephone, URL, and email inputs are HTML5 controls. If you require your app to have a consistent experience in older browsers, you will need an HTML5 polyfill (provided by CSS and/or JavaScript). There is definitely <a href="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills"><span style="color: #000080;"><span style="text-decoration: underline;">no</span></span><span style="color: #000080;"><span style="text-decoration: underline;">shortage</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">solutions</span></span><span style="color: #000080;"><span style="text-decoration: underline;">for</span></span><span style="color: #000080;"><span style="text-decoration: underline;">this</span></span></a>, although a couple of popular tools at the moment are <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://www.modernizr.com/">Modernizr</a></span></span> and <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://yepnopejs.com/">yepnope</a></span></span>, which provide a simple way to add functionality based on the presence of detected HTML5 features.

search, telephone, URL, <span style="font-family: DejaVu Sans;">和</span>email inputs<span style="font-family: DejaVu Sans;">是</span>HTML5<span style="font-family: DejaVu Sans;">控件。如果你需要你的</span>app<span style="font-family: DejaVu Sans;">在旧的浏览器上面拥有兼容的体验，你将需要一个</span>HTML5 polyfill<span style="font-family: DejaVu Sans;">（</span>provided by CSS and/or JavaScript<span style="font-family: DejaVu Sans;">）。这里肯定</span><a href="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills"><span style="color: #000080;"><span style="text-decoration: underline;">no</span></span><span style="color: #000080;"><span style="text-decoration: underline;">shortage</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">solutions</span></span><span style="color: #000080;"><span style="text-decoration: underline;">for</span></span><span style="color: #000080;"><span style="text-decoration: underline;">this</span></span></a><span style="font-family: DejaVu Sans;">（没有针对此类问题一致的解决方法），即使现在有了一组广受欢迎的工具是</span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://www.modernizr.com/">Modernizr</a></span></span> and <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://yepnopejs.com/">yepnope</a></span></span><span style="font-family: DejaVu Sans;">，他们提供了一个简单的方法来添加检测</span>HTML5<span style="font-family: DejaVu Sans;">特性功能是否存在。</span>

&nbsp;

If you’re using password input fields (for any purpose), you might want to configure your application to prevent those parameters from being logged. You can learn about this in the <a href="http://guides.rubyonrails.org/security.html#logging"><span style="color: #000080;"><span style="text-decoration: underline;">Security</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Guide</span></span></a>.

<span style="font-family: DejaVu Sans;">如果你正在使用</span>password input fields<span style="font-family: DejaVu Sans;">（无论何种原因），你可能想配置你的应用程序以防止记录这些参数。你可以从</span><a href="http://guides.rubyonrails.org/security.html#logging"><span style="color: #000080;"><span style="text-decoration: underline;">Security</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Guide</span></span></a><span style="font-family: DejaVu Sans;">中了解这些信息。</span>
<h3><a name="dealing-with-model-objects"></a>2 Dealing with Model Objects</h3>
<h4><a name="model-object-helpers"></a>2.1 Model Object Helpers</h4>
A particularly common task for a form is editing or creating a model object. While the <tt>*_tag</tt> helpers can certainly be used for this task they are somewhat verbose as for each tag you would have to ensure the correct parameter name is used and set the default value of the input appropriately. Rails provides helpers tailored to this task. These helpers lack the _tag suffix, for example <tt>text_field</tt>, <tt>text_area</tt>.

form<span style="font-family: DejaVu Sans;">的一个格外普遍的任务是编辑或创建一个</span>model<span style="font-family: DejaVu Sans;">对象。然而，无疑</span><tt>*_tag</tt><tt> </tt><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>能够在这个任务中使用，他们有点繁琐，为每一个标签，你就必须确保使用中的参数名称的正确使用，并设置适当的输入的默认值。</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>为这个任务量身定制了</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>。这些</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>缺少</tt></span><tt>_tag</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>后缀，例如</tt></span><tt>text_field,text_area.</tt>

For these helpers the first argument is the name of an instance variable and the second is the name of a method (usually an attribute) to call on that object. Rails will set the value of the input control to the return value of that method for the object and set an appropriate input name. If your controller has defined <tt>@person</tt> and that person’s name is Henry then a form containing:

<span style="font-family: DejaVu Sans;">对于这些</span>helpers<span style="font-family: DejaVu Sans;">第一个参数是实例变量的</span>name<span style="font-family: DejaVu Sans;">，第二个是方法的名称（通常是一个属性）来调用那个对象。</span>Rails<span style="font-family: DejaVu Sans;">将（传输）</span>input <span style="font-family: DejaVu Sans;">控件的值给该对象的方法的返回值，并设置一个适当的输入名称。如果你的控件</span>name<span style="font-family: DejaVu Sans;">已经被定义为</span><tt>@person</tt><span style="font-family: DejaVu Sans;"><tt>并且</tt><tt></tt></span><tt>person</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>name</tt><tt> </tt><tt>is</tt><tt> </tt><tt>Henry</tt><span style="font-family: DejaVu Sans;"><tt>那么这个</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>包含：</tt></span>

<tt>&lt;%=</tt><tt> </tt><tt>text_field(:person,</tt><tt> </tt><tt>:name)</tt><tt> </tt><tt>%&gt;</tt>

will produce output similar to

&lt;input id="person_name" name="person[name]" type="text" value="Henry"/&gt;

Upon form submission the value entered by the user will be stored in <tt>params[:person][:name]</tt>. The <tt>params[:person]</tt> hash is suitable for passing to <tt>Person.new</tt> or, if <tt>@person</tt> is an instance of Person, <tt>@person.update_attributes</tt>. While the name of an attribute is the most common second parameter to these helpers this is not compulsory. In the example above, as long as person objects have a <tt>name</tt> and a <tt>name=</tt> method Rails will be happy.

<span style="font-family: DejaVu Sans;">在用户输入后，并由</span>form<span style="font-family: DejaVu Sans;">提交的值将会被存储在</span><tt>params[:person][:name]</tt><span style="font-family: DejaVu Sans;"><tt>中。</tt></span><tt>params[:person]</tt><span style="font-family: DejaVu Sans;"><tt>相当于</tt><tt></tt></span><tt>Person.new</tt><span style="font-family: DejaVu Sans;"><tt>，如果</tt></span><tt>@person</tt><span style="font-family: DejaVu Sans;"><tt>是一个</tt></span><tt>Person</tt><span style="font-family: DejaVu Sans;"><tt>的实例，则相当于</tt><tt></tt></span><tt>@person.update_attributes</tt><span style="font-family: DejaVu Sans;"><tt>。虽然这些</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>的属性名称最常见的是第二个参数，但这不是强制性的。在例子中，只要</tt></span><tt>Person</tt><span style="font-family: DejaVu Sans;"><tt>对象有一个名称和一个</tt></span><tt>name=method</tt><span style="font-family: DejaVu Sans;"><tt>那么</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>会很乐意。</tt></span>

You must pass the name of an instance variable, i.e. <tt>:person</tt> or <tt>"person"</tt>, not an actual instance of your model object.<span style="font-family: DejaVu Sans;">你必须提供一个实例变量的名称，</span>i.e. <tt>:person</tt> or <tt>"person"</tt><span style="font-family: DejaVu Sans;"><tt>，不是一个你</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>对象中实际的实例。</tt></span>

<strong>Rails</strong><strong> </strong><strong>provides</strong><strong> </strong><strong>helpers</strong><strong> </strong><strong>for</strong><strong> </strong><strong>displaying</strong><strong> </strong><strong>the</strong><strong> </strong><strong>validation</strong><strong> </strong><strong>errors</strong><strong> </strong><strong>associated</strong><strong> </strong><strong>with</strong><strong> </strong><strong>a</strong><strong> </strong><strong>model</strong><strong> </strong><strong>object.</strong><strong> </strong><strong>These</strong><strong> </strong><strong>are</strong><strong> </strong><strong>covered</strong><strong> </strong><strong>in</strong><strong> </strong><strong>detail</strong><strong> </strong><strong>by</strong><strong> </strong><strong>the</strong><strong> </strong><a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html#displaying-validation-errors-in-the-view"><span style="color: #000080;"><span style="text-decoration: underline;"><strong>Active</strong></span></span><span style="color: #000080;"><span style="text-decoration: underline;"><strong>Record</strong></span></span><span style="color: #000080;"><span style="text-decoration: underline;"><strong>Validations</strong></span></span><span style="color: #000080;"><span style="text-decoration: underline;"><strong>and</strong></span></span><span style="color: #000080;"><span style="text-decoration: underline;"><strong>Callbacks</strong></span></span></a><strong> </strong><strong>guide.</strong>
<h4><a name="binding-a-form-to-an-object"></a>2.2 Binding a Form to an Object<span style="font-family: WenQuanYi Micro Hei;">将</span>form<span style="font-family: WenQuanYi Micro Hei;">和</span>Object<span style="font-family: WenQuanYi Micro Hei;">绑定</span></h4>
While this is an increase in comfort it is far from perfect. If Person has many attributes to edit then we would be repeating the name of the edited object many times. What we want to do is somehow bind a form to a model object, which is exactly what <tt>form_for</tt> does.

<span style="font-family: DejaVu Sans;">虽然添加的这些功能让我们（在使用中）感到舒适但离完美远远不够。如果</span>Person<span style="font-family: DejaVu Sans;">拥有多个属性需要编辑然后我们将会重复被编辑</span>object<span style="font-family: DejaVu Sans;">的</span>name<span style="font-family: DejaVu Sans;">很多次。我们想要（</span>Rails<span style="font-family: DejaVu Sans;">）做的是以某种方式将</span>model object<span style="font-family: DejaVu Sans;">和</span>form<span style="font-family: DejaVu Sans;">绑定，这也恰好是</span><tt>form_for</tt><span style="font-family: DejaVu Sans;"><tt>要做的。</tt></span>

Assume we have a controller for dealing with articles <tt>app/controllers/articles_controller.rb</tt>:

<span style="font-family: DejaVu Sans;"><tt>假设我们有一个</tt></span><tt>controller(app/controllers/articles_controller.rb)</tt><span style="font-family: DejaVu Sans;"><tt>来处理</tt></span><tt>articles:</tt>

def new

@article = Article.new

end

The corresponding view <tt>app/views/articles/new.html.erb</tt> using <tt>form_for</tt> looks like this:

&lt;%= form_for @article, :url =&gt; { :action =&gt; "create" }, :html =&gt; {:class =&gt; "nifty_form"} do |f| %&gt;

&lt;%= f.text_field :title %&gt;

&lt;%= f.text_area :body, :size =&gt; "60x12" %&gt;

&lt;%= f.submit "Create" %&gt;

&lt;% end %&gt;

There are a few things to note here:<span style="font-family: DejaVu Sans;">这里对其做的事情备注如下：</span>
<ol>
	<li><tt>@article</tt> is the actual object being edited. <tt>@article</tt><span style="font-family: DejaVu Sans;"><tt>是实际上被编辑的</tt></span><tt>object</tt></li>
	<li>There is a single hash of options. Routing options are passed in the <tt>:url</tt> hash, HTML options are passed in the <tt>:html</tt> hash. <span style="font-family: DejaVu Sans;">这里是一个单个</span>hash<span style="font-family: DejaVu Sans;">字典的选项。</span>Routing<span style="font-family: DejaVu Sans;">选项通过</span>:url hash<span style="font-family: DejaVu Sans;">键对提供，</span>HTML<span style="font-family: DejaVu Sans;">选项通过</span>:html hash<span style="font-family: DejaVu Sans;">键对提供</span></li>
	<li>The <tt>form_for</tt> method yields a <strong>form</strong><strong> </strong><strong>builder</strong> object (the <tt>f</tt> variable).</li>
	<li>Methods to create form controls are called <strong>on</strong> the form builder object <tt>f</tt><span style="font-family: DejaVu Sans;"><tt>创建</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>控件的方法是通过调用</tt></span><tt>object</tt><tt> </tt><tt>f</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>form</tt><tt> </tt><tt>builder</tt></li>
</ol>
The resulting HTML is:

&lt;form accept-charset="UTF-8" action="/articles/create" method="post" class="nifty_form"&gt;

&lt;input id="article_title" name="article[title]" size="30" type="text" /&gt;

&lt;textarea id="article_body" name="article[body]" cols="60" rows="12"&gt;&lt;/textarea&gt;

&lt;input name="commit" type="submit" value="Create" /&gt;

&lt;/form&gt;

The name passed to <tt>form_for</tt> controls the key used in <tt>params</tt> to access the form’s values. Here the name is <tt>article</tt> and so all the inputs have names of the form <tt>article[</tt><em>attribute_name</em><tt>]</tt>. Accordingly, in the <tt>create</tt> action <tt>params[:article]</tt> will be a hash with keys <tt>:title</tt> and <tt>:body</tt>. You can read more about the significance of input names in the parameter_names section.

<span style="font-family: DejaVu Sans;">通过</span><tt>form_for</tt><span style="font-family: DejaVu Sans;"><tt>控件的</tt></span><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>以及</tt></span><tt>parmas</tt><span style="font-family: DejaVu Sans;"><tt>使用的关键字来接收</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>的值。这里的</tt></span><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>是</tt></span><tt>article</tt><span style="font-family: DejaVu Sans;"><tt>并且</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>所有的</tt></span><tt>inputs</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>都是</tt><tt></tt></span><tt>article[</tt><em>attribute_name</em><tt>]</tt><span style="font-family: DejaVu Sans;"><tt>。因此，在</tt></span><tt>create</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>中</tt><tt></tt></span><tt>params[:article]</tt><span style="font-family: DejaVu Sans;"><tt>将会有关键字</tt></span><tt>:title</tt><tt> </tt><tt>and</tt><tt> </tt><tt>:body</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt><strong>键值</strong></tt><tt>。你可以阅读更多的</tt></span><tt>input</tt><tt> </tt><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>的含义在</tt><tt></tt></span><tt>parameter_names</tt><span style="font-family: DejaVu Sans;"><tt>章节。</tt></span>

The helper methods called on the form builder are identical<span style="font-family: DejaVu Sans;">相同一致</span>to the model object helpers except that it is not necessary to specify which object is being edited since this is already managed by the form builder.

<span style="font-family: DejaVu Sans;">这个调用</span>form builder<span style="font-family: DejaVu Sans;">的</span>helper<span style="font-family: DejaVu Sans;">方法除了不需要指定那个</span>object<span style="font-family: DejaVu Sans;">被编辑既然这已经交给</span>form builder<span style="font-family: DejaVu Sans;">管理，其他部分与</span>model object helpers<span style="font-family: DejaVu Sans;">一致。</span>

You can create a similar binding without actually creating <tt>&lt;form&gt;</tt> tags with the <tt>fields_for</tt> helper. This is useful for editing additional model objects with the same form. For example if you had a Person model with an associated ContactDetail model you could create a form for creating both like so:

<span style="font-family: DejaVu Sans;">你可以创建一个类似的</span>tags<span style="font-family: DejaVu Sans;">组合却没有真正的使用</span>fields_for helper<span style="font-family: DejaVu Sans;">创建</span>&lt;form&gt; tags<span style="font-family: DejaVu Sans;">。这在使用相同的</span>form<span style="font-family: DejaVu Sans;">编辑额外的对象的时候非常有用。例如如果你有一个</span>Person model<span style="font-family: DejaVu Sans;">以及相关联的</span>ContactDetail model<span style="font-family: DejaVu Sans;">你可以创建一个</span>form<span style="font-family: DejaVu Sans;">来创建他们两个如下：</span>

&lt;%= form_for @person, :url =&gt; { :action =&gt; "create" } do |person_form| %&gt;

&lt;%= person_form.text_field :name %&gt;

&lt;%= fields_for @person.contact_detail do |contact_details_form| %&gt;

&lt;%= contact_details_form.text_field :phone_number %&gt;

&lt;% end %&gt;

&lt;% end %&gt;

which produces the following output:

&lt;form accept-charset="UTF-8" action="/people/create" id="new_person" method="post"&gt;

&lt;input id="person_name" name="person[name]" size="30" type="text" /&gt;

&lt;input id="contact_detail_phone_number" name="contact_detail[phone_number]" size="30" type="text" /&gt;

&lt;/form&gt;

The object yielded by <tt>fields_for</tt> is a form builder like the one yielded by <tt>form_for</tt> (in fact <tt>form_for</tt> calls <tt>fields_for</tt> internally<span style="font-family: DejaVu Sans;">（在内部调用</span><tt>fields_for</tt><span style="font-family: DejaVu Sans;">）</span>).
<h4><a name="relying-on-record-identification"></a>2.3 Relying on Record Identification<span style="font-family: WenQuanYi Micro Hei;">依托于记录的识别</span></h4>
The Article model is directly available to users of the application, so — following the best practices for developing with Rails — you should declare it <strong>a</strong><strong> </strong><strong>resource</strong>:

Article<span style="font-family: DejaVu Sans;">模型是应用程序用户直接可用的，因此<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>遵循</span>Rails<span style="font-family: DejaVu Sans;">开发最好的实践<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>你应该声明它为一个</span><strong>resource</strong>:

resources :articles

Declaring a resource has a number of side-effects<span style="font-family: DejaVu Sans;">（官网上是</span>side-affects<span style="font-family: DejaVu Sans;">错别字？）</span>. See <a href="http://guides.rubyonrails.org/routing.html#resource-routing-the-rails-default"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Routing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">From</span></span><span style="color: #000080;"><span style="text-decoration: underline;">the</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Outside</span></span><span style="color: #000080;"><span style="text-decoration: underline;">In</span></span></a> for more information on setting up and using resources.

<span style="font-family: DejaVu Sans;">声明一个</span>resource<span style="font-family: DejaVu Sans;">会有一系列的副作用。查看</span><a href="http://guides.rubyonrails.org/routing.html#resource-routing-the-rails-default"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Routing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">From</span></span><span style="color: #000080;"><span style="text-decoration: underline;">the</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Outside</span></span><span style="color: #000080;"><span style="text-decoration: underline;">In</span></span></a><span style="font-family: DejaVu Sans;">来获取在设定和使用</span>resource<span style="font-family: DejaVu Sans;">的更多信息。</span>

When dealing with RESTful resources, calls to <tt>form_for</tt> can get significantly easier if you rely on <strong>record</strong><strong> </strong><strong>identification</strong>. In short, you can just pass the model instance and have Rails figure out model name and the rest:

<span style="font-family: DejaVu Sans;">当在处理</span>RESTful resources<span style="font-family: DejaVu Sans;">的时候，调用</span><tt>form_for</tt><span style="font-family: DejaVu Sans;"><tt>会明显简单的多如果你</tt></span><tt>rely</tt><tt> </tt><tt>on</tt><tt> </tt><strong>record</strong><strong> </strong><strong>identification</strong><span style="font-family: DejaVu Sans;"><tt>。简而言之，你可以仅仅通过</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>实例和</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>来</tt></span><tt>figure</tt><tt> </tt><tt>out</tt><span style="font-family: DejaVu Sans;"><tt>（谋取）</tt></span><tt>model</tt><tt> </tt><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>或者重设它：</tt></span>

<tt>##</tt><tt> </tt><tt>Creating</tt><tt> </tt><tt>a</tt><tt> </tt><tt>new</tt><tt> </tt><tt>article</tt>

<tt>#</tt><tt> </tt><tt>long-style:</tt>

<tt>form_for(@article,</tt><tt> </tt><tt>:url</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>articles_path)</tt>

<tt>#</tt><tt> </tt><tt>same</tt><tt> </tt><tt>thing,</tt><tt> </tt><tt>short-style</tt><tt> </tt><tt>(record</tt><tt> </tt><tt>identification</tt><tt> </tt><tt>gets</tt><tt> </tt><tt>used):</tt>

<tt>form_for(@article)</tt>

&nbsp;

<tt>##</tt><tt> </tt><tt>Editing</tt><tt> </tt><tt>an</tt><tt> </tt><tt>existing</tt><tt> </tt><tt>article</tt>

<tt>#</tt><tt> </tt><tt>long-style:</tt>

<tt>form_for(@article,</tt><tt> </tt><tt>:url</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>article_path(@article),</tt><tt> </tt><tt>:html</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>{</tt><tt> </tt><tt>:method</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>"put"</tt><tt> </tt><tt>})</tt>

<tt>#</tt><tt> </tt><tt>short-style:</tt>

<tt>form_for(@article)</tt>

<tt>Notice</tt><tt> </tt><tt>how</tt><tt> </tt><tt>the</tt><tt> </tt><tt>short-style</tt><tt> </tt><tt>form_for</tt><tt> </tt><tt>invocation</tt><tt> </tt><tt>is</tt><tt> </tt><tt>conveniently</tt><tt> </tt><tt>the</tt><tt> </tt><tt>same,</tt><tt> </tt><tt>regardless</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>record</tt><tt> </tt><tt>being</tt><tt> </tt><tt>new</tt><tt> </tt><tt>or</tt><tt> </tt><tt>existing.</tt><tt> </tt><tt>Record</tt><tt> </tt><tt>identification</tt><tt> </tt><tt>is</tt><tt> </tt><tt>smart</tt><tt> </tt><tt>enough</tt><tt> </tt><tt>to</tt><tt> </tt><tt>figure</tt><tt> </tt><tt>out</tt><tt> </tt><tt>if</tt><tt> </tt><tt>the</tt><tt> </tt><tt>record</tt><tt> </tt><tt>is</tt><tt> </tt><tt>new</tt><tt> </tt><tt>by</tt><tt> </tt><tt>asking</tt><tt> </tt><tt>record.new_record?.</tt><tt> </tt><tt>It</tt><tt> </tt><tt>also</tt><tt> </tt><tt>selects</tt><tt> </tt><tt>the</tt><tt> </tt><tt>correct</tt><tt> </tt><tt>path</tt><tt> </tt><tt>to</tt><tt> </tt><tt>submit</tt><tt> </tt><tt>to</tt><tt> </tt><tt>and</tt><tt> </tt><tt>the</tt><tt> </tt><tt>name</tt><tt> </tt><tt>based</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>class</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>object.</tt>

<span style="font-family: DejaVu Sans;"><tt>注意</tt></span><tt>short-style</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>form_for</tt><span style="font-family: DejaVu Sans;"><tt>的调用相对如此的方便，无论这个记录是刚开始还是已经存在了。</tt><tt></tt></span><tt>Record</tt><tt> </tt><tt>identification</tt><span style="font-family: DejaVu Sans;"><tt>能够智能识别如果记录是否是</tt></span><tt>new</tt><span style="font-family: DejaVu Sans;"><tt>通过询问</tt></span><tt>record.new_record?</tt><span style="font-family: DejaVu Sans;"><tt>。它也选择正确的提交路径并且它的</tt></span><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>基于</tt></span><tt>object</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>class</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

<tt>Rails</tt><tt> </tt><tt>will</tt><tt> </tt><tt>also</tt><tt> </tt><tt>automatically</tt><tt> </tt><tt>set</tt><tt> </tt><tt>the</tt><tt> </tt><tt>class</tt><tt> </tt><tt>and</tt><tt> </tt><tt>id</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>appropriately:</tt><tt> </tt><tt>a</tt><tt> </tt><tt>form</tt><tt> </tt><tt>creating</tt><tt> </tt><tt>an</tt><tt> </tt><tt>article</tt><tt> </tt><tt>would</tt><tt> </tt><tt>have</tt><tt> </tt><tt>id</tt><tt> </tt><tt>and</tt><tt> </tt><tt>class</tt><tt> </tt><tt>new_article.</tt><tt> </tt><tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>were</tt><tt> </tt><tt>editing</tt><tt> </tt><tt>the</tt><tt> </tt><tt>article</tt><tt> </tt><tt>with</tt><tt> </tt><tt>id</tt><tt> </tt><tt>23,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>class</tt><tt> </tt><tt>would</tt><tt> </tt><tt>be</tt><tt> </tt><tt>set</tt><tt> </tt><tt>to</tt><tt> </tt><tt>edit_article</tt><tt> </tt><tt>and</tt><tt> </tt><tt>the</tt><tt> </tt><tt>id</tt><tt> </tt><tt>to</tt><tt> </tt><tt>edit_article_23.</tt><tt> </tt><tt>These</tt><tt> </tt><tt>attributes</tt><tt> </tt><tt>will</tt><tt> </tt><tt>be</tt><tt> </tt><tt>omitted</tt><span style="font-family: DejaVu Sans;"><tt>省略</tt><tt></tt></span><tt>for</tt><tt> </tt><tt>brevity</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>rest</tt><tt> </tt><tt>of</tt><tt> </tt><tt>this</tt><tt> </tt><tt>guide.</tt>

<tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>也会适当的自动的设置</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>（元素）的</tt></span><tt>class</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>id</tt><span style="font-family: DejaVu Sans;"><tt>：一个（用于）创建一个</tt></span><tt>article</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>fom</tt><span style="font-family: DejaVu Sans;"><tt>将会拥有</tt></span><tt>id</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>classnew_article</tt><span style="font-family: DejaVu Sans;"><tt>。如果你在正编辑</tt></span><tt>id</tt><span style="font-family: DejaVu Sans;"><tt>为</tt></span><tt>23</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>article</tt><span style="font-family: DejaVu Sans;"><tt>，它的</tt></span><tt>class</tt><span style="font-family: DejaVu Sans;"><tt>属性将会被设置为</tt></span><tt>edit_article</tt><span style="font-family: DejaVu Sans;"><tt>并且</tt></span><tt>id</tt><span style="font-family: DejaVu Sans;"><tt>为</tt></span><tt>edit_article_23</tt><span style="font-family: DejaVu Sans;"><tt>。为了教程的简洁，这些属性将会被部分忽略。</tt></span>

When you’re using STI (single-table inheritance) with your models, you can’t rely on record identification on a subclass if only their parent class is declared a resource. You will have to specify the model name, :url, and :method explicitly.

当你正在你的model中使用STI（single-table inheritance），你不能在一个子类中使用 rely on record identification除非他的父类被声明为一个resource。（那么）你将不得不准确的指定model name，:url,:method。
<h5><a name="dealing-with-namespaces"></a><tt>2.3.1</tt><tt> </tt><tt>Dealing</tt><tt> </tt><tt>with</tt><tt> </tt><tt>Namespaces</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>使用名称空间处理（业务）</tt></span></h5>
If you have created namespaced routes, <tt>form_for</tt> has a nifty shorthand for that too. If your application has an admin namespace then

<span style="font-family: DejaVu Sans;"><tt>如果你已经创建一个</tt></span><tt>namespaced</tt><tt> </tt><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>form_for</tt><span style="font-family: DejaVu Sans;"><tt>拥有一个可爱的快捷操作来做这些。如果你的应用程序拥有一个</tt></span><tt>admin</tt><tt> </tt><tt>namespace</tt><span style="font-family: DejaVu Sans;"><tt>然后</tt></span>

<tt>form_for</tt><tt> </tt><tt>[:admin,</tt><tt> </tt><tt>@article]</tt>

<tt>will</tt><tt> </tt><tt>create</tt><tt> </tt><tt>a</tt><tt> </tt><tt>form</tt><tt> </tt><tt>that</tt><tt> </tt><tt>submits</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>articles</tt><tt> </tt><tt>controller</tt><tt> </tt><tt>inside</tt><tt> </tt><tt>the</tt><tt> </tt><tt>admin</tt><tt> </tt><tt>namespace</tt><tt> </tt><tt>(submitting</tt><tt> </tt><tt>to</tt><tt> </tt><tt>admin_article_path(@article)</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>case</tt><tt> </tt><tt>of</tt><tt> </tt><tt>an</tt><tt> </tt><tt>update).</tt><tt> </tt><tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>have</tt><tt> </tt><tt>several</tt><tt> </tt><tt>levels</tt><tt> </tt><tt>of</tt><tt> </tt><tt>namespacing</tt><tt> </tt><tt>then</tt><tt> </tt><tt>the</tt><tt> </tt><tt>syntax</tt><tt> </tt><tt>is</tt><tt> </tt><tt>similar:</tt>

<span style="font-family: DejaVu Sans;"><tt>将会创建一个</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>它会提交（信息）到在</tt></span><tt>admin</tt><tt> </tt><tt>namespace</tt><span style="font-family: DejaVu Sans;"><tt>（比如在</tt></span><tt>update</tt><span style="font-family: DejaVu Sans;"><tt>情况下会提交到</tt><tt></tt></span><tt>admin_article_path(@article)</tt><span style="font-family: DejaVu Sans;"><tt>）中的</tt></span><tt>articles</tt><tt> </tt><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>。如果你有一系列等级的</tt></span><tt>name</tt><tt> </tt><tt>spacing</tt><span style="font-family: DejaVu Sans;"><tt>然后将会有语法智能（处理他们）：</tt></span>

<tt>form_for</tt><tt> </tt><tt>[:admin,</tt><tt> </tt><tt>:management,</tt><tt> </tt><tt>@article]</tt>

<tt>For</tt><tt> </tt><tt>more</tt><tt> </tt><tt>information</tt><tt> </tt><tt>on</tt><tt> </tt><tt>Rails</tt><tt>’ </tt><tt>routing</tt><tt> </tt><tt>system</tt><tt> </tt><tt>and</tt><tt> </tt><tt>the</tt><tt> </tt><tt>associated</tt><tt> </tt><tt>conventions,</tt><tt> </tt><tt>please</tt><tt> </tt><tt>see</tt><tt> </tt><tt>the</tt><tt> </tt><a href="http://guides.rubyonrails.org/routing.html"><span style="color: #000080;"><span style="text-decoration: underline;">routing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">guide</span></span></a><tt>.</tt>

<span style="font-family: DejaVu Sans;"><tt>得到更多的关于</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>routing</tt><span style="font-family: DejaVu Sans;"><tt>和关联约定，请阅读</tt><tt></tt></span><a href="http://guides.rubyonrails.org/routing.html"><span style="color: #000080;"><span style="text-decoration: underline;">routing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">guide</span></span></a><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h4><a name="how-do-forms-with-put-or-delete-methods-"></a> 2.4 How do forms with PUT or DELETE methods work?<span style="font-family: WenQuanYi Micro Hei;">表单的</span>PUT<span style="font-family: WenQuanYi Micro Hei;">或者</span>DELETE<span style="font-family: WenQuanYi Micro Hei;">方法是如何工作的</span></h4>
The Rails framework encourages RESTful design of your applications, which means you’ll be making a lot of “PUT” and “DELETE” requests (besides “GET” and “POST”). However, most browsers <em>don</em><em>’</em><em>t</em><em> </em><em>support</em> methods other than “GET” and “POST” when it comes to submitting forms.

Rails<span style="font-family: DejaVu Sans;">框架鼓励在你的应用程序中使用</span>RESTful<span style="font-family: DejaVu Sans;">风格设计，意思是你将会产生许多<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>PUT”<span style="font-family: DejaVu Sans;">和<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>DELETE”<span style="font-family: DejaVu Sans;">请求（在<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>GET”AND“POST”<span style="font-family: DejaVu Sans;">之后）。然而，大多数的浏览器在提交表单的时候并不支持超过<span style="font-family: Liberation Serif,Times New Roman,serif;">”</span></span>GET”AND”POST”<span style="font-family: DejaVu Sans;">之外的方法。</span>

Rails works around this issue by emulating<span style="font-family: DejaVu Sans;">模拟</span>other methods over POST with a hidden input named <tt>"_method"</tt>, which is set to reflect the desired method:

Rails<span style="font-family: DejaVu Sans;">围绕这个问题通过在</span>POST<span style="font-family: DejaVu Sans;">之外添加一个隐藏的（命名为</span><tt>"_method"</tt><span style="font-family: DejaVu Sans;">）</span>input<span style="font-family: DejaVu Sans;">标签来模拟其他的方法，这个</span>input<span style="font-family: DejaVu Sans;">标签被用来呈现所需的方法：</span>

form_tag(search_path, :method =&gt; "put")

output:

&lt;form accept-charset="UTF-8" action="/search" method="post"&gt;

&lt;div style="margin:0;padding:0"&gt;

&lt;input name="_method" type="hidden" value="put" /&gt;

&lt;input name="utf8" type="hidden" value="&amp;#x2713;" /&gt;

&lt;input name="authenticity_token" type="hidden" value="f755bb0ed134b76c432144748a6d4b7a7ddf2b71" /&gt;

&lt;/div&gt;

...

When parsing POSTed data, Rails will take into account the special <tt>_method</tt> parameter and acts as if the HTTP method was the one specified inside it (“PUT” in this example).

<span style="font-family: DejaVu Sans;">当解析</span>POSTed<span style="font-family: DejaVu Sans;">数据的时候，</span>Rails<span style="font-family: DejaVu Sans;">将会出进入指定的</span><tt>_method</tt><span style="font-family: DejaVu Sans;"><tt>参数并且如果有一个</tt></span><tt>HTTP</tt><span style="font-family: DejaVu Sans;"><tt>方法在里面被指定了（本例中是</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">”</span></tt></span><tt>PUT</tt><tt>”</tt><span style="font-family: DejaVu Sans;"><tt>）。</tt></span>
<h3><a name="making-select-boxes-with-ease"></a>3 Making Select Boxes with Ease<span style="font-family: WenQuanYi Micro Hei;">使用容易（的方式）来生成</span>Select Boxes</h3>
Select boxes in HTML require a significant<span style="font-family: DejaVu Sans;">（明显）</span>amount of markup (one <tt>OPTION</tt> element for each option to choose from), therefore it makes the most sense for them to be dynamically generated.

Select boxes<span style="font-family: DejaVu Sans;">在</span>HTML<span style="font-family: DejaVu Sans;">需要标明</span>markup<span style="font-family: DejaVu Sans;">的数量</span>(<span style="font-family: DejaVu Sans;">一个</span>OPTION<span style="font-family: DejaVu Sans;">元素对应需要选择的每一个选项</span>)<span style="font-family: DejaVu Sans;">，因此对于他们的动态生成这是有意义的。</span>

Here is what the markup might look like:<span style="font-family: DejaVu Sans;">这里是</span>markup<span style="font-family: DejaVu Sans;">可能的样子：</span>

&lt;select name="city_id" id="city_id"&gt;

&lt;option value="1"&gt;Lisbon&lt;/option&gt;

&lt;option value="2"&gt;Madrid&lt;/option&gt;

...

&lt;option value="12"&gt;Berlin&lt;/option&gt;

&lt;/select&gt;

Here you have a list of cities whose names are presented to the user. Internally the application only wants to handle their IDs so they are used as the options’ value attribute. Let’s see how Rails can help out here.

<span style="font-family: DejaVu Sans;">这里你有一个城市的列表这个列表的名字被呈现给用户。在应用程序的内部只希望处理它们的</span>IDs<span style="font-family: DejaVu Sans;">因此它们通过</span>option‘s<span style="font-family: DejaVu Sans;">的</span>value<span style="font-family: DejaVu Sans;">属性来使用。让我们看看</span>Rails<span style="font-family: DejaVu Sans;">是如何帮助输出这里的代码的。</span>
<h4><a name="the-select-and-option-tags"></a>3.1 The Select and Option Tags Select<span style="font-family: WenQuanYi Micro Hei;">和</span>Option<span style="font-family: WenQuanYi Micro Hei;">标签</span></h4>
The most generic helper is <tt>select_tag</tt>, which — as the name implies — simply generates the <tt>SELECT</tt> tag that encapsulates an options string:

<span style="font-family: DejaVu Sans;">最常见的生成器</span>helper<span style="font-family: DejaVu Sans;">是</span><tt>select_tag</tt><span style="font-family: DejaVu Sans;"><tt>，它</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">——</span></tt><tt>就像名字的意思</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">——</span></tt><tt>简单的生成</tt></span><tt>SELECT</tt><span style="font-family: DejaVu Sans;"><tt>标签在其中封装一个选项字符串：</tt></span>

<tt>&lt;%=</tt><tt> </tt><tt>select_tag(:city_id,</tt><tt> </tt><tt>'&lt;option</tt><tt> </tt><tt>value="1"&gt;Lisbon&lt;/option&gt;...')</tt><tt> </tt><tt>%&gt;</tt>

This is a start, but it doesn’t dynamically create the option tags. You can generate option tags with the <tt>options_for_select</tt> helper:

<span style="font-family: DejaVu Sans;">这是开始，但是它不会动态创建</span>option<span style="font-family: DejaVu Sans;">标签。你可以在</span><tt>options_for_select</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>中</tt>创建</span>option<span style="font-family: DejaVu Sans;">标签：</span>

&lt;%= options_for_select([['Lisbon', 1], ['Madrid', 2], ...]) %&gt;

&nbsp;

output:

&nbsp;

&lt;option value="1"&gt;Lisbon&lt;/option&gt;

&lt;option value="2"&gt;Madrid&lt;/option&gt;

...

The first argument to <tt>options_for_select</tt> is a nested array where each element has two elements: option text (city name) and option value (city id). The option value is what will be submitted to your controller. Often this will be the id of a corresponding database object but this does not have to be the case.

<tt>options_for_select</tt><span style="font-family: DejaVu Sans;"><tt>的第一个参数是一个嵌套数组它的的每一个元素有两个元素：</tt></span><tt>option</tt><tt> </tt><tt>text</tt><span style="font-family: DejaVu Sans;"><tt>（</tt></span><tt>city</tt><tt> </tt><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>）和</tt></span><tt>option</tt><tt> </tt><tt>value</tt><span style="font-family: DejaVu Sans;"><tt>（</tt></span><tt>city</tt><tt> </tt><tt>id</tt><span style="font-family: DejaVu Sans;"><tt>）。这里的</tt></span><tt>option</tt><tt> </tt><tt>value</tt><span style="font-family: DejaVu Sans;"><tt>将会被提交到你的</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>中。通常这里会有</tt></span><tt>id</tt><span style="font-family: DejaVu Sans;"><tt>和其相应的数据库对象但是并不完全是这样。</tt></span>

<tt>Knowing</tt><tt> </tt><tt>this,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>combine</tt><tt> </tt><tt>select_tag</tt><tt> </tt><tt>and</tt><tt> </tt><tt>options_for_select</tt><tt> </tt><tt>to</tt><tt> </tt><tt>achieve</tt><tt> </tt><tt>the</tt><tt> </tt><tt>desired,</tt><tt> </tt><tt>complete</tt><tt> </tt><tt>markup:</tt>

<span style="font-family: DejaVu Sans;">知道这些，你可结合</span><tt>select_tag</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>options_for_select</tt><span style="font-family: DejaVu Sans;"><tt>到达预期的（目标），完成</tt></span><tt>markup</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

<tt>&lt;%=</tt><tt> </tt><tt>select_tag(:city_id,</tt><tt> </tt><tt>options_for_select(...))</tt><tt> </tt><tt>%&gt;</tt>

<tt>options_for_select</tt> allows you to pre-select an option by passing its value.

<tt>options_for_select</tt><span style="font-family: DejaVu Sans;"><tt>允许你预选择一个选项通过它的值。</tt></span>

<tt>&lt;%=</tt><tt> </tt><tt>options_for_select([['Lisbon',</tt><tt> </tt><tt>1],</tt><tt> </tt><tt>['Madrid',</tt><tt> </tt><tt>2],</tt><tt> </tt><tt>...],</tt><tt> </tt><tt>2)</tt><tt> </tt><tt>%&gt;</tt>

&nbsp;

<tt>output:</tt>

&nbsp;

<tt>&lt;option</tt><tt> </tt><tt>value="1"&gt;Lisbon&lt;/option&gt;</tt>

<tt>&lt;option</tt><tt> </tt><tt>value="2"</tt><tt> </tt><tt>selected="selected"&gt;Madrid&lt;/option&gt;</tt>

<tt>...</tt>

bellow is my code in templates<span style="font-family: DejaVu Sans;">：</span>

&lt;!--it not work--&gt;

&nbsp;

&lt;%= select_tag(:city_id, '&lt;option value="1"&gt;Lisbon&lt;/option&gt;&lt;option value="2"&gt;Madrid&lt;/option&gt;') %&gt;

&nbsp;

&lt;%= options_for_select([['Lisbon', 1], ['Madrid', 2] ], 2)%&gt;

&nbsp;

&nbsp;

&nbsp;

combine select_tag and options_for_select combine select_tag and options_for_select:&lt;br /&gt;

&nbsp;

&lt;%= select_tag(:city_id, options_for_select([['Lisbon', 1], ['Madrid', 2] ], 2)) %&gt;

&nbsp;

Whenever Rails sees that the internal value of an option being generated matches this value, it will add the <tt>selected</tt> attribute to that option.

<span style="font-family: DejaVu Sans;">无论何时</span>Rails<span style="font-family: DejaVu Sans;">发现开始创建的</span>option tag<span style="font-family: DejaVu Sans;">的值匹配</span>option<span style="font-family: DejaVu Sans;">内部的值（设定的默认选中的值），</span>

<span style="font-family: DejaVu Sans;">，将会添加</span>selected<span style="font-family: DejaVu Sans;">属性到这个选项。</span>

The second argument to <tt>options_for_select</tt> must be exactly equal to the desired internal value. In particular if the value is the integer 2 you cannot pass “2” to <tt>options_for_select</tt> — you must pass 2. Be aware of values extracted from the <tt>params</tt> hash as they are all strings.

<tt>options_for_select</tt><span style="font-family: DejaVu Sans;"><tt>的第二个参数必须准确等于预期的内部的值。特别是如果这个值是整数</tt></span><tt>2</tt><span style="font-family: DejaVu Sans;"><tt>你不能传送</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></tt></span><tt>2</tt><tt>”</tt><span style="font-family: DejaVu Sans;"><tt>给</tt><tt></tt></span><tt>options_for_select</tt><tt>——</tt><span style="font-family: DejaVu Sans;"><tt>你必须传送</tt></span><tt>2</tt><span style="font-family: DejaVu Sans;"><tt>。在这个值来自</tt></span><tt>params</tt><tt> </tt><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>的时候你必须保持清醒因为它们全都是</tt></span><tt>strings</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h4><a name="select-boxes-for-dealing-with-models"></a> <tt>3.2</tt><tt> </tt><tt>Select</tt><tt> </tt><tt>Boxes</tt><tt> </tt><tt>for</tt><tt> </tt><tt>Dealing</tt><tt> </tt><tt>with</tt><tt> </tt><tt>Models</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>使用</tt></span><tt>Select</tt><tt> </tt><tt>Boxes</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>来处理</tt></span><tt>Models#</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>外键的</tt></span><tt>select</tt><tt> </tt><tt>boxes</tt></h4>
In most cases form controls will be tied to a specific database model and as you might expect Rails provides helpers tailored for that purpose. Consistent with other form helpers, when dealing with models you drop the <tt>_tag</tt> suffix from <tt>select_tag</tt>:

<span style="font-family: DejaVu Sans;"><tt>在大多数情况中</tt></span><tt>form</tt><tt> </tt><tt>controls</tt><span style="font-family: DejaVu Sans;"><tt>将会被捆绑到一个指定的数据库</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>并且正如你可能期望</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>为捆绑的这个</tt></span><tt>models</tt><span style="font-family: DejaVu Sans;"><tt>提供量身定制的</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>。与其他</tt></span><tt>form</tt><tt> </tt><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>一致的，当在处理</tt></span><tt>models</tt><span style="font-family: DejaVu Sans;"><tt>的时候你从</tt></span><tt>select_tag</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>抛弃</tt></span><tt>_tag</tt><span style="font-family: DejaVu Sans;"><tt>后缀。</tt></span>

# controller:

@person = Person.new(:city_id =&gt; 2)

# view:

&lt;%= select(:person, :city_id, [['Lisbon', 1], ['Madrid', 2], ...]) %&gt;

Notice that the third parameter, the options array, is the same kind of argument you pass to <tt>options_for_select</tt>. One advantage here is that you don’t have to worry about pre-selecting the correct city if the user already has one — Rails will do this for you by reading from the <tt>@person.city_id</tt> attribute.

<span style="font-family: DejaVu Sans;">注意上面的第三个参数，这个选项数组，是相同的类型的参数你提供给</span><tt>options_for_select</tt><span style="font-family: DejaVu Sans;"><tt>（注意其中的省略号，它是省略了一些选项没有写出但是实际中不能这样写哦有就全部给出）。这里的一个优势就是你不用必须担心预选择正确的城市如果用户已经有一个</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">——</span></tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>将会通过读取</tt></span><tt>@person.city_id</tt><span style="font-family: DejaVu Sans;"><tt>属性替你这些事情。</tt></span>

<tt>As</tt><tt> </tt><tt>with</tt><tt> </tt><tt>other</tt><tt> </tt><tt>helpers,</tt><tt> </tt><tt>if</tt><tt> </tt><tt>you</tt><tt> </tt><tt>were</tt><tt> </tt><tt>to</tt><tt> </tt><tt>use</tt><tt> </tt><tt>the</tt><tt> </tt><tt>select</tt><tt> </tt><tt>helper</tt><tt> </tt><tt>on</tt><tt> </tt><tt>a</tt><tt> </tt><tt>form</tt><tt> </tt><tt>builder</tt><tt> </tt><tt>scoped</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>@person</tt><tt> </tt><tt>object,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>syntax</tt><tt> </tt><tt>would</tt><tt> </tt><tt>be:</tt>

<span style="font-family: DejaVu Sans;">如同其他</span>helpers<span style="font-family: DejaVu Sans;">，如果你打算在一个作用域为</span><tt>@person</tt><span style="font-family: DejaVu Sans;"><tt>对象的</tt></span>form builder<span style="font-family: DejaVu Sans;">使用</span>select helper<span style="font-family: DejaVu Sans;">，语句将会是：</span>

# select on a form builder

&lt;%= f.select(:city_id, ...) %&gt;

If you are using <tt>select</tt> (or similar helpers such as <tt>collection_select</tt>, <tt>select_tag</tt>) to set a <tt>belongs_to</tt> association you <strong>must</strong><strong> </strong><strong>pass</strong><strong> </strong><strong>the</strong><strong> </strong><strong>name</strong><strong> </strong><strong>of</strong><strong> </strong><strong>the</strong><strong> </strong><span style="color: #800000;"><strong>foreign</strong></span><span style="color: #800000;"><strong>key</strong></span> (in the example above <tt>city_id</tt>), not the name of association itself. If you specify <tt>city</tt> instead of <tt>city_id</tt> Active Record will raise an error along the lines of <tt>ActiveRecord::AssociationTypeMismatch:</tt><tt> </tt><tt>City(#17815740)</tt><tt> </tt><tt>expected,</tt><tt> </tt><tt>got</tt><tt> </tt><tt>String(#1138750)</tt><tt> </tt>when you pass the <tt>params</tt> hash to <tt>Person.new</tt> or <tt>update_attributes</tt>. Another way of looking at this is that form helpers only edit attributes. You should also be aware of the potential<span style="font-family: DejaVu Sans;">潜在</span>security ramifications<span style="font-family: DejaVu Sans;">后果</span>of allowing users to edit foreign keys directly. You may wish to consider the use of <tt>attr_protected</tt> and <tt>attr_accessible</tt>. For further details on this, see the <a href="http://guides.rubyonrails.org/security.html#_mass_assignment"><span style="color: #000080;"><span style="text-decoration: underline;">Ruby</span></span><span style="color: #000080;"><span style="text-decoration: underline;">On</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Security</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Guide</span></span></a>.

you <strong>must</strong><strong> </strong><strong>pass</strong><strong> </strong><strong>the</strong><strong> </strong><strong>name</strong><strong> </strong><strong>of</strong><strong> </strong><strong>the</strong><strong> </strong><span style="color: #800000;"><strong>foreign</strong></span><span style="color: #800000;"><strong>key</strong></span> (in the example above <tt>city_id</tt>), not the name of association itself. <span style="font-family: DejaVu Sans;">你可以考虑使用</span><tt>attr_protected</tt> and <tt>attr_accessible</tt>.
<h4><a name="option-tags-from-a-collection-of-arbitra"></a> 3.3 Option Tags from a Collection of Arbitrary Objects <span style="font-family: WenQuanYi Micro Hei;">任意集合对象的</span>Option <span style="font-family: WenQuanYi Micro Hei;">标签</span></h4>
Generating options tags with <tt>options_for_select</tt> requires that you create an array containing the text and value for each option. But what if you had a City model (perhaps an Active Record one) and you wanted to generate option tags from a collection of those objects? One solution would be to make a nested array by iterating over them:

<span style="font-family: DejaVu Sans;">通常情况下</span><tt>options_for_select</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>option</tt><span style="font-family: DejaVu Sans;"><tt>标签需要你创建一个包含</tt></span><tt>text</tt><span style="font-family: DejaVu Sans;"><tt>和每个选项的的值的数组。但是如果你有一个</tt></span><tt>City</tt><tt> </tt><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>（可能是</tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>中的一个）同时你想生成这些对象集合的选项？一个解决办法是产生一个迭代所有对象的嵌套数组：</tt></span>

<tt>&lt;%</tt><tt> </tt><tt>cities_array</tt><tt> </tt><tt>=</tt><tt> </tt><tt>City.all.map</tt><tt> </tt><tt>{</tt><tt> </tt><tt>|city|</tt><tt> </tt><tt>[city.name,</tt><tt> </tt><tt>city.id]</tt><tt> </tt><tt>}</tt><tt> </tt><tt>%&gt;</tt>

<tt>&lt;%=</tt><tt> </tt><tt>options_for_select(cities_array)</tt><tt> </tt><tt>%&gt;</tt>

This is a perfectly Pairs passed to <tt>options_for_select</tt> should have the name first and the id second, however with <tt>options_from_collection_for_select</tt> the first argument is the value method and the second the text method.valid solution, but Rails provides a less verbose alternative: <tt>options_from_collection_for_select</tt>. This helper expects a collection of arbitrary objects and two additional arguments: the names of the methods to read the option <strong>value</strong> and <strong>text</strong> from, respectively<span style="font-family: DejaVu Sans;">分别</span>:

<span style="font-family: DejaVu Sans;">这是一个完美有效的解决方法，但是</span>Rail<span style="font-family: DejaVu Sans;">提供一个更少累赘替代上面的方法：</span><tt>options_from_collection_for_select</tt>. <span style="font-family: DejaVu Sans;">这个</span>helper<span style="font-family: DejaVu Sans;">预订一个任意对象的集合和两个额外的参数：方法的</span>name<span style="font-family: DejaVu Sans;">来分别读取</span>option<span style="font-family: DejaVu Sans;">的</span>value<span style="font-family: DejaVu Sans;">和</span>text<span style="font-family: DejaVu Sans;">：</span>

&lt;%= options_from_collection_for_select(City.all, :id, :name) %&gt;

As the name implies, this only generates option tags. To generate a working select box you would need to use it in conjunction with <tt>select_tag</tt>, just as you would with <tt>options_for_select</tt>. When working with model objects, just as <tt>select</tt> combines <tt>select_tag</tt> and <tt>options_for_select</tt>, <tt>collection_select</tt> combines <tt>select_tag</tt> with <tt>options_from_collection_for_select</tt>.

<span style="font-family: DejaVu Sans;">正如其名，它仅仅生成</span>option tags<span style="font-family: DejaVu Sans;">。要生成一个能够工作的</span>select box<span style="font-family: DejaVu Sans;">你还需将其关联到</span><tt>select_tag</tt><span style="font-family: DejaVu Sans;"><tt>，就像你处理</tt><tt></tt></span><tt>options_for_select</tt><span style="font-family: DejaVu Sans;"><tt>一样的。当在</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>对象中工作的时候，就像</tt></span><tt>select</tt><span style="font-family: DejaVu Sans;"><tt>联合</tt><tt></tt></span><tt>select_tag</tt><span style="font-family: DejaVu Sans;"><tt>与</tt></span><tt>options_for_select</tt><span style="font-family: DejaVu Sans;"><tt>的情行，</tt><tt></tt></span><tt>collection_select</tt><span style="font-family: DejaVu Sans;"><tt>联合</tt></span><tt>select_tag</tt><span style="font-family: DejaVu Sans;"><tt>与</tt></span><tt>options_from_collection_for_select.</tt><tt><strong>#</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>这里好像说的是外键的</strong></tt></span><tt><strong>select</strong></tt><tt><strong> </strong></tt><tt><strong>boxes</strong></tt>

&lt;%= collection_select(:person, :city_id, City.all, :id, :name) %&gt;

To recap, <tt>options_from_collection_for_select</tt> is to <tt>collection_select</tt> what <tt>options_for_select</tt> is to <tt>select</tt>.

<span style="font-family: DejaVu Sans;">概括一下，</span><tt>options_from_collection_for_select</tt><span style="font-family: DejaVu Sans;"><tt>对于</tt><tt></tt></span><tt>collection_select</tt><span style="font-family: DejaVu Sans;"><tt>正如</tt><tt></tt></span><tt>options_for_select</tt><span style="font-family: DejaVu Sans;"><tt>对于</tt></span><tt>select</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

Pairs passed to <tt>options_for_select</tt> should have the<strong> </strong><strong>name</strong><strong> </strong><strong>first</strong><strong> </strong><strong>and</strong><strong> </strong><strong>the</strong><strong> </strong><strong>id</strong><strong> </strong><strong>second</strong>, however with <tt>options_from_collection_for_select</tt> the first argument is the value method and the second the text method.
<h4><a name="time-zone-and-country-select"></a>3.4 Time Zone and Country Select<span style="font-family: WenQuanYi Micro Hei;">时区和国家选择</span></h4>
To leverage time zone support in Rails, you have to ask your users what time zone they are in. Doing so would require generating select options from a list of pre-defined TimeZone objects using <tt>collection_select</tt>, but you can simply use the <tt>time_zone_select</tt> helper that already wraps this:

<span style="font-family: DejaVu Sans;">在</span>Rails<span style="font-family: DejaVu Sans;">利用时区支持，你必须询问你的用户他们处在什么时区。要这样做将在使用</span><tt>collection_select</tt><span style="font-family: DejaVu Sans;"><tt>的时候</tt></span>require<span style="font-family: DejaVu Sans;">来自预先定义列表中的一个</span>TimeZome <span style="font-family: DejaVu Sans;">对象的创建</span>select<span style="font-family: DejaVu Sans;">选项，但是你可以简单的使用</span><tt>time_zone_select</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>它已经包含了这些：</tt></span>

<tt>&lt;%=</tt><tt> </tt><tt>time_zone_select(:person,</tt><tt> </tt><tt>:time_zone)</tt><tt> </tt><tt>%&gt;</tt>

<tt>There</tt><tt> </tt><tt>is</tt><tt> </tt><tt>also</tt><tt> </tt><tt>time_zone_options_for_select</tt><tt> </tt><tt>helper</tt><tt> </tt><tt>for</tt><tt> </tt><tt>a</tt><tt> </tt><tt>more</tt><tt> </tt><tt>manual</tt><tt> </tt><tt>(therefore</tt><tt> </tt><tt>more</tt><tt> </tt><tt>customizable)</tt><tt> </tt><tt>way</tt><tt> </tt><tt>of</tt><tt> </tt><tt>doing</tt><tt> </tt><tt>this.</tt><tt> </tt><tt>Read</tt><tt> </tt><tt>the</tt><tt> </tt><tt>API</tt><tt> </tt><tt>documentation</tt><tt> </tt><tt>to</tt><tt> </tt><tt>learn</tt><tt> </tt><tt>about</tt><tt> </tt><tt>the</tt><tt> </tt><tt>possible</tt><tt> </tt><tt>arguments</tt><tt> </tt><tt>for</tt><tt> </tt><tt>these</tt><tt> </tt><tt>two</tt><tt> </tt><tt>methods.</tt>

<span style="font-family: DejaVu Sans;"><tt>这里同样也有</tt><tt></tt></span><tt>also</tt><tt> </tt><tt>time_zone_options_for_select</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>来手动的做这些（因此更具定制可能）。阅读</tt></span><tt>API</tt><span style="font-family: DejaVu Sans;"><tt>文档来了解这两个方法可能的参数。</tt></span>

Rails <em>used</em> to have a <tt>country_select</tt> helper for choosing countries, but this has been extracted to the <a href="https://github.com/chrislerum/country_select"><span style="color: #000080;"><span style="text-decoration: underline;">country_select</span></span><span style="color: #000080;"><span style="text-decoration: underline;">plugin</span></span></a>. When using this, be aware that the exclusion or inclusion of certain names from the list can be somewhat controversial (and was the reason this functionality was extracted from Rails).

Rails<span style="font-family: DejaVu Sans;">通常使用一个</span><tt>country_select</tt><span style="font-family: DejaVu Sans;"><tt>来选择国家，但是这是从</tt><tt></tt></span><a href="https://github.com/chrislerum/country_select"><span style="color: #000080;"><span style="text-decoration: underline;">country_select</span></span><span style="color: #000080;"><span style="text-decoration: underline;">plugin</span></span></a><span style="font-family: DejaVu Sans;"><tt>提取的。当使用这些，要知道来自</tt></span><tt>list</tt><span style="font-family: DejaVu Sans;"><tt>中排除或者列入的一些</tt></span><tt>names</tt><span style="font-family: DejaVu Sans;"><tt>可能有些争议（并且这也是这个功能从</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>中提取出来的原因）。</tt></span>
<h3><a name="using-date-and-time-form-helpers"></a>4 Using Date and Time Form Helpers</h3>
The date and time helpers differ from all the other form helpers in two important respects:

date and time helpers<span style="font-family: DejaVu Sans;">与其他所有的</span>form helpers<span style="font-family: DejaVu Sans;">都不相同（着重）表现在两个重要的方面：</span>
<ol>
	<li>Dates and times are not representable by a single input element. Instead you have several, one for each component (year, month, day etc.) and so there is no single value in your <tt>params</tt> hash with your date or time.</li>
</ol>
Dates and times<span style="font-family: DejaVu Sans;">不仅仅表现为单个</span>input element<span style="font-family: DejaVu Sans;">。对于每个组件中的一个（</span>year,month,day ect<span style="font-family: DejaVu Sans;">）取而代之你都有一些（</span>element<span style="font-family: DejaVu Sans;">）。因此在你的</span>params hash<span style="font-family: DejaVu Sans;">字典中没有你的</span>date or time<span style="font-family: DejaVu Sans;">的单个值。</span>
<ol start="2">
	<li>Other helpers use the <tt>_tag</tt> suffix to indicate<span style="font-family: DejaVu Sans;">说明</span>whether a helper is a barebones helper or one that operates on model objects. With dates and times, <tt>select_date</tt>, <tt>select_time</tt> and <tt>select_datetime</tt> are the barebones helpers, <tt>date_select</tt>, <tt>time_select</tt> and <tt>datetime_select</tt> are the equivalent model object helpers. <strong>#</strong><span style="font-family: DejaVu Sans;"><strong>交换了一下顺序</strong></span></li>
</ol>
<span style="font-family: DejaVu Sans;">其他</span>helpers<span style="font-family: DejaVu Sans;">使用</span><tt>_tag</tt><span style="font-family: DejaVu Sans;"><tt>后缀来说明一个</tt></span><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>是单纯的</tt></span><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>还是一个</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>对象的那样的操作。</tt></span>

Both of these families of helpers will create a series of select boxes for the different components (year, month, day etc.).

<span style="font-family: DejaVu Sans;">这些</span>helper<span style="font-family: DejaVu Sans;">的组员将会创建一系列的对应于不同的组件的</span>select boxes<span style="font-family: DejaVu Sans;">（</span>year, month, day etc.<span style="font-family: DejaVu Sans;">）。</span>
<h4><a name="barebones-helpers"></a>4.1 Barebones Helpers</h4>
The <tt>select_*</tt> family of helpers take as their first argument an instance of Date, Time or DateTime that is used as the currently selected value. You may omit this parameter, in which case the current date is used. For example

<span style="font-family: DejaVu Sans;"><tt>譬如</tt></span><tt>select_*</tt><tt> </tt><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>成员获取</tt></span><tt>Date</tt><span style="font-family: DejaVu Sans;"><tt>实例作为它们的第一个变量，</tt></span><tt>Time</tt><tt> </tt><tt>or</tt><tt> </tt><tt>DateTime</tt><span style="font-family: DejaVu Sans;"><tt>使用的是当前选择的值。你可能忽略这个参数，在这种情况中</tt></span><tt>current</tt><tt> </tt><tt>date</tt><span style="font-family: DejaVu Sans;"><tt>会被使用。例如</tt></span>

<code>&lt;%=</code><tt> </tt><code>select_date</code><code> </code><code>Date.today,</code><code> </code><code>:prefix</code><tt> </tt><code>=&gt;</code><code> </code><code>:start_date</code><tt> </tt><code>%&gt;</code>

<tt>outputs</tt><tt> </tt><tt>(with</tt><tt> </tt><tt>actual</tt><tt> </tt><tt>option</tt><tt> </tt><tt>values</tt><tt> </tt><tt>omitted</tt><tt> </tt><tt>for</tt><tt> </tt><tt>brevity)</tt><span style="font-family: DejaVu Sans;"><tt>为了简洁省略了实际的选项值</tt></span><tt>#</tt><span style="font-family: DejaVu Sans;"><tt>省略号应该是相应的实际的日期和时间</tt></span>

&lt;select id="start_date_year" name="start_date[year]"&gt; ... &lt;/select&gt;

&lt;select id="start_date_month" name="start_date[month]"&gt; ... &lt;/select&gt;

&lt;select id="start_date_day" name="start_date[day]"&gt; ... &lt;/select&gt;

The above inputs would result in <tt>params[:start_date]</tt> being a hash with keys <tt>:year</tt>, <tt>:month</tt>, <tt>:day</tt>. To get an actual Time or Date object you would have to extract these values and pass them to the appropriate constructor, for example

<span style="font-family: DejaVu Sans;">完整的输入结果将会在</span><tt>params[:start_date]</tt><span style="font-family: DejaVu Sans;"><tt>他会是一个关键字是</tt></span><tt>:year,</tt><tt> </tt><tt>:month,</tt><tt> </tt><tt>:day</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>字典。要得到一个实际的</tt></span><tt>Time</tt><tt> </tt><tt>or</tt><tt> </tt><tt>Date</tt><span style="font-family: DejaVu Sans;"><tt>对象你将不得不提取这些值并且转换他们为适合的结构，例如：</tt></span>

<tt>Date.civil(params[:start_date][:year].to_i,</tt><tt> </tt><tt>params[:start_date][:month].to_i,</tt><tt> </tt><tt>params[:start_date][:day].to_i)</tt>

The <tt>:prefix</tt> option is the key used to retrieve the hash of date components from the <tt>params</tt> hash. Here it was set to <tt>start_date</tt>, if omitted it will default to <tt>date</tt>.

<tt>:prefix</tt><span style="font-family: DejaVu Sans;"><tt>选项是用来接收来自</tt></span><tt>params</tt><tt> </tt><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>形式的</tt></span><tt>date</tt><span style="font-family: DejaVu Sans;"><tt>组件的关键。这里它被设置为</tt><tt></tt></span><tt>start_date</tt><span style="font-family: DejaVu Sans;"><tt>，如果省略形式的话默认是</tt></span><tt>date</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h4><a name="select-model-object-helpers"></a><tt>4.2</tt><tt> </tt><tt>Model</tt><tt> </tt><tt>Object</tt><tt> </tt><tt>Helpers</tt></h4>
<tt>select_date</tt> does not work well with forms that update or create Active Record objects as Active Record expects<span style="font-family: DejaVu Sans;">预计</span>each element of the <tt>params</tt> hash to correspond to one attribute. The model object helpers for dates and times submit parameters with special names, when Active Record sees parameters with such names it knows they must be combined with the other parameters and given to a constructor appropriate to the column type. For example:

<tt>select_date</tt><span style="font-family: DejaVu Sans;"><tt>（这个是单纯的</tt></span><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>）在</tt></span><tt>update</tt><tt> </tt><tt>or</tt><tt> </tt><tt>create</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>对象的时候</tt>预置每个</span>params hash<span style="font-family: DejaVu Sans;">字典的</span>element<span style="font-family: DejaVu Sans;">对应到一个属性不会很好的工作。</span>Dates and times <span style="font-family: DejaVu Sans;">的</span>model object helpers<span style="font-family: DejaVu Sans;">提交参数通过指定的</span>names<span style="font-family: DejaVu Sans;">，当</span>Active Record<span style="font-family: DejaVu Sans;">发现这些参数时，它知道它们必须结合其他参数以及每一列（属性</span>year, month, day etc.<span style="font-family: DejaVu Sans;">）被给予一个合适的结构。例如：</span>

&lt;%= date_select :person, :birth_date %&gt;

outputs (with actual option values omitted for brevity)<span style="font-family: DejaVu Sans;">将实际的</span>option<span style="font-family: DejaVu Sans;">的</span>values<span style="font-family: DejaVu Sans;">忽略以精简</span>

&lt;select id="person_birth_date_1i" name="person[birth_date(1i)]"&gt; ... &lt;/select&gt;

&lt;select id="person_birth_date_2i" name="person[birth_date(2i)]"&gt; ... &lt;/select&gt;

&lt;select id="person_birth_date_3i" name="person[birth_date(3i)]"&gt; ... &lt;/select&gt;

which results in a <tt>params</tt> hash like

{:person =&gt; {'birth_date(1i)' =&gt; '2008', 'birth_date(2i)' =&gt; '11', 'birth_date(3i)' =&gt; '22'}}

When this is passed to <tt>Person.new</tt> (or <tt>update_attributes</tt>), Active Record spots that these parameters should all be used to construct the <tt>birth_date</tt> attribute and uses the suffixed information to determine in which order it should pass these parameters to functions such as <tt>Date.civil</tt>.

<span style="font-family: DejaVu Sans;">当这些信息提交给</span>Person.new<span style="font-family: DejaVu Sans;">（</span><tt>update_attributes</tt><span style="font-family: DejaVu Sans;">），</span>Active Record<span style="font-family: DejaVu Sans;">指出所有的这些参数应该使用于</span><tt>birth_date</tt><tt> </tt><tt>attribute</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>结构并且使用后缀声明使得它能够传递这些参数给功能（方法）例如</tt><tt></tt></span><tt>Date.civil</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h4><a name="common-options"></a>4.3 Common Options</h4>
Both families of helpers use the same core set of functions to generate the individual select tags and so both accept largely the same options. In particular, by default Rails will generate year options 5 years either side of the current year. If this is not an appropriate range, the <tt>:start_year</tt> and <tt>:end_year</tt> options override this. For an exhaustive list of the available options, refer to the <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html"><span style="color: #000080;"><span style="text-decoration: underline;">API</span></span><span style="color: #000080;"><span style="text-decoration: underline;">documentation</span></span></a>.

helpers<span style="font-family: DejaVu Sans;">的所有成员都使用相同的</span>core set of functions<span style="font-family: DejaVu Sans;">来构建个体的</span>select <span style="font-family: DejaVu Sans;">标签因此同样能够接收大量相同的</span>options<span style="font-family: DejaVu Sans;">。以其一为例，默认情况下</span>year options<span style="font-family: DejaVu Sans;">中</span>Rails<span style="font-family: DejaVu Sans;">将会创建在当前年份的上和下</span>5<span style="font-family: DejaVu Sans;">年。如果这不是一个合适的范围，</span><tt>:start_year</tt> and <tt>:end_year</tt><span style="font-family: DejaVu Sans;"><tt>选项将会覆盖默认的范围。要得到可用选项的全面的列表，参考</tt><tt></tt></span><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html"><span style="color: #000080;"><span style="text-decoration: underline;">API</span></span><span style="color: #000080;"><span style="text-decoration: underline;">documentation</span></span></a><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

As a rule of thumb you should be using <tt>date_select</tt> when working with model objects and <tt>select_date</tt> in other cases, such as a search form which filters results by date.

<span style="font-family: DejaVu Sans;">一个规则指引你在处理</span>model objects<span style="font-family: DejaVu Sans;">的时候使用</span>date_select<span style="font-family: DejaVu Sans;">在其他情况的时候使用</span>select_date<span style="font-family: DejaVu Sans;">，比如一个</span>search form<span style="font-family: DejaVu Sans;">它过滤日期作获取结果。</span>

In many cases the built-in date pickers are clumsy as they do not aid the user in working out the relationship between the date and the day of the week.

<span style="font-family: DejaVu Sans;">在许多情况下，内置的日期选择器是笨拙的，因为他们对计算出日期和工作日关系的用户没有援助。</span>
<h4><a name="individual-components"></a>4.4 Individual Components<span style="font-family: WenQuanYi Micro Hei;">个体组件</span></h4>
Occasionally you need to display just a single date component such as a year or a month. Rails provides a series of helpers for this, one for each component <tt>select_year</tt>, <tt>select_month</tt>, <tt>select_day</tt>, <tt>select_hour</tt>, <tt>select_minute</tt>, <tt>select_second</tt>. These helpers are fairly straightforward. By default they will generate an input field named after the time component (for example “year” for <tt>select_year</tt>, “month” for <tt>select_month</tt> etc.) although this can be overridden with the <tt>:field_name</tt> option. The <tt>:prefix</tt> option works in the same way that it does for <tt>select_date</tt> and <tt>select_time</tt> and has the same default value.

<span style="font-family: DejaVu Sans;">偶然情况下你需要仅仅显示单个日期组件如</span>year or month<span style="font-family: DejaVu Sans;">。</span>Rails<span style="font-family: DejaVu Sans;">提供一些</span>helpers<span style="font-family: DejaVu Sans;">来做这些，给每一个组件</span><tt>select_year</tt>, <tt>select_month</tt>, <tt>select_day</tt>, <tt>select_hour</tt>, <tt>select_minute</tt>, <tt>select_second</tt><span style="font-family: DejaVu Sans;">。这些</span>helpers<span style="font-family: DejaVu Sans;">相当的简单。默认情况下他们将会创建一个</span>input field<span style="font-family: DejaVu Sans;">并以时间组件命名（例如<span style="font-family: Liberation Serif,Times New Roman,serif;"> “</span></span>year” for <tt>select_year</tt>, “month” for <tt>select_month</tt> etc.<span style="font-family: DejaVu Sans;">）即使这会覆盖</span><tt>:field_name</tt><span style="font-family: DejaVu Sans;"><tt>选项。</tt></span><tt>:prefix</tt><span style="font-family: DejaVu Sans;"><tt>以一样的方式工作，对于</tt></span><tt>select_date</tt><tt> </tt><tt>and</tt><tt> </tt><tt>select_time</tt><span style="font-family: DejaVu Sans;"><tt>会设置同样的默认值。</tt></span>

<tt>&lt;%=</tt><tt> </tt><tt>select_year(2011)</tt><tt> </tt><tt>%&gt;</tt>

<tt>&lt;%=</tt><tt> </tt><tt>select_year(Time.now)</tt><tt> </tt><tt>%&gt;</tt>

will produce the same output if the current year is 2011 and the value chosen by the user can be retrieved by <tt>params[:date][:year]</tt>.
<h3><a name="uploading-files"></a>5 Uploading Files</h3>
A common task is uploading some sort of file, whether it’s a picture of a person or a CSV file containing data to process. The most important thing to remember with file uploads is that the rendered form’s encoding <strong>MUST</strong> be set to “multipart/form-data”. If you use <tt>form_for</tt>, this is done automatically. If you use <tt>form_tag</tt>, you must set it yourself, as per the following example.

The following two forms both upload a file.

<span style="font-family: DejaVu Sans;">一个常用的任务是上传一些种类的文件，无论在上传进程中的是一个个人图片还是一个包含数据</span>CSV<span style="font-family: DejaVu Sans;">文件。文件上传中重点要注意的事情是</span>rendered <span style="font-family: DejaVu Sans;">表单的编码<span style="color: #800000;"><strong>必须被设置成</strong></span>是<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>multipart/form-data”. <span style="font-family: DejaVu Sans;">如果你使用的</span><tt>form_for</tt><span style="font-family: DejaVu Sans;"><tt>，这将被自动完成。如果你使用</tt><tt></tt></span><tt>form_tag</tt><span style="font-family: DejaVu Sans;"><tt>，你必须自己设置它，在随后的每个例子中。后面的两个表单都是上传一个文件。</tt></span>

&nbsp;

&lt;%= form_tag({:action =&gt; :upload}, :multipart =&gt; true) do %&gt;

&lt;%= file_field_tag 'picture' %&gt;

&lt;% end %&gt;

&nbsp;

&lt;%= form_for @person do |f| %&gt;

&lt;%= f.file_field :picture %&gt;

&lt;% end %&gt;

Since Rails 3.1, forms rendered using <tt>form_for</tt> have their encoding set to <tt>multipart/form-data</tt> automatically once a <tt>file_field</tt> is used inside the block. Previous versions required you to set this explicitly.

<span style="font-family: DejaVu Sans;">从</span>Rails3.1,form<span style="font-family: DejaVu Sans;">使用</span>form_for<span style="font-family: DejaVu Sans;">来</span>render<span style="font-family: DejaVu Sans;">一旦在</span>block<span style="font-family: DejaVu Sans;">中有一个</span><tt>file_field</tt><span style="font-family: DejaVu Sans;"><tt>被使用编码自动设置为</tt><tt></tt></span><tt>multipart/form-data</tt><span style="font-family: DejaVu Sans;"><tt>。以前的版本需要你准确的设置为这样的编码。</tt></span>

Rails provides the usual pair of helpers: the barebones <tt>file_field_tag</tt> and the model oriented <tt>file_field</tt>. The only difference with other helpers is that you cannot set a default value for file inputs as this would have no meaning. As you would expect in the first case the uploaded file is in <tt>params[:picture]</tt> and in the second case in<tt> </tt><tt>params[:person][:picture]</tt>.

R<span style="font-family: DejaVu Sans;">爱丽丝提供通常配对的</span>helpers<span style="font-family: DejaVu Sans;">：单个的</span><tt>file_field_tag</tt><span style="font-family: DejaVu Sans;"><tt>和面向</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>的</tt><tt></tt></span><tt>file_field</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

<span style="font-family: DejaVu Sans;">这与其他的</span>helpers<span style="font-family: DejaVu Sans;">的不同是你不能为</span>file inputs<span style="font-family: DejaVu Sans;">设置一个不同的值因为这样没有意义。正如你所期望的第一种情况上传的文件在</span><tt>params[:picture]</tt><span style="font-family: DejaVu Sans;"><tt>，第二种情况在</tt><tt></tt></span><tt>params[:person][:picture]</tt><span style="font-family: DejaVu Sans;"><tt>中。</tt></span>
<h4><a name="what-gets-uploaded"></a>5.1 What Gets Uploaded</h4>
The object in the <tt>params</tt> hash is an instance of a subclass of IO. Depending on the size of the uploaded file it may in fact be a StringIO or an instance of File backed by a temporary file. In both cases the object will have an <tt>original_filename</tt> attribute containing the name the file had on the user’s computer and a <tt>content_type</tt> attribute containing the MIME type of the uploaded file. The following snippet saves the uploaded content in <tt>#{Rails.root}/public/uploads</tt> under the same name as the original file (assuming the form was the one in the previous example).

<span style="font-family: DejaVu Sans;">在</span>params hash<span style="font-family: DejaVu Sans;">中的对象是</span>IO<span style="font-family: DejaVu Sans;">子类的一个实例。取决于上传文件的大小它可能实际上是一个</span>StringIO<span style="font-family: DejaVu Sans;">或者临时文件的备份文件。在这两个情况中对象将会有一个</span><tt>original_filename</tt><span style="font-family: DejaVu Sans;"><tt>属性包含文件在用户电脑上的名字以及一个</tt><tt></tt></span><tt>content_type</tt><span style="font-family: DejaVu Sans;"><tt>属性包含上传文件的</tt></span><tt>MIME</tt><span style="font-family: DejaVu Sans;"><tt>形式。随后的阶段保存上传的内容在</tt></span><tt>#{Rails.root}/public/uploads</tt><span style="font-family: DejaVu Sans;"><tt>并以与原始名字相同（假设</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>是一个预先的例子则下面是其控制函数）</tt></span>

def upload

uploaded_io = params[:person][:picture]

File.open(Rails.root.join('public', 'uploads', uploaded_io.original_filename), 'w') do |file|

file.write(uploaded_io.read)

end

end

Once a file has been uploaded, there are a multitude of potential<span style="font-family: DejaVu Sans;">潜在</span>tasks, ranging from where to store the files (on disk, Amazon S3, etc) and associating them with models to resizing image files and generating thumbnails. The intricacies of this are beyond the scope of this guide, but there are several libraries designed to assist with these. Two of the better known ones are <span style="color: #000080;"><span style="text-decoration: underline;"><a href="https://github.com/jnicklas/carrierwave">CarrierWave</a></span></span> and <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://www.thoughtbot.com/projects/paperclip">Paperclip</a></span></span>.

<span style="font-family: DejaVu Sans;">一旦一个文件被上传，这里有多个潜在的任务，响应在哪里存放文件</span>(on disk, Amazon S3, etc) <span style="font-family: DejaVu Sans;">并且关联它们至</span>models<span style="font-family: DejaVu Sans;">为重设大小的图片文件同时创建缩略图。这里的复杂远超这个</span>guide<span style="font-family: DejaVu Sans;">的范围，但是这里有一些库被设计来分派这些。有两个较好的库</span>ones are <span style="color: #000080;"><span style="text-decoration: underline;"><a href="https://github.com/jnicklas/carrierwave">CarrierWave</a></span></span> and <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://www.thoughtbot.com/projects/paperclip">Paperclip</a></span></span><span style="font-family: DejaVu Sans;">。</span>

<span style="color: #800000;"><strong>If</strong></span><span style="color: #800000;"><strong>the</strong></span><span style="color: #800000;"><strong>user</strong></span><span style="color: #800000;"><strong>has</strong></span><span style="color: #800000;"><strong>not</strong></span><span style="color: #800000;"><strong>selected</strong></span><span style="color: #800000;"><strong>a</strong></span><span style="color: #800000;"><strong>file</strong></span><span style="color: #800000;"><strong>the</strong></span><span style="color: #800000;"><strong>corresponding</strong></span><span style="color: #800000;"><strong>parameter</strong></span><span style="color: #800000;"><strong>will</strong></span><span style="color: #800000;"><strong>be</strong></span><span style="color: #800000;"><strong>an</strong></span><span style="color: #800000;"><strong>empty</strong></span><span style="color: #800000;"><strong>string.</strong></span>
<h4><a name="dealing-with-ajax"></a>5.2 Dealing with Ajax<span style="font-family: WenQuanYi Micro Hei;">处理</span>Ajax</h4>
Unlike other forms making an asynchronous file upload form is not as simple as providing <tt>form_for</tt> with <tt>:remote</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt>. With an Ajax form the serialization is done by JavaScript running inside the browser and since JavaScript cannot read files from your hard drive the file cannot be uploaded. The most common workaround is to use an invisible iframe that serves as the target for the form submission.

<span style="font-family: DejaVu Sans;">与其他</span>forms<span style="font-family: DejaVu Sans;">不同制作一个异步文件上传表单不能简单的提供</span><tt>form_for</tt> with <tt>:remote</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt>.<span style="font-family: DejaVu Sans;">一个</span>Ajax<span style="font-family: DejaVu Sans;">表单这个序列被在浏览器内部运行的</span>JavaScript<span style="font-family: DejaVu Sans;">完成同时因为</span>JavaScript<span style="font-family: DejaVu Sans;">不能从你的硬盘中读取文件这个文件就不能上传。最常见的解决方法是使用一种无形的</span>iframe<span style="font-family: DejaVu Sans;">服务于目标</span>forms<span style="font-family: DejaVu Sans;">的提交。</span>
<h3><a name="customizing-form-builders"></a>6 Customizing Form Builders</h3>
As mentioned previously the object yielded by <tt>form_for</tt> and <tt>fields_for</tt> is an instance of FormBuilder (or a subclass thereof). Form builders encapsulate the notion of displaying form elements for a single object. While you can of course write helpers for your forms in the usual way you can also subclass FormBuilder and add the helpers there. For example

<span style="font-family: DejaVu Sans;">正如开始提到的<tt></tt></span><tt>object</tt><tt> </tt><tt>yielded</tt><tt> </tt><tt>by</tt><tt> </tt><tt>form_for</tt><span style="font-family: DejaVu Sans;"><tt>以及是</tt></span><tt>FormBuilder</tt><span style="font-family: DejaVu Sans;"><tt>的实例（或者其中的子类的实例）。</tt></span><tt>Form</tt><tt> </tt><tt>builders</tt><span style="font-family: DejaVu Sans;"><tt>封装表单元素的显示</tt></span><tt>notion</tt><span style="font-family: DejaVu Sans;"><tt>为一个单独的对象。然而你当然你也可以为你的</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>编写</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>通常的方式你可以通过（编写）</tt></span><tt>FormBuilder</tt><span style="font-family: DejaVu Sans;"><tt>的子类并且在这里添加</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>。例如：</tt></span>

<tt>&lt;%=</tt><tt> </tt><tt>form_for</tt><tt> </tt><tt>@person</tt><tt> </tt><tt>do</tt><tt> </tt><tt>|f|</tt><tt> </tt><tt>%&gt;</tt>

<tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>text_field_with_label</tt><tt> </tt><tt>f,</tt><tt> </tt><tt>:first_name</tt><tt> </tt><tt>%&gt;</tt>

<tt>&lt;%</tt><tt> </tt><tt>end</tt><tt> </tt><tt>%&gt;</tt>

<span style="font-family: DejaVu Sans;"><tt>可以替换为：</tt></span>

<tt>&lt;%=</tt><tt> </tt><tt>form_for</tt><tt> </tt><tt>@person,</tt><tt> </tt><tt>:builder</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>LabellingFormBuilder</tt><tt> </tt><tt>do</tt><tt> </tt><tt>|f|</tt><tt> </tt><tt>%&gt;</tt>

<tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>f.text_field</tt><tt> </tt><tt>:first_name</tt><tt> </tt><tt>%&gt;</tt>

<tt>&lt;%</tt><tt> </tt><tt>end</tt><tt> </tt><tt>%&gt;</tt>

by defining a LabellingFormBuilder class similar to the following:

<span style="font-family: DejaVu Sans;">通过定义一个</span>LabellingFormBuilder<span style="font-family: DejaVu Sans;">类与接下来的类似：</span>

class LabellingFormBuilder &lt; ActionView::Helpers::FormBuilder

def text_field(attribute, options={})

label(attribute) + super

end

end

If you reuse this frequently you could define a <tt>labeled_form_for</tt> helper that automatically applies the <tt>:builder</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>LabellingFormBuilder</tt> option.

<span style="font-family: DejaVu Sans;">如果你拒绝这样频繁的操作你可以定义一个</span><tt>labeled_form_for</tt><span style="font-family: DejaVu Sans;"><tt>它会自动的应用</tt></span><tt>:builder</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>LabellingFormBuilder</tt><span style="font-family: DejaVu Sans;"><tt>选项。</tt></span>

<tt>The</tt><tt> </tt><tt>form</tt><tt> </tt><tt>builder</tt><tt> </tt><tt>used</tt><tt> </tt><tt>also</tt><tt> </tt><tt>determines</tt><tt> </tt><tt>what</tt><tt> </tt><tt>happens</tt><tt> </tt><tt>when</tt><tt> </tt><tt>you</tt><tt> </tt><tt>do</tt>

form builer<span style="font-family: DejaVu Sans;">的使用也决定了在你操作的时候将会发生什么</span>

&lt;%= render :partial =&gt; f %&gt;

If <tt>f</tt> is an instance of FormBuilder then this will render the <tt>form</tt> partial, setting the partial’s object to the form builder. If the form builder is of class LabellingFormBuilder then the <tt>labelling_form</tt> partial would be rendered instead.

<span style="font-family: DejaVu Sans;">如果</span>f<span style="font-family: DejaVu Sans;">是</span>FormBuilder<span style="font-family: DejaVu Sans;">的一个实例那么这里将会局部的</span>render<span style="font-family: DejaVu Sans;">表单，为</span>form buider<span style="font-family: DejaVu Sans;">设置</span>partial’s<span style="font-family: DejaVu Sans;">对象。如果</span>form builder<span style="font-family: DejaVu Sans;">是</span>LabellingFormBuilder<span style="font-family: DejaVu Sans;">那么在</span>render<span style="font-family: DejaVu Sans;">中</span><tt>labelling_form</tt><span style="font-family: DejaVu Sans;"><tt>将会替代</tt></span><tt>f</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h3><a name="understanding-parameter-naming-conventio"></a> 7 Understanding Parameter Naming Conventions<span style="font-family: WenQuanYi Micro Hei;">明白参数公约</span></h3>
As you’ve seen in the previous sections, values from forms can be at the top level of the <tt>params</tt> hash or nested in another hash. For example in a standard <tt>create</tt> action for a Person model, <tt>params[:model]</tt> would usually be a hash of all the attributes for the person to create. The <tt>params</tt> hash can also contain arrays, arrays of hashes and so on.

<span style="font-family: DejaVu Sans;">正如你在（本节</span>guide<span style="font-family: DejaVu Sans;">）前面部分看到的，来至</span>forms<span style="font-family: DejaVu Sans;">的值将会在顶级的</span>parmas hash<span style="font-family: DejaVu Sans;">字典内或者是嵌套在另一个</span>hash<span style="font-family: DejaVu Sans;">子典中。例如在</span>Person model<span style="font-family: DejaVu Sans;">的一个标准的</span>create action<span style="font-family: DejaVu Sans;">中，</span><tt>params[:model]</tt><span style="font-family: DejaVu Sans;"><tt>通常将会有一个含有创建的</tt></span><tt>person</tt><span style="font-family: DejaVu Sans;"><tt>的所有属性的字典。</tt></span><tt>params</tt><span style="font-family: DejaVu Sans;"><tt>字典也可以包含数组，由</tt></span><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>字典组成的数组等等。</tt></span>

Fundamentally HTML forms don’t know about any sort of structured data, all they generate is name–value pairs, where pairs are just plain strings. The arrays and hashes you see in your application are the result of some parameter naming conventions that Rails uses.

<span style="font-family: DejaVu Sans;">归根结底</span>HTML forms<span style="font-family: DejaVu Sans;">并不知道关于数据结构的任何类型，它们生成的所有仅是</span>name-value<span style="font-family: DejaVu Sans;">对，这些（</span>name-value<span style="font-family: DejaVu Sans;">）仅仅是纯</span>string<span style="font-family: DejaVu Sans;">。你在应用程序中看到的数组和</span>hash<span style="font-family: DejaVu Sans;">字典是一些在</span>Rails<span style="font-family: DejaVu Sans;">使用的参数命名公约的结果。</span>

You may find you can try out examples in this section faster by using the console to directly invoke Rails’ parameter parser. For example,

<span style="font-family: DejaVu Sans;">你会发现你可以快速的尝试这部分的例子通过使用</span>console<span style="font-family: DejaVu Sans;">来直接的调用</span>Rails's parameter <span style="font-family: DejaVu Sans;">解析器。例如，</span>

ActionController::UrlEncodedPairParser.parse_query_parameters "name=fred&amp;phone=0123456789"

# =&gt; {"name"=&gt;"fred", "phone"=&gt;"0123456789"}
<h4><a name="basic-structures"></a>7.1 Basic Structures<span style="font-family: WenQuanYi Micro Hei;">基础的</span>strcutures</h4>
The two basic structures are arrays and hashes. Hashes mirror the syntax used for accessing the value in <tt>params</tt>. For example if a form contains

<span style="font-family: DejaVu Sans;">两个根本的结构是</span>arrays<span style="font-family: DejaVu Sans;">和</span>hash<span style="font-family: DejaVu Sans;">字典。</span>Hash<span style="font-family: DejaVu Sans;">字典镜像这种语法用来访问</span>params<span style="font-family: DejaVu Sans;">的值。例如如果一个</span>form<span style="font-family: DejaVu Sans;">中包含</span>

&lt;input id="person_name" name="person[name]" type="text" value="Henry"/&gt;

the <tt>params</tt> hash will contain

{'person' =&gt; {'name' =&gt; 'Henry'}}

and <tt>params[:person][:name]</tt> will retrieve the submitted value in the controller.

<span style="font-family: DejaVu Sans;">同时</span><tt>params[:person][:name]</tt><span style="font-family: DejaVu Sans;"><tt>将会在</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>中接收提交的</tt></span><tt>value</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

Hashes can be nested as many levels as required, for example

<span style="font-family: DejaVu Sans;">如果需要</span>hash<span style="font-family: DejaVu Sans;">字典可以嵌套多层，例如</span>

&lt;input id="person_address_city" name="person[address][city]" type="text" value="New York"/&gt;

will result in the <tt>params</tt> hash being<span style="font-family: DejaVu Sans;">将会在</span>params hash<span style="font-family: DejaVu Sans;">字典中返回</span>

{'person' =&gt; {'address' =&gt; {'city' =&gt; 'New York'}}}

Normally Rails ignores duplicate parameter names. If the parameter name contains an empty set of square brackets [] then they will be accumulated in an array. If you wanted people to be able to input multiple phone numbers, you could place this in the form:

<span style="font-family: DejaVu Sans;">正常情况下</span>Rails<span style="font-family: DejaVu Sans;">忽略重复参数名称。如果参数名包含一个空的</span>[]<span style="font-family: DejaVu Sans;">那么它们会在一个数组中累积。如果你想</span>people<span style="font-family: DejaVu Sans;">能够输入多个电话号码，你可以将这里放入</span>form<span style="font-family: DejaVu Sans;">中：</span>

&lt;input name="person[phone_number][]" type="text"/&gt;

&lt;input name="person[phone_number][]" type="text"/&gt;

&lt;input name="person[phone_number][]" type="text"/&gt;

<strong>This would result in </strong><tt><strong>params[:person][:phone_number]</strong></tt><strong> being an array.</strong>
<h4><a name="combining-them"></a>7.2 Combining Them<span style="font-family: WenQuanYi Micro Hei;">联合它们</span></h4>
We can mix and match these two concepts. For example, one element of a hash might be an array as in the previous example, or you can have an array of hashes. For example a form might let you create any number of addresses by repeating the following form fragment

<span style="font-family: DejaVu Sans;">我们可以总结出两个概念。例如，一个</span>element<span style="font-family: DejaVu Sans;">的</span>hash<span style="font-family: DejaVu Sans;">键值可能是作为一个先前例子的</span>hash<span style="font-family: DejaVu Sans;">键值的数组，或者你也可以有一个</span>hash<span style="font-family: DejaVu Sans;">字典的数组。例如一个</span>form<span style="font-family: DejaVu Sans;">可以让你创建任何数量的地址通过重复随后的</span>form <span style="font-family: DejaVu Sans;">片段</span>

&lt;input name="addresses[][line1]" type="text"/&gt;

&lt;input name="addresses[][line2]" type="text"/&gt;

&lt;input name="addresses[][city]" type="text"/&gt;

This would result in <tt>params[:addresses]</tt> being an array of hashes with keys <tt>line1</tt>, <tt>line2</tt> and <tt>city</tt>. Rails decides to start accumulating values in a new hash whenever it encounters an input name that already exists in the current hash.

<span style="font-family: DejaVu Sans;">这里返回的结果在</span><tt>params[:addresses]</tt><span style="font-family: DejaVu Sans;"><tt>中，是一个</tt></span><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>字典组成的数组其中</tt></span><tt>keys</tt><span style="font-family: DejaVu Sans;"><tt>是</tt></span><tt>line1,line2</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>city</tt><span style="font-family: DejaVu Sans;"><tt>。 </tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>决定开始在一个新的</tt></span><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>中积累值不管它是不是遇到一个已经在当前的</tt></span><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>已经存在的</tt></span><tt>input name</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

<tt>There’s a restriction, however, while hashes can be nested arbitrarily, only one level of “arrayness” is allowed. Arrays can be usually replaced by hashes, for example instead of having an array of model objects one can have a hash of model objects keyed by their id, an array index or some other parameter.</tt>

<span style="font-family: DejaVu Sans;">这是一个限制，然而，即使</span>hashes<span style="font-family: DejaVu Sans;">能够嵌套任意层，只有一级的<tt>“</tt></span><tt>arrayness”</tt><span style="font-family: DejaVu Sans;"><tt>是被允许的。数组通常可以替换</tt></span><tt>hashes</tt><span style="font-family: DejaVu Sans;"><tt>字典，例如作为替代，一个数组的</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>对象可以键入它们的</tt></span><tt>id</tt><span style="font-family: DejaVu Sans;"><tt>，一个</tt></span><tt>array index</tt><span style="font-family: DejaVu Sans;"><tt>或者一些其他参数。</tt></span>

Array parameters do not play well with the <tt>check_box</tt> helper. According to the HTML specification unchecked checkboxes submit no value. However it is often convenient for a checkbox to always submit a value. The <tt>check_box</tt> helper fakes this by creating an auxiliary hidden input with the same name. If the checkbox is unchecked only the hidden input is submitted and if it is checked then both are submitted but the value submitted by the checkbox takes precedence. When working with array parameters this duplicate submission will confuse Rails since duplicate input names are how it decides when to start a new array element. It is preferable to either use <tt> </tt><tt>check_box_tag</tt> or to use hashes instead of arrays.

<span style="font-family: DejaVu Sans;">数组参数在</span>check_box helper<span style="font-family: DejaVu Sans;">中不能得到很好的效果。根据</span>HTML<span style="font-family: DejaVu Sans;">规范的</span>unchecked checkboxes<span style="font-family: DejaVu Sans;">提交空值。无论如何一个</span>checkbox<span style="font-family: DejaVu Sans;">提交一个值通常非常方便。</span>check_box helper <span style="font-family: DejaVu Sans;">假想这种情况来创建具有相同</span>name<span style="font-family: DejaVu Sans;">一个辅助的隐藏</span>input<span style="font-family: DejaVu Sans;">。如果</span>checkbox<span style="font-family: DejaVu Sans;">是</span>unchecked<span style="font-family: DejaVu Sans;">那么只有</span>hidden input<span style="font-family: DejaVu Sans;">被提交如果它是</span>check<span style="font-family: DejaVu Sans;">那么两个都会提交但是</span>checkbox<span style="font-family: DejaVu Sans;">优先提交</span>value.<span style="font-family: DejaVu Sans;">当（</span>Rails<span style="font-family: DejaVu Sans;">）工作到有这两个重复提交的参数数组</span>rails<span style="font-family: DejaVu Sans;">将会产生混淆，因为重复 </span>input name<span style="font-family: DejaVu Sans;">会开始一个新的数组元素。这里使用 </span><tt>check_box_tag</tt><span style="font-family: DejaVu Sans;"><tt>或者使用</tt></span><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>替代</tt></span><tt>array</tt><span style="font-family: DejaVu Sans;"><tt>都是可取的。</tt></span>
<h4><a name="using-form-helpers"></a>7.3 Using Form Helpers</h4>
The previous sections did not use the Rails form helpers at all. While you can craft the input names yourself and pass them directly to helpers such as <tt>text_field_tag</tt> Rails also provides higher level support. The two tools at your disposal here are the name parameter to <tt>form_for</tt> and <tt>fields_for</tt> and the <tt>:index</tt> option that helpers take.

<span style="font-family: DejaVu Sans;">前面的部分根本没有使用</span>Rails form helpers<span style="font-family: DejaVu Sans;">。然而你可以自己加工</span>input name<span style="font-family: DejaVu Sans;">并且直接传输他们给</span>helpers<span style="font-family: DejaVu Sans;">例如 </span><tt>text_field_tag Rails</tt><span style="font-family: DejaVu Sans;"><tt>也提供更高级别的支持。有两个工具供你差遣它们是获取</tt></span><tt>:name</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>form_for</tt><span style="font-family: DejaVu Sans;"><tt>和获取</tt></span><tt>:index</tt><span style="font-family: DejaVu Sans;"><tt>选项的</tt></span><tt>fields_for helpers</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

You might want to render a form with a set of edit fields for each of a person’s addresses. For example:

<span style="font-family: DejaVu Sans;">你可能想</span>render<span style="font-family: DejaVu Sans;">一个</span>person's addresses form<span style="font-family: DejaVu Sans;">并且对</span>person's each addresses<span style="font-family: DejaVu Sans;">使用一样的</span>edit fields<span style="font-family: DejaVu Sans;">。</span>

&lt;%= form_for @person do |person_form| %&gt;

&lt;%= person_form.text_field :name %&gt;

&lt;% @person.addresses.each do |address| %&gt;

&lt;%= person_form.fields_for address, :index =&gt; address do |address_form|%&gt;

&lt;%= address_form.text_field :city %&gt;

&lt;% end %&gt;

&lt;% end %&gt;

&lt;% end %&gt;

Assuming the person had two addresses, with ids 23 and 45 this would create output similar to this:

<span style="font-family: DejaVu Sans;">假设</span>person<span style="font-family: DejaVu Sans;">有两个</span>address<span style="font-family: DejaVu Sans;">。</span>id<span style="font-family: DejaVu Sans;">为</span>23<span style="font-family: DejaVu Sans;">和</span>45<span style="font-family: DejaVu Sans;">将会创建与下面类似的</span>HTML<span style="font-family: DejaVu Sans;">代码：</span>

&lt;form accept-charset="UTF-8" action="/people/1" id="edit_person_1" method="post"&gt;

&lt;input id="person_name" name="person[name]" size="30" type="text" /&gt;

&lt;input id="person_address_23_city" name="person[address][23][city]" size="30" type="text" /&gt;

&lt;input id="person_address_45_city" name="person[address][45][city]" size="30" type="text" /&gt;

&lt;/form&gt;

This will result in a <tt>params</tt> hash that looks like

{'person' =&gt; {'name' =&gt; 'Bob', 'address' =&gt; {'23' =&gt; {'city' =&gt; 'Paris'}, '45' =&gt; {'city' =&gt; 'London'}}}}

&nbsp;

Rails knows that all these inputs should be part of the person hash because you called <tt>fields_for</tt> on the first form builder. By specifying an <tt>:index</tt> option you’re telling Rails that instead of naming the inputs <tt>person[address][city]</tt> it should insert that index surrounded by [] between the address and the city. If you pass an Active Record object as we did then Rails will call <tt>to_param</tt> on it, which by default returns the database id. This is often useful as it is then easy to locate which Address record should be modified. You can pass numbers with some other significance, strings or even <tt>nil</tt> (which will result in an array parameter being created).

Rails<span style="font-family: DejaVu Sans;">知道这里所有的</span>inputs<span style="font-family: DejaVu Sans;">应该是</span>person hash<span style="font-family: DejaVu Sans;">的一部分因为你在</span>form builder<span style="font-family: DejaVu Sans;">的开始调用了 </span><tt>fields_for</tt><span style="font-family: DejaVu Sans;"><tt>。通过指定</tt></span><tt>:index</tt><span style="font-family: DejaVu Sans;"><tt>选项你告诉</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>替代</tt></span><tt>person[address][city] input</tt><span style="font-family: DejaVu Sans;"><tt>中的名字它将会在</tt></span><tt>address</tt><span style="font-family: DejaVu Sans;"><tt>和此帖有之间插入被</tt></span><tt>[]</tt><span style="font-family: DejaVu Sans;"><tt>包围的</tt></span><tt>index</tt><span style="font-family: DejaVu Sans;"><tt>。如果你通过的是一个</tt></span><tt>Active Record object</tt><span style="font-family: DejaVu Sans;"><tt>正如我们知道的</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>将会调用</tt></span><tt>_param,</tt><span style="font-family: DejaVu Sans;"><tt>它会默认返回数据库的（</tt></span><tt>city</tt><span style="font-family: DejaVu Sans;"><tt>的）</tt></span><tt>id</tt><span style="font-family: DejaVu Sans;"><tt>。这在当</tt></span><tt>Addrss</tt><span style="font-family: DejaVu Sans;"><tt>记录需要修改，的时候非常有用它能易于定位。你可以传递给其他意义的数字，字符串或者空（它将返回在创建的参数数组中）。</tt></span>

<tt>To create more intricate</tt><span style="font-family: DejaVu Sans;"><tt>复杂 </tt></span><tt>nestings, you can specify the first part of the input name (person[address] in the previous example) explicitly, for example</tt>

&lt;%= fields_for 'person[address][primary]', address, :index =&gt; address do |address_form| %&gt;

&lt;%= address_form.text_field :city %&gt;

&lt;% end %&gt;

will create inputs like

As a general rule the final input name is the concatenation of the name given to <tt>fields_for</tt>/<tt>form_for</tt>, the index value and the name of the attribute. You can also pass an <tt>:index</tt> option directly to helpers such as <tt>text_field</tt>, but it is usually less repetitive to specify this at the form builder level rather than on individual input controls.

As a shortcut you can append [] to the name and omit<span style="font-family: DejaVu Sans;">忽略 </span>the <tt>:index</tt> option. This is the same as specifying <tt>:index =&gt; address</tt> so

&lt;%= fields_for 'person[address][primary][]', address do |address_form| %&gt;

&lt;%= address_form.text_field :city %&gt;

&lt;% end %&gt;

produces exactly the same output as the previous example.
<h3><a name="forms-to-external-resources"></a>8 Forms to external resources</h3>
If you need to post some data to an external<span style="font-family: DejaVu Sans;">外部 </span>resource it is still great to build your from using rails form helpers. But sometimes you need to set an <tt>authenticity_token</tt> for this resource. You can do it by passing an <tt>:authenticity_token =&gt; 'your_external_token'</tt> parameter to the <tt>form_tag</tt> options:

&lt;%= form_tag 'http://farfar.away/form', :authenticity_token =&gt; 'external_token') do %&gt;

Form contents

&lt;% end %&gt;

Sometimes when you submit data to an external resource, like payment gateway, fields you can use in your form are limited by an external API. So you may want not to generate an <tt>authenticity_token</tt> hidden field at all. For doing this just pass <tt>false</tt> to the <tt>:authenticity_token</tt> option:

&lt;%= form_tag 'http://farfar.away/form', :authenticity_token =&gt; false) do %&gt;

Form contents

&lt;% end %&gt;

The same technique is available for the <tt>form_for</tt> too:

&lt;%= form_for @invoice, :url =&gt; external_url, :authenticity_token =&gt; 'external_token' do |f|

Form contents

&lt;% end %&gt;

Or if you don’t want to render an <tt>authenticity_token</tt> field:

&lt;%= form_for @invoice, :url =&gt; external_url, :authenticity_token =&gt; false do |f|

Form contents

&lt;% end %&gt;
<h3><a name="building-complex-forms"></a>9 Building Complex Forms</h3>
Many apps grow beyond simple forms editing a single object. For example when creating a Person you might want to allow the user to (on the same form) create multiple address records (home, work, etc.). When later editing that person the user should be able to add, remove or amend addresses as necessary. While this guide has shown you all the pieces necessary to handle this, Rails does not yet have a standard end-to-end way of accomplishing this, but many have come up with viable approaches. These include:
<ul>
	<li>As of Rails 2.3, Rails includes <a href="http://guides.rubyonrails.org/2_3_release_notes.html#nested-attributes">Nested Attributes</a> and <a href="http://guides.rubyonrails.org/2_3_release_notes.html#nested-object-forms">Nested Object Forms</a></li>
	<li>Ryan Bates’ series of Railscasts on <a href="http://railscasts.com/episodes/75">complex forms</a></li>
	<li>Handle Multiple Models in One Form from <a href="http://media.pragprog.com/titles/fr_arr/multiple_models_one_form.pdf">Advanced Rails Recipes</a></li>
	<li>Eloy Duran’s <a href="https://github.com/alloy/complex-form-examples/">complex-forms-examples</a> application</li>
	<li>Lance Ivy’s <a href="https://github.com/cainlevy/nested_assignment/tree/master">nested_assignment</a> plugin and <a href="https://github.com/cainlevy/complex-form-examples/tree/cainlevy">sample application</a></li>
	<li>James Golick’s <a href="https://github.com/jamesgolick/attribute_fu">attribute_fu</a> plugin</li>
</ul>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date>2011-12-21 23:22:45</wp:post_date>
		<wp:post_date_gmt>2011-12-21 15:22:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-form-helpers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="form"><![CDATA[Form]]></category>
		<category domain="post_tag" nicename="helpers"><![CDATA[helpers]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>577</wp:comment_id>
			<wp:comment_author><![CDATA[speed learning course]]></wp:comment_author>
			<wp:comment_author_email>ivan.newton@zoho.com</wp:comment_author_email>
			<wp:comment_author_url>http://quickstudyprogram.com/</wp:comment_author_url>
			<wp:comment_author_IP>199.101.102.28</wp:comment_author_IP>
			<wp:comment_date>2013-02-06 05:45:01</wp:comment_date>
			<wp:comment_date_gmt>2013-02-05 21:45:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[whoah this weblog is fantastic i love studying your posts.
Keep up the great work! You already know, many persons are hunting around for this info, you can aid them greatly.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1361350245.96";s:7:"message";s:39:"jhjguxin 将评论状态改为 approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jhjguxin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1360100701.41";s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:71:{s:15:"comment_post_ID";s:3:"120";s:14:"comment_author";s:21:"speed learning course";s:20:"comment_author_email";s:20:"ivan.newton@zoho.com";s:18:"comment_author_url";s:29:"http://quickstudyprogram.com/";s:15:"comment_content";s:174:"whoah this weblog is fantastic i love studying your posts.
Keep up the great work! You already know, many persons are hunting around for this info, you can aid them greatly.";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:14:"199.101.102.28";s:10:"user_agent";s:141:"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; .NET CLR 3.5.30729)";s:8:"referrer";s:58:"http://jhjguxin.sinaapp.com/2011/12/21/rails-form-helpers/";s:4:"blog";s:27:"http://jhjguxin.sinaapp.com";s:9:"blog_lang";s:5:"zh_CN";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:58:"http://jhjguxin.sinaapp.com/2011/12/21/rails-form-helpers/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:21:"speed learning course";s:10:"POST_email";s:20:"ivan.newton@zoho.com";s:8:"POST_url";s:29:"http://quickstudyprogram.com/";s:12:"POST_comment";s:174:"whoah this weblog is fantastic i love studying your posts.
Keep up the great work! You already know, many persons are hunting around for this info, you can aid them greatly.";s:11:"POST_submit";s:12:"发表评论";s:20:"POST_comment_post_ID";s:3:"120";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"1f9e959670";s:15:"SERVER_SOFTWARE";s:6:"Apache";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:14:"MEF_PROXY_ADDR";s:11:"10.67.15.12";s:11:"has_apphash";s:1:"1";s:16:"ApplimitOutOfCon";s:1:"0";s:16:"ApplimitOutOfMem";s:1:"0";s:10:"SCRIPT_URL";s:21:"/wp-comments-post.php";s:10:"SCRIPT_URI";s:48:"http://jhjguxin.sinaapp.com/wp-comments-post.php";s:20:"HTTP_X_FORWARDED_FOR";s:30:"199.101.102.28, 199.101.102.28";s:9:"HTTP_HOST";s:20:"jhjguxin.sinaapp.com";s:12:"HTTP_APPNAME";s:8:"jhjguxin";s:15:"HTTP_APPVERSION";s:1:"1";s:9:"HTTP_MCIP";s:26:"1default;1:@default:;;1::;";s:14:"HTTP_ACCESSKEY";s:10:"34y21z4k20";s:12:"HTTP_APPHASH";s:3:"311";s:14:"HTTP_MYSQLPORT";s:4:"3307";s:14:"HTTP_APPCOOKIE";s:26:"default_version=1;debug=2;";s:12:"HTTP_APPSRVC";s:19:"0000000000000000AC0";s:15:"HTTP_CONNECTION";s:5:"close";s:14:"HTTP_X_REAL_IP";s:14:"199.101.102.28";s:15:"HTTP_USER_AGENT";s:141:"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; .NET CLR 3.5.30729)";s:11:"HTTP_ACCEPT";s:129:"text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1";s:11:"HTTP_COOKIE";s:0:"";s:20:"HTTP_ACCEPT_LANGUAGE";s:2:"en";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:12:"HTTP_REFERER";s:58:"http://jhjguxin.sinaapp.com/2011/12/21/rails-form-helpers/";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:14:"CONTENT_LENGTH";s:3:"406";s:4:"PATH";s:46:"/bin:/usr/bin:/usr/ucb:/usr/bsd:/usr/local/bin";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:20:"jhjguxin.sinaapp.com";s:11:"SERVER_ADDR";s:11:"10.67.15.25";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:14:"199.101.102.28";s:13:"DOCUMENT_ROOT";s:32:"/data1/www/htdocs/311/jhjguxin/1";s:12:"SERVER_ADMIN";s:18:"saesupport@sina.cn";s:15:"SCRIPT_FILENAME";s:53:"/data1/www/htdocs/311/jhjguxin/1/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"46672";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1360100700";s:14:"HTTP_SECRETKEY";s:9:"Discarded";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>261</wp:comment_id>
			<wp:comment_author><![CDATA[Archana]]></wp:comment_author>
			<wp:comment_author_email>sabina.p_1983@gmx.de</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/profile.php?id=100003406029361</wp:comment_author_url>
			<wp:comment_author_IP>67.205.30.141</wp:comment_author_IP>
			<wp:comment_date>2012-05-26 09:55:24</wp:comment_date>
			<wp:comment_date_gmt>2012-05-26 01:55:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Here's how to do an inline style datralecion along with link_to image_tag, and with text!: image.name, :title=&gt; image.name, :height=&gt; 64px , :width=&gt; 64px ) + image.name),  url , :style=&gt; text-decoration:none;  %&gt;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:12:"1338009249.6";s:7:"message";s:33:"jhjguxin 认定这是垃圾评论";s:5:"event";s:11:"report-spam";s:4:"user";s:8:"jhjguxin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[jhjguxin]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1338994050.09";s:7:"message";s:39:"jhjguxin 将评论状态改为 approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jhjguxin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1338994031.31";s:7:"message";s:36:"jhjguxin 认定这不是垃圾评论";s:5:"event";s:10:"report-ham";s:4:"user";s:8:"jhjguxin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>675</wp:comment_id>
			<wp:comment_author><![CDATA[Its About Time Grindstone Mattseh]]></wp:comment_author>
			<wp:comment_author_email>myronrowan@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.itsabouttimemattsehgrindstone.com</wp:comment_author_url>
			<wp:comment_author_IP>66.197.128.157</wp:comment_author_IP>
			<wp:comment_date>2013-04-29 11:27:27</wp:comment_date>
			<wp:comment_date_gmt>2013-04-29 03:27:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am now not sure where you're getting your information, but good topic. I must spend a while learning much more or understanding more. Thanks for great info I was looking for this information for my mission.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1373462755.55";s:7:"message";s:39:"jhjguxin 将评论状态改为 approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jhjguxin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1367206047.88";s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:71:{s:15:"comment_post_ID";s:3:"120";s:14:"comment_author";s:33:"Its About Time Grindstone Mattseh";s:20:"comment_author_email";s:20:"myronrowan@gmail.com";s:18:"comment_author_url";s:44:"http://www.itsabouttimemattsehgrindstone.com";s:15:"comment_content";s:208:"I am now not sure where you're getting your information, but good topic. I must spend a while learning much more or understanding more. Thanks for great info I was looking for this information for my mission.";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:14:"66.197.128.157";s:10:"user_agent";s:106:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1";s:8:"referrer";s:58:"http://jhjguxin.sinaapp.com/2011/12/21/rails-form-helpers/";s:4:"blog";s:27:"http://jhjguxin.sinaapp.com";s:9:"blog_lang";s:5:"zh_CN";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:58:"http://jhjguxin.sinaapp.com/2011/12/21/rails-form-helpers/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:33:"Its About Time Grindstone Mattseh";s:10:"POST_email";s:20:"myronrowan@gmail.com";s:8:"POST_url";s:44:"http://www.itsabouttimemattsehgrindstone.com";s:12:"POST_comment";s:208:"I am now not sure where you're getting your information, but good topic. I must spend a while learning much more or understanding more. Thanks for great info I was looking for this information for my mission.";s:11:"POST_submit";s:12:"发表评论";s:20:"POST_comment_post_ID";s:3:"120";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"de30c9e440";s:15:"SERVER_SOFTWARE";s:6:"Apache";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:14:"MEF_PROXY_ADDR";s:11:"10.67.15.11";s:11:"has_apphash";s:1:"1";s:16:"ApplimitOutOfCon";s:1:"0";s:16:"ApplimitOutOfMem";s:1:"0";s:10:"SCRIPT_URL";s:21:"/wp-comments-post.php";s:10:"SCRIPT_URI";s:48:"http://jhjguxin.sinaapp.com/wp-comments-post.php";s:20:"HTTP_X_FORWARDED_FOR";s:30:"66.197.128.157, 66.197.128.157";s:9:"HTTP_HOST";s:20:"jhjguxin.sinaapp.com";s:12:"HTTP_APPNAME";s:8:"jhjguxin";s:15:"HTTP_APPVERSION";s:1:"1";s:9:"HTTP_MCIP";s:26:"1default;1::;1:@default:;;";s:14:"HTTP_ACCESSKEY";s:10:"34y21z4k20";s:12:"HTTP_APPHASH";s:3:"311";s:14:"HTTP_MYSQLPORT";s:4:"3307";s:14:"HTTP_APPCOOKIE";s:26:"default_version=1;debug=2;";s:12:"HTTP_APPSRVC";s:19:"0000000000000000AC0";s:15:"HTTP_CONNECTION";s:5:"close";s:14:"HTTP_X_REAL_IP";s:14:"66.197.128.157";s:11:"HTTP_COOKIE";s:0:"";s:15:"HTTP_USER_AGENT";s:106:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1";s:11:"HTTP_ACCEPT";s:129:"text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1";s:20:"HTTP_ACCEPT_LANGUAGE";s:2:"en";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:12:"HTTP_REFERER";s:58:"http://jhjguxin.sinaapp.com/2011/12/21/rails-form-helpers/";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:14:"CONTENT_LENGTH";s:3:"459";s:4:"PATH";s:46:"/bin:/usr/bin:/usr/ucb:/usr/bsd:/usr/local/bin";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:20:"jhjguxin.sinaapp.com";s:11:"SERVER_ADDR";s:11:"10.67.15.22";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:14:"66.197.128.157";s:13:"DOCUMENT_ROOT";s:32:"/data1/www/htdocs/311/jhjguxin/1";s:12:"SERVER_ADMIN";s:18:"saesupport@sina.cn";s:15:"SCRIPT_FILENAME";s:53:"/data1/www/htdocs/311/jhjguxin/1/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"29644";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1367206046";s:14:"HTTP_SECRETKEY";s:9:"Discarded";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>587</wp:comment_id>
			<wp:comment_author><![CDATA[Levi]]></wp:comment_author>
			<wp:comment_author_email>levivalenti@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.google.com/</wp:comment_author_url>
			<wp:comment_author_IP>23.29.56.44</wp:comment_author_IP>
			<wp:comment_date>2013-02-28 10:47:39</wp:comment_date>
			<wp:comment_date_gmt>2013-02-28 02:47:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey very nice web site!! Guy .. Beautiful .
. Wonderful .. I will bookmark your website and take 
the feeds also? I'm satisfied to search out numerous useful information right here in the put up, we want develop more strategies in this regard, thanks for sharing. . . . . .

Also visit my blog: [Levi](http://www.google.com/ "Levi")]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1362019659.66";s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:74:{s:15:"comment_post_ID";s:3:"120";s:14:"comment_author";s:4:"Levi";s:20:"comment_author_email";s:21:"levivalenti@gmail.com";s:18:"comment_author_url";s:22:"http://www.google.com/";s:15:"comment_content";s:336:"Hey very nice web site!! Guy .. Beautiful .
. Wonderful .. I will bookmark your website and take 
the feeds also? I'm satisfied to search out numerous useful information right here in the put up, we want develop more strategies in this regard, thanks for sharing. . . . . .

Also visit my blog: [Levi](http://www.google.com/ "Levi")";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:11:"23.29.56.44";s:10:"user_agent";s:67:"Mozilla/5.0 (Windows NT 5.1; rv:13.0) Gecko/20100101 Firefox/13.0.1";s:8:"referrer";s:58:"http://jhjguxin.sinaapp.com/2011/12/21/rails-form-helpers/";s:4:"blog";s:27:"http://jhjguxin.sinaapp.com";s:9:"blog_lang";s:5:"zh_CN";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:58:"http://jhjguxin.sinaapp.com/2011/12/21/rails-form-helpers/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:4:"Levi";s:10:"POST_email";s:21:"levivalenti@gmail.com";s:8:"POST_url";s:22:"http://www.google.com/";s:12:"POST_comment";s:336:"Hey very nice web site!! Guy .. Beautiful .
. Wonderful .. I will bookmark your website and take 
the feeds also? I'm satisfied to search out numerous useful information right here in the put up, we want develop more strategies in this regard, thanks for sharing. . . . . .

Also visit my blog: [Levi](http://www.google.com/ "Levi")";s:11:"POST_submit";s:12:"发表评论";s:20:"POST_comment_post_ID";s:3:"120";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"d2d2003fe5";s:15:"SERVER_SOFTWARE";s:6:"Apache";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:14:"MEF_PROXY_ADDR";s:11:"10.67.15.11";s:11:"has_apphash";s:1:"1";s:16:"ApplimitOutOfCon";s:1:"0";s:16:"ApplimitOutOfMem";s:1:"0";s:10:"SCRIPT_URL";s:21:"/wp-comments-post.php";s:10:"SCRIPT_URI";s:48:"http://jhjguxin.sinaapp.com/wp-comments-post.php";s:20:"HTTP_X_FORWARDED_FOR";s:24:"23.29.56.44, 23.29.56.44";s:9:"HTTP_HOST";s:20:"jhjguxin.sinaapp.com";s:12:"HTTP_APPNAME";s:8:"jhjguxin";s:15:"HTTP_APPVERSION";s:1:"1";s:9:"HTTP_MCIP";s:26:"1default;1::;1:@default:;;";s:14:"HTTP_ACCESSKEY";s:10:"34y21z4k20";s:12:"HTTP_APPHASH";s:3:"311";s:14:"HTTP_MYSQLPORT";s:4:"3307";s:14:"HTTP_APPCOOKIE";s:26:"default_version=1;debug=2;";s:12:"HTTP_APPSRVC";s:19:"0000000000000000AC0";s:15:"HTTP_CONNECTION";s:5:"close";s:14:"HTTP_X_REAL_IP";s:11:"23.29.56.44";s:11:"HTTP_COOKIE";s:0:"";s:15:"HTTP_USER_AGENT";s:67:"Mozilla/5.0 (Windows NT 5.1; rv:13.0) Gecko/20100101 Firefox/13.0.1";s:11:"HTTP_ACCEPT";s:129:"text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1";s:20:"HTTP_ACCEPT_LANGUAGE";s:2:"en";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:12:"HTTP_REFERER";s:58:"http://jhjguxin.sinaapp.com/2011/12/21/rails-form-helpers/";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:14:"CONTENT_LENGTH";s:3:"585";s:18:"HTTP_CACHE_CONTROL";s:14:"max-age=259200";s:4:"PATH";s:46:"/bin:/usr/bin:/usr/ucb:/usr/bsd:/usr/local/bin";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:20:"jhjguxin.sinaapp.com";s:11:"SERVER_ADDR";s:11:"10.67.15.25";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:11:"23.29.56.44";s:13:"DOCUMENT_ROOT";s:32:"/data1/www/htdocs/311/jhjguxin/1";s:12:"SERVER_ADMIN";s:18:"saesupport@sina.cn";s:15:"SCRIPT_FILENAME";s:53:"/data1/www/htdocs/311/jhjguxin/1/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"13081";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:15:"SenseWordNumber";s:1:"1";s:9:"SenseWord";s:2:"sf";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1362019658";s:14:"HTTP_SECRETKEY";s:9:"Discarded";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1362724723.57";s:7:"message";s:39:"jhjguxin 将评论状态改为 approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jhjguxin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Action Controller Overview</title>
		<link></link>
		<pubDate>Mon, 26 Dec 2011 16:24:51 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=123</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Controllers</h3>
<dl><dt>Action Controller Overview</dt><dd>This guide covers how controllers work and how they fit into the request cycle in your application. It includes sessions, filters, and cookies, data streaming, and dealing with exceptions raised by a request, among other topics.</dd><dt>Rails Routing from the Outside In</dt><dd>This guide covers the user-facing features of Rails routing. If you want to understand how to use routing in your own Rails applications, start here.</dd></dl>
<h2>Action Controller Overview</h2>
In this guide you will learn how controllers work and how they fit into the request cycle in your application. After reading this guide, you will be able to:

<span style="font-family: DejaVu Sans;">在这个</span>gudie<span style="font-family: DejaVu Sans;">中你将会学习到</span>controllers<span style="font-family: DejaVu Sans;">是怎样工作的以及它们在你的应用程序中是怎用配合完成</span>request cycle<span style="font-family: DejaVu Sans;">。</span>
<ul>
	<li>Follow the flow of a request through a controller</li>
</ul>
<span style="font-family: DejaVu Sans;">跟随</span>requset<span style="font-family: DejaVu Sans;">流向一个</span>controller
<ul>
	<li>Understand why and how to store data in the session or cookies</li>
</ul>
<span style="font-family: DejaVu Sans;">明白在会话和</span>cookies<span style="font-family: DejaVu Sans;">中为什么以及怎样存储</span>data
<ul>
	<li>Work with filters to execute code during request processing</li>
</ul>
<span style="font-family: DejaVu Sans;">使用</span>filters<span style="font-family: DejaVu Sans;">来工作在</span>request<span style="font-family: DejaVu Sans;">过程中执行</span>code
<ul>
	<li>Use Action Controller’s built-in HTTP authentication</li>
</ul>
<span style="font-family: DejaVu Sans;">使用</span>Action Controller<span style="font-family: DejaVu Sans;">的内置的</span>HTTP<span style="font-family: DejaVu Sans;">认证</span>
<ul>
	<li>Stream data directly to the user’s browser</li>
</ul>
Stream data<span style="font-family: DejaVu Sans;">直接（到）用户的浏览器</span>
<ul>
	<li>Filter sensitive parameters so they do not appear in the application’s log</li>
</ul>
<span style="font-family: DejaVu Sans;">过滤敏感参数使得它们不会在应用程序的</span>log<span style="font-family: DejaVu Sans;">中出现</span>
<ul>
	<li>Deal with exceptions that may be raised during request processing</li>
</ul>
<span style="font-family: DejaVu Sans;">处理可能在</span>request<span style="font-family: DejaVu Sans;">进程之间抛出的意外</span>
<h3><a name="what-does-a-controller-do"></a> 1 What Does a Controller Do?</h3>
Action Controller is the C in MVC. After routing has determined which controller to use for a request, your controller is responsible for making sense of the request and producing the appropriate output. Luckily, Action Controller does most of the groundwork for you and uses smart conventions to make this as straightforward as possible.
Action Controller<span style="font-family: DejaVu Sans;">是</span>MVC<span style="font-family: DejaVu Sans;">中的</span>C<span style="font-family: DejaVu Sans;">。在</span>routing<span style="font-family: DejaVu Sans;">已经决定了对于一个</span>request<span style="font-family: DejaVu Sans;">使用哪个</span>controller<span style="font-family: DejaVu Sans;">，你的</span>controller<span style="font-family: DejaVu Sans;">负责请求的实际意图并且产生合适的输出。幸运的是，</span>Action Controller<span style="font-family: DejaVu Sans;">为了做了大多数的基础工作并且使用智能方便的（方式）使得</span>C<span style="font-family: DejaVu Sans;">能够尽可能的直接干脆。</span>

For most conventional RESTful applications, the controller will receive the request (this is invisible to you as the developer), fetch or save data from a model and use a view to create HTML output. If your controller needs to do things a little differently, that’s not a problem, this is just the most common way for a controller to work.

<span style="font-family: DejaVu Sans;">对于大多数的传统的</span>RESTful<span style="font-family: DejaVu Sans;">应用程序，</span>controller<span style="font-family: DejaVu Sans;">将会收到请求（这对于开发者你来说是无形的），从一个</span>model<span style="font-family: DejaVu Sans;">刷新或者</span>savee<span style="font-family: DejaVu Sans;">数据或者使用一个视图来创建</span>HTML<span style="font-family: DejaVu Sans;">输出。如果你的</span>controller<span style="font-family: DejaVu Sans;">需要做些略微不同的事情，这不是问题，这仅仅是</span>controller<span style="font-family: DejaVu Sans;">在工作中大多数通常的方式。</span>

A controller can thus be thought of as a middle man between models and views. It makes the model data available to the view so it can display that data to the user, and it saves or updates data from the user to the model.

<span style="font-family: DejaVu Sans;">一个</span>controller<span style="font-family: DejaVu Sans;">能够这样，作为在</span>models<span style="font-family: DejaVu Sans;">和</span>views<span style="font-family: DejaVu Sans;">之间的中间人。它使得</span>model<span style="font-family: DejaVu Sans;">数据可以用户</span>view<span style="font-family: DejaVu Sans;">因此它可以显示这些数据给用户，同时它从用户保存或者更新数据到</span>model<span style="font-family: DejaVu Sans;">。</span>

For more details on the routing process, see <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/routing.html">Rails</a></span></span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/routing.html">Routing</a></span></span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/routing.html">from</a></span></span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/routing.html">the</a></span></span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/routing.html">Outside</a></span></span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/routing.html">In</a></span></span>.
<h3><a name="methods-and-actions"></a>2 Methods and Actions</h3>
A controller is a Ruby class which inherits from <tt>ApplicationController</tt> and has methods just like any other class. When your application receives a request, the routing will determine which controller and action to run, then Rails creates an instance of that controller and runs the method with the same name as the action.

<span style="font-family: DejaVu Sans;">一个</span>controller<span style="font-family: DejaVu Sans;">是一个</span>Ruby<span style="font-family: DejaVu Sans;">类它继承至</span><tt>ApplicationController</tt><span style="font-family: DejaVu Sans;"><tt>同时像其他类一样它也有方法。当你的应用程序收到一个</tt></span><tt>request</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>routing</tt><span style="font-family: DejaVu Sans;"><tt>将会决定那个</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>会运行，然后</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>创建一个</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>的实例同时运行与</tt></span><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>名字相同的方法。</tt></span>

class ClientsController &lt; ApplicationController

def new

end

end

As an example, if a user goes to <tt>/clients/new</tt> in your application to add a new client, Rails will create an instance of <tt>ClientsController</tt> and run the <tt>new</tt> method. Note that the empty method from the example above could work just fine because Rails will by default render the <tt>new.html.erb</tt> view unless the action says otherwise. The <tt>new</tt> method could make available to the view a <tt>@client</tt> instance variable by creating a new <tt>Client</tt>:

<span style="font-family: DejaVu Sans;">正如一个例子，如果一个</span>user<span style="font-family: DejaVu Sans;">导航至</span><tt>/clients/new</tt> <span style="font-family: DejaVu Sans;">在你的应用程序中添加一个</span>new client<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">将会创建一个</span><tt>ClientsController</tt><span style="font-family: DejaVu Sans;"><tt>的实例并且运行</tt></span><tt>new</tt><span style="font-family: DejaVu Sans;"><tt>方法。注意例子中空的方法完全可以工作因为</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>将会默认</tt></span><tt>render</tt><span style="font-family: DejaVu Sans;"><tt>名称为</tt><tt></tt></span><tt>new.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>的视图除非</tt></span><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>指定了另外的。</tt></span><tt>new</tt><span style="font-family: DejaVu Sans;"><tt>方法通过创建一个新的</tt></span><tt>Client</tt><span style="font-family: DejaVu Sans;"><tt>将使得可以查看</tt></span><tt>@client</tt><span style="font-family: DejaVu Sans;"><tt>实例变量。</tt></span>

def new

@client = Client.new

end

The <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/layouts_and_rendering.html">Layouts</a></span></span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/layouts_and_rendering.html">&amp;</a></span></span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/layouts_and_rendering.html">Rendering</a></span></span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/layouts_and_rendering.html">Guide</a></span></span> explains this in more detail.

<tt>ApplicationController</tt> inherits from <tt>ActionController::Base</tt>, which defines a number of helpful methods. This guide will cover some of these, but if you’re curious to see what’s in there, you can see all of them in the API documentation or in the source itself.

<tt>ApplicationController</tt><span style="font-family: DejaVu Sans;"><tt>继承至</tt><tt></tt></span><tt>ActionController::Base</tt><span style="font-family: DejaVu Sans;"><tt>，器定义了很多</tt></span><tt>helpful</tt><span style="font-family: DejaVu Sans;"><tt>方法。这个教材将会涵盖这些，但是如果你好奇与其中有些什么，你可以在</tt></span><tt>API</tt><span style="font-family: DejaVu Sans;"><tt>文档中或者他的源代码中看到所有的方法。</tt></span>

Only public methods are callable as actions. It is a best practice to lower the visibility of methods which are not intended to be actions, like auxiliary methods or filters.

<span style="font-family: DejaVu Sans;">对于</span>action<span style="font-family: DejaVu Sans;">只有公共的方法才是可调用的。它是低敏感度方法的最好实践，而这些对</span>actions<span style="font-family: DejaVu Sans;">没有义务，像辅助方法或者过滤器。</span>
<h3><a name="parameters"></a>3 Parameters</h3>
You will probably want to access data sent in by the user or other parameters in your controller actions. There are two kinds of parameters possible in a web application. The first are parameters that are sent as part of the URL, called query string parameters. The query string is everything after “?” in the URL. The second type of parameter is usually referred to as POST data. This information usually comes from an HTML form which has been filled in by the user. It’s called POST data because it can only be sent as part of an HTTP POST request. Rails does not make any distinction between query string parameters and POST parameters, and both are available in the <tt>params</tt> hash in your controller:

<span style="font-family: DejaVu Sans;">在你的</span>controller action<span style="font-family: DejaVu Sans;">中你可能想访问用户或者其他参数发送的数据。一个</span>web<span style="font-family: DejaVu Sans;">应用程序中这里可能有两种参数。第一种是作为</span>URL<span style="font-family: DejaVu Sans;">一部分发送的参数，叫做</span>query string parameters<span style="font-family: DejaVu Sans;">（字符串查询参数）。查询字符串是在</span>URL<span style="font-family: DejaVu Sans;">的<span style="font-family: Liberation Serif,Times New Roman,serif;">”</span></span>?”<span style="font-family: DejaVu Sans;">后面的所有字符。第二种类型的参数通常被简称为</span>POST data<span style="font-family: DejaVu Sans;">。这类信息通常来至于一个被用户填写的</span>HTML<span style="font-family: DejaVu Sans;">表单。它被称为</span>POST data<span style="font-family: DejaVu Sans;">因为它仅能通过</span>HTTP POST <span style="font-family: DejaVu Sans;">请求的一部分发送。</span>Rails<span style="font-family: DejaVu Sans;">在字符串查询参数和</span>POST data<span style="font-family: DejaVu Sans;">参数之间不做任何区分，它们在你的</span>controller<span style="font-family: DejaVu Sans;">的</span>params<span style="font-family: DejaVu Sans;">字典中都是可用的。</span>

class ClientsController &lt; ActionController::Base

# This action uses query string parameters because it gets run

# by an HTTP GET request, but this does not make any difference

# to the way in which the parameters are accessed. The URL for

# this action would look like this in order to list activated

# clients: /clients?status=activated

def index

if params[:status] == "activated"

@clients = Client.activated

else

@clients = Client.unactivated

end

end

&nbsp;

# This action uses POST parameters. They are most likely coming

# from an HTML form which the user has submitted. The URL for

# this RESTful request will be "/clients", and the data will be

# sent as part of the request body.

def create

@client = Client.new(params[:client])

if @client.save

redirect_to @client

else

# This line overrides the default rendering behavior, which

# would have been to render the "create" view.

render :action =&gt; "new"

end

end

end
<h4><a name="hash-and-array-parameters"></a>3.1 Hash and Array Parameters</h4>
The <tt>params</tt> hash is not limited to one-dimensional keys and values. It can contain arrays and (nested) hashes. To send an array of values, append an empty pair of square brackets “[]” to the key name:

params hash<span style="font-family: DejaVu Sans;">字典不限于一维的关键字和值。它能够包含数组和（嵌套）字典。要发送一个数组值，添加一个空的<span style="font-family: Liberation Serif,Times New Roman,serif;">”</span></span>[]”<span style="font-family: DejaVu Sans;">给</span>key name<span style="font-family: DejaVu Sans;">：</span>
<pre>GET /clients?ids[]=1&amp;ids[]=2&amp;ids[]=3</pre>
<strong>The</strong><strong> </strong><strong>actual</strong><strong> </strong><strong>URL</strong><strong> </strong><strong>in</strong><strong> </strong><strong>this</strong><strong> </strong><strong>example</strong><strong> </strong><strong>will</strong><strong> </strong><strong>be</strong><strong> </strong><strong>encoded</strong><strong> </strong><strong>as</strong><strong> “</strong><strong>/clients?ids%5b%5d=1&amp;ids%5b%5d=2&amp;ids%5b%5d=3</strong><strong>” </strong><strong>as</strong><strong> “</strong><strong>[</strong><strong>” </strong><strong>and</strong><strong> “</strong><strong>]</strong><strong>” </strong><strong>are</strong><strong> </strong><strong>not</strong><strong> </strong><strong>allowed</strong><strong> </strong><strong>in</strong><strong> </strong><strong>URLs.</strong><strong> </strong>Most of the time you don’t have to worry about this because the browser will take care of it for you, and Rails will decode it back when it receives it, but if you ever find yourself having to send those requests to the server manually you have to keep this in mind.<span style="font-family: DejaVu Sans;">但是如果你发现你自己不得不手动的发送这些请求到服务器你必须注意。</span>

The value of <tt>params[:ids]</tt> will now be <tt>["1",</tt><tt> </tt><tt>"2",</tt><tt> </tt><tt>"3"]</tt>. <strong>Note</strong><strong> </strong><strong>that</strong><strong> </strong><strong>parameter</strong><strong> </strong><strong>values</strong><strong> </strong><strong>are</strong><strong> </strong><strong>always</strong><strong> </strong><strong>strings;</strong><strong> </strong>Rails makes no attempt to guess or cast the type.

To send a hash you include the key name inside the brackets:

&lt;form accept-charset="UTF-8" action="/clients" method="post"&gt;

&lt;input type="text" name="client[name]" value="Acme" /&gt;

&lt;input type="text" name="client[phone]" value="12345" /&gt;

&lt;input type="text" name="client[address][postcode]" value="12345" /&gt;

&lt;input type="text" name="client[address][city]" value="Carrot City" /&gt;

&lt;/form&gt;

When this form is submitted, the <strong>value</strong><strong> </strong><strong>of</strong><strong> </strong><tt><strong>params[:client]</strong></tt> will be <tt>{"name"</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>Acme</tt><tt>”</tt><tt>,</tt><tt> “</tt><tt>phone</tt><tt>” </tt><tt>=&gt;</tt><tt> “</tt><tt>12345</tt><tt>”</tt><tt>,</tt><tt> “</tt><tt>address</tt><tt>” </tt><tt>=&gt;</tt><tt> </tt><tt>{"postcode"</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>12345</tt><tt>”</tt><tt>,</tt><tt> “</tt><tt>city</tt><tt>” </tt><tt>=&gt;</tt><tt> “</tt><tt>Carrot</tt><tt> </tt><tt>City</tt><tt>”</tt><tt>}}</tt>. Note the nested hash in <tt>params[:client][:address]</tt>.

Note that the <tt>params</tt> hash is actually an instance of <tt>HashWithIndifferentAccess</tt> from Active Support, which acts like a hash that lets you use symbols and strings interchangeably<span style="font-family: DejaVu Sans;">互换</span>as keys.
<h4><a name="json-xml-parameters"></a>3.2 JSON/XML parameters</h4>
If you’re writing a web service application, you might find yourself more comfortable on accepting parameters in JSON or XML format. Rails will automatically convert your parameters into <tt>params</tt> hash, which you’ll be able to access like you would normally do with form data.

<span style="font-family: DejaVu Sans;">如果你打算写一个</span>web<span style="font-family: DejaVu Sans;">服务程序，你可能会发现使用</span>JSON<span style="font-family: DejaVu Sans;">或者</span>XML<span style="font-family: DejaVu Sans;">格式接收参数会更加舒服。</span>Rails<span style="font-family: DejaVu Sans;">将会自动的转换你的参数到</span>params hash<span style="font-family: DejaVu Sans;">字典中，其中你将可以像正常表单数据那样接收数据。</span>

So for example, if you are sending this JSON parameter:
<pre>{ "company": { "name": "acme", "address": "123 Carrot Street" } }</pre>
You’ll get <tt>params[:company]</tt> as <tt>{</tt><tt> </tt><tt>:name</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>acme</tt><tt>”</tt><tt>,</tt><tt> “</tt><tt>address</tt><tt>” </tt><tt>=&gt;</tt><tt> “</tt><tt>123</tt><tt> </tt><tt>Carrot</tt><tt> </tt><tt>Street</tt><tt>” </tt><tt>}</tt>.

Also, if you’ve turned on <tt>config.wrap_parameters</tt> in your initializer or calling <tt>wrap_parameters</tt> in your controller, you can safely omit the root element in the JSON/XML parameter. The parameters will be cloned and wrapped in the key according to your controller’s name by default. So the above parameter can be written as:

<span style="font-family: DejaVu Sans;">同样，如果你已经打开</span><tt>config.wrap_parameters</tt><span style="font-family: DejaVu Sans;"><tt>在你的</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>中初始化或者调用</tt><tt></tt></span><tt>wrap_parameters</tt><span style="font-family: DejaVu Sans;"><tt>，在</tt></span><tt>JSON/XML</tt><span style="font-family: DejaVu Sans;"><tt>参数中你可以安全的忽略</tt></span><tt>root</tt><tt> </tt><tt>element</tt><span style="font-family: DejaVu Sans;"><tt>。参数将会克隆和包装在</tt></span><tt>key</tt><span style="font-family: DejaVu Sans;"><tt>默认会依照你的</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>。因此完整的参数可以这样写：</tt></span>
<pre><tt>{</tt><tt> </tt><tt>"name":</tt><tt> </tt><tt>"acme",</tt><tt> </tt><tt>"address":</tt><tt> </tt><tt>"123</tt><tt> </tt><tt>Carrot</tt><tt> </tt><tt>Street"</tt><tt> </tt><tt>}</tt></pre>
<tt>And</tt><tt> </tt><tt>assume</tt><span style="font-family: DejaVu Sans;"><tt>假设</tt><tt></tt></span><tt>that</tt><tt> </tt><tt>you</tt><tt>’</tt><tt>re</tt><tt> </tt><tt>sending</tt><tt> </tt><tt>the</tt><tt> </tt><tt>data</tt><tt> </tt><tt>to</tt><tt> </tt><tt>CompaniesController,</tt><tt> </tt><tt>it</tt><tt> </tt><tt>would</tt><tt> </tt><tt>then</tt><tt> </tt><tt>be</tt><tt> </tt><tt>wrapped</tt><tt> </tt><tt>in</tt><tt> </tt><tt>:company</tt><tt> </tt><tt>key</tt><tt> </tt><tt>like</tt><tt> </tt><tt>this:</tt>

{ :name =&gt; "acme", :address =&gt; "123 Carrot Street", :company =&gt; { :name =&gt; "acme", :address =&gt; "123 Carrot Street" }}

You can customize the name of the key or specific parameters you want to wrap by consulting the <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://api.rubyonrails.org/classes/ActionController/ParamsWrapper.html">API</a></span></span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://api.rubyonrails.org/classes/ActionController/ParamsWrapper.html">documentation</a></span></span>
<h4><a name="routing-parameters"></a>3.3 Routing Parameters</h4>
The <tt>params</tt> hash will always contain the <tt>:controller</tt> and <tt>:action</tt> keys, but you should use the methods <tt>controller_name</tt> and <tt>action_name</tt> instead to access these values. Any other parameters defined by the routing, such as <tt>:id</tt> will also be available. As an example, consider a listing of clients where the list can show either active or inactive clients. We can add a route which captures the <tt>:status</tt> parameter in a “pretty” URL:

params hash<span style="font-family: DejaVu Sans;">字典总会包含关键字</span><tt>:controller</tt> and <tt>:action</tt><span style="font-family: DejaVu Sans;"><tt>，但是你应该使用方法</tt><tt></tt></span><tt>controller_name</tt><tt> </tt><tt>and</tt><tt> </tt><tt>action_name</tt><span style="font-family: DejaVu Sans;"><tt>作为替代访问这些值。也有一些其他的值被</tt></span><tt>routing</tt><span style="font-family: DejaVu Sans;"><tt>定义，例如</tt></span><tt>:id</tt><span style="font-family: DejaVu Sans;"><tt>也是可以的。例如，思考一个</tt></span><tt>clients</tt><span style="font-family: DejaVu Sans;"><tt>的列表能够显示</tt></span><tt>active</tt><span style="font-family: DejaVu Sans;"><tt>或者</tt></span><tt>inactive</tt><tt> </tt><tt>client</tt><span style="font-family: DejaVu Sans;"><tt>。我们可以添加一个</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>它会捕获在</tt><tt></tt></span><tt>a</tt><tt> “</tt><tt>pretty</tt><tt>” </tt><tt>URL</tt><span style="font-family: DejaVu Sans;"><tt>（一个漂亮的</tt></span><tt>URL</tt><span style="font-family: DejaVu Sans;"><tt>）中的</tt></span><tt>:status</tt><span style="font-family: DejaVu Sans;"><tt>参数：</tt></span>

match '/clients/:status' =&gt; 'clients#index', :foo =&gt; "bar"

In this case, when a user opens the URL <tt>/clients/active</tt>, <tt>params[:status]</tt> will be set to “active”. When this route is used, <tt>params[:foo]</tt> will also be set to “bar” <strong>just</strong><strong> </strong><strong>like</strong><strong> </strong><strong>it</strong><strong> </strong><strong>was</strong><strong> </strong><strong>passed</strong><strong> </strong><strong>in</strong><strong> </strong><strong>the</strong><strong> </strong><strong>query</strong><strong> </strong><strong>string.</strong><strong> </strong>In the same way <tt>params[:action]</tt> will contain “index”.
<h4><a name="default_url_options"></a>3.4 <tt>default_url_options</tt></h4>
You can set global default parameters that will be used <strong>when</strong><strong> </strong><strong>generating</strong><strong> </strong><strong>URLs</strong><strong> </strong><strong>with</strong><strong> </strong><tt><strong>default_url_options</strong></tt>. To do this, define a method with that name in your controller:

class ApplicationController &lt; ActionController::Base

# The options parameter is the hash passed in to 'url_for'

def default_url_options(options)

{:locale =&gt; I18n.locale}

end

end

These options will be used as a starting-point when generating URLs, so it’s possible they’ll be overridden by <tt>url_for</tt>. Because this method is defined in the controller, you can define it on <tt>ApplicationController</tt> so it would be used for all URL generation, or you could define it on only one controller for all URLs generated there.
<h3><a name="session"></a>4 Session<span style="font-family: WenQuanYi Micro Hei;">会话</span></h3>
Your application has a session for each user in which you can store small amounts of data that will be persisted between requests. <strong>The</strong><strong> </strong><strong>session</strong><strong> </strong><strong>is</strong><strong> </strong><strong>only</strong><strong> </strong><strong>available</strong><strong> </strong><strong>in</strong><strong> </strong><strong>the</strong><strong> </strong><strong>controller</strong><strong> </strong><strong>and</strong><strong> </strong><strong>the</strong><strong> </strong><strong>view</strong><strong> </strong><strong>and</strong><strong> </strong><strong>can</strong><strong> </strong><strong>use</strong><strong> </strong><strong>one</strong><strong> </strong><strong>of</strong><strong> </strong><strong>a</strong><strong> </strong><strong>number</strong><strong> </strong><strong>of</strong><strong> </strong><strong>different</strong><strong> </strong><strong>storage</strong><strong> </strong><strong>mechanisms</strong>:

<span style="font-family: DejaVu Sans;">你的应用程序对每一位用户都有一个会话通过它你可以存储少量的数据这会将</span>request<span style="font-family: DejaVu Sans;">区分开来。</span>
<ul>
	<li>CookieStore – Stores everything on the client.</li>
	<li>DRbStore – Stores the data on a DRb server.</li>
	<li>MemCacheStore – Stores the data in a memcache.</li>
	<li>ActiveRecordStore – Stores the data in a database using Active Record.</li>
</ul>
All session stores use a cookie to store a unique ID for each session (you must use a cookie, Rails will not allow you to pass the session ID in the URL as this is less secure).

<span style="font-family: DejaVu Sans;">每个会话使用一个</span>cookie<span style="font-family: DejaVu Sans;">存储并且每个会话都有一个独特的</span>ID<span style="font-family: DejaVu Sans;">（你必须使用一个</span>cookie<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">不允许你在</span>URL<span style="font-family: DejaVu Sans;">中传送会话</span>ID<span style="font-family: DejaVu Sans;">因为这样不安全）。</span>

For most stores this ID is used to look up the session data on the server, e.g. in a database table. There is one exception, and that is the default and recommended session store – the CookieStore – which stores all session data in the cookie itself (the ID is still available to you if you need it). This has the advantage of being very lightweight and it requires zero setup in a new application in order to use the session. The cookie data is cryptographically signed to make it tamper-proof, but it is not encrypted, so anyone with access to it can read its contents but not edit it (Rails will not accept it if it has been edited).

<a name="result_box"></a><span style="font-family: DejaVu Sans;">大多数（时候）存储这个</span>ID<span style="font-family: DejaVu Sans;">是用来在</span>server<span style="font-family: DejaVu Sans;">上面查找</span>session data<span style="font-family: DejaVu Sans;">，例如，存放在一个数据库</span>table<span style="font-family: DejaVu Sans;">中。这里有一个例外，并且这是默认以及推荐的</span>session<span style="font-family: DejaVu Sans;">存储</span>-CookieStore-<span style="font-family: DejaVu Sans;">它存储所有的</span>session<span style="font-family: DejaVu Sans;">数据在它的</span>cookie<span style="font-family: DejaVu Sans;">中（如果你需要</span>ID<span style="font-family: DejaVu Sans;">同样是可用的）。这里的优势是十分轻量级并且在一个新应用程序中使用</span>session<span style="font-family: DejaVu Sans;">是零安装。</span>cookie<span style="font-family: DejaVu Sans;">数据以加密签名的方式以防篡改，但是它没有将内容译成迷文，因此任何人访问它都可以阅读它的内容但是不能编辑它（</span>Rails<span style="font-family: DejaVu Sans;">将不会接受被编辑过的</span>cookie<span style="font-family: DejaVu Sans;">）。</span>

<strong>The</strong><strong> </strong><strong>CookieStore</strong><strong> </strong><strong>can</strong><strong> </strong><strong>store</strong><strong> </strong><strong>around</strong><strong> </strong><strong>4kB</strong><strong> </strong><strong>of</strong><strong> </strong><strong>data</strong><strong> — </strong><strong>much</strong><strong> </strong><strong>less</strong><strong> </strong><strong>than</strong><strong> </strong><strong>the</strong><strong> </strong><strong>others</strong><strong> — </strong><strong>but</strong><strong> </strong><strong>this</strong><strong> </strong><strong>is</strong><strong> </strong><strong>usually</strong><strong> </strong><strong>enough.</strong><strong> </strong>Storing large amounts of data in the session is discouraged no matter which session store your application uses. You should especially avoid storing complex objects (anything other than basic Ruby objects, the most common example being model instances) in the session, as the server might not be able to reassemble them between requests, which will result in an error.

CookieStore<span style="font-family: DejaVu Sans;">能够存储大约</span>4KB<span style="font-family: DejaVu Sans;">的数据<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>远少于其他<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>但是这通常足够。在你应用程序使用的</span>session<span style="font-family: DejaVu Sans;">中，存储大量的数据是无比泄气的。你应该尤其避免存储复杂的对象（任何其他的</span>Ruby<span style="font-family: DejaVu Sans;">基本对象，最普遍的例子是</span>model<span style="font-family: DejaVu Sans;">实例）在</span>session<span style="font-family: DejaVu Sans;">，因为</span>server<span style="font-family: DejaVu Sans;">可能不能在不同的请求间重组它们，结果它将得到错误。</span>

Read more about session storage in the <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/security.html">Security</a></span></span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/security.html">Guide</a></span></span>.

If you need a different session storage mechanism, you can change it in the <tt>config/initializers/session_store.rb</tt> file:

<span style="font-family: DejaVu Sans;">如果你需要一个不同的</span>session<span style="font-family: DejaVu Sans;">存储机制，你可以在这里更改</span><tt>config/initializers/session_store.rb</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

# Use the database for sessions instead of the cookie-based default,

# which shouldn't be used to store highly confidential information

# (create the session table with "script/rails g session_migration")

# YourApp::Application.config.session_store :active_record_store

Rails sets up a session key (the name of the cookie) when signing the session data. These can also be changed in <tt>config/initializers/session_store.rb</tt>:

Rails<span style="font-family: DejaVu Sans;">当注册</span>session data<span style="font-family: DejaVu Sans;">的时候会设置一个</span>session key(cookie<span style="font-family: DejaVu Sans;">的名字</span>)<span style="font-family: DejaVu Sans;">。也可以在这里修改</span><tt>config/initializers/session_store.rb</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

# Be sure to restart your server when you modify this file.

&nbsp;

YourApp::Application.config.session_store :cookie_store, :key =&gt; '_your_app_session'

You can also pass a <tt>:domain</tt> key and specify the domain name for the cookie:

<span style="font-family: DejaVu Sans;">你也可以通过一个</span>:domain<span style="font-family: DejaVu Sans;">关键字指定</span>cookie<span style="font-family: DejaVu Sans;">的域名：</span>

# Be sure to restart your server when you modify this file.

&nbsp;

YourApp::Application.config.session_store :cookie_store, :key =&gt; '_your_app_session', :domain =&gt; ".example.com"

Rails sets up (for the CookieStore) a secret key<span style="font-family: DejaVu Sans;">密钥</span>used for signing the session data. This can be changed in <tt>config/initializers/secret_token.rb</tt>

# Be sure to restart your server when you modify this file.

&nbsp;

# Your secret key for verifying the integrity of signed cookies.

# If you change this key, all old signed cookies will become invalid!

# Make sure the secret is at least 30 characters and all random,

# no regular words or you'll be exposed to dictionary attacks.

YourApp::Application.config.secret_token = '49d3f3de9ed86c74b94ad6bd0...'

Changing the secret when using the <tt>CookieStore</tt> will invalidate<span style="font-family: DejaVu Sans;">废除</span>all existing sessions.

<span style="font-family: DejaVu Sans;">当使用</span>CookieStore<span style="font-family: DejaVu Sans;">的时候改变密钥将会废除所有存在的</span>sessions<span style="font-family: DejaVu Sans;">。</span>
<h4><a name="accessing-the-session"></a>4.1 Accessing the Session</h4>
In your controller you can access the session through the <tt>session</tt> instance method.

<span style="font-family: DejaVu Sans;">在你的</span>controller<span style="font-family: DejaVu Sans;">你可以访问</span>session<span style="font-family: DejaVu Sans;">通过</span>session<span style="font-family: DejaVu Sans;">实例方法。</span>

<strong>Sessions</strong><strong> </strong><strong>are</strong><strong> </strong><strong>lazily</strong><strong> </strong><strong>loaded.</strong><strong> </strong><strong>If</strong><strong> </strong><strong>you</strong><strong> </strong><strong>don</strong><strong>’</strong><strong>t</strong><strong> </strong><strong>access</strong><strong> </strong><strong>sessions</strong><strong> </strong><strong>in</strong><strong> </strong><strong>your</strong><strong> </strong><strong>action</strong><strong>’</strong><strong>s</strong><strong> </strong><strong>code,</strong><strong> </strong><strong>they</strong><strong> </strong><strong>will</strong><strong> </strong><strong>not</strong><strong> </strong><strong>be</strong><strong> </strong><strong>loaded.</strong> Hence<span style="font-family: DejaVu Sans;">因此</span>you will never need to disable sessions, just not accessing them will do the job.

Session values are stored using key/value pairs like a hash:

session<span style="font-family: DejaVu Sans;">的值使用</span>key/value<span style="font-family: DejaVu Sans;">对存储就像一个</span>hash<span style="font-family: DejaVu Sans;">字典：</span>

class ApplicationController &lt; ActionController::Base

&nbsp;

private

&nbsp;

# Finds the User with the ID stored in the session with the key

# :current_user_id This is a common way to handle user login in

# a Rails application; logging in sets the session value and

# logging out removes it.

def current_user

@_current_user ||= session[:current_user_id] &amp;&amp;

User.find_by_id(session[:current_user_id])

end

end

To store something in the session, just assign it to the key like a hash:

<span style="font-family: DejaVu Sans;">要存储一些信息在</span>session<span style="font-family: DejaVu Sans;">中，仅仅需要将其指派给</span>key<span style="font-family: DejaVu Sans;">就像一个</span>hash<span style="font-family: DejaVu Sans;">字典一样：</span>

class LoginsController &lt; ApplicationController

# "Create" a login, aka "log the user in"

def create

if user = User.authenticate(params[:username], params[:password])

# Save the user ID in the session so it can be used in

# subsequent requests

session[:current_user_id] = user.id

redirect_to root_url

end

end

end

To remove something from the session, assign that key to be <tt>nil</tt>:

<span style="font-family: DejaVu Sans;">从</span>session<span style="font-family: DejaVu Sans;">从移除一些信息，分派那个</span>key<span style="font-family: DejaVu Sans;">为</span>nil<span style="font-family: DejaVu Sans;">：</span>

class LoginsController &lt; ApplicationController

# "Delete" a login, aka "log the user out"

def destroy

# Remove the user id from the session

@_current_user = session[:current_user_id] = nil

redirect_to root_url

end

end

To reset the entire session, use <tt> </tt><tt>reset_session</tt>.<span style="font-family: DejaVu Sans;">从值整个</span>session<span style="font-family: DejaVu Sans;">，使用</span><tt>reset_session</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h4><a name="the-flash"></a>4.2 The Flash</h4>
The flash is a special part of the session which is cleared with each request. This means that values stored there will only be available in the next request, which is useful for storing error messages etc. It is accessed in much the same way as the session, like a hash. Let’s use the act of logging out as an example. The controller can send a message which will be displayed to the user on the next request:

flash<span style="font-family: DejaVu Sans;">在</span>session<span style="font-family: DejaVu Sans;">中是一个特殊的部分它它清楚于每个（下一次）请求。这里的意思是存储的值仅仅在下一个请求中是可用的，这在存储错误信息等是非常有用的。它的访问方式与</span>session<span style="font-family: DejaVu Sans;">的访问方式有着很大的相同之处，就像（访问）一个</span>hash<span style="font-family: DejaVu Sans;">字典那样。让我们使用登出动作作为一个例子。</span>controller<span style="font-family: DejaVu Sans;">会发送一个消息这个消息在下一个请求的时候将会显示给用户：</span>

class LoginsController &lt; ApplicationController

def destroy

session[:current_user_id] = nil

flash[:notice] = "You have successfully logged out"

redirect_to root_url

end

end

Note it is also possible to assign a flash message as part of the redirection.

redirect_to root_url, :notice =&gt; "You have successfully logged out"

The <tt>destroy</tt> action redirects to the application’s <tt>root_url</tt>, where the message will be displayed. Note that it’s entirely up to the next action to decide what, if anything, it will do with what the previous action put in the flash. It’s conventional to display eventual errors or notices from the flash in the application’s layout:

<tt>destroy</tt><span style="font-family: DejaVu Sans;"><tt>动作重定向到应用程序的</tt></span><tt>root_url,</tt><span style="font-family: DejaVu Sans;"><tt>在这里消息（刚添加的）将会被显示。注意：它完全取决于</tt></span><tt>next</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>来决定做什么，如果有（</tt></span><tt>next</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>），它将会完成</tt></span><tt>previous</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>放入</tt></span><tt>flash</tt><span style="font-family: DejaVu Sans;"><tt>中的信息。</tt></span>

&lt;html&gt;

&lt;!-- &lt;head/&gt; --&gt;

&lt;body&gt;

&lt;% if flash[:notice] %&gt;

&lt;p&gt;&lt;%= flash[:notice] %&gt;&lt;/p&gt;

&lt;% end %&gt;

&lt;% if flash[:error] %&gt;

&lt;p&gt;&lt;%= flash[:error] %&gt;&lt;/p&gt;

&lt;% end %&gt;

&lt;!-- more content --&gt;

&lt;/body&gt;

&lt;/html&gt;

This way, if an action sets an error or a notice message, the layout will display it automatically<span style="font-family: DejaVu Sans;">。</span>

<span style="font-family: DejaVu Sans;">通过这种方式，如果</span>action<span style="font-family: DejaVu Sans;">设定一条</span>error<span style="font-family: DejaVu Sans;">或者通知消息，</span>laout<span style="font-family: DejaVu Sans;">将会自动的显示它。</span>

If you want a flash value to be carried over to another request, use the <tt>keep</tt> method:

<span style="font-family: DejaVu Sans;">如果你想一个</span>flash<span style="font-family: DejaVu Sans;">值转接到另一个</span>request<span style="font-family: DejaVu Sans;">，使用</span>keep<span style="font-family: DejaVu Sans;">方法：</span>

class MainController &lt; ApplicationController

# Let's say this action corresponds to root_url, but you want

# all requests here to be redirected to UsersController#index.

# If an action sets the flash and redirects here, the values

# would normally be lost when another redirect happens, but you

# can use 'keep' to make it persist for another request.

def index

# Will persist all flash values.

flash.keep

&nbsp;

# You can also use a key to keep only some kind of value.

# flash.keep(:notice)

redirect_to users_url

end

end
<h5><a name="flash-now"></a>4.2.1 <tt>flash.now</tt></h5>
By default, adding values to the flash will make them available to the next request, but sometimes you may want to access those values in the same request. For example, if the <tt>create</tt> action fails to save a resource and you render the <tt>new</tt> template directly, that’s not going to result in a new request, but you may still want to display a message using the flash. To do this, you can use <tt>flash.now</tt> in the same way you use the normal <tt>flash</tt>:

<span style="font-family: DejaVu Sans;">默认情况，添加到</span>flash<span style="font-family: DejaVu Sans;">中的值在</span>next request<span style="font-family: DejaVu Sans;">中是可用的，但是有时你可以想在同样的</span>request<span style="font-family: DejaVu Sans;">中访问这些值。例如，如果</span><tt>create</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>保存</tt></span><tt>resource</tt><span style="font-family: DejaVu Sans;"><tt>失败并且你直接</tt></span><tt>render</tt><tt> </tt><tt>new</tt><tt> </tt><tt>template</tt><span style="font-family: DejaVu Sans;"><tt>，这样在一个</tt></span><tt>new</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>request</tt><span style="font-family: DejaVu Sans;"><tt>中没有得到</tt></span><tt>result</tt><span style="font-family: DejaVu Sans;"><tt>，但是你仍然希望使用</tt></span><tt>flash</tt><span style="font-family: DejaVu Sans;"><tt>显示消息。这样做，你可以就像使用</tt></span><tt>flash</tt><span style="font-family: DejaVu Sans;"><tt>那样使用</tt><tt></tt></span><tt>flash.now</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

class ClientsController &lt; ApplicationController

def create

@client = Client.new(params[:client])

if @client.save

# ...

else

flash.now[:error] = "Could not save client"

render :action =&gt; "new"

end

end

end
<h3><a name="cookies"></a>5 Cookies</h3>
Your application can store small amounts of data on the client — called cookies — that will be persisted across requests and even sessions. Rails provides easy access to cookies via the <tt>cookies</tt> method, which — much like the <tt>session</tt> — works like a hash:

<span style="font-family: DejaVu Sans;">你的应用程序可以存储少量</span>data<span style="font-family: DejaVu Sans;">在</span>client<span style="font-family: DejaVu Sans;">上<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>它被称之为</span>cookies——<span style="font-family: DejaVu Sans;">它会保持访问的请求以及曾经</span>sessions<span style="font-family: DejaVu Sans;">。</span>Rails<span style="font-family: DejaVu Sans;">提供简单的方式来访问</span>cookies<span style="font-family: DejaVu Sans;">通过</span>cookies<span style="font-family: DejaVu Sans;">方法，就像</span>session——<span style="font-family: DejaVu Sans;">一</span>hash<span style="font-family: DejaVu Sans;">字典那样工作（存储</span>data<span style="font-family: DejaVu Sans;">）：</span>

class CommentsController &lt; ApplicationController

def new

# Auto-fill the commenter's name if it has been stored in a cookie

@comment = Comment.new(:name =&gt; cookies[:commenter_name])

end

&nbsp;

def create

@comment = Comment.new(params[:comment])

if @comment.save

flash[:notice] = "Thanks for your comment!"

if params[:remember_name]#:remember_name<span style="font-family: DejaVu Sans;">这里相当于用户的的反馈是否记住</span>name

# Remember the commenter's name.

cookies[:commenter_name] = @comment.name

else

# Delete cookie for the commenter's name cookie, if any.

cookies.delete(:commenter_name)

end

redirect_to @comment.article

else

render :action =&gt; "new"

end

end

end

Note that while for session values you set the key to <tt>nil</tt>, to delete a cookie value you should use <tt>cookies.delete(:key)</tt>.
<h3><a name="rendering-xml-and-json-data"></a>6 Rendering xml and json data</h3>
ActionController makes it extremely easy to render <tt>xml</tt> or <tt>json</tt> data. If you generate a controller using scaffold then your controller would look something like this.

ActionController<span style="font-family: DejaVu Sans;">使得</span>render xml<span style="font-family: DejaVu Sans;">或者</span>json<span style="font-family: DejaVu Sans;">数据相当简单。如果你使用</span>scaffold<span style="font-family: DejaVu Sans;">创建一个</span>controller<span style="font-family: DejaVu Sans;">那么你的</span>controller<span style="font-family: DejaVu Sans;">看起来将会像这样：</span>

class UsersController &lt; ApplicationController

def index

@users = User.all

respond_to do |format|

format.html # index.html.erb

format.xml { render :xml =&gt; @users}

format.json { render :json =&gt; @users}

end

end

end

Notice that in the above case code is <tt>render</tt><tt> </tt><tt>:xml</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>@users</tt> and not <tt>render</tt><tt> </tt><tt>:xml</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>@users.to_xml</tt>. That is because if the input is not string then rails automatically invokes <tt>to_xml</tt> .

<span style="font-family: DejaVu Sans;">注意在</span>render<span style="font-family: DejaVu Sans;">中的完整示例代码是</span><tt>render</tt><tt> </tt><tt>:xml</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>@users</tt><span style="font-family: DejaVu Sans;"><tt>并不是</tt><tt></tt></span><tt>render</tt><tt> </tt><tt>:xml</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>@users.to_xml</tt><span style="font-family: DejaVu Sans;"><tt>，那是因为如果输入的不是</tt></span><tt>string</tt><span style="font-family: DejaVu Sans;"><tt>那么</tt></span><tt>rails</tt><span style="font-family: DejaVu Sans;"><tt>自动调用</tt></span><tt>to_xml</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h3><a name="filters"></a>7 Filters<span style="font-family: WenQuanYi Micro Hei;">过滤器</span></h3>
Filters are methods that are run before, after or “around” a controller action.

Filters<span style="font-family: DejaVu Sans;">是一个方法它运行在</span>controller action<span style="font-family: DejaVu Sans;">之前或者伴随着</span>controller action<span style="font-family: DejaVu Sans;">。</span>

Filters are inherited, so if you set a filter on <tt>ApplicationController</tt>, it will be run on every controller in your application.

Filters<span style="font-family: DejaVu Sans;">是可继承的，因此如果你在</span><tt>ApplicationController</tt><tt> </tt><span style="font-family: DejaVu Sans;">设置了一个</span>filter<span style="font-family: DejaVu Sans;">，他将会在你的应用程序的每个</span>controller<span style="font-family: DejaVu Sans;">中运行。</span>

Before filters may halt the request cycle. A common before filter is one which requires that a user is logged in for an action to be run. You can define the filter method this way:

<span style="font-family: DejaVu Sans;">在</span>filters<span style="font-family: DejaVu Sans;">之前可能会停止</span>request<span style="font-family: DejaVu Sans;">周期。一个通常情况在</span>filter<span style="font-family: DejaVu Sans;">之前的是用户</span>logged in<span style="font-family: DejaVu Sans;">的</span>requires<span style="font-family: DejaVu Sans;">使之对应的</span>action<span style="font-family: DejaVu Sans;">被运行。你可以这样定义</span>filter<span style="font-family: DejaVu Sans;">方法：</span>

class ApplicationController &lt; ActionController::Base

before_filter :require_login

&nbsp;

private

&nbsp;

def require_login

unless logged_in?

flash[:error] = "You must be logged in to access this section"

redirect_to new_login_url # halts request cycle

end

end

&nbsp;

# The logged_in? method simply returns true if the user is logged

# in and false otherwise. It does this by "booleanizing" the

# current_user method we created previously using a double ! operator.

# Note that this is not common in Ruby and is discouraged unless you

# really mean to convert something into true or false.

def logged_in?

!!current_user

end

end

The method simply stores an error message in the flash and redirects to the login form if the user is not logged in. If a before filter renders or redirects, the action will not run. If there are additional filters scheduled to run after that filter they are also cancelled.

<span style="font-family: DejaVu Sans;">这个方法简单的存储一个错误消息在</span>flash<span style="font-family: DejaVu Sans;">中并且重定向到</span>login<span style="font-family: DejaVu Sans;">表单如果用户没有登录。如果是一个在</span>filter<span style="font-family: DejaVu Sans;">之前的</span>renderes<span style="font-family: DejaVu Sans;">或者重定向，这个</span>action<span style="font-family: DejaVu Sans;">将不会运行。如果这里有额外附加的</span>filters<span style="font-family: DejaVu Sans;">计划运行并且在这个</span>filter<span style="font-family: DejaVu Sans;">之后，它们也将取消（执行）。</span>

In this example the filter is added to <tt><strong>ApplicationController</strong></tt> and thus all controllers in the application inherit it. This will make everything in the application <span style="color: #800000;">require</span><span style="color: #800000;">the</span><span style="color: #800000;">user</span><span style="color: #800000;">to</span><span style="color: #800000;">be</span><span style="color: #800000;">logged</span><span style="color: #800000;">in</span><span style="color: #800000;">in</span><span style="color: #800000;">order</span><span style="color: #800000;">to</span><span style="color: #800000;">use</span><span style="color: #800000;">it</span>. For obvious reasons (the user wouldn’t be able to log in in the first place!), not all controllers or actions should require this. You can prevent this filter from running before particular actions with <tt>skip_before_filter</tt>:

<span style="font-family: DejaVu Sans;">明显的原因（在第一次登录的时候不能登录），并不是所有的</span>controllers<span style="font-family: DejaVu Sans;">或者</span>actions<span style="font-family: DejaVu Sans;">需要登录，你可以使用</span><tt>skip_before_filter</tt><tt> </tt><span style="font-family: DejaVu Sans;">在部分</span>action<span style="font-family: DejaVu Sans;">运行之前阻止这个</span>filter<span style="font-family: DejaVu Sans;">：</span>

class LoginsController &lt; ApplicationController

skip_before_filter :require_login, :only =&gt; [:new, :create]

end

Now, the <tt>LoginsController</tt>’s <tt>new</tt> and <tt>create</tt> actions will work as before without requiring the user to be logged in. The <tt>:only</tt> option is used to only skip this filter for these actions, and there is also an <tt>:except</tt> option which works the other way. These options can be used when adding filters too, so you can add a filter which only runs for selected actions in the first place.

<span style="font-family: DejaVu Sans;">现在，</span><tt>LoginsController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>new</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>create</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>工作之前不再需要用户已经登录站点来。</tt></span><tt>:only</tt><span style="font-family: DejaVu Sans;"><tt>选项使用于仅仅在这些</tt></span><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>中略过</tt></span><tt>filter</tt><span style="font-family: DejaVu Sans;"><tt>，同样这里也有</tt></span><tt>:except</tt><span style="font-family: DejaVu Sans;"><tt>选项一相反的方式工作。这些选项也可以在添加</tt></span><tt>filters</tt><span style="font-family: DejaVu Sans;"><tt>的时候使用，因此你可以添加一个</tt></span><tt>filter</tt><span style="font-family: DejaVu Sans;"><tt>其仅仅在选择的</tt></span><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>第一次运行的时候执行（忽略）。</tt></span>
<h4><a name="after-filters-and-around-filters"></a>7.1 After Filters and Around Filters</h4>
In addition to before filters, you can also run filters after an action has been executed, or both before and after.

<span style="font-family: DejaVu Sans;">除了在</span>filters<span style="font-family: DejaVu Sans;">之前，你也可以在</span>action<span style="font-family: DejaVu Sans;">被执行之后运行</span>filters<span style="font-family: DejaVu Sans;">，或者在之前和过后都执行。</span>

After filters are similar to before filters, but because the action has already been run they have access to the response data that’s about to be sent to the client. Obviously, after filters cannot stop the action from running.

After filters<span style="font-family: DejaVu Sans;">（执行</span>action<span style="font-family: DejaVu Sans;">）和</span>before filters<span style="font-family: DejaVu Sans;">类似，但是因为</span>action<span style="font-family: DejaVu Sans;">已经被运行，这些</span>filter<span style="font-family: DejaVu Sans;">会访问</span>response data<span style="font-family: DejaVu Sans;">并且，</span>response data<span style="font-family: DejaVu Sans;">会全部发送给</span>client<span style="font-family: DejaVu Sans;">。明显的，</span>after filters<span style="font-family: DejaVu Sans;">不能够停止</span>action<span style="font-family: DejaVu Sans;">的运行。</span>

Around filters are responsible for running their associated actions by yielding, similar to how Rack middlewares work.

Around filters<span style="font-family: DejaVu Sans;">能够通过</span>yielding<span style="font-family: DejaVu Sans;">运行（</span>Around filters<span style="font-family: DejaVu Sans;">执行的</span>action<span style="font-family: DejaVu Sans;">的）关联的</span>action<span style="font-family: DejaVu Sans;">，类似于</span>Rack middlewares<span style="font-family: DejaVu Sans;">工作方式。</span>

For example, in a website where changes have an approval workflow an administrator could be able to preview them easily, just apply them within a transaction:

<span style="font-family: DejaVu Sans;">例如，在一个</span>website<span style="font-family: DejaVu Sans;">更改操作有一个批准工作流程，管理员可以很容易预览这些内容，仅仅在一个</span>transaction<span style="font-family: DejaVu Sans;">中就可以实现这个功能的应用：</span>

class ChangesController &lt; ActionController::Base

around_filter :wrap_in_transaction, :only =&gt; :show

&nbsp;

private

&nbsp;

def wrap_in_transaction

ActiveRecord::Base.transaction do

begin

yield

ensure

raise ActiveRecord::Rollback

end

end

end

end

Note that an around filter wraps also rendering. In particular, if in the example above the view itself reads from the database via a scope or whatever, it will do so within the transaction and thus present the data to preview.

<span style="font-family: DejaVu Sans;">注意</span>around filter<span style="font-family: DejaVu Sans;">同样也会</span>render<span style="font-family: DejaVu Sans;">。特别的是，如果在上述例子中，</span>view<span style="font-family: DejaVu Sans;">自己通过一个</span>scpoe<span style="font-family: DejaVu Sans;">或者其他从数据库中读取（数据），他将会在</span>transaction<span style="font-family: DejaVu Sans;">中实现</span>approval workflow<span style="font-family: DejaVu Sans;">并且将当前数据预览呈现。</span>

They can choose not to yield and build the response themselves, in which case the action is not run.

<span style="font-family: DejaVu Sans;">他们（</span>admin<span style="font-family: DejaVu Sans;">）可以选择不</span>yield<span style="font-family: DejaVu Sans;">并且建立他们自己的</span>response<span style="font-family: DejaVu Sans;">，这样（更改的）</span>action<span style="font-family: DejaVu Sans;">将不会运行。</span>
<h4><a name="other-ways-to-use-filters"></a>7.2 Other Ways to Use Filters <span style="font-family: WenQuanYi Micro Hei;">过滤器的其他使用方式</span></h4>
While the most common way to use filters is by creating private methods and using *_filter to add them, there are two other ways to do the same thing.

<span style="font-family: DejaVu Sans;">即使通常使用过滤器的方式是创建私有的方法并且使用</span>*_filter<span style="font-family: DejaVu Sans;">（</span>around_filter :wrap_in_transaction, :only =&gt; :show<span style="font-family: DejaVu Sans;">）来添加他们，这里有两种其他的方法来做同样的事情。</span>

The first is to use a block directly with the *_filter methods. The block receives the controller as an argument, and the <tt>require_login</tt> filter from above could be rewritten to use a block:

<span style="font-family: DejaVu Sans;">第一种方法是使用一个</span>*_filter methods<span style="font-family: DejaVu Sans;">的</span>block<span style="font-family: DejaVu Sans;">（块）。这个</span>block<span style="font-family: DejaVu Sans;">接收</span>controller<span style="font-family: DejaVu Sans;">为一个参数，，并且从</span>above<span style="font-family: DejaVu Sans;">（上下文中的上文）</span>could be rewritten to use a block<span style="font-family: DejaVu Sans;">：</span><strong>#</strong><span style="font-family: DejaVu Sans;"><strong>这个例子中也是第一次登录无法完成，没有忽略登录</strong></span><strong>action</strong><span style="font-family: DejaVu Sans;"><strong>。</strong></span>

class ApplicationController &lt; ActionController::Base

before_filter do |controller|

redirect_to new_login_url unless controller.send(:logged_in?)

end

end

Note that the filter in this case uses <tt>send</tt> because the <tt>logged_in?</tt> method is private and the filter is not run in the scope of the controller. This is not the recommended way to implement this particular filter, but in more simple cases it might be useful.

<span style="font-family: DejaVu Sans;">注意这个例子中的</span>filter<span style="font-family: DejaVu Sans;">使用的是</span>send<span style="font-family: DejaVu Sans;">因为</span><tt>logged_in?</tt><span style="font-family: DejaVu Sans;"><tt>方法是私有的并且</tt></span><tt>filter</tt><span style="font-family: DejaVu Sans;"><tt>并不在</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>的范围内运行。这里并不是实施这个特别的</tt></span><tt>filter</tt><span style="font-family: DejaVu Sans;"><tt>的推荐的方式，但是在很多简单的情况下这可能会有用。</tt></span>

<tt>The</tt><tt> </tt><tt>second</tt><tt> </tt><tt>way</tt><tt> </tt><tt>is</tt><tt> </tt><tt>to</tt><tt> </tt><tt>use</tt><tt> </tt><tt>a</tt><tt> </tt><tt>class</tt><tt> </tt><tt>(actually,</tt><tt> </tt><tt>any</tt><tt> </tt><tt>object</tt><tt> </tt><tt>that</tt><tt> </tt><tt>responds</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>right</tt><tt> </tt><tt>methods</tt><tt> </tt><tt>will</tt><tt> </tt><tt>do)</tt><tt> </tt><tt>to</tt><tt> </tt><tt>handle</tt><tt> </tt><tt>the</tt><tt> </tt><tt>filtering.</tt><tt> </tt><tt>This</tt><tt> </tt><tt>is</tt><tt> </tt><tt>useful</tt><tt> </tt><tt>in</tt><tt> </tt><tt>cases</tt><tt> </tt><tt>that</tt><tt> </tt><tt>are</tt><tt> </tt><tt>more</tt><tt> </tt><tt>complex</tt><tt> </tt><tt>and</tt><tt> </tt><tt>can</tt><tt> </tt><tt>not</tt><tt> </tt><tt>be</tt><tt> </tt><tt>implemented</tt><tt> </tt><tt>in</tt><tt> </tt><tt>a</tt><tt> </tt><tt>readable</tt><tt> </tt><tt>and</tt><tt> </tt><tt>reusable</tt><tt> </tt><tt>way</tt><tt> </tt><tt>using</tt><tt> </tt><tt>the</tt><tt> </tt><tt>two</tt><tt> </tt><tt>other</tt><tt> </tt><tt>methods.</tt><tt> </tt><tt>As</tt><tt> </tt><tt>an</tt><tt> </tt><tt>example,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>could</tt><tt> </tt><tt>rewrite</tt><tt> </tt><tt>the</tt><tt> </tt><tt>login</tt><tt> </tt><tt>filter</tt><tt> </tt><tt>again</tt><tt> </tt><tt>to</tt><tt> </tt><tt>use</tt><tt> </tt><tt>a</tt><tt> </tt><tt>class:</tt>

<span style="font-family: DejaVu Sans;">第二种方式是使用一个</span>class<span style="font-family: DejaVu Sans;">（实际上，<tt>响应正确方法的任何对象都是可以的</tt>）来处理</span>filtering<span style="font-family: DejaVu Sans;">。这在非常复杂的情况下，在只读不能</span><tt>implemented</tt><span style="font-family: DejaVu Sans;">，重复使用两种其他方法是非常有用的。在例子中，你可以使用一个</span>class<span style="font-family: DejaVu Sans;">来再次重写</span>login filter<span style="font-family: DejaVu Sans;">：</span>

class ApplicationController &lt; ActionController::Base

before_filter LoginFilter

end

&nbsp;

class LoginFilter

def self.filter(controller)

unless controller.send(:logged_in?)

controller.flash[:error] = "You must be logged in"

controller.redirect_to controller.new_login_url

end

end

end

Again, this is not an ideal example for this filter, because it’s not run in the scope of the controller but gets the controller passed as an argument. The filter class has a class method <tt>filter</tt> which gets run before or after the action, depending on if it’s a before or after filter. Classes used as around filters can also use the same <tt>filter</tt> method, which will get run in the same way. The method must <tt>yield</tt> to execute the action. Alternatively, it can have both a <tt>before</tt> and an <tt>after</tt> method that are run before and after the action.

<span style="font-family: DejaVu Sans;">同样的，对于这种</span>filter<span style="font-family: DejaVu Sans;">这不是一个（好）主意，因为它在</span>controller<span style="font-family: DejaVu Sans;">的范围中不会运行但是获取</span>controller<span style="font-family: DejaVu Sans;">为一个参数。</span>filter <span style="font-family: DejaVu Sans;">类有一个类方法</span>filter<span style="font-family: DejaVu Sans;">，它在</span>before<span style="font-family: DejaVu Sans;">或者</span>after action<span style="font-family: DejaVu Sans;">运行，这依赖于它是一个</span>before<span style="font-family: DejaVu Sans;">还是</span>after filter<span style="font-family: DejaVu Sans;">。使用</span>around filters<span style="font-family: DejaVu Sans;">的类同样也可以使用</span>filter <span style="font-family: DejaVu Sans;">方法，其也会以相同的方式运行。（</span>filter<span style="font-family: DejaVu Sans;">）方法必须</span>yield to <span style="font-family: DejaVu Sans;">执行的</span>action<span style="font-family: DejaVu Sans;">。另外，它也可以同时有</span>before<span style="font-family: DejaVu Sans;">和</span>after<span style="font-family: DejaVu Sans;">方法在</span>before <span style="font-family: DejaVu Sans;">和</span>after action<span style="font-family: DejaVu Sans;">中运行。</span>
<h3><a name="request-forgery-protection"></a>8 Request Forgery Protection<span style="font-family: WenQuanYi Micro Hei;">伪造请求保护</span></h3>
Cross-site request forgery is a type of attack in which a site tricks a user into making requests on another site, possibly adding, modifying or deleting data on that site without the user’s knowledge or permission.

<span style="font-family: DejaVu Sans;">跨站伪造请求是一种典型的攻击方式，在这种攻击方式中，一个网站诱骗用户发送请求到另一个网站，可能在这个站点中添加，修改或者删除数据并没有用户的信息或者权限。</span>

The first step to avoid this is to make sure all “destructive” actions (create, update and destroy) can only be accessed with non-GET requests. If you’re following RESTful conventions you’re already doing this. However, a malicious site can still send a non-GET request to your site quite easily, and that’s where the request forgery protection comes in. As the name says, it protects from forged requests.

<span style="font-family: DejaVu Sans;">避免这样的事情发生的第一步是确保所有的<span style="font-family: Liberation Serif,Times New Roman,serif;"> “</span></span>destructive”<span style="font-family: DejaVu Sans;">（破坏性）</span>actions(create, update and destroy)<span style="font-family: DejaVu Sans;">只能接受</span>non-GET<span style="font-family: DejaVu Sans;">请求。如果你遵循</span>RESTful<span style="font-family: DejaVu Sans;">公约你已经这样做了。然而，一个恶意的网站仍然可以轻易的发送一个</span>non-GET<span style="font-family: DejaVu Sans;">请求到你的站点，到这里就该伪造请求保护（</span>request forgery protection<span style="font-family: DejaVu Sans;">）出场了。正如名字所说，它防护伪造请求（对你站点的攻击）。</span>

If you generate a form like this:<span style="font-family: DejaVu Sans;">如果你像下面这样生成表单：</span>

&lt;%= form_for @user do |f| %&gt;

&lt;%= f.text_field :username %&gt;

&lt;%= f.text_field :password %&gt;

&lt;% end %&gt;

You will see how the token gets added as a hidden field:

<span style="font-family: DejaVu Sans;">你将会看到令牌是怎样作为一个</span>hidden field<span style="font-family: DejaVu Sans;">添加：</span>

&lt;form accept-charset="UTF-8" action="/users/1" method="post"&gt;

&lt;input type="hidden"

value="67250ab105eb5ad10851c00a5621854a23af5489"

name="authenticity_token"/&gt;

&lt;!-- fields --&gt;

&lt;/form&gt;

Rails adds this token to every form that’s generated using the <a href="http://guides.rubyonrails.org/form_helpers.html"><span style="color: #000080;"><span style="text-decoration: underline;">form</span></span><span style="color: #000080;"><span style="text-decoration: underline;">helpers</span></span></a>, so most of the time you don’t have to worry about it. If you’re writing a form manually or need to add the token for another reason, it’s available through the method <tt>form_authenticity_token</tt>:

Rails<span style="font-family: DejaVu Sans;">为每个使用</span>form helpers<span style="font-family: DejaVu Sans;">生成的</span>form<span style="font-family: DejaVu Sans;">添加这样的令牌。因此大多数时间你不需要担心这样的问题。如果你打算手动编写一个</span>form<span style="font-family: DejaVu Sans;">或者因为其他的原因需要添加令牌，这也是可以的通过</span><tt>form_authenticity_token</tt><span style="font-family: DejaVu Sans;"><tt>方法来实现：</tt></span>

<tt>form_authenticity_token</tt><span style="font-family: DejaVu Sans;"><tt>生成一个有效的认证令牌。这在</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>不会自动添加的地方非常有用，比如在定制</tt></span><tt>Ajax</tt><span style="font-family: DejaVu Sans;"><tt>调用的时候。</tt></span>

The <a href="http://guides.rubyonrails.org/security.html"><span style="color: #000080;"><span style="text-decoration: underline;">Security</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Guide</span></span></a> has more about this and a lot of other security-related issues that you should be aware of when developing a web application.

<a href="http://guides.rubyonrails.org/security.html"><span style="color: #000080;"><span style="text-decoration: underline;">Security</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Guide</span></span></a> <span style="font-family: DejaVu Sans;">有更多的关于这些以及许多其他安全相关的问题（的解决方法）你在开发一个</span>web application<span style="font-family: DejaVu Sans;">的时候应该保持清醒。</span>
<h3>9 The Request and Response Objects</h3>
In every controller there are two accessor methods pointing to the request and the response objects associated with the request cycle that is currently in execution. The <tt>request</tt> method contains an instance of <tt>AbstractRequest</tt> and the <tt>response</tt> method returns a response object representing what is going to be sent back to the client.

<span style="font-family: DejaVu Sans;">在每个</span>controller<span style="font-family: DejaVu Sans;">有两个指向与目前正在执行的请求周期相关的</span>request <span style="font-family: DejaVu Sans;">和</span>response <span style="font-family: DejaVu Sans;">对象的访问方法。</span>request<span style="font-family: DejaVu Sans;">方法包含一个</span><tt>AbstractRequest</tt><span style="font-family: DejaVu Sans;"><tt>的实例以及</tt><tt></tt></span><tt>response</tt><span style="font-family: DejaVu Sans;"><tt>方法返回一个</tt></span><tt>response</tt><span style="font-family: DejaVu Sans;"><tt>对象表示什么打算发送回</tt></span><tt>client</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h4><a name="the-request-object"></a>9.1 The <tt>request</tt> Object</h4>
The request object contains a lot of useful information about the request coming in from the client. To get a full list of the available methods, refer to the <a href="http://api.rubyonrails.org/classes/ActionDispatch/Request.html"><span style="color: #000080;"><span style="text-decoration: underline;">API</span></span><span style="color: #000080;"><span style="text-decoration: underline;">documentation</span></span></a>. Among the properties that you can access on this object are:

request<span style="font-family: DejaVu Sans;">对象包含很多来自发出请求的</span>client<span style="font-family: DejaVu Sans;">的有用信息。要得到可用方法的完整列表，参考</span><a href="http://api.rubyonrails.org/classes/ActionDispatch/Request.html"><span style="color: #000080;"><span style="text-decoration: underline;">API</span></span><span style="color: #000080;"><span style="text-decoration: underline;">documentation</span></span></a><span style="font-family: DejaVu Sans;">。其中你可以在这个对象中访问的属性有：</span>

&nbsp;
<table width="665" cellspacing="0" cellpadding="2"><colgroup><col width="194" /> <col width="463" /> </colgroup>
<tbody>
<tr>
<th width="194">Property of <tt>request</tt></th>
<th width="463">Purpose</th>
</tr>
<tr>
<td width="194">host</td>
<td width="463">The hostname used for this request.</td>
</tr>
<tr>
<td width="194">domain(n=2)</td>
<td width="463">The hostname’s first <tt>n</tt> segments, starting from the right (the TLD).</td>
</tr>
<tr>
<td width="194">format</td>
<td width="463">The content type requested by the client.</td>
</tr>
<tr>
<td width="194">method</td>
<td width="463">The HTTP method used for the request.</td>
</tr>
<tr>
<td width="194">get?, post?, put?, delete?, head?</td>
<td width="463">Returns true if the HTTP method is GET/POST/PUT/DELETE/HEAD.</td>
</tr>
<tr>
<td width="194">headers</td>
<td width="463">Returns a hash containing the headers associated with the request.</td>
</tr>
<tr>
<td width="194">port</td>
<td width="463">The port number (integer) used for the request.</td>
</tr>
<tr>
<td width="194">protocol</td>
<td width="463">Returns a string containing the protocol used plus “://”, for example “http://”.</td>
</tr>
<tr>
<td width="194">query_string</td>
<td width="463">The query string part of the URL, i.e., everything after “?”.</td>
</tr>
<tr>
<td width="194">remote_ip</td>
<td width="463">The IP address of the client.</td>
</tr>
<tr>
<td width="194">url</td>
<td width="463">The entire URL used for the request.</td>
</tr>
</tbody>
</table>
&nbsp;
<h5><a name="path_parameters-query_parameters-and-req"></a> 9.1.1 <tt>path_parameters</tt>, <tt>query_parameters</tt>, and <tt>request_parameters</tt></h5>
Rails collects all of the parameters sent along with the request in the <tt>params</tt> hash, whether they are sent as part of the query string or the post body. The request object has three accessors that give you access to these parameters depending on where they came from. The <tt>query_parameters</tt> hash contains parameters that were sent as part of the query string while the <tt>request_parameters</tt> hash contains parameters sent as part of the post body. The <tt>path_parameters</tt> hash contains parameters that were recognized by the routing as being part of the path leading to this particular controller and action.

Rails<span style="font-family: DejaVu Sans;">收集所有的</span>parameters<span style="font-family: DejaVu Sans;">于</span>params hash<span style="font-family: DejaVu Sans;">字典中于</span>request<span style="font-family: DejaVu Sans;">一起发送，无论是作为</span>query <span style="font-family: DejaVu Sans;">字符串的一部分发送还是在</span>post body<span style="font-family: DejaVu Sans;">中发送。</span>request<span style="font-family: DejaVu Sans;">有三个访问器提供给你访问这些参数这依赖于它来自哪里。</span><tt>query_parameters</tt><tt> </tt><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>字典包含作为查询字符串的一部分发送的参数，而</tt><tt></tt></span><tt>request_parameters</tt><span style="font-family: DejaVu Sans;"><tt>包含作为</tt></span><tt>post</tt><tt> </tt><tt>body</tt><span style="font-family: DejaVu Sans;"><tt>的一个部分发送的参数。</tt><tt></tt></span><tt>path_parameters</tt><tt> </tt><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>字典包含被</tt></span><tt>routing</tt><span style="font-family: DejaVu Sans;"><tt>组织作为指向特殊的</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>的参数。</tt></span>
<h4><a name="the-response-object"></a>9.2 The <tt>response</tt> Object</h4>
The response object is not usually used directly, but is during the execution of the action and rendering of the data that is being sent back to the user, but sometimes – like in an after filter – it can be useful to access the response directly. Some of these accessor methods also have setters, allowing you to change their values.

response object<span style="font-family: DejaVu Sans;">通常并不直接使用，但是它在</span>action<span style="font-family: DejaVu Sans;">的执行与</span>rendering<span style="font-family: DejaVu Sans;">的数据被发送回给用户期间建立，但是有的时候——像在一个</span>after filter——<span style="font-family: DejaVu Sans;">它在直接访问</span>response<span style="font-family: DejaVu Sans;">（</span>object<span style="font-family: DejaVu Sans;">）会非常有用。这些访问器中的一些</span>methods<span style="font-family: DejaVu Sans;">也有</span>setters<span style="font-family: DejaVu Sans;">，允许你改变它们的值。</span>

&nbsp;
<table width="665" cellspacing="0" cellpadding="2"><colgroup><col width="146" /> <col width="511" /> </colgroup>
<tbody>
<tr>
<th width="146">Property of <tt>response</tt></th>
<th width="511">Purpose</th>
</tr>
<tr>
<td width="146">body</td>
<td width="511">This is the string of data being sent back to the client. This is most often HTML.</td>
</tr>
<tr>
<td width="146">status</td>
<td width="511">The HTTP status code for the response, like 200 for a successful request or 404 for file not found.</td>
</tr>
<tr>
<td width="146">location</td>
<td width="511">The URL the client is being redirected to, if any.</td>
</tr>
<tr>
<td width="146">content_type</td>
<td width="511">The content type of the response.</td>
</tr>
<tr>
<td width="146">charset</td>
<td width="511">The character set being used for the response. Default is “utf-8”.</td>
</tr>
<tr>
<td width="146">headers</td>
<td width="511">Headers used for the response.</td>
</tr>
</tbody>
</table>
&nbsp;
<h5><a name="setting-custom-headers"></a>9.2.1 Setting Custom Headers</h5>
If you want to set custom headers for a response then <tt>response.headers</tt> is the place to do it. The headers attribute is a hash which maps header names to their values, <strong>and Rails will set some of them automatically.</strong> If you want to add or change a header, just assign it to <tt>response.headers</tt> this way:

response.headers["Content-Type"] = "application/pdf"
<h3><a name="http-authentications"></a>10 HTTP Authentications</h3>
Rails comes with two built-in HTTP authentication mechanisms:
<ul>
	<li>Basic Authentication</li>
	<li>Digest Authentication</li>
</ul>
<h4><a name="http-basic-authentication"></a>10.1 HTTP Basic Authentication</h4>
HTTP basic authentication is an authentication scheme that is supported by the majority of browsers and other HTTP clients. As an example, consider an administration section which will only be available by entering a username and a password into the browser’s HTTP basic dialog window. Using the built-in authentication is quite easy and only requires you to use one method, <tt>http_basic_authenticate_with</tt>.

<span style="font-family: DejaVu Sans;">基于</span>HTTP<span style="font-family: DejaVu Sans;">的认证是一个认证结构它被主流的浏览器以及其他的</span>HTTP clients<span style="font-family: DejaVu Sans;">支持。作为一个例子，思考一个管理员</span>section<span style="font-family: DejaVu Sans;">它仅仅可以输入</span>username<span style="font-family: DejaVu Sans;">和</span>password<span style="font-family: DejaVu Sans;">到浏览器的基于</span>HTTP<span style="font-family: DejaVu Sans;">对话框窗口。使用内建的认证是十分简单的仅仅需要你使用一个方法，</span><tt>http_basic_authenticate_with</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

class AdminController &lt; ApplicationController

http_basic_authenticate_with :name =&gt; "humbaba", :password =&gt; "5baa61e4"

end

With this in place, you can create namespaced controllers that inherit from <tt>AdminController</tt>. The filter will thus be run for all actions in those controllers, protecting them with HTTP basic authentication.

<span style="font-family: DejaVu Sans;">通过将这段代码，你可以创建继承至</span><tt>AdminController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span>namespaced controller<span style="font-family: DejaVu Sans;">。过滤器将自动对这些</span>controllers<span style="font-family: DejaVu Sans;">中的所有的</span>action<span style="font-family: DejaVu Sans;">运行这样的（认证），使用基于</span>HTTP<span style="font-family: DejaVu Sans;">的认证来保护它们。</span>

########in demo######

class PostsController &lt; ApplicationController

http_basic_authenticate_with :name =&gt; "test", :password =&gt; "123456", :except =&gt; :index

end
<h4><a name="http-digest-authentication"></a>10.2 HTTP Digest Authentication</h4>
HTTP digest authentication is superior to the basic authentication as it does not require the client to send an unencrypted password over the network (though HTTP basic authentication is safe over HTTPS). Using digest authentication with Rails is quite easy and only requires using one method, <tt>authenticate_or_request_with_http_digest</tt>.

HTTP <span style="font-family: DejaVu Sans;">精简认证优于基础认证因为它不需要</span>client<span style="font-family: DejaVu Sans;">发送一个未加密的穿过网络（即使</span>HTTP<span style="font-family: DejaVu Sans;">基础的认证比</span>HTTPS<span style="font-family: DejaVu Sans;">更安全）。在</span>Rails<span style="font-family: DejaVu Sans;">中使用 </span>digest authentication<span style="font-family: DejaVu Sans;">相当容易并且仅仅需要使用一个方法，</span><tt>authenticate_or_request_with_http_digest</tt><span style="font-family: DejaVu Sans;">。</span>

class AdminController &lt; ApplicationController

USERS = { "lifo" =&gt; "world" }

&nbsp;

before_filter :authenticate

&nbsp;

private

&nbsp;

def authenticate

authenticate_or_request_with_http_digest do |username|

USERS[username]

end

end

end

As seen in the example above, the <tt>authenticate_or_request_with_http_digest</tt> block takes only one argument – the username. And the block returns the password. Returning <tt>false</tt> or <tt>nil</tt> from the <tt>authenticate_or_request_with_http_digest</tt> will cause authentication failure.

<span style="font-family: DejaVu Sans;">正如上面看到例子， </span><tt>authenticate_or_request_with_http_digest</tt><span style="font-family: DejaVu Sans;"><tt>代码块仅仅获取一个参数——</tt></span><tt>username</tt><span style="font-family: DejaVu Sans;"><tt>。并且</tt></span><tt>block</tt><span style="font-family: DejaVu Sans;"><tt>（</tt></span><tt>do...end</tt><span style="font-family: DejaVu Sans;"><tt>之间的</tt></span><tt>block</tt><span style="font-family: DejaVu Sans;"><tt>）返回</tt></span><tt>password</tt><span style="font-family: DejaVu Sans;"><tt>。从 </tt></span><tt>authenticate_or_request_with_http_digest</tt><span style="font-family: DejaVu Sans;"><tt>返回</tt></span><tt>false</tt><span style="font-family: DejaVu Sans;"><tt>或者</tt></span><tt>nil</tt><span style="font-family: DejaVu Sans;"><tt>将会导致认证失败。</tt></span>
<h3><a name="streaming-and-file-downloads"></a>11 Streaming and File Downloads</h3>
Sometimes you may want to send a file to the user instead of rendering an HTML page. All controllers in Rails have the <tt>send_data</tt> and the <tt>send_file</tt> methods, which will both stream data to the client. <tt>send_file</tt> is a convenience method that lets you provide the name of a file on the disk and it will stream the contents of that file for you.

<span style="font-family: DejaVu Sans;">有时你可能希望发送一个文件给用户代替</span>rendering<span style="font-family: DejaVu Sans;">一个</span>HTML<span style="font-family: DejaVu Sans;">页面。</span>Rails<span style="font-family: DejaVu Sans;">中的所有</span>controllers<span style="font-family: DejaVu Sans;">都有</span>send_data<span style="font-family: DejaVu Sans;">和</span>send_file<span style="font-family: DejaVu Sans;">方法，它们都将会（将文件）以流数据形式发送给</span>client<span style="font-family: DejaVu Sans;">。</span>send_file<span style="font-family: DejaVu Sans;">是一个方便的方法它让你提供在</span>disk<span style="font-family: DejaVu Sans;">上的一个文件的</span>name<span style="font-family: DejaVu Sans;">并且它将会把那个文件的内容以</span>stream<span style="font-family: DejaVu Sans;">的形式发送给你。</span>

To stream data to the client, use <tt>send_data</tt>:

require "prawn"

class ClientsController &lt; ApplicationController

# Generates a PDF document with information on the client and

# returns it. The user will get the PDF as a file download.

def download_pdf

client = Client.find(params[:id])

send_data generate_pdf(client),

:filename =&gt; "#{client.name}.pdf",

:type =&gt; "application/pdf"

end

&nbsp;

private

&nbsp;

def generate_pdf(client)

Prawn::Document.new do

text client.name, :align =&gt; :center

text "Address: #{client.address}"

text "Email: #{client.email}"

end.render

end

end

The <tt>download_pdf</tt> action in the example above will call a private method which actually generates the PDF document and returns it as a string. This string will then be streamed to the client as a file download and a filename will be suggested to the user. Sometimes when streaming files to the user, you may not want them to download the file. Take images, for example, which can be embedded into HTML pages. To tell the browser a file is not meant to be downloaded, you can set the <tt>:disposition</tt> option to “inline”. The opposite and default value for this option is “attachment”.

<span style="font-family: DejaVu Sans;">上面例子中的 </span><tt>download_pdf action</tt><span style="font-family: DejaVu Sans;"><tt>将会</tt></span><tt>call</tt><span style="font-family: DejaVu Sans;"><tt>一个私有的方法这个方法实际上创建</tt></span><tt>PDF</tt><span style="font-family: DejaVu Sans;"><tt>文档并且将其作为一个</tt></span><tt>string</tt><span style="font-family: DejaVu Sans;"><tt>形式返回。这个</tt></span><tt>string</tt><span style="font-family: DejaVu Sans;"><tt>将会随后以</tt></span><tt>stream</tt><span style="font-family: DejaVu Sans;"><tt>的形式到</tt></span><tt>client</tt><span style="font-family: DejaVu Sans;"><tt>作为一个文件下载并且一个文件名将会建议给用户。提到图形，例如，它可以被嵌入</tt></span><tt>HTML</tt><span style="font-family: DejaVu Sans;"><tt>页面。</tt><tt><strong>要告诉浏览器一个文件不是（用来）被下载的，你可以设置</strong></tt></span><tt><strong>:disposition</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>选项为</strong></tt></span><tt><strong>'inline'</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>。这个选项相反的和默认的值是”</strong></tt></span><tt><strong>attachment”</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>。</strong></tt></span>
<h4><a name="sending-files"></a>11.1 Sending Files</h4>
If you want to send a file that already exists on disk, use the <tt>send_file</tt> method.

<span style="font-family: DejaVu Sans;">如果你想发送一个已经在硬盘中存在的文件，使用</span>send_file<span style="font-family: DejaVu Sans;">方法。</span>

class ClientsController &lt; ApplicationController

# Stream a file that has already been generated and stored on disk.

def download_pdf

client = Client.find(params[:id])

send_file("#{Rails.root}/files/clients/#{client.id}.pdf",

:filename =&gt; "#{client.name}.pdf",

:type =&gt; "application/pdf")

end

end

This will read and stream the file 4kB at the time, avoiding loading the entire file into memory at once. You can turn off streaming with the <tt>:stream</tt> option or adjust the block size with the <tt>:buffer_size</tt> option.

<span style="font-family: DejaVu Sans;">这将会</span>read<span style="font-family: DejaVu Sans;">和</span>stream<span style="font-family: DejaVu Sans;">文件一次</span>4kB<span style="font-family: DejaVu Sans;">，避免一次将整个文件导入内存。你可以用</span>:stream<span style="font-family: DejaVu Sans;">选项关闭流传送使或者设置适当的</span>block size<span style="font-family: DejaVu Sans;">通过</span>:buffer_size<span style="font-family: DejaVu Sans;">选项。</span>

Be careful when using data coming from the client (params, cookies, etc.) to locate the file on disk, as this is a security risk that might allow someone to gain access to files they are not meant to see.

<a name="result_box1"></a> <span style="font-family: DejaVu Sans;">在使用来自</span>client<span style="font-family: DejaVu Sans;">的数据的时候要小心（</span>params,cookies,etc.<span style="font-family: DejaVu Sans;">）到（服务器）本地硬盘中的文件，因为这是一个安全风险，可能会允许有人获得并不意味着他们看到的文件。</span>

&nbsp;

It is not recommended that you stream static files through Rails if you can instead keep them in a public folder on your web server. It is much more efficient to let the user download the file directly using Apache or another web server, keeping the request from unnecessarily going through the whole Rails stack. Although if you do need the request to go through Rails for some reason, you can set the <tt>:x_sendfile</tt> option to true, and Rails will let the web server handle sending the file to the user, freeing up the Rails process to do other things. Note that your web server needs to support the <tt>X-Sendfile</tt> header for this to work.

<a name="result_box2"></a> <span style="font-family: DejaVu Sans;">并不推荐你</span>stream<span style="font-family: DejaVu Sans;">静态文件通过</span>Rails<span style="font-family: DejaVu Sans;">如果作为替代你可以存放他们在你的服务器的一个公共的文件夹中。直接使用</span>Apache<span style="font-family: DejaVu Sans;">或者其他</span>web<span style="font-family: DejaVu Sans;">服务器让用户下载这些文件更加有效，避免不必要的</span>request<span style="font-family: DejaVu Sans;">通过整体的</span>Rails<span style="font-family: DejaVu Sans;">堆栈。即使如果因为某些原因你需要</span>request<span style="font-family: DejaVu Sans;">通过</span>Rails<span style="font-family: DejaVu Sans;">，你可以设置</span><tt>:x_sendfile</tt> option to true<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">将会让</span>web server handle<span style="font-family: DejaVu Sans;">发送这些文件给用户，释放</span>Rails<span style="font-family: DejaVu Sans;">进程去做其他的事情。注意你的</span>web server<span style="font-family: DejaVu Sans;">需要支持 </span><tt>X-Sendfile</tt> header<span style="font-family: DejaVu Sans;">来做这个工作。</span>
<h4><a name="restful-downloads"></a>11.2 RESTful Downloads</h4>
While <tt>send_data</tt> works just fine, if you are creating a RESTful application having separate actions for file downloads is usually not necessary. In REST terminology, the PDF file from the example above can be considered just another representation of the client resource. Rails provides an easy and quite sleek way of doing “RESTful downloads”. Here’s how you can rewrite the example so that the PDF download is a part of the <tt>show</tt> action, without any streaming:

<span style="font-family: DejaVu Sans;">当</span>send_data<span style="font-family: DejaVu Sans;">工作良好，如果你正在创建的一个</span>RESTful<span style="font-family: DejaVu Sans;">应用程序有单独的</span>actions<span style="font-family: DejaVu Sans;">来做</span>file<span style="font-family: DejaVu Sans;">下载通常是不需要的。在</span>REST<span style="font-family: DejaVu Sans;">术语中，来自例子中的</span>PDF<span style="font-family: DejaVu Sans;">文件完全可以被认为仅仅另一种</span>client<span style="font-family: DejaVu Sans;">资源的代表。</span>Rails<span style="font-family: DejaVu Sans;">提供一个容易和相当光滑的方式“</span>RESTful downloads”<span style="font-family: DejaVu Sans;">来做这些。这里重写例子以便于</span>PDF<span style="font-family: DejaVu Sans;">下载是</span>show action<span style="font-family: DejaVu Sans;">的一部分，没有任何的</span>streaming<span style="font-family: DejaVu Sans;">：</span>

class ClientsController &lt; ApplicationController

# The user can request to receive this resource as HTML or PDF.

def show

@client = Client.find(params[:id])

&nbsp;

respond_to do |format|

format.html

format.pdf { render :pdf =&gt; generate_pdf(@client) }

end

end

end

In order for this example to work, you have to add the PDF MIME type to Rails. This can be done by adding the following line to the file <tt>config/initializers/mime_types.rb</tt>:

<span style="font-family: DejaVu Sans;">为了是这个例子能够工作，你必须添加 </span>PDF MIME type<span style="font-family: DejaVu Sans;">到</span>Rails<span style="font-family: DejaVu Sans;">。可以添加下面的代码行到 </span><tt>config/initializers/mime_types.rb</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

Mime::Type.register "application/pdf", :pdf

<strong>Configuration files are not reloaded on each request,</strong> so you have to restart the server in order for their changes to take effect.

Now the user can request to get a PDF version of a client just by adding “.pdf” to the URL:

GET /clients/1.pdf
<h3><a name="parameter-filtering"></a>12 Parameter Filtering</h3>
Rails keeps a log file for each environment in the <tt>log</tt> folder. These are extremely useful when debugging what’s actually going on in your application, but in a live application you may not want every bit of information to be stored in the log file. You can filter certain request parameters from your log files by appending them to <tt>config.filter_parameters</tt> in the application configuration. These parameters will be marked [FILTERED] in the log.

Rail<span style="font-family: DejaVu Sans;">对于每个环境保留一个</span>log<span style="font-family: DejaVu Sans;">文件在</span>log<span style="font-family: DejaVu Sans;">文件夹中。这些文件相当有用，在当你调试的时候他们是在你应用程序中实际运行的记录，但是在一个</span>live<span style="font-family: DejaVu Sans;">的应用程序中你可以不希望每</span>bit<span style="font-family: DejaVu Sans;">的信息都被存储在</span>log<span style="font-family: DejaVu Sans;">文件中。你可以从你的</span>log<span style="font-family: DejaVu Sans;">文件中过滤某些</span>request parameters<span style="font-family: DejaVu Sans;">，通过添加它们到 </span><tt>config.filter_parameters</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>application configuration</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span><tt>These parameters will be marked [FILTERED] in the log.</tt>

config.filter_parameters &lt;&lt; :password
<h3><a name="rescue"></a>13 Rescue<span style="font-family: WenQuanYi Micro Hei;">挽救</span></h3>
Most likely your application is going to contain bugs or otherwise throw an exception that needs to be handled. For example, if the user follows a link to a resource that no longer exists in the database, Active Record will throw the <tt>ActiveRecord::RecordNotFound</tt> exception.

<span style="font-family: DejaVu Sans;">就像你的应用程序包含某些</span>bugs<span style="font-family: DejaVu Sans;">或者另一方面抛出一个异常需要被处理。例如，如果用户</span>follows<span style="font-family: DejaVu Sans;">一个</span>link<span style="font-family: DejaVu Sans;">到一个在数据库中并不存在的</span>resourece,Active Record<span style="font-family: DejaVu Sans;">将会抛出 </span><tt>ActiveRecord::RecordNotFound</tt><span style="font-family: DejaVu Sans;"><tt>异常。</tt></span>

Rails’ default exception handling displays a “500 Server Error” message for all exceptions. If the request was made locally, a nice traceback and some added information gets displayed so you can figure out what went wrong and deal with it. If the request was remote Rails will just display a simple “500 Server Error” message to the user, or a “404 Not Found” if there was a routing error or a record could not be found. Sometimes you might want to customize how these errors are caught and how they’re displayed to the user. There are several levels of exception handling available in a Rails application:

Rails<span style="font-family: DejaVu Sans;">的默认异常处理方式是对于所有的异常显示一个“</span>500 Server Error”<span style="font-family: DejaVu Sans;">消息。如果</span>request<span style="font-family: DejaVu Sans;">（相关的定制）在服务器被生成，一个漂亮的</span>traceback<span style="font-family: DejaVu Sans;">以及添加一些信息来显示使得你可以指出什么地方出错了并且怎样处理它。如果</span>request<span style="font-family: DejaVu Sans;">被</span>remote Rails<span style="font-family: DejaVu Sans;">将会仅仅显示一个简单的“</span>500 Server Error” <span style="font-family: DejaVu Sans;">消息给用户，或者如果这里有一个</span>routing<span style="font-family: DejaVu Sans;">错误或者一个记录不能被发现“</span>404 Not Found”<span style="font-family: DejaVu Sans;">将会发送给用户。有时你可以能希望定制这些错误怎样引起以及为什么它们被显示给用户。在</span>Rails<span style="font-family: DejaVu Sans;">应用程序中这里有一些级别的异常处理可用：</span>
<h4><a name="the-default-500-and-404-templates"></a>13.1 The Default 500 and 404 Templates</h4>
By default a production application will render either a 404 or a 500 error message. These messages are contained in static HTML files in the <tt>public</tt> folder, in <tt>404.html</tt> and <tt>500.html</tt> respectively. You can customize these files to add some extra information and layout, but remember that they are static; i.e. you can’t use RHTML or layouts in them, just plain HTML.

<span style="font-family: DejaVu Sans;">通过一个默认生成的应用程序将会</span>render<span style="font-family: DejaVu Sans;">一个</span>404<span style="font-family: DejaVu Sans;">或者</span>500<span style="font-family: DejaVu Sans;">错误消息。这些消息被包含在</span>public<span style="font-family: DejaVu Sans;">文件夹的静态</span>HTML<span style="font-family: DejaVu Sans;">文件中，分别在 </span><tt>404.html</tt> and <tt>500.html</tt><span style="font-family: DejaVu Sans;"><tt>。你可以定制这些文件来添加一些其他的信息和</tt></span><tt>layout</tt><span style="font-family: DejaVu Sans;"><tt>，但是记住他们是静态的；</tt></span><tt>i.e. you can’t use RHTML or layouts in them, </tt><span style="font-family: DejaVu Sans;"><tt>仅仅是纯</tt></span><tt>HTML</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h4><a name="rescue_from"></a>13.2 <tt>rescue_from</tt></h4>
If you want to do something a bit more elaborate when catching errors, you can use <tt>rescue_from</tt>, which handles exceptions of a certain type (or multiple types) in an entire controller and its subclasses.

<span style="font-family: DejaVu Sans;">如果你想做一些事情在</span>catching <span style="font-family: DejaVu Sans;">错误的时候做多一点的阐述，你可以使用 </span><tt>rescue_from</tt><span style="font-family: DejaVu Sans;"><tt>，其处理一种明确的异常类型（或者多种）在整个</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>以及它的子类中。</tt></span>

When an exception occurs which is caught by a <tt>rescue_from</tt> directive, the exception object is passed to the handler. The handler can be a method or a <tt>Proc</tt> object passed to the <tt>:with</tt> option. You can also use a block directly instead of an explicit <tt>Proc</tt> object.

<span style="font-family: DejaVu Sans;">当一个异常发生其会直接引发 </span><tt>rescue_from</tt><span style="font-family: DejaVu Sans;"><tt>，这个</tt></span><tt>exception</tt><span style="font-family: DejaVu Sans;"><tt>对象被传递给</tt></span><tt>handler</tt><span style="font-family: DejaVu Sans;"><tt>。这个</tt></span><tt>handler</tt><span style="font-family: DejaVu Sans;"><tt>可以是一个方法或者一个被传递给</tt></span><tt>:with</tt><span style="font-family: DejaVu Sans;"><tt>选项的</tt></span><tt>Proc</tt><span style="font-family: DejaVu Sans;"><tt>对象。你也可以直接使用一个</tt></span><tt>block</tt><span style="font-family: DejaVu Sans;"><tt>替代准确的</tt></span><tt>Proc</tt><span style="font-family: DejaVu Sans;"><tt>对象。</tt></span>

Here’s how you can use <tt>rescue_from</tt> to intercept all <tt>ActiveRecord::RecordNotFound</tt> errors and do something with them.

<span style="font-family: DejaVu Sans;">这里是你如何使用 </span><tt>rescue_from</tt><span style="font-family: DejaVu Sans;"><tt>来截取所有的</tt></span><tt>ActiveRecord::RecordNotFound errors</tt><span style="font-family: DejaVu Sans;"><tt>并且为其做一些事情。</tt></span>

<tt>class ApplicationController &lt; ActionController::Base</tt>

<tt> </tt><tt>rescue_from ActiveRecord::RecordNotFound, :with =&gt; :record_not_found</tt>

&nbsp;

<tt> </tt><tt>private</tt>

&nbsp;

<tt> </tt><tt>def record_not_found</tt>

<tt> </tt><tt>render :text =&gt; "404 Not Found", :status =&gt; 404</tt>

<tt> </tt><tt>end</tt>

<tt>end</tt>

Of course, this example is anything but elaborate and doesn’t improve on the default exception handling at all, but once you can catch all those exceptions you’re free to do whatever you want with them. For example, you could create custom exception classes that will be thrown when a user doesn’t have access to a certain section of your application:

<span style="font-family: DejaVu Sans;">当然，这个例子的所有事情仅仅只是阐述以及没有改善默认的异常处理，但是一旦你可以</span>catch<span style="font-family: DejaVu Sans;">所有的异常你可以自由的做你想做的。例如，你可以创建定制的异常类它将在用户访问没有访问权限的应用程序的某些部分时候抛出：</span>

class ApplicationController &lt; ActionController::Base

rescue_from User::NotAuthorized, :with =&gt; :user_not_authorized

&nbsp;

private

&nbsp;

def user_not_authorized

flash[:error] = "You don't have access to this section."

redirect_to :back

end

end

&nbsp;

class ClientsController &lt; ApplicationController

# Check that the user has the right authorization to access clients.

before_filter :check_authorization

&nbsp;

# Note how the actions don't have to worry about all the auth stuff.

def edit

@client = Client.find(params[:id])

end

&nbsp;

private

&nbsp;

# If the user is not authorized, just throw the exception.

def check_authorization

raise User::NotAuthorized unless current_user.admin?

end

end

Certain exceptions are only rescuable from the <tt>ApplicationController</tt> class, as they are raised before the controller gets initialized and the action gets executed. See Pratik Naik’s <a href="http://m.onkey.org/2008/7/20/rescue-from-dispatching">article</a> on the subject for more information.
<h3><a name="force-https-protocol"></a><a name="result_box3"></a> 14 Force HTTPS protocol<span style="font-family: WenQuanYi Micro Hei;">强制</span>HTTPS<span style="font-family: WenQuanYi Micro Hei;">协议</span></h3>
Sometime you might want to force a particular controller to only be accessible via an HTTPS protocol for security reason. Since Rails 3.1 you can now use <tt>force_ssl</tt> method in your controller to enforce that:

<span style="font-family: DejaVu Sans;">有时候因为安全原因你可能希望强制特定的</span>cotroller<span style="font-family: DejaVu Sans;">仅仅在</span>HTTPS<span style="font-family: DejaVu Sans;">协议下是可访问的。从</span>Rails 3.1<span style="font-family: DejaVu Sans;">你可以在你的</span>controller<span style="font-family: DejaVu Sans;">使用 </span><tt>force_ssl</tt><span style="font-family: DejaVu Sans;"><tt>来强制执行：</tt></span>

class DinnerController

force_ssl

end

Just like the filter, you could also passing <tt>:only</tt> and <tt>:except</tt> to enforce the secure connection only to specific actions.

class DinnerController

force_ssl :only =&gt; :cheeseburger

# or

force_ssl :except =&gt; :cheeseburger

end

Please note that if you found yourself adding <tt>force_ssl</tt> to many controllers, you may found yourself wanting to force the whole application to use HTTPS instead. In that case, you can set the <tt>config.force_ssl</tt> in your environment file.

<span style="font-family: DejaVu Sans;">请注意如果你发现你自己的添加 </span><tt>force_ssl</tt><span style="font-family: DejaVu Sans;"><tt>到许多</tt></span><tt>controllers</tt><span style="font-family: DejaVu Sans;"><tt>，你可能发现你自己希望强制整个应用程序使用</tt></span><tt>HTTPS</tt><span style="font-family: DejaVu Sans;"><tt>替代。因为这样的原因，你可以在你的环境文件中设置</tt></span><tt>config.force_ssl</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

<a href="http://jhjguxin.hwcrazy.com/tag/controller/">controller</a> <a href="http://jhjguxin.hwcrazy.com/tag/filter/">filter</a> <a href="http://jhjguxin.hwcrazy.com/tag/guide/">guide</a> <a href="http://jhjguxin.hwcrazy.com/tag/rails/">rails</a> <a href="http://jhjguxin.hwcrazy.com/tag/ruby/">ruby</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date>2011-12-27 00:24:51</wp:post_date>
		<wp:post_date_gmt>2011-12-26 16:24:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>action-controller-overview</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="controller"><![CDATA[controller]]></category>
		<category domain="post_tag" nicename="filter"><![CDATA[filter]]></category>
		<category domain="post_tag" nicename="guide"><![CDATA[guide]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ruby-debug in 30 seconds (we don&#039;t need no stinkin&#039; GUI!) </title>
		<link></link>
		<pubDate>Tue, 27 Dec 2011 09:38:31 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=126</guid>
		<description></description>
		<content:encoded><![CDATA[<code>Many people (including me) have complained about the lack of a good GUI debugger for Ruby. Now that some are finally getting usable, I've found I actually prefer IRB-style ruby-debug to a GUI.</code>

There's good tutorial links on the <a href="http://www.datanoise.com/ruby-debug/">ruby-debug homepage</a>, and a very good <a href="http://cheat.errtheblog.com/s/rdebug/">Cheat sheet</a>, but I wanted to give a bare-bones HOWTO to help you get immediately productive with ruby-debug.
<h1>Install the latest gem</h1>
<pre><code>$ gem install ruby-debug </code></pre>
<h1>Install the cheatsheet</h1>
<pre><code>$ gem install cheat $ cheat rdebug </code></pre>
<h1>Set autolist, autoeval, and autoreload as defaults</h1>
<pre><code>$ vi ~/.rdebugrc set autolist set autoeval set autoreload </code></pre>
<h1>Run Rails (or other app) via rdebug</h1>
<pre><code>$ rdebug script/server </code></pre>
<h1>Breakpoint from rdebug</h1>
<pre><code>(rdb:1) b app/controllers/my_controller.rb:10 </code></pre>
<h1>Breakpoint in source</h1>
<pre><code>require 'ruby-debug' debugger my_buggy_method('foo') </code></pre>
<h1>Catchpoint</h1>
<pre><code>(rdb:1) cat RuntimeError </code></pre>
<h1>Continue to breakpoint</h1>
<pre><code>(rdb:1) c </code></pre>
<h1>Next Line (Step Over)</h1>
<pre><code>(rdb:1) n </code></pre>
<h1>Step Into</h1>
<pre><code>(rdb:1) s </code></pre>
<h1>Continue</h1>
<pre><code>(rdb:1) c </code></pre>
<h1>Where (Display Frame / Call Stack)</h1>
<pre><code>(rdb:1) where </code></pre>
<h1>List current line</h1>
<pre><code>(rdb:1) l= </code></pre>
<h1>Evaluate any var or expression</h1>
<pre><code>(rdb:1) myvar.class </code></pre>
<h1>Modify a var</h1>
<pre><code>(rdb:1) @myvar = 'foo' </code></pre>
<h1>Help</h1>
<pre><code>(rdb:1) h </code></pre>
There are many other commands, but these are the basics you need to poke around. Check the <a href="http://cheat.errtheblog.com/s/rdebug/">Cheat sheet</a> for details.

This can also be used directly from any IDE that supports input into a running console (such as Intellij Idea).

That should get you started. So, before you stick in another 'p' to debug, try out ruby-debug instead!

<code>require 'rubygems'
require 'ruby-debug'
#$ruby breakpoint_test.rb
#vim breakpoint_test.rb
#:!ruby breakpoint_test.rb
#Next Line (Step Over)
#(rdb:1) n
#Step Into
#(rdb:1) s
#to debug in a function which is called from other place,before this function call,type 's' and you will found your are inside this function.
def leap_year year
leap = case
breakpoint
when year % 400 == 0: true
when year % 100 == 0: false
else year % 4 ==0
end
puts leap
end
if __FILE__ == $0
# tests...
puts "year=2000"
leap_year 2000
puts "year=2004"
leap_year 2004
puts "year=2002"
leap_year 2002
end</code>

标签： <a href="http://jhjguxin.hwcrazy.com/tag/breakpoint/">breakpoint</a> <a href="http://jhjguxin.hwcrazy.com/tag/debug/">debug</a> <a href="http://jhjguxin.hwcrazy.com/tag/rails/">rails</a> <a href="http://jhjguxin.hwcrazy.com/tag/ruby/">ruby</a> <a href="http://jhjguxin.hwcrazy.com/tag/shell/">shell</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>126</wp:post_id>
		<wp:post_date>2011-12-27 17:38:31</wp:post_date>
		<wp:post_date_gmt>2011-12-27 09:38:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-debug-in-30-seconds-we-dont-need-no-stinkin-gui</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="breakpoint"><![CDATA[breakpoint]]></category>
		<category domain="post_tag" nicename="debug"><![CDATA[debug]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="shell"><![CDATA[shell]]></category>
		<category domain="post_tag" nicename="vim"><![CDATA[vim]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>/usr 的来龙去脉</title>
		<link></link>
		<pubDate>Wed, 28 Dec 2011 10:21:38 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=128</guid>
		<description></description>
		<content:encoded><![CDATA[在 linux 文件结构中，有一个很神奇的目录 —— /usr。之前一直没有怎么关注过它，反正程序都是安装在里边的，也没有什么值得追根溯源的东西。直到有一天 <a href="http://cnbeta.com/articles/160791.htm">fedora 要简化整个文件系统体系</a>，看到讨论才想到，usr 到底是什么的缩写呢，它又是怎么来的呢？

讨论中，大部分观点认为：
<ul>
	<li>usr 是 unix system resources 的缩写；</li>
	<li>usr 是 user 的缩写；</li>
	<li>usr 是 unix software resources 的缩写。</li>
</ul>
根据常识判断，是 user 缩写的可能性不大，因为和 /home 冲突了嘛。不过是 system resources 还是 software resources 的缩写还真不好说。特此查了好多东西，却发现竟然连 <a href="http://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard">wikipedia 也模棱两可</a>。

后来终于找到了 相关的文档和介绍。（<a href="http://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/usr.html">via</a>，<a href="http://webcache.googleusercontent.com/search?q=cache:HBW07QkS9DsJ:tldp.org/LDP/Linux-Filesystem-Hierarchy/html/usr.html+&amp;cd=1&amp;hl=en&amp;ct=clnk">cache</a>）
<blockquote>/usr usually contains by far the largest share of data on a system. Hence, this is one of the most important directories in the system as it contains all the user binaries, their documentation, libraries, header files, etc…. X and its supporting libraries can be found here. User programs like telnet, ftp, etc…. are also placed here. In the original Unix implementations, /usr was where the home directories of the users were placed (that is to say, /usr/someone was then the directory now known as /home/someone). In current Unices, /usr is where user-land programs and data (as opposed to ’system land’ programs and data) are. <strong>The name hasn’t changed, but it’s meaning has narrowed and lengthened from “everything user related” to “user usable programs and data”. As such, some people may now refer to this directory as meaning ‘User System Resources’ and not ‘user’ as was originally intended.</strong>（via<a href="http://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/usr.html">1</a>,<a href="http://en.wikipedia.org/wiki/Unix_directory_structure">2</a>）</blockquote>
/usr 是系统核心所在，包含了所有的共享文件。它是 unix 系统中最重要的目录之一，涵盖了二进制文件，各种文档，各种头文件，x，还有各种库文件；还有诸多程序，例如 ftp，telnet 等等。

曾经的 /usr 还是用户的家目录，存放着各种用户文件 —— 现在已经被 /home 取代了（例如 /usr/someone 已经改为 /home/someone）。现代的 /usr 只专门存放各种程序和数据，用户目录已经转移。虽然  /usr 名称未改，不过其含义已经从“用户目录”变成了“unix 系统资源”目录。值得注意的是，在一些 unix 系统上，仍然把 /usr/someone 当做用户家目录，如 Minix。

至此，真相大白。看来就像前一阵子的 <a href="http://linux.solidot.org/linux/11/03/31/0958237.shtml">/var/run 移到 /run</a> 一样。

真的是不看不知道，一看吓一跳呀。原来 linux 几经进化，好多目录的诞生和用途已经产生了根本的变化。历史车轮在前进，长江后浪推前浪，正所谓：学习历史，收获真知；尽心竭力，前进不止。
<h2><strong>附录：/usr 目录结构</strong></h2>
<ul>
	<li><strong>/usr/bin</strong> : 所有可执行文件，如 gcc，firefox 等（指不包含在 <strong>/sbin</strong> 和 <strong>/bin</strong> 内的）；</li>
	<li><strong>/usr/include</strong> : 各种头文件，编译文件等时需要使用；
<ul>
	<li><strong>/usr/include/’package-name’</strong> : 程序特定的头文件；</li>
</ul>
</li>
	<li><strong>/usr/lib</strong> : 所以可执行文件所需要的库文件；</li>
	<li><strong>/usr/local </strong>: /usr 通常只包含系统发行时自带的程序，而 /usr/local 则是本地系统管理员用来自由添加程序的目录；</li>
	<li><strong>/usr/X11R6</strong> : x 系统的二进制文件，库文件，文档，字体等。它不等同于 /usr 的作用，只有 x 才能调用这些库文件等，其他程序不读取或者使用。因为 linux 没有原生图形界面，而且 linux 大部分情况下是 for server 的，所以图形界面没有意义；其中 X11R6 代表 version 11 release 6；
<ul>
	<li><strong>/usr/X11R6/bin</strong> : x 的二进制文件，包含运行 x 的必须文件；</li>
	<li><strong>/usr/X11R6/include</strong> : x 相关的头文件；</li>
	<li><strong>/usr/X11R6/lib</strong> : x 库文件；</li>
	<li><strong>/usr/X11R6/lib/modules</strong> : x 的模块，启动时加载。缺少 video4linux, DRI and GLX 和 输入输出设备 模块，将工作不正常；</li>
	<li><strong>/usr/X11R6/lib/X11/fonts</strong> : x font server 的字体文件；</li>
</ul>
</li>
	<li><strong>/usr/doc</strong> : 文档。实际是<strong> /usr/share/doc </strong>的软链接；</li>
	<li><strong>/usr/etc</strong> : 一个极少用到的配置文件存放地；</li>
	<li><strong>/usr/games</strong> : 曾经包含游戏等文件，现在很少用到；</li>
	<li><strong>/usr/info</strong> : 系统相关信息，是 <strong>/usr/share/info </strong>的软链接；</li>
	<li><strong>/usr/man</strong> : man 手册，已经移至 <strong>/usr/share/man</strong>；</li>
	<li><strong>/usr/sbin</strong> : 类似 /sbin，root 可以执行。但此目录不包含在环境变量 $PATH 中，它包含的程序类似于 chroot, useradd, in.tftpd and pppconfig；</li>
	<li><strong>/usr/share</strong> : 它包含了各种程序间的共享文件，如字体，图标，文档等。（/usr/local 对应的目录是  /usr/loca/share）;
<ul>
	<li><strong>/usr/share/doc</strong> : 类似应用程序的 man 手册。它包含程序的说明文件，默认配置文件等；</li>
	<li><strong>/usr/share/info</strong> : 不常用，已经被 man 代替；</li>
	<li><strong>/usr/share/man</strong> : app 的 manual；</li>
	<li><strong>/usr/share/icons</strong> : 应用程序的图标等文件，分为 png，svg 等多种格式；</li>
	<li><strong>/usr/share/fonts</strong> : 字体文件，系统范围内可使用，~/.fonts 仅当前用户可用；</li>
</ul>
</li>
	<li><strong>/usr/src</strong> : linux 内核的源码和说明文档等；
<ul>
	<li><strong>/usr/src/linux</strong> : linux 源代码；</li>
	<li><strong>/usr/src/linux/.config</strong> : 内核编译过程产生的文件；通常由命令 ‘make config’ ， ‘make menuconfig’ 或 ‘make xconfig’ 执行后产生；</li>
	<li><strong>/usr/src/linux/.depend, /usr/src/linux/.hdepend</strong> : ‘make dep’ 检测编译依赖时需要的文件，由 /usr/src/linux/.config 产生；</li>
	<li><strong>/usr/src/linux/COPYING</strong> : GNU license；</li>
	<li><strong>/usr/src/linux/Makefile</strong> : 编译内核所需的 Makefile；</li>
	<li><strong>/usr/src/linux/Rules.make</strong> : 当有多个 Makefile 时，根据它的规则执行 make；</li>
</ul>
</li>
	<li><strong>/usr/tmp</strong> : 已经被众多发行版抛弃的临时文件夹。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date>2011-12-28 18:21:38</wp:post_date>
		<wp:post_date_gmt>2011-12-28 10:21:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>usr-%e7%9a%84%e6%9d%a5%e9%be%99%e5%8e%bb%e8%84%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="usr"><![CDATA[usr]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>大型网站架构不得不考虑的10个问题</title>
		<link></link>
		<pubDate>Wed, 28 Dec 2011 10:41:00 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=130</guid>
		<description></description>
		<content:encoded><![CDATA[这里的大型网站架构只包括高互动性高交互性的数据型大型网站，基于大家众所周知的原因，我们就不谈新闻类和一些依靠HTML静态化就可以实现的架构 了，我们以高负载高数据交换高数据流动性的网站为例，比如海内，开心网等类似的web2.0系列架构。我们这里不讨论是PHP还是JSP或者.NET环 境，我们从架构的方面去看问题，实现语言方面并不是问题，语言的优势在于实现而不是好坏，不论你选择任何语言，架构都是必须要面对的。

这里讨论一下大型网站需要注意和考虑的问题。

1、海量数据的处理

众所周知，对于一些相对小的站点来说，数据量并不是很大，select和update就可以解决我们面对的问题，本身负载量不是很大，最多再加几个 索引就可以搞定。对于大型网站，每天的数据量可能就上百万，如果一个设计不好的多对多关系，在前期是没有任何问题的，但是随着用户的增长，数据量会是几何 级的增长的。在这个时候我们对于一个表的select和update的时候(还不说多表联合查询)的成本的非常高的。

2、数据并发的处理

在一些时候，2.0的CTO都有个尚方宝剑，就是缓存。对于缓存，在高并发高处理的时候也是个大问题。在整个应用程序下，缓存是全局共享的，然而在 我们进行修改的时候就，如果两个或者多个请求同时对缓存有更新的要求的情况下，应用程序会直接的死掉。这个时候，就需要一个好的数据并发处理策略以及缓存 策略。

另外，就是数据库的死锁问题，也许平时我们感觉不到，死锁在高并发的情况下的出现的概率是非常高的，磁盘缓存就是一个大问题。

3、文件存贮的问题

对于一些支持文件上传的2.0的站点，在庆幸硬盘容量越来越大的时候我们更多的应该考虑的是文件应该如何被存储并且被有效的索引。常见的方案是对文 件按照日期和类型进行存贮。但是当文件量是海量的数据的情况下，如果一块硬盘存贮了500个G的琐碎文件，那么维护的时候和使用的时候磁盘的Io就是一个 巨大的问题，哪怕你的带宽足够，但是你的磁盘也未必响应过来。如果这个时候还涉及上传，磁盘很容易就over了。

也许用raid和专用存贮服务器能解决眼下的问题，但是还有个问题就是各地的访问问题，也许我们的服务器在北京，可能在云南或者新疆的访问速度如何解决?如果做分布式，那么我们的文件索引以及架构该如何规划。

所以我们不得不承认，文件存贮是个很不容易的问题

4、数据关系的处理

我们可以很容易的规划出一个符合第三范式的数据库，里面布满了多对多关系，还能用GUID来替换INDENTIFY COLUMN 但是，多对多关系充斥的2.0时代，第三范式是第一个应该被抛弃的。必须有效的把多表联合查询降到最低。

5、数据索引的问题

众所周知，索引是提高数据库效率查询的最方面最廉价最容易实现的方案。但是，在高UPDATE的情况下，update和delete付出的成本会高的无法想想，笔者遇到过一个情况，在更新一个聚焦索引的时候需要10分钟来完成，那么对于站点来说，这些基本上是不可忍受的。

索引和更新是一对天生的冤家，问题A，D，E这些是我们在做架构的时候不得不考虑的问题，并且也可能是花费时间最多的问题。

6、分布式处理

对于2.0网站由于其高互动性，CDN实现的效果基本上为0，内容是实时更新的，我们常规的处理。为了保证各地的访问速度，我们就需要面对一个绝大的问题，就是如何有效的实现数据同步和更新，实现各地服务器的实时通讯有是一个不得不需要考虑的问题。

7、Ajax的利弊分析

成也AJAX，败也AJAX，AJAX成为了主流趋势，突然发现基于XMLHTTP的post和get是如此的容易。客户端get或者post 到服务器数据，服务器接到数据请求之后返回来，这是一个很正常的AJAX请求。但是在AJAX处理的时候，如果我们使用一个抓包工具的话，对数据返回和处 理是一目了然。对于一些计算量大的AJAX请求的话，我们可以构造一个发包机，很容易就可以把一个webserver干掉。

8、数据安全性的分析

对于HTTP协议来说，数据包都是明文传输的，也许我们可以说我们可以用加密啊，但是对于G问题来说的话，加密的过程就可能是明文了(比如我们知道 的QQ，可以很容易的判断他的加密，并有效的写一个跟他一样的加密和解密方法出来的)。当你站点流量不是很大的时候没有人会在乎你，但是当你流量上来之 后，那么所谓的外挂，所谓的群发就会接踵而来(从qq一开始的群发可见端倪)。也许我们可以很的意的说，我们可以采用更高级别的判断甚至HTTPS来实 现，注意，当你做这些处理的时候付出的将是海量的database，io以及CPU的成本。对于一些群发，基本上是不可能的。笔者已经可以实现对于百度空 间和qq空间的群发了。大家愿意试试，实际上并不是很难。

9、数据同步和集群的处理的问题

当我们的一台databaseserver不堪重负的时候，这个时候我们就需要做基于数据库的负载和集群了。而这个时候可能是最让人困扰的的问题 了，数据基于网络传输根据数据库的设计的不同，数据延迟是很可怕的问题，也是不可避免的问题，这样的话，我们就需要通过另外的手段来保证在这延迟的几秒或 者更长的几分钟时间内，实现有效的交互。比如数据散列，分割，内容处理等等问题。

10、数据共享的渠道以及OPENAPI趋势

Openapi已经成为一个不可避免的趋势，从google，facebook，myspace到21kaiyun.com，都在考虑这个问题，它 可以更有效的留住用户并激发用户的更多的兴趣以及让更多的人帮助你做最有效的开发。这个时候一个有效的数据共享平台，数据开放平台就成为必不可少的途径 了，而在开放的接口的情况保证数据的安全性和性能，又是一个我们必须要认真思考的问题了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date>2011-12-28 18:41:00</wp:post_date>
		<wp:post_date_gmt>2011-12-28 10:41:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%a4%a7%e5%9e%8b%e7%bd%91%e7%ab%99%e6%9e%b6%e6%9e%84%e4%b8%8d%e5%be%97%e4%b8%8d%e8%80%83%e8%99%91%e7%9a%8410%e4%b8%aa%e9%97%ae%e9%a2%98</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="notes"><![CDATA[notes]]></category>
		<category domain="post_tag" nicename="%e5%a4%a7%e5%9e%8b"><![CDATA[大型]]></category>
		<category domain="post_tag" nicename="%e6%9e%b6%e6%9e%84"><![CDATA[架构]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e7%ab%99"><![CDATA[网站]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>不要自称为程序员</title>
		<link></link>
		<pubDate>Wed, 28 Dec 2011 10:50:41 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=133</guid>
		<description></description>
		<content:encoded><![CDATA[每年都有无数年轻程序员，加入软件行业。

&nbsp;

他们在学校里学过编程，但是对这个行业的现实一无所知。

&nbsp;

Patrick McKenzie是美国一家小软件公司的老板，他写了一篇长文，介绍这个行业的一些实际情况。我看了以后很感慨，有些地方很受启发。我选择了一部分，翻译如下。

&nbsp;

<strong>一、90%的编程工作来自内部软件</strong>

&nbsp;

（90% of programming jobs are in creating Line of Business software）

&nbsp;

计算机专业的学生，可能有一种印象，觉得大部分程序员，都在编写公开出售的软件或者通用软件。

&nbsp;

这种看法是不对的。大部分程序员，实际上编写的是不公开的企业内部软件，比如追踪费用的软件、优化装运成本的软件、帮助记账的软件、设计新部件的软件、计算保单价格的软件、识别恶意订单的软件等等。

&nbsp;

各种各样的商业公司，开发内部软件，解决它们自己的问题。市场上对程序员的大部分需求来源于此，只有极少数程序员直接编写面向外部顾客的软件。

&nbsp;

内部软件的开发，通常非常乏味，令人厌倦。因为它们的技术复杂性低、技术决策非常保守、预算很少、缺乏长远考虑。但是，世界上大部分编程工作都是这种。

&nbsp;

<strong>二、别人雇你的目的，是让你创造利润，不是让你编程</strong>

&nbsp;

（Engineers are hired to create business value, not to program things）

&nbsp;

商业公司最关心的（或者说唯一在乎的）事情，就是增加收入、降低成本。因此，它们实际上需要的不是程序员，而是能够帮助它们增加收入、降低成本的人。

&nbsp;

开发优美的软件，解决技术难题，编写没有bug的代码，这些都不是商业公司的目的。它们雇佣你，是为了让你帮它们完成某个可以增加收入、降低成本的项目，而不是因为你是geek。

&nbsp;

你个人对于公司的唯一价值，就在于你能多大程度上为它们增加收入、降低成本。

&nbsp;

<strong>三、不要自称为程序员</strong>

&nbsp;

（Don’t call yourself a programmer）

&nbsp;

很多公司的经理不懂计算机，在他们心目中，”程序员”就是一群高成本的劳动力，只会在一台复杂的机器上干一些难懂的事情。

&nbsp;

如果你自称为”程序员”，当公司需要压缩成本的时候，某些经理首先就会想到解雇你。有一家公司叫Salesforce，口号是”没有软件”，意思就是如果经理们购买了他们的服务，就不再需要别的软件管理销售业务了，也就是说，不再需要自己雇佣程序员了。

&nbsp;

正确的做法是，你应该把自己描述成与增加收入、降低成本有关系的人，比如”xx产品的开发者”或”改进者”。有一个Google Adsense程序员的自我介绍，是这样写的：”Google公司97%的收入，与我的代码有关。”

&nbsp;

<strong>四、不要限定自己</strong>

&nbsp;

（You are not defined by your chosen software stack）

&nbsp;

年轻学生经常会问，应该选择哪种语言或平台？学会Java，是不是比学会.NET容易找工作？

&nbsp;

过分强调某一种语言或平台，都是不必要的。如果你把自己限定为Java程序员或.NET程序员，你就已经输了，因为首先你不应该自称为程序员（理由见上一点），其次这种限定使得你自动被排除在世界上大多数编程工作之外。

&nbsp;

现实生活中，学会一种新语言，只需要几个星期，然后再过半年到一年，你就会变成老手。那时，根本没人在乎你以前用什么语言。

&nbsp;

天才程序员是很少的，可是需要天才程序员的工作机会却很多很多，大多数场合都是需求远远大于供给。这意味着，即使你不是天才程序员，只要你是一个优 秀工程师，那些招聘公司也会立刻录用你，因为它们知道招聘到天才程序员的机会微乎其微。（重复一遍，所谓”优秀工程师”，就是你的履历上有一连串增加收 入、降低成本的记录。）

&nbsp;

某些公司的人事部门，会根据某个关键词（比如Java或.NET）过滤简历。虽然这样的公司根本不值得去，但是如果你真的想过这一关，也很容易：投入几个晚上和周末，在你当前的项目中设法用到这个关键词，然后再把它写进简历就行了。

&nbsp;

<strong>五、如何提高求职时的谈判能力？</strong>

&nbsp;

（How do I become better at negotiation?）

&nbsp;

（1）记住你不是在求职，不是在展示编程技巧，而是在推销某种商业需求（增加收入或降低成本）的解决方案。

&nbsp;

（2）面试时，要有自信，要平等的对话。你要的是一个互利的录用合同，不要每次对方提出要求，你都说Yes。

&nbsp;

（3）雇主可能会问”你的上一份工资是多少”，他们其实在说”给我一个理由，压低你的报酬”。你要想好如何适当地回答这个问题。

&nbsp;

（4）要还价。这里不仅仅指钱，还指其它你关心的方面。如果你无法要求更高的薪水，那就试着要求更多的假期。

&nbsp;

（5）在对方决定录用你以后，才开始讨论薪水。因为那时，他们已经在你身上，投入了大量的时间和金钱，产生了一定的成本，此时他们可能觉得一些小问题已经不值得再纠缠了，比如每年的工资增加几千元。

&nbsp;

<strong>六、创业公司是否适合应届毕业生？</strong>

&nbsp;

（Are startups great for your career as a fresh graduate?）

&nbsp;

如果你一毕业就加入创业公司，最可能的结果是，接下来几年你都工作得非常辛苦，然后公司悲惨地失败了，你失业了，不得不又去另一家创业公司工作。

&nbsp;

如果你真的想去创业公司，应该首先找一家大公司干上两年，攒一点钱，积累一些经验，然后精心挑选后再去创业公司。

&nbsp;

在创业公司工作，一般情况下，你遇到的都是创业者。他们大多数人没有能力在两年后雇佣你；而在大公司工作，你遇到的都是其他大公司的人，他们中很多人将来有能力雇用你或者帮你介绍工作。

&nbsp;

<strong>七、在创业公司工作是否值得推荐？</strong>

&nbsp;

（So would you recommend working at a startup? ）

&nbsp;

选择创业公司，就是选择一条职业道路，而不是选择一种生活方式。可惜很多人把这两者颠倒了，他们推荐创业公司，实际上是在推荐一种你感兴趣的生活方式。

&nbsp;

如果你确实喜欢这种生活方式，老实说，你在大公司里也可以得到它们。在许许多多大公司里，你都有机会钻研最新的技术，而且还能5点半准时回家照顾孩子。

&nbsp;

<strong>八、沟通技能是最重要的职业技能</strong>

&nbsp;

（Your most important professional skill is communication）

&nbsp;

前面说过，工程师被雇佣，不是因为会编程，而是因为能够创造商业价值。所以，你让人们相信你能创造价值，这是帮助你找到工作的最重要的能力。这种能力与你真的能创造多少价值，实际上联系不是很紧密。

&nbsp;

我认识的一些最优秀的程序员，往往拙于表达。因此，别人不是不想与他们一起工作，就是低估了他们的价值。相反地，如果你看上去很会编程，并且很善于表达，别人就会真的这样看待你。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>133</wp:post_id>
		<wp:post_date>2011-12-28 18:50:41</wp:post_date>
		<wp:post_date_gmt>2011-12-28 10:50:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%b8%8d%e8%a6%81%e8%87%aa%e7%a7%b0%e4%b8%ba%e7%a8%8b%e5%ba%8f%e5%91%98</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e7%a8%8b%e5%ba%8f%e5%91%98"><![CDATA[程序员]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>每个程序员都必须遵守的编程原则</title>
		<link></link>
		<pubDate>Wed, 28 Dec 2011 10:51:29 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=135</guid>
		<description></description>
		<content:encoded><![CDATA[好的编程原则跟好的系统设计原则和技术实施原则有着密切的联系。下面的这些编程原则在过去的这些年里让我成为了一名优秀的程序员，我相信，这些原则对任何一个开发人员来说，都能让他的编程能力大幅度的提高，能让他开发出可维护性更强、缺陷更少的程序。

<strong>我不要自我重复</strong> — 这也许是在编程开发这最最基本的一个信条，就是要告诉你不要出现重复的代码。我们很多的编程结构之所以存在，就是为了帮助我们消除重复(例如，循环语句， 函数，类，等等)。一旦程序里开始有重复现象的出现(例如很长的表达式、一大堆的语句，但都是为了表达相同的概念)，你就需要对代码进行一次新的提炼，抽 象。
<a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">http://en.wikipedia.org/wiki/Don%27t_repeat_yourself</a>

<strong>提炼原则</strong> — 跟“不要自我重复原则”相关，这一原则是说“程序中任何一段具有功能性的代码在源代码文件中应该唯一的存在。”
<a href="http://en.wikipedia.org/wiki/Abstraction_principle_%28programming">http://en.wikipedia.org/wiki/Abstraction_principle_(programming</a>)

<strong>保持简单</strong> — 简单化(避免复杂)永远都应该是你的头等目标。简单的程序让你写起来容易，产生的bug更少，更容易维护修改。
<a href="http://en.wikipedia.org/wiki/KISS_principle">http://en.wikipedia.org/wiki/KISS_principle</a>

<strong>不要开发你目前用不到的功能</strong> — 除非你真正需要用到它，否则不要轻易加上那些乱七八糟用不到的功能。
<a href="http://en.wikipedia.org/wiki/YAGNI">http://en.wikipedia.org/wiki/YAGNI</a>

<strong>用最简单的方法让程序跑起来</strong> — 在开发时有个非常好的问题你需要问问自己，“怎样才能最简单的让程序跑起来？”这能帮助我们在设计时让程序保持简单。
<a href="http://c2.com/xp/DoTheSimplestThingThatCouldPossiblyWork.html">http://c2.com/xp/DoTheSimplestThingThatCouldPossiblyWork.html</a>

<strong>不要让我动脑子</strong> — 这实际上是Steve Krug 关于web界面操作的一本书的书名，但也适用于编程。主旨是，程序代码应该让人们花最小的努力就能读懂和理解。如果一段程序对于阅读者来说需要花费太多的努力才能理解，那它很可能需要进一步简化。
<a href="http://www.sensible.com/dmmt.html">http://www.sensible.com/dmmt.html</a>

<strong>开放</strong><strong>/</strong><strong>封闭原则</strong> — 程序里的实体项(类，模块，函数等)应该对扩展行为开放，对修改行为关闭。换句话说，不要写允许别人修改的类，应该写能让人们扩展的类。
<a href="http://en.wikipedia.org/wiki/Open_Closed_Principle">http://en.wikipedia.org/wiki/Open_Closed_Principle</a>

<strong>为维护者写程序</strong> — 任何值得你编写的程序在将来都是值得你去维护的，也许由你维护，也许由他人。在将来，当你不得不维护这些程序时，你对这些代码的记忆会基本上跟一个陌生人 一样，所以，你最好还是当成一直在给别人写程序。一个有助于你记住这个原则的办法是“写程序时时刻记着，这个将来要维护你写的程序的人是一个有严重暴力倾 向，并且知道你住在哪里的精神变态者”。
<a href="http://c2.com/cgi/wiki?CodeForTheMaintainer">http://c2.com/cgi/wiki?CodeForTheMaintainer</a>

<strong>最少意外原则</strong> — 最少意外原则通常是使用在用户界面设计上，但这个原则同样适用于编写程序。程序代码应尽可能的不要让阅读者感到意外。也就是说应该遵循编码规范和常见习惯，按照公认的习惯方式进行组织和命名，不符常规的编程动作应该尽可能的避免。
<a href="http://en.wikipedia.org/wiki/Principle_of_least_astonishment">http://en.wikipedia.org/wiki/Principle_of_least_astonishment</a>

<strong>单一职责原则</strong> — 一个代码组件(例如类或函数)应该只执行单一的预设的任务。
<a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">http://en.wikipedia.org/wiki/Single_responsibility_principle</a>

<strong>最小化耦合关系</strong> — 一个代码片段(代码块，函数，类等)应该最小化它对其它代码的依赖。这个目标通过尽可能少的使用共享变量来实现。“低耦合是一个计算机系统结构合理、设计优秀的标志，把它与高聚合特征联合起来，会对可读性和可维护性等重要目标的实现具有重要的意义。”
<a href="http://en.wikipedia.org/wiki/Coupling_%28computer_programming">http://en.wikipedia.org/wiki/Coupling_(computer_programming</a>)

<strong>最大化内聚性</strong> — 具有相似功能的代码应该放在同一个代码组件里。
<a href="http://en.wikipedia.org/wiki/Cohesion_%28computer_science">http://en.wikipedia.org/wiki/Cohesion_(computer_science</a>)

<strong>隐藏实现细节</strong> — 隐藏实现细节能最小化你在修改程序组件时产生的对那些使用这个组件的其它程序模块的影响。
<a href="http://en.wikipedia.org/wiki/Information_Hiding">http://en.wikipedia.org/wiki/Information_Hiding</a>

<strong>笛米特法则</strong><strong>(Law of Demeter)</strong> — 程序组件应该只跟它的直系亲属有关系(例如继承类，内包含的对象，通过参数入口传入的对象等。)
<a href="http://en.wikipedia.org/wiki/Law_of_Demeter">http://en.wikipedia.org/wiki/Law_of_Demeter</a>

<strong>避免过早优化</strong> — 只有当你的程序没有其它问题，只是比你预期的要慢时，你才能去考虑优化工作。只有当其它工作都做完后，你才能考虑优化问题，而且你只应该依据经验做法来优 化。“对于小幅度的性能改进都不该考虑，要优化就应该是97%的性能提升：过早优化是一切罪恶的根源”—Donald Knuth。
<a href="http://en.wikipedia.org/wiki/Program_optimization">http://en.wikipedia.org/wiki/Program_optimization</a>

<strong>代码复用</strong> — 这不是非常核心的原则，但它跟其它原则一样非常有价值。代码复用能提高程序的可靠性，节省你的开发时间。
<a href="http://en.wikipedia.org/wiki/Code_reuse">http://en.wikipedia.org/wiki/Code_reuse</a>

<strong>职责分离</strong> — 不同领域的功能应该由完全不同的代码模块来管理，尽量减少这样的模块之间的重叠。<a href="http://en.wikipedia.org/wiki/Separation_of_concerns">http://en.wikipedia.org/wiki/Separation_of_concerns</a>

<strong>拥抱变化</strong> — 这是Kent Beck的一本书的副标题，它也是极限编程和敏捷开发方法的基本信条之一。很多的其它原则都基于此观念：面对变化，欢迎变化。事实上，一些经典的软件工程 原则，例如最小化耦合，就是为了让程序更容易面对变化。不论你是否采用了极限编程方法，这个原则对你的程序开发都有重要意义。<a href="http://bit.ly/pR5Ii5">http://www.amazon.com/gp/product/0321278658</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date>2011-12-28 18:51:29</wp:post_date>
		<wp:post_date_gmt>2011-12-28 10:51:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%af%8f%e4%b8%aa%e7%a8%8b%e5%ba%8f%e5%91%98%e9%83%bd%e5%bf%85%e9%a1%bb%e9%81%b5%e5%ae%88%e7%9a%84%e7%bc%96%e7%a8%8b%e5%8e%9f%e5%88%99</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%8e%9f%e5%88%99"><![CDATA[原则]]></category>
		<category domain="post_tag" nicename="%e7%bc%96%e7%a8%8b"><![CDATA[编程]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>16 条技巧让你更高效使用 SSH</title>
		<link></link>
		<pubDate>Wed, 28 Dec 2011 10:53:03 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=137</guid>
		<description></description>
		<content:encoded><![CDATA[SSH有很多非常酷的特性，如何它是你每天的工作伴侣，那么我想你有必要了解以下16条高效使用SSH的秘籍，它们帮你节省的时间肯定会远远大于你用来配置它们的时间。

<strong>1. 多条连接共享</strong>

如果你需要在多个窗口中打开到同一个服务器的连接，而不想每次都输入用户名，密码，或是等待连接建立，那么你可以配置SSH的连接共享选项，在本地打开你的SSH配置文件，通常它们位于~/.ssh/config，然后添加下面2行：
<blockquote>ControlMaster auto
ControlPath /tmp/ssh_mux_%h_%p_%r</blockquote>
现在试试断开你与服务器的连接，并建立一条新连接，然后打开一个新窗口，再创建一条连接，你会发现，第二条连接几乎是在瞬间就建立好了。

Windows用户

如果你是Windows用户，很不幸，最流行的开源SSH客户端Putty并不支持这个特性，但是Windows上也有OpenSSH的实现，比如这个<a href="http://www.itefix.no/i2/copssh" target="_blank">Copssh</a>，如果你觉得下面的一些技巧对你很有帮助，或许你应该试试Copssh。

文件传输

连接共享不止可以帮助你共享多个SSH连接，如果你需要通过SFTP与服务器传输文件，你会发现，它们使用的依然是同一条连接，如果你使用的 Bash，你会发现，你甚至SSH甚至支持Tab对服务器端文件进行自动补全，共享连接选项对于那些需要借助SSH的工具，比如rsync，git等等也 同样有效。

<strong>2. 长连接</strong>

如果你发现自己每条需要连接同一个服务器无数次，那么长连接选项就是为你准备的：
<blockquote>ControlPersist 4h</blockquote>
现在你每次通过SSH与服务器建立连接之后，这条连接将被保持4个小时，即使在你退出服务器之后，这条连接依然可以重用，因此，在你下一次（4小时 之内）登录服务器时，你会发现连接以闪电般的速度建立完成，这个选项对于通过scp拷贝多个文件提速尤其明显，因为你不在需要为每个文件做单独的认证了。

<strong>3. 别再输入密码</strong>

如果你还在通过密码方式登录SSH，那么你或许应该试试SSH Keys，首先使用OpenSSH为自己声称一对密钥：
<blockquote>$ ssh-keygen</blockquote>
跟随指示，完成之后，你应该可以在你的.ssh目录下看到两个文件，id_rsa就是你的私钥，而id_ras.pub则是你的公钥，现在你需要将你的公钥拷贝到服务器上，如果你的系统有ssh-copy-id命令，拷贝会很简单：
<blockquote>$ ssh-copy-id smylers@compo.example.org</blockquote>
否则，你需要手动将你的私钥拷贝的服务器上的~/.ssh/authorized_keys文件中：
<blockquote>$ &lt; ~/.ssh/id_rsa.pub ssh clegg.example.org ‘mkdir -p .ssh; cat &gt;&gt; .ssh/authorized_keys; chmod go-w .ssh .ssh/authorized_keys’</blockquote>
现在试试重新连接到SSH服务器，或是拷贝文件，是不是已经不需要再输入密码了？

为Putty配置SSH Key

Putty也可以使用SSH Key，<a href="http://www.chiark.greenend.org.uk/%7Esgtatham/putty/download.html" target="_blank">从Putty网站下载PuttyGen和Pageant</a>，然后使用PuttyGen生成你的密钥，将公钥拷贝到服务器的’.ssh/authorized_keys’目录，然后运行Pageant，导入你的私钥，让它在后台运行，险隘你就可以使用Putty通过公钥直接登录服务器了，你可以在<a href="http://the.earth.li/%7Esgtatham/putty/0.61/htmldoc/Chapter8.html" target="_blank">Putty手册的第8，9章</a>了解关于这一特性的详细介绍。

<strong>4. 连接中转</strong>

有时候你可能需要从一个服务器连接另外一个服务器，比如在两个服务器之间直接传输数据，而不用通过本地电脑中转：
<blockquote>www1 $ scp -pr templates www2:$PWD</blockquote>
（顺便说一下，当你需要在两台服务器间拷贝文件时，$PWD变量时非常有用的），因为即使你已经在两台服务器上添加了你本地电脑的公钥，scp默认 仍然会提示你输入密码：这是因为你用来作为跳板的那台服务器上并没有你的私钥，所以，第二胎服务器会拒绝你的公钥，但是一定不要通过将你的私钥拷贝到中转 服务器上来解决这个问题，你可以使用agent forwarding来解决这个问题，只要在你的.ssh/config文件中加入下面这行代码就可以了：
<blockquote>ForwardAgent yes</blockquote>
或者是在Putty中勾上“Allow agent forwarding”选项，现在你的本地SSH就变成了第一台服务器的SSH代理，从第一台服务器在连接其它服务器就变和和在你本地一样简单，注意，如果要开启这个选项，前提是这个中间服务器值得你信任。

<strong>5. 省略主机名</strong>

输入服务器的完整主机名来建立一个新的SSH连接实在是太乏味无聊了，尤其是当你有一组拥有相同域名但是子域名不同的服务器需要管理时，比如下面这样：
<blockquote>* www1.example.com
* www2.example.com
* mail.example.com
* intranet.internal.example.com
* backup.internal.example.com
* dev.internal.example.com</blockquote>
或许你的网络已经配置了可以直接使用短域名，比如intranet，但是如果你的网络不支持，实际上你可以自己搞定这个问题，而不用求助网络管理员。

解决办法根据你用的操作系统而略有差异，下面是我的Ubuntu系统的配置：
<blockquote>prepend domain-search “internal.example.com”, “example.com”;</blockquote>
然后你需要重启网络:$ sudo restart network-manager

不同的系统，这两条命令可能会略有差异。

<strong>5. 主机别名</strong>

你也可以在你的SSH配置中直接定义主机别名，就像下面这样：
<blockquote>Host dev
HostName dev.internal.example.com</blockquote>
你还可以使用通配符来进行分组：
<blockquote>Host dev intranet backup
HostName %h.internal.example.com

Host www* mail
HostName %h.example.com</blockquote>
在Putty中你可以为每个主机名保存单独的session，然后双击建立连接（但是它可能没办法支持通配符）。

<strong>7. 省去用户名</strong>

如果你在远程服务器上的用户名和你本地的用户名不同，你同样可以在SSH配置中进行设置：
<blockquote>Host www* mail
HostName %h.example.com
User simon</blockquote>
现在就算我的本地用户名是 smylers，我仍然可以这样连接我的服务器：
<blockquote>$ ssh www2</blockquote>
SSH会使用simon账户连接你的服务器，同样，Putty可以保存这个信息在你的session中。

<strong>8. 在服务器间跳转</strong>

有些时候，你可能没法直接连接到某台服务器，而需要使用一台中间服务器进行中转，这个过程也可以自动化。首先确保你已经为服务器配置了公钥访问，并开启了agent forwarding，现在你就可以通过2条命令来连接目标服务器，不会有任何提示输入：
<blockquote>$ ssh gateway
gateway $ ssh db</blockquote>
然后在你的本地SSH配置中，添加下面这条配置：
<blockquote>Host db
HostName db.internal.example.com
ProxyCommand ssh gateway netcat -q 600 %h %p</blockquote>
现在你就可以通过一条命令来直接连接目标服务器了:
<blockquote>$ ssh db</blockquote>
这里你可能会需要等待长一点的时间，因为SSH需要进行两次认证，，注意netcat也有可能被写成nc或者ncat或者前面还需要加上g，你需要检查你的中间服务器来确定实际的参数。

<strong>9. 突破网络封锁</strong>

有些时候，你使用的网络可能只开放了80端口，或者它们封锁了SSH端口（默认的22端口），这种情况下，你可以通过配置SSH服务器在80或者443端口进行监听来突破封锁，只需要编辑你的服务器的/etc/ssh/sshd_config文件：
<blockquote>Port 443</blockquote>
然后重启SSH服务器：
<blockquote>$ sudo reload ssh</blockquote>
当然这样做的前提是你的服务器没有使用HTTS服务，但是实际上你只需要设置一台服务器使用https端口就够了，你但你可以访问这台服务器，你就 可以使用我们前面提到的技术利用它作为跳板来访问其它服务器，但是记住，你需要提前配置好这台服务器（现在怎么样？），这样万一当你身处一个只能访问 Web的网络环境时，就可以省掉打电话让其他人帮你配置中间服务器的麻烦了。

<strong>10. 穿越Web代理</strong>

有些时候，你所在的网络不止封锁SSH端口，它们有可能更进一步，只让你通过Web代理来访问网络，幸运的是我们有一个叫做<a href="http://www.agroman.net/corkscrew/" target="_blank">Corkscrew</a>的程序可以通过Web代理在发送SSH数据。Corkscrew的使用非常简单，一般我都是在需要时搜索，然后直接下载，跟随网站上的指示，然后就搞定了，一般你需要这样一条配置：
<blockquote>ProxyCommand corkscrew proxy.example.org 8080 %h %p</blockquote>
<strong>11. 远程GUI</strong>

有时候通过本地的GUI程序来访问远程服务器的文件会非常有用，比如，编辑一副图片，或者查看一个PDF文件，或者只是简单的通过一个非命令行的编 辑器来修改代码，我发现GVim要比终端里的Vim更有用，因为我可以通过gvimopens打开一个新窗口来编辑文件，而用当前的SSH窗口继续执行其 它操作，不要要这样做，你需要先在你的SSH配置中开启一个叫做X forwarding的选项：
<blockquote>ForwardX11 yes</blockquote>
这个选项需要服务器配置才能起作用，服务器也需要开启X forwarding，你可以在服务器的/etc/ssh/sshd_config中添加下面这个命令：
<blockquote>X11Forwarding yes</blockquote>
同时你还需要确保安装了xauth，编辑器，图片查看器以及其它的你需要运行的图形化程序，这种方式只有在支持本地X服务器的操作提供才可以工 作，mac和Windows上都有免费的X Server，你可能需要花些时间配置它们，相比之下，切换到Linux相对会更容易一下。

<strong>12.本地操作远程文件</strong>

另一种让远程GUI程序显示在本地的替代方案就是让本地的GUI程序可以直接操作远程文件，你可以通过SSHFS来实现，只需要创建一个空目录，然后使用SSHFS将一个远程目录mount到这个目录就可以了：
<blockquote>$ mkdir gallery_src
$ sshfs dev:projects/gallery/src gallery_src
$ cd gallery_src
$ ls</blockquote>
现在你就可以使用任何你喜欢的本地程序来便捷这个目录中的文件了，它们看起来是在你的本地，但其实时远程服务器上的文件，你可以使用fusermount命令来unmount这些文件，不要担心记不住，它们就在sshfs手册的顶上：
<blockquote>$ cd ..
$ fusermount -u gallery_src</blockquote>
SSHFS可以在Linux和OSX上工作，Windows用户我目前还没找到什么好办法。

<strong>13. 通过Vim访问远程文件</strong>

Vim有一个内置的功能可以直接编辑远程文件，需要借助SCP URL：
<blockquote>$ gvim scp://dev/projects/gallery/src/templates/search.html.tt</blockquote>
这中方式明显不如SSHFS灵活，但是如果你只需要对远程服务器的1，2个文件进行编辑时，这条命令就要更灵活一些了，并且可以在Windows上你也可以这样做：
<blockquote>:help netrw-problems</blockquote>
<strong>14. 使用本地App连接远程服务器</strong>

有时可能有些服务，比如数据库或是Web服务器，它们运行在远程服务器上，但是如果有用方式可以直接从本地程序连接它们，那会非常有用，要做到这一 点，你需要用到端口转发(port forwarding)，举个例子，如果你的服务器运行Postgres（并且只允许本地访问），那么你就可以在你的SSH配置中加入：
<blockquote>Host db
LocalForward 5433 localhost:5432</blockquote>
现在当你连接你的SSH服务器时，它会在你本地电脑打开一个5433端口（我随便挑的），并将所有发送到这个端口的数据转发到服务器的5432端口 （Postgres的默认端口），然后，只要你和服务器建立了连接，你就可以通过5433端口来访问服务器的Postgres了。
<blockquote>$ ssh db</blockquote>
现在打开另外一个窗口，你就可以通过下面这条命令在本地连接你的Postgres数据库了：
<blockquote>$ psql -h localhost -p 5443 orders</blockquote>
如果你想要使用服务器不支持的图形化Postgres客户端时，这条命令会显得尤其有用：
<blockquote>$ pgadmin3 &amp;</blockquote>
或者你有一个后台的Web服务器，你不希望直接通过Internet访问它，你也可以通过端口转发来访问它：
<blockquote>Host api
LocalForward 8080 localhost:80</blockquote>
现在连接到服务器：
<blockquote>$ ssh api</blockquote>
然后将浏览器指向你选择的端口号：
<blockquote>$ firefox http://localhost:8080/</blockquote>
<strong>15. 减少延迟</strong>

如果每次连接服务器都意味着你需要等待几十秒而无所事事，那么你或许应该试试在你的SSH配置中加入下面这条：
<blockquote>GSSAPIAuthentication no</blockquote>
如果这条命令有效的话，你应该通知你的系统管理员让他在服务器上禁用这个选项，这样其他人就不用再分别添加这条配置到它们的本地配置了。

<strong>16. 加速连接</strong>

如果你确保你和某个服务器之间的连接是安全的（比如通过公司内网连接），那么你就可以通过选择arcfourencryption算法来让数据传输更快一些：
<blockquote>Host dev
Ciphers arcfour</blockquote>
注意这个加速是以牺牲数据的“加密”性为代价的，所以如果你连接的是位于网上的服务器，千万不要打开这个选项，并且确保你是通过VPN建立的连接。

<strong>开始行动吧！</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date>2011-12-28 18:53:03</wp:post_date>
		<wp:post_date_gmt>2011-12-28 10:53:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>16-%e6%9d%a1%e6%8a%80%e5%b7%a7%e8%ae%a9%e4%bd%a0%e6%9b%b4%e9%ab%98%e6%95%88%e4%bd%bf%e7%94%a8-ssh</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="skills"><![CDATA[skills]]></category>
		<category domain="post_tag" nicename="ssh"><![CDATA[SSH]]></category>
		<category domain="post_tag" nicename="%e6%8a%80%e5%b7%a7"><![CDATA[技巧]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>理解JSON：3分钟课程</title>
		<link></link>
		<pubDate>Wed, 28 Dec 2011 10:57:55 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=140</guid>
		<description></description>
		<content:encoded><![CDATA[如果你跟我一样(我担心你就是)，那么，到目前为止，这应该是你对JSON的经验：
<ol>
	<li>两个月前你<strong>从没</strong>听说过JSON</li>
	<li>一个月前你听说了这个词但没有留意</li>
	<li>一周前你发现这个词被提到多次，开始想，<em>没错 … 又有一些垃圾东西要学了</em></li>
	<li>今天你被心灵深处的一个闹铃闹醒，心想：<strong>这该死的json究竟是个什么东西？为什么突然间到处都是它了！</strong></li>
</ol>
于是晚上我乘坐了一辆慢腾腾的公交回到家(周五通常都是很慢)，然后给自己找了一大堆关于JSON资料。所以我可以文雅的带你进入JSON的大门。

这就开始了 …
<h3>这几个字母是什么意思？</h3>
<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation.

[一个滑稽的名字。它应该被称作<strong>L</strong>ightweight <strong>E</strong>cmascript <strong>O</strong>bject <strong>N</strong>otation, 或简称 'LEON'。 <img src="http://www.linuxeden.com/upimg/allimg/110526/0S53B127-0.gif" alt=";-)" /> ]
<h3>它是个什么东西？</h3>
JSON是一种传递对象的语法，对象可以是name/value对，数组和其他对象。

下面是一小段JSON代码：
<pre>点击收起{"skillz": {
	"web":[
		{"name": "html",
		 "years": "5"
		},
		{"name": "css",
		 "years": "3"
		}],
	"database":[
		{"name": "sql",
		 "years": "7"
		}]
}}</pre>
你看懂了吧？那么当你再看到它时就知道它是JSON了。主要部分：
<h3>花括弧，方括弧，冒号和逗号</h3>
<ol>
	<li>花括弧表示一个“容器”</li>
	<li>方括号装载数组</li>
	<li>名称和值用冒号隔开</li>
	<li>数组元素通过逗号隔开</li>
</ol>
<h3>把它想成“得了厌食症的XML”</h3>
(如果你跟我一样老，可以把它想成有层次关系的’.INI’文件)

(如果你是个自以为是的Lisp小丑，可以把它想成”S-expressions”，自以为是吧)
<h3>JSON很像XML，因为：</h3>
<ol>
	<li>他们都“自我描述”，这意味着值都是可列举的，是“人类可读”的</li>
	<li>都是有层级的。(例如你可以在值里再存放值)</li>
	<li>都能被多种的编程语言解析和使用</li>
	<li>都能使用AJAX方法来传递(例如httpWebRequest)</li>
</ol>
<h3>JSON跟XML不一样，因为：</h3>
<ol>
	<li>XML里在元素的开始和结尾处有尖括号和标签名：JSON使用花括号，而且只在数据的开始和结束时使用。</li>
	<li>JSON更简练，毫无疑问更适合人类书写，也许也能让我们更快速的阅读。</li>
	<li>JSON可以在JavaScript里简单的传递到eval()方法里使用</li>
	<li>JSON里有数组{每个元素没有自己的名称}</li>
	<li>在XML里你可以对一个元素使用任意想要的名称，在JSON里你不能使用Javascript里的保留字</li>
</ol>
<h3>可是为什么？它有什么好的？</h3>
当你写ajax之类的东西时，如果你使用JSON，你就勉去了手工拼写XML。更迅速。

同样，当你写ajax之类的东西时，怎样最简单？XML方式还是JSON方式：
<div>
<h3>XML方式：</h3>
<ol>
	<li>取回一个XML文件</li>
	<li>循环它，从中提取值</li>
	<li>处理这些值，等</li>
</ol>
<h3>对比</h3>
<h3>JSON方式：</h3>
<ol>
	<li>取回JSON字符串。</li>
	<li>‘eval’ JSON数据</li>
</ol>
</div>
<h3>它是面向对象的吗？</h3>
No，严格的说，不是。

就像是VB6里的面向对象一样。它提供了很好的封装机制，你可以使用它把数据和方法分离出来，但它不提供任何的继承，多型，接口，或其它类似的面向对象的东西

很显然，它是使javascript变得更易于维护，分析和复用的方向上前进了一步。

<a href="http://www.thomasfrank.se/" target="_blank">Thomas Frank</a>写了一个<a title="classyJSON" href="http://www.thomasfrank.se/classy_json.html" target="_blank">灵巧的javascript库</a>，叫做<em>classyJSON</em>，它在JSON代码上增加了继承和定义范围等特征。
<h3>它只是用在客户端吗？</h3>
是，也不是。在服务器端你可以容易的把对象序列化成JSON或反之。对于<code>.net</code>，程序员可以使用类似<a href="http://www.newtonsoft.com/products/json/" target="_blank">Json.net</a>的类库使这些操作自动化(我估计是使用反射机制)，或你使用自己的程序来做这些事，可能会更快些。
<h3>3分钟将近结束….</h3>
就我所知，JSON是由一个叫做<a href="http://www.crockford.com/" target="_blank">Douglas Crockford</a>的家伙发明的。如果你喜欢的话，可以看一下<a href="http://www.crockford.com/" target="_blank">他的网站</a>，他非常的有趣。
<div>
<h3>现在去读一下懂JSON的人写的东西</h3>
(从<a href="http://del.icio.us/help/json" target="_blank">Delicious using JSON</a>上搜刮来的！)
<ul>
	<li><a href="http://homepages.nildram.co.uk/%7E9jack9/base2/speedtest/" target="_blank">DOM Query Speed Test</a></li>
	<li><a href="http://24ways.org/advent/dont-be-eval" target="_blank">24 ways: Don’t be eval()</a></li>
	<li><a href="http://www.aqee.net/2011/05/26/understanding-json-the-3-minute-lesson/" target="_blank">Understanding JSON: the 3 minute lesson</a></li>
	<li><a href="http://www.hanselman.com/blog/SerializingObjectsAsJavaScriptUsingAtlasJSONNETAndAjaxPro.aspx" target="_blank">Serializing Objects as JavaScript using Atlas, JSON.NET and AjaxPro</a></li>
	<li><a href="http://en.wikipedia.org/wiki/JSON" target="_blank">JSON – Wikipedia, the free encyclopedia</a></li>
	<li><a href="http://www.ajaxprojects.com/ajax/tutorialdetails.php?itemid=11" target="_blank">Introduction to JSON</a></li>
	<li><a href="http://www.xml.com/pub/a/2005/12/21/json-dynamic-script-tag.html" target="_blank">XML.com: JSON and the Dynamic Script Tag: Easy, XML-less Web Services for JavaScript</a></li>
	<li><a href="http://www.thomasfrank.se/classy_json.html" target="_blank">Classy JSON</a></li>
	<li><a href="http://simpletutorials.com/w3/index.php?pagename=Simple%20AJAX%20%28PHP%29%20tutorial" target="_blank">ajax json tutoral</a></li>
	<li><a href="http://www.thomasfrank.se/xml_to_json.html" target="_blank">XML to JSON – a converter</a></li>
</ul>
</div>
<h3>这就是全部。</h3>
我在几分钟的时间里只能整理出这些东西——所有我说的有些东西可能完全是错的。如果是这样，请留言告诉我，告诉我我有多傻。我会很高兴的纠正任何一个错误。祝你好运！

(边注：如果你把 { 和 } 替换成”&lt;” 和 “/&gt;”，把”:” 换成 “/”… 你会得到一个非常像<a href="http://secretgeek.net/gaXml.asp" target="_blank">gaXml</a>的东西。有趣的世界。

(边注2：<a href="http://en.wikipedia.org/wiki/Jason" target="_blank">Jason</a> 和 <a href="http://en.wikipedia.org/wiki/Ajax_%28mythology%29" target="_blank">Ajax</a> 都是希腊神话中的英雄。预告：另外一些即将出现的技术垃圾包括：Heracles, Perseus, Deucalion, Theseus
and Bellerophon。)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date>2011-12-28 18:57:55</wp:post_date>
		<wp:post_date_gmt>2011-12-28 10:57:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%90%86%e8%a7%a3json%ef%bc%9a3%e5%88%86%e9%92%9f%e8%af%be%e7%a8%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="json"><![CDATA[json]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails Routing from the Outside In Rails</title>
		<link></link>
		<pubDate>Wed, 28 Dec 2011 16:23:10 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=145</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Rails Routing from the Outside In Rails<span style="font-family: WenQuanYi Micro Hei;">来自外部的</span>Routing</h2>
This guide covers the user-facing features of Rails routing. By referring to this guide, you will be able to:

<span style="font-family: DejaVu Sans;">这个</span>guide<span style="font-family: DejaVu Sans;">涵盖了面向用户的</span>Rails<span style="font-family: DejaVu Sans;">路由特性。通过参考这个</span>guide<span style="font-family: DejaVu Sans;">，你将能够：</span>

Understand the code in <tt>routes.rb</tt>

<span style="font-family: DejaVu Sans;">明白在</span><tt>routes.rb</tt><span style="font-family: DejaVu Sans;"><tt>中的代码</tt></span>
<ul>
	<li>Construct your own routes, using either the preferred resourceful style or the <tt>match</tt> method</li>
</ul>
<span style="font-family: DejaVu Sans;">构建属于你的</span>routes<span style="font-family: DejaVu Sans;">，要么首选使用</span>resourceful style<span style="font-family: DejaVu Sans;">要么使用</span>match<span style="font-family: DejaVu Sans;">方法</span>
<ul>
	<li>Identify what parameters to expect an action to receive</li>
</ul>
<span style="font-family: DejaVu Sans;">确定什么样的参数</span>expect<span style="font-family: DejaVu Sans;">（预期）一个</span>action<span style="font-family: DejaVu Sans;">来接收（</span>url<span style="font-family: DejaVu Sans;">）</span>
<ul>
	<li>Automatically create paths and URLs using route helpers</li>
</ul>
<span style="font-family: DejaVu Sans;">自动的创建路径和</span>URLs<span style="font-family: DejaVu Sans;">使用</span>route helpers
<ul>
	<li>Use advanced techniques such as constraints and Rack endpoints</li>
</ul>
<span style="font-family: DejaVu Sans;">使用高级的技术比如公约和</span>Rack endpoints
<h3><a name="the-purpose-of-the-rails-router"></a>1 The Purpose of the Rails Router</h3>
The Rails router recognizes URLs and dispatches them to a controller’s action. It can also generate paths and URLs, avoiding the need to hardcode strings in your views.

Rails router<span style="font-family: DejaVu Sans;">组织</span>URLs<span style="font-family: DejaVu Sans;">和</span>dispatches(<span style="font-family: DejaVu Sans;">调度</span>)<span style="font-family: DejaVu Sans;">到一个</span>controller<span style="font-family: DejaVu Sans;">的</span>action<span style="font-family: DejaVu Sans;">中。它也可以创建</span>paths<span style="font-family: DejaVu Sans;">和</span>URLs<span style="font-family: DejaVu Sans;">，避免需要</span>hardcode string<span style="font-family: DejaVu Sans;">到你的视图中。</span>
<h4><a name="connecting-urls-to-code"></a>1.1 Connecting URLs to Code<span style="font-family: WenQuanYi Micro Hei;">连接</span>URLs<span style="font-family: WenQuanYi Micro Hei;">到</span>Code</h4>
When your Rails application receives an incoming request

<span style="font-family: DejaVu Sans;">当你的</span>Rails<span style="font-family: DejaVu Sans;">应用程序收到一个传入请求（</span>incoming requests (<span style="font-family: DejaVu Sans;">传入请求</span>)<span style="font-family: DejaVu Sans;">正传递给用户的网站内容。）</span>

GET /patients/17

it asks the router to match it to a controller action. If the first matching route is

<span style="font-family: DejaVu Sans;">它请求</span>router<span style="font-family: DejaVu Sans;">匹配</span>URLs<span style="font-family: DejaVu Sans;">到一个</span>controller action<span style="font-family: DejaVu Sans;">。如果第一个匹配的</span>route<span style="font-family: DejaVu Sans;">是</span>

match "/patients/:id" =&gt; "patients#show"

the request is dispatched to the <tt>patients</tt> controller’s <tt>show</tt> action with <tt>{</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>17</tt><tt>” </tt><tt>}</tt> in <tt>params</tt>.

<span style="font-family: DejaVu Sans;">这个请求被调度给</span>patients controller<span style="font-family: DejaVu Sans;">的</span>show action<span style="font-family: DejaVu Sans;">以及</span><tt>{</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>17</tt><tt>” </tt><tt>}</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>params</tt><span style="font-family: DejaVu Sans;"><tt>字典中。</tt></span>
<h4><a name="generating-paths-and-urls-from-code"></a> 1.2 Generating Paths and URLs from Code<span style="font-family: WenQuanYi Micro Hei;">从</span>Code<span style="font-family: WenQuanYi Micro Hei;">创建</span>Paths<span style="font-family: WenQuanYi Micro Hei;">和</span>URLs</h4>
You can also generate paths and URLs. If your application contains this code:

<span style="font-family: DejaVu Sans;">你可以创建</span>paths<span style="font-family: DejaVu Sans;">和</span>URLs<span style="font-family: DejaVu Sans;">。如果你的应用程序中包含这样的代码：</span>

@patient = Patient.find(17)

&lt;%= link_to "Patient Record", patient_path(@patient) %&gt;

The router will generate the path <tt>/patients/17</tt>. This reduces the brittleness of your view and makes your code easier to understand. Note that the id does not need to be specified in the route helper.

Router<span style="font-family: DejaVu Sans;">将会创建</span>path <tt>/patients/17</tt><span style="font-family: DejaVu Sans;"><tt>。这样减少了你的视图的脆性并且使得你的代码更加容易明白。</tt></span>
<h3><a name="resource-routing-the-rails-default"></a>2 Resource Routing: the Rails Default</h3>
Resource routing allows you to quickly declare all of the common routes for a given resourceful controller. Instead of declaring separate routes for your <tt>index</tt>, <tt>show</tt>, <tt>new</tt>, <tt>edit</tt>, <tt>create</tt>, <tt>update</tt> and <tt>destroy</tt> actions, a resourceful route declares them in a single line of code.

Resource routing<span style="font-family: DejaVu Sans;">让你快速的为一个提供的</span>resourceful<span style="font-family: DejaVu Sans;">的</span>controller<span style="font-family: DejaVu Sans;">声明所有的常用</span>routes<span style="font-family: DejaVu Sans;">。替代你去声明单个的</span><tt>index</tt>, <tt>show</tt>, <tt>new</tt>, <tt>edit</tt>, <tt>create</tt>, <tt>update</tt> and <tt>destroy</tt> actions<span style="font-family: DejaVu Sans;">的</span>routes<span style="font-family: DejaVu Sans;">，一个</span>resourceful route<span style="font-family: DejaVu Sans;">声明它们在一个单行代码中。</span>

When your Rails application receives an incoming request for

<span style="font-family: DejaVu Sans;">当你的</span>Rails<span style="font-family: DejaVu Sans;">应用程序收到一个这样的传入请求</span>

DELETE /photos/17

it asks the router to map it to a controller action. If the first matching route is

<span style="font-family: DejaVu Sans;">它请求</span>router<span style="font-family: DejaVu Sans;">匹配</span>URLs<span style="font-family: DejaVu Sans;">到一个</span>controller action<span style="font-family: DejaVu Sans;">。如果第一个匹配的</span>route<span style="font-family: DejaVu Sans;">是</span>

resources :photos

Rails would dispatch that request to the <tt>destroy</tt> method on the <tt>photos</tt> controller with <tt>{</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>17</tt><tt>” </tt><tt>}</tt> in <tt>params</tt>.

Rails<span style="font-family: DejaVu Sans;">将会把这个请求调度给</span><tt>photos</tt> controller<span style="font-family: DejaVu Sans;">的</span><tt>destroy</tt> action<span style="font-family: DejaVu Sans;">以及</span><tt>{</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>17</tt><tt>” </tt><tt>}</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>params</tt><span style="font-family: DejaVu Sans;"><tt>字典中</tt></span>
<h4><a name="crud-verbs-and-actions"></a>2.2 CRUD, Verbs, and Actions</h4>
CRUD<span style="font-family: DejaVu Sans;">是指在做计算处理时的增加</span>(Create)<span style="font-family: DejaVu Sans;">、查询</span>(Retrieve)<span style="font-family: DejaVu Sans;">（重新得到数据）、更新</span>(Update)<span style="font-family: DejaVu Sans;">和删除</span>(Delete)<span style="font-family: DejaVu Sans;">几个单词的首字母简写。主要被用在描述软件系统中数据库或者持久层的基本操作功能。</span>

HTTP Verb HTTP<span style="font-family: DejaVu Sans;">动作</span>

In Rails, a resourceful route provides a mapping between HTTP verbs and URLs to controller actions. By convention, each action also maps to particular CRUD operations in a database. A single entry in the routing file, such as

<span style="font-family: DejaVu Sans;">在</span>Rails<span style="font-family: DejaVu Sans;">中，一个</span>resourceful route<span style="font-family: DejaVu Sans;">提供一个在</span>HTTP verbs<span style="font-family: DejaVu Sans;">和</span>URLs<span style="font-family: DejaVu Sans;">之间的映射到</span>controller actions<span style="font-family: DejaVu Sans;">。根据公约，每个</span>action<span style="font-family: DejaVu Sans;">都应该映射到数据库的</span>CRUD<span style="font-family: DejaVu Sans;">操作的一部分。一个单独的条目在</span>routing<span style="font-family: DejaVu Sans;">文件中，像这样</span>

resources :photos

creates seven different routes in your application, all mapping to the <tt>Photos</tt> controller:

<span style="font-family: DejaVu Sans;">创建七个不同的</span>routes<span style="font-family: DejaVu Sans;">在你的应用程序中，所有的这些</span>routes<span style="font-family: DejaVu Sans;">映射到</span>Photos controller<span style="font-family: DejaVu Sans;">：</span>

&nbsp;
<table width="573" cellspacing="0" cellpadding="2"><colgroup><col width="89" /> <col width="102" /> <col width="54" /> <col width="311" /> </colgroup>
<tbody>
<tr>
<th width="89">HTTP Verb</th>
<th width="102">Path</th>
<th width="54">action</th>
<th width="311">used for</th>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos</td>
<td width="54">index</td>
<td width="311">display a list of all photos</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/new</td>
<td width="54">new</td>
<td width="311">return an HTML form for creating a new photo</td>
</tr>
<tr>
<td width="89">POST</td>
<td width="102">/photos</td>
<td width="54">create</td>
<td width="311">create a new photo</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/:id</td>
<td width="54">show</td>
<td width="311">display a specific photo</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/:id/edit</td>
<td width="54">edit</td>
<td width="311">return an HTML form for editing a photo</td>
</tr>
<tr>
<td width="89">PUT</td>
<td width="102">/photos/:id</td>
<td width="54">update</td>
<td width="311">update a specific photo</td>
</tr>
<tr>
<td width="89">DELETE</td>
<td width="102">/photos/:id</td>
<td width="54">destroy</td>
<td width="311">delete a specific photo</td>
</tr>
</tbody>
</table>
Rails routes are matched in the order they are specified, so if you have a <tt>resources</tt><tt> </tt><tt>:photos</tt> above a <tt>get</tt><tt> </tt><tt>'photos/poll'</tt> the <tt>show</tt> action’s route for the <tt>resources</tt> line will be matched before the <tt>get</tt> line. To fix this, move the <tt>get</tt> line <strong>above</strong> the <tt>resources</tt> line so that it is matched first.

<strong>Rails</strong><strong> </strong><strong>routes</strong><span style="font-family: DejaVu Sans;"><strong>在它们指定的顺序中匹配，因此如果你有一个</strong></span><tt><strong>resources</strong></tt><tt><strong> </strong></tt><tt><strong>:photos</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>在</strong></tt></span><tt><strong>get</strong></tt><tt><strong> </strong></tt><tt><strong>'photos/poll'</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>的上面，</strong></tt></span><tt><strong>resources</strong></tt><tt><strong> </strong></tt><tt><strong>line</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>的</strong></tt></span><tt><strong>show</strong></tt><tt><strong> </strong></tt><tt><strong>action</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>的</strong></tt></span><tt><strong>route</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>将会在</strong></tt></span><tt><strong>get</strong></tt><tt><strong> </strong></tt><tt><strong>line</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>之前先被匹配。要修复这些，移动</strong></tt></span><tt><strong>get</strong></tt><tt><strong> </strong></tt><tt><strong>line</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>在</strong></tt></span><tt><strong>resources</strong></tt><tt><strong> </strong></tt><tt><strong>line</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>上面以确保</strong></tt></span><tt><strong>get</strong></tt><tt><strong> </strong></tt><tt><strong>line</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>被首先匹配。</strong></tt></span>
<h4><a name="paths-and-urls"></a>2.3 Paths and URLs</h4>
Creating a resourceful route will also expose a number of helpers to the controllers in your application. In the case of <tt>resources</tt><tt> </tt><tt>:photos</tt>:

<span style="font-family: DejaVu Sans;">在你的应用程序中创建一个</span>resourceful<span style="font-family: DejaVu Sans;">的</span>route<span style="font-family: DejaVu Sans;">也将会摆出一系列的</span>controllers<span style="font-family: DejaVu Sans;">的</span>helpers<span style="font-family: DejaVu Sans;">，在这里的情况中</span><tt>resources</tt><tt> </tt><tt>:photos</tt><span style="font-family: DejaVu Sans;"><tt>如下：</tt></span>
<ul>
	<li><tt>photos_path</tt> returns <tt>/photos</tt></li>
	<li><tt>new_photo_path</tt> returns <tt>/photos/new</tt></li>
	<li><tt>edit_photo_path(:id)</tt> returns <tt>/photos/:id/edit</tt> (for instance, <tt>edit_photo_path(10)</tt> returns <tt>/photos/10/edit</tt>)</li>
	<li><tt>photo_path(:id)</tt> returns <tt>/photos/:id</tt> (for instance, <tt>photo_path(10)</tt> returns <tt>/photos/10</tt>)</li>
</ul>
Each of these helpers has a corresponding <tt>_url</tt> helper (such as <tt>photos_url</tt>) which returns the same path prefixed with the current host, port and path prefix.

<span style="font-family: DejaVu Sans;">这里的每个</span>helpers<span style="font-family: DejaVu Sans;">都有一个相应的</span>_url helper<span style="font-family: DejaVu Sans;">（例如</span><tt>photos_url</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>edit_photo_url(1)</tt><span style="font-family: DejaVu Sans;">）</span>

<span style="font-family: DejaVu Sans;">其将会返回相同的路径后缀以及当前主机，端口和路径后缀。</span>

####the code in my demo#####

#@tmp=post_url(1)

#@tmp=posts_url

#@tmp=edit_post_url(:id)

@tmp=new_post_url

Because the router uses the HTTP verb and URL to match inbound requests, four URLs map to seven different actions.

<span style="font-family: DejaVu Sans;">因为</span>router<span style="font-family: DejaVu Sans;">使用</span>HTTP verb<span style="font-family: DejaVu Sans;">和</span>URL<span style="font-family: DejaVu Sans;">来匹配入站请求，四种</span>URLs<span style="font-family: DejaVu Sans;">映射到七种不同的</span>actions<span style="font-family: DejaVu Sans;">中。</span>
<h4><a name="defining-multiple-resources-at-the-same-"></a> 2.4 Defining Multiple Resources at the Same Time<span style="font-family: WenQuanYi Micro Hei;">在同一时间定义多个</span>Resource</h4>
If you need to create routes for more than one resource, you can save a bit of typing by defining them all with a single call to <tt>resources</tt>:

<span style="font-family: DejaVu Sans;">如果你需要为超过一个</span>resource<span style="font-family: DejaVu Sans;">创建</span>routes<span style="font-family: DejaVu Sans;">，你可以保存它们到一组中通过调用单个</span>resources<span style="font-family: DejaVu Sans;">来定义所有的</span>resource<span style="font-family: DejaVu Sans;">：</span>

resources :photos, :books, :videos

This works exactly the same as

<span style="font-family: DejaVu Sans;">这里工作类似于：</span>

resources :photos

resources :books

resources :videos
<h4><a name="singular-resources"></a>2.5 Singular Resources <span style="font-family: WenQuanYi Micro Hei;">单数</span>Resources</h4>
Sometimes, you have a resource that clients always look up without referencing an ID. For example, you would like <tt>/profile</tt> to always show the profile of the currently logged in user. In this case, you can use a singular resource to map <tt>/profile</tt> (rather than <tt>/profile/:id</tt>) to the <tt>show</tt> action.

<span style="font-family: DejaVu Sans;">有时候，你有一个</span>resource<span style="font-family: DejaVu Sans;">，</span>clients<span style="font-family: DejaVu Sans;">通常查找它们并不引用一个</span>ID<span style="font-family: DejaVu Sans;">。例如，你将会希望</span><tt>/profile</tt><span style="font-family: DejaVu Sans;"><tt>来总是显示当前的登录的用户的</tt></span><tt>profile</tt><span style="font-family: DejaVu Sans;"><tt>。在这种情况中，你可以使用一个单数的</tt></span><tt>resource</tt><span style="font-family: DejaVu Sans;"><tt>来映射</tt></span><tt>/profile</tt><tt> </tt><tt>(rather</tt><tt> </tt><tt>than</tt><tt> </tt><tt>/profile/:id)</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>show</tt><tt> </tt><tt>ation</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

match "profile" =&gt; "users#show"

This resourceful route<span style="font-family: DejaVu Sans;">这里是</span>resourceful route

resource :geocoder

creates six different routes in your application, all mapping to the <tt>Geocoders</tt> controller:

<span style="font-family: DejaVu Sans;">在你的应用程序中创建六种不同的</span>routes<span style="font-family: DejaVu Sans;">，所有的</span>routes<span style="font-family: DejaVu Sans;">映射到</span><tt>Geocoders</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>cotroller</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

&nbsp;
<table width="575" cellspacing="0" cellpadding="2"><colgroup><col width="89" /> <col width="101" /> <col width="54" /> <col width="315" /> </colgroup>
<tbody>
<tr>
<th width="89">HTTP Verb</th>
<th width="101">Path</th>
<th width="54">action</th>
<th width="315">used for</th>
</tr>
<tr>
<td width="89">GET</td>
<td width="101">/geocoder/new</td>
<td width="54">new</td>
<td width="315">return an HTML form for creating the geocoder</td>
</tr>
<tr>
<td width="89">POST</td>
<td width="101">/geocoder</td>
<td width="54">create</td>
<td width="315">create the new geocoder</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="101">/geocoder</td>
<td width="54">show</td>
<td width="315">display the one and only geocoder resource</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="101">/geocoder/edit</td>
<td width="54">edit</td>
<td width="315">return an HTML form for editing the geocoder</td>
</tr>
<tr>
<td width="89">PUT</td>
<td width="101">/geocoder</td>
<td width="54">update</td>
<td width="315">update the one and only geocoder resource</td>
</tr>
<tr>
<td width="89">DELETE</td>
<td width="101">/geocoder</td>
<td width="54">destroy</td>
<td width="315">delete the geocoder resource</td>
</tr>
</tbody>
</table>
Because you might want to use the same controller for a singular route (/account) and a plural route (/accounts/45), singular resources map to plural controllers.

<span style="font-family: DejaVu Sans;"><tt>因为你可能希望对单数</tt></span><tt>route(/account)</tt><span style="font-family: DejaVu Sans;"><tt>和复数</tt></span><tt>route(/accounts/45)</tt><span style="font-family: DejaVu Sans;"><tt>使用相同的</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>，单数</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>映射到复数</tt></span><tt>controllers</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

<tt>A</tt><tt> </tt><tt>singular</tt><tt> </tt><tt>resourceful</tt><tt> </tt><tt>route</tt><tt> </tt><tt>generates</tt><tt> </tt><tt>these</tt><tt> </tt><tt>helpers:</tt>

<span style="font-family: DejaVu Sans;"><tt>一个单数</tt></span><tt>resourceful</tt><tt> </tt><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>创建这些</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>
<ul>
	<li><tt>new_geocoder_path</tt> returns <tt>/geocoder/new</tt></li>
	<li><tt>edit_geocoder_path</tt> returns <tt>/geocoder/edit</tt></li>
	<li><tt>geocoder_path</tt> returns <tt>/geocoder</tt></li>
</ul>
<tt>As</tt><tt> </tt><tt>with</tt><tt> </tt><tt>plural</tt><tt> </tt><tt>resources,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>same</tt><tt> </tt><tt>helpers</tt><tt> </tt><tt>ending</tt><tt> </tt><tt>in</tt><tt> </tt><tt>_url</tt><tt> </tt><tt>will</tt><tt> </tt><tt>also</tt><tt> </tt><tt>include</tt><tt> </tt><tt>the</tt><tt> </tt><tt>host,</tt><tt> </tt><tt>port</tt><tt> </tt><tt>and</tt><tt> </tt><tt>path</tt><tt> </tt><tt>prefix.</tt>

<span style="font-family: DejaVu Sans;"><tt>就像</tt></span><tt>plural</tt><tt> </tt><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>，相同的以</tt></span><tt>_url</tt><span style="font-family: DejaVu Sans;"><tt>结尾的</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>同样包含，</tt></span><tt>host</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>port</tt><span style="font-family: DejaVu Sans;"><tt>和路径后缀。</tt></span>
<h4><a name="controller-namespaces-and-routing"></a><tt>2.6</tt><tt> </tt><tt>Controller</tt><tt> </tt><tt>Namespaces</tt><tt> </tt><tt>and</tt><tt> </tt><tt>Routing</tt></h4>
You may wish to organize groups of controllers under a namespace. Most commonly, you might group a number of administrative controllers under an <tt>Admin::</tt> namespace. You would place these controllers under the <tt>app/controllers/admin</tt> directory, and you can group them together in your router:

<span style="font-family: DejaVu Sans;"><tt>你可能希望通过</tt></span><tt>namespace</tt><span style="font-family: DejaVu Sans;"><tt>分组组织</tt></span><tt>controllers</tt><span style="font-family: DejaVu Sans;"><tt>。通常大多数情况，你可以分组一系列的</tt><tt></tt></span><tt>administrative</tt><tt> </tt><tt>controllers</tt><span style="font-family: DejaVu Sans;"><tt>到一个</tt></span><tt>Admin::</tt><span style="font-family: DejaVu Sans;"><tt>名称空间下面。你将会放置这些</tt></span><tt>controllers</tt><span style="font-family: DejaVu Sans;"><tt>在</tt><tt></tt></span><tt>app/controllers/admin</tt><span style="font-family: DejaVu Sans;"><tt>目录中，并且你可以在你的</tt></span><tt>router</tt><span style="font-family: DejaVu Sans;"><tt>中分组他们在一起</tt></span>

<tt>namespace</tt><tt> </tt><tt>:admin</tt><tt> </tt><tt>do</tt>

<tt> </tt><tt>resources</tt><tt> </tt><tt>:posts,</tt><tt> </tt><tt>:comments</tt>

<tt>end</tt>

<tt>This</tt><tt> </tt><tt>will</tt><tt> </tt><tt>create</tt><tt> </tt><tt>a</tt><tt> </tt><tt>number</tt><tt> </tt><tt>of</tt><tt> </tt><tt>routes</tt><tt> </tt><tt>for</tt><tt> </tt><tt>each</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>posts</tt><tt> </tt><tt>and</tt><tt> </tt><tt>comments</tt><tt> </tt><tt>controller.</tt><tt> </tt><tt>For</tt><tt> </tt><tt>Admin::PostsController,</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>will</tt><tt> </tt><tt>create:</tt>

<span style="font-family: DejaVu Sans;"><tt>这将会对于每一个</tt></span><tt>posts</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>comments</tt><tt> </tt><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>创建若干的</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>。对于</tt><tt></tt></span><tt>Admin::PostsController</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>将会创建：</tt></span>

&nbsp;
<table width="473" cellspacing="0" cellpadding="2"><colgroup><col width="89" /> <col width="136" /> <col width="54" /> <col width="178" /> </colgroup>
<tbody>
<tr>
<th width="89">HTTP Verb</th>
<th width="136">Path</th>
<th width="54">action</th>
<th width="178">named helper</th>
</tr>
<tr>
<td width="89">GET</td>
<td width="136">/admin/posts</td>
<td width="54">index</td>
<td width="178">admin_posts_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="136">/admin/posts/new</td>
<td width="54">new</td>
<td width="178">new_admin_post_path</td>
</tr>
<tr>
<td width="89">POST</td>
<td width="136">/admin/posts</td>
<td width="54">create</td>
<td width="178">admin_posts_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="136">/admin/posts/:id</td>
<td width="54">show</td>
<td width="178">admin_post_path(:id)</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="136">/admin/posts/:id/edit</td>
<td width="54">edit</td>
<td width="178">edit_admin_post_path(:id)</td>
</tr>
<tr>
<td width="89">PUT</td>
<td width="136">/admin/posts/:id</td>
<td width="54">update</td>
<td width="178">admin_post_path(:id)</td>
</tr>
<tr>
<td width="89">DELETE</td>
<td width="136">/admin/posts/:id</td>
<td width="54">destroy</td>
<td width="178">admin_post_path(:id)</td>
</tr>
</tbody>
</table>
If you want to route /posts (without the prefix /admin) to Admin::PostsController, you could use

<span style="font-family: DejaVu Sans;"><tt>如果你想</tt></span><tt>Admin::PostsController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>route</tt><tt> </tt><tt>/posts(without</tt><tt> </tt><tt>the</tt><tt> </tt><tt>prefix</tt><tt> </tt><tt>/admin)</tt><span style="font-family: DejaVu Sans;"><tt>，你可以使用</tt></span>

<tt>#</tt><span style="font-family: DejaVu Sans;"><tt>从</tt></span><tt>admin</tt><span style="font-family: DejaVu Sans;"><tt>中取出，重新声明为独立的</tt></span><tt>resources</tt>

<tt>scope</tt><tt> </tt><tt>:module</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>"admin"</tt><tt> </tt><tt>do</tt>

<tt> </tt><tt>resources</tt><tt> </tt><tt>:posts,</tt><tt> </tt><tt>:comments</tt>

<tt>end</tt>

<tt>or,</tt><tt> </tt><tt>for</tt><tt> </tt><tt>a</tt><tt> </tt><tt>single</tt><tt> </tt><tt>case</tt>

<tt>resources</tt><tt> </tt><tt>:posts,</tt><tt> </tt><tt>:module</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>"admin"</tt>

<tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>want</tt><tt> </tt><tt>to</tt><tt> </tt><tt>route</tt><tt> </tt><tt>/admin/posts</tt><tt> </tt><tt>to</tt><tt> </tt><tt>PostsController</tt><tt> </tt><tt>(without</tt><tt> </tt><tt>the</tt><tt> </tt><tt>Admin::</tt><tt> </tt><tt>module</tt><tt> </tt><tt>prefix),</tt><tt> </tt><tt>you</tt><tt> </tt><tt>could</tt><tt> </tt><tt>use</tt>

scope "/admin" do

resources :posts, :comments

end

<tt>or,</tt><tt> </tt><tt>for</tt><tt> </tt><tt>a</tt><tt> </tt><tt>single</tt><tt> </tt><tt>case</tt>

<tt>resources</tt><tt> </tt><tt>:posts,</tt><tt> </tt><tt>:path</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>"/admin/posts"</tt>

<tt>In</tt><tt> </tt><tt>each</tt><tt> </tt><tt>of</tt><tt> </tt><tt>these</tt><tt> </tt><tt>cases,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>named</tt><tt> </tt><tt>routes</tt><tt> </tt><tt>remain</tt><tt> </tt><tt>the</tt><tt> </tt><tt>same</tt><tt> </tt><tt>as</tt><tt> </tt><tt>if</tt><tt> </tt><tt>you</tt><tt> </tt><tt>did</tt><tt> </tt><tt>not</tt><tt> </tt><tt>use</tt><tt> </tt><tt>scope.</tt><tt> </tt><tt>In</tt><tt> </tt><tt>the</tt><tt> </tt><tt>last</tt><tt> </tt><tt>case,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>following</tt><tt> </tt><tt>paths</tt><tt> </tt><tt>map</tt><tt> </tt><tt>to</tt><tt> </tt><tt>PostsController:</tt>

<span style="font-family: DejaVu Sans;"><tt>在每个这样的情况中，</tt></span><tt>named</tt><tt> </tt><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>保持不变，如果你没有使用范围。在最后，随后的</tt></span><tt>paths</tt><span style="font-family: DejaVu Sans;"><tt>映射到</tt><tt></tt></span><tt>PostsController</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

&nbsp;
<table width="417" cellspacing="0" cellpadding="2"><colgroup><col width="89" /> <col width="132" /> <col width="54" /> <col width="126" /> </colgroup>
<tbody>
<tr>
<th width="89">HTTP Verb</th>
<th width="132">Path</th>
<th width="54">action</th>
<th width="126">named helper</th>
</tr>
<tr>
<td width="89">GET</td>
<td width="132">/admin/posts</td>
<td width="54">index</td>
<td width="126">posts_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="132">/admin/posts/new</td>
<td width="54">new</td>
<td width="126">new_post_path</td>
</tr>
<tr>
<td width="89">POST</td>
<td width="132">/admin/posts</td>
<td width="54">create</td>
<td width="126">posts_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="132">/admin/posts/:id</td>
<td width="54">show</td>
<td width="126">post_path(:id)</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="132">/admin/posts/:id/edit</td>
<td width="54">edit</td>
<td width="126">edit_post_path(:id)</td>
</tr>
<tr>
<td width="89">PUT</td>
<td width="132">/admin/posts/:id</td>
<td width="54">update</td>
<td width="126">post_path(:id)</td>
</tr>
<tr>
<td width="89">DELETE</td>
<td width="132">/admin/posts/:id</td>
<td width="54">destroy</td>
<td width="126">post_path(:id)</td>
</tr>
</tbody>
</table>
<h4><a name="nested-resources"></a>2.7 Nested Resources<span style="font-family: WenQuanYi Micro Hei;"><tt>嵌套</tt></span><tt>Resource</tt></h4>
It’s common to have resources that are logically children of other resources. For example, suppose your application includes these models:

<span style="font-family: DejaVu Sans;"><tt>在通常情况中有</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>是其他的</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>逻辑上的</tt></span><tt>children</tt><span style="font-family: DejaVu Sans;"><tt>。例如，假设你的应用程序包含这些</tt></span><tt>models</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

<tt>class</tt><tt> </tt><tt>Magazine</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Base</tt>

<tt> </tt><tt>has_many</tt><tt> </tt><tt>:ads</tt>

<tt>end</tt>

&nbsp;

<tt>class</tt><tt> </tt><tt>Ad</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Base</tt>

<tt> </tt><tt>belongs_to</tt><tt> </tt><tt>:magazine</tt>

<tt>end</tt>

<tt>Nested</tt><tt> </tt><tt>routes</tt><tt> </tt><tt>allow</tt><tt> </tt><tt>you</tt><tt> </tt><tt>to</tt><tt> </tt><tt>capture</tt><tt> </tt><tt>this</tt><tt> </tt><tt>relationship</tt><tt> </tt><tt>in</tt><tt> </tt><tt>your</tt><tt> </tt><tt>routing.</tt><tt> </tt><tt>In</tt><tt> </tt><tt>this</tt><tt> </tt><tt>case,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>could</tt><tt> </tt><tt>include</tt><tt> </tt><tt>this</tt><tt> </tt><tt>route</tt><tt> </tt><tt>declaration:</tt>

<span style="font-family: DejaVu Sans;"><tt>嵌套</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>允许你捕捉这些关系在你的</tt></span><tt>routing</tt><span style="font-family: DejaVu Sans;"><tt>中。在这里的情况中，你可包含这样的声明：</tt></span>

<tt>resources</tt><tt> </tt><tt>:magazines</tt><tt> </tt><tt>do</tt>

<tt> </tt><tt>resources</tt><tt> </tt><tt>:ads</tt>

<tt>end</tt>

<tt>In</tt><tt> </tt><tt>addition</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>routes</tt><tt> </tt><tt>for</tt><tt> </tt><tt>magazines,</tt><tt> </tt><tt>this</tt><tt> </tt><tt>declaration</tt><tt> </tt><tt>will</tt><tt> </tt><tt>also</tt><tt> </tt><tt>route</tt><tt> </tt><tt>ads</tt><tt> </tt><tt>to</tt><tt> </tt><tt>an</tt><tt> </tt><tt>AdsController.</tt><tt> </tt><tt>The</tt><tt> </tt><tt>ad</tt><tt> </tt><tt>URLs</tt><tt> </tt><tt>require</tt><tt> </tt><tt>a</tt><tt> </tt><tt>magazine:</tt>

<span style="font-family: DejaVu Sans;"><tt>除了</tt><tt></tt></span><tt>magazines</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>，这里也同样声明</tt></span><tt>route</tt><tt> </tt><tt>ads</tt><span style="font-family: DejaVu Sans;"><tt>到</tt><tt></tt></span><tt>AdsController</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span><tt>ad</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>URLs</tt><span style="font-family: DejaVu Sans;"><tt>需要一个</tt><tt></tt></span><tt>magazine</tt><span style="font-family: DejaVu Sans;"><tt>（对象）：</tt></span>

&nbsp;
<table width="665" cellspacing="0" cellpadding="2"><colgroup><col width="82" /> <col width="144" /> <col width="53" /> <col width="371" /> </colgroup>
<tbody>
<tr>
<th width="82">HTTP Verb</th>
<th width="144">Path</th>
<th width="53">action</th>
<th width="371">used for</th>
</tr>
<tr>
<td width="82">GET</td>
<td width="144">/magazines/:id/ads</td>
<td width="53">index</td>
<td width="371">display a list of all ads for a specific magazine</td>
</tr>
<tr>
<td width="82">GET</td>
<td width="144">/magazines/:id/ads/new</td>
<td width="53">new</td>
<td width="371">return an HTML form for creating a new ad belonging to a specific magazine</td>
</tr>
<tr>
<td width="82">POST</td>
<td width="144">/magazines/:id/ads</td>
<td width="53">create</td>
<td width="371">create a new ad belonging to a specific magazine</td>
</tr>
<tr>
<td width="82">GET</td>
<td width="144">/magazines/:id/ads/:id</td>
<td width="53">show</td>
<td width="371">display a specific ad belonging to a specific magazine</td>
</tr>
<tr>
<td width="82">GET</td>
<td width="144">/magazines/:id/ads/:id/edit</td>
<td width="53">edit</td>
<td width="371">return an HTML form for editing an ad belonging to a specific magazine</td>
</tr>
<tr>
<td width="82">PUT</td>
<td width="144">/magazines/:id/ads/:id</td>
<td width="53">update</td>
<td width="371">update a specific ad belonging to a specific magazine</td>
</tr>
<tr>
<td width="82">DELETE</td>
<td width="144">/magazines/:id/ads/:id</td>
<td width="53">destroy</td>
<td width="371">delete a specific ad belonging to a specific magazine</td>
</tr>
</tbody>
</table>
This will also create routing helpers such as magazine_ads_url and edit_magazine_ad_path. These helpers take an instance of Magazine as the first parameter (magazine_ads_url(@magazine)).

<span style="font-family: DejaVu Sans;"><tt>这里也将会创建</tt></span><tt>routing</tt><tt> </tt><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>例如</tt><tt></tt></span><tt>magazine_ads_url</tt><span style="font-family: DejaVu Sans;"><tt>和</tt><tt></tt></span><tt>edit_magazine_ad_path</tt><span style="font-family: DejaVu Sans;"><tt>。这些</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>获取一个</tt><tt></tt></span><tt>Magazine</tt><span style="font-family: DejaVu Sans;"><tt>的实例作为第一个参数（</tt></span><tt>magazine_ads_url(@magazine)</tt><span style="font-family: DejaVu Sans;"><tt>）。</tt></span>
<h5><a name="limits-to-nesting"></a><tt>2.7.1</tt><tt> </tt><tt>Limits</tt><tt> </tt><tt>to</tt><tt> </tt><tt>Nesting</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>嵌套的局限</tt></span></h5>
You can nest resources within other nested resources if you like. For example:

<span style="font-family: DejaVu Sans;"><tt>你可以嵌套</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>在其他嵌套</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>中如果你喜欢。例如：</tt></span>

<tt>resources</tt><tt> </tt><tt>:publishers</tt><tt> </tt><tt>do</tt>

<tt> </tt><tt>resources</tt><tt> </tt><tt>:magazines</tt><tt> </tt><tt>do</tt>

<tt> </tt><tt>resources</tt><tt> </tt><tt>:photos</tt>

<tt> </tt><tt>end</tt>

<tt>end</tt>

<tt>Deeply-nested</tt><tt> </tt><tt>resources</tt><tt> </tt><tt>quickly</tt><tt> </tt><tt>become</tt><tt> </tt><tt>cumbersome.</tt><tt> </tt><tt>In</tt><tt> </tt><tt>this</tt><tt> </tt><tt>case,</tt><tt> </tt><tt>for</tt><tt> </tt><tt>example,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>application</tt><tt> </tt><tt>would</tt><tt> </tt><tt>recognize</tt><tt> </tt><tt>paths</tt><tt> </tt><tt>such</tt><tt> </tt><tt>as</tt>

<span style="font-family: DejaVu Sans;"><tt>深层的嵌套</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>相当的累赘。在这样的情况下，例如，应用程序将会这样组织路径</tt></span>
<pre><tt>/publishers/1/magazines/2/photos/3</tt></pre>
<tt>The</tt><tt> </tt><tt>corresponding</tt><tt> </tt><tt>route</tt><tt> </tt><tt>helper</tt><tt> </tt><tt>would</tt><tt> </tt><tt>be</tt><tt> </tt><tt>publisher_magazine_photo_url,</tt><tt> </tt><tt>requiring</tt><tt> </tt><tt>you</tt><tt> </tt><tt>to</tt><tt> </tt><tt>specify</tt><tt> </tt><tt>objects</tt><tt> </tt><tt>at</tt><tt> </tt><tt>all</tt><tt> </tt><tt>three</tt><tt> </tt><tt>levels.</tt><tt> </tt><tt>Indeed,</tt><tt> </tt><tt>this</tt><tt> </tt><tt>situation</tt><tt> </tt><tt>is</tt><tt> </tt><tt>confusing</tt><tt> </tt><tt>enough</tt><tt> </tt><tt>that</tt><tt> </tt><tt>a</tt><tt> </tt><tt>popular</tt><tt> </tt><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://weblog.jamisbuck.org/2007/2/5/nesting-resources">article</a></span></span><tt> </tt><tt>by</tt><tt> </tt><tt>Jamis</tt><tt> </tt><tt>Buck</tt><tt> </tt><tt>proposes</tt><tt> </tt><tt>a</tt><tt> </tt><tt>rule</tt><tt> </tt><tt>of</tt><tt> </tt><tt>thumb</tt><tt> </tt><tt>for</tt><tt> </tt><tt>good</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>design:</tt>

<span style="font-family: DejaVu Sans;"><tt>相应的</tt></span><tt>route</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>将会是</tt><tt></tt></span><tt>publisher_magazine_photo_url</tt><span style="font-family: DejaVu Sans;"><tt>这需要你指定三个级别的所有对象。事实上，这种情况下太混乱了一篇受欢迎的文章来自</tt></span><tt>Jamis</tt><tt> </tt><tt>Buck</tt><span style="font-family: DejaVu Sans;"><tt>，关于一个设计良好的</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>的经验法则：</tt></span>

<em><strong>Resources</strong></em><em><strong> </strong></em><em><strong>should</strong></em><em><strong> </strong></em><em><strong>never</strong></em><em><strong> </strong></em><em><strong>be</strong></em><em><strong> </strong></em><em><strong>nested</strong></em><em><strong> </strong></em><em><strong>more</strong></em><em><strong> </strong></em><em><strong>than</strong></em><em><strong> </strong></em><em><strong>1</strong></em><em><strong> </strong></em><em><strong>level</strong></em><em><strong> </strong></em><em><strong>deep.</strong></em>
<h4><a name="creating-paths-and-urls-from-objects"></a> <tt>2.8</tt><tt> </tt><tt>Creating</tt><tt> </tt><tt>Paths</tt><tt> </tt><tt>and</tt><tt> </tt><tt>URLs</tt><tt> </tt><tt>From</tt><tt> </tt><tt>Objects</tt></h4>
In addition to using the routing helpers, Rails can also create paths and URLs from an array of parameters. For example, suppose you have this set of routes:

<span style="font-family: DejaVu Sans;">除了使用</span>routing helpers<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">也可以从一个</span>parameters<span style="font-family: DejaVu Sans;">数组创建</span>paths<span style="font-family: DejaVu Sans;">和</span>URLs<span style="font-family: DejaVu Sans;">。例如，假设你有这样的组</span>routes<span style="font-family: DejaVu Sans;">：</span>

resources :magazines do

resources :ads

end

When using <tt> </tt><tt>magazine_ad_path</tt>, you can pass in instances of <tt> </tt><tt>Magazine</tt><tt> </tt><tt>and</tt><tt> </tt><tt>Ad</tt> instead of the numeric IDs.

<span style="font-family: DejaVu Sans;">在使用</span><tt>magazine_ad_path</tt><span style="font-family: DejaVu Sans;"><tt>的时候，你可以传递</tt><tt></tt></span><tt>Magazine</tt><tt> </tt><tt>and</tt><tt> </tt><tt>Ad</tt><span style="font-family: DejaVu Sans;"><tt>的实例替代数字</tt></span><tt>IDs</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

&lt;%= link_to "Ad details", magazine_ad_path(@magazine, @ad) %&gt;

You can also use <tt>url_for</tt> with a set of objects, and Rails will automatically determine which route you want:

<span style="font-family: DejaVu Sans;">你同样也可以使用</span><tt>url_for</tt><span style="font-family: DejaVu Sans;"><tt>和一组对象，那么</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>将会自动的决定那个</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>是你希望的：</tt></span>

&lt;%= link_to "Ad details", url_for([@magazine, @ad]) %&gt;

In this case, Rails will see that <tt>@magazine</tt> is a <tt> </tt><tt>Magazine</tt> and <tt>@ad</tt> is an <tt>Ad</tt> and will therefore use the <tt>magazine_ad_path</tt> helper. In helpers like <tt>link_to</tt>, you can specify just the object in place of the full <tt>url_for</tt> call:

<span style="font-family: DejaVu Sans;">在这里，</span>Rails<span style="font-family: DejaVu Sans;">将会明白</span><tt>@magazine</tt><span style="font-family: DejaVu Sans;"><tt>是</tt><tt></tt></span><tt>Magazine</tt><span style="font-family: DejaVu Sans;"><tt>并且</tt></span><tt>@ad</tt><span style="font-family: DejaVu Sans;"><tt>是</tt></span><tt>Ad</tt><span style="font-family: DejaVu Sans;"><tt>于此将会因此使用</tt><tt></tt></span><tt>magazine_ad_path</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>。在就像</tt></span><tt>link_to</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>中，你可以指定仅仅对象在</tt></span><tt>url_for</tt><span style="font-family: DejaVu Sans;"><tt>调用中：</tt></span>

&lt;%= link_to "Ad details", [@magazine, @ad] %&gt;

If you wanted to link to just a magazine, you could leave out the <tt>Array</tt>:

<span style="font-family: DejaVu Sans;">如果你想仅仅</span>link<span style="font-family: DejaVu Sans;">到一个</span>magazine<span style="font-family: DejaVu Sans;">，你可以省去数组：</span>

&lt;%= link_to "Magazine details", @magazine %&gt;

This allows you to treat instances of your models as URLs, and is a key advantage to using the resourceful style.

<a name="adding-more-restful-actions"></a><span style="font-family: DejaVu Sans;">这让你处理</span>models<span style="font-family: DejaVu Sans;">的实例为</span>URLs<span style="font-family: DejaVu Sans;">，并且这也是使用</span>resourceful style<span style="font-family: DejaVu Sans;">的关键优势。</span>
<h4><a name="adding-more-restful-actions1"></a>2.9 Adding More RESTful Actions<span style="font-family: WenQuanYi Micro Hei;">添加更多的</span>RESTful Action</h4>
You are not limited to the seven routes that RESTful routing creates by default. If you like, you may add additional routes that apply to the collection or individual members of the collection.

<span style="font-family: DejaVu Sans;">你并不限制于</span>RESTful routing<span style="font-family: DejaVu Sans;">默认创建的七个</span>routes<span style="font-family: DejaVu Sans;">。如果你喜欢，你可以添加额外的</span>routes<span style="font-family: DejaVu Sans;">用于多个或者个别的</span>collection<span style="font-family: DejaVu Sans;">。</span>
<h5><a name="adding-member-routes"></a>2.9.1 Adding Member Routes</h5>
To add a member route, just add a <tt>member</tt> block into the resource block:

<span style="font-family: DejaVu Sans;">添加一个</span>member route<span style="font-family: DejaVu Sans;">，仅仅添加一个</span>member<span style="font-family: DejaVu Sans;">的</span>block<span style="font-family: DejaVu Sans;">到</span>resource block<span style="font-family: DejaVu Sans;">中：</span>

resources :photos do

member do

get 'preview'

end

end

This will recognize <tt>/photos/1/preview</tt> with GET, and route to the <tt>preview</tt> action of <tt>PhotosController</tt>. It will also create the <tt>preview_photo_url</tt> and <tt>preview_photo_path</tt> helpers.

Within the block of member routes, each route name specifies the HTTP verb that it will recognize. You can use <tt>get</tt>, <tt>put</tt>, <tt>post</tt>, or <tt>delete</tt> here. If you don’t have multiple <tt>member</tt> routes, you can also pass <tt>:on</tt> to a route, eliminating the block:

<span style="font-family: DejaVu Sans;">在</span>member<span style="font-family: DejaVu Sans;">的</span>routes<span style="font-family: DejaVu Sans;">中，每个</span>route<span style="font-family: DejaVu Sans;">名字指定</span>HTTP verb<span style="font-family: DejaVu Sans;">这是将会组织的。在这里你可以使用</span><tt>get</tt>, <tt>put</tt>, <tt>post</tt>, or <tt>delete</tt><span style="font-family: DejaVu Sans;"><tt>。如果你没有多个</tt></span><tt>member</tt><tt> </tt><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>，你同样也可以传递</tt></span><tt>:on</tt><span style="font-family: DejaVu Sans;"><tt>到一个</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>，消除</tt></span><tt>block</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

resources :photos do

get 'preview', :on =&gt; :member

end
<h5><a name="adding-collection-routes"></a>2.9.2 Adding Collection Routes</h5>
To add a route to the collection:

<span style="font-family: DejaVu Sans;">添加一个</span>route<span style="font-family: DejaVu Sans;">到</span>collection<span style="font-family: DejaVu Sans;">：</span>

resources :photos do

collection do

get 'search'

end

end

This will enable Rails to recognize paths such as <tt>/photos/search</tt> with GET, and route to the <tt>search</tt> action of <tt>PhotosController</tt>. It will also create the <tt>search_photos_url</tt> and <tt>search_photos_path</tt> route helpers.

<span style="font-family: DejaVu Sans;">这将使</span>Rails<span style="font-family: DejaVu Sans;">能够像这样</span><tt>/photos/search</tt> with GET<span style="font-family: DejaVu Sans;">组织路径，并且</span>route<span style="font-family: DejaVu Sans;">到</span><tt>PhotosController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>search</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。它将同样创建</tt><tt></tt></span><tt>search_photos_url</tt><span style="font-family: DejaVu Sans;"><tt>和</tt><tt></tt></span><tt>search_photos_path</tt><tt> </tt><tt>route</tt><tt> </tt><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

Just as with member routes, you can pass <tt>:on</tt> to a route:

<span style="font-family: DejaVu Sans;">仅仅对于</span>member routes<span style="font-family: DejaVu Sans;">，你可以传递</span>:on<span style="font-family: DejaVu Sans;">给一个</span>route<span style="font-family: DejaVu Sans;">：</span>

resources :photos do

get 'search', :on =&gt; :collection

end
<h5><a name="a-note-of-caution"></a>2.9.3 A Note of Caution<span style="font-family: WenQuanYi Micro Hei;">一个慎重的提醒</span></h5>
If you find yourself adding many extra actions to a resourceful route, it’s time to stop and ask yourself whether you’re disguising the presence of another resource.

<span style="font-family: DejaVu Sans;">如果你发现你自己添加很多额外的</span>action<span style="font-family: DejaVu Sans;">到一个</span>resourceful<span style="font-family: DejaVu Sans;">的</span>route<span style="font-family: DejaVu Sans;">，是时候停下来并问你自己</span>

<a name="result_box"></a><span style="font-family: DejaVu Sans;">是否你在伪造另一个</span>resource<span style="font-family: DejaVu Sans;">。</span>
<h3><a name="non-resourceful-routes"></a>3 Non-Resourceful Routes<span style="font-family: WenQuanYi Micro Hei;">非</span>- Resourceful Routes</h3>
In addition to resource routing, Rails has powerful support for routing arbitrary URLs to actions. Here, you don’t get groups of routes automatically generated by resourceful routing. Instead, you set up each route within your application separately.

<span style="font-family: DejaVu Sans;">除了</span>resource routing<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">对任意的</span>URLs<span style="font-family: DejaVu Sans;">到</span>actions<span style="font-family: DejaVu Sans;">有强力的支持。这里，你没有得到被</span>resourceful routing<span style="font-family: DejaVu Sans;">自动创建的</span>groups of routes<span style="font-family: DejaVu Sans;">。作为替代，在你的应用程序中分别设置每个</span>route<span style="font-family: DejaVu Sans;">。</span>

While you should usually use resourceful routing, there are still many places where the simpler routing is more appropriate. There’s no need to try to shoehorn every last piece of your application into a resourceful framework if that’s not a good fit.

<span style="font-family: DejaVu Sans;">即使你应该通常使用</span>resourceful routing<span style="font-family: DejaVu Sans;">，这里仍然有很多地方简单的</span>routing<span style="font-family: DejaVu Sans;">更加适合。这里不需要尝试将你的应用程序最后写成一个</span>resourceful framework<span style="font-family: DejaVu Sans;">如果这样并不合适。</span>

In particular, simple routing makes it very easy to map legacy URLs to new Rails actions.

<a name="result_box1"></a><span style="font-family: DejaVu Sans;">特别是，简单的路</span>routing<span style="font-family: DejaVu Sans;">，使得它很容易映射（传入的）现有的</span>URL<span style="font-family: DejaVu Sans;">映射到新的</span>Rails action<span style="font-family: DejaVu Sans;">。</span>
<h4><a name="bound-parameters"></a>3.1 Bound Parameters<span style="font-family: WenQuanYi Micro Hei;">绑定参数</span></h4>
When you set up a regular route, you supply a series of symbols that Rails maps to parts of an incoming HTTP request. Two of these symbols are special: <tt>:controller</tt> maps to the name of a controller in your application, and <tt>:action</tt> maps to the name of an action within that controller. For example, consider one of the default Rails routes:

<span style="font-family: DejaVu Sans;">当你设定一个正则</span>route<span style="font-family: DejaVu Sans;">，你供应一系列的字符，其将通过</span>Rails<span style="font-family: DejaVu Sans;">映射到传入</span>HTTP<span style="font-family: DejaVu Sans;">请求的一部分。这些字符的两部分分别是：</span><tt>:controller</tt><span style="font-family: DejaVu Sans;"><tt>映射到你应用程序中的一个</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>，并且</tt></span><tt>:action</tt><span style="font-family: DejaVu Sans;"><tt>映射到在指定的</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>中的一个</tt></span><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。例如思考一个默认的</tt></span><tt>Rails</tt><tt> </tt><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

match ':controller(/:action(/:id))'

If an incoming request of <tt>/photos/show/1</tt> is processed by this route (because it hasn’t matched any previous route in the file), then the result will be to invoke the <tt>show</tt> action of the <tt> </tt><tt>PhotosController</tt>, and to make the final parameter <tt>"1"</tt> available as <tt>params[:id]</tt>. This route will also route the incoming request of <tt>/photos</tt> to <tt>PhotosController#index</tt>, since <tt>:action</tt> and <tt>:id</tt> are optional parameters, denoted by parentheses.

<span style="font-family: DejaVu Sans;">如果传入请求</span><tt>/photos/show/1</tt><tt> </tt><tt>is</tt><tt> </tt><tt>processed</tt><tt> </tt><tt>by</tt><tt> </tt><tt>this</tt><tt> </tt><tt>route</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>（因为它并没有被先前的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>文件中任何的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>匹配成功），接着这个结果将会调用</tt><tt></tt></span><tt>PhotosController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>，并且使得最后的参数</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">”</span></tt></span><tt>1</tt><tt>”</tt><span style="font-family: DejaVu Sans;"><tt>可用于</tt></span><tt>params[:id]</tt><span style="font-family: DejaVu Sans;"><tt>。这个</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>也还会</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>传入请求</tt></span><tt>/photos</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>PhotosController#index</tt><span style="font-family: DejaVu Sans;"><tt>，因为</tt></span><tt>:action</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>:id</tt><span style="font-family: DejaVu Sans;"><tt>是被括号包起来的可选参数。</tt></span>
<h4><a name="dynamic-segments"></a>3.2 Dynamic Segments<span style="font-family: WenQuanYi Micro Hei;">动态分割</span></h4>
You can set up as many dynamic segments within a regular route as you like. Anything other than <tt>:controller</tt> or <tt>:action</tt> will be available to the action as part of <tt>params</tt>. If you set up this route:

<span style="font-family: DejaVu Sans;">你可以设置你希望的数目的</span>dynamic segments<span style="font-family: DejaVu Sans;">在一个正则</span>route<span style="font-family: DejaVu Sans;">中。超过</span><tt>:controller</tt> or <tt>:action</tt><span style="font-family: DejaVu Sans;"><tt>的其他部分（是可用的）在</tt></span><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>作为</tt></span><tt>params</tt><span style="font-family: DejaVu Sans;"><tt>第一部分。如果你设定这样的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

<tt>match</tt><tt> </tt><tt>':controller/:action/:id/:user_id'</tt>

An incoming path of <tt>/photos/show/1/2</tt> will be dispatched to the <tt>show</tt> action of the <tt>PhotosController</tt>. <tt>params[:id]</tt> will be <tt>"1"</tt>, and <tt>params[:user_id]</tt> will be <tt>"2"</tt>.

<span style="font-family: DejaVu Sans;">一个传入路径</span><tt>/photos/show/1/2</tt><span style="font-family: DejaVu Sans;"><tt>将会被调度给</tt></span><tt>PhotosController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span><tt>params[:id]</tt><tt> </tt><tt>will</tt><tt> </tt><tt>be</tt><tt> </tt><tt>"1",</tt><tt> </tt><tt>and</tt><tt> </tt><tt>params[:user_id]</tt><tt> </tt><tt>will</tt><tt> </tt><tt>be</tt><tt> </tt><tt>"2".</tt>

You can’t use <tt>namespace</tt> or <tt>:module</tt> with a <tt>:controller</tt> path segment. If you need to do this then use a constraint on :controller that matches the namespace you require. e.g:

<span style="font-family: DejaVu Sans;">你不能对一个</span><tt>:controller</tt><span style="font-family: DejaVu Sans;"><tt>路径</tt></span><tt>segment</tt><span style="font-family: DejaVu Sans;"><tt>使用</tt></span><tt>namespace</tt><span style="font-family: DejaVu Sans;"><tt>或者</tt></span><tt>:module</tt><span style="font-family: DejaVu Sans;"><tt>。如果你需要这么做那么使用对</tt><tt></tt></span><tt>:controller</tt><span style="font-family: DejaVu Sans;"><tt>一个限制使其匹配你请求的</tt></span><tt>namespace</tt><span style="font-family: DejaVu Sans;"><tt>。例如：</tt></span>

<tt>match</tt><tt> </tt><tt>':controller(/:action(/:id))',</tt><tt> </tt><tt>:controller</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>/admin\/[^\/]+/</tt>

&nbsp;

By default dynamic segments don’t accept dots – this is because the dot is used as a separator for formatted routes. If you need to use a dot within a dynamic segment add a constraint which overrides this – for example <tt>:id</tt> =&gt; /[^\/]+/ allows anything except a slash.

<span style="font-family: DejaVu Sans;">默认的动态分割不接受</span>dots<span style="font-family: DejaVu Sans;">（</span>.<span style="font-family: DejaVu Sans;">）<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>这是因为</span>dot<span style="font-family: DejaVu Sans;">被作为格式化</span>routes<span style="font-family: DejaVu Sans;">的一个分割。如果你需要在一个</span>dynamic segment<span style="font-family: DejaVu Sans;">中使用</span>dot<span style="font-family: DejaVu Sans;">，添加一个限制来重写它<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>例如</span><tt>:id</tt> =&gt; /[^\/]+/<span style="font-family: DejaVu Sans;">允许除了斜线之外的任何字符。</span>
<h4><a name="static-segments"></a>3.3 Static Segments</h4>
You can specify static segments when creating a route:

match ':controller/:action/:id/with_user/:user_id'

This route would respond to paths such as <tt>/photos/show/1/with_user/2</tt>. In this case, <tt>params</tt> would be <tt>{</tt><tt> </tt><tt>:controller</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>photos</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:action</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>show</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>1</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:user_id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>2</tt><tt>” </tt><tt>}</tt>.
<h4><a name="the-query-string"></a>3.4 The Query String<span style="font-family: WenQuanYi Micro Hei;">查询字符串</span></h4>
The <tt>params</tt> will also include any parameters from the query string. For example, with this route:

params<span style="font-family: DejaVu Sans;">将也会包含来自查询字符串的任何参数。例如，使用这个</span>route<span style="font-family: DejaVu Sans;">：</span>

match ':controller/:action/:id'

An incoming path of <tt>/photos/show/1?user_id=2</tt> will be dispatched to the <tt>show</tt> action of the <tt>Photos</tt> controller. <tt>params</tt> will be <tt>{</tt><tt> </tt><tt>:controller</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>photos</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:action</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>show</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>1</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:user_id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>2</tt><tt>” </tt><tt>}</tt>.

<span style="font-family: DejaVu Sans;">一个传入路径</span><tt>/photos/show/1?user_id=2</tt><span style="font-family: DejaVu Sans;"><tt>将会被调度给</tt><tt></tt></span><tt>Photos</tt><tt> </tt><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span><tt>params</tt><span style="font-family: DejaVu Sans;"><tt>将会是</tt></span><tt>{</tt><tt> </tt><tt>:controller</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>photos</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:action</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>show</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>1</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:user_id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>2</tt><tt>” </tt><tt>}</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h4><a name="defining-defaults"></a>3.5 Defining Defaults<span style="font-family: WenQuanYi Micro Hei;">默认定义</span></h4>
You do not need to explicitly use the <tt>:controller</tt> and <tt>:action</tt> symbols within a route. You can supply them as defaults:

<span style="font-family: DejaVu Sans;">你不需要准确的使用</span><tt>:controller</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>:action</tt><span style="font-family: DejaVu Sans;"><tt>字符在一个</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>中。你可以默认的提供他们：</tt></span>

match 'photos/:id' =&gt; 'photos#show'

With this route, Rails will match an incoming path of <tt>/photos/12</tt> to the <tt>show</tt> action of <tt>PhotosController</tt>.

<span style="font-family: DejaVu Sans;">通过这个</span>route<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">将会匹配一个传入路径</span><tt>/photos/12</tt><span style="font-family: DejaVu Sans;"><tt>到</tt><tt></tt></span><tt>PhotosController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

You can also define other defaults in a route by supplying a hash for the <tt>:defaults</tt> option. This even applies to parameters that you do not specify as dynamic segments. For example:

<span style="font-family: DejaVu Sans;"><tt>你同样也可以在</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>中定义其他的默认（设置）通过提供一个</tt></span><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>字典给</tt><tt></tt></span><tt>:defaults</tt><span style="font-family: DejaVu Sans;"><tt>选项。这甚至会应用于不需要指定参数作为动态分割。例如：</tt></span>

match 'photos/:id' =&gt; 'photos#show', :defaults =&gt; { :format =&gt; 'jpg' }

Rails would match <tt>photos/12</tt> to the <tt>show</tt> action of <tt>PhotosController</tt>, and set <tt>params[:format]</tt> to <tt>"jpg"</tt>.

Rails<span style="font-family: DejaVu Sans;">将会匹配</span><tt>photos/12</tt><span style="font-family: DejaVu Sans;"><tt>到</tt><tt></tt></span><tt>PhotosController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>，并且设置</tt></span><tt>params[:format]</tt><tt> </tt><tt>to</tt><tt> </tt><tt>"jpg"</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>
<h4><a name="naming-routes"></a>3.6 Naming Routes</h4>
You can specify a name for any route using the <tt>:as</tt> option.

<span style="font-family: DejaVu Sans;">你可以指定一个</span>name<span style="font-family: DejaVu Sans;">给任何</span>route<span style="font-family: DejaVu Sans;">使用</span>:as<span style="font-family: DejaVu Sans;">选项。</span>

match 'exit' =&gt; 'sessions#destroy', :as =&gt; :logout

This will create <tt>logout_path</tt> and <tt>logout_url</tt> as named helpers in your application. Calling <tt>logout_path</tt> will return <tt>/exit</tt>

<span style="font-family: DejaVu Sans;"><tt>这里将会在应用程序中创建</tt><tt></tt></span><tt>logout_path</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>logout_url</tt><span style="font-family: DejaVu Sans;"><tt>作为（刚才）命名的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>。调用</tt></span><tt>logout_path</tt><span style="font-family: DejaVu Sans;"><tt>将会返回</tt></span><tt>/exit</tt>
<h4><a name="http-verb-constraints"></a>3.7 HTTP Verb Constraints <span style="font-family: WenQuanYi Micro Hei;">限定</span>HTTP <span style="font-family: WenQuanYi Micro Hei;">动作</span></h4>
You can use the <tt>:via</tt> option to constrain the request to one or more HTTP methods:

<span style="font-family: DejaVu Sans;">你可以使用</span>:via<span style="font-family: DejaVu Sans;">选项来限定请求一个或多个（</span>HTTP<span style="font-family: DejaVu Sans;">）方法：</span>

match 'photos/show' =&gt; 'photos#show', :via =&gt; :get

There is a shorthand version of this as well:

<span style="font-family: DejaVu Sans;">这里的短操作版本同样也是可以的：</span>

get 'photos/show'

You can also permit more than one verb to a single route:

<span style="font-family: DejaVu Sans;">你也可以运行超过一个动作到一个单独的</span>route<span style="font-family: DejaVu Sans;">：</span>

match 'photos/show' =&gt; 'photos#show', :via =&gt; [:get, :post]
<h4><a name="segment-constraints"></a>3.8 Segment Constraints<span style="font-family: WenQuanYi Micro Hei;">分割限制</span></h4>
You can use the <tt>:constraints</tt> option to enforce a format for a dynamic segment:

<span style="font-family: DejaVu Sans;">你可以使用</span>:constraints<span style="font-family: DejaVu Sans;">选项来强制一个动态分割的格式：</span>

match 'photos/:id' =&gt; 'photos#show', :constraints =&gt; { :id =&gt; /[A-Z]\d{5}/ }

This route would match paths such as <tt>/photos/A12345</tt>. You can more succinctly express the same route this way:

<span style="font-family: DejaVu Sans;">这个</span>route<span style="font-family: DejaVu Sans;">将会匹配像这样的路径</span><tt>/photos/A12345</tt><span style="font-family: DejaVu Sans;"><tt>。你可以使用这样的方式来更加简洁的表达相同的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span>

match 'photos/:id' =&gt; 'photos#show', :id =&gt; /[A-Z]\d{5}/

<tt>:constraints</tt> takes regular expressions with the restriction that regexp anchors can’t be used. For example, the following route will not work:

<tt>:constraints</tt><span style="font-family: DejaVu Sans;"><tt>获取的正则表达式，其限定了正则表达式的锚不能被使用。例如下面的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>将不会工作（使用了</tt></span><tt>^</tt><span style="font-family: DejaVu Sans;"><tt>锚指定从这里开始）：</tt></span>

match '/:id' =&gt; 'posts#show', :constraints =&gt; {:id =&gt; /^\d/}

However, note that you don’t need to use anchors because all routes are anchored at the start.

<span style="font-family: DejaVu Sans;">然而，注意你不需要使用锚因为所有的</span>routes<span style="font-family: DejaVu Sans;">锚定在开始位置。</span>

For example, the following routes would allow for <tt>posts</tt> with <tt>to_param</tt> values like <tt>1-hello-world</tt> that always begin with a number and <tt>users</tt> with <tt>to_param</tt> values like <tt>david</tt> that never begin with a number to share the root namespace:

<span style="font-family: DejaVu Sans;">例如，下面的</span>route<span style="font-family: DejaVu Sans;">将会允许</span>posts<span style="font-family: DejaVu Sans;">及</span><tt>to_param</tt><span style="font-family: DejaVu Sans;"><tt>像</tt><tt></tt></span><tt>1-hello-world</tt><span style="font-family: DejaVu Sans;"><tt>的值，其总是以一个数字和</tt></span><tt>user</tt><span style="font-family: DejaVu Sans;"><tt>（</tt></span><tt>user</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>to_param</tt><span style="font-family: DejaVu Sans;"><tt>的值就像</tt></span><tt>david</tt><span style="font-family: DejaVu Sans;"><tt>）它从不以数字开始来</tt></span><tt>share</tt><span style="font-family: DejaVu Sans;"><tt>根名称空间。</tt></span>

match '/:id' =&gt; 'posts#show', :constraints =&gt; { :id =&gt; /\d.+/ }

match '/:username' =&gt; 'users#show'
<h4><a name="request-based-constraints"></a>3.9 Request-Based Constraints Request-Based<span style="font-family: WenQuanYi Micro Hei;">的限制</span></h4>
You can also constrain a route based on any method on the <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/action_controller_overview.html#the-request-object">Request</a></span></span> object that returns a <tt>String</tt>.

You specify a request-based constraint the same way that you specify a segment constraint:

<span style="font-family: DejaVu Sans;">你也可以限制一个</span>route <span style="font-family: DejaVu Sans;">基于任何方法在</span>Request<span style="font-family: DejaVu Sans;">对象时它都会返回一个</span>String<span style="font-family: DejaVu Sans;">。</span>

<span style="font-family: DejaVu Sans;">你指定一个</span>request-basedcontraint<span style="font-family: DejaVu Sans;">和你指定一个</span>segment constaint<span style="font-family: DejaVu Sans;">是一样的。</span>

match "photos", :constraints =&gt; {:subdomain =&gt; "admin"}

You can also specify constraints in a block form:

<span style="font-family: DejaVu Sans;">你也可以指定限制在一个</span>block form<span style="font-family: DejaVu Sans;">中：</span>

namespace :admin do

constraints :subdomain =&gt; "admin" do

resources :photos

end

end
<h4><a name="advanced-constraints"></a>3.10 Advanced Constraints<span style="font-family: WenQuanYi Micro Hei;">高级</span>constraints</h4>
If you have a more advanced constraint, you can provide an object that responds to <tt>matches?</tt> that Rails should use. Let’s say you wanted to route all users on a blacklist to the <tt>BlacklistController</tt>. You could do:

<span style="font-family: DejaVu Sans;">如果你有一个更高级的</span>contraint<span style="font-family: DejaVu Sans;">，你可以提供一个对象，</span>Rails<span style="font-family: DejaVu Sans;">将会使用</span>matches?<span style="font-family: DejaVu Sans;">回应这个对象。</span>

<span style="font-family: DejaVu Sans;">让我来告诉你要想</span>route<span style="font-family: DejaVu Sans;">所有的用户在一个黑名单中匹配（通过</span><tt>BlacklistController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><code>matches?</code><span style="font-family: DejaVu Sans;"><code>方法）。你应该：</code></span>

class BlacklistConstraint

def initialize

@ips = Blacklist.retrieve_ips

end

&nbsp;

def matches?(request)

@ips.include?(request.remote_ip)

end

end

&nbsp;

TwitterClone::Application.routes.draw do

match "*path" =&gt; "blacklist#index",

:constraints =&gt; BlacklistConstraint.new

end
<h4><a name="route-globbing"></a>3.11 Route Globbing</h4>
Route globbing is a way to specify that a particular parameter should be matched to all the remaining parts of a route. For example

Route globbing<span style="font-family: DejaVu Sans;">是一种方式来指定特定的</span>paramerter<span style="font-family: DejaVu Sans;">应该被一个</span>route<span style="font-family: DejaVu Sans;">的其余的所有部分匹配。例如</span>

match 'photos/*other' =&gt; 'photos#unknown'

This route would match <tt>photos/12</tt> or <tt>/photos/long/path/to/12</tt>, setting <tt>params[:other]</tt> to <tt>"12"</tt> or <tt>"long/path/to/12"</tt>.

<span style="font-family: DejaVu Sans;">这个</span>route<span style="font-family: DejaVu Sans;">将会匹配</span><tt>photos/12</tt><span style="font-family: DejaVu Sans;"><tt>或者</tt></span><tt>/photos/long/path/to/12</tt><span style="font-family: DejaVu Sans;"><tt>，设置</tt></span><tt>params[:other]</tt><tt> </tt><tt>to</tt><tt> </tt><tt>"12"</tt><span style="font-family: DejaVu Sans;"><tt>或</tt></span><tt>"long/path/to/12"</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

Wildcard segments can occur anywhere in a route. For example,

<span style="font-family: DejaVu Sans;">通配符分割可以发生在一个</span>route<span style="font-family: DejaVu Sans;">的任何地方。例如，</span>

match 'books/*section/:title' =&gt; 'books#show'

would match <tt>books/some/section/last-words-a-memoir</tt> with <tt>params[:section]</tt> equals <tt>"some/section"</tt>, and <tt>params[:title]</tt> equals <tt>"last-words-a-memoir"</tt>.

<span style="font-family: DejaVu Sans;">将会匹配</span><tt>books/some/section/last-words-a-memoir</tt><span style="font-family: DejaVu Sans;"><tt>为</tt></span><tt>params[:section]</tt><span style="font-family: DejaVu Sans;"><tt>等于</tt></span><tt>"some/section"</tt><span style="font-family: DejaVu Sans;"><tt>，以及</tt></span><tt>params[:title]</tt><span style="font-family: DejaVu Sans;"><tt>相当于</tt></span><tt>"last-words-a-memoir"</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

Technically a route can have even more than one wildcard segment. The matcher assigns segments to parameters in an intuitive way. For example,

<span style="font-family: DejaVu Sans;">从技术上讲一个</span>route<span style="font-family: DejaVu Sans;">可以有甚至超过一个通配符的分割。</span>matcher<span style="font-family: DejaVu Sans;">分配</span>segments<span style="font-family: DejaVu Sans;">到参数是一个直观的方式。例如，</span>

match '*a/foo/*b' =&gt; 'test#index' # <tt>*a</tt><span style="font-family: DejaVu Sans;"><tt>这一部分通配为</tt></span><tt>a</tt>

would match <tt>zoo/woo/foo/bar/baz</tt> with <tt>params[:a]</tt> equals <tt>"zoo/woo"</tt>, and <tt>params[:b]</tt> equals <tt>"bar/baz"</tt>.

Starting from Rails 3.1, wildcard routes will always match the optional format segment by default. For example if you have this route:

<code>match</code><code> </code><code>'*pages'</code> <code>=&gt;</code><code> </code><code>'pages#show'</code>

<code>By</code><code> </code><code>requesting</code><code> </code><tt>"/foo/bar.json"</tt><code>,</code><code> </code><code>your</code><code> </code><tt>params[:pages]</tt><code> </code><code>will</code><code> </code><code>be</code><code> </code><code>equals</code><code> </code><code>to</code><code> </code><tt>"foo/bar"</tt><code> </code><code>with</code><code> </code><code>the</code><code> </code><code>request</code><code> </code><code>format</code><code> </code><code>of</code><code> </code><code>JSON.</code><code> </code><code>If</code><code> </code><code>you</code><code> </code><code>want</code><code> </code><code>the</code><code> </code><code>old</code><code> </code><code>3.0.x</code><code> </code><code>behavior</code><code> </code><code>back,</code><code> </code><code>you</code><code> </code><code>could</code><code> </code><code>supply</code><code> </code><tt>:format</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>false</tt><code> </code><code>like</code><code> </code><code>this:</code>

<code>match</code><code> </code><code>'*pages'</code><code> </code><code>=&gt;</code><code> </code><code>'pages#show',</code><code> </code><code>:format</code><code> </code><code>=&gt;</code><code> </code><code>false</code>

<code>If</code><code> </code><code>you</code><code> </code><code>want</code><code> </code><code>to</code><code> </code><code>make</code><code> </code><code>the</code><code> </code><code>format</code><code> </code><code>segment</code><code> </code><code>mandatory,</code><code> </code><code>so</code><code> </code><code>it</code><code> </code><code>cannot</code><code> </code><code>be</code><code> </code><code>omitted,</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>supply</code><code> </code><tt>:format</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt><code> </code><code>like</code><code> </code><code>this:</code>

<code>match</code><code> </code><code>'*pages'</code><code> </code><code>=&gt;</code><code> </code><code>'pages#show',</code><code> </code><code>:format</code><code> </code><code>=&gt;</code><code> </code><code>true</code>
<h4><a name="redirection"></a><code>3.12</code><code> </code><code>Redirection</code></h4>
You can redirect any path to another path using the <tt>redirect</tt> helper in your router:

<span style="font-family: DejaVu Sans;"><code>你可以重定向任何</code></span><code>path</code><span style="font-family: DejaVu Sans;"><code>到另一个</code></span><code>path</code><span style="font-family: DejaVu Sans;"><code>使用</code></span><code>redirect</code><code> </code><code>helper</code><span style="font-family: DejaVu Sans;"><code>在你的</code></span><code>router</code><span style="font-family: DejaVu Sans;"><code>：</code></span>

match "/stories" =&gt; redirect("/posts")

You can also reuse dynamic segments from the match in the path to redirect to:

match "/stories/:name" =&gt; redirect("/posts/%{name}")

You can also provide a block to redirect, which receives the params and (optionally) the request object:

match "/stories/:name" =&gt; redirect {|params| "/posts/#{params[:name].pluralize}" }

match "/stories" =&gt; redirect {|p, req| "/posts/#{req.subdomain}" }

In all of these cases, if you don’t provide the leading host (<tt>http://www.example.com</tt>), Rails will take those details from the current request.
<h4><a name="routing-to-rack-applications"></a>3.13 Routing to Rack Applications</h4>
Instead of a String, like <tt>"posts#index"</tt>, which corresponds to the <tt>index</tt> action in the <tt>PostsController</tt>, you can specify any <a href="http://guides.rubyonrails.org/rails_on_rack.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rack</span></span><span style="color: #000080;"><span style="text-decoration: underline;">application</span></span></a> as the endpoint for a matcher.

match "/application.js" =&gt; Sprockets

As long as <tt>Sprockets</tt> responds to <tt>call</tt> and returns a <tt>[status,</tt><tt> </tt><tt>headers,</tt><tt> </tt><tt>body]</tt>, the router won’t know the difference between the Rack application and an action.

For the curious, <tt>"posts#index"</tt> actually expands out to <tt>PostsController.action(:index)</tt>, which returns a valid Rack application.
<h4><a name="using-root"></a>3.14 Using <tt>root</tt></h4>
You can specify what Rails should route <tt>"/"</tt> to with the <tt>root</tt> method:

root :to =&gt; 'pages#main'

<strong>You</strong><strong> </strong><strong>should</strong><strong> </strong><strong>put</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>root</strong></tt><strong> </strong><strong>route</strong><strong> </strong><strong>at</strong><strong> </strong><strong>the</strong><strong> </strong><strong>top</strong><strong> </strong><strong>of</strong><strong> </strong><strong>the</strong><strong> </strong><strong>file</strong>, because it is the most popular route and should be matched first. You also need to delete the <tt>public/index.html</tt> file for the root route to take effect.
<h3><a name="customizing-resourceful-routes"></a>4 Customizing Resourceful Routes</h3>
While the default routes and helpers generated by <tt>resources</tt><tt> </tt><tt>:posts</tt> will usually serve you well, you may want to customize them in some way. Rails allows you to customize virtually any generic part of the resourceful helpers.
<h4><a name="specifying-a-controller-to-use"></a>4.1 Specifying a Controller to Use</h4>
The <tt>:controller</tt> option lets you explicitly specify a controller to use for the resource. For example:

resources :photos, :controller =&gt; "images"

will recognize incoming paths beginning with <tt>/photos</tt> but route to the <tt>Images</tt> controller:
<table width="402" cellspacing="0" cellpadding="2"><colgroup><col width="89" /> <col width="102" /> <col width="54" /> <col width="140" /> </colgroup>
<tbody>
<tr>
<th width="89">HTTP Verb</th>
<th width="102">Path</th>
<th width="54">action</th>
<th width="140">named helper</th>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos</td>
<td width="54">index</td>
<td width="140">photos_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/new</td>
<td width="54">new</td>
<td width="140">new_photo_path</td>
</tr>
<tr>
<td width="89">POST</td>
<td width="102">/photos</td>
<td width="54">create</td>
<td width="140">photos_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/:id</td>
<td width="54">show</td>
<td width="140">photo_path(:id)</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/:id/edit</td>
<td width="54">edit</td>
<td width="140">edit_photo_path(:id)</td>
</tr>
<tr>
<td width="89">PUT</td>
<td width="102">/photos/:id</td>
<td width="54">update</td>
<td width="140">photo_path(:id)</td>
</tr>
<tr>
<td width="89">DELETE</td>
<td width="102">/photos/:id</td>
<td width="54">destroy</td>
<td width="140">photo_path(:id)</td>
</tr>
</tbody>
</table>
Use <tt>photos_path</tt>, <tt>new_photo_path</tt>, etc. to generate paths for this resource.
<h4><a name="specifying-constraints"></a>4.2 Specifying Constraints</h4>
You can use the <tt>:constraints</tt> option to specify a required format on the implicit <tt>id</tt>. For example:

This declaration constraints the <tt>:id</tt> parameter to match the supplied regular expression. So, in this case, the router would no longer match <tt>/photos/1</tt> to this route. Instead, <tt>/photos/RR27</tt> would match.

You can specify a single constraint to apply to a number of routes by using the block form:

constraints(:id =&gt; /[A-Z][A-Z][0-9]+/) do

resources :photos

resources :accounts

end

Of course, you can use the more advanced constraints available in non-resourceful routes in this context.

&nbsp;

By default the <tt>:id</tt> parameter doesn’t accept dots – this is because the dot is used as a separator for formatted routes. If you need to use a dot within an <tt>:id</tt> add a constraint which overrides this – for example <tt>:id</tt> =&gt; /[^\/]+/ allows anything except a slash.
<h4><a name="overriding-the-named-helpers"></a>4.3 Overriding the Named Helpers</h4>
The <tt>:as</tt> option lets you override the normal naming for the named route helpers. For example:

resources :photos, :as =&gt; "images"

will recognize incoming paths beginning with <tt>/photos</tt> and route the requests to <tt>PhotosController</tt>, but use the value of the :as option to name the helpers.
<table width="398" cellspacing="0" cellpadding="2"><colgroup><col width="83" /> <col width="102" /> <col width="54" /> <col width="143" /> </colgroup>
<tbody>
<tr>
<th width="83">HTTP verb</th>
<th width="102">Path</th>
<th width="54">action</th>
<th width="143">named helper</th>
</tr>
<tr>
<td width="83">GET</td>
<td width="102">/photos</td>
<td width="54">index</td>
<td width="143">images_path</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="102">/photos/new</td>
<td width="54">new</td>
<td width="143">new_image_path</td>
</tr>
<tr>
<td width="83">POST</td>
<td width="102">/photos</td>
<td width="54">create</td>
<td width="143">images_path</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="102">/photos/:id</td>
<td width="54">show</td>
<td width="143">image_path(:id)</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="102">/photos/:id/edit</td>
<td width="54">edit</td>
<td width="143">edit_image_path(:id)</td>
</tr>
<tr>
<td width="83">PUT</td>
<td width="102">/photos/:id</td>
<td width="54">update</td>
<td width="143">image_path(:id)</td>
</tr>
<tr>
<td width="83">DELETE</td>
<td width="102">/photos/:id</td>
<td width="54">destroy</td>
<td width="143">image_path(:id)</td>
</tr>
</tbody>
</table>
<h4><a name="overriding-the-new-and-edit-segments"></a> 4.4 Overriding the <tt>new</tt> and <tt>edit</tt> Segments<span style="font-family: WenQuanYi Micro Hei;">重写</span>new<span style="font-family: WenQuanYi Micro Hei;">和</span>edit Segments</h4>
The <tt>:path_names</tt> option lets you override the automatically-generated “new” and “edit” segments in paths:

resources :photos, :path_names =&gt; { :new =&gt; 'make', :edit =&gt; 'change' }

This would cause the routing to recognize paths such as

<code>/photos/make</code>

<code>/photos/1/change</code>

The actual action names aren’t changed by this option. The two paths shown would still route to the <tt>new</tt> and <tt>edit</tt> actions.

&nbsp;

If you find yourself wanting to change this option uniformly for all of your routes, you can use a scope.

scope :path_names =&gt; { :new =&gt; "make" } do

# rest of your routes

end
<h4><a name="prefixing-the-named-route-helpers"></a>4.5 Prefixing the Named Route Helpers</h4>
You can use the <tt>:as</tt> option to prefix the named route helpers that Rails generates for a route. Use this option to prevent name collisions between routes using a path scope

scope "admin" do

resources :photos, :as =&gt; "admin_photos"

end

&nbsp;

resources :photos

This will provide route helpers such as <tt>admin_photos_path</tt>, <tt>new_admin_photo_path</tt> etc.<span style="font-family: DejaVu Sans;">这将会提供比如 </span><tt>admin_photos_path</tt>, <tt>new_admin_photo_path</tt><span style="font-family: DejaVu Sans;"><tt>等这样的</tt></span><tt>route helpers</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

To prefix a group of route helpers, use <tt>:as</tt> with <tt>scope</tt>:

scope "admin", :as =&gt; "admin" do

resources :photos, :accounts

end

&nbsp;

resources :photos, :accounts

This will generate routes such as <tt>admin_photos_path</tt> and <tt>admin_accounts_path</tt> which map to <tt>/admin/photos</tt> and <tt>/admin/accounts</tt> respectively.

The <tt><strong>namespace</strong></tt> scope will automatically add <tt>:as</tt> as well as <tt>:module</tt> and <tt>:path</tt> prefixes.

You can prefix routes with a named parameter also:

scope ":username" do

resources :posts

end

This will provide you with URLs such as <tt>/bob/posts/1</tt> and will allow you to reference the <tt>username</tt> part of the path as <tt>params[:username]</tt> in controllers, helpers and views.
<h4><a name="restricting-the-routes-created"></a>4.6 Restricting the Routes Created<span style="font-family: WenQuanYi Micro Hei;">限制</span>routes<span style="font-family: WenQuanYi Micro Hei;">被创建</span></h4>
By default, Rails creates routes for the seven default actions (index, show, new, create, edit, update, and destroy) for every RESTful route in your application. You can use the <tt>:only</tt> and <tt>:except</tt> options to fine-tune this behavior. The <tt>:only</tt> option tells Rails to create only the specified routes:

<span style="font-family: DejaVu Sans;">默认的，</span>Rails<span style="font-family: DejaVu Sans;">按照七种默认的</span>action<span style="font-family: DejaVu Sans;">（</span>index, show, new, create, edit, update, and destroy<span style="font-family: DejaVu Sans;">）为你应用程序中的每个</span>RESTful route<span style="font-family: DejaVu Sans;">创建</span>routes<span style="font-family: DejaVu Sans;">。</span>

resources :photos, :only =&gt; [:index, :show]

Now, a <tt>GET</tt> request to <tt>/photos</tt> would succeed, but a <tt>POST</tt> request to <tt>/photos</tt> (which would ordinarily be routed to the <tt>create</tt> action) will fail.

<span style="font-family: DejaVu Sans;">现在一个</span>GET<span style="font-family: DejaVu Sans;">请求到</span><tt>/photos</tt><span style="font-family: DejaVu Sans;"><tt>将会成功，但是一个</tt></span><tt>POST</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>/photos</tt><span style="font-family: DejaVu Sans;"><tt>（其按理将会</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>create action</tt><span style="font-family: DejaVu Sans;"><tt>）将会失败。</tt></span>

The <tt>:except</tt> option specifies a route or list of routes that Rails should <em>not</em> create:

resources :photos, :except =&gt; :destroy

In this case, Rails will create all of the normal routes except the route for <tt>destroy</tt> (a <tt>DELETE</tt> request to <tt>/photos/:id</tt>).

If your application has many RESTful routes, using <tt>:only</tt> and <tt>:except</tt> to generate only the routes that you actually need can cut down on memory use and speed up the routing process.

<span style="font-family: DejaVu Sans;">如果你的应用程序中有很多 </span>RESTful routes<span style="font-family: DejaVu Sans;">，使用</span><tt>:only</tt> and <tt>:except</tt><span style="font-family: DejaVu Sans;"><tt>来生成仅仅你实际需要的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>能够消减内存使用和提速</tt></span><tt>routing </tt><span style="font-family: DejaVu Sans;"><tt>进程。</tt></span>
<h4><a name="translated-paths"></a>4.7 Translated Paths<span style="font-family: WenQuanYi Micro Hei;">翻译路径</span></h4>
Using <tt>scope</tt>, we can alter path names generated by resources:

<span style="font-family: DejaVu Sans;">使用</span>scope<span style="font-family: DejaVu Sans;">，我们可以别名</span>resources<span style="font-family: DejaVu Sans;">生成的路径</span>name<span style="font-family: DejaVu Sans;">：</span>

scope(:path_names =&gt; { :new =&gt; "neu", :edit =&gt; "bearbeiten" }) do

resources :categories, :path =&gt; "kategorien"

end

<tt>Rails now creates routes to the CategoriesController.</tt>
<table width="482" cellspacing="0" cellpadding="2"><colgroup><col width="83" /> <col width="170" /> <col width="54" /> <col width="159" /> </colgroup>
<tbody>
<tr>
<th width="83">HTTP verb</th>
<th width="170">Path</th>
<th width="54">action</th>
<th width="159">named helper</th>
</tr>
<tr>
<td width="83">GET</td>
<td width="170">/kategorien</td>
<td width="54">index</td>
<td width="159">categories_path</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="170">/kategorien/neu</td>
<td width="54">new</td>
<td width="159">new_category_path</td>
</tr>
<tr>
<td width="83">POST</td>
<td width="170">/kategorien</td>
<td width="54">create</td>
<td width="159">categories_path</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="170">/kategorien/:id</td>
<td width="54">show</td>
<td width="159">category_path(:id)</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="170">/kategorien/:id/bearbeiten</td>
<td width="54">edit</td>
<td width="159">edit_category_path(:id)</td>
</tr>
<tr>
<td width="83">PUT</td>
<td width="170">/kategorien/:id</td>
<td width="54">update</td>
<td width="159">category_path(:id)</td>
</tr>
<tr>
<td width="83">DELETE</td>
<td width="170">/kategorien/:id</td>
<td width="54">destroy</td>
<td width="159">category_path(:id)</td>
</tr>
</tbody>
</table>
<h4><a name="overriding-the-singular-form"></a><tt>4.8 Overriding the Singular Form</tt></h4>
If you want to define the singular form of a resource, you should add additional rules to the <tt>Inflector</tt>.

<span style="font-family: DejaVu Sans;"><tt>如果你想定义一个单数形式的</tt></span><tt>resource</tt><span style="font-family: DejaVu Sans;"><tt>，你应该添加补充的</tt></span><tt>rules</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>Inflector</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

ActiveSupport::Inflector.inflections do |inflect|

inflect.irregular 'tooth', 'teeth'

end
<h4><a name="nested-names"></a>4.9 Using <tt>:as</tt> in Nested Resources<span style="font-family: WenQuanYi Micro Hei;">在嵌套</span>resources<span style="font-family: WenQuanYi Micro Hei;">中使用</span>:as</h4>
The <tt>:as</tt> option overrides the automatically-generated name for the resource in nested route helpers. For example,

:as<span style="font-family: DejaVu Sans;">选项覆盖嵌套的</span>resource<span style="font-family: DejaVu Sans;">自动生成的</span>route<span style="font-family: DejaVu Sans;">的名字。例如：</span>

resources :magazines do

resources :ads, :as =&gt; 'periodical_ads'

end

This will create routing helpers such as <tt>magazine_periodical_ads_url</tt> and <tt>edit_magazine_periodical_ad_path</tt>.
<h3><a name="inspecting-and-testing-routes"></a>5 Inspecting and Testing Routes<span style="font-family: WenQuanYi Micro Hei;">检查和测试</span>routes</h3>
Rails offers facilities for inspecting and testing your routes.

Rails<span style="font-family: DejaVu Sans;">提供设施来检查和测试你的</span>routes<span style="font-family: DejaVu Sans;">。</span>
<h4><a name="seeing-existing-routes-with-rake"></a>5.1 Seeing Existing Routes with <tt>rake</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>使用</tt></span><tt>rake</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>来查看存在的</tt></span><tt>routes</tt></h4>
If you want a complete list of all of the available routes in your application, run <tt> rake routes</tt> command. This will print all of your routes, in the same order that they appear in <tt>routes.rb</tt>. For each route, you’ll see:

<span style="font-family: DejaVu Sans;">如果你需要一个你应用程序中可用的完整的</span>list<span style="font-family: DejaVu Sans;">，运行 </span><tt>rake routes</tt><span style="font-family: DejaVu Sans;"><tt>命令。这将会打印所有你的</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>（到终端），与</tt></span><tt>routes.rb</tt><span style="font-family: DejaVu Sans;"><tt>中出现的顺序一样。对于每个</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>，你将会看到：</tt></span>
<ul>
	<li>The route name (if any)</li>
	<li>The HTTP verb used (if the route doesn’t respond to all verbs)</li>
	<li>The URL pattern to match <span style="font-family: DejaVu Sans;">匹配的</span>URL<span style="font-family: DejaVu Sans;">模式</span></li>
	<li>The routing parameters for the route</li>
</ul>
For example, here’s a small section of the <tt>rake routes</tt> output for a RESTful route:
<pre>          users GET  /users          {:controller=&gt;"users", :action=&gt;"index"}
formatted_users GET  /users.:format  {:controller=&gt;"users", :action=&gt;"index"}
                POST /users          {:controller=&gt;"users", :action=&gt;"create"}
                POST /users.:format  {:controller=&gt;"users", :action=&gt;"create"}</pre>
You may restrict the listing to the routes that map to a particular controller setting the <tt>CONTROLLER</tt> environment variable:

<span style="font-family: DejaVu Sans;">你可以限制列出的</span>routes<span style="font-family: DejaVu Sans;">映射到一个别的</span>controller<span style="font-family: DejaVu Sans;">设置 </span><tt>CONTROLLER</tt><span style="font-family: DejaVu Sans;"><tt>环境变量：</tt></span>

$ CONTROLLER=users rake routes

You’ll find that the output from <tt>rake routes</tt> is much more readable if you widen your terminal window until the output lines don’t wrap.

<span style="font-family: DejaVu Sans;">你会发现如果你扩大到你的终端不自动换行，<tt>来自</tt></span><tt>rake routes</tt><span style="font-family: DejaVu Sans;"><tt>会更具可读性。</tt></span>
<h4><a name="testing-routes"></a>5.2 Testing Routes</h4>
Routes should be included in your testing strategy<span style="font-family: DejaVu Sans;">策略 </span>(just like the rest of your application). Rails offers three <a href="http://api.rubyonrails.org/classes/ActionDispatch/Assertions/RoutingAssertions.html">built-in assertions</a> designed to make testing routes simpler:
<ul>
	<li><tt>assert_generates</tt></li>
	<li><tt>assert_recognizes</tt></li>
	<li><tt>assert_routing</tt></li>
</ul>
<h5><a name="the-assert_generates-assertion"></a>5.2.1 The <tt>assert_generates</tt> Assertion</h5>
<tt>assert_generates</tt> asserts that a particular set of options generate a particular path and can be used with default routes or custom routes.

<tt>assert_generates</tt><span style="font-family: DejaVu Sans;"><tt>断言是一个特别的设置选项生成一个特别的路径并且可以与默认的</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>和定制的</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>

assert_generates "/photos/1", { :controller =&gt; "photos", :action =&gt; "show", :id =&gt; "1" }

assert_generates "/about", :controller =&gt; "pages", :action =&gt; "about"
<h5><a name="the-assert_recognizes-assertion"></a>5.2.2 The <tt>assert_recognizes</tt> Assertion</h5>
<tt>assert_recognizes</tt> is the inverse of <tt> </tt><tt>assert_generates</tt>. It asserts that a given path is recognized and routes it to a particular spot in your application.

<a name="result_box2"></a><tt>assert_recognizes</tt><span style="font-family: DejaVu Sans;"><tt>是 </tt></span><tt>assert_generates</tt><span style="font-family: DejaVu Sans;"><tt>的逆。它断言</tt>一个给定的</span>path<span style="font-family: DejaVu Sans;">是被承认的并</span>route<span style="font-family: DejaVu Sans;">到应用程序中的特定地点。</span>

<tt>assert_recognizes({ :controller =&gt; "photos", :action =&gt; "show", :id =&gt; "1" }, "/photos/1")</tt>

You can supply a <tt>:method</tt> argument to specify the HTTP verb:

<span style="font-family: DejaVu Sans;">你可以提供一个</span>:method<span style="font-family: DejaVu Sans;">参数来指定</span>HTTP verbe<span style="font-family: DejaVu Sans;">：</span>

assert_recognizes({ :controller =&gt; "photos", :action =&gt; "create" }, { :path =&gt; "photos", :method =&gt; :post })

assert_recognizes({ :controller =&gt; "photos", :action =&gt; "create" }, { :path =&gt; "photos", :method =&gt; :post })
<h5><a name="the-assert_routing-assertion"></a>5.2.3 The <tt>assert_routing</tt> Assertion</h5>
The assertion checks the route both ways: it tests that the path generates the options, and that the options generate the path. Thus, it combines the functions of <tt> assert_generates and </tt><tt>assert_recognizes</tt>.

<span style="font-family: DejaVu Sans;">断言 </span><tt>assert_routing</tt><span style="font-family: DejaVu Sans;"><tt>检测</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>两方面：它测试访问路径生成选项，并且测试这个选项生成的路径。这样，它联合了 </tt></span><tt>assert_generates and assert_recognizes</tt><span style="font-family: DejaVu Sans;"><tt>的功能。</tt></span>

assert_routing({ :path =&gt; "photos", :method =&gt; :post }, { :controller =&gt; "photos", :action =&gt; "create" })

标签： <a href="http://jhjguxin.hwcrazy.com/tag/guide/">guide</a> <a href="http://jhjguxin.hwcrazy.com/tag/http/">http</a> <a href="http://jhjguxin.hwcrazy.com/tag/rails/">rails</a> <a href="http://jhjguxin.hwcrazy.com/tag/route/">route</a> <a href="http://jhjguxin.hwcrazy.com/tag/ruby/">ruby</a> <a href="http://jhjguxin.hwcrazy.com/tag/translate/">translate</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>145</wp:post_id>
		<wp:post_date>2011-12-29 00:23:10</wp:post_date>
		<wp:post_date_gmt>2011-12-28 16:23:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-routing-from-the-outside-in-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="guide"><![CDATA[guide]]></category>
		<category domain="post_tag" nicename="http"><![CDATA[http]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="route"><![CDATA[route]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="translate"><![CDATA[translate]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>版本号(the version number in baike)</title>
		<link></link>
		<pubDate>Thu, 29 Dec 2011 02:28:16 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=147</guid>
		<description></description>
		<content:encoded><![CDATA[版本号(version number)是版本的标识号。每一个操作系统（或广义的讲，每一个软件）都有一个版本号。版本号能使用户了解所使用的操作系统是否为最新的版本以及它所提供的功能与设施。 每一个版本号可以分为主版本号与次版本号两部分。

版本号的命名格式　　例如：DOS4.0，主版本号是4，次版本号是0。
<div> </div>
　　<a href="http://baike.baidu.com/view/183136.htm" target="_blank">版本控制</a>比较普遍的 3 种命名格式 :
<h3><a name="1_1"></a>一、 GNU 风格的版本号命名格式</h3>
　　主版本号 . 子版本号 [. 修正版本号 [. 编译版本号 ]]
<div> </div>
　　英文对照 : Major_Version_Number.Minor_Version_Number[.Revision_Number[.Build_Number]]
<div> </div>
　　示例 : 1.2.1, 2.0, 5.0.0 build-13124
<h3><a name="1_2"></a>二、 Windows 风格的版本号命名格式</h3>
　　主版本号 . 子版本号 [ 修正版本号 [. 编译版本号 ]]
<div> </div>
　　英文对照 : Major_Version_Number.Minor_Version_Number[Revision_Number[.Build_Number]]
<div> </div>
　　示例: 1.21, 2.0
<h3><a name="1_3"></a>三、.Net Framework 风格的版本号命名格式</h3>
　　主版本号.子版本号[.编译版本号[.修正版本号]]
<div> </div>
　　英文对照: Major_Version_Number.Minor_Version_Number[.Build_Number[.Revision_Number]]
<div> </div>
　　版本号由二至四个部分组成：主版本号、次版本号、内部版本号和修订号。主版本号和次版本号是必选的；内部版本号和修订号是可选的，但是如果定义了修订号部分，则内部版本号就是必选的。所有定义的部分都必须是大于或等于 0 的整数。
<div> </div>
　　应根据下面的约定使用这些部分：
<div> </div>
　　Major ：具有相同名称但不同主版本号的程序集不可互换。例如，这适用于对产品的大量重写，这些重写使得无法实现向后兼容性。
<div> </div>
　　Minor ：如果两个程序集的名称和主版本号相同，而次版本号不同，这指示显著增强，但照顾到了向后兼容性。例如，这适用于产品的修正版或完全向后兼容的新版本。
<div> </div>
　　Build ：内部版本号的不同表示对相同源所作的重新编译。这适合于更改处理器、平台或编译器的情况。
<div> </div>
　　Revision ：名称、主版本号和次版本号都相同但修订号不同的程序集应是完全可互换的。这适用于修复以前发布的程序集中的安全漏洞。
<div> </div>
　　程序集的只有内部版本号或修订号不同的后续版本被认为是先前版本的修补程序 (Hotfix) 更新。
<div> </div>
<h2>版本号管理策略</h2>
<h3><a name="2_1"></a>一、 GNU 风格的版本号管理策略</h3>
　　1．项目初版本时 , 版本号可以为 0.1 或 0.1.0, 也可以为 1.0 或 1.0.0, 如果你为人很低调 , 我想你会选择那个主版本号为 0 的方式 ;
<div> </div>
　　2．当项目在进行了局部修改或 bug 修正时 , 主版本号和子版本号都不变 , 修正版本号加 1;
<div> </div>
　　3. 当项目在原有的基础上增加了部分功能时 , 主版本号不变 , 子版本号加 1, 修正版本号复位为 0, 因而可以被忽略掉 ;
<div> </div>
　　4．当项目在进行了重大修改或局部修正累积较多 , 而导致项目整体发生全局变化时 , 主版本号加 1;
<div> </div>
　　5．另外 , 编译版本号一般是编译器在编译过程中自动生成的 , 我们只定义其格式 , 并不进行人为控制 .
<h3><a name="2_2"></a>二、 Window 下的版本号管理策略</h3>
　　1．目初版时 , 版本号为 1.0 或 1.00;
<div> </div>
　　2. 当项目在进行了局部修改或 bug 修正时，主版本号和子版本号都不变 , 修正版本号加 1;
<div> </div>
　　3. 当项目在原有的基础上增加了部分功能时 , 主版本号不变 , 子版本号加 1, 修正版本号复位为 0, 因而可以被忽略掉 ;
<div> </div>
　　4. 当项目在进行了重大修改或局部修正累积较多 , 而导致项目整体发生全局变化时 , 主版本号加 1;
<div> </div>
　　5. 另外 , 编译版本号一般是编译器在编译过程中自动生成的 , 我们只定义其格式 , 并不进行人为控制 .
<div> </div>
　　另外 , 还可以在版本号后面加入 Alpha, Beta, Gamma, Current, RC (Release Candidate), Release, Stable 等后缀 , 在这些后缀后面还可以加入 1 位数字的版本号 .
<div> </div>
　　对于用户来说 , 如果某个软件的主版本号进行了升级 , 用户还想继续那个软件 , 则发行软件的公司一般要对用户收取升级费用 ; 而如果子版本号或修正版本号发生了升级 , 一般来说是免费的 .
<div> </div>
<h2>常见版本号</h2>
　　Alpha -- 内部测试版　Beta -- 外部测试版
<div> </div>
　　Cardware -- 属共享软件的一种，只要给作者回复一封电邮或明信片即可。（有的作者并由此提供注册码等），目前这种形式已不多见。
<div> </div>
　　CHT -- 繁体中文版
<div> </div>
　　CN/SPC -- 简体中文版
<div> </div>
　　Corporation &amp; Enterprise -- 企业版
<div> </div>
　　Deluxe -- 豪华版
<div> </div>
　　Demo -- 演示版
<div> </div>
　　Dev -- 开发专用版，程序员版本。
<div> </div>
　　EN -- 英文版
<div> </div>
　　Enhance -- 增强版或者加强版 属于正式版
<div> </div>
　　Express&amp;Special -- 特别版
<div> </div>
　　Final -- 最终版
<div> </div>
　　Free -- 免费版
<div> </div>
　　Full version -- 完全版 属于正式版
<div> </div>
　　Green -- 绿色版，破解版
<div> </div>
　　Mini -- 迷你版（也叫精简版），只有最基本的功能
<div> </div>
　　Multi-language -- 多语言版
<div> </div>
　　Plus -- 属增强版，不过这种大部分是在程序界面及多媒体功能上增强。
<div> </div>
　　Premium -- 增强版
<div> </div>
　　Preview -- 预览版
<div> </div>
　　Professional -- 专业版
<div> </div>
　　Regged/Registered -- 已注册版
<div> </div>
　　Release -- 发行版 有时间限制
<div> </div>
　　Retail/RTM -- 零售版
<div> </div>
　　Shareware -- 共享版
<div> </div>
　　Stable -- 稳定版
<div> </div>
　　Standard -- 标准版
<div> </div>
　　Ultimate -- 旗舰版，最终版本
<div> </div>
　　Upgrade -- 升级版
<div> </div>
<h2>分类</h2>
<h3><a name="4_1"></a>非正式版</h3>
　　α版
<div> </div>
　　此版本表示该软件仅仅是一个初步完成品，通常只在软件开发者内部交流，也有很少一部分发布给专业测试人员。一般而言，该版本软件的 bug 较多，普通用户最好不要安装。
<div> </div>
　　β（Beta）版
<div> </div>
　　该版本相对于α版已有了很大的改进，消除了严重的错误，但还是存在着一些缺陷，需要经过大规模的发布测试来进一步消除。这一版本通常由软件公司免费发布，用户可从相关的站点下载。通过一些专业爱好者的测试，将结果反馈给开发者，开发者们再进行有针对性的修改。该版本也不适合一般用户安装。
<div> </div>
　　γ版
<div> </div>
　　该版本已经相当成熟了，与即将发行的正式版相差无几，如果用户实在等不及了，尽可以装上一试。
<div> </div>
　　Trial（试用版）
<div> </div>
　　试用版软件在最近的几年里颇为流行，主要是得益于互联网的迅速发展。该版本软件通常都有时间限制，过期之后用户如果希望继续使用，一般得交纳一定的费用进行注册或购买。有些试用版软件还在功能上做了一定的限制。
<div> </div>
　　Unregistered（未注册版）
<div> </div>
　　未注册版与试用版极其类似，只是未注册版通常没有时间限制，在功能上相对于正式版做了一定的限制，例如绝大多数网络电话软件的注册版和未注册版，两者之间在通话质量上有很大差距。还有些虽然在使用上与正式版毫无二致，但是动不动就会弹出一个恼人的消息框来提醒你注册，如看图软件 acdsee 、智能陈桥汉字输入软件等。
<div> </div>
　　Demo版
<div> </div>
　　也称为演示版，在非正式版软件中，该版本的知名度最大。 demo 版仅仅集成了正式版中的几个功能，颇有点像 unregistered 。不同的是， demo 版一般不能通过升级或注册的方法变为正式版。
<div> </div>
　　以上是软件正式版本推出之前的几个版本，α、β、γ可以称为测试版，大凡成熟软件总会有多个测试版，如 windows 98 的β版，前前后后将近有 10 个。这么多的测试版一方面为了最终产品尽可能地满足用户的需要，另一方面也尽量减少了软件中的 bug 。而 trial 、 unregistered 、 demo 有时统称为演示版，这一类版本的广告色彩较浓，颇有点先尝后买的味道，对于普通用户而言自然是可以免费尝鲜了。
<h3><a name="4_2"></a>正式版</h3>
　　不同类型的软件的正式版本通常也有区别。
<div> </div>
　　Release
<div> </div>
　　该版本意味“最终释放版”，在出了一系列的测试版之后，终归会有一个正式版本，对于用户而言，购买该版本的软件绝对不会错。该版本有时也称为标准版。一般情况下， release 不会以单词形式出现在软件封面上，取而代之的是符号 (r) ，如 windows nt(r) 4.0 、 ms-dos(r) 6.22 等。
<div> </div>
　　Registered
<div> </div>
　　很显然，该版本是与 unregistered 相对的注册版。注册版、 release 和下面所讲的 standard 版一样，都是软件的正式版本，只是注册版软件的前身有很大一部分是从网上下载的。
<div> </div>
　　Standard
<div> </div>
　　这是最常见的标准版，不论是什么软件，标准版一定存在。标准版中包含了该软件的基本组件及一些常用功能，可以满足一般用户的需求。其价格相对高一级版本而言还是“平易近人”的。
<div> </div>
　　Deluxe
<div> </div>
　　顾名思义即为“豪华版”。豪华版通常是相对于标准版而言的，主要区别是多了几项功能，价格当然会高出一大块，不推荐一般用户购买。此版本通常是为那些追求“完美”的专业用户所准备的。
<div> </div>
　　Reference
<div> </div>
　　该版本型号常见于百科全书中，比较有名的是微软的 encarta 系列。 reference 是最高级别，其包含的主题、图像、影片剪辑等相对于 standard 和 deluxe 版均有大幅增加，容量由一张光盘猛增至三张光盘，并且加入了很强的交互功能，当然价格也不菲。可以这么说，这一版本的百科全书才能算是真正的百科全书，也是发烧友们收藏的首选。
<div> </div>
　　Professional（专业版）
<div> </div>
　　专业版是针对某些特定的开发工具软件而言的。专业版中有许多内容是标准版中所没有的，这些内容对于一个专业的软件开发人员来说是极为重要的。如微软的 visual foxpro 标准版并不具备编译成可执行文件的功能，这对于一个完整的开发项目而言显然是无法忍受的，若客户机上没有 foxpro 将不能使用。如果用专业版就没有这个问题了。
<div> </div>
　　Enterprise（企业版）
<div> </div>
　　企业版是开发类软件中的极品（相当于百科全书中的 reference 版）。拥有一套这种版本的软件可以毫无障碍地开发任何级别的应用软件。如著名的 visual c++ 的企业版相对于专业版来说增加了几个附加的特性，如 sql 调试、扩展的存储过程向导、支持 as/400 对 ole db 的访问等。而这一版本的价格也是普通用户无法接受的。如微软的 visual studios 6.0 enterprise 中文版的价格为 23000 元。
<h3><a name="4_3"></a>专有版本</h3>
　　除了以上介绍的一些版本外，还有一些专有版本名称。
<div> </div>
　　Update（升级版）
<div> </div>
　　升级版的软件是不能独立使用的，该版本的软件在安装过程中会搜索原有的正式版，如果不存在，则拒绝执行下一步。如 microsoft office 2000 升级版、 windows 9x 升级版等等。
<div> </div>
　　OEM版
<div> </div>
　　OEM 版通常是捆绑在硬件中而不单独销售的版本。将自己的产品交给别的公司去卖，保留自己的著作权，双方互惠互利，一举两得。
<div> </div>
　　单机（网络）版
<div> </div>
　　网络版在功能、结构上远比单机版复杂，如果留心一下软件的报价，你就会发现某些软件单机版和网络版的价格相差非常大，有些网络版甚至多一个客户端口就要加不少钱。
<div> </div>
　　普及版
<div> </div>
　　该版本有时也会被称为共享版，其特点是价格便宜（有些甚至完全免费）、功能单一、针对性强（当然也有占领市场、打击盗版等因素）。与试用版不同的是，该版本的软件一般不会有时间上的限制。当然，如果用户想升级，最好还是去购买正式版。
<h3><a name="4_4"></a>其他版本</h3>
　　破解版又称绿色版，严格来说这不属于一种授权版本，因为它是针对商业版、<a href="http://baike.baidu.com/view/796056.htm" target="_blank">试用版</a>、共享版这类有使用限制的<a href="http://baike.baidu.com/view/37.htm" target="_blank">软件</a>进行二次开发之后形成的特殊版本，也就是说，使用者可以在没有任何经济付出的条件下无限制的使用该软件的全部功能。一般通过改写原软件、制作算号器、拦截注册信息等等方式实现。
<div> </div>
　　以上是一些常见<a href="http://baike.baidu.com/view/8630.htm" target="_blank">软件版本</a>的简要介绍，随着软件市场行为的变化，现在也出现了一些新的版本命名方式，<a href="http://baike.baidu.com/view/6814120.htm" target="_blank">比如</a>windows xp中的xp是取自于experience中的第二、第三个字母。希望以上内容能够对大家的购买、使用和下载软件有所帮助。
<div> </div>
　　基于商业上考虑，很多的软件都不是非常严谨的遵循这个规则的。最有名的就是微软了。例如他的 NT 系列版本。大家比较熟悉的是从 NT 4.0 开始的。 99 年推出了 windows 2000 ， 2001 年推出了 windows xp ， 2003 年推出了 windows 2003 ，乍一看版本区别蛮大的，但是看他们的内部版本号就会发现，变化其实并不大，只是界面变化的大了而已。这是软件公司经常干的事情。 Windows 2000 的版本号是 NT 5.0 ， windows xp 的版本号是 NT 5.1 ， windows 2003 的版本号是 NT 5.2 ，Windows Vista和现在的Windows7 的版本号是 NT 6.0和NT 6.1，才是跨越化的版本。这样做的话就可以持续的赚广大客户的钱。毕竟人的眼睛看得东西是最直观的，所以给人感觉也是变化最大的 。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date>2011-12-29 10:28:16</wp:post_date>
		<wp:post_date_gmt>2011-12-29 02:28:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%89%88%e6%9c%ac%e5%8f%b7the-version-number-in-baike</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="version"><![CDATA[version]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby on Rails 3.1 Release Notes</title>
		<link></link>
		<pubDate>Fri, 30 Dec 2011 11:12:39 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=149</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Ruby on Rails 3.1 Release Notes</h2>
Highlights in Rails 3.1:

Rails<span style="font-family: DejaVu Sans;">中的亮点：</span>
<ul>
	<li>Streaming <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">流</span></span></li>
	<li>Reversible Migrations <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">可逆（数据）迁移</span></span></li>
	<li>Assets Pipeline Assets<span style="font-family: DejaVu Sans;">管道</span></li>
	<li>jQuery as the default JavaScript library <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">以</span></span>jQuery<span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">作为默认的 </span></span>JavaScript library</li>
</ul>
This release notes cover the major changes, but don’t include every little bug fix and change. If you want to see everything, check out the <a href="https://github.com/rails/rails/commits/master"><span style="color: #000080;"><span style="text-decoration: underline;">list</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">commits</span></span></a> in the main Rails repository on GitHub.

<span style="font-family: DejaVu Sans;">这次发行</span>notes<span style="font-family: DejaVu Sans;">涵盖了主要的</span>changes<span style="font-family: DejaVu Sans;">，但是没有包含每个很</span>little<span style="font-family: DejaVu Sans;">的</span>bug<span style="font-family: DejaVu Sans;">修复和</span>chage<span style="font-family: DejaVu Sans;">。如果你希望看到所有的事情，检查</span>Rails <span style="font-family: DejaVu Sans;">的</span>GitHub<span style="font-family: DejaVu Sans;">主代码仓库中的</span><a href="https://github.com/rails/rails/commits/master"><span style="color: #000080;"><span style="text-decoration: underline;">list</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">commits</span></span></a><span style="font-family: DejaVu Sans;">。</span>
<h3><a name="upgrading-to-rails-3-1"></a>1 Upgrading to Rails 3.1<span style="font-family: WenQuanYi Micro Hei;">升级到</span>Rails 3.1</h3>
If you’re upgrading an existing application, it’s a great idea to have good test coverage before going in. You should also first upgrade to Rails 3 in case you haven’t and make sure your application still runs as expected before attempting to update to Rails 3.1. Then take heed of the following changes:

<span style="font-family: DejaVu Sans;">如果你打算升级一个存在的应用程序，在开始进入升级的时候有一个很好的测试覆盖是一个好主意。你还应该首先升级到</span>Rails 3<span style="font-family: DejaVu Sans;">以防止你并没有确保你的应用程序在企图升级到</span>Rails 3.1<span style="font-family: DejaVu Sans;">之前能够预计到升级后仍然能够运行。然后留意随后（介绍）的</span>changes<span style="font-family: DejaVu Sans;">：</span>
<h4><a name="rails-3-1-requires-at-least-ruby-1-8-7"></a> 1.1 Rails 3.1 requires at least Ruby 1.8.7</h4>
Rails 3.1 requires Ruby 1.8.7 or higher. Support for all of the previous Ruby versions has been dropped officially and you should upgrade as early as possible. Rails 3.1 is also compatible with Ruby 1.9.2.

Rails 3.1<span style="font-family: DejaVu Sans;">需要至少</span>Ruby 1.8.7<span style="font-family: DejaVu Sans;">或者更高。曾经支持的所有的早先的</span>Ruby<span style="font-family: DejaVu Sans;">版本被正式取消，你需要尽快升级。</span>Rails 3.1<span style="font-family: DejaVu Sans;">同时也与</span>Ruby 1.9.2<span style="font-family: DejaVu Sans;">兼容。</span>

Note that Ruby 1.8.7 p248 and p249 have marshaling bugs that crash Rails. Ruby Enterprise Edition have these fixed since release 1.8.7-2010.02 though. On the 1.9 front, Ruby 1.9.1 is not usable because it outright segfaults, so if you want to use 1.9.x jump on 1.9.2 for smooth sailing.

<span style="font-family: DejaVu Sans;">注意</span>Ruby 1.8.7 p248<span style="font-family: DejaVu Sans;">和</span>p249<span style="font-family: DejaVu Sans;">有</span>marshaling bugs<span style="font-family: DejaVu Sans;">其与</span>Rails<span style="font-family: DejaVu Sans;">冲突。</span>Ruby<span style="font-family: DejaVu Sans;">企业版自</span>1.8.7-2010.02 <span style="font-family: DejaVu Sans;">发行版已经修复了这些</span>bug<span style="font-family: DejaVu Sans;">。在以</span>1.9<span style="font-family: DejaVu Sans;">开头的</span>ruby<span style="font-family: DejaVu Sans;">，</span>Ruby 1.9.1<span style="font-family: DejaVu Sans;">是不可用的因为</span>it outright segfaults<span style="font-family: DejaVu Sans;">，因此如果你想使用</span>1.9.x<span style="font-family: DejaVu Sans;">可以平稳的跳至</span>1.9.2
<h3><a name="creating-a-rails-3-1-application"></a>2 Creating a Rails 3.1 application</h3>
# You should have the 'rails' rubygem installed

$ rails new myapp

$ cd myapp
<h4><a name="vendoring-gems"></a>2.1 Vendoring Gems</h4>
Rails now uses a <tt>Gemfile</tt> in the application root to determine the gems you require for your application to start. This <tt>Gemfile</tt> is processed by the <span style="color: #000080;"><span style="text-decoration: underline;"><a href="https://github.com/carlhuda/bundler">Bundler</a></span></span> gem, which then installs all your dependencies. It can even install all the dependencies locally to your application so that it doesn’t depend on the system gems.

Rails<span style="font-family: DejaVu Sans;">现在使用一个位于应用程序根目录的</span>Gemfile<span style="font-family: DejaVu Sans;">文件来决定使你开始你的应用程序的</span>require<span style="font-family: DejaVu Sans;">。这个</span>Gemfile<span style="font-family: DejaVu Sans;">文件被</span>Bundler gem<span style="font-family: DejaVu Sans;">加工生成，它会随后安装你所有的依赖。它甚至可以以你的应用程序为</span>locally<span style="font-family: DejaVu Sans;">安装依赖，使得你的应用程序不用依赖系统</span>gems<span style="font-family: DejaVu Sans;">。</span>

&nbsp;
<table width="665" cellspacing="0" cellpadding="2"><colgroup><col width="74" /> <col width="583" /> </colgroup>
<tbody>
<tr>
<td width="74">vendor/</td>
<td width="583">A place for all third-party code. In a typical Rails application, this includes Ruby Gems, the Rails source code (if you install it into your project) and plugins containing additional prepackaged functionality.<span style="font-family: DejaVu Sans;">放置第三方代码的地方。在一个典型的</span>Rails<span style="font-family: DejaVu Sans;">应用程序中，这里包含</span>Ruby Gems<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">源代码（如果你把</span>Rails<span style="font-family: DejaVu Sans;">安装到你的项目中）还包含一些预先包装好的额外的插件</span></td>
</tr>
</tbody>
</table>
More information: – <a href="http://gembundler.com/"><span style="color: #000080;"><span style="text-decoration: underline;">bundler</span></span><span style="color: #000080;"><span style="text-decoration: underline;">homepage</span></span></a>
<h4><a name="living-on-the-edge"></a>2.2 Living on the Edge</h4>
<tt>Bundler</tt> and <tt>Gemfile</tt> makes freezing your Rails application easy as pie with the new dedicated <tt>bundle</tt> command. If you want to bundle straight from the Git repository, you can pass the <tt>--edge</tt> flag:

Bundler<span style="font-family: DejaVu Sans;">和</span>Gemfile<span style="font-family: DejaVu Sans;">通过新的专用</span>bundle <span style="font-family: DejaVu Sans;">命令来冻结你的应用程序就像吃馅饼一样简单。如果你想直接从</span>Git<span style="font-family: DejaVu Sans;">仓库</span>bundle<span style="font-family: DejaVu Sans;">，你可以通过<span style="font-family: Liberation Serif,Times New Roman,serif;">—</span></span>edge flag<span style="font-family: DejaVu Sans;">：</span>

$ rails new myapp --edge

If you have a local checkout of the Rails repository and want to generate an application using that, you can pass the <tt>--dev</tt> flag:

<span style="font-family: DejaVu Sans;">如果你有一个从</span>Rails<span style="font-family: DejaVu Sans;">源代码仓库</span>checkout<span style="font-family: DejaVu Sans;">的本地</span>Rails<span style="font-family: DejaVu Sans;">并且你想生成一个应用程序使用（上面的方法）你可以通过<span style="font-family: Liberation Serif,Times New Roman,serif;">—</span></span>dev <span style="font-family: DejaVu Sans;">标志：</span>

$ ruby /path/to/rails/bin/rails new myapp --dev
<h3><a name="rails-architectural-changes"></a>3 Rails Architectural<span style="font-family: WenQuanYi Micro Hei;">建筑的</span>Changes</h3>
<h4><a name="assets-pipeline"></a>3.1 Assets Pipeline</h4>
The major change in Rails 3.1 is the Assets Pipeline. It makes CSS and JavaScript first-class code citizens and enables proper organization, including use in plugins and engines.

<span style="font-family: DejaVu Sans;">在</span>Rails 3.1<span style="font-family: DejaVu Sans;">中主要的更改就是</span>Assets Pipeline<span style="font-family: DejaVu Sans;">（管道）。它使得</span>CSS<span style="font-family: DejaVu Sans;">和</span>JavaScript <span style="font-family: DejaVu Sans;">一流的代码公民可以合适的组织他们，包含使用</span>pluginis<span style="font-family: DejaVu Sans;">和</span>engines<span style="font-family: DejaVu Sans;">。</span>

The assets pipeline is powered by <span style="color: #000080;"><span style="text-decoration: underline;"><a href="https://github.com/sstephenson/sprockets">Sprockets</a></span></span> and is covered in the <a href="http://guides.rubyonrails.org/asset_pipeline.html"><span style="color: #000080;"><span style="text-decoration: underline;">Asset</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Pipeline</span></span></a> guide.
<h4><a name="http-streaming"></a>3.2 HTTP Streaming</h4>
HTTP Streaming is another change that is new in Rails 3.1. This lets the browser download your stylesheets and JavaScript files while the server is still generating the response. This requires Ruby 1.9.2, is opt-in and requires support from the web server as well, but the popular combo of nginx and unicorn is ready to take advantage of it.

HTTP Streaming<span style="font-family: DejaVu Sans;">是</span>Rails 3.1<span style="font-family: DejaVu Sans;">另一更改。这使得浏览器下载你的</span>stylesheets<span style="font-family: DejaVu Sans;">和</span>JavaSript<span style="font-family: DejaVu Sans;">文件即使服务器仍然在响应。这需要</span>Ruby 1.9.2<span style="font-family: DejaVu Sans;">，它是需要从服务器中选择以及服务器同样支持</span>HTTP Streaming<span style="font-family: DejaVu Sans;">，但是受欢迎的</span>nginx<span style="font-family: DejaVu Sans;">和</span>unicom<span style="font-family: DejaVu Sans;">组织已经准备</span>advantage HTTP Streaming<span style="font-family: DejaVu Sans;">。</span>
<h4><a name="default-js-library-is-now-jquery"></a>3.3 Default JS library is now jQuery</h4>
jQuery is the default JavaScript library that ships with Rails 3.1. But if you use Prototype, it’s simple to switch.

Jquey<span style="font-family: DejaVu Sans;">是默认的</span>JavaScript library<span style="font-family: DejaVu Sans;">搭载在</span>Rrails 3.1.<span style="font-family: DejaVu Sans;">但是如果你使用</span>Prototype<span style="font-family: DejaVu Sans;">，它更改很简单。</span>

$ rails new myapp -j prototype
<h4><a name="identity-map"></a>3.4 Identity Map <span style="font-family: WenQuanYi Micro Hei;">身份</span>map</h4>
Active Record has an Identity Map in Rails 3.1. An identity map keeps previously instantiated records and returns the object associated with the record if accessed again. The identity map is created on a per-request basis and is flushed at request completion.

Rails 3.1<span style="font-family: DejaVu Sans;">的</span>Active Record<span style="font-family: DejaVu Sans;">有一个</span>Indentity Map<span style="font-family: DejaVu Sans;">。一个</span>identity map<span style="font-family: DejaVu Sans;">保留先前的实例化的记录并且如果再次访问返回记录的对象的关系。</span>Indentity map<span style="font-family: DejaVu Sans;">是基于每个请求创建的并且在请求完成刷新。</span>

Rails 3.1 comes with the identity map turned off by default.

Rails 3.1<span style="font-family: DejaVu Sans;">默认</span>Identity map<span style="font-family: DejaVu Sans;">是关闭的。</span>
<h3><a name="railties"></a>4 Railties</h3>
<ul>
	<li><a name="railties1"></a>jQuery is the new default JavaScript library.</li>
</ul>
Jquey<span style="font-family: DejaVu Sans;">是新的默认的</span>JavaScript library<span style="font-family: DejaVu Sans;">。</span>
<ul>
	<li>jQuery and Prototype are no longer vendored and is provided from now on by the jquery-rails and prototype-rails gems.</li>
</ul>
jQuey<span style="font-family: DejaVu Sans;">和</span>Prototype<span style="font-family: DejaVu Sans;">不再</span>vendored<span style="font-family: DejaVu Sans;">并且从现在开始提供的是</span>jquery-rails and prototype-rails gems<span style="font-family: DejaVu Sans;">。</span>
<ul>
	<li>The application generator accepts an option <tt>-j</tt> which can be an arbitrary string. If passed “foo”, the gem “foo-rails” is added to the <tt>Gemfile</tt>, and the application JavaScript manifest requires “foo” and “foo_ujs”. Currently only “prototype-rails” and “jquery-rails” exist and provide those files via the asset pipeline.</li>
</ul>
<span style="font-family: DejaVu Sans;">应用程序创建器接受一个选项</span>-j<span style="font-family: DejaVu Sans;">其可以是任意字符串。如果传递<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>foo”<span style="font-family: DejaVu Sans;">，</span>gem “foo-rails”<span style="font-family: DejaVu Sans;">就被添加到</span>Gemfile<span style="font-family: DejaVu Sans;">，并且应用程序的</span>JavaScript manifest requires “foo” and “foo_ujs”<span style="font-family: DejaVu Sans;">。当前只有<span style="font-family: Liberation Serif,Times New Roman,serif;"> “</span></span>prototype-rails” and “jquery-rails”<span style="font-family: DejaVu Sans;">存在并且通过</span>asset pipeline<span style="font-family: DejaVu Sans;">提供这些文件。</span>
<ul>
	<li>Generating an application or a plugin runs <tt>bundle</tt><tt> </tt><tt>install</tt> unless <tt>--skip-gemfile</tt> or <tt>--skip-bundle</tt> is specified.</li>
</ul>
<span style="font-family: DejaVu Sans;">生成一个应用程序或者一个</span>plugin<span style="font-family: DejaVu Sans;">运行</span>bundle install<span style="font-family: DejaVu Sans;">除非</span>--skip-gemfile<span style="font-family: DejaVu Sans;">或者</span>--skip-bundle<span style="font-family: DejaVu Sans;">被指定</span>
<ul>
	<li>The controller and resource generators will now automatically produce asset stubs (this can be turned off with <tt>--skip-assets</tt>). These stubs will use CoffeeScript and Sass, if those libraries are available.</li>
</ul>
Controller<span style="font-family: DejaVu Sans;">和</span>resource<span style="font-family: DejaVu Sans;">创建器将会自动的产生</span>asset stubs(this can be turned off with <tt>--skip-assets</tt>)<span style="font-family: DejaVu Sans;">。这些</span>stub<span style="font-family: DejaVu Sans;">将会使用</span>CoffeeScript and Sass<span style="font-family: DejaVu Sans;">，如果这些</span>libraries<span style="font-family: DejaVu Sans;">是可用的。</span>
<ul>
	<li>Scaffold and app generators use the Ruby 1.9 style hash when running on Ruby 1.9. To generate old style hash, <tt>--old-style-hash</tt> can be passed.</li>
</ul>
<ul>
	<li>Scaffold controller generator creates format block for JSON instead of XML.</li>
</ul>
<ul>
	<li>Active Record logging is directed to STDOUT and shown inline in the console.</li>
</ul>
<ul>
	<li>Added <tt>config.force_ssl</tt> configuration which loads <tt>Rack::SSL</tt> middleware and force all requests to be under HTTPS protocol.</li>
</ul>
<ul>
	<li>Added <tt>rails</tt><tt> </tt><tt>plugin</tt><tt> </tt><tt>new</tt> command which generates a Rails plugin with gemspec, tests and a dummy application for testing.</li>
</ul>
<ul>
	<li>Added <tt>Rack::Etag</tt> and <tt>Rack::ConditionalGet</tt> to the default middleware stack.</li>
</ul>
<ul>
	<li>Added <tt>Rack::Cache</tt> to the default middleware stack.</li>
</ul>
<ul>
	<li>Engines received a major update – You can mount them at any path, enable assets, run generators etc.</li>
</ul>
<h3><a name="action-pack"></a>5 Action Pack</h3>
<h4><a name="action-controller"></a>5.1 Action Controller</h4>
<ul>
	<li>A warning is given out if the CSRF token authenticity cannot be verified.</li>
</ul>
<ul>
	<li>Specify <tt>force_ssl</tt> in a controller to force the browser to transfer data via HTTPS protocol on that particular controller. To limit to specific actions, <tt>:only</tt> or <tt>:except</tt> can be used.</li>
</ul>
<ul>
	<li>Sensitive query string parameters specified in <tt>config.filter_parameters</tt> will now be filtered out from the request paths in the log.</li>
</ul>
<ul>
	<li>URL parameters which return <tt>nil</tt> for <tt>to_param</tt> are now removed from the query string.</li>
</ul>
<ul>
	<li>Added <tt>ActionController::ParamsWrapper</tt> to wrap parameters into a nested hash, and will be turned on for JSON request in new applications by default. This can be customized in <tt>config/initializers/wrap_parameters.rb</tt>.</li>
</ul>
<ul>
	<li>Added <tt>config.action_controller.include_all_helpers</tt>. By default <tt>helper</tt><tt> </tt><tt>:all</tt> is done in <tt>ActionController::Base</tt>, which includes all the helpers by default. Setting <tt>include_all_helpers</tt> to <tt>false</tt> will result in including only application_helper and the helper corresponding to controller (like foo_helper for foo_controller).</li>
</ul>
<ul>
	<li><tt>url_for</tt> and named url helpers now accept <tt>:subdomain</tt> and <tt>:domain</tt> as options.</li>
</ul>
<ul>
	<li>Added <tt>Base.http_basic_authenticate_with</tt> to do simple http basic authentication with a single class method call.</li>
</ul>
class PostsController &lt; ApplicationController

USER_NAME, PASSWORD = "dhh", "secret"

&nbsp;

before_filter :authenticate, :except =&gt; [ :index ]

&nbsp;

def index

render :text =&gt; "Everyone can see me!"

end

&nbsp;

def edit

render :text =&gt; "I'm only accessible if you know the password"

end

&nbsp;

private

def authenticate

authenticate_or_request_with_http_basic do |user_name, password|

user_name == USER_NAME &amp;&amp; password == PASSWORD

end

end

end

..can now be written as

class PostsController &lt; ApplicationController

http_basic_authenticate_with :name =&gt; "dhh", :password =&gt; "secret", :except =&gt; :index

&nbsp;

def index

render :text =&gt; "Everyone can see me!"

end

&nbsp;

def edit

render :text =&gt; "I'm only accessible if you know the password"

end

end

Added streaming support, you can enable it with:

class PostsController &lt; ActionController::Base

stream

end

You can restrict<span style="font-family: DejaVu Sans;">限制</span>it to some actions by using <tt>:only</tt> or <tt>:except</tt>. Please read the docs at <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://api.rubyonrails.org/classes/ActionController/Streaming.html">ActionController::Streaming</a></span></span> for more information.
<ul>
	<li>The redirect route method now also accepts a hash of options which will only change the parts of the url in question, or an object which responds to call, allowing for redirects to be reused.</li>
</ul>
<h4><a name="action-dispatch"></a>5.2 Action Dispatch</h4>
<ul>
	<li><tt>config.action_dispatch.x_sendfile_header</tt> now defaults to <tt>nil</tt> and <tt>config/environments/production.rb</tt> doesn’t set any particular value for it. This allows servers to set it through <tt>X-Sendfile-Type</tt>.</li>
</ul>
<ul>
	<li><tt>ActionDispatch::MiddlewareStack</tt> now uses composition<span style="font-family: DejaVu Sans;">组成</span>over inheritance and is no longer an array.</li>
</ul>
<ul>
	<li>Added <tt>ActionDispatch::Request.ignore_accept_header</tt> to ignore accept headers.</li>
</ul>
<ul>
	<li>Added <tt>Rack::Cache</tt> to the default stack.</li>
</ul>
<ul>
	<li>Moved etag responsibility from <tt>ActionDispatch::Response</tt> to the middleware stack.</li>
</ul>
<ul>
	<li>Rely on <tt>Rack::Session</tt> stores API for more compatibility across the Ruby world. This is backwards incompatible since <tt>Rack::Session</tt> expects <tt>#get_session</tt> to accept four arguments and requires <tt>#destroy_session</tt> instead of simply <tt>#destroy</tt>.</li>
</ul>
<ul>
	<li>Template lookup now searches further up in the inheritance chain.</li>
</ul>
<h4><a name="action-view"></a>5.3 Action View</h4>
<ul>
	<li>Added an <tt>:authenticity_token</tt> option to <tt>form_tag</tt> for custom handling or to omit the token by passing <tt>:authenticity_token</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>false</tt>.</li>
</ul>
<ul>
	<li>Created <tt>ActionView::Renderer</tt> and specified an API for <tt>ActionView::Context</tt>.</li>
</ul>
<ul>
	<li>In place <tt>SafeBuffer</tt> mutation is prohibited<span style="font-family: DejaVu Sans;">禁止</span>in Rails 3.1.</li>
</ul>
<ul>
	<li>Added HTML5 <tt>button_tag</tt> helper.</li>
</ul>
<ul>
	<li><tt>file_field</tt> automatically adds <tt>:multipart</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt> to the enclosing form.</li>
</ul>
<ul>
	<li>Added a convenience idiom to generate HTML5 data-* attributes in tag helpers from a <tt>:data</tt> hash of options:</li>
</ul>
tag("div", :data =&gt; {:name =&gt; 'Stephen', :city_state =&gt; %w(Chicago IL)})

# =&gt; &lt;div data-name="Stephen" data-city-state="[&amp;quot;Chicago&amp;quot;,&amp;quot;IL&amp;quot;]" /&gt;

Keys are dasherized. Values are JSON-encoded, except for strings and symbols.
<ul>
	<li><tt>csrf_meta_tag</tt> is renamed to <tt>csrf_meta_tags</tt> and aliases <tt>csrf_meta_tag</tt> for backwards compatibility.</li>
</ul>
<ul>
	<li>The old template handler API is deprecated and the new API simply requires a template handler to respond to call.</li>
</ul>
<ul>
	<li>rhtml and rxml are finally removed as template handlers.</li>
</ul>
<ul>
	<li><tt>config.action_view.cache_template_loading</tt> is brought back which allows to decide whether templates should be cached or not.</li>
</ul>
<ul>
	<li>The submit form helper does not generate an id “object_name_id” anymore.</li>
</ul>
<ul>
	<li>Allows <tt>FormHelper#form_for</tt> to specify the <tt>:method</tt> as a direct option instead of through the <tt>:html</tt> hash. <tt>form_for(@post,</tt><tt> </tt><tt>remote:</tt><tt> </tt><tt>true,</tt><tt> </tt><tt>method:</tt><tt> </tt><tt>:delete)</tt> instead of <tt>form_for(@post,</tt><tt> </tt><tt>remote:</tt><tt> </tt><tt>true,</tt><tt> </tt><tt>html:</tt><tt> </tt><tt>{</tt><tt> </tt><tt>method:</tt><tt> </tt><tt>:delete</tt><tt> </tt><tt>})</tt>.</li>
</ul>
<ul>
	<li>Provided <tt>JavaScriptHelper#j()</tt> as an alias for <tt>JavaScriptHelper#escape_javascript()</tt>. This supersedes the <tt>Object#j()</tt> method that the JSON gem adds within templates using the JavaScriptHelper.</li>
</ul>
<ul>
	<li>Allows AM/PM format in datetime selectors.</li>
</ul>
<ul>
	<li><tt>auto_link</tt> has been removed from Rails and extracted into the <a href="https://github.com/tenderlove/rails_autolink"><span style="color: #000080;"><span style="text-decoration: underline;">rails_autolink</span></span><span style="color: #000080;"><span style="text-decoration: underline;">gem</span></span></a></li>
</ul>
<h3><a name="active-record"></a>6 Active Record</h3>
<ul>
	<li>Added a class method <tt>pluralize_table_names</tt> to singularize/pluralize<span style="font-family: DejaVu Sans;">复数</span>table names of individual models. Previously this could only be set globally for all models through <tt>ActiveRecord::Base.pluralize_table_names</tt>.</li>
</ul>
class User &lt; ActiveRecord::Base

self.pluralize_table_names = false

end
<ul>
	<li>Added block setting of attributes to singular associations. The block will get called after the instance is initialized</li>
</ul>
class User &lt; ActiveRecord::Base

has_one :account

end

&nbsp;

user.build_account{ |a| a.credit_limit =&gt; 100.0 }
<ul>
	<li><strong>Added</strong><strong> </strong><tt><strong>ActiveRecord::Base.attribute_names</strong></tt><strong> </strong><strong>to</strong><strong> </strong><strong>return</strong><strong> </strong><strong>a</strong><strong> </strong><strong>list</strong><strong> </strong><strong>of</strong><strong> </strong><strong>attribute</strong><strong> </strong><strong>names.</strong><strong> </strong><strong>This</strong><strong> </strong><strong>will</strong><strong> </strong><strong>return</strong><strong> </strong><strong>an</strong><strong> </strong><strong>empty</strong><strong> </strong><strong>array</strong><strong> </strong><strong>if</strong><strong> </strong><strong>the</strong><strong> </strong><strong>model</strong><strong> </strong><strong>is</strong><strong> </strong><strong>abstract</strong><strong> </strong><strong>or</strong><strong> </strong><strong>the</strong><strong> </strong><strong>table</strong><strong> </strong><strong>does</strong><strong> </strong><strong>not</strong><strong> </strong><strong>exist.</strong><strong> </strong></li>
</ul>
<ul>
	<li>CSV Fixtures are deprecated and support will be removed in Rails 3.2.0.</li>
</ul>
<ul>
	<li><tt>ActiveRecord#new</tt>, <tt>ActiveRecord#create</tt> and <tt>ActiveRecord#update_attributes</tt> all accept a second hash as an option that allows you to specify which role to consider when assigning attributes. This is built on top of Active Model’s new mass assignment capabilities:</li>
</ul>
class Post &lt; ActiveRecord::Base

attr_accessible :title

attr_accessible :title, :published_at, :as =&gt; :admin

end

&nbsp;

Post.new(params[:post], :as =&gt; :admin)
<ul>
	<li><tt>default_scope</tt> can now take a block, lambda, or any other object which responds to call for lazy evaluation.</li>
</ul>
<ul>
	<li>Default scopes are now evaluated at the latest possible moment, to avoid problems where scopes would be created which would implicitly contain the default scope, which would then be impossible to get rid of via Model.unscoped.</li>
</ul>
<ul>
	<li>PostgreSQL adapter only supports PostgreSQL version 8.2 and higher.</li>
</ul>
<ul>
	<li><tt>ConnectionManagement</tt> middleware is changed to clean up the connection pool after the rack body has been flushed.</li>
</ul>
<ul>
	<li>Added an <tt>update_column</tt> method on Active Record. This new method updates a given attribute on an object, skipping validations and callbacks. It is recommended to use <tt>update_attribute</tt> unless you are sure you do not want to execute any callback, including the modification of the <tt>updated_at</tt> column. It should not be called on new records.</li>
</ul>
<ul>
	<li>Associations with a <tt>:through</tt> option can now use any association as the through or source association, including other associations which have a <tt>:through</tt> option and <tt>has_and_belongs_to_many</tt> associations.</li>
</ul>
<ul>
	<li>The configuration for the current database connection is now accessible via <tt>ActiveRecord::Base.connection_config</tt>.</li>
</ul>
<ul>
	<li>limits and offsets are removed from COUNT queries unless both are supplied.</li>
</ul>
People.limit(1).count # =&gt; 'SELECT COUNT(*) FROM people'

People.offset(1).count # =&gt; 'SELECT COUNT(*) FROM people'

People.limit(1).offset(1).count # =&gt; 'SELECT COUNT(*) FROM people LIMIT 1 OFFSET 1'
<ul>
	<li><tt>ActiveRecord::Associations::AssociationProxy</tt> has been split. There is now an <tt>Association</tt> class (and subclasses) which are responsible for operating on associations, and then a separate, thin wrapper called <tt>CollectionProxy</tt>, which proxies collection associations. This prevents namespace pollution, separates concerns, and will allow further refactorings.</li>
</ul>
<ul>
	<li>Singular associations (<tt>has_one</tt>, <tt>belongs_to</tt>) no longer have a proxy and simply returns the associated record or <tt>nil</tt>. This means that you should not use undocumented methods such as <tt>bob.mother.create</tt> – use <tt>bob.create_mother</tt> instead.</li>
</ul>
<ul>
	<li>Support the <tt>:dependent</tt> option on <tt>has_many</tt><tt> </tt><tt>:through</tt> associations. For historical and practical reasons, <tt>:delete_all</tt> is the default deletion strategy employed by <tt>association.delete(*records)</tt>, despite the fact that the default strategy is <tt>:nullify</tt> for regular has_many. Also, this only works at all if the source reflection is a belongs_to. For other situations, you should directly modify the through association.</li>
</ul>
<ul>
	<li>The behavior of <tt>association.destroy</tt> for <tt>has_and_belongs_to_many</tt> and <tt>has_many</tt><tt> </tt><tt>:through</tt> is changed. From now on, ‘destroy’ or ‘delete’ on an association will be taken to mean ‘get rid of the link’, not (necessarily) ‘get rid of the associated records’.</li>
</ul>
<ul>
	<li>Previously, <tt>has_and_belongs_to_many.destroy(*records)</tt> would destroy the records themselves. It would not delete any records in the join table. Now, it deletes the records in the join table.</li>
</ul>
<ul>
	<li>Previously, <tt>has_many_through.destroy(*records)</tt> would destroy the records themselves, and the records in the join table. [Note: This has not always been the case; previous version of Rails only deleted the records themselves.] Now, it destroys only the records in the join table.</li>
</ul>
<ul>
	<li>Note that this change is backwards-incompatible to an extent, but there is unfortunately no way to ‘deprecate’ it before changing it. The change is being made in order to have consistency as to the meaning of ‘destroy’ or ‘delete’ across the different types of associations. If you wish to destroy the records themselves, you can do <tt>records.association.each(&amp;:destroy)</tt>.</li>
</ul>
<ul>
	<li>Add <tt>:bulk</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt> option to <tt>change_table</tt> to make all the schema changes defined in a block using a single ALTER statement.</li>
</ul>
change_table(:users, :bulk =&gt; true) do |t|

t.string :company_name

t.change :birthdate, :datetime

end
<ul>
	<li>Removed support for accessing attributes on a <tt>has_and_belongs_to_many</tt> join table. <tt>has_many</tt><tt> </tt><tt>:through</tt> needs to be used.</li>
</ul>
<ul>
	<li>Added a <tt>create_association!</tt> method for <tt>has_one</tt> and <tt>belongs_to</tt> associations.</li>
</ul>
<ul>
	<li>Migrations are now reversible<span style="font-family: DejaVu Sans;">可逆</span>, meaning that Rails will figure out how to reverse your migrations. To use reversible migrations, just define the <tt>change</tt> method.</li>
</ul>
class MyMigration &lt; ActiveRecord::Migration

def change

create_table(:horses) do

t.column :content, :text

t.column :remind_at, :datetime

end

end

end
<ul>
	<li>Some things cannot be automatically reversed for you. If you know how to reverse those things, you should define <tt>up</tt> and <tt>down</tt> in your migration. If you define something in change that cannot be reversed, an <tt>IrreversibleMigration</tt> exception will be raised when going down.</li>
</ul>
<ul>
	<li>Migrations now use instance methods rather than class methods:</li>
</ul>
class FooMigration &lt; ActiveRecord::Migration

def up # Not self.up

...

end

end
<ul>
	<li>Migration files generated from model and constructive migration generators (for example, add_name_to_users) use the <strong>reversible</strong><strong> </strong><strong>migration</strong><strong>’</strong><strong>s</strong><strong> </strong><tt>change</tt> method instead of the ordinary <tt>up</tt> and <tt>down</tt> methods.</li>
</ul>
<ul>
	<li>Removed support for interpolating<span style="font-family: DejaVu Sans;">插值</span>string SQL conditions on associations. Instead, a proc should be used.</li>
</ul>
has_many :things, :conditions =&gt; 'foo = #{bar}' # before

has_many :things, :conditions =&gt; proc { "foo = #{bar}" } # after

&nbsp;

Inside the proc, <tt>self</tt> is the object which is the owner of the association, unless you are eager loading the association, in which case <tt>self</tt> is the class which the association is within.

You can have any “normal” conditions inside the proc, so the following will work too:

has_many :things, :conditions =&gt; proc { ["foo = ?", bar] }

&nbsp;
<ul>
	<li>Previously <tt>:insert_sql</tt> and <tt>:delete_sql</tt> on <tt>has_and_belongs_to_many</tt> association allowed you to call ‘record’ to get the record being inserted or deleted. This is now passed as an argument to the proc.</li>
</ul>
<ul>
	<li>Added <tt>ActiveRecord::Base#has_secure_password</tt> (via <tt>ActiveModel::SecurePassword</tt>) to encapsulate dead-simple password usage with BCrypt encryption and salting.</li>
</ul>
# Schema: User(name:string, password_digest:string, password_salt:string)

class User &lt; ActiveRecord::Base

has_secure_password

end

&nbsp;
<ul>
	<li>When a model is generated <tt>add_index</tt> is added by default for <tt>belongs_to</tt> or <tt>references</tt> columns.</li>
</ul>
<ul>
	<li>Setting the id of a <tt>belongs_to</tt> object will update the reference to the object.</li>
</ul>
<ul>
	<li><tt>ActiveRecord::Base#dup</tt> and <tt>ActiveRecord::Base#clone</tt> semantics<span style="font-family: DejaVu Sans;">语义</span>have changed to closer match normal Ruby dup and clone semantics.</li>
</ul>
<ul>
	<li>Calling <tt>ActiveRecord::Base#clone</tt> will result in a shallow copy of the record, including copying the frozen state. No callbacks will be called.</li>
</ul>
<ul>
	<li>Calling <tt>ActiveRecord::Base#dup</tt> will duplicate the record, including calling after initialize hooks. Frozen state will not be copied, and all associations will be cleared. A duped record will return <tt>true</tt> for <tt>new_record?</tt>, have a <tt>nil</tt> id field, and is saveable.</li>
</ul>
<ul>
	<li>The query cache now works with prepared statements. No changes in the applications are required.</li>
</ul>
<h3><a name="active-model"></a>7 Active Model</h3>
<ul>
	<li><tt>attr_accessible</tt> accepts an option <tt>:as</tt> to specify a role.</li>
</ul>
<ul>
	<li><tt>InclusionValidator</tt>, <tt>ExclusionValidator</tt>, and <tt>FormatValidator</tt> now accepts an option which can be a proc, a lambda, or anything that respond to <tt>call</tt>. This option will be called with the current record as an argument and returns an object which respond to <tt>include?</tt> for <tt>InclusionValidator</tt> and <tt>ExclusionValidator</tt>, and returns a regular expression object for <tt>FormatValidator</tt>.</li>
</ul>
<ul>
	<li>Added <tt>ActiveModel::SecurePassword</tt> to encapsulate dead-simple password usage with BCrypt encryption and salting.</li>
</ul>
<ul>
	<li><tt>ActiveModel::AttributeMethods</tt> allows attributes to be defined on demand.</li>
</ul>
<ul>
	<li>Added support for selectively enabling and disabling observers.</li>
</ul>
<ul>
	<li>Alternate <tt>I18n</tt> namespace lookup is no longer supported.</li>
</ul>
<h3><a name="active-resource"></a>8 Active Resource</h3>
<ul>
	<li><strong>The</strong><strong> </strong><strong>default</strong><strong> </strong><strong>format</strong><strong> </strong><strong>has</strong><strong> </strong><strong>been</strong><strong> </strong><strong>changed</strong><strong> </strong><strong>to</strong><strong> </strong><strong>JSON</strong><strong> </strong><strong>for</strong><strong> </strong><strong>all</strong><strong> </strong><strong>requests</strong>. If you want to continue to use XML you will need to set <tt>self.format</tt><tt> </tt><tt>=</tt><tt> </tt><tt>:xml</tt> in the class. For example,</li>
</ul>
class User &lt; ActiveResource::Base

self.format = :xml

end
<h3><a name="active-support"></a>9 Active Support</h3>
<ul>
	<li><tt>ActiveSupport::Dependencies</tt> now raises <tt>NameError</tt> if it finds an existing constant in <tt>load_missing_constant</tt>.</li>
</ul>
<ul>
	<li>Added a new reporting method <tt>Kernel#quietly</tt> which silences both <tt>STDOUT</tt> and <tt>STDERR</tt>.</li>
</ul>
<ul>
	<li>Added <tt>String#inquiry</tt> as a convenience method for turning a String into a <tt>StringInquirer</tt> object.</li>
</ul>
<ul>
	<li>Added <tt>Object#in?</tt> to test if an object is included in another object.</li>
</ul>
<ul>
	<li><tt>LocalCache</tt> strategy is now a real middleware class and no longer an anonymous class.</li>
</ul>
<ul>
	<li><tt>ActiveSupport::Dependencies::ClassCache</tt> class has been introduced for holding references to reloadable classes.</li>
</ul>
<ul>
	<li><tt>ActiveSupport::Dependencies::Reference</tt> has been refactored to take direct advantage of the new <tt>ClassCache</tt>.</li>
</ul>
<ul>
	<li>Backports <tt>Range#cover?</tt> as an alias for <tt>Range#include?</tt> in Ruby 1.8.</li>
</ul>
<ul>
	<li>Added <tt>weeks_ago</tt> and <tt>prev_week</tt> to Date/DateTime/Time.</li>
</ul>
<ul>
	<li>Added <tt>before_remove_const</tt> callback to <tt>ActiveSupport::Dependencies.remove_unloadable_constants!</tt>.</li>
</ul>
Deprecations:
<ul>
	<li><tt>ActiveSupport::SecureRandom</tt> is deprecated in favor of <tt>SecureRandom</tt> from the Ruby standard library.</li>
</ul>
<h3><a name="credits"></a>10 Credits</h3>
See the <a href="http://contributors.rubyonrails.org/"><span style="color: #000080;"><span style="text-decoration: underline;">full</span></span><span style="color: #000080;"><span style="text-decoration: underline;">list</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">contributors</span></span><span style="color: #000080;"><span style="text-decoration: underline;">to</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span></a> for the many people who spent many hours making Rails, the stable and robust framework it is. Kudos to all of them.

Rails 3.1 Release Notes were compiled by <a href="https://github.com/vijaydev"><span style="color: #000080;"><span style="text-decoration: underline;">Vijay</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Dev</span></span></a>.

标签： <a href="http://jhjguxin.hwcrazy.com/tag/gem/">gem</a> <a href="http://jhjguxin.hwcrazy.com/tag/git/">git</a> <a href="http://jhjguxin.hwcrazy.com/tag/guide/">guide</a> <a href="http://jhjguxin.hwcrazy.com/tag/jquery/">jquery</a> <a href="http://jhjguxin.hwcrazy.com/tag/learning/">learning</a> <a href="http://jhjguxin.hwcrazy.com/tag/rails/">rails</a> <a href="http://jhjguxin.hwcrazy.com/tag/release/">release</a> <a href="http://jhjguxin.hwcrazy.com/tag/ruby/">ruby</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>149</wp:post_id>
		<wp:post_date>2011-12-30 19:12:39</wp:post_date>
		<wp:post_date_gmt>2011-12-30 11:12:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-on-rails-3-1-release-notes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="guide"><![CDATA[guide]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[release]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>devise</title>
		<link></link>
		<pubDate>Fri, 06 Jan 2012 04:44:04 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=151</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div>

<strong>IMPORTANT:</strong> Devise 2.0.0.rc is out. If you are upgrading, please read: <a href="https://github.com/plataformatec/devise/wiki/How-To:-Upgrade-to-Devise-2.0">github.com/plataformatec/devise/wiki/How-To:-Upgrade-to-Devise-2.0</a>
<h2>Devise</h2>
<a href="http://travis-ci.org/plataformatec/devise"><img src="https://secure.travis-ci.org/plataformatec/devise.png" alt="" /></a>

Devise is a flexible authentication solution for Rails based on Warden. It:
<ul>
	<li>Is Rack based;</li>
	<li>Is a complete MVC solution based on Rails engines;</li>
	<li>Allows you to have multiple roles (or models/scopes) signed in at the same time;</li>
	<li>Is based on a modularity concept: use just what you really need.</li>
</ul>
It’s comprised of 12 modules:
<ul>
	<li>Database Authenticatable: encrypts and stores a password in the database to validate the authenticity of a user while signing in. The authentication can be done both through POST requests or HTTP Basic Authentication.</li>
	<li>Token Authenticatable: signs in a user based on an authentication token (also known as “single access token”). The token can be given both through query string or HTTP Basic Authentication.</li>
	<li>Omniauthable: adds Omniauth (github.com/intridea/omniauth) support;</li>
	<li>Confirmable: sends emails with confirmation instructions and verifies whether an account is already confirmed during sign in.</li>
	<li>Recoverable: resets the user password and sends reset instructions.</li>
	<li>Registerable: handles signing up users through a registration process, also allowing them to edit and destroy their account.</li>
	<li>Rememberable: manages generating and clearing a token for remembering the user from a saved cookie.</li>
	<li>Trackable: tracks sign in count, timestamps and IP address.</li>
	<li>Timeoutable: expires sessions that have no activity in a specified period of time.</li>
	<li>Validatable: provides validations of email and password. It’s optional and can be customized, so you’re able to define your own validations.</li>
	<li>Lockable: locks an account after a specified number of failed sign-in attempts. Can unlock via email or after a specified time period.</li>
	<li>Encryptable: adds support of other authentication mechanisms besides the built-in Bcrypt (the default).</li>
</ul>
<h2>Information</h2>
<h3>The Devise wiki</h3>
The Devise Wiki has lots of additional information about Devise including many “how-to” articles and answers to the most frequently asked questions. Please browse the Wiki after finishing this README:

<a href="https://wiki.github.com/plataformatec/devise">wiki.github.com/plataformatec/devise</a>
<h3>Bug reports</h3>
If you discover a problem with Devise, we would like to know about it. However, we ask that you please review these guidelines before submitting a bug report:

<a href="https://github.com/plataformatec/devise/wiki/Bug-reports">github.com/plataformatec/devise/wiki/Bug-reports</a>

If you found a security bug, do <strong>NOT</strong> use the GitHub issue tracker. Send email or a private GitHub message to the maintainers listed at the bottom of the README.
<h3>Mailing list</h3>
If you have any questions, comments, or concerns, please use the Google Group instead of the GitHub issue tracker:

<a href="https://groups.google.com/group/plataformatec-devise">groups.google.com/group/plataformatec-devise</a>
<h3>RDocs</h3>
You can view the Devise documentation in RDoc format here:

<a href="http://rubydoc.info/github/plataformatec/devise/master/frames">rubydoc.info/github/plataformatec/devise/master/frames</a>

If you need to use Devise with Rails 2.3, you can always run `gem server` from the command line after you install the gem to access the old documentation.
<h3>Example applications</h3>
There are a few example applications available on GitHub that demonstrate various features of Devise with different versions of Rails. You can view them here:

<a href="https://github.com/plataformatec/devise/wiki/Example-Applications">github.com/plataformatec/devise/wiki/Example-Applications</a>
<h3>Extensions</h3>
Our community has created a number of extensions that add functionality above and beyond what is included with Devise. You can view a list of available extensions and add your own here:

<a href="https://github.com/plataformatec/devise/wiki/Extensions">github.com/plataformatec/devise/wiki/Extensions</a>
<h3>Contributing</h3>
We hope that you will consider contributing to Devise. Please read this short overview for some information about how to get started:

<a href="https://github.com/plataformatec/devise/wiki/Contributing">github.com/plataformatec/devise/wiki/Contributing</a>

You will usually want to write tests for your changes. To run the test suite, `cd` into Devise’s top-level directory and run `bundle install` and `rake`. For the tests to pass, you will need to have a MongoDB server (version 2.0 or newer) running on your system.
<h2>Installation</h2>
You can use the latest Rails 3 gem with the latest Devise gem:
<pre>gem install devise</pre>
After you install Devise and add it to your Gemfile, you need to run the generator:
<pre>rails generate devise:install</pre>
The generator will install an initializer which describes ALL Devise’s configuration options and you MUST take a look at it. When you are done, you are ready to add Devise to any of your models using the generator:
<pre>rails generate devise MODEL</pre>
Replace MODEL by the class name used for the applications users, it’s frequently ‘User’ but could also be ‘Admin’. This will create a model (if one does not exist) and configure it with default Devise modules. Next, you’ll usually run db:migrate as the generator will have created a migration file (if your ORM supports them). This generator also configures your config/routes.rb file, continue reading this file to understand exactly what the generator produces and how to use it. Finally, if your server was already running, then restart it as Rails doesn’t automatically load methods from a new gem.

Support for Rails 2.3.x can be found by installing Devise 1.0.x from the v1.0 branch.
<h2>Starting with Rails?</h2>
If you are building your first Rails application, we recommend you to <strong>not</strong> use Devise. Devise requires a good understanding of the Rails Framework. In such cases, we advise you to start a simple authentication system from scratch, today we have two resources:
<ul>
	<li>Michael Hartl’s online book: <a href="http://railstutorial.org/chapters/modeling-and-viewing-users-two#top">railstutorial.org/chapters/modeling-and-viewing-users-two#top</a></li>
	<li>Ryan Bates’ Railscast: <a href="http://railscasts.com/episodes/250-authentication-from-scratch">railscasts.com/episodes/250-authentication-from-scratch</a></li>
</ul>
Once you have solidified your understanding of Rails and authentication mechanisms, we assure you Devise will be very pleasant to work with. :)
<h2>Getting started</h2>
This is a walkthrough with all steps you need to setup a devise resource, including model, migration, route files, and optional configuration.

Devise must be set up within the model (or models) you want to use. Devise routes must be created inside your config/routes.rb file.

We’re assuming here you want a User model with some Devise modules, as outlined below:
<pre>class User &lt; ActiveRecord::Base
  devise :database_authenticatable, :registerable, :confirmable, :recoverable, :rememberable, :trackable, :validatable
end</pre>
After you choose which modules to use, you need to set up your migrations. Luckily, Devise has some helpers to save you from this boring work:
<pre>create_table :users do |t|
  t.database_authenticatable
  t.confirmable
  t.recoverable
  t.rememberable
  t.trackable
  t.timestamps
end</pre>
Devise doesn’t use <em>attr_accessible</em> or <em>attr_protected</em> inside its modules, so be sure to define attributes as accessible or protected in your model.

Configure your routes after setting up your model. Open your config/routes.rb file and add:
<pre>devise_for :users</pre>
This will use your User model to create a set of needed routes (you can see them by running `rake routes`). If you invoked the devise generator, you noticed that this is exactly what the generator produces for us: model, routes and migrations.

Don’t forget to run rake db:migrate and you are ready to go! But don’t stop reading here, we still have a lot to tell you.
<h3>Controller filters and helpers</h3>
Devise will create some helpers to use inside your controllers and views. To set up a controller with user authentication, just add this before_filter:
<pre>before_filter :authenticate_user!</pre>
To verify if a user is signed in, use the following helper:
<pre>user_signed_in?</pre>
For the current signed-in user, this helper is available:
<pre>current_user</pre>
You can access the session for this scope:
<pre>user_session</pre>
After signing in a user, confirming the account or updating the password, Devise will look for a scoped root path to redirect. Example: For a :user resource, it will use user_root_path if it exists, otherwise default root_path will be used. This means that you need to set the root inside your routes:
<pre>root :to =&gt; "home#index"</pre>
You can also overwrite after_sign_in_path_for and after_sign_out_path_for to customize your redirect hooks.

Finally, you need to set up default url options for the mailer in each environment. Here is the configuration for config/environments/development.rb:
<pre>config.action_mailer.default_url_options = { :host =&gt; 'localhost:3000' }</pre>
Notice that if your devise model is not called “user” but “member”, then the helpers you should use are:
<pre>before_filter :authenticate_member!

member_signed_in?

current_member

member_session</pre>
<h3>Configuring Models</h3>
The devise method in your models also accepts some options to configure its modules. For example, you can choose which encryptor to use in database_authenticatable:
<pre>devise :database_authenticatable, :registerable, :confirmable, :recoverable, :stretches =&gt; 20</pre>
Besides :stretches, you can define :pepper, :encryptor, :confirm_within, :remember_for, :timeout_in, :unlock_in and other values. For details, see the initializer file that was created when you invoked the “devise:install” generator described above.
<h3>Configuring multiple models</h3>
Devise allows you to set up as many roles as you want. For example, you may have a User model and also want an Admin model with just authentication, trackable, lockable and timeoutable features and no confirmation or password-recovery features. Just follow these steps:
<pre># Create a migration with the required fields
create_table :admins do |t|
  t.database_authenticatable
  t.lockable
  t.trackable
  t.timestamps
end

# Inside your Admin model
devise :database_authenticatable, :trackable, :timeoutable, :lockable

# Inside your routes
devise_for :admins

# Inside your protected controller
before_filter :authenticate_admin!

# Inside your controllers and views
admin_signed_in?
current_admin
admin_session</pre>
<h3>Configuring views</h3>
We built Devise to help you quickly develop an application that uses authentication. However, we don’t want to be in your way when you need to customize it.

Since Devise is an engine, all its views are packaged inside the gem. These views will help you get started, but after sometime you may want to change them. If this is the case, you just need to invoke the following generator, and it will copy all views to your application:
<pre>rails generate devise:views</pre>
If you have more than one role in your application (such as “User” and “Admin”), you will notice that Devise uses the same views for all roles. Fortunately, Devise offers an easy way to customize views. All you need to do is set “config.scoped_views = true” inside “config/initializers/devise.rb”.

After doing so, you will be able to have views based on the role like “users/sessions/new” and “admins/sessions/new”. If no view is found within the scope, Devise will use the default view at “devise/sessions/new”. You can also use the generator to generate scoped views:
<pre>rails generate devise:views users</pre>
<h3>Configuring controllers</h3>
If the customization at the views level is not enough, you can customize each controller by following these steps:

1) Create your custom controller, for example a Admins::SessionsController:
<pre>class Admins::SessionsController &lt; Devise::SessionsController
end</pre>
2) Tell the router to use this controller:
<pre>devise_for :admins, :controllers =&gt; { :sessions =&gt; "admins/sessions" }</pre>
3) And since we changed the controller, it won’t use the “devise/sessions” views, so remember to copy “devise/sessions” to “admin/sessions”.

Remember that Devise uses flash messages to let users know if sign in was successful or failed. Devise expects your application to call “flash[:notice]” and “flash[:alert]” as appropriate.
<h3>Configuring routes</h3>
Devise also ships with default routes. If you need to customize them, you should probably be able to do it through the devise_for method. It accepts several options like :class_name, :path_prefix and so on, including the possibility to change path names for I18n:
<pre>devise_for :users, :path =&gt; "usuarios", :path_names =&gt; { :sign_in =&gt; 'login', :sign_out =&gt; 'logout', :password =&gt; 'secret', :confirmation =&gt; 'verification', :unlock =&gt; 'unblock', :registration =&gt; 'register', :sign_up =&gt; 'cmon_let_me_in' }</pre>
Be sure to check devise_for documentation for details.

If you have the need for more deep customization, for instance to also allow “/sign_in” besides “/users/sign_in”, all you need to do is to create your routes normally and wrap them in a <tt>devise_scope</tt> block in the router:
<pre>devise_scope :user do
  get "sign_in", :to =&gt; "devise/sessions#new"
end</pre>
This way you tell devise to use the scope :user when “/sign_in” is accessed. Notice <tt>devise_scope</tt> is also aliased as <tt>as</tt> and you can also give a block to <tt>devise_for</tt>, resulting in the same behavior:
<pre>devise_for :users do
  get "sign_in", :to =&gt; "devise/sessions#new"
end</pre>
Feel free to choose the one you prefer!
<h3>I18n</h3>
Devise uses flash messages with I18n with the flash keys :notice and :alert. To customize your app, you can set up your locale file:
<pre>en:
  devise:
    sessions:
      signed_in: 'Signed in successfully.'</pre>
You can also create distinct messages based on the resource you’ve configured using the singular name given in routes:
<pre>en:
  devise:
    sessions:
      user:
        signed_in: 'Welcome user, you are signed in.'
      admin:
        signed_in: 'Hello admin!'</pre>
The Devise mailer uses a similar pattern to create subject messages:
<pre>en:
  devise:
    mailer:
      confirmation_instructions:
        subject: 'Hello everybody!'
        user_subject: 'Hello User! Please confirm your email'
      reset_password_instructions:
        subject: 'Reset instructions'</pre>
Take a look at our locale file to check all available messages. You may also be interested in one of the many translations that are available on our wiki:

<a href="https://github.com/plataformatec/devise/wiki/I18n">github.com/plataformatec/devise/wiki/I18n</a>
<h3>Test helpers</h3>
Devise includes some tests helpers for functional specs. To use them, you just need to include Devise::TestHelpers in your test class and use the sign_in and sign_out method. Such methods have the same signature as in controllers:
<pre>sign_in :user, @user   # sign_in(scope, resource)
sign_in @user          # sign_in(resource)

sign_out :user         # sign_out(scope)
sign_out @user         # sign_out(resource)</pre>
You can include the Devise Test Helpers in all of your tests by adding the following to the bottom of your test/test_helper.rb file:
<pre>class ActionController::TestCase
  include Devise::TestHelpers
end</pre>
If you’re using RSpec and want the helpers automatically included within all <tt>describe</tt> blocks, add a file called spec/support/devise.rb with the following contents:
<pre>RSpec.configure do |config|
  config.include Devise::TestHelpers, :type =&gt; :controller
end</pre>
Do not use such helpers for integration tests such as Cucumber or Webrat. Instead, fill in the form or explicitly set the user in session. For more tips, check the wiki (<a href="https://wiki.github.com/plataformatec/devise">wiki.github.com/plataformatec/devise</a>).
<h3>Omniauth</h3>
Devise comes with Omniauth support out of the box to authenticate from other providers. You can read more about Omniauth support in the wiki:
<ul>
	<li><a href="https://github.com/plataformatec/devise/wiki/OmniAuth:-Overview">github.com/plataformatec/devise/wiki/OmniAuth:-Overview</a></li>
</ul>
<h3>Other ORMs</h3>
Devise supports ActiveRecord (default) and Mongoid. To choose other ORM, you just need to require it in the initializer file.
<h3>Migrating from other solutions</h3>
Devise implements encryption strategies for Clearance, Authlogic and Restful-Authentication. To make use of these strategies, you need set the desired encryptor in the encryptor initializer config option and add :encryptable to your model. You might also need to rename your encrypted password and salt columns to match Devise’s fields (encrypted_password and password_salt).
<h2>Troubleshooting</h2>
<h3>Heroku</h3>
Using devise on Heroku with Ruby on Rails 3.1 requires setting:
<pre>config.assets.initialize_on_precompile = false</pre>
Read more about the potential issues at <a href="http://guides.rubyonrails.org/asset_pipeline.html">guides.rubyonrails.org/asset_pipeline.html</a>
<h2>Additional information</h2>
<h3>Warden</h3>
Devise is based on Warden, which is a general Rack authentication framework created by Daniel Neighman. We encourage you to read more about Warden here:

<a href="https://github.com/hassox/warden">github.com/hassox/warden</a>
<h3>Contributors</h3>
We have a long list of valued contributors. Check them all at:

<a href="https://github.com/plataformatec/devise/contributors">github.com/plataformatec/devise/contributors</a>
<h3>Maintainers</h3>
<ul>
	<li>José Valim (<a href="https://github.com/josevalim">github.com/josevalim</a>)</li>
	<li>Carlos Antônio da Silva (<a href="https://github.com/carlosantoniodasilva">github.com/carlosantoniodasilva</a>)</li>
	<li>Rodrigo Flores (<a href="https://github.com/rodrigoflores">github.com/rodrigoflores</a>)</li>
</ul>
<h2>License</h2>
MIT License. Copyright 2011 Plataforma Tecnologia. <a href="http://blog.plataformatec.com.br/">blog.plataformatec.com.br</a>

</div>
</div>
<div>标签： <a href="http://jhjguxin.hwcrazy.com/tag/devise/">devise</a> <a href="http://jhjguxin.hwcrazy.com/tag/gem/">gem</a> <a href="http://jhjguxin.hwcrazy.com/tag/rails/">rails</a> <a href="http://jhjguxin.hwcrazy.com/tag/ruby/">ruby</a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>151</wp:post_id>
		<wp:post_date>2012-01-06 12:44:04</wp:post_date>
		<wp:post_date_gmt>2012-01-06 04:44:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devise</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="devise"><![CDATA[devise]]></category>
		<category domain="post_tag" nicename="gem"><![CDATA[gem]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Showing the devise edit password screen</title>
		<link></link>
		<pubDate>Fri, 06 Jan 2012 17:54:59 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=154</guid>
		<description></description>
		<content:encoded><![CDATA[In my rails 3 app using devise, I want to provide a link for users to edit their password.

I have a standard link that points to: /users/password/edit ... Log output below(#all action in PasswordsController )

 
<code>Started GET "/users/password/edit" for 127.0.0.1 at 2011-08-10 10:11:46 -0700
Processing by Devise::PasswordsController#edit as HTML
User Load (0.6ms) SELECT "users".* FROM "users" WHERE "users"."id" = 3 LIMIT 1
Redirected to http://localhost:3000/
Completed 302 Found in 309ms</code>

Why is rails redirecting? Why can't I show the edit password page? Thanks

&nbsp;

<code>Devise::PasswordsController#edit</code> is for non-authenticated users who wish to change their password using a reset token. This reset token was previously sent to the user in an email (Reset password instructions). If the user is already logged in, this edit password page will always redirect to the after-sign-in path since it shouldn't be accessible to authenticated users.

&nbsp;

I suppose what you want is to allow the user to change his password <strong>after</strong> logging in. You have to use<code>Devise::RegistrationsController#edit</code> for that.

&nbsp;
<div>标签： <a href="http://jhjguxin.sinaapp.com/tag/devise/">devise</a> <a href="http://jhjguxin.sinaapp.com/tag/rails/">rails</a> <a href="http://jhjguxin.sinaapp.com/tag/ruby/">ruby</a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date>2012-01-07 01:54:59</wp:post_date>
		<wp:post_date_gmt>2012-01-06 17:54:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>showing-the-devise-edit-password-screen</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="devise"><![CDATA[devise]]></category>
		<category domain="post_tag" nicename="edit"><![CDATA[edit]]></category>
		<category domain="post_tag" nicename="password"><![CDATA[password]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Phusion Passenger users guide</title>
		<link></link>
		<pubDate>Mon, 09 Jan 2012 06:26:17 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=157</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

Phusion Passenger is an Apache module, which makes deploying Ruby and Ruby on Rails applications on Apache a breeze. It follows the usual Ruby on Rails conventions, such as "Don’t-Repeat-Yourself" and ease of setup, while at the same time providing enough flexibility.

</div>
<div>

This users guide will teach you:

</div>
<div>
<ul>
	<li>How to install Phusion Passenger.</li>
	<li>How to configure Phusion Passenger.</li>
	<li>How to deploy a Ruby on Rails application.</li>
	<li>How to deploy a <a href="http://rack.rubyforge.org/">Rack</a>-based Ruby application.</li>
	<li>How to solve common problems.</li>
</ul>
</div>
<div>

This guide assumes that the reader is somewhat familiar with Apache and with using the commandline.

</div>
<div>
<h2 id="_support_information">1. Support information</h2>
<div>
<div>
<h3 id="_supported_operating_systems">1.1. Supported operating systems</h3>
<div>

Phusion Passenger works on any POSIX-compliant operating system. In other words: practically any operating system on earth, except Microsoft Windows.

</div>
<div>

Phusion Passenger is confirmed on a large number of operating systems and Linux distributions, including, but not limited to, Ubuntu, Debian, CentOS/Fedora/RHEL, Gentoo, Mac OS X, FreeBSD and Solaris. Both 32-bit and 64-bit platforms are supported.

</div>
<div>

The only POSIX-compliant operating system on which Phusion Passenger for Apache is known not to work at this time, is OpenBSD. Please use Phusion Passenger for Nginx instead.

</div>
<div>

Please <a href="http://code.google.com/p/phusion-passenger/issues/list">report a bug</a> or <a href="http://groups.google.com/group/phusion-passenger">join our discussion forum</a> if it doesn’t work on your POSIX-compliant operating system.

</div>
</div>
<div>
<h3 id="_where_to_get_support">1.2. Where to get support</h3>
<div>
<ul>
	<li><a href="http://code.google.com/p/phusion-passenger/issues/list">Issue tracker</a> - report bugs here.</li>
	<li><a href="http://groups.google.com/group/phusion-passenger">Discussion forum</a> - post a message here if you’re experiencing problems.</li>
</ul>
</div>
</div>
</div>
</div>
<div>
<h2 id="_installing_upgrading_and_uninstalling_phusion_passenger">2. Installing, upgrading and uninstalling Phusion Passenger</h2>
<div>
<div>
<h3 id="_generic_installation_instructions">2.1. Generic installation instructions</h3>
<div>
<h4 id="install_passenger">2.1.1. Overview of installation methods</h4>
<div>

There are three ways to install Phusion Passenger:

</div>
<div>
<ol>
	<li>By installing the Phusion Passenger gem, as instructed on the <a href="http://www.modrails.com/install.html">“Install” page on the Phusion Passenger website</a>.</li>
	<li>By downloading the source tarball from the Phusion Passenger website (<em>passenger-x.x.x.tar.gz</em>).</li>
	<li>By installing a native Linux package (e.g. Debian package).</li>
</ol>
</div>
<div>

The following sections will explain each installation method. Please read the section for the installation method that you prefer. In our opinion, installing the gem or the native package is easiest. For these two installation methods, Phusion Passenger provides an easy-to-use installer.

</div>
</div>
<div>
<h4 id="_preparation_gem_and_source_tarball_only">2.1.2. Preparation (gem and source tarball only)</h4>
<div>

If you want to install Phusion Passenger via the gem or the source tarball, then some preparations might be required. You can skip this subsection if you’re installing Phusion Passenger via a native Linux package, because no compilation is necessary.

</div>
<div>
<h5 id="_switching_to_a_root_command_prompt">Switching to a root command prompt</h5>
<div>

Before installing, you will probably need to switch to the root user first. When you install Phusion Passenger via a gem or a source tarball, some Phusion Passenger files have to be compiled, which requires write access to the directory in which the Phusion Passenger files are located. On Unix systems, the root user is the user who has write access to the entire system. So unless you know that your normal user account has write access to the Phusion Passenger directory, you should switch to root before installing Phusion Passenger.

</div>
<div>

You can switch to root by typing the following command:

</div>
<div>
<div>
<pre>sudo -s</pre>
</div>
</div>
<div>

This will open a command prompt as the root user, from which you can proceed with installing Phusion Passenger.

</div>
<div>

If your system does not have <em>sudo</em> installed, please type the following command instead, which should do the same thing:

</div>
<div>
<div>
<pre>su</pre>
</div>
</div>
</div>
<div>
<h5 id="specifying_correct_apache_install">Specifying the correct Apache installation</h5>
<div>

The Phusion Passenger installer will attempt to automatically detect Apache, and compile Phusion Passenger against that Apache version. It does this by looking for the apxs or apxs2 command in the PATH environment variable. Apxs is an integral part of any Apache installation.

</div>
<div>

However, some systems have multiple Apache installations. This is likely the case on MacOS X: the OS ships with Apache, but users tend to install another Apache version seperately, e.g. via MacPorts. If your system has multiple Apache installations, then you will need to tell the Phusion Passenger installer which one to use. It is very important that you specify the correct Apache installation, because if you load Phusion Passenger in an Apache installation that it wasn’t compiled against, then it will likely crash.

</div>
<div>

On yet other systems, Apache is installed in a non-standard location, preventing the Phusion Passenger installer from detecting Apache. This is most likely the case on systems on which Apache was installed by hand from source, i.e. as opposed to installed through the system’s native package manager. If this is the case, then you will also have to tell the installer where it can find Apache.

</div>
<div>

To do so, set the APXS2 environment variable to the full path of the correct apxs or apxs2 command. Suppose that you want to use the Apache installation in <em>/opt/apache2</em>. Then, assuming that the corresponding apxs program’s path is <em>/opt/apache2/bin/apxs</em>, type:

</div>
<div>
<div>
<pre>export APXS2=/opt/apache2/bin/apxs</pre>
</div>
</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>On some systems, the apxs program might be called apxs2, and it might be located in the sbin folder instead of the bin folder.</td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>
<div>Environment variables and <em>sudo</em></div>
By default, the <em>sudo</em> command will erase any environment variables that it doesn’t recognize, prior to executing the given command. So if you set APXS2 as a normal user, then run sudo passenger-install-apache2-module (which is the command for the Phusion Passenger installer), then the installer will not receive the environment variable value that you set. To solve this problem, please become root prior to setting any environment variables, as described in the previous subsection.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h5 id="specifying_ruby_installation">Specifying the correct Ruby installation</h5>
<div>

If your system has multiple Ruby installations — which is likely the case on MacOS X, or if you’ve also installed <a href="http://www.rubyenterpriseedition.com/">Ruby Enterprise Edition</a>  — then you will need to tell the operating system which Ruby installation to use, prior to running the Phusion Passenger installer. If you only have one Ruby installation (the case on most Linux systems), then you can skip this section because Phusion Passenger will automatically detect it.

</div>
<div>

To specify a Ruby installation, prepend your Ruby installation’s bin directory to the PATH environment variable. For example, if you have the following Ruby installations:

</div>
<div>
<ul>
	<li>/usr/bin/ruby</li>
	<li>/opt/myruby/bin/ruby</li>
</ul>
</div>
<div>

and you want to use the latter, then type:

</div>
<div>
<div>
<pre>export PATH=/opt/myruby/bin:$PATH</pre>
</div>
</div>
</div>
</div>
<div>
<h4 id="_installing_via_the_gem">2.1.3. Installing via the gem</h4>
<div>

Please install the gem and then run the Phusion Passenger installer, by typing the following commands:

</div>
<div>
<div>
<pre>gem install passenger-x.x.x.gem
passenger-install-apache2-module</pre>
</div>
</div>
<div>

Please follow the instructions given by the installer.

</div>
</div>
<div>
<h4 id="_installing_via_the_source_tarball">2.1.4. Installing via the source tarball</h4>
<div>

Extract the tarball to whatever location you prefer. <strong>The Phusion Passenger files are to reside in that location permanently.</strong> For example, if you would like Phusion Passenger to reside in /opt/passenger-x.x.x:

</div>
<div>
<div>
<pre>cd /opt
tar xzvf ~/YourDownloadsFolder/passenger-x.x.x.tar.gz</pre>
</div>
</div>
<div>

Next, run the included installer:

</div>
<div>
<div>
<pre>/opt/passenger-x.x.x/bin/passenger-install-apache2-module</pre>
</div>
</div>
<div>

Please follow the instructions given by the installer.

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/important.png" alt="Important" /></td>
<td>Please do not remove the <em>passenger-x.x.x</em> folder after installation. Furthermore, the <em>passenger-x.x.x</em> folder must be accessible by Apache.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h4 id="_installing_via_a_native_linux_package">2.1.5. Installing via a native Linux package</h4>
<div>

John Leach from Brightbox has kindly provided an Ubuntu Hardy package for Phusion Passenger. The package is available from the <a href="http://apt.brightbox.net/">Brightbox repository</a>.

</div>
<div>

Please install the native Linux package, e.g.:

</div>
<div>
<div>
<pre>sudo sh -c 'echo "deb http://apt.brightbox.net hardy main" &gt; /etc/apt/sources.list.d/brightbox.list'
sudo sh -c 'wget -q -O - http://apt.brightbox.net/release.asc | apt-key add -'
sudo apt-get update
sudo apt-get install libapache2-mod-passenger</pre>
</div>
</div>
</div>
<div>
<h4 id="_what_does_the_installer_do">2.1.6. What does the installer do?</h4>
<div>

Although we call it an “installer”, it doesn’t actually install anything. The installer checks whether all required dependencies are installed, compiles Phusion Passenger for you, and tells you how to modify the Apache configuration file, but it doesn’t copy any files around.

</div>
<div>

passenger-install-apache2-module is actually just a user-friendly frontend around the command rake apache2, which performs the actual compilation of Phusion Passenger.

</div>
</div>
</div>
<div>
<h3 id="_operating_system_specific_instructions_and_information">2.2. Operating system-specific instructions and information</h3>
<div>
<h4 id="_macos_x">2.2.1. MacOS X</h4>
<div>

Ben Ruebenstein has written an excellent <a href="http://benr75.com/articles/2008/04/12/setup-mod_rails-phusion-mac-os-x-leopard">tutorial on installing Phusion Passenger on OS X</a>.

</div>
</div>
<div>
<h4 id="_ubuntu_linux">2.2.2. Ubuntu Linux</h4>
<div>

Ben Hughes has written an <a href="http://www.railsgarden.com/2008/04/12/configurating-passenger-mod_rails-on-slicehost-with-ubuntu-710/">article on installing Phusion Passenger on Ubuntu</a>.

</div>
</div>
<div>
<h4 id="_opensolaris">2.2.3. OpenSolaris</h4>
<div>

J Aaron Farr has written a <a href="http://cubiclemuses.com/cm/articles/2009/04/09/rails-passenger-open-solaris-ec2/">guide</a> about setting up Ruby on Rails and Phusion Passenger on OpenSolaris and EC2.

</div>
</div>
</div>
<div>
<h3 id="_upgrading_or_downgrading_phusion_passenger">2.3. Upgrading or downgrading Phusion Passenger</h3>
<div>
<h4 id="_via_a_gem_or_a_source_tarball">2.3.1. Via a gem or a source tarball</h4>
<div>

To upgrade or downgrade Phusion Passenger via the gem or the source tarball, install the newer or older version as you normally would; that is, install the gem or unpack the tarball, and run passenger-install-apache2-module. Eventually passenger-install-apache2-module will tell you to copy &amp; paste some settings into the Apache configuration file; something that looks along the lines of:

</div>
<div>
<div>
<pre>LoadModule passenger_module ...
PassengerRoot ...
PassengerRuby ...</pre>
</div>
</div>
<div>

Because you already had Phusion Passenger installed, you already had similar settings in your Apache configuration file, just with different values. <strong>Replace</strong> the old settings with the new ones that the installer outputs. It is important that the old settings are removed, otherwise Phusion Passenger may malfunction.

</div>
<div>

When you’re done, restart Apache.

</div>
</div>
<div>
<h4 id="_via_a_native_linux_package">2.3.2. Via a native Linux package</h4>
<div>

There are no special instructions required to upgrade or downgrade Phusion Passenger via a native Linux package.

</div>
</div>
</div>
<div>
<h3 id="_unloading_disabling_phusion_passenger_from_apache_without_uninstalling_it">2.4. Unloading (disabling) Phusion Passenger from Apache without uninstalling it</h3>
<div>

You can temporarily unload (disable) Phusion Passenger from Apache, without uninstalling the Phusion Passenger files, so that Apache behaves as if Phusion Passenger was never installed in the first place. This might be useful to you if, for example, you seem to be experiencing a problem caused by Phusion Passenger, but you want to make sure whether that’s actually the case, without having to through the hassle of uninstalling Phusion Passenger completely. When disabled, Phusion Passenger will not occupy any memory or CPU or otherwise interfere with Apache.

</div>
<div>

To unload Phusion Passenger from Apache, edit your Apache configuration file(s) and comment out:

</div>
<div>
<ul>
	<li>all Phusion Passenger configuration directives.</li>
	<li>the <em>LoadModule passenger_module</em> directive.</li>
</ul>
</div>
<div>

For example, if your configuration file looks like this…

</div>
<div>
<div>
<pre>Listen *:80
NameVirtualHosts *:80
....

LoadModule passenger_module /somewhere/passenger-x.x.x/ext/apache2/mod_passenger.so

PassengerRuby /usr/bin/ruby
PassengerRoot /somewhere/passenger/x.x.x
PassengerMaxPoolSize 10

&lt;VirtualHost *:80&gt;
    ServerName www.foo.com
    DocumentRoot /webapps/foo/public
    RailsBaseURI /rails
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

…then comment out the relevant directives, so that it looks like this:

</div>
<div>
<div>
<pre>Listen *:80
NameVirtualHosts *:80
....

# LoadModule passenger_module /somewhere/passenger-x.x.x/ext/apache2/mod_passenger.so

# PassengerRuby /usr/bin/ruby
# PassengerRoot /somewhere/passenger/x.x.x
# PassengerMaxPoolSize 10

&lt;VirtualHost *:80&gt;
    ServerName www.foo.com
    DocumentRoot /webapps/foo/public
    # RailsBaseURI /rails
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

After you’ve done this, save the file and restart Apache.

</div>
</div>
<div>
<h3 id="_uninstalling_phusion_passenger">2.5. Uninstalling Phusion Passenger</h3>
<div>

To uninstall Phusion Passenger, please first remove all Phusion Passenger configuration directives from your Apache configuration file(s). After you’ve done this, you need to remove the Phusion Passenger files.

</div>
<div>
<ul>
	<li>If you installed Phusion Passenger via a gem, then type gem uninstall passenger. You might have to run this as root.</li>
	<li>If you installed Phusion Passenger via a source tarball, then remove the directory in which you placed the extracted Phusion Passenger files. This directory is the same as the one pointed to the by <em>PassengerRoot</em> configuration directive.</li>
	<li>If you installed Phusion Passenger via a Debian package, then remove type sudo apt-get remove libapache2-mod-passenger.</li>
</ul>
</div>
</div>
</div>
</div>
<div>
<h2 id="_deploying_a_ruby_on_rails_1_x_or_2_x_but_not_rails_gt_3_x_application">3. Deploying a Ruby on Rails 1.x or 2.x (but NOT Rails &gt;= 3.x) application</h2>
<div>
<div>

Suppose you have a Ruby on Rails application in <em>/webapps/mycook</em>, and you own the domain <em>www.mycook.com</em>. You can either deploy your application to the virtual host’s root (i.e. the application will be accessible from the root URL, <em>http://www.mycook.com/</em>), or in a sub URI (i.e. the application will be accessible from a sub URL, such as <em>http://www.mycook.com/railsapplication</em>).

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>The default RAILS_ENV environment in which deployed Rails applications are run, is “production”. You can change this by changing the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#rails_env"><em>RailsEnv</em></a> configuration option.</td>
</tr>
</tbody>
</table>
</div>
<div>
<h3 id="_deploying_to_a_virtual_host_8217_s_root">3.1. Deploying to a virtual host’s root</h3>
<div>

Add a virtual host entry to your Apache configuration file. Make sure that the following conditions are met:

</div>
<div>
<ul>
	<li>The virtual host’s document root must point to your Ruby on Rails application’s <em>public</em> folder.</li>
	<li>The Apache per-directory permissions must allow access to this folder.</li>
	<li>MultiViews must be disabled for this folder.</li>
</ul>
</div>
<div>

For example:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.mycook.com
    DocumentRoot /webapps/mycook/public
    &lt;Directory /webapps/mycook/public&gt;
        Allow from all
        Options -MultiViews
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

You may also need to tweak your file/folder permissions. Make sure that the following folders are readable and executable by Apache:

</div>
<div>
<ul>
	<li>this <em>public</em> folder.</li>
	<li>the application’s <em>config</em> folder.</li>
	<li>all parent folders. That is, /webapps/mycook and /webapps must also be readable and executable by Apache.</li>
</ul>
</div>
<div>

Then restart Apache. The application has now been deployed.

</div>
</div>
<div>
<h3 id="deploying_rails_to_sub_uri">3.2. Deploying to a sub URI</h3>
<div>

Suppose that you already have a virtual host:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.phusion.nl
    DocumentRoot /websites/phusion
    &lt;Directory /websites/phusion&gt;
        Allow from all
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

And you want your Ruby on Rails application to be accessible from the URL <em>http://www.phusion.nl/rails</em>.

</div>
<div>

To do this, make a symlink in the virtual host’s document root, and have it point to your Ruby on Rails application’s <em>public</em> folder. For example:

</div>
<div>
<div>
<pre>ln -s /webapps/mycook/public /websites/phusion/rails</pre>
</div>
</div>
<div>

Next, add a <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#RailsBaseURI">RailsBaseURI</a> option to the virtual host configuration, and also make sure that:

</div>
<div>
<ul>
	<li>The Apache per-directory permissions allow access to this folder.</li>
	<li>MultiViews is disabled for this folder.</li>
</ul>
</div>
<div>

For example:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.phusion.nl
    DocumentRoot /websites/phusion
    &lt;Directory /websites/phusion&gt;
        Allow from all
    &lt;/Directory&gt;

    RailsBaseURI /rails                   # &lt;-- These lines have
    &lt;Directory /websites/phusion/rails&gt;   # &lt;-- been added.
        Options -MultiViews               # &lt;--
    &lt;/Directory&gt;                          # &lt;--
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

Then restart Apache. The application has now been deployed.

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>If you’re deploying to a sub-URI then please make sure that your view templates correctly handles references to sub-URI static assets! Otherwise you may find broken links to images, CSS files, JavaScripts, etc. Please read <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#sub_uri_deployment_uri_fix">How to fix broken images/CSS/JavaScript URIs in sub-URI deployments</a> for more information.</td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/tip.png" alt="Tip" /></td>
<td>
<div>

You can deploy multiple Rails applications under a virtual host, by specifying <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#RailsBaseURI">RailsBaseURI</a> multiple times. For example:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ....
    RailsBaseURI /app1
    RailsBaseURI /app2
    RailsBaseURI /app3
&lt;/VirtualHost&gt;</pre>
</div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h3 id="_redeploying_restarting_the_ruby_on_rails_application">3.3. Redeploying (restarting the Ruby on Rails application)</h3>
<div>

Deploying a new version of a Ruby on Rails application is as simple as re-uploading the application files, and restarting the application.

</div>
<div>

There are two ways to restart the application:

</div>
<div>
<ol>
	<li>By restarting Apache.</li>
	<li>By creating or modifying the file <em>tmp/restart.txt</em> in the Rails application’s <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#application_root">root folder</a>. Phusion Passenger will automatically restart the application during the next request.</li>
</ol>
</div>
<div>

For example, to restart our example MyCook application, we type this in the command line:

</div>
<div>
<div>
<pre>touch /webapps/mycook/tmp/restart.txt</pre>
</div>
</div>
<div>

Please note that, unlike earlier versions of Phusion Passenger, <em>restart.txt</em> is not automatically deleted. Phusion Passenger checks whether the timestamp of this file has changed in order to determine whether the application should be restarted.

</div>
</div>
<div>
<h3 id="_migrations">3.4. Migrations</h3>
<div>

Phusion Passenger is not related to Ruby on Rails migrations in any way. To run migrations on your deployment server, please login to your deployment server (e.g. with <em>ssh</em>) and type rake db:migrate RAILS_ENV=production in a shell console, just like one would normally run migrations.

</div>
</div>
<div>
<h3 id="_capistrano_integration">3.5. Capistrano integration</h3>
<div>

See <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#capistrano">Capistrano recipe</a>.

</div>
</div>
</div>
</div>
<div>
<h2 id="_deploying_a_rack_based_ruby_application_including_rails_gt_3">4. Deploying a Rack-based Ruby application (including Rails &gt;= 3)</h2>
<div>
<div>

Phusion Passenger supports arbitrary Ruby web applications that follow the <a href="http://rack.rubyforge.org/">Rack</a> interface.

</div>
<div>

Phusion Passenger assumes that Rack application directories have a certain layout. Suppose that you have a Rack application in <em>/webapps/rackapp</em>. Then that folder must contain at least three entries:

</div>
<div>
<ul>
	<li><em>config.ru</em>, a Rackup file for starting the Rack application. This file must contain the complete logic for initializing the application.</li>
	<li><em>public/</em>, a folder containing public static web assets, like images and stylesheets.</li>
	<li><em>tmp/</em>, used for <em>restart.txt</em> (our application restart mechanism). This will be explained in a following subsection.</li>
</ul>
</div>
<div>

So <em>/webapps/rackapp</em> must, at minimum, look like this:

</div>
<div>
<div>
<pre>/webapps/rackapp
  |
  +-- config.ru
  |
  +-- public/
  |
  +-- tmp/</pre>
</div>
</div>
<div>

Suppose you own the domain <em>www.rackapp.com</em>. You can either deploy your application to the virtual host’s root (i.e. the application will be accessible from the root URL, <em>http://www.rackapp.com/</em>), or in a sub URI (i.e. the application will be accessible from a sub URL, such as <em>http://www.rackapp.com/rackapp</em>).

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>The default RACK_ENV environment in which deployed Rack applications are run, is “production”. You can change this by changing the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#rack_env"><em>RackEnv</em></a> configuration option.</td>
</tr>
</tbody>
</table>
</div>
<div>
<h3 id="_tutorial_example_writing_and_deploying_a_hello_world_rack_application">4.1. Tutorial/example: writing and deploying a Hello World Rack application</h3>
<div>

First we create a Phusion Passenger-compliant Rack directory structure:

</div>
<div>
<div>
<pre>$ mkdir /webapps/rack_example
$ mkdir /webapps/rack_example/public
$ mkdir /webapps/rack_example/tmp</pre>
</div>
</div>
<div>

Next, we write a minimal "hello world" Rack application:

</div>
<div>
<div>
<pre>$ cd /webapps/rack_example
$ some_awesome_editor config.ru
...type in some source code...
$ cat config.ru
app = proc do |env|
    [200, { "Content-Type" =&gt; "text/html" }, ["hello &lt;b&gt;world&lt;/b&gt;"]]
end
run app</pre>
</div>
</div>
<div>

Finally, we deploy it by adding the following configuration options to the Apache configuration file:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.rackexample.com
    DocumentRoot /webapps/rack_example/public
    &lt;Directory /webapps/rack_example/public&gt;
        Allow from all
        Options -MultiViews
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

And we’re done! After an Apache restart, the above Rack application will be available under the URL <em>http://www.rackexample.com/</em>.

</div>
</div>
<div>
<h3 id="_deploying_to_a_virtual_host_8217_s_root_2">4.2. Deploying to a virtual host’s root</h3>
<div>

Add a virtual host entry to your Apache configuration file. Make sure that the following conditions are met:

</div>
<div>
<ul>
	<li>The virtual host’s document root must point to your Rack application’s <em>public</em> folder.</li>
	<li>The Apache per-directory permissions must allow access to this folder.</li>
	<li>MultiViews must be disabled for this folder.</li>
</ul>
</div>
<div>

For example:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.rackapp.com
    DocumentRoot /webapps/rackapp/public
    &lt;Directory /webapps/rackapp/public&gt;
        Allow from all
        Options -MultiViews
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

You may also need to tweak your file/folder permissions. Make sure that the following folders are readable and executable by Apache:

</div>
<div>
<ul>
	<li>this <em>public</em> folder.</li>
	<li>the application’s <em>config</em> folder.</li>
	<li>all parent folders. That is, /webapps/rackapp and /webapps must also be readable and executable by Apache.</li>
</ul>
</div>
<div>

Then restart Apache. The application has now been deployed.

</div>
</div>
<div>
<h3 id="deploying_rack_to_sub_uri">4.3. Deploying to a sub URI</h3>
<div>

Suppose that you already have a virtual host:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.phusion.nl
    DocumentRoot /websites/phusion
    &lt;Directory /websites/phusion&gt;
        Allow from all
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

And you want your Rack application to be accessible from the URL <em>http://www.phusion.nl/rack</em>.

</div>
<div>

To do this, make a symlink in the virtual host’s document root, and have it point to your Rack application’s <em>public</em> folder. For example:

</div>
<div>
<div>
<pre>ln -s /webapps/rackapp/public /websites/phusion/rack</pre>
</div>
</div>
<div>

Next, add a <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#RackBaseURI">RackBaseURI</a> option to the virtual host configuration, and also make sure that:

</div>
<div>
<ul>
	<li>The Apache per-directory permissions allow access to this folder.</li>
	<li>MultiViews is disabled for this folder.</li>
</ul>
</div>
<div>

For example:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.phusion.nl
    DocumentRoot /websites/phusion
    &lt;Directory /websites/phusion&gt;
        Allow from all
    &lt;/Directory&gt;

    RackBaseURI /rails                    # &lt;-- These lines have
    &lt;Directory /websites/phusion/rails&gt;   # &lt;-- been added.
        Options -MultiViews               # &lt;--
    &lt;/Directory&gt;                          # &lt;--
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

Then restart Apache. The application has now been deployed.

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/tip.png" alt="Tip" /></td>
<td>
<div>

You can deploy multiple Rack applications under a virtual host, by specifying <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#RackBaseURI">RackBaseURI</a> multiple times. For example:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ....
    RackBaseURI /app1
    RackBaseURI /app2
    RackBaseURI /app3
&lt;/VirtualHost&gt;</pre>
</div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h3 id="_redeploying_restarting_the_rack_application">4.4. Redeploying (restarting the Rack application)</h3>
<div>

Deploying a new version of a Rack application is as simple as re-uploading the application files, and restarting the application.

</div>
<div>

There are two ways to restart the application:

</div>
<div>
<ol>
	<li>By restarting Apache.</li>
	<li>By creating or modifying the file <em>tmp/restart.txt</em> in the Rack application’s <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#application_root">root folder</a>. Phusion Passenger will automatically restart the application.</li>
</ol>
</div>
<div>

For example, to restart our example application, we type this in the command line:

</div>
<div>
<div>
<pre>touch /webapps/rackapp/tmp/restart.txt</pre>
</div>
</div>
</div>
<div>
<h3 id="_rackup_specifications_for_various_web_frameworks">4.5. Rackup specifications for various web frameworks</h3>
<div>

This subsection shows example <em>config.ru</em> files for various web frameworks.

</div>
<div>
<h4 id="_camping">4.5.1. Camping</h4>
<div>
<div>
<pre>require 'rubygems'
require 'rack'
require 'camping'

##### Begin Camping application
Camping.goes :Blog

...your application code here...
##### End Camping application

run Rack::Adapter::Camping.new(Blog)</pre>
</div>
</div>
<div>

For Camping versions 2.0 and up, using run Blog as the final line will do.

</div>
</div>
<div>
<h4 id="_halcyon">4.5.2. Halcyon</h4>
<div>
<div>
<pre>require 'rubygems'
require 'halcyon'
$LOAD_PATH.unshift(Halcyon.root / 'lib')
Halcyon::Runner.load_config Halcyon.root/'config'/'config.yml'
run Halcyon::Runner.new</pre>
</div>
</div>
</div>
<div>
<h4 id="_mack">4.5.3. Mack</h4>
<div>
<div>
<pre>ENV["MACK_ENV"] = ENV["RACK_ENV"]
load("Rakefile")
require 'rubygems'
require 'mack'
run Mack::Utils::Server.build_app</pre>
</div>
</div>
</div>
<div>
<h4 id="_merb">4.5.4. Merb</h4>
<div>
<div>
<pre>require 'rubygems'
require 'merb-core'

Merb::Config.setup(
  :merb_root   =&gt; ::File.expand_path(::File.dirname(__FILE__)),
  :environment =&gt; ENV['RACK_ENV']
)
Merb.environment = Merb::Config[:environment]
Merb.root = Merb::Config[:merb_root]
Merb::BootLoader.run

run Merb::Rack::Application.new</pre>
</div>
</div>
</div>
<div>
<h4 id="_ramaze">4.5.5. Ramaze</h4>
<div>
<div>
<pre>require "rubygems"
require "ramaze"
Ramaze.trait[:essentials].delete Ramaze::Adapter
require "start"
Ramaze.start!
run Ramaze::Adapter::Base</pre>
</div>
</div>
</div>
<div>
<h4 id="_sinatra">4.5.6. Sinatra</h4>
<div>
<div>
<pre>require 'rubygems'
require 'sinatra'
require 'app.rb'

run Sinatra::Application</pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div>
<h2 id="_configuring_phusion_passenger">5. Configuring Phusion Passenger</h2>
<div>
<div>

After installation, Phusion Passenger does not need any further configurations. Nevertheless, the system administrator may be interested in changing Phusion Passenger’s behavior. Phusion Passenger’s Apache module supports the following configuration options:

</div>
<div>
<h3 id="_passengerroot_lt_directory_gt">5.1. PassengerRoot &lt;directory&gt;</h3>
<div>

The location to the Phusion Passenger root directory. This configuration option is essential to Phusion Passenger, and allows Phusion Passenger to locate its own data files. The correct value is given by the installer.

</div>
<div>

If you’ve moved Phusion Passenger to a different directory then you need to update this option as well. Please read <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#moving_phusion_passenger">Moving Phusion Passenger to a different directory</a> for more information.

</div>
<div>

This required option may only occur once, in the global server configuration.

</div>
</div>
<div>
<h3 id="PassengerRuby">5.2. PassengerRuby &lt;filename&gt;</h3>
<div>

This option allows one to specify the Ruby interpreter to use.

</div>
<div>

This option may only occur once, in the global server configuration. The default is <em>ruby</em>.

</div>
</div>
<div>
<h3 id="PassengerAppRoot">5.3. PassengerAppRoot &lt;path/to/root&gt;</h3>
<div>

By default, Phusion Passenger assumes that the application’s root directory is the parent directory of the <em>public</em> directory. This option allows one to specify the application’s root independently from the DocumentRoot, which is useful if the <em>public</em> directory lives in a non-standard place.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
	<li>In <em>.htaccess</em>, if AllowOverride Options is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once.

</div>
<div>

Example:

</div>
<div>
<div>
<pre>&lt;VirtualHost test.host&gt;
    DocumentRoot /var/rails/zena/sites/example.com/public
    PassengerAppRoot /var/rails/zena   # &lt;-- normally Phusion Passenger would
                                       #     have assumed that the application
                                       #     root is "/var/rails/zena/sites/example.com"
&lt;/VirtualHost&gt;</pre>
</div>
</div>
</div>
<div>
<h3 id="PassengerSpawnMethod">5.4. PassengerSpawnMethod &lt;string&gt;</h3>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/tip.png" alt="Tip" /></td>
<td>
<div>"What spawn method should I use?"</div>
<div>

This subsection attempts to describe spawn methods, but it’s okay if you don’t (want to) understand it, as it’s mostly a technical detail. You can basically follow this rule of thumb:

</div>
<div>
<div>
<div>

If your application works on Mongrel, but not on Phusion Passenger, then set PassengerSpawnMethod to <em>conservative</em>. Otherwise, leave it at <em>smart-lv2</em> (the default).

</div>
</div>
</div>
<div>

However, we do recommend you to try to understand it. The <em>smart</em> and <em>smart-lv2</em> spawn methods bring many benefits.

</div></td>
</tr>
</tbody>
</table>
</div>
<div>

Internally, Phusion Passenger spawns multiple Ruby application processes in order to handle requests. But there are multiple ways with which processes can be spawned, each having its own set of pros and cons. Supported spawn methods are:

</div>
<div><dl><dt><em>smart</em></dt><dd>When this spawn method is used, Phusion Passenger will attempt to cache any framework code (e.g. Ruby on Rails itself) and application code for a limited period of time. Please read <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#spawning_methods_explained">Spawning methods explained</a> for a more detailed explanation of what smart spawning exactly does.
<div>

<strong>Pros:</strong> This can significantly decrease spawn time (by as much as 90%). And, when Ruby Enterprise Edition is used, <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#reducing_memory_usage">memory usage can be reduced by 33% on average</a>.

</div>
<div>

<strong>Cons:</strong> Some applications and libraries are not compatible with smart spawning. If that’s the case for your application, then you should use <em>conservative</em> as spawning method. Please read <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#spawning_methods_explained">Spawning methods explained</a> for possible compatibility issues.

</div>
</dd><dt><em>smart-lv2</em></dt><dd>This spawning method is similar to <em>smart</em> but it skips the framework spawner and uses the application spawner directly. This means the framework code is not cached between multiple applications, although it is still cached within instances of the same application. Please read <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#spawning_methods_explained">Spawning methods explained</a> for a more detailed explanation of what smart-lv2 spawning exactly does.
<div>

<strong>Pros:</strong> It is compatible with a larger number of applications when compared to the <em>smart</em> method, and still performs some caching.

</div>
<div>

<strong>Cons:</strong> It is slower than smart spawning if you have many applications which use the same framework version. It is therefore advised that shared hosts use the <em>smart</em> method instead.

</div>
</dd><dt><em>conservative</em></dt><dd>This spawning method is similar to the one used in Mongrel Cluster. It does not perform any code caching at all. Please read <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#spawning_methods_explained">Spawning methods explained</a> for a more detailed explanation of what conservative spawning exactly does.
<div>

<strong>Pros:</strong> Conservative spawning is guaranteed to be compatible with all applications and libraries.

</div>
<div>

<strong>Cons:</strong> Much slower than smart spawning. Every spawn action will be equally slow, though no slower than the startup time of a single server in Mongrel Cluster. Conservative spawning will also render <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#reducing_memory_usage">Ruby Enterprise Edition’s memory reduction technology</a> useless.

</div>
</dd></dl></div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>smart-lv2</em>.

</div>
</div>
<div>
<h3 id="PassengerUseGlobalQueue">5.5. PassengerUseGlobalQueue &lt;on|off&gt;</h3>
<div>

Turns the use of global queuing on or off.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>on</em>.

</div>
<div>

<em>This feature is sponsored by <a href="http://www.37signals.com/">37signals</a>.</em>

</div>
<div>
<div>What does this option do?</div>
Recall that Phusion Passenger spawns multiple backend processes (e.g. multiple Ruby on Rails processes), each which processes HTTP requests serially. One of Phusion Passenger’s jobs is to forward HTTP requests to a suitable backend process. A backend process may take an arbitrary amount of time to process a specific HTTP request. If the websites are (temporarily) under high load, and the backend processes cannot process the requests fast enough, then some requests may have to be queued.

</div>
<div>

If global queuing is turned off, then Phusion Passenger will use <em>fair load balancing</em>. This means that each backend process will have its own private queue. Phusion Passenger will forward an HTTP request to the backend process that has the least amount of requests in its queue.

</div>
<div>

If global queuing is turned on, then Phusion Passenger will use a global queue that’s shared between all backend processes. If an HTTP request comes in, and all the backend processes are still busy, then Phusion Passenger will wait until at least one backend process is done, and will then forward the request to that process.

</div>
<div>
<div>When to turn on global queuing?</div>
You should turn on global queuing if one of your web applications may have long-running requests.

</div>
<div>

For example suppose that:

</div>
<div>
<ul>
	<li>global queuing is turned off.</li>
	<li>we’re currently in a state where all backend processes have 3 requests in their queue, except for a single backend process, which has 1 request in its queue.</li>
</ul>
</div>
<div>

The situation looks like this:

</div>
<div>
<div>
<pre>Backend process A:  [*     ]  (1 request in queue)
Backend process B:  [***   ]  (3 requests in queue)
Backend process C:  [***   ]  (3 requests in queue)
Backend process D:  [***   ]  (3 requests in queue)</pre>
</div>
</div>
<div>

Each process is currently serving short-running requests.

</div>
<div>

Phusion Passenger will forward the next request to backend process A. A will now have 2 items in its queue. We’ll mark this new request with an X:

</div>
<div>
<div>
<pre>Backend process A:  [*X    ]  (2 request in queue)
Backend process B:  [***   ]  (3 requests in queue)
Backend process C:  [***   ]  (3 requests in queue)
Backend process D:  [***   ]  (3 requests in queue)</pre>
</div>
</div>
<div>

Assuming that B, C and D still aren’t done with their current request, the next HTTP request - let’s call this Y - will be forwarded to backend process A as well, because it has the least number of items in its queue:

</div>
<div>
<div>
<pre>Backend process A:  [*XY   ]  (3 requests in queue)
Backend process B:  [***   ]  (3 requests in queue)
Backend process C:  [***   ]  (3 requests in queue)
Backend process D:  [***   ]  (3 requests in queue)</pre>
</div>
</div>
<div>

But if request X happens to be a long-running request that needs 60 seconds to complete, then we’ll have a problem. Y won’t be processed for at least 60 seconds. It would have been a better idea if Y was forward to processes B, C or D instead, because they only have short-living requests in their queues.

</div>
<div>

This problem will be avoided entirely if you turn global queuing on. With global queuing, all backend processes will share the same queue. The first backend process that becomes available will take from the queue, and so this “queuing-behind-long-running-request” problem will never occur.

</div>
</div>
<div>
<h3 id="_passengerenabled_lt_on_off_gt">5.6. PassengerEnabled &lt;on|off&gt;</h3>
<div>

You can set this option to <em>off</em> to completely disable Phusion Passenger for a certain location. This is useful if, for example, you want to integrate a PHP application into the same virtual host as a Rails application.

</div>
<div>

Suppose that you have a Rails application in <em>/apps/foo</em>. Suppose that you’ve dropped Wordpress — a blogging application written in PHP — in <em>/apps/foo/public/wordpress</em>. You can then configure Phusion Passenger as follows:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.foo.com
    DocumentRoot /apps/foo/public
    &lt;Directory /apps/foo/public/wordpress&gt;
        PassengerEnabled off
        AllowOverride all      # &lt;-- Makes Wordpress's .htaccess file work.
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

This way, Phusion Passenger will not interfere with Wordpress.

</div>
<div>

<em>PassengerEnabled</em> may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
	<li>In <em>.htaccess</em>.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>on</em>.

</div>
</div>
<div>
<h3 id="PassengerTempDir">5.7. PassengerTempDir &lt;directory&gt;</h3>
<div>

Specifies the directory that Phusion Passenger should use for storing temporary files. This includes things such as Unix socket files, buffered file uploads (see also <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerUploadBufferDir">PassengerUploadBufferDir</a>), etc.

</div>
<div>

This option may be specified once, in the global server configuration. The default temp directory that Phusion Passenger uses is <em>/tmp</em>.

</div>
<div>

This option is especially useful if Apache is not allowed to write to /tmp (which is the case on some systems with strict SELinux policies) or if the partition that /tmp lives on doesn’t have enough disk space.

</div>
<div>
<div>Command line tools</div>
Some Phusion Passenger command line administration tools, such as passenger-status, must know what Phusion Passenger’s temp directory is in order to function properly. You can pass the directory through the PASSENGER_TMPDIR environment variable, or the TMPDIR environment variable (the former will be used if both are specified).

</div>
<div>

For example, if you set <em>PassengerTempDir</em> to <em>/my_temp_dir</em>, then invoke passenger-status after you’ve set the PASSENGER_TMPDIR or TMPDIR environment variable, like this:

</div>
<div>
<div>
<pre>export PASSENGER_TMPDIR=/my_temp-dir
sudo -E passenger-status
# The -E option tells 'sudo' to preserve environment variables.</pre>
</div>
</div>
</div>
<div>
<h3 id="PassengerUploadBufferDir">5.8. PassengerUploadBufferDir &lt;directory&gt;</h3>
<div>

Phusion Passenger buffers large file uploads to disk in order prevent slow file uploads from blocking web applications. By default, a subdirectory in the system’s temporary files directory (or a subdirectory in the directory specified in <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerTempDir">PassengerTempDir</a>, if set) is automatically created for storing these buffered file uploads.

</div>
<div>

This configuration directive allows you to specify a different directory for storing buffered file uploads. If you’ve specified such a directory (as opposed to using Phusion Passenger’s default) then you <strong>must</strong> ensure that this directory exists.

</div>
<div>

This configuration directive is also useful if you’re using apache2-mpm-itk. The buffered file upload directory that Phusion Passenger creates by default has very strict permissions: it can only be accessed by the Apache worker processes. However, Phusion Passenger assumes that all Apache worker processes are running as the same user. apache2-mpm-itk breaks this assumption by running multiple Apache worker processes as different users. So if you’re using apace2-mpm-itk, you should set this option to a directory that is writable by all Apache worker processes, such as <em>/tmp</em>.

</div>
<div>

You may specify <em>PassengerUploadBufferDir</em> in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
	<li>In <em>.htaccess</em>, if AllowOverrides Options is enabled.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once.

</div>
</div>
<div>
<h3 id="_passengerrestartdir_lt_directory_gt">5.9. PassengerRestartDir &lt;directory&gt;</h3>
<div>

As described in the deployment chapters of this document, Phusion Passenger checks the file <em>tmp/restart.txt</em> in the applications' <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#application_root">root directory</a> for restarting applications. Sometimes it may be desirable for Phusion Passenger to look in a different directory instead, for example for security reasons (see below). This option allows you to customize the directory in which <em>restart.txt</em> is searched for.

</div>
<div>

You may specify <em>PassengerRestartDir</em> in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
	<li>In <em>.htaccess</em>, if AllowOverrides Options is enabled.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once.

</div>
<div>

You can either set it to an absolute directory, or to a directory relative to the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#application_root">application root</a>. Examples:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.foo.com
    # Phusion Passenger will check for /apps/foo/public/tmp/restart.txt
    DocumentRoot /apps/foo/public
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
    ServerName www.bar.com
    DocumentRoot /apps/bar/public
    # An absolute filename is given; Phusion Passenger will
    # check for /restart_files/bar/restart.txt
    PassengerRestartDir /restart_files/bar
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
    ServerName www.baz.com
    DocumentRoot /apps/baz/public
    # A relative filename is given; Phusion Passenger will
    # check for /apps/baz/restart_files/restart.txt
    #
    # Note that this directory is relative to the APPLICATION ROOT, *not*
    # the value of DocumentRoot!
    PassengerRestartDir restart_files
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>
<div>What are the security reasons for wanting to customize PassengerRestartDir?</div>
Touching restart.txt will cause Phusion Passenger to restart the application. So anybody who can touch restart.txt can effectively cause a Denial-of-Service attack by touching restart.txt over and over. If your web server or one of your web applications has the permission to touch restart.txt, and one of them has a security flaw which allows an attacker to touch restart.txt, then that will allow the attacker to cause a Denial-of-Service.

</div>
<div>

You can prevent this from happening by pointing PassengerRestartDir to a directory that’s readable by Apache, but only writable by administrators.

</div>
</div>
<div>
<h3 id="PassengerBufferResponse">5.10. PassengerBufferResponse &lt;on|off&gt;</h3>
<div>

When turned on, application-generated responses are buffered in memory. By buffering responses, protection is provided against slow HTTP clients that can not read your response immediately.

</div>
<div>

For example, consider an HTTP client that’s on a dial-up modem link, and your application instance generates a 2 MB response. If response buffering is turned off then your application instance will be blocked until the entire 2 MB has been sent out to the HTTP client. This disallows your application instance to do any useful work in the mean time. By enabling response buffering, Phusion Passenger will read the application response as quickly as possible and will take care of slow clients.

</div>
<div>

However, keep in mind that enabling this option will make streaming responses impossible. Consider for example this piece of Rails code:

</div>
<div>
<div>
<pre>render :text =&gt; lambda { |response, output|
    10.times do |i|
        output.write("entry #{i}\n")
        output.flush
        sleep 1
    end
}</pre>
</div>
</div>
<div>

…or this piece of Rack code:

</div>
<div>
<div>
<pre>class Response
    def each
        10.times do |i|
            yield("entry #{i}\n")
            sleep 1
        end
    end
end

app = lambda do |env|
    [200, { "Content-Type" =&gt; "text/plain" }, Response.new]
end</pre>
</div>
</div>
<div>

When response buffering is turned on, Phusion Passenger will wait until the application is done sending the entire response before forwarding it to the client. The client will not receive anything for 10 seconds, after which it receives the entire response at once. When response buffering is turned off, it works as expected: the client receives an "entry X" message every second for 10 seconds.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
	<li>In <em>.htaccess</em>.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>on</em>.

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>
<div>

The <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerBufferResponse">PassengerBufferResponse</a> directive should be turned off if responses can be huge. Because entire responses are buffered in memory when turned on.

</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h3 id="_security_options">5.11. Security options</h3>
<div>
<h4 id="PassengerUserSwitching">5.11.1. PassengerUserSwitching &lt;on|off&gt;</h4>
<div>

Whether to enable <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#user_switching">user switching support</a>.

</div>
<div>

This option may only occur once, in the global server configuration. The default value is <em>on</em>.

</div>
</div>
<div>
<h4 id="_passengeruser_lt_username_gt">5.11.2. PassengerUser &lt;username&gt;</h4>
<div>

If <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#user_switching">user switching support</a> is enabled, then Phusion Passenger will by default run the web application as the owner of the file <em>config/environment.rb</em> (for Rails apps) or <em>config.ru</em> (for Rack apps). This option allows you to override that behavior and explicitly set a user to run the web application as, regardless of the ownership of <em>environment.rb</em>/<em>config.ru</em>.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once.

</div>
</div>
<div>
<h4 id="_passengergroup_lt_group_name_gt">5.11.3. PassengerGroup &lt;group name&gt;</h4>
<div>

If <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#user_switching">user switching support</a> is enabled, then Phusion Passenger will by default run the web application as the primary group of the owner of the file <em>config/environment.rb</em> (for Rails apps) or <em>config.ru</em> (for Rack apps). This option allows you to override that behavior and explicitly set a group to run the web application as, regardless of the ownership of <em>environment.rb</em>/<em>config.ru</em>.

</div>
<div>

<em>&lt;group name&gt;</em> may also be set to the special value <em>!STARTUP_FILE!</em>, in which case the web application’s group will be set to <em>environment.rb</em>/<em>config.ru</em>'s group.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once.

</div>
</div>
<div>
<h4 id="PassengerDefaultUser">5.11.4. PassengerDefaultUser &lt;username&gt;</h4>
<div>

Phusion Passenger enables <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#user_switching">user switching support</a> by default. This configuration option allows one to specify the user that applications must run as, if user switching fails or is disabled.

</div>
<div>

This option may only occur once, in the global server configuration. The default value is <em>nobody</em>.

</div>
</div>
<div>
<h4 id="PassengerDefaultGroup">5.11.5. PassengerDefaultGroup &lt;group name&gt;</h4>
<div>

Phusion Passenger enables <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#user_switching">user switching support</a> by default. This configuration option allows one to specify the group that applications must run as, if user switching fails or is disabled.

</div>
<div>

This option may only occur once, in the global server configuration. The default value is the primary group of the user specifified by <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerDefaultUser">PassengerDefaultUser</a>.

</div>
</div>
<div>
<h4 id="_passengerfriendlyerrorpages_lt_on_off_gt">5.11.6. PassengerFriendlyErrorPages &lt;on|off&gt;</h4>
<div>

Phusion Passenger can display friendly error pages whenever an application fails to start. This friendly error page presents the startup error message, some suggestions for solving the problem, and a backtrace. This feature is very useful during application development and useful for less experienced system administrators, but the page might reveal potentially sensitive information, depending on the application. Experienced system administrators who are using Phusion Passenger on serious production servers should consider turning this feature off.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
	<li>In <em>.htaccess</em>, if AllowOverride Options is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>on</em>.

</div>
</div>
</div>
<div>
<h3 id="_resource_control_and_optimization_options">5.12. Resource control and optimization options</h3>
<div>
<h4 id="_passengermaxpoolsize_lt_integer_gt">5.12.1. PassengerMaxPoolSize &lt;integer&gt;</h4>
<div>

The maximum number of Ruby on Rails or Rack application instances that may be simultaneously active. A larger number results in higher memory usage, but improved ability to handle concurrent HTTP clients.

</div>
<div>

The optimal value depends on your system’s hardware and the server’s average load. You should experiment with different values. But generally speaking, the value should be at least equal to the number of CPUs (or CPU cores) that you have. If your system has 2 GB of RAM, then we recommend a value of <em>30</em>. If your system is a Virtual Private Server (VPS) and has about 256 MB RAM, and is also running other services such as MySQL, then we recommend a value of <em>2</em>.

</div>
<div>

If you find that your server is unable to handle the load on your Rails/Rack websites (i.e. running out of memory) then you should lower this value. (Though if your sites are really that popular, then you should strongly consider upgrading your hardware or getting more servers.)

</div>
<div>

This option may only occur once, in the global server configuration. The default value is <em>6</em>.

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/tip.png" alt="Tip" /></td>
<td>We strongly recommend you to <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#reducing_memory_usage">use Ruby Enterprise Edition</a>. This allows you to reduce the memory usage of your Ruby on Rails applications by about 33%. And it’s not hard to install.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h4 id="PassengerMinInstances">5.12.2. PassengerMinInstances &lt;integer&gt;</h4>
<div>

This specifies the minimum number of application instances that must be kept around whenever Phusion Passenger cleans up idle instances. You should set this option to a non-zero value if you want to avoid potentially long startup times after a website has been idle for an extended period.

</div>
<div>

Please note that this option does <strong>not</strong> pre-start application instances during Apache startup. It just makes sure that when the application is first accessed:

</div>
<div>
<ol>
	<li>at least the given number of instances will be spawned.</li>
	<li>the given number of processes will be kept around even when instances are being idle cleaned (see <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerPoolIdleTime">PassengerPoolIdleTime</a>).</li>
</ol>
</div>
<div>

If you want to pre-start application instances during Apache startup, then you should use the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerPreStart">PassengerPreStart</a> directive, possibly in combination with <em>PassengerMinInstances</em>. This behavior might seem counter-intuitive at first sight, but <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerPreStart">PassengerPreStart</a> explains the rationale behind it.

</div>
<div>

For example, suppose that you have the following configuration:

</div>
<div>
<div>
<pre>PassengerMaxPoolSize 15
PassengerPoolIdleTime 10

&lt;VirtualHost *:80&gt;
    ServerName foobar.com
    DocumentRoot /webapps/foobar/public
    PassengerMinInstances 3
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

When you start Apache, there are 0 application instances for <em>foobar.com</em>. Things will stay that way until someone visits <em>foobar.com</em>. Suppose that there is only 1 visitor. 1 application instance will be started immediately to serve the visitor, while 2 will be spawned in the background. After 10 seconds, when the idle timeout has been reached, these 3 application instances will not be cleaned up.

</div>
<div>

Now suppose that there’s a sudden spike of traffic, and 100 users visit <em>foobar.com</em> simultanously. Phusion Passenger will start 12 more application instances. After the idle timeout of 10 seconds have passed, Phusion Passenger will clean up 12 application instances, keeping 3 instances around.

</div>
<div>

The PassengerMinInstances option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
	<li>In <em>.htaccess</em>, if AllowOverride Limits is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>1</em>.

</div>
</div>
<div>
<h4 id="_passengermaxinstancesperapp_lt_integer_gt">5.12.3. PassengerMaxInstancesPerApp &lt;integer&gt;</h4>
<div>

The maximum number of application instances that may be simultaneously active for a single application. This helps to make sure that a single application will not occupy all available slots in the application pool.

</div>
<div>

This value must be less than <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerMaxPoolSize">PassengerMaxPoolSize</a>. A value of 0 means that there is no limit placed on the number of instances a single application may use, i.e. only the global limit of <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerMaxPoolSize">PassengerMaxPoolSize</a> will be enforced.

</div>
<div>

This option may only occur once, in the global server configuration. The default value is <em>0</em>.

</div>
</div>
<div>
<h4 id="PassengerPoolIdleTime">5.12.4. PassengerPoolIdleTime &lt;integer&gt;</h4>
<div>

The maximum number of seconds that an application instance may be idle. That is, if an application instance hasn’t received any traffic after the given number of seconds, then it will be shutdown in order to conserve memory.

</div>
<div>

Decreasing this value means that applications will have to be spawned more often. Since spawning is a relatively slow operation, some visitors may notice a small delay when they visit your Rails/Rack website. However, it will also free up resources used by applications more quickly.

</div>
<div>

The optimal value depends on the average time that a visitor spends on a single Rails/Rack web page. We recommend a value of 2 * x, where x is the average number of seconds that a visitor spends on a single Rails/Rack web page. But your mileage may vary.

</div>
<div>

When this value is set to <em>0</em>, application instances will not be shutdown unless it’s really necessary, i.e. when Phusion Passenger is out of worker processes for a given application and one of the inactive application instances needs to make place for another application instance. Setting the value to 0 is recommended if you’re on a non-shared host that’s only running a few applications, each which must be available at all times.

</div>
<div>

This option may only occur once, in the global server configuration. The default value is <em>300</em>.

</div>
</div>
<div>
<h4 id="PassengerMaxRequests">5.12.5. PassengerMaxRequests &lt;integer&gt;</h4>
<div>

The maximum number of requests an application instance will process. After serving that many requests, the application instance will be shut down and Phusion Passenger will restart it. A value of 0 means that there is no maximum: an application instance will thus be shut down when its idle timeout has been reached.

</div>
<div>

This option is useful if your application is leaking memory. By shutting it down after a certain number of requests, all of its memory is guaranteed to be freed by the operating system.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
	<li>In <em>.htaccess</em>, if AllowOverride Limits is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>0</em>.

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/caution.png" alt="Caution" /></td>
<td>
<div>

The <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerMaxRequests">PassengerMaxRequests</a> directive should be considered as a workaround for misbehaving applications. It is advised that you fix the problem in your application rather than relying on these directives as a measure to avoid memory leaks.

</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h4 id="_passengerstatthrottlerate_lt_integer_gt">5.12.6. PassengerStatThrottleRate &lt;integer&gt;</h4>
<div>

By default, Phusion Passenger performs several filesystem checks (or, in programmers jargon, <em>stat() calls</em>) each time a request is processed:

</div>
<div>
<ul>
	<li>It checks whether <em>config/environment.rb</em>, <em>config.ru</em> or <em>passenger_wsgi.py</em> is present, in order to autodetect Rails, Rack and WSGI applications.</li>
	<li>It checks whether <em>restart.txt</em> has changed or whether <em>always_restart.txt</em> exists, in order to determine whether the application should be restarted.</li>
</ul>
</div>
<div>

On some systems where disk I/O is expensive, e.g. systems where the harddisk is already being heavily loaded, or systems where applications are stored on NFS shares, these filesystem checks can incur a lot of overhead.

</div>
<div>

You can decrease or almost entirely eliminate this overhead by setting <em>PassengerStatThrottleRate</em>. Setting this option to a value of <em>x</em> means that the above list of filesystem checks will be performed at most once every <em>x</em> seconds. Setting it to a value of <em>0</em> means that no throttling will take place, or in other words, that the above list of filesystem checks will be performed on every request.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
	<li>In <em>.htaccess</em>, if AllowOverride Limits is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>0</em>.

</div>
</div>
<div>
<h4 id="PassengerPreStart">5.12.7. PassengerPreStart &lt;url&gt;</h4>
<div>

By default, Phusion Passenger does not start any application instances until said web application is first accessed. The result is that the first visitor of said web application might experience a small delay as Phusion Passenger is starting the web application on demand. If that is undesirable, then this directive can be used to pre-started application instances during Apache startup.

</div>
<div>

A few things to be careful of:

</div>
<div>
<ul>
	<li>This directive accepts the <strong>URL</strong> of the web application you want to pre-start, not a on/off value! This might seem a bit weird, but read on for rationale. As for the specifics of the URL:
<div>
<ul>
	<li>The domain part of the URL must be equal to the value of the <em>ServerName</em> directive of the VirtualHost block that defines the web application.</li>
	<li>Unless the web application is deployed on port 80, the URL should contain the web application’s port number too.</li>
	<li>The path part of the URL must point to some URI that the web application handles.</li>
</ul>
</div></li>
	<li>You will probably want to combine this option with <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerMinInstances">PassengerMinInstances</a> because application instances started with <em>PassengerPreStart</em> are subject to the usual idle timeout rules. See the example below for an explanation.</li>
</ul>
</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
</ul>
</div>
<div>

In each place, it may be specified any number of times.

</div>
<div>
<h5 id="_example_1_basic_usage">Example 1: basic usage</h5>
<div>

Suppose that you have the following web applications.

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
   ServerName foo.com
   DocumentRoot /webapps/foo/public
&lt;/VirtualHost&gt;

&lt;VirtualHost *:3500&gt;
   ServerName bar.com
   DocumentRoot /webapps/bar/public
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

You want both of them to be pre-started during Apache startup. The URL for foo.com is <em>http://foo.com/</em> (or, equivalently, <em>http://foo.com:80/</em>) and the URL for bar.com is <em>http://bar.com:3500/</em>. So we add two PassengerPreStart directives, like this:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
   ServerName foo.com
   DocumentRoot /webapps/foo/public
&lt;/VirtualHost&gt;

&lt;VirtualHost *:3500&gt;
   ServerName bar.com
   DocumentRoot /webapps/bar/public
&lt;/VirtualHost&gt;

PassengerPreStart http://foo.com/           # &lt;--- added
PassengerPreStart http://bar.com:3500/      # &lt;--- added</pre>
</div>
</div>
</div>
<div>
<h5 id="_example_2_pre_starting_apps_that_are_deployed_in_sub_uris">Example 2: pre-starting apps that are deployed in sub-URIs</h5>
<div>

Suppose that you have a web application deployed in a sub-URI <em>/store</em>, like this:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
   ServerName myblog.com
   DocumentRoot /webapps/wordpress
   RailsBaseURI /store
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

Then specify the domain name of its containing virtual host followed by the sub-URI, like this:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
   ServerName myblog.com
   DocumentRoot /webapps/wordpress
   RailsBaseURI /store
&lt;/VirtualHost&gt;

PassengerPreStart http://myblog.com/store    # &lt;----- added</pre>
</div>
</div>
<div>

The sub-URI <strong>must</strong> be included; if you don’t then the directive will have no effect. The following example is wrong and won’t pre-start the store web application:

</div>
<div>
<div>
<pre>PassengerPreStart http://myblog.com/    # &lt;----- WRONG! Missing "/store" part.</pre>
</div>
</div>
</div>
<div>
<h5 id="_example_3_combining_with_passengermininstances">Example 3: combining with PassengerMinInstances</h5>
<div>

Application instances started with PassengerPreStart are also subject to the idle timeout rules as specified by <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerPoolIdleTime">PassengerPoolIdleTime</a>! That means that by default, the pre-started application instances for foo.com are bar.com are shut down after a few minutes of inactivity. If you don’t want that to happen, then you should combine PassengerPreStart with <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerMinInstances">PassengerMinInstances</a>, like this:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
   ServerName foo.com
   DocumentRoot /webapps/foo/public
   PassengerMinInstances 1      # &lt;--- added
&lt;/VirtualHost&gt;

&lt;VirtualHost *:3500&gt;
   ServerName bar.com
   DocumentRoot /webapps/bar/public
   PassengerMinInstances 1      # &lt;--- added
&lt;/VirtualHost&gt;

PassengerPreStart http://foo.com/
PassengerPreStart http://bar.com:3500/</pre>
</div>
</div>
</div>
<div>
<h5 id="_so_why_a_url_why_not_just_an_on_off_flag">So why a URL? Why not just an on/off flag?</h5>
<div>

A directive that accepts a simple on/off flag is definitely more intuitive, but due technical difficulties w.r.t. the way Apache works, it’s very hard to implement it like that:

</div>
<div>
<ul>
	<li>It is very hard to obtain a full list of web applications defined in the Apache configuration file(s). In other words, it’s hard for Phusion Passenger to know which web applications are deployed on Apache until a web application is first accessed, and without such a list Phusion Passenger wouldn’t know which web applications to pre-start. It’s probably not completely impossible to obtain such a list, but this brings us to the following point;</li>
	<li>Users expect things like <em>mod_env</em> to work even in combination with Phusion Passenger. For example some people put “SetEnv PATH=….” in their virtual host block and they expect the web application to pick that environment variable up when it’s started. Information like this is stored in module-specific locations that Phusion Passenger cannot access directly. Even if the previous bullet point is solved and we can obtain a list of web applications, we cannot start the application with the correct mod_env information. mod_env is just one such example; there are probably many other Apache modules, all of which people expect to work, but we cannot answer to those expectations if PassengerPreStart is implemented as a simple on/off flag.</li>
</ul>
</div>
<div>

So as a compromise, we made it accept a URL. This is easier to implement for us and altough it looks weird, it behaves consistently w.r.t. cooperation with other Apache modules.

</div>
</div>
<div>
<h5 id="_what_does_phusion_passenger_do_with_the_url">What does Phusion Passenger do with the URL?</h5>
<div>

During Apache startup, Phusion Passenger will send a dummy HEAD request to the given URL and discard the result. In other words, Phusion Passenger simulates a web access at the given URL. However this simulated request is always sent to localhost, <strong>not</strong> to the IP that the domain resolves to. Suppose that bar.com in example 1 resolves to 209.85.227.99; Phusion Passenger will send the following HTTP request to 127.0.0.1 port 3500 (and not to 209.85.227.99 port 3500):

</div>
<div>
<div>
<pre>HEAD / HTTP/1.1
Host: bar.com
Connection: close</pre>
</div>
</div>
<div>

Similarly, for example 2, Phusion Passenger will send the following HTTP request to 127.0.0.1 port 80:

</div>
<div>
<div>
<pre>HEAD /store HTTP/1.1
Host: myblog.com
Connection: close</pre>
</div>
</div>
</div>
<div>
<h5 id="_do_i_need_to_edit_etc_hosts_and_point_the_domain_in_the_url_to_127_0_0_1">Do I need to edit /etc/hosts and point the domain in the URL to 127.0.0.1?</h5>
<div>

No. See previous subsection.

</div>
</div>
<div>
<h5 id="_my_web_application_consists_of_multiple_web_servers_what_url_do_i_need_to_specify_and_in_which_web_server_8217_s_apache_config_file">My web application consists of multiple web servers. What URL do I need to specify, and in which web server’s Apache config file?</h5>
<div>

Put the web application’s virtual host’s ServerName value and the virtual host’s port in the URL, and put PassengerPreStart on all machines that you want to pre-start the web application on. The simulated web request is always sent to 127.0.0.1, with the domain name in the URL as value for the <em>Host</em> HTTP header, so you don’t need to worry about the request ending up at a different web server in the cluster.

</div>
</div>
<div>
<h5 id="_does_passengerprestart_support_https_urls">Does PassengerPreStart support https:// URLs?</h5>
<div>

Yes. And it does not perform any certificate validation.

</div>
</div>
</div>
<div>
<h4 id="PassengerHighPerformance">5.12.8. PassengerHighPerformance &lt;on|off&gt;</h4>
<div>

By default, Phusion Passenger is compatible with mod_rewrite and most other Apache modules. However, a lot of effort is required in order to be compatible. If you turn <em>PassengerHighPerformance</em> to <em>on</em>, then Phusion Passenger will be a little faster, in return for reduced compatibility with other Apache modules.

</div>
<div>

In places where <em>PassengerHighPerformance</em> is turned on, mod_rewrite rules will likely not work. mod_autoindex (the module which displays a directory index) will also not work. Other Apache modules may or may not work, depending on what they exactly do. We recommend you to find out how other modules behave in high performance mode via testing.

</div>
<div>

This option is <strong>not</strong> an all-or-nothing global option: you can enable high performance mode for certain virtual hosts or certain URLs only. The <em>PassengerHighPerformance</em> option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
	<li>In <em>.htaccess</em>.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>off</em>, so high performance mode is disabled by default, and you have to explicitly enable it.

</div>
<div>
<div>When to enable high performance mode?</div>
If you do not use mod_rewrite or other Apache modules then it might make sense to enable high performance mode.

</div>
<div>

It’s likely that some of your applications depend on mod_rewrite or other Apache modules, while some do not. In that case you can enable high performance for only those applications that don’t use other Apache modules. For example:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.foo.com
    DocumentRoot /apps/foo/public
    .... mod_rewrite rules or options for other Apache modules here ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
    ServerName www.bar.com
    DocumentRoot /apps/bar/public
    PassengerHighPerformance on
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

In the above example, high performance mode is only enabled for www.bar.com. It is disabled for everything else.

</div>
<div>

If your application generally depends on mod_rewrite or other Apache modules, but a certain URL that’s accessed often doesn’t depend on those other modules, then you can enable high performance mode for a certain URL only. For example:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.foo.com
    DocumentRoot /apps/foo/public
    .... mod_rewrite rules or options for other Apache modules here ...

    &lt;Location /chatroom/ajax_update_poll&gt;
        PassengerHighPerformance on
    &lt;/Location&gt;
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

This enables high performance mode for <a href="http://www.foo.com/chatroom/ajax_update_poll">http://www.foo.com/chatroom/ajax_update_poll</a> only.

</div>
</div>
</div>
<div>
<h3 id="_compatibility_options">5.13. Compatibility options</h3>
<div>
<h4 id="PassengerResolveSymlinksInDocumentRoot">5.13.1. PassengerResolveSymlinksInDocumentRoot &lt;on|off&gt;</h4>
<div>

Configures whether Phusion Passenger should resolve symlinks in the document root. Please refer to <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#application_detection">How Phusion Passenger detects whether a virtual host is a web application</a> for more information.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
	<li>In <em>.htaccess</em>, if AllowOverride Options is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. It is off by default.

</div>
</div>
<div>
<h4 id="_passengerallowencodedslashes_lt_on_off_gt">5.13.2. PassengerAllowEncodedSlashes &lt;on|off&gt;</h4>
<div>

By default, Apache doesn’t support URLs with encoded slashes (%2f), e.g. URLs like this: /users/fujikura%2fyuu. If you access such an URL then Apache will return a 404 Not Found error. This can be solved by turning on PassengerAllowEncodedSlashes as well as Apache’s <a href="http://httpd.apache.org/docs/2.0/mod/core.html#allowencodedslashes">AllowEncodedSlashes</a>.

</div>
<div>

Is it important that you turn on both AllowEncodedSlashes <strong>and</strong> PassengerAllowEncodedSlashes, otherwise this feature will not work properly.

</div>
<div>

PassengerAllowEncodedSlashes may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
	<li>In <em>.htaccess</em>, if AllowOverride Options is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. It is off by default.

</div>
<div>

Please note however that turning on support for encoded slashes will break support for mod_rewrite passthrough rules. Because of bugs/limitations in Apache, Phusion Passenger can support either encoded slashes or mod_rewrite passthrough rules, but not both at the same time. Luckily this option can be specified anywhere, so you can enable it only for virtual hosts or URLs that need it:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.example.com
    DocumentRoot /webapps/example/public
    AllowEncodedSlashes on
    RewriteEngine on

    # Check for maintenance file and redirect all requests
    RewriteCond %{DOCUMENT_ROOT}/system/maintenance.html -f
    RewriteCond %{SCRIPT_FILENAME} !maintenance.html
    RewriteRule ^.*$ /system/maintenance.html [L]

    # Make /about an alias for /info/about.
    RewriteRule ^/about$ /info/about [PT,L]

    &lt;Location ~ "^/users/"&gt;
        # In a location block so that it doesn't interfere with the
        # above /about mod_rewrite rule.
        PassengerAllowEncodedSlashes on
    &lt;/Location&gt;
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

With this, <a href="http://www.example.com/users/fujikura%2fyuu">http://www.example.com/users/fujikura%2fyuu</a> will work properly, and accessing <a href="http://www.example.com/about">http://www.example.com/about</a> will properly display the result of <a href="http://www.example.com/info/about">http://www.example.com/info/about</a>. Notice that PassengerAllowEncodedSlashes only interferes with passthrough rules, not with any other mod_rewrite rules. The rules for displaying maintenance.html will work fine even for URLs starting with "/users".

</div>
</div>
</div>
<div>
<h3 id="_logging_and_debugging_options">5.14. Logging and debugging options</h3>
<div>
<h4 id="_passengerloglevel_lt_integer_gt">5.14.1. PassengerLogLevel &lt;integer&gt;</h4>
<div>

This option allows one to specify how much information Phusion Passenger should write to the Apache error log file. A higher log level value means that more information will be logged.

</div>
<div>

Possible values are:

</div>
<div>
<ul>
	<li><em>0</em>: Show only errors and warnings.</li>
	<li><em>1</em>: Show the most important debugging information. This might be useful for system administrators who are trying to figure out the cause of a problem.</li>
	<li><em>2</em>: Show more debugging information. This is typically only useful for developers.</li>
	<li><em>3</em>: Show even more debugging information.</li>
</ul>
</div>
<div>

This option may only occur once, in the global server configuration. The default is <em>0</em>.

</div>
</div>
<div>
<h4 id="_passengerdebuglogfile_lt_filename_gt">5.14.2. PassengerDebugLogFile &lt;filename&gt;</h4>
<div>

By default Phusion Passenger debugging and error messages are written to the global web server error log. This option allows one to specify the file that debugging and error messages should be written to instead.

</div>
<div>

This option may only occur once, in the global server configuration.

</div>
</div>
</div>
<div>
<h3 id="_ruby_on_rails_specific_options">5.15. Ruby on Rails-specific options</h3>
<div>
<h4 id="_railsautodetect_lt_on_off_gt">5.15.1. RailsAutoDetect &lt;on|off&gt;</h4>
<div>

Whether Phusion Passenger should automatically detect whether a virtual host’s document root is a Ruby on Rails application. The default is <em>on</em>.

</div>
<div>

This option may occur in the global server configuration or in a virtual host configuration block.

</div>
<div>

For example, consider the following configuration:

</div>
<div>
<div>
<pre>RailsAutoDetect off
&lt;VirtualHost *:80&gt;
    ServerName www.mycook.com
    DocumentRoot /webapps/mycook/public
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

If one goes to <em>http://www.mycook.com/</em>, the visitor will see the contents of the <em>/webapps/mycook/public</em> folder, instead of the output of the Ruby on Rails application.

</div>
<div>

It is possible to explicitly specify that the host is a Ruby on Rails application by using the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#RailsBaseURI">RailsBaseURI</a> configuration option:

</div>
<div>
<div>
<pre>RailsAutoDetect off
&lt;VirtualHost *:80&gt;
    ServerName www.mycook.com
    DocumentRoot /webapps/mycook/public
    RailsBaseURI /           # This line has been added.
&lt;/VirtualHost&gt;</pre>
</div>
</div>
</div>
<div>
<h4 id="RailsBaseURI">5.15.2. RailsBaseURI &lt;uri&gt;</h4>
<div>

Used to specify that the given URI is a Rails application. See <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#deploying_rails_to_sub_uri">Deploying Rails to a sub URI</a> for an example.

</div>
<div>

It is allowed to specify this option multiple times. Do this to deploy multiple Rails applications in different sub-URIs under the same virtual host.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
	<li>In <em>.htaccess</em>, if AllowOverride Options is on.</li>
</ul>
</div>
</div>
<div>
<h4 id="rails_env">5.15.3. RailsEnv &lt;string&gt;</h4>
<div>

This option allows one to specify the default RAILS_ENV value.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
	<li>In <em>.htaccess</em>, if AllowOverride Options is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>production</em>.

</div>
</div>
<div>
<h4 id="_railsframeworkspawneridletime_lt_integer_gt">5.15.4. RailsFrameworkSpawnerIdleTime &lt;integer&gt;</h4>
<div>

The FrameworkSpawner server (explained in <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#spawning_methods_explained">Spawning methods explained</a>) has an idle timeout, just like the backend processes spawned by Phusion Passenger do. That is, it will automatically shutdown if it hasn’t done anything for a given period.

</div>
<div>

This option allows you to set the FrameworkSpawner server’s idle timeout, in seconds. A value of <em>0</em> means that it should never idle timeout.

</div>
<div>

Setting a higher value will mean that the FrameworkSpawner server is kept around longer, which may slightly increase memory usage. But as long as the FrameworkSpawner server is running, the time to spawn a Ruby on Rails backend process only takes about 40% of the time that is normally needed, assuming that you’re using the <em>smart</em> <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerSpawnMethod">spawning method</a>. So if your system has enough memory, is it recommended that you set this option to a high value or to <em>0</em>.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>1800</em> (30 minutes).

</div>
</div>
<div>
<h4 id="_railsappspawneridletime_lt_integer_gt">5.15.5. RailsAppSpawnerIdleTime &lt;integer&gt;</h4>
<div>

The ApplicationSpawner server (explained in <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#spawning_methods_explained">Spawning methods explained</a>) has an idle timeout, just like the backend processes spawned by Phusion Passenger do. That is, it will automatically shutdown if it hasn’t done anything for a given period.

</div>
<div>

This option allows you to set the ApplicationSpawner server’s idle timeout, in seconds. A value of <em>0</em> means that it should never idle timeout.

</div>
<div>

Setting a higher value will mean that the ApplicationSpawner server is kept around longer, which may slightly increase memory usage. But as long as the ApplicationSpawner server is running, the time to spawn a Ruby on Rails backend process only takes about 10% of the time that is normally needed, assuming that you’re using the <em>smart</em> or <em>smart-lv2</em> <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerSpawnMethod">spawning method</a>. So if your system has enough memory, is it recommended that you set this option to a high value or to <em>0</em>.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>600</em> (10 minutes).

</div>
</div>
</div>
<div>
<h3 id="_rack_specific_options">5.16. Rack-specific options</h3>
<div>
<h4 id="_rackautodetect_lt_on_off_gt">5.16.1. RackAutoDetect &lt;on|off&gt;</h4>
<div>

Whether Phusion Passenger should automatically detect whether a virtual host’s document root is a Rack application. The default is <em>on</em>.

</div>
<div>

This option may occur in the global server configuration or in a virtual host configuration block.

</div>
<div>

For example, consider the following configuration:

</div>
<div>
<div>
<pre>RackAutoDetect off
&lt;VirtualHost *:80&gt;
    ServerName www.rackapp.com
    DocumentRoot /webapps/my_rack_app/public
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

If one goes to <em>http://www.rackapp.com/</em>, the visitor will see the contents of the <em>/webapps/my_rack_app/public</em> folder, instead of the output of the Rack application.

</div>
<div>

It is possible to explicitly specify that the host is a Rack application by using the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#RackBaseURI">RackBaseURI</a> configuration option:

</div>
<div>
<div>
<pre>RackAutoDetect off
&lt;VirtualHost *:80&gt;
    ServerName www.rackapp.com
    DocumentRoot /webapps/my_rack_app/public
    RackBaseURI /       # This line was added
&lt;/VirtualHost&gt;</pre>
</div>
</div>
</div>
<div>
<h4 id="RackBaseURI">5.16.2. RackBaseURI &lt;uri&gt;</h4>
<div>

Used to specify that the given URI is a Rack application. See <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#deploying_rack_to_sub_uri">Deploying Rack to a sub URI</a> for an example.

</div>
<div>

It is allowed to specify this option multiple times. Do this to deploy multiple Rack applications in different sub-URIs under the same virtual host.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
	<li>In <em>.htaccess</em>, if AllowOverride Options is on.</li>
</ul>
</div>
</div>
<div>
<h4 id="rack_env">5.16.3. RackEnv &lt;string&gt;</h4>
<div>

The given value will be accessible in Rack applications in the RACK_ENV environment variable. This allows one to define the environment in which Rack applications are run, very similar to RAILS_ENV.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
	<li>In the global server configuration.</li>
	<li>In a virtual host configuration block.</li>
	<li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
	<li>In <em>.htaccess</em>, if AllowOverride Options is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>production</em>.

</div>
</div>
</div>
<div>
<h3 id="_deprecated_options">5.17. Deprecated options</h3>
<div>

The following options have been deprecated, but are still supported for backwards compatibility reasons.

</div>
<div>
<h4 id="_railsruby">5.17.1. RailsRuby</h4>
<div>

Deprecated in favor of <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerRuby">PassengerRuby</a>.

</div>
</div>
<div>
<h4 id="_railsuserswitching">5.17.2. RailsUserSwitching</h4>
<div>

Deprecated in favor of <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerUserSwitching">PassengerUserSwitching</a>.

</div>
</div>
<div>
<h4 id="_railsdefaultuser">5.17.3. RailsDefaultUser</h4>
<div>

Deprecated in favor of <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerDefaultUser">PassengerDefaultUser</a>.

</div>
</div>
<div>
<h4 id="_railsallowmodrewrite">5.17.4. RailsAllowModRewrite</h4>
<div>

This option doesn’t do anything anymore in recent versions of Phusion Passenger.

</div>
</div>
<div>
<h4 id="_railsspawnmethod">5.17.5. RailsSpawnMethod</h4>
<div>

Deprecated in favor of <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerSpawnMethod">PassengerSpawnMethod</a>.

</div>
</div>
</div>
</div>
</div>
<div>
<h2 id="_troubleshooting">6. Troubleshooting</h2>
<div>
<div>
<h3 id="_operating_system_specific_problems">6.1. Operating system-specific problems</h3>
<div>
<h4 id="_macos_x_the_installer_cannot_locate_mamp_8217_s_apache">6.1.1. MacOS X: The installer cannot locate MAMP’s Apache</h4>
<div>
<div>
<div>Symptoms</div>
<div>

The installer finds Apache 2 development headers at /Applications/MAMP/Library/bin/apxs. However, Apache cannot be found. The installer also outputs the following error:

</div>
<div>
<div>
<pre>cannot open /Applications/MAMP/Library/build/config_vars.mk:
No such file or directory at /Applications/MAMP/Library/bin/apxs line 218.</pre>
</div>
</div>
</div>
</div>
<div>

Your MAMP installation seems to be broken. In particular, <em>config_vars.mk</em> is missing. Please read <a href="http://forum.mamp.info/viewtopic.php?t=1866">this forum topic</a> to learn how to fix this problem.

</div>
<div>

See also <a href="http://code.google.com/p/phusion-passenger/issues/detail?id=12">this bug report</a>.

</div>
</div>
</div>
<div>
<h3 id="_problems_during_installation">6.2. Problems during installation</h3>
<div>
<h4 id="installing_ruby_dev">6.2.1. Ruby development headers aren’t installed</h4>
<div>
<div>
<div>Symptoms</div>
<div>

Installing Phusion Passenger fails because of one of the following errors:

</div>
<div>
<ul>
	<li>The Phusion Passenger installer tells you that the Ruby development headers aren’t installed.</li>
	<li>The error message “'no such file to load — mkmf”' occurs.</li>
	<li>The error message “'ruby.h: No such file or directory”' occurs.</li>
</ul>
</div>
</div>
</div>
<div>

Phusion Passenger makes use of a native extension, so the Ruby development headers must be installed. On most Linux systems, Ruby and the Ruby development headers are contained in separate packages, so having Ruby installed does not automatically imply having the development headers installed.

</div>
<div>

Here’s how you can install the development headers:

</div>
<div><dl><dt>Ubuntu/Debian</dt><dd>Please type:
<div>
<div>
<pre>sudo apt-get install ruby1.8-dev</pre>
</div>
</div>
</dd><dt>Fedora/CentOS/RHEL</dt><dd>Please type:
<div>
<div>
<pre>su -c 'yum install ruby-devel'</pre>
</div>
</div>
</dd><dt>FreeBSD</dt><dd>Please install Ruby from <em>ports</em> or with pkg_add. If that fails, please install Ruby from source.

</dd><dt>MacOS X</dt><dd>Please install Ruby from source.

</dd><dt>Other operating systems</dt><dd>Please consult your operating system’s native package database. There should be a package containing the Ruby development headers. If that fails, please install Ruby from source.

</dd></dl></div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>If you’ve installed a new Ruby version (i.e. your system now contains multiple Ruby installations), then you will need to tell Phusion Passenger which Ruby installation you want to use. Please read <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#specifying_ruby_installation">Specifying the correct Ruby installation</a>.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h4 id="_apache_development_headers_aren_8217_t_installed">6.2.2. Apache development headers aren’t installed</h4>
<div>
<div>
<div>Symptoms</div>
<div>

Installing Phusion Passenger fails because of one of the following errors:

</div>
<div>
<ul>
	<li>The installer says that the Apache development headers aren’t installed.</li>
	<li>The error message “'httpd.h: No such file or directory”' occurs.
<div>

(Instead of <em>httpd.h</em>, the message might also be <em>http_config.h</em> or something else similar to <em>http_*.h</em>.)

</div></li>
</ul>
</div>
</div>
</div>
<div><dl><dt>Ubuntu</dt><dd>Please type:
<div>
<div>
<pre>sudo apt-get install apache2-prefork-dev</pre>
</div>
</div>
</dd><dt>Debian</dt><dd>Please type:
<div>
<div>
<pre>sudo apt-get install apache2-dev</pre>
</div>
</div>
</dd><dt>Fedora/CentOS/RHEL</dt><dd>Please type:
<div>
<div>
<pre>su -c 'yum install httpd-devel'</pre>
</div>
</div>
</dd><dt>FreeBSD</dt><dd>Please install Apache from <em>ports</em> or with pkg_add. If that fails, please install Apache from source.

</dd><dt>MacOS X</dt><dd>Please install Apache from source.

</dd><dt>Other operating systems</dt><dd>Please consult your operating system’s native package database. There should be a package containing the Apache development headers. If that fails, please install Apache from source.

</dd></dl></div>
</div>
<div>
<h4 id="_apr_development_headers_aren_8217_t_installed">6.2.3. APR development headers aren’t installed</h4>
<div>
<div>
<div>Symptoms</div>
<div>

Installing Phusion Passenger fails because one of the following errors:

</div>
<div>
<ul>
	<li>The installer tells you that APR development headers aren’t installed.</li>
	<li>The error message “'apr_pools.h: No such file or directory”' occurs.</li>
	<li>The error message “'apr_strings.h: No such file or directory”' occurs.</li>
</ul>
</div>
</div>
</div>
<div><dl><dt>Ubuntu</dt><dd>Please type:
<div>
<div>
<pre>sudo apt-get install libapr1-dev</pre>
</div>
</div>
</dd><dt>Debian</dt><dd>Please type:
<div>
<div>
<pre>sudo apt-get install libapr1-dev</pre>
</div>
</div>
</dd><dt>Fedora/CentOS/RHEL</dt><dd>Please type:
<div>
<div>
<pre>su -c 'yum install apr-devel'</pre>
</div>
</div>
</dd><dt>Other Linux distributions</dt><dd>Please consult your distribution’s package database. There should be a package which provides APR development headers.

</dd><dt>Other operating systems</dt><dd>The APR development are bundled with Apache. If the APR headers aren’t, then it probably means that they have been removed after Apache’s been installed. Please reinstall Apache to get back the APR headers.

</dd></dl></div>
</div>
<div>
<h4 id="_phusion_passenger_is_using_the_wrong_apache_during_installation">6.2.4. Phusion Passenger is using the wrong Apache during installation</h4>
<div>

Please <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#specifying_correct_apache_install">Specifying the correct Apache installation</a>, and re-run the Phusion Passenger installer.

</div>
</div>
<div>
<h4 id="_phusion_passenger_is_using_the_wrong_ruby_during_installation">6.2.5. Phusion Passenger is using the wrong Ruby during installation</h4>
<div>

Please <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#specifying_ruby_installation">Specifying the correct Ruby installation</a>, and re-run the Phusion Passenger installer.

</div>
</div>
</div>
<div>
<h3 id="_problems_after_installation">6.3. Problems after installation</h3>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/tip.png" alt="Tip" /></td>
<td>
<div>The golden tip: read your Apache error logs!</div>
<div>

<em>mod_passenger</em> will write all errors to the Apache error log. So if you’re experiencing post-installation problems, please look inside the Apache error logs. It will tell you what exactly went wrong.

</div></td>
</tr>
</tbody>
</table>
</div>
<div>
<h4 id="_my_rails_application_works_on_mongrel_but_not_on_phusion_passenger">6.3.1. My Rails application works on Mongrel, but not on Phusion Passenger</h4>
<div>

Please try setting <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerSpawnMethod">PassengerSpawnMethod</a> to <em>conservative</em>.

</div>
</div>
<div>
<h4 id="_phusion_passenger_has_been_compiled_against_the_wrong_apache_installation">6.3.2. Phusion Passenger has been compiled against the wrong Apache installation</h4>
<div>
<div>
<div>Symptoms</div>
<div>

Apache crashes during startup (after being daemonized). The Apache error log says “'seg fault or similar nasty error detected in the parent process”'.

</div>
</div>
</div>
<div>

This problem is most likely to occur on MacOS X. Most OS X users have multiple Apache installations on their system.

</div>
<div>

To solve this problem, please <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#specifying_correct_apache_install">specify the correct Apache installation</a>, and <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#install_passenger">reinstall Phusion Passenger</a>.

</div>
</div>
<div>
<h4 id="_i_get_a_403_forbidden_error">6.3.3. I get a "403 Forbidden" error</h4>
<div>

See next subsection.

</div>
</div>
<div>
<h4 id="_static_assets_such_as_images_and_stylesheets_aren_8217_t_being_displayed">6.3.4. Static assets such as images and stylesheets aren’t being displayed</h4>
<div>

Static assets are accelerated, i.e. they are served directly by Apache and do not go through the Rails stack. There are two reasons why Apache doesn’t serve static assets correctly:

</div>
<div>
<ol>
	<li>Your Apache configuration is too strict, and does not allow HTTP clients to access static assets. This can be achieved with an Allow from all directive in the correct place. For example:
<div>
<div>
<pre>&lt;Directory "/webapps/mycook/public"&gt;
   Options FollowSymLinks
   AllowOverride None
   Order allow,deny
   Allow from all
&lt;/Directory&gt;</pre>
</div>
</div>
<div>

See also <a href="http://groups.google.com/group/phusion-passenger/browse_thread/thread/9699a639a87f85f4/b9d71a03bf2670a5">this discussion</a>.

</div></li>
	<li>The Apache process doesn’t have permission to access your Rails application’s folder. Please make sure that the Rails application’s folder, as well as all of its parent folders, have the correct permissions and/or ownerships.</li>
</ol>
</div>
</div>
<div>
<h4 id="_the_apache_error_log_says_that_the_spawn_manager_script_does_not_exist_or_that_it_does_not_have_permission_to_execute_it">6.3.5. The Apache error log says that the spawn manager script does not exist, or that it does not have permission to execute it</h4>
<div>

If you are sure that the <em>PassengerRoot</em> configuration option is set correctly, then this problem is most likely caused by the fact that you’re running Apache with SELinux. On Fedora, CentOS and RedHat Enterprise Linux, Apache is locked down by SELinux policies.

</div>
<div>

To solve this problem, you must set some permissions on the Phusion Passenger files and folders, so that Apache can access them.

</div>
<div>
<ul>
	<li>If you’ve installed Phusion Passenger via a gem, then run this command to determine Phusion Passenger’s root folder:
<div>
<div>
<pre>passenger-config --root</pre>
</div>
</div>
<div>

Next, run the following command:

</div>
<div>
<div>
<pre>chcon -R -h -t httpd_sys_content_t /path-to-passenger-root</pre>
</div>
</div>
<div>

where <em>/path-to-passenger-root</em> should be replaced with whatever passenger-config --root printed.

</div></li>
	<li>If you’ve installed Phusion Passenger via the source tarball, then run the following command:
<div>
<div>
<pre>chcon -R -h -t httpd_sys_content_t /path/to/passenger/folder</pre>
</div>
</div></li>
</ul>
</div>
<div>

Once the permissions are fixed, restart Apache.

</div>
</div>
<div>
<h4 id="_the_rails_application_reports_that_it_8217_s_unable_to_start_because_of_a_permission_error">6.3.6. The Rails application reports that it’s unable to start because of a permission error</h4>
<div>

Please check whether your Rails application’s folder has the correct permissions. By default, Rails applications are started as the owner of the file <em>config/environment.rb</em>, except if the file is owned by root. If the file is owned by root, then the Rails application will be started as <em>nobody</em> (or as the user specify by <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#RailsDefaultUser">RailsDefaultUser</a>, if that’s specified).

</div>
<div>

Please read <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#user_switching">User switching (security)</a> for details.

</div>
</div>
<div>
<h4 id="_my_rails_application_8217_s_log_file_is_not_being_written_to">6.3.7. My Rails application’s log file is not being written to</h4>
<div>

There are a couple things that you should be aware of:

</div>
<div>
<ul>
	<li>By default, Phusion Passenger runs Rails applications in <em>production</em> mode, so please be sure to check <em>production.log</em> instead of <em>development.log</em>. See <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#RailsEnv">RailsEnv</a> for configuration.</li>
	<li>By default, Phusion Passenger runs Rails applications as the owner of <em>environment.rb</em>. So the log file can only be written to if that user has write permission to the log file. Please <em>chmod</em> or <em>chown</em> your log file accordingly.
<div>

See <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#User_switching">User switching (security)</a> for details.

</div></li>
</ul>
</div>
<div>

If you’re using a RedHat-derived Linux distribution (such as Fedora or CentOS) then it is <a href="http://code.google.com/p/phusion-passenger/issues/detail?id=4">possible that SELinux is interfering</a>. RedHat’s SELinux policy only allows Apache to read/write directories that have the <em>httpd_sys_content_t</em> security context. Please run the following command to give your Rails application folder that context:

</div>
<div>
<div>
<pre>chcon -R -h -t httpd_sys_content_t /path/to/your/rails/app</pre>
</div>
</div>
</div>
<div>
<h4 id="_i_8217_ve_deployed_my_app_on_ssl_but_the_app_thinks_its_not_on_ssl">6.3.8. I’ve deployed my app on SSL, but the app thinks its not on SSL</h4>
<div>

Rails and many other frameworks infers whether it’s running on SSL through the CGI environment variable HTTPS. Apache always sets this variable when on SSL, except when SSL is incorrectly configured.

</div>
<div>

Most Apache installations already configure SSL by default on port 443 (conf/extra/httpd-ssl.conf). Some people think they can save some typing in subsequent SSL vhost blocks, and omit important options like <em>SSLEngine on</em>, like this:

</div>
<div>
<div>
<pre># httpd-ssl.conf contains something like:
# &lt;VirtualHost _default_:443&gt;
#     SSLEngine on
#     ...
# &lt;/VirtualHost&gt;
Include conf/extra/httpd-ssl.conf

&lt;VirtualHost *:443&gt;
    ServerName www.example.com
    DocumentRoot /webapps/example/public
&lt;/Virtualhost&gt;</pre>
</div>
</div>
<div>

<strong>This is wrong!</strong> In each SSL vhost block you must re-specify all the SSL options. Otherwise Apache won’t properly detect the vhost as an SSL vhost block. Here’s the corrected example:

</div>
<div>
<div>
<pre>Include conf/extra/httpd-ssl.conf

&lt;VirtualHost *:443&gt;
    ServerName www.example.com
    DocumentRoot /webapps/example/public
    SSLEngine on
    ...more SSL options here...
&lt;/Virtualhost&gt;</pre>
</div>
</div>
</div>
</div>
<div>
<h3 id="conflicting_apache_modules">6.4. Conflicting Apache modules</h3>
<div>
<h4 id="_mod_userdir">6.4.1. mod_userdir</h4>
<div>

<em>mod_userdir</em> is not compatible with Phusion Passenger at the moment.

</div>
</div>
<div>
<h4 id="_multiviews_mod_negotiation">6.4.2. MultiViews (mod_negotiation)</h4>
<div>

MultiViews is not compatible with Phusion Passenger. You should disable MultiViews for all Phusion Passenger hosts.

</div>
</div>
<div>
<h4 id="_virtualdocumentroot">6.4.3. VirtualDocumentRoot</h4>
<div>

VirtualDocumentRoot is not compatible with Phusion Passenger at the moment.

</div>
</div>
</div>
</div>
</div>
<div>
<h2 id="_analysis_and_system_maintenance">7. Analysis and system maintenance</h2>
<div>
<div>

Phusion Passenger provides a set of tools, which are useful for system analysis, maintenance and troubleshooting.

</div>
<div>
<h3 id="_inspecting_memory_usage">7.1. Inspecting memory usage</h3>
<div>

Process inspection tools such as ps and top are useful, but they <a href="http://groups.google.com/group/phusion-passenger/msg/1fd1c233456d3180">rarely show the correct memory usage</a>. The real memory usage is usually lower than what ps and top report.

</div>
<div>

There are many technical reasons why this is so, but an explanation is beyond the scope of this Users Guide. We kindly refer the interested reader to operating systems literature about <em>virtual memory</em> and <em>copy-on-write</em>.

</div>
<div>

The tool passenger-memory-stats allows one to easily analyze Phusion Passenger’s and Apache’s real memory usage. For example:

</div>
<div>
<div>
<pre>[bash@localhost root]# passenger-memory-stats
------------- Apache processes --------------.
PID    PPID  Threads  VMSize   Private  Name
---------------------------------------------.
5947   1     9        90.6 MB  0.5 MB   /usr/sbin/apache2 -k start
5948   5947  1        18.9 MB  0.7 MB   /usr/sbin/fcgi-pm -k start
6029   5947  1        42.7 MB  0.5 MB   /usr/sbin/apache2 -k start
6030   5947  1        42.7 MB  0.5 MB   /usr/sbin/apache2 -k start
6031   5947  1        42.5 MB  0.3 MB   /usr/sbin/apache2 -k start
6033   5947  1        42.5 MB  0.4 MB   /usr/sbin/apache2 -k start
6034   5947  1        50.5 MB  0.4 MB   /usr/sbin/apache2 -k start
23482  5947  1        82.6 MB  0.4 MB   /usr/sbin/apache2 -k start
### Processes: 8
### Total private dirty RSS: 3.50 MB

--------- Passenger processes ---------.
PID    Threads  VMSize   Private  Name
---------------------------------------.
6026   1        10.9 MB  4.7 MB   Passenger spawn server
23481  1        26.7 MB  3.0 MB   Passenger FrameworkSpawner: 2.0.2
23791  1        26.8 MB  2.9 MB   Passenger ApplicationSpawner: /var/www/projects/app1-foobar
23793  1        26.9 MB  17.1 MB  Rails: /var/www/projects/app1-foobar
### Processes: 4
### Total private dirty RSS: 27.76 M</pre>
</div>
</div>
<div>

The <em>Private</em> or <em>private dirty RSS</em> field shows the <strong>real</strong> memory usage of processes. Here, we see that all the Apache worker processes only take less than 1 MB memory each. This is a lot less than the 50 MB-ish memory usage as shown in the <em>VMSize</em> column (which is what a lot of people think is the real memory usage, but is actually not).

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>Private dirty RSS reporting only works on Linux. Unfortunately other operating systems don’t provide facilities for determining processes' private dirty RSS. On non-Linux systems, the Resident Set Size is reported instead.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h3 id="_inspecting_phusion_passenger_8217_s_internal_status">7.2. Inspecting Phusion Passenger’s internal status</h3>
<div>

One can inspect Phusion Passenger’s internal status with the tool passenger-status. This tool must typically be run as root. For example:

</div>
<div>
<div>
<pre>[bash@localhost root]# passenger-status
----------- General information -----------
max      = 6
count    = 1
active   = 0
inactive = 1

----------- Domains -----------
/var/www/projects/app1-foobar:
  PID: 9617      Sessions: 0    Processed: 7       Uptime: 2m 23s</pre>
</div>
</div>
<div>

The <em>general information</em> section shows the following information:

</div>
<div><dl><dt>max</dt><dd>The maximum number of application instances that Phusion Passenger will spawn. This equals the value given for <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerMaxPoolSize">PassengerMaxPoolSize</a> (Apache) or <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerMaxPoolSize">passenger_max_pool_size</a> (Nginx).

</dd><dt>count</dt><dd>The number of application instances that are currently alive. This value is always less than or equal to <em>max</em>.

</dd><dt>active</dt><dd>The number of application instances that are currently processing requests. This value is always less than or equal to <em>count</em>.

</dd><dt>inactive</dt><dd>The number of application instances that are currently <strong>not</strong> processing requests, i.e. are idle. Idle application instances will be shutdown after a while, as can be specified with <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerPoolIdleTime">PassengerPoolIdleTime (Apache)</a>/<a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerPoolIdleTime">passenger_pool_idle_time (Nginx)</a> (unless this value is set to 0, in which case application instances are never shut down via idle time). The value of <em>inactive</em> equals count - active.

</dd></dl></div>
<div>

The <em>domains</em> section shows, for each application directory, information about running application instances:

</div>
<div><dl><dt>Sessions</dt><dd>Shows how many HTTP client are currently in the queue of that application Instance, waiting to be processed.

</dd><dt>Processed</dt><dd>Indicates how many requests the instance has served until now. <strong>Tip:</strong> it’s possible to limit this number with the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerMaxRequests">PassengerMaxRequests</a> configuration directive.

</dd><dt>Uptime</dt><dd>Shows for how long the application instance has been running.

</dd></dl></div>
<div>

Since Phusion Passenger uses fair load balancing by default, the number of sessions for the application instances should be fairly close to each other. For example, this is fairly normal:

</div>
<div>
<div>
<pre>  PID: 4281      Sessions: 2      Processed: 7      Uptime: 5m 11s
  PID: 4268      Sessions: 0      Processed: 5      Uptime: 4m 52s
  PID: 4265      Sessions: 1      Processed: 6      Uptime: 5m 38s
  PID: 4275      Sessions: 1      Processed: 7      Uptime: 3m 14s</pre>
</div>
</div>
<div>

But if you see a "spike", i.e. an application instance has an unusually high number of sessions compared to the others, then there might be a problem:

</div>
<div>
<div>
<pre>  PID: 4281      Sessions: 2      Processed: 7      Uptime: 5m 11s
  PID: 17468     Sessions: 8 &lt;-+  Processed: 2      Uptime: 4m 47s
  PID: 4265      Sessions: 1   |  Processed: 6      Uptime: 5m 38s
  PID: 4275      Sessions: 1   |  Processed: 7      Uptime: 3m 14s
                               |
                               +---- "spike"</pre>
</div>
</div>
<div>

Possible reasons why spikes can occur:

</div>
<div>
<ol>
	<li>Your application is busy processing a request that takes a very long time. If this is the case, then you might want to turn <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerUseGlobalQueue">global queuing</a> on.</li>
	<li>Your application is frozen, i.e. has stopped responding. See <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#debugging_frozen">Debugging frozen applications</a> for tips.</li>
</ol>
</div>
</div>
<div>
<h3 id="debugging_frozen">7.3. Debugging frozen applications</h3>
<div>

If one of your application instances is frozen (stopped responding), then you can figure out where it is frozen by killing it with <em>SIGABRT</em>. This will cause the application to raise an exception, with a backtrace.

</div>
<div>

The exception (with full backtrace information) is normally logged into the Apache error log. But if your application or if its web framework has its own exception logging routines, then exceptions might be logged into the application’s log files instead. This is the case with Ruby on Rails. So if you kill a Ruby on Rails application with <em>SIGABRT</em>, please check the application’s <em>production.log</em> first (assuming that you’re running it in a <em>production</em> environment). If you don’t see a backtrace there, check the Apache error log.

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>It is safe to kill application instances, even in live environments. Phusion Passenger will restart killed application instances, as if nothing bad happened.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h3 id="_accessing_individual_application_processes">7.4. Accessing individual application processes</h3>
<div>

When a request is sent to the web server, Phusion Passenger will automatically forward the request to the most suitable application process, but sometimes it is desirable to be able to directly access the individual application processes. Use cases include, but are not limited to:

</div>
<div>
<ul>
	<li>One wants to debug a memory leak or memory bloat problem that only seems to appear on certain URIs. One can send a request to a specific process to see whether that request causes the process’s memory usage to rise.</li>
	<li>The application caches data in local memory, and one wants to tell a specific application process to clear that local data.</li>
	<li>Other debugging use cases.</li>
</ul>
</div>
<div>

All individual application processes are accessible via HTTP, so you can use standard HTTP tools like <em>curl</em>. The exact addresses can be obtained with the command passenger-status --verbose. These sockets are all bound to 127.0.0.1, but the port number is dynamically assigned. As a security measure, the sockets are also protected with a process-specific random password, which you can see in the passenger-status --verbose output. This password must be sent through the “X-Passenger-Connect-Password” HTTP header.

</div>
<div>

Example:

</div>
<div>
<div>
<pre>bash# passenger-status --verbose
----------- General information -----------
max      = 6
count    = 2
active   = 0
inactive = 2
Waiting on global queue: 0

----------- Application groups -----------
/Users/hongli/Sites/rack.test:
  App root: /Users/hongli/Sites/rack.test
  * PID: 24235   Sessions: 0    Processed: 7       Uptime: 17s
      URL     : http://127.0.0.1:58122
      Password: nFfVOX1F8LjZ90HJh28Sd_htJOsgRsNne2QXKf8NIXw
  * PID: 24250   Sessions: 0    Processed: 4       Uptime: 1s
      URL     : http://127.0.0.1:57933
      Password: _RGXlQ9EGDGJKLevQ_qflUtF1KmxEo2UiRzMwIE1sBY</pre>
</div>
</div>
<div>

Here we see that the web application <em>rack.test</em> has two processes. Process 24235 is accessible via <a href="http://127.0.0.1:58122/">http://127.0.0.1:58122</a>, and process 24250 is accessible via <a href="http://127.0.0.1:57933/">http://127.0.0.1:57933</a>.

</div>
<div>

To access 24235 we must send its password, <em>nFfVOX1F8LjZ90HJh28Sd_htJOsgRsNne2QXKf8NIXw</em>, through the <em>X-Passenger-Connect-Password</em> HTTP header, like this:

</div>
<div>
<div>
<pre>bash# curl -H "X-Passenger-Connect-Password: nFfVOX1F8LjZ90HJh28Sd_htJOsgRsNne2QXKf8NIXw" http://127.0.0.1:58122/</pre>
</div>
</div>
</div>
</div>
</div>
<div>
<h2 id="_tips">8. Tips</h2>
<div>
<div>
<h3 id="user_switching">8.1. User switching (security)</h3>
<div>

There is a problem that plagues most PHP web hosts, namely the fact that all PHP applications are run in the same user context as the web server. So for example, Joe’s PHP application will be able to read Jane’s PHP application’s passwords. This is obviously undesirable on many servers.

</div>
<div>

Phusion Passenger solves this problem by implementing <em>user switching</em>. A Rails application is started as the owner of the file <em>config/environment.rb</em>, and a Rack application is started as the owner of the file <em>config.ru</em>. So if <em>/home/webapps/foo/config/environment.rb</em> is owned by <em>joe</em>, then Phusion Passenger will launch the corresponding Rails application as <em>joe</em> as well.

</div>
<div>

This behavior is the default, and you don’t need to configure anything. But there are things that you should keep in mind:

</div>
<div>
<ul>
	<li>The owner of <em>environment.rb</em>/<em>config.ru</em> must have read access to the application’s root directory, and read/write access to the application’s <em>logs</em> directory.</li>
	<li>This feature is only available if Apache is started by <em>root</em>. This is the case on most Apache installations.</li>
	<li>Under no circumstances will applications be run as <em>root</em>. If <em>environment.rb</em>/<em>config.ru</em> is owned as root or by an unknown user, then the Rails/Rack application will run as the user specified by <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerDefaultUser">PassengerDefaultUser</a> and <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerDefaultGroup">PassengerDefaultGroup</a>.</li>
</ul>
</div>
<div>

User switching can be disabled with the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerUserSwitching">PassengerUserSwitching</a> option.

</div>
</div>
<div>
<h3 id="reducing_memory_usage">8.2. Reducing memory consumption of Ruby on Rails applications by 33%</h3>
<div>

Is it possible to reduce memory consumption of your Rails applications by 33% on average, by using <a href="http://www.rubyenterpriseedition.com/">Ruby Enterprise Edition</a>. Please visit the website for details.

</div>
<div>

Note that this feature does not apply to Rack applications.

</div>
</div>
<div>
<h3 id="capistrano">8.3. Capistrano recipe</h3>
<div>

Phusion Passenger can be combined with <a href="http://capify.org/">Capistrano</a>. The following Capistrano recipe demonstrates Phusion Passenger support. It assumes that you’re using Git as version control system.

</div>
<div>
<div>
<pre>set :application, "myapp"
set :domain,      "example.com"
set :repository,  "ssh://#{domain}/path-to-your-git-repo/#{application}.git"
set :use_sudo,    false
set :deploy_to,   "/path-to-your-web-app-directory/#{application}"
set :scm,         "git"

role :app, domain
role :web, domain
role :db,  domain, :primary =&gt; true

namespace :deploy do
  task :start, :roles =&gt; :app do
    run "touch #{current_release}/tmp/restart.txt"
  end

  task :stop, :roles =&gt; :app do
    # Do nothing.
  end

  desc "Restart Application"
  task :restart, :roles =&gt; :app do
    run "touch #{current_release}/tmp/restart.txt"
  end
end</pre>
</div>
</div>
</div>
<div>
<h3 id="bundler_support">8.4. Bundler support</h3>
<div>

Phusion Passenger has automatic support for <a href="http://gembundler.com/git.html">Bundler</a>. It works as follows:

</div>
<div>
<ul>
	<li>If you have a <em>.bundle/environment.rb</em> in your application root, then Phusion Passenger will require that file before loading your application.</li>
	<li>Otherwise, if you have a <em>Gemfile</em>, then Phusion Passenger will automatically call Bundler.setup() before loading your application.</li>
</ul>
</div>
<div>

It’s possible that your application also calls Bundler.setup during loading, e.g. in <em>config.ru</em> or in <em>config/boot.rb</em>. This is the case with Rails 3, and is also the case if you modified your <em>config/boot.rb</em> according to the <a href="http://gembundler.com/rails23.html">Bundler Rails 2.3 instructions</a>. This leads to Bundler.setup being called twice, once before the application startup file is required and once during application startup. However this is harmless and doesn’t have any negative effects.

</div>
<div>

Phusion Passenger assumes that you’re using Bundler &gt;= 0.9.5. If you don’t want Phusion Passenger to run its Bundler support code, e.g. because you need to use an older version of Bundler with an incompatible API or because you use a system other than Bundler, then you can override Phusion Passenger’s Bundler support code by creating a file <em>config/setup_load_paths.rb</em>. If this file exists then it will be required before loading the application startup file. In this file you can do whatever you need to setup Bundler or a similar system.

</div>
</div>
<div>
<h3 id="moving_phusion_passenger">8.5. Moving Phusion Passenger to a different directory</h3>
<div>

It is possible to relocate the Phusion Passenger files to a different directory. It involves two steps:

</div>
<div>
<ol>
	<li>Moving the directory.</li>
	<li>Updating the “PassengerRoot” configuration option in Apache.</li>
</ol>
</div>
<div>

For example, if Phusion Passenger is located in <em>/opt/passenger/</em>, and you’d like to move it to <em>/usr/local/passenger/</em>, then do this:

</div>
<div>
<ol>
	<li>Run the following command:
<div>
<div>
<pre>mv /opt/passenger /usr/local/passenger</pre>
</div>
</div></li>
	<li>Edit your Apache configuration file, and set:
<div>
<div>
<pre>PassengerRoot /usr/local/passenger</pre>
</div>
</div></li>
</ol>
</div>
</div>
<div>
<h3 id="_installing_multiple_ruby_on_rails_versions">8.6. Installing multiple Ruby on Rails versions</h3>
<div>

Each Ruby on Rails applications that are going to be deployed may require a specific Ruby on Rails version. You can install a specific version with this command:

</div>
<div>
<div>
<pre>gem install rails -v X.X.X</pre>
</div>
</div>
<div>

where <em>X.X.X</em> is the version number of Ruby on Rails.

</div>
<div>

All of these versions will exist in parallel, and will not conflict with each other. Phusion Passenger will automatically make use of the correct version.

</div>
</div>
<div>
<h3 id="_making_the_application_restart_after_each_request">8.7. Making the application restart after each request</h3>
<div>

In some situations it might be desirable to restart the web application after each request, for example when developing a non-Rails application that doesn’t support code reloading, or when developing a web framework.

</div>
<div>

To achieve this, simply create the file <em>tmp/always_restart.txt</em> in your application’s root folder. Unlike <em>restart.txt</em>, Phusion Passenger does not check for this file’s timestamp: Phusion Passenger will always restart the application, as long as <em>always_restart.txt</em> exists.

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>If you’re just developing a Rails application then you probably don’t need this feature. If you set <em>RailsEnv development</em> in your Apache configuration, then Rails will automatically reload your application code after each request. <em>always_restart.txt</em> is only useful if you’re working on Ruby on Rails itself, or when you’re not developing a Rails application and your web framework does not support code reloading.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h3 id="sub_uri_deployment_uri_fix">8.8. How to fix broken images/CSS/JavaScript URIs in sub-URI deployments</h3>
<div>

Some people experience broken images and other broken static assets when they deploy their application to a sub-URI (i.e. <em>http://mysite.com/railsapp/</em>). The reason for this usually is that you used a static URI for your image in the views. This means your <em>img</em> source probably refers to something like <em>/images/foo.jpg</em>. The leading slash means that it’s an absolute URI: you’re telling the browser to always load <em>http://mysite.com/images/foo.jpg</em> no matter what. The problem is that the image is actually at <em>http://mysite.com/railsapp/images/foo.jpg</em>. There are two ways to fix this.

</div>
<div>

The first way (not recommended) is to change your view templates to refer to <em>images/foo.jpg</em>. This is a relative URI: note the lack of a leading slash). What this does is making the path relative to the current URI. The problem is that if you use restful URIs, then your images will probably break again when you add a level to the URI. For example, when you’re at <em>http://mysite.com/railsapp</em> the browser will look for <em>http://mysite.com/railsapp/images/foo.jpg</em>. But when you’re at <em>http://mysite.com/railsapp/controller</em>. the browser will look for <em>http://mysite.com/railsapp/controller/images/foo.jpg</em>. So relative URIs usually don’t work well with layout templates.

</div>
<div>

The second and highly recommended way is to always use Rails helper methods to output tags for static assets. These helper methods automatically take care of prepending the base URI that you’ve deployed the application to. For images there is image_tag, for JavaScript there is javascript_include_tag and for CSS there is stylesheet_link_tag. In the above example you would simply remove the <em>&lt;img&gt;</em> HTML tag and replace it with inline Ruby like this:

</div>
<div>
<div>
<pre>&lt;%= image_tag("foo.jpg") %&gt;</pre>
</div>
</div>
<div>

This will generate the proper image tag to $RAILS_ROOT/public/images/foo.jpg so that your images will always work no matter what sub-URI you’ve deployed to.

</div>
<div>

These helper methods are more valuable than you may think. For example they also append a timestamp to the URI to better facilitate HTTP caching. For more information, please refer to <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html">the Rails API docs</a>.

</div>
</div>
<div>
<h3 id="_x_sendfile_support">8.9. X-Sendfile support</h3>
<div>

Phusion Passenger does not provide X-Sendfile support by itself. Please install <a href="http://tn123.ath.cx/mod_xsendfile/">mod_xsendfile</a> for X-Sendfile support.

</div>
</div>
<div>
<h3 id="_upload_progress">8.10. Upload progress</h3>
<div>

Phusion Passenger does not provide upload progress support by itself. Please try drogus’s <a href="http://github.com/drogus/apache-upload-progress-module/tree/master"> Apache upload progress module</a> instead.

</div>
</div>
</div>
</div>
<div>
<h2 id="_under_the_hood">9. Under the hood</h2>
<div>
<div>

Phusion Passenger hides a lot of complexity for the end user (i.e. the web server system administrator), but sometimes it is desirable to know what is going on. This section describes a few things that Phusion Passenger does under the hood.

</div>
<div>
<h3 id="_static_assets_serving">9.1. Static assets serving</h3>
<div>

Phusion Passenger accelerates serving of static files. This means that, if an URI maps to a file that exists, then Phusion Passenger will let Apache serve that file directly, without hitting the web application.

</div>
<div>

Phusion Passenger does all this without the need for any mod_rewrite rules. People who are switching from an old Mongrel-based setup might have mod_rewrite rules such as these:

</div>
<div>
<div>
<pre># Check whether this request has a corresponding file; if that
# exists, let Apache serve it, otherwise forward the request to
# Mongrel.
RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f
RewriteRule ^(.*)$ balancer://mongrel%{REQUEST_URI} [P,QSA,L]</pre>
</div>
</div>
<div>

These kind of mod_rewrite rules are no longer required, and you can safely remove them.

</div>
</div>
<div>
<h3 id="_page_caching_support">9.2. Page caching support</h3>
<div>

For each HTTP request, Phusion Passenger will automatically look for a corresponding page cache file, and serve that if it exists. It does this by appending ".html" to the filename that the URI normally maps to, and checking whether that file exists. This check occurs after checking whether the original mapped filename exists (as part of static asset serving). All this is done without the need for special mod_rewrite rules.

</div>
<div>

For example, suppose that the browser requests <em>/foo/bar</em>.

</div>
<div>
<ol>
	<li>Phusion Passenger will first check whether this URI maps to a static file, i.e. whether the file <em>foo/bar</em> exists in the web application’s <em>public</em> directory. If it does then Phusion Passenger will serve this file through Apache immediately.</li>
	<li>If that doesn’t exist, then Phusion Passenger will check whether the file <em>foo/bar.html</em> exists. If it does then Phusion Passenger will serve this file through Apache immediately.</li>
	<li>If <em>foo/bar.html</em> doesn’t exist either, then Phusion Passenger will forward the request to the underlying web application.</li>
</ol>
</div>
<div>

Note that Phusion Passenger’s page caching support doesn’t work if your web application uses a non-standard page cache directory, i.e. if it doesn’t cache to the <em>public</em> directory. In that case you’ll need to use mod_rewrite to serve such page cache files.

</div>
</div>
<div>
<h3 id="application_detection">9.3. How Phusion Passenger detects whether a virtual host is a web application</h3>
<div>

After you’ve read the deployment instructions you might wonder how Phusion Passenger knows that the DocumentRoot points to a web application that Phusion Passenger is able to serve, and how it knows what kind of web application it is (e.g. Rails or Rack).

</div>
<div>

Phusion Passenger checks whether the virtual host is a Rails application by checking whether the following file exists:

</div>
<div>
<div>
<pre>dirname(DocumentRoot) + "/config/environment.rb"</pre>
</div>
</div>
<div>

If you’re not a programmer and don’t understand the above pseudo-code snippet, it means that Phusion Passenger will:

</div>
<div>
<ol>
	<li>Extract the parent directory filename from the value of the DocumentRoot directory.</li>
	<li>Append the text "/config/environment.rb" to the result, and check whether the resulting filename exists.</li>
</ol>
</div>
<div>

So suppose that your document root is <em>/webapps/foo/public</em>. Phusion Passenger will check whether the file <em>/webapps/foo/config/environment.rb</em> exists.

</div>
<div>

Note that Phusion Passenger does <strong>not</strong> resolve any symlinks in the document root path by default since version 2.2.0 — in contrast to versions earlier than 2.2.0, which do resolve symlinks. So for example, suppose that your DocumentRoot points to <em>/home/www/example.com</em>, which in turn is a symlink to <em>/webapps/example.com/public</em>. In versions earlier than 2.2.0, Phusion Passenger will check whether <em>/webapps/example.com/config/environment.rb</em> exists because it resolves all symlinks. Phusion Passenger 2.2.0 and later however will check for <em>/home/www/config/environment.rb</em>. This file of course doesn’t exist, and as a result Phusion Passenger will not activate itself for this virtual host, and you’ll most likely see an Apache mod_dirindex directory listing.

</div>
<div>

If you need the old symlink-resolving behavior for whatever reason, then you can turn on <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerResolveSymlinksInDocumentRoot">PassengerResolveSymlinksInDocumentRoot</a>.

</div>
<div>

Another way to solve this situation is to explicitly tell Phusion Passenger what the correct application root is through the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerAppRoot">PassengerAppRoot</a> configuration directive.

</div>
<div>

Autodetection of Rack applications happens through the same mechanism, exception that Phusion Passenger will look for <em>config.ru</em> instead of <em>config/environment.rb</em>.

</div>
</div>
</div>
</div>
<div>
<h2 id="_appendix_a_about_this_document">10. Appendix A: About this document</h2>
<div>
<div>

The text of this document is licensed under the <a href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-Share Alike 3.0 Unported License</a>.

</div>
<div>

<a href="http://creativecommons.org/licenses/by-sa/3.0/"> <img src="http://www.modrails.com/documentation/images/by_sa.png" alt="images/by_sa.png" /> </a>

</div>
<div>

Phusion Passenger is brought to you by <a href="http://www.phusion.nl/">Phusion</a>.

</div>
<div>

<a href="http://www.phusion.nl/"> <img src="http://www.modrails.com/documentation/images/phusion_banner.png" alt="images/phusion_banner.png" /> </a>

</div>
<div>

Phusion Passenger is a trademark of Hongli Lai &amp; Ninh Bui.

</div>
</div>
</div>
<div>
<h2 id="_appendix_b_terminology">11. Appendix B: Terminology</h2>
<div>
<div>
<h3 id="application_root">11.1. Application root</h3>
<div>

The root directory of an application that’s served by Phusion Passenger.

</div>
<div>

In case of Ruby on Rails applications, this is the directory that contains <em>Rakefile</em>, <em>app/</em>, <em>config/</em>, <em>public/</em>, etc. In other words, the directory pointed to by RAILS_ROOT. For example, take the following directory structure:

</div>
<div>
<div>
<pre>/apps/foo/       &lt;------ This is the Rails application's application root!
   |
   +- app/
   |   |
   |   +- controllers/
   |   |
   |   +- models/
   |   |
   |   +- views/
   |
   +- config/
   |   |
   |   +- environment.rb
   |   |
   |   +- ...
   |
   +- public/
   |   |
   |   +- ...
   |
   +- ...</pre>
</div>
</div>
<div>

In case of Rack applications, this is the directory that contains <em>config.ru</em>. For example, take the following directory structure:

</div>
<div>
<div>
<pre>/apps/bar/      &lt;----- This is the Rack application's application root!
   |
   +- public/
   |    |
   |    +- ...
   |
   +- config.ru
   |
   +- ...</pre>
</div>
</div>
<div>

In case of Python (WSGI) applications, this is the directory that contains <em>passenger_wsgi.py</em>. For example, take the following directory structure:

</div>
<div>
<div>
<pre>/apps/baz/      &lt;----- This is the WSGI application's application root!
   |
   +- public/
   |    |
   |    +- ...
   |
   +- passenger_wsgi.py
   |
   +- ...</pre>
</div>
</div>
</div>
</div>
</div>
<div>
<h2 id="spawning_methods_explained">12. Appendix C: Spawning methods explained</h2>
<div>
<div>

At its core, Phusion Passenger is an HTTP proxy and process manager. It spawns Ruby on Rails/Rack/WSGI worker processes (which may also be referred to as <em>backend processes</em>), and forwards incoming HTTP request to one of the worker processes.

</div>
<div>

While this may sound simple, there’s not just one way to spawn worker processes. Let’s go over the different spawning methods. For simplicity’s sake, let’s assume that we’re only talking about Ruby on Rails applications.

</div>
<div>
<h3 id="_the_most_straightforward_and_traditional_way_conservative_spawning">12.1. The most straightforward and traditional way: conservative spawning</h3>
<div>

Phusion Passenger could create a new Ruby process, which will then load the Rails application along with the entire Rails framework. This process will then enter an request handling main loop.

</div>
<div>

This is the most straightforward way to spawn worker processes. If you’re familiar with the Mongrel application server, then this approach is exactly what mongrel_cluster performs: it creates N worker processes, each which loads a full copy of the Rails application and the Rails framework in memory. The Thin application server employs pretty much the same approach.

</div>
<div>

Note that Phusion Passenger’s version of conservative spawning differs slightly from mongrel_cluster. Mongrel_cluster creates entirely new Ruby processes. In programmers jargon, mongrel_cluster creates new Ruby processes by forking the current process and exec()-ing a new Ruby interpreter. Phusion Passenger on the other hand creates processes that reuse the already loaded Ruby interpreter. In programmers jargon, Phusion Passenger calls fork(), but not exec().

</div>
</div>
<div>
<h3 id="_the_smart_spawning_method">12.2. The smart spawning method</h3>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>Smart spawning is supported for all Ruby applications but not for WSGI applications.</td>
</tr>
</tbody>
</table>
</div>
<div>

While conservative spawning works well, it’s not as efficient as it could be because each worker process has its own private copy of the Rails application as well as the Rails framework. This wastes memory as well as startup time.

</div>
<div>

<img src="http://www.modrails.com/documentation/images/conservative_spawning.png" alt="Worker processes and conservative spawning" />
<em>Figure: Worker processes and conservative spawning. Each worker process has its own private copy of the application code and Rails framework code.</em>

</div>
<div>

It is possible to make the different worker processes share the memory occupied by application and Rails framework code, by utilizing so-called copy-on-write semantics of the virtual memory system on modern operating systems. As a side effect, the startup time is also reduced. This is technique is exploited by Phusion Passenger’s <em>smart</em> and <em>smart-lv2</em> spawn methods.

</div>
<div>
<h4 id="_how_it_works">12.2.1. How it works</h4>
<div>

When the <em>smart-lv2</em> spawn method is being used, Phusion Passenger will first create a so-called <em>ApplicationSpawner server</em> process. This process loads the entire Rails application along with the Rails framework, by loading <em>environment.rb</em>. Then, whenever Phusion Passenger needs a new worker process, it will instruct the ApplicationSpawner server to do so. The ApplicationSpawner server will create a worker new process that reuses the already loaded Rails application/framework. Creating a worker process through an already running ApplicationSpawner server is very fast, about 10 times faster than loading the Rails application/framework from scratch. If the Ruby interpreter is copy-on-write friendly (that is, if you’re running <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#reducing_memory_usage">Ruby Enterprise Edition</a>) then all created worker processes will share as much common memory as possible. That is, they will all share the same application and Rails framework code.

</div>
<div>

<img src="http://www.modrails.com/documentation/images/smart-lv2.png" alt="images/smart-lv2.png" />
<em>Figure: Worker processes and the smart-lv2 spawn method. All worker processes, as well as the ApplicationSpawner, share the same application code and Rails framework code.</em>

</div>
<div>

The <em>smart</em> spawn method goes even further, by caching the Rails framework in another process called the <em>FrameworkSpawner server</em>. This process only loads the Rails framework, not the application. When a FrameworkSpawner server is instructed to create a new worker process, it will create a new ApplicationSpawner to which the instruction will be delegated. All those ApplicationSpawner servers, as well as all worker processes created by those ApplicationSpawner servers, will share the same Rails framework code.

</div>
<div>

The <em>smart-lv2</em> method allows different worker processes that belong to the same application to share memory. The <em>smart</em> method allows different worker processes - that happen to use the same Rails version - to share memory, even if they don’t belong to the same application.

</div>
<div>

Notes:

</div>
<div>
<ul>
	<li>Vendored Rails frameworks cannot be shared by different applications, even if both vendored Rails frameworks are the same version. So for efficiency reasons we don’t recommend vendoring Rails.</li>
	<li>ApplicationSpawner and FrameworkSpawner servers have an idle timeout just like worker processes. If an ApplicationSpawner/FrameworkSpawner server hasn’t been instructed to do anything for a while, it will be shutdown in order to conserve memory. This idle timeout is configurable.</li>
</ul>
</div>
</div>
<div>
<h4 id="_summary_of_benefits">12.2.2. Summary of benefits</h4>
<div>

Suppose that Phusion Passenger needs a new worker process for an application that uses Rails 2.2.1.

</div>
<div>
<ul>
	<li>If the <em>smart-lv2</em> spawning method is used, and an ApplicationSpawner server for this application is already running, then worker process creation time is about 10 times faster than conservative spawning. This worker process will also share application and Rails framework code memory with the ApplicationSpawner server and the worker processes that had been spawned by this ApplicationSpawner server.</li>
	<li>If the <em>smart</em> spawning method is used, and a FrameworkSpawner server for Rails 2.2.1 is already running, but no ApplicationSpawner server for this application is running, then worker process creation time is about 2 times faster than conservative spawning. If there is an ApplicationSpawner server for this application running, then worker process creation time is about 10 times faster. This worker process will also share application and Rails framework code memory with the ApplicationSpawner and FrameworkSpawner servers.</li>
</ul>
</div>
<div>

You could compare ApplicationSpawner and FrameworkSpawner servers with stem cells, that have the ability to quickly change into more specific cells (worker process).

</div>
<div>

In practice, the smart spawning methods could mean a memory saving of about 33%, assuming that your Ruby interpreter is <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#reducing_memory_usage">copy-on-write friendly</a>.

</div>
<div>

Of course, smart spawning is not without gotchas. But if you understand the gotchas you can easily reap the benefits of smart spawning.

</div>
</div>
</div>
<div>
<h3 id="_smart_spawning_gotcha_1_unintential_file_descriptor_sharing">12.3. Smart spawning gotcha #1: unintential file descriptor sharing</h3>
<div>

Because worker processes are created by forking from an ApplicationSpawner server, it will share all file descriptors that are opened by the ApplicationSpawner server. (This is part of the semantics of the Unix <em>fork()</em> system call. You might want to Google it if you’re not familiar with it.) A file descriptor is a handle which can be an opened file, an opened socket connection, a pipe, etc. If different worker processes write to such a file descriptor at the same time, then their write calls will be interleaved, which may potentially cause problems.

</div>
<div>

The problem commonly involves socket connections that are unintentially being shared. You can fix it by closing and reestablishing the connection when Phusion Passenger is creating a new worker process. Phusion Passenger provides the API call PhusionPassenger.on_event(:starting_worker_process) to do so. So you could insert the following code in your <em>environment.rb</em>:

</div>
<div>
<div>
<pre><tt>if defined?(PhusionPassenger)
  PhusionPassenger.on_event(:starting_worker_process) do |forked|
    if forked # We're in smart spawning mode. ...
      code to reestablish socket connections here ...
    else # We're in conservative spawning mode. We don't need to do anything.
    end
  end
end</tt></pre>
</div>
</div>
<div>

Note that Phusion Passenger automatically reestablishes the connection to the database upon creating a new worker process, which is why you normally do not encounter any database issues when using smart spawning mode.

</div>
<div>
<h4 id="_example_1_memcached_connection_sharing_harmful">12.3.1. Example 1: Memcached connection sharing (harmful)</h4>
<div>

Suppose we have a Rails application that connects to a Memcached server in <em>environment.rb</em>. This causes the ApplicationSpawner to have a socket connection (file descriptor) to the Memcached server, as shown in the following figure:

</div>
<div>
<div>
<pre>+--------------------+
| ApplicationSpawner |-----------[Memcached server]
+--------------------+</pre>
</div>
</div>
<div>

Phusion Passenger then proceeds with creating a new Rails worker process, which is to process incoming HTTP requests. The result will look like this:

</div>
<div>
<div>
<pre>+--------------------+
| ApplicationSpawner |------+----[Memcached server]
+--------------------+      |
                            |
+--------------------+      |
| Worker process 1   |-----/
+--------------------+</pre>
</div>
</div>
<div>

Since a <em>fork()</em> makes a (virtual) complete copy of a process, all its file descriptors will be copied as well. What we see here is that ApplicationSpawner and Worker process 1 both share the same connection to Memcached.

</div>
<div>

Now supposed that your site gets Slashdotted and Phusion Passenger needs to spawn another worker process. It does so by forking ApplicationSpawner. The result is now as follows:

</div>
<div>
<div>
<pre>+--------------------+
| ApplicationSpawner |------+----[Memcached server]
+--------------------+      |
                            |
+--------------------+      |
| Worker process 1   |-----/|
+--------------------+      |
                            |
+--------------------+      |
| Worker process 2   |-----/
+--------------------+</pre>
</div>
</div>
<div>

As you can see, Worker process 1 and Worker process 2 have the same Memcache connection.

</div>
<div>

Suppose that users Joe and Jane visit your website at the same time. Joe’s request is handled by Worker process 1, and Jane’s request is handled by Worker process 2. Both worker processes want to fetch something from Memcached. Suppose that in order to do that, both handlers need to send a "FETCH" command to Memcached.

</div>
<div>

But suppose that, after worker process 1 having only sent "FE", a context switch occurs, and worker process 2 starts sending a "FETCH" command to Memcached as well. If worker process 2 succeeds in sending only one bye, <em>F</em>, then Memcached will receive a command which begins with "FEF", a command that it does not recognize. In other words: the data from both handlers get interleaved. And thus Memcached is forced to handle this as an error.

</div>
<div>

This problem can be solved by reestablishing the connection to Memcached after forking:

</div>
<div>
<div>
<pre>+--------------------+
| ApplicationSpawner |------+----[Memcached server]
+--------------------+      |                   |
                            |                   |
+--------------------+      |                   |
| Worker process 1   |-----/|                   |
+--------------------+      |                   |  &lt;--- created this
                            X                   |       new
                                                |       connection
                            X &lt;-- closed this   |
+--------------------+      |     old           |
| Worker process 2   |-----/      connection    |
+--------------------+                          |
          |                                     |
          +-------------------------------------+</pre>
</div>
</div>
<div>

Worker process 2 now has its own, separate communication channel with Memcached. The code in <em>environment.rb</em> looks like this:

</div>
<div>
<div>
<pre><tt>if defined?(PhusionPassenger)
  PhusionPassenger.on_event(:starting_worker_process) do |forked|
    if forked # We're in smart spawning mode.
      reestablish_connection_to_memcached
    else # We're in conservative spawning mode. We don't need to do anything.
    end
  end
end</tt></pre>
</div>
</div>
</div>
<div>
<h4 id="_example_2_log_file_sharing_not_harmful">12.3.2. Example 2: Log file sharing (not harmful)</h4>
<div>

There are also cases in which unintential file descriptor sharing is not harmful. One such case is log file file descriptor sharing. Even if two processes write to the log file at the same time, the worst thing that can happen is that the data in the log file is interleaved.

</div>
<div>

To guarantee that the data written to the log file is never interleaved, you must synchronize write access via an inter-process synchronization mechanism, such as file locks. Reopening the log file, like you would have done in the Memcached example, doesn’t help.

</div>
</div>
</div>
<div>
<h3 id="_smart_spawning_gotcha_2_the_need_to_revive_threads">12.4. Smart spawning gotcha #2: the need to revive threads</h3>
<div>

Another part of the <em>fork()</em> system call’s semantics is the fact that threads disappear after a fork call. So if you’ve created any threads in environment.rb, then those threads will no longer be running in newly created worker process. You need to revive them when a new worker process is created. Use the :starting_worker_process event that Phusion Passenger provides, like this:

</div>
<div>
<div>
<pre><tt>if defined?(PhusionPassenger)
  PhusionPassenger.on_event(:starting_worker_process) do |forked|
    if forked # We're in smart spawning mode. ...
      code to revive threads here ...
    else # We're in conservative spawning mode. We don't need to do anything.
    end
  end
end</tt></pre>
</div>
</div>
</div>
<div>
<h3 id="_smart_spawning_gotcha_3_code_load_order">12.5. Smart spawning gotcha #3: code load order</h3>
<div>

This gotcha is only applicable to the <em>smart</em> spawn method, not the <em>smart-lv2</em> spawn method.

</div>
<div>

If your application expects the Rails framework to be not loaded during the beginning of <em>environment.rb</em>, then it can cause problems when an ApplicationSpawner is created from a FrameworkSpawner, which already has the Rails framework loaded. The most common case is when applications try to patch Rails by dropping a modified file that has the same name as Rails’s own file, in a path that comes earlier in the Ruby search path.

</div>
<div>

For example, suppose that we have an application which has a patched version of <em>active_record/base.rb</em> located in <em>RAILS_ROOT/lib/patches</em>, and <em>RAILS_ROOT/lib/patches</em> comes first in the Ruby load path. When conservative spawning is used, the patched version of <em>base.rb</em> is properly loaded. When <em>smart</em> (not <em>smart-lv2</em>) spawning is used, the original <em>base.rb</em> is used because it was already loaded, so a subsequent require "active_record/base" has no effect.

</div>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">Last updated 2011-11-24 19:06:50 CET</div>
<div>标签： <a href="http://jhjguxin.hwcrazy.com/tag/apache/">apache</a> <a href="http://jhjguxin.hwcrazy.com/tag/passenger/">passenger</a> <a href="http://jhjguxin.hwcrazy.com/tag/phusion/">phusion</a> <a href="http://jhjguxin.hwcrazy.com/tag/rails/">rails</a> <a href="http://jhjguxin.hwcrazy.com/tag/ruby/">ruby</a> <a href="http://jhjguxin.hwcrazy.com/tag/web/">web</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date>2012-01-09 14:26:17</wp:post_date>
		<wp:post_date_gmt>2012-01-09 06:26:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>phusion-passenger-users-guide</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apache"><![CDATA[apache]]></category>
		<category domain="post_tag" nicename="passenger"><![CDATA[passenger]]></category>
		<category domain="post_tag" nicename="phusion"><![CDATA[phusion]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="server"><![CDATA[server]]></category>
		<category domain="post_tag" nicename="web"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用 ri 命令查看 API</title>
		<link></link>
		<pubDate>Wed, 18 Jan 2012 04:02:47 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=161</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

经常去 APIDOCK.COM 查询标准 API，今天访问时忽然变得很慢，忽然想起 Ruby 有自己的 Rdoc，是不是能自己生成一个本地的文档呢。

隐约记得有两种方法查看本地文档，一个是使用 ri 命令，一个是用 Rdoc 生成 Html 格式的文件在浏览器中查询。ri 文档基于 Rdoc 来生成。我更喜欢使用命令行格式的，不过直接 ri 了一下，只有几个 gem 的文档，没有 Ruby 核心和标准库的。我用的是 rvm，rvm 安装 rubies 后并不会自动生成 rdoc，还需要手动生成。
<h2>删除 gem 文档</h2>
因为 <code>ri method</code> 会列出所有包含 method 的 gem，为了不让输出显得凌乱，需要把默认的 gem 的 doc 全部去掉，这些 gem 很多只是为了解决依赖自动下载的并不常用，也不需要。先贴一下 gem 环境
<div>
<div id="highlighter_16375">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>abc@abc-desktop:~$ gem </code><code>env</code></div>
<div><code>RubyGems Environment: </code></div>
<div><code>  </code><code>- RUBYGEMS VERSION: 1.6.2 </code></div>
<div><code>  </code><code>- RUBY VERSION: 1.9.2 (2011-02-18 patchlevel 180) [i686-linux] </code></div>
<div><code>  </code><code>- INSTALLATION DIRECTORY: </code><code>/home/abc/</code><code>.rvm</code><code>/gems/ruby-1</code><code>.9.2-p180 </code></div>
<div><code>  </code><code>- RUBY EXECUTABLE: </code><code>/home/abc/</code><code>.rvm</code><code>/rubies/ruby-1</code><code>.9.2-p180</code><code>/bin/ruby</code></div>
<div><code>  </code><code>- EXECUTABLE DIRECTORY: </code><code>/home/abc/</code><code>.rvm</code><code>/gems/ruby-1</code><code>.9.2-p180</code><code>/bin</code></div>
<div><code>  </code><code>- RUBYGEMS PLATFORMS: </code></div>
<div><code>    </code><code>- ruby </code></div>
<div><code>    </code><code>- x86-linux </code></div>
<div><code>  </code><code>- GEM PATHS: </code></div>
<div><code>     </code><code>- </code><code>/home/abc/</code><code>.rvm</code><code>/gems/ruby-1</code><code>.9.2-p180 </code></div>
<div><code>     </code><code>- </code><code>/home/abc/</code><code>.rvm</code><code>/gems/ruby-1</code><code>.9.2-p180@global </code></div>
<div><code>  </code><code>- GEM CONFIGURATION: </code></div>
<div><code>     </code><code>- :update_sources =&gt; </code><code>true</code></div>
<div><code>     </code><code>- :verbose =&gt; </code><code>true</code></div>
<div><code>     </code><code>- :benchmark =&gt; </code><code>false</code></div>
<div><code>     </code><code>- :backtrace =&gt; </code><code>false</code></div>
<div><code>     </code><code>- :bulk_threshold =&gt; 1000 </code></div>
<div><code>  </code><code>- REMOTE SOURCES: </code></div>
<div><code>     </code><code>- http:</code><code>//rubygems</code><code>.org/</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
进入 GEM PATHS 即 ~/.rvm/gems/ruby-1.9.2-p180/doc 中执行 <code>rm -rf</code> 删除掉所有文档。

gem 安装时选择 <code>gem install <em>gemname</em> --no-ri --no-rdoc</code> 可以避免生成文档，如果不想每次麻烦输入，执行 <code>echo 'install: --no-rdoc --no-ri' &gt; ~/.gemrc</code> 新建并写入配置文件即可。

rvm 的 gem 默认会从 ~/.vimrc 以及 $ruby_path/etc/gemrc 下读取配置文件。后者可以通过 IRB 中执行 <code>Gem::ConfigFile::SYSTEM_WIDE_CONFIG_FILE</code> 查看。
<h2>安装 Rdoc/ri 文档</h2>
删除 gem 文档后，使用 <code>rvm doc generate</code> 生成当前版本 Ruby 的文档，涵盖核心类和标准库。生成的 Html 文档会存放在 /.rvm/docs 下。

命令 ri 的使用示例：
<div>
<div id="highlighter_187585">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>ri Array</code><code>#sort </code></div>
<div><code>ri IO.readlines </code></div>
<div><code>ri String </code></div>
<div><code>ri gsub </code></div>
<div><code>ri File::</code><code>dirname</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
还可以加入一些常用的 gem 的文档，比如 nokogiri，<code>gem rdoc nokogiri -v 1.5.0</code>
<div>标签： <a href="http://jhjguxin.hwcrazy.com/tag/doc/">doc</a> <a href="http://jhjguxin.hwcrazy.com/tag/rails/">rails</a> <a href="http://jhjguxin.hwcrazy.com/tag/ruby/">ruby</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date>2012-01-18 12:02:47</wp:post_date>
		<wp:post_date_gmt>2012-01-18 04:02:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%bf%e7%94%a8-ri-%e5%91%bd%e4%bb%a4%e6%9f%a5%e7%9c%8b-api</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="doc"><![CDATA[doc]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bundle install and rbx-require-relative</title>
		<link></link>
		<pubDate>Tue, 31 Jan 2012 04:02:04 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=164</guid>
		<description></description>
		<content:encoded><![CDATA[# To use debugger
#rbx-require-relative is a port of Ruby 1.9’s relative_relative for Rubinus and MRI 1.8
#If you're running ruby1.9 then you don't need it. Remove it from your Gemfile.

#Don't require ruby-debug in your Gemfile as it has rbx-require-relative as a dependency. Add gem 'ruby-debug19' instead
<code>if RUBY_VERSION =~ /^1.9/
gem 'ruby-debug19'
else
gem 'ruby-debug'
end</code>

标签： bundle rails ruby]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date>2012-01-31 12:02:04</wp:post_date>
		<wp:post_date_gmt>2012-01-31 04:02:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bundle-install-and-rbx-require-relative</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bundle"><![CDATA[bundle]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rvm常用用法</title>
		<link></link>
		<pubDate>Tue, 31 Jan 2012 08:43:48 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=166</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>jhjguxin@jhjguxin-virtual-machine:~$ su<span>d</span>o gpassw<span>d</span> -a root rvm</strong>
<strong>A<span>d</span><span>d</span>ing user root to group rvm</strong>
<strong>jhjguxin@jhjguxin-virtual-machine:~$ su<span>d</span>o gpassw<span>d</span> -a jhjguxin rvm</strong>
<strong>A<span>d</span><span>d</span>ing user jhjguxin to group rvm</strong>
<strong>jhjguxin@jhjguxin-virtual-machine:~$ su<span>d</span>o gpassw<span>d</span> -a www-<span>d</span>ata rvm</strong>
<strong>A<span>d</span><span>d</span>ing user www-<span>d</span>ata to group rvm</strong>

<strong>这个是重点如果没有添加group的话则 install 会不成功</strong>
The installer no longer auto-a<span>d</span><span>d</span>s root or users to the rvm group. A<span>d</span>mins must <span>d</span>o this.
Also, please note that group memberships are ONLY evaluate<span>d</span> at login time.
This means that users must log out then back in be<span>f</span>ore group membership takes e<span>f</span><span><span>f</span>e</span>ct!

* I<span>f</span> you have any questions, issues an<span>d</span>/or i<span>de</span>as <span>f</span>or improvement please
<span>f</span>ork the project an<span>d</span> issue a pull request.

* I<span>f</span> you wish to <span>d</span>isable the project .rvmrc <span>f</span>ile <span>f</span>unctionality, set
rvm_project_rvmrc=0 in either /etc/rvmrc or ~/.rvmrc.
then log out an<span>d</span> back in.

* You _must_ rea<span>d</span> 'rvm requirements' <span>f</span>or a<span>d</span><span>d</span>itional OS speci<span>f</span>ic requirements <span>f</span>or
various rubies, an<span>d</span> native-extension gems. Expect <span>f</span>ailures until those are met!

* <span>F</span>or screen users, please <span>d</span>o not <span>f</span>orget to rea<span>d</span> https://rvm.beginrescueen<span>d</span>.com/work<span>f</span>low/screen/.
You will nee<span>d</span> to a<span>d</span><span>d</span> 'shell -/bin/bash' to your $HOME/.screenrc to properly loa<span>d</span> RVM.

* rvm_trust_rvmrcs has been change<span>d</span> to rvm_trust_rvmrcs_<span>f</span>lag <span>f</span>or consistency

* Project rvmrc <span>f</span>iles are now checke<span>d</span> <span>f</span>or trust whenever they change, as
promise<span>d</span> by the note <span>d</span>isplaye<span>d</span> <span>d</span>uring the review process

* Ruby package <span>de</span>pen<span>de</span>ncy list <span>f</span>or your OS is given by:
rvm requirements

* I<span>f</span> you encounter any issues with a ruby 'X' your best bet is to:
rvm get hea<span>d</span> &amp;&amp; rvm reinstall X

* I<span>f</span> you see the <span>f</span>ollowing error message: Unknown alias name: '<span style="background-color: #ffd700;">def</span>ault'
re-set your <span style="background-color: #ffd700;">def</span>ault ruby, this is <span>d</span>ue to a change in how <span style="background-color: #ffd700;">def</span>ault works.

* a<span>f</span>ter_use an<span>d</span> a<span>f</span>ter_c<span>d</span> hook now supports multiple <span>f</span>iles with a<span>f</span>ter_*_*
the custom hooks can be easily turne<span>d</span> on/o<span>f</span><span>f</span> by:
chmo<span>d</span> +x $rvm_path/hooks/a<span>f</span>ter_c<span>d</span>_[hook_name]
chmo<span>d</span> -x $rvm_path/hooks/a<span>f</span>ter_use_[hook_name]

* I<span>f</span> your shell exits on entering <span>d</span>irectory with <span>f</span>reshly checke<span>d</span> out sources
you shoul<span>d</span> up<span>d</span>ate .rvmrc <span>f</span>ile, an<span>d</span> replace any `exit ` with `return `.

* I<span>f</span> you wish to use RVM in an interactive <span>f</span>ashion in other shells
then place the <span>f</span>ollowing line at the en<span>d</span> o<span>f</span> your shell's loa<span>d</span>ing <span>f</span>iles
(.bashrc or .bash_pro<span>f</span>ile <span>f</span>or bash an<span>d</span> .zshenv <span>f</span>or zsh),
a<span>f</span>ter all PATH/variable settings:

<strong>in my system</strong>
<pre># This loads RVM into a shell session.
if [[ -s &quot;$HOME/.rvm/scripts/rvm&quot; ]]  ; then
 source &quot;$HOME/.rvm/scripts/rvm&quot;  &amp;&amp; echo &quot;add rvm sucessful …&quot;
fi</pre>
* On some systems (like Ubuntu) rvmsu<span>d</span>o requires <span>f</span>ollowing changes to work properly:
http://stackover<span>f</span>low.com/questions/257616/su<span>d</span>o-changes-path-why

* To up<span>d</span>ate RVM loa<span>d</span>ing co<span>de</span> appen<span>d</span> '--auto' to 'rvm get ...'

* In case you have some ol<span>d</span> RVM <span>f</span>iles/rubies in '/usr/local/bin' or '$HOME/bin' <span><span>f</span>e</span>el <span>f</span>ree to remove them,
they were copie<span>d</span> there because o<span>f</span> bug in path <span>de</span>tection.

* ZSH 4.3.15 is buggy, be care<span>f</span>ul with it, it can break RVM, especially multiuser installations,
You shoul<span>d</span> consi<span>de</span>r <span>d</span>owngra<span>d</span>ing ZSH to 4.3.12 which has proven to work more reliable with RVM.

# RVM:  Shell scripts enabling management o<span>f</span> multiple ruby environments.
# RT<span>F</span>M: https://rvm.beginrescueen<span>d</span>.com/
# HELP: http://webchat.<span>f</span>reeno<span>de</span>.net/?channels=rvm (#rvm on irc.<span>f</span>reeno<span>de</span>.net)
# Screencast: http://screencasts.org/episo<span>de</span>s/how-to-use-rvm

# In case o<span>f</span> any issues rea<span>d</span> output o<span>f</span> 'rvm requirements' an<span>d</span>/or 'rvm notes'

Upgra<span>de</span> o<span>f</span> RVM in /usr/share/ruby-rvm/ is complete.

# jhjguxin,
#
#   Thank you <span>f</span>or using RVM!
#   I sincerely hope that RVM helps to make your li<span><span>f</span>e</span> easier an<span>d</span> more enjoyable!!!
#
# ~Wayne

install <span>De</span>pen<span>de</span>ncies:(# librea<span>d</span>line6-<span>de</span>v is <span>d</span>isable)

su<span>d</span>o apt-get install buil<span>d</span>-essential openssl librea<span>d</span>line6 curl git-core zlib1g zlib1g-<span>de</span>v libssl-<span>de</span>v libyaml-<span>de</span>v libsqlite3-0 libsqlite3-<span>de</span>v sqlite3 libxml2-<span>de</span>v libxslt-<span>de</span>v autocon<span>f</span> libc6-<span>de</span>v ncurses-<span>de</span>v automake libtool bison subversion

I<span>f</span> installation an<span>d</span> con<span>f</span>iguration were success<span>f</span>ul, RVM shoul<span>d</span> now loa<span>d</span> whenever you open a new shell. This can be teste<span>d</span> by executing the <span>f</span>ollowing comman<span>d</span> which shoul<span>d</span> output <em>'rvm is a <span>f</span>unction'</em> as shown below.
<pre>user$ type rvm | hea&lt;span&gt;d&lt;/span&gt; -1
rvm is a &lt;span&gt;f&lt;/span&gt;unction</pre>
rvm常用用法
运行，

安装完成后，配置启动环境，修改~/.bashrc 文件，加入（我这里并不是这个文件但是只要找到就对）

# a<span>d</span><span>d</span> rvm
<pre># This loads RVM into a shell session.
if [[ -s &quot;$HOME/.rvm/scripts/rvm&quot; ]]  ; then
 source &quot;$HOME/.rvm/scripts/rvm&quot;  &amp;&amp; echo &quot;add rvm sucessful …&quot;
fi</pre>
在新的终端里就能看到rvm是否已安装成功：

$  rvm notes

RVM安装完成后，就可以通过TA来安装管理 Ruby 了。用下面一条命令来安装Ruby 1.9.2

$  rvm install 1.9.2

*Ruby包的下载实在太慢了，这里总是中断。有个小技巧，你可以用工具下载好ruby-1.9.2-p0.tar.bz2，然后手工放到~/.rvm/archives 目录下。然后再运行这条命令，就可以直接解压安装了。

&nbsp;

把该版本的Ruby设为默认

rvm --help
获得rvm的常用用法：

rvm [<span>F</span>lags] [Options] Action [Implementation[,Implementation[,...]]
rvm最常用的Action包括：

对Ruby的操作
主要包括读取，安装，卸载，更新，读取ruby等.

读取远程可安装的Ruby版本
#获得当前可以用的ruby版本
rvm list known
安装Ruby
#安装其中的ruby1.9.2-p290
rvm install ruby-1.9.2-p290
使用
#切换到刚刚安装的ruby1.9.2-p290版本
rvm use ruby1.9.2-p290
读取
#列出当前rvm下的ruby版本
rvm list
#查询当前使用的ruby版本路径
which ruby
#获得当前ruby版本
ruby -v
输出rvm当前使用的ruby版本与gemset信息：
rvm in<span>f</span>o
在项目文件中使用RVM
在自己的项目根目录下面，创建一个.rvmrc文件，里面内容可以指定ruby版本与gemset。例如，某项目根目录下面的.rvmrc文件内容如下：

rvm ruby-1.9.2-p290@rails31
这表示，该项目使用ruby1.9.2p290这个版本的ruby，gem安装在rails31下面。然后iterm的zsh或者bash；或者TextMate中的rubymate,rakemate；以及pow等工具就可以直接调用相应ruby版本与相应gemset。

&nbsp;

使用下面命令对RVM自己进行升级
$ rvm up<span>d</span>ate

RVM 信息

通过以下几个命令查看当前RVM当前信息

$ rvm in<span>f</span>o
$ rvm in<span>f</span>o 1.9.2
Ruby的安装使用与管理
用这个命令查看有哪些RVM可用的Ruby版本

$ rvm list known
$ rvm install 1.9.2    # 安装 ruby-1.9.2
$ rvm install ree   # install Ruby Enterprise E<span>d</span>ition (REE)

安装多个版本的Ruby之后，RVM可以很方便的进行切换。使用下条命令可以设置某一版本为当前使用版本。

$ rvm  ruby-1.8.7-p160 #切换1.8.7-p160为当前使用版本
$ rvm 1.8.7-p160    #同上面命令一样rvm ruby-1.8.7-p160
$ ruby -v #查看当前Ruby版本

&nbsp;

查看当前Ruby的安装位置

$ which ruby
设置默认使用版本
将某一个版本的ruby设为默认，这样避免每次启动新的Shell都要选择所要使用的Ruby版本。

$ rvm --default use 1.8.7   #设置1.9.2为默认版本

$ rvm <span style="background-color: #ffd700;">def</span>ault      #通过<span style="background-color: #ffd700;">def</span>ault可以快速回到默认版本
$ rvm list <span style="background-color: #ffd700;">def</span>ault     #查看当前版本设置信息
$ rvm reset     #恢复系统默认设置
查看已安装的Ruby信息
列出所有已经安装的Ruby的版本信息

$ rvm list      #列出已安装的Ruby版本

$ rvm list rubies     #同上
$ rvm list <span style="background-color: #ffd700;">def</span>ault    #显示默认Ruby版本信息
$ rvm list known     #列出RVM所支持的所有Ruby版本的信息

创建别名
使用带版本号的ruby时，每次切换时都要输入很长的版本号，非常的不方便，通过使用别名功能，可以创建很简短的别名来代替长长的ruby信息。

$ rvm alias create ree<span>d</span> ree-1.8.7-p2010.01    #为ree-187的Ruby版本创建一个别名叫：ree<span>d</span>

$ rvm use ree<span>d</span>  #通过别名迅速切换
$ rvm alias <span>de</span>lete ree<span>d</span>   #删除别名
$ rvm alias list # 查看所有的别名

删除已安装版本

$ rvm remove ruby-1.9.2-p0

$ rvm uninstall ruby-1.9.2-p0
管理 Gemsets
一个gemset就是一个目录，是某一个Ruby版本的Gem使用集，通过环境变量配置，使该gemset下的gem命令导入到Shell。

一个Ruby版本初装时就默认给了一个同名的gemset，也就是说rvm ruyb-1.9.2-p0 命令在执行时，就是使用该环境变量。

创建
基于指定Ruby版本创建一个新的Gemset

$ rvm 1.9.2  #？？？
$ rvm gemset create rails3  #创建一个名为rails3的gemset
使用
指定某一个gemset作为当前环境使用。

$ rvm 1.9.2  #？？？

$ rvm gemset use rails3   #在当前Ruby下使用rails3这个gemset

$ rvm use ruby-1.9.2-p0@rails3 #或者直接使用这种命名，直接指定ruby和gemset的信息。
$ rvm use ruby-1.9.2-p0@rails3 --<span style="background-color: #ffd700;">def</span>ault   #设置默认
查看Gemsets信息

$ rvm <span style="background-color: #ffd700;">def</span>ault  #选择使用ruby版本

列出当前Ruby版本下所有gemsets的信息r

$ rvm gemset list

列出所有Ruby版本下所有gemsets的信息

$ rvm gemset list_all
显示当前所使用的gemset信息
$ rvm gemset name     #当前gemset的名称

rails3
$ rvm gem<span>d</span>ir   #所在位置
~/.rvm/gems/ruby-1.9.2-p0@rails3
删除
删除一个gemset，默认有确认操作，使用 --<span>f</span>orce 可跳过该步骤。

$ rvm gemset <span>de</span>lete rails3  #会让确认一次
$ rvm --<span>f</span>orce gemset <span>de</span>lete rails3     #直接删除，没有确定步骤
清空
可以清空一个Gemset，删除其中的所有的gems包

$ rvm gemset empty rails3
$ rvm --<span>f</span>orce gemset empty rails3   #直接删除，没有确定步骤

导出
将当前gemsets内的信息导出到一个 name.gems文件，gems文件内定义gem的名称，版本号和其信赖关系。

$ rvm gemset export rails3.gems
导入
将gems文件所指定的gems安装到当前gemset下。

$ rvm gemset rails 3
$ rvm gemset import rails3
复制
可以将一个gemset内的所有gems包都复制到另一个gemset，很快速的复制一个当前环境。

$ rvm gemset copy 1.8.7@rails3 1.9.2-hea<span>d</span>@rails3

全局 gemsets （global gemsets）

每一个ruby版本都默认创建一个全局的gemset，以ruby_version@global命名，这样基于该ruby版本下所有的gemsets都会包含全局gemset里的gem包。可以起到统一约定的作用，也避免重复创建。
默认安装的global gemset内仅有一个gem包：rake

<strong>找不到rails 是因为 你没有 在系统环境 安装rails 也没有指定 rvm使用哪一个 ruby版本 或者组环境 或者指定默认ruby版本 甚至不知道 rails 安装在哪个 组环境中</strong>

&nbsp;
<div>标签： <a href="http://jhjguxin.hwcrazy.com/tag/rails/">rails</a> <a href="http://jhjguxin.hwcrazy.com/tag/ruby/">ruby</a> <a href="http://jhjguxin.hwcrazy.com/tag/rvm/">rvm</a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date>2012-01-31 16:43:48</wp:post_date>
		<wp:post_date_gmt>2012-01-31 08:43:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rvm%e5%b8%b8%e7%94%a8%e7%94%a8%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="rvm"><![CDATA[rvm]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_aca53ff70bb49375c5d00fb7d55a5d0f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>113</wp:comment_id>
			<wp:comment_author><![CDATA[remove duplicate emails from outlook]]></wp:comment_author>
			<wp:comment_author_email>hermine@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.duplifinder.com</wp:comment_author_url>
			<wp:comment_author_IP>110.232.41.198</wp:comment_author_IP>
			<wp:comment_date>2012-02-15 00:40:34</wp:comment_date>
			<wp:comment_date_gmt>2012-02-14 16:40:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi there, I enjoy reading all of your post. I like to write a little comment to support you.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>rvm on ubuntu 11.10 install ruby 1.9.2 error</title>
		<link></link>
		<pubDate>Tue, 31 Jan 2012 14:42:07 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=185</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

When trying to install ruby 1.9.2 using rvm I got a nasty suprise:
<div>
<pre>ossl_ssl.c:110:1: error: ‘SSLv2_method’ undeclared here (not in a function)
ossl_ssl.c:111:1: error: ‘SSLv2_server_method’ undeclared here (not in a function)
ossl_ssl.c:112:1: error: ‘SSLv2_client_method’ undeclared here (not in a function)
make[1]: *** [ossl_ssl.o] Error 1
make[1]: Leaving directory `/var/cache/ruby-rvm/src/ruby-1.9.2-p180/ext/openssl'
make: *** [mkmain.sh] Error 1</pre>
</div>
<h2>The solution</h2>
<div>
<pre>sudo apt-get install ruby-rvm
# make sure we have $rvm_path
source /etc/profile
# don't use ubuntus openssl
rvm package install openssl
or
rvm pkg install openssl
rvm install 1.9.2 --with-openssl-dir=$rvm_path/usr</pre>
</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>185</wp:post_id>
		<wp:post_date>2012-01-31 22:42:07</wp:post_date>
		<wp:post_date_gmt>2012-01-31 14:42:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rvm-on-ubuntu-11-10</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="openssl"><![CDATA[openssl]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="rvm"><![CDATA[rvm]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using RVM with Heroku</title>
		<link></link>
		<pubDate>Wed, 01 Feb 2012 03:29:20 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=192</guid>
		<description></description>
		<content:encoded><![CDATA[Heroku is a deployment platform for running rails application on a scalable architecture.

Heroku provides a managed multi-tenant environment to run rails applications and does not provide a mechanism for running RVM directly since client apps do not have access to a configurable environment or command line. However RVM remains a useful tool for managing developments and making sure that development and test environments match the environment on Heroku's platform.

Check which version of the Heroku stack your app will be deployed on ( or by running the Herou command line `heroku stack`) and setup your .rvmrc to use the same Ruby version as your stack.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>192</wp:post_id>
		<wp:post_date>2012-02-01 11:29:20</wp:post_date>
		<wp:post_date_gmt>2012-02-01 03:29:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-rvm-with-heroku</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="heroku"><![CDATA[heroku]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>在Heroku上部署（托管）你的Rails应用</title>
		<link></link>
		<pubDate>Wed, 01 Feb 2012 06:56:41 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=195</guid>
		<description></description>
		<content:encoded><![CDATA[Heroku 是Ruby on Rails的托管提供商，提供运行Ruby on Rails应用的整套环境。和传统的托管商相比，他并不仅仅是提供一个服务器给你，而且提供有趣的工具和接口来帮助你更加容易的工作，使你从繁重的安装、配置、管理和保证服务器安全中解脱出来。
Heroku是用git来管理项目的，另外还要用到ssh来登录，这两个工具在Linux环境下的安装方法如下：
git安装

ssh安装

当然要使用Heroku，你就要到其 官方网 注册一个账号；
以上工作完成后，并可进行如下操作，将你的Rails应用托管到Heroku：

以来内容转自： http://hi.baidu.com/haifreeidea/blog/item/e09279c53b7d06c338db49c9.html

①、＄ gem install heroku

②、先要生成一个公钥，使用命令:
$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/user/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/user/.ssh/id_rsa.
Your public key has been saved in /home/user/.ssh/id_rsa.pub.
The key fingerprint is:
a6:88:0a:bb:74:70:c6:e0:d5:49:65:e3:04:d5:6c:3e user@workstation.local

把公钥加入到Heroku
$ heroku keys:add
Uploading ssh public key /home/user/.ssh/id_rsa.pub

如果想删除公钥，可以用命令：
$ heroku keys:remove user@workstation.local

查看公钥，用命令：
$ heroku keys

③、现在就可以创建一个项目了(预先要安装好rails)。
$ rails myapp            (如果是已有的应用，这一步可以跳过)

$ cd myapp
$ git init
$ git add .
$ git commit -m "my first commit"
Created initial commit 5df2d09: my first commit
44 files changed, 8393 insertions(+), 0 deletions(-)
create mode 100644 README
create mode 100644 Rakefile
create mode 100644 app/controllers/application.rb
...
<h2>In heroku how to control the ruby version</h2>
Usage: heroku stack

show the list of available stacks

--all  # include deprecated stacks

Additional commands, type "heroku help COMMAND" for more details:

stack:migrate STACK  # prepare migration of this app to a new stack

use heroku create --stack to creat the stack

heroku create --stack bamboo-ree-1.8.7

&nbsp;

④、把这个项目创建到Heroku上。
＄ heroku create myapp
Enter your Heroku credentials.
Email: user@example.com
Password:
Uploading ssh public key /home/user/.ssh/id_rsa.pub
（当第一次运行heroku命令时，要求输入Email，password，这个是你在Heroku注册的Email和密码，以便创建~/.heroku/credentials文件，这个文件记录了你输入的用户名和密码，以后就不再需要输入了。）

⑤、接下来运行：
$ git push heroku master
Counting objects: 65, done.
Compressing objects: 100% (58/58), done.
Writing objects: 100% (65/65), 80.54 KiB, done.
Total 65 (delta 14), reused 0 (delta 0)

-----&gt; Heroku receiving push
-----&gt; Rails app detected
Compiled slug size is 0.1MB
-----&gt; Launching....... done
App deployed to Heroku

To git@heroku.com:vivid-mountain-91.git
* [new branch]      master -&gt; master

⑥、再做一个数据库迁移：
$ heroku rake db:migrate

现在就可以像平常使用Rails一样编写程序了。

更新代码可以用：
$ git push heroku

The rake db:reset task is not supported. Heroku apps do not have permission to drop and create databases. Use the heroku pg:reset command instead.

将本地数据更新到Heroku网站上:
$ heroku db:push
（这个命令会使用taps，如果没有安装，请先安装。）

要打开网页浏览，就可以用
$ heroku open

<strong>Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly</strong>

jhjguxin@jhjguxin-virtual-machine:~/heroku_enki$ git push heroku master
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
jhjguxin@jhjguxin-virtual-machine:~/heroku_enki$ heroku keys:add ~/.ssh/id_rsa.pub
Uploading ssh public key /home/jhjguxin/.ssh/id_rsa.pub
jhjguxin@jhjguxin-virtual-machine:~/heroku_enki$ git push heroku masterCounting objects: 460, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (418/418), done.
Writing objects: 100% (460/460), 447.32 KiB | 141 KiB/s, done.
Total 460 (delta 55), reused 0 (delta 0)

about db

To ease deployment of typical Rails applications, Heroku automatically generates a new database.yml file on deployment. This auto-generated database.yml file configures your RACK_ENV environment to your selected postgres db. This enables you to simply push a Rails app up to Heroku and have it automatically connect to your database.

I had the same problem, and although I did not solve the problem, I found a workaround.

Instead of using:

heroku run rake db:migrate

You can use:

heroku run:detached rake db:migrate

This runs the command in the background, writing the output to the log. When it is finished you can view the log for the result.

自己生成的git地址不好看，最好在<strong>本地</strong>改
<div id="">
<ol start="1">
	<li>heroku rename newname</li>
</ol>
</div>
帐号下改完要
<ol start="1">
	<li>$ git remote rm heroku</li>
	<li>$ git remote add heroku git@heroku.com:newname.git</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>195</wp:post_id>
		<wp:post_date>2012-02-01 14:56:41</wp:post_date>
		<wp:post_date_gmt>2012-02-01 06:56:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>permission-denied-publickey-when-deploying-heroku-code-fatal-the-remote-end-hung-up-unexpectedly</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="develop"><![CDATA[develop]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="heroku"><![CDATA[heroku]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Errno::ECONNREFUSED:  Connection refused - connect(2) while connecting to a remote solr instance from Sunspot</title>
		<link></link>
		<pubDate>Fri, 03 Feb 2012 12:10:49 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=204</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Quickstart with Rails 3</h2>
Add to Gemfile:
<div>
<code>gem 'sunspot_rails'
gem 'sunspot_solr' # optional pre-packaged Solr distribution for use in development</code>
</div>
Bundle it!
<div>
<pre>bundle install</pre>
</div>
Generate a default configuration file:
<div>
<pre>rails generate sunspot_rails:install</pre>
</div>
If <code>sunspot_solr</code> was installed, start the packaged Solr distribution with:

<code>bundle exec rake sunspot:solr:start # or sunspot:solr:run to start in foreground</code>

Now that Sunspot knows how to index the <code>Post</code> model, we need to get the existing data into Solr. Any time a <code>Post</code> is created, updated, or destroyed, Sunspot::Rails will automatically make the change to the index; you only need to do a full reindex if you’ve added or changed a <code>searchable</code> definition for a model.

<code>$ rake sunspot:reindex</code>

If <code>sunspot_solr</code> was installed, start the packaged Solr distribution with:
<div>
<code>jhjguxin@jhjguxin-Aspire-4750:~$ heroku run:detached rake sunspot:solr:start RAILS_ENV=production rake sunspot:solr:start --app francisjiang
or type:sunspot-solr start -- -p 8983 or sunspot-solr start -- -p 8983 -d data/solr/myapp</code>
Try to start the solr
<pre>
<code>##with apache+solr+rails
jhjguxin@jhjguxin-virtual-machine:/var/www/enki$ sudo gem install sunspot_solr
Successfully installed escape-0.0.4
Successfully installed sunspot_solr-1.3.0
2 gems installed
Installing ri documentation for escape-0.0.4...
Installing ri documentation for sunspot_solr-1.3.0...
Installing RDoc documentation for escape-0.0.4...
Installing RDoc documentation for sunspot_solr-1.3.0...
jhjguxin@jhjguxin-virtual-machine:/var/www/enki$ sudo sunspot-solr start -- -p 8983 -d solr/data/
[sudo] password for jhjguxin: 
java version "1.6.0_23"
OpenJDK Runtime Environment (IcedTea6 1.11pre) (6b23~pre11-0ubuntu1.11.10.1)
OpenJDK Client VM (build 20.0-b11, mixed mode, sharing)
</code>
</pre>

Solr服务控制
将以上内容添加到Rakefile后，将会多出4个task出来

服务器启动:
rake sunspot:solr:start
初次启动，会安装一个embed的solr程序，那么开发环境中省去了安装配置Solr环境繁琐步骤。不过，production环境里可不要使用这个embed版。

服务器停止:
rake sunspot:solr:stop
全部重建索引：
rake sunspot:reindex
如果你想看到运行日志，把服务跑在前端。可以使用一下命令:
rake sunspot:solr:run
使用以上命令，就能完成对Sunspot的控制。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date>2012-02-03 20:10:49</wp:post_date>
		<wp:post_date_gmt>2012-02-03 12:10:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>errnoeconnrefused-connection-refused-connect2-while-connecting-to-a-remote-solr-instance-from-sunspot</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="sunspot"><![CDATA[sunspot]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails form_for with associations defined and multipart set to true not working</title>
		<link></link>
		<pubDate>Wed, 08 Feb 2012 14:26:34 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=219</guid>
		<description></description>
		<content:encoded><![CDATA[So I have one form:

<%= form_for([@document, @comment]) do |f| %>

Showing /home/jhjguxin/enki/app/views/posts/show.html.erb where line #31 raised:

wrong number of arguments (2 for 1)
Any ideas? Running Rails 3.1.3 with Ruby 1.9.2p180
Bellow will fix it

<%= form_for (@comment, :url => [@document, @comment]) do |f| %>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date>2012-02-08 22:26:34</wp:post_date>
		<wp:post_date_gmt>2012-02-08 14:26:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-form_for-with-associations-defined-and-multipart-set-to-true-not-working</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="form"><![CDATA[Form]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby 异常处理 begin ...end</title>
		<link></link>
		<pubDate>Thu, 09 Feb 2012 06:24:23 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=224</guid>
		<description></description>
		<content:encoded><![CDATA[在java中，异常的捕捉是在try ... catch当中进行，而ruby则是在begin ... end代码块中进行异常的捕捉，在该代码块中使用rescue关键字进行捕捉异常类型，注意哦，这个是关键字，而不是方法。
Ruby代码
begin
   ......                                #可能出现异常的代码   
rescue   errorType1             #要捕捉的异常类型   
   ......                                #处理异常的代码   
rescue   errorType2             #要捕捉的异常类型   
   ......                                #处理异常的代码   
end
以上代码就是一个大概的捕捉异常的例子，在begin和end代码块中通过rescue进行异常类型的捕捉然后进行适当的处理，可是如果抛出的异常类型并没有显示的捕捉如何处理呢？那就是在最后使用else，如下：
Ruby代码
begin
   ......                                #可能出现异常的代码   
rescue   errorType1             #要捕捉的异常类型   
   ......                                #处理异常的代码   
rescue   errorType2             #要捕捉的异常类型   
   ......                                #处理异常的代码   
else
   ......                                #如果以上代码类型都没有捕捉到，则运行该段代码   
end

这时又有一个问题，如果我想获取异常信息又该如何做呢？请看下面的代码：
Ruby代码
begin
   raise ArgumentError, "Bad data"
rescue => err   
   puts err   
end
通 过rescue => variable的方式，就可以将异常保存为一个variable了。又解决了一个问题，还有什么问题呢？啊，对了，在java的使用当中，比如使用 Connection进行数据库连接后，最后一定要进行资源的清理，都是在finally块当中进行的，可是在ruby中又如何进行这些资源的清理呢？看 看下面的代码：
Ruby代码
begin
   raise ArgumentError, "Bad data"
rescue => err   
   puts err   
ensure
   ...                        #执行清理工作   
end

<pre>
module GitHelper
  def list_user_repos(user="jhjguxin", options={})
    skip_fork = options[:skip_fork] || false
    sort_by = options[:sort_by] || "created_at"
    github = Github.new
    begin 
      repos=github.repos.list_repos :user => user
    #rescue   errorType1             #要捕捉的异常类型
    #......                                #处理异常的代码 
    rescue => err   
      puts err
      return repos=[]
    ensure #这里的代码在总是被执行，可以做一些清理工作
      puts "process finished ..."
    end
    if skip_fork
      repos.each do |r|
        repos.delete(r) if r.fork==true
        #breakpoint
      end

    else
      repos
    end
  end
end
</pre>



 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>224</wp:post_id>
		<wp:post_date>2012-02-09 14:24:23</wp:post_date>
		<wp:post_date_gmt>2012-02-09 06:24:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86-begin-end</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="exceptions"><![CDATA[Exceptions]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tracking Rails 3.1 and asset pipeline problems with Apache </title>
		<link></link>
		<pubDate>Fri, 10 Feb 2012 06:30:24 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=226</guid>
		<description></description>
		<content:encoded><![CDATA[ubuneu install apache module
<code>sudo apt-get install libapache2-mod-xsendfile</code>

#enki_apache_passenger.conf
<pre>
<code>
LoadModule rewrite_module /usr/lib/apache2/modules/mod_rewrite.so
LoadModule passenger_module /usr/share/ruby-rvm/gems/ruby-1.8.7-p357/gems/passenger-3.0.11/ext/apache2/mod_passenger.so
#sudo apt-get install libapache2-mod-xsendfile
LoadModule xsendfile_module /usr/lib/apache2/modules/mod_xsendfile.so
PassengerRoot /usr/share/ruby-rvm/gems/ruby-1.8.7-p357/gems/passenger-3.0.11
PassengerRuby /usr/share/ruby-rvm/rubies/ruby-1.8.7-p357/bin/ruby</code>

# PassengerMaxPoolSize 10

#ServerName www.yourhost.com
# DocumentRoot /var/www/enki/public
XSendFile On

RewriteEngine On

# AllowOverride all
# Options -MultiViews
# THIS IS REALLY IMPORTANT
XSendFilePath /var/www/enki

LoadModule headers_module /usr/lib/apache2/modules/mod_headers.so
LoadModule expires_module /usr/lib/apache2/modules/mod_expires.so

# Some browsers still send conditional-GET requests if there's a
# Last-Modified header or an ETag header even if they haven't
# reached the expiry date sent in the Expires header.
Header unset Last-Modified
Header unset ETag
# This required etag module to be enabled. Comment out
FileETag None
# RFC says only cache for 1 year
ExpiresActive On
ExpiresDefault "access plus 1 year"
</code>
</pre>


If you have a module version &lt; 0.10, add this to the virtual host config that needs to send files:
<code>
XSendFile On
XSendFileAllowAbove On
</code>
This allows any file path (not only those below your VHost root) to be sent through X-Sendfile, which is sort of bad practice. You can either live with it or compile a newer version of the module.

If you got a module version &gt;= 0.10 you can whitelist the allowed paths instead:
<code>
XSendFile On
XSendFilePath /opt/www/awesome-project
</code>

<h2>Migrating my blog over to Rails 3.1 beta<h2>

# Enable the asset pipeline
config.assets.enabled = true

config/environments/development.rb (remove or comment out the following line)
<pre>
<code>#config.action_view.debug_rjs             = true
</code>
</pre>

config/environments/production.rb (add these lines) 
<pre>
<code># Compress both stylesheets and JavaScripts
config.assets.js_compressor  = :uglifier
config.assets.css_compressor = :scss
</code>
</pre>

<pre>
<code>mkdir app/assets
git mv public/images app/assets/images
git mv public/javascripts app/assets/javascripts
git mv public/stylesheets app/assets/stylesheets
</code>
</pre>

Finally, in your production environment, don’t forget to statically generate your compiled assets with this Rake task:
<pre>
<code>RAILS_ENV=production bundle exec rake assets:precompile
</code>
</pre>
It will create files such as these:

<pre>
<code>
public/assets/application-2a8947193a591b79c885c52fbc6b01d3.css
</code>
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date>2012-02-10 14:30:24</wp:post_date>
		<wp:post_date_gmt>2012-02-10 06:30:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tracking-rails-3-1-and-asset-pipeline-problems-with-apache</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apache"><![CDATA[apache]]></category>
		<category domain="post_tag" nicename="asset"><![CDATA[asset]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails Rake指南</title>
		<link></link>
		<pubDate>Mon, 13 Feb 2012 05:47:31 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=233</guid>
		<description></description>
		<content:encoded><![CDATA[这是Rails Envy网站的一篇Rake指南，你可以在这里找到原文。

作为RoR开发者，你对Rake一定不会陌生，你可能用它来完成你的单元测试，也可能是迁移数据库，但是你真正理解这些Rake任务到底是怎么运作的吗？你有尝试过创建你自己的Rake任务吗？

在这篇文章中，我们将会介绍Rake的由来，以及如何在Rails中使用它，通过这篇文章的学习，你将掌握如何使用Rake创建你自己的任务。

为什么要有Rake

要理解Rake，我们首先得来了解一下Rake的历史悠远的祖先：Make。因此我们需要暂且回到解释型语言产生之前的久远年代，在那个时代，所有代码都需 要被编译，然后才能够被执行，所以当你从Internet下载到一个相当庞大的程序后，一般来说，除了源代码，程序包中还会包含一个类似 “install_me.sh”的Shell脚本，它会负责帮你完成源代码的编译，并生成最终的可执行文件。

这看起来很完美，不是吗？对用户来说可能如此，但对于开发者来说，这却是个相当粗笨的方法，因为即使你只是修改了一个文件中的一小段代码，”install_me.sh”也必须将所有的源代码都重新编译一遍，才能生成最终的可执行文件。

因此，针对这个问题，Bell实验室的Stuart Feldman创造了Make：

Make可以识别自上次编译之后那些文件发生了改变，从而在下次编译时只对这些发生改变的文件进行编译，而忽略那些没有变化的文件，从而大大降低了程序的编译时间。 
Make同时支持依赖关系追踪，也就是你可以告诉编译器，文件A依赖于文件B，因此当文件B发生改变后，文件A也会被重新编译，并且如果编译文件A时，文件B还没有被编译，那么Make会告诉编译器应该先编译文件B。 
Make 实际上是一个跟ls和dir差不多的可执行文件，只不过你需要提供一个Makefile文件给它作为输入，Makefile中对每个需要编译的文件及它们 的依赖关系进行定义，Makefile的语法类似于Shell脚本，但又有些不同，这里我们不需要关心Makefile的语法。

随着Make的语言中立性，任何语言的程序都可以使用它来作为构建（build）系统，事实上，在Rake产生之前，许多Ruby项目也是采用Make作为构建系统的。

你可能会奇怪：“Ruby程序并不需要被编译，为何还要使用Make呢？”，是的，Ruby的确不需要编译，事实上，Ruby程序员使用Make是出于以下两个原因：

创 建任务，对于大型程序来说，编译完成并不意味着可以了事，往往你需要编写一大堆的脚本来控制它的运行，或者查看它的运行状态等等，这种情况下，你就可以创 建一个Makefile来管理所有这些任务，然后你就可以使用诸如“make stupid”，“make clever”来分别运行糊涂和聪明任务了。 
依 赖关系追踪，当你开始写一个库的时候，你可能会发现，越来越的的任务存在重复，比如”migrate“和”shema: dump“就都需要连接数据库，这时你就可以抽象出一个”connect_to_db”任务，并设置”migrate”和”shema: dump”任务都依赖于”connect_to_db”，这样当你单独运行”migrate”或者”shema:dump”任务时， “connect_to_db”任务都会被首先调用，如果你同时运行这两个任务，那么”connect_to_db”任务只会被执行一次。 
Rake是怎么来的？

很多年以前，当 Jim Weirich还在为一个Java项目工作时，他最初的选择也是Makefile，但是很快他意识到：要是能够在Makefile中嵌入Ruby代码，那会是多么的方便呀，于是，Rake就这么产生了。

Rake支持任务创建，任务依赖关系追踪，以及文件编译时间识别。最后一个功能对Ruby程序员应该用不到，但如果你同时还是一个C程序员，那么你可以尝试使用Rake来替代Make。

Rake如何工作

让我们通过一个例子来说明吧，假设我今天很郁闷，想要借酒消愁，这个过程涉及以下几个任务：

买酒 
买下酒菜 
搞掂它们 
假设使用Rake来管理这3个任务，那么我首先需要创建一个Rakefile文件：

task :purchaseAlcohol do
  puts "来瓶五粮液"
end
task :mixDrink do
  puts "上盘花生米"
end
task :getSmashed do
  puts "老板, 啥时学的分身术, 很强嘛?"
end

然后我就可以从Rakefile文件所在的目录来完成这些任务了：


$ rake purchaseAlcohol
来瓶五粮液
$ rake mixDrink
上盘花生米
$ rake getSmashed
老板, 啥时学的分身术, 很强嘛?

很简单吧！但是有些问题，我可不想还没喝酒吃东西就看到老板的分身，这会被人当作精神不正常。

如何组织任务的依赖关系

很简单：

task :purchaseAlcohol do
  puts "来瓶五粮液"
end
task :mixDrink => :purchaseAlcohol do
  puts "上盘花生米"
end
task :getSmashed => :mixDrink do
  puts "老板, 啥时学的分身术, 很强嘛?"
end

搞掂，现在再试试：

$ rake purchaseAlcohol
来瓶五粮液
$ rake mixDrink
来瓶五粮液
上盘花生米
$ rake getSmashed
来瓶五粮液
上盘花生米
老板, 啥时学的分身术, 很强嘛?

就像你看到的，现在我想要醉必须得先喝点酒吃点花生才行，不过一个人喝酒总归有些无聊，所以我想喊些哥们一起来喝，但是我又懒得跟他们解释为啥突然喊他们来喝酒（本人平时比较吝啬），我想到一个偷懒的办法，给他们看文档，但是究竟该怎么为我的Rake任务生成文档呢？

为Rake任务生成文档
再简单不过了：

desc "工作郁闷，想喝点酒"
task :purchaseAlcohol do
  puts "来瓶五粮液"
end
desc "得有点下酒菜"
task :mixDrink => :purchaseAlcohol do
  puts "来盘花生米"
end
desc "开喝，不醉不归"
task :getSmashed => :mixDrink do
  puts "老板, 啥时学的分身术, 很强嘛?"
end

就像你看到的，我的每个任务都有了一个desc字段，现在我和我的朋友们就可以通过rake -T或者rake –task来查看每个任务的文档了：

$ rake --tasks
rake getSmashed # 开喝，不醉不归
rake mixDrink # 得有点下酒菜
rake purchaseAlcohol # 工作郁闷，想喝点酒

Rake命名空间

一旦养成了工作郁闷就喝酒的好习惯之后，你很快就会发现，自己成了个酒鬼，因此你不得不写一大堆Rake任务来集结你的狐朋狗友们，这时你就会发现命名空间的重要性：

namespace :alcoholic do
  desc "工作郁闷，想喝点酒"
  task :purchaseAlcohol do
    puts "来瓶五粮液"
  end
  desc "得有点下酒菜"
  task :mixDrink => :purchaseAlcohol do
    puts "来盘花生米"
  end
  desc "开喝，不醉不归"
  task :getSmashed => :mixDrink do
    puts "老板, 啥时学的分身术, 很强嘛?"
  end
end
namespace :girlfriend do
  desc "那个，喝点红酒吧"
  task :purchaseAlcohol do
    puts "来瓶干红"
  end
end

命名空间允许你将你的任务进行分类，你可以在一个Rakefile内创建多个命名空间，现在输入rake –tasks你会得到如下输出：

rake alcoholic:getSmashed # 开喝，不醉不归
rake alcoholic:mixDrink # 得有点下酒菜
rake alcoholic:purchaseAlcohol # 工作郁闷，想喝点酒
rake girlfriend:purchaseAlcohol # 那个，喝点红酒吧

有用的任务

上面都是扯淡，毕竟人生除了喝酒还有更重要的事情等着我们去做，下面，我们来干点正经事，假设我们需要完成这样一个任务，给定一组目录，如果不存在，就创建它们，我创建的Rake任务如下：

desc "Create blank directories if they don't already exist"
task(:create_directories) do
  # The folders I need to create
  shared_folders = ["icons","images","groups"]
    for folder in shared_folders
    # Check to see if it exists
    if File.exists?(folder)
      puts "#{folder} exists"
    else
      puts "#{folder} doesn't exist so we're creating"
      Dir.mkdir "#{folder}"
    end
  end
end

默认情况下，Rake具有所有File Utils包的功能，当然你也可以通过引用其他库来做任何你想做的事情，那么下一个问题就是：我应该如何在Rails中使用Rake呢？

在Rails中使用Rake

每个Rails应用本身都在带有许多预定义的Rake任务，你可以通过在你的Rails应用的根目录下执行rake –tasks来查看可用的rake任务，别以后了，现在就试试吧，我等你！

要创建新的Rake任务，你只需打开你的Rails应用的lib/tasks目录，并将你的Rakefile命名为”somethins.rake”即可，它会自动被主Rakefile引用，然后你就可以在主目录下调用你的rake任务了，让我们继续上面那个例子：

utils.rake

namespace :utils do
  desc "Create blank directories if they don't already exist"
 task(:create_directories) do
  # The folders I need to create
  shared_folders = ["icons","images","groups"]
  for folder in shared_folders
   # Check to see if it exists
   if File.exists?("#{RAILS_ROOT}/public/#{folder}")
    puts "#{RAILS_ROOT}/public/#{folder} exists"
   else
    puts "#{RAILS_ROOT}/public/#{folder} doesn't exist so we're creating"
    Dir.mkdir "#{RAILS_ROOT}/public/#{folder}"
   end
  end
 end
end

再次执行rake –tasks，你会看到如下结果

......
rake tmp:pids:clear # Clears all files in tmp/pids
rake tmp:sessions:clear # Clears all files in tmp/sessions
rake tmp:sockets:clear # Clears all files in tmp/sockets
rake utils:create_directories # Create blank directories if they
don't already exist

从Rake任务中可以访问rails model吗？

是的，当然可以，这是我使用Rake最主要的用途：运行一些需要手动执行的任务，或者是需要脱离Rails定期运行的任务，下面是一个简单的例子：

namespace :utils do
  desc "Finds soon to expire subscriptions and emails users"
  task(:send_expire_soon_emails => :environment) do
    # Find users to email
    for user in User.members_soon_to_expire
      puts "Emailing #{user.name}"
      UserNotifier.deliver_expire_soon_notification(user)
    end
  end
end

实在是很简单，你只需要在你的任务之前执行”=> :environment“就可以了。

如果需要在开发模式执行这个任务，直接敲”rake utils:send_expire_soon_emails”就可以了，如果是产品模式，敲”rake RAILS_ENV=production utils:send_expire_soon_emails”，现在如果我想让这个任务每天晚上运行一次，那么，我只需要在cronjob文件中加入下面这行就可以了：

0 0 * * * cd /var/www/apps/rails_app/ && /usr/local/bin/rake RAILS_ENV=production utils:send_expire_soon_emails

还有更多的例子吗？


<pre>
<code>namespace :sunspot do
  namespace :solr do
    desc 'Start the Solr instance'
    task :start => :environment do
      case RUBY_PLATFORM
      when /w(in)?32$/, /java$/
        abort("This command is not supported on #{RUBY_PLATFORM}. " +
              "Use rake sunspot:solr:run to run Solr in the foreground.")
      end

      if defined?(Sunspot::Rails::Server)
        Sunspot::Rails::Server.new.start
      else
        Sunspot::Solr::Server.new.start
      end

      puts "Successfully started Solr ..."
    end

    desc 'Run the Solr instance in the foreground'
    task :run => :environment do
      if defined?(Sunspot::Rails::Server)
        Sunspot::Rails::Server.new.run
      else
        Sunspot::Solr::Server.new.run
      end
    end

    desc 'Stop the Solr instance'
    task :stop => :environment do
      case RUBY_PLATFORM
      when /w(in)?32$/, /java$/
        abort("This command is not supported on #{RUBY_PLATFORM}. " +
              "Use rake sunspot:solr:run to run Solr in the foreground.")
      end

      if defined?(Sunspot::Rails::Server)
        Sunspot::Rails::Server.new.stop
      else
        Sunspot::Solr::Server.new.stop
      end

      puts "Successfully stopped Solr ..."
    end

    # for backwards compatibility
    task :reindex => :"sunspot:reindex"
  end
end</code>
</pre>


不用担心，只要你有时间，并且愿意看，例子大把：

These brand new rake tasks in Edge Rails create and reset your databases for you. Neato! 
Craig Ambrose wrote a Rake task to do database backups, which you can use. 
Adam Greene put together a set of Rake tasks that allow you to backup all your data to Amazon S3 
Jay Fields made a good point when he talked about testing rake tasks 
Err the blog talks about a new way of setting the RAILS_ENV and teaches how to use rake to boot you into a Mysql shell (be sure to read the comments if you browse this one). 
Last, but not least, there’s the Rake Bookshelf Books and Martin Fowler’s Using the Rake Build Language tutorial . Both of these are pretty thorough, but also a little dated 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>233</wp:post_id>
		<wp:post_date>2012-02-13 13:47:31</wp:post_date>
		<wp:post_date_gmt>2012-02-13 05:47:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-rake%e6%8c%87%e5%8d%97</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rake"><![CDATA[rake]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rvm下安装gem编译失败 linecache19</title>
		<link></link>
		<pubDate>Tue, 14 Feb 2012 07:41:45 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=237</guid>
		<description></description>
		<content:encoded><![CDATA[报错:An error occured while installing linecache19 (0.5.12), and Bundler cannot continue.

以下引用stackoverflow中的解答

ruby -v

then manually use --force to bypass version check:

gem install ruby_core_source

gem install linecache19 --force

if you faced with another error starting with following lines:

checking for vm_core.h... no

*** extconf.rb failed ***

You have to explicitly set the source path to vm_core.h

In my case:

$ which ruby

/<span style="background-color: #ffd700;">User</span>s/Reza/.rvm/rubies/ruby-1.9.2-rc2/bin/ruby

$ echo $rvm_path

/<span style="background-color: #ffd700;">User</span>s/Reza/.rvm/

so to install linecache19 :

gem install ruby_core_source

gem install linecache19 --force -- --with-ruby-include=$rvm_path/src/ruby-1.9.2-rc2/

ruby-debug19 has a similar issue:

gem install ruby-debug19 --force -- --with-ruby-include=$rvm_path/src/ruby-1.9.2-rc2/

That's all!

=====================================

关键地方:

gem install ruby_core_source

if cannot `rvm pkg install openssl`
  `sudo rvm pkg install openssl`
end

rvm remove 1.9.2-p290
rvm install 1.9.2-p290 --with-openssl-dir=$rvm_path/usr
<h2>ruby-debug and ruby 1.9</h2>
If you have trouble installing ruby-debug19 try installing with the following command:
<pre>$ rvm reinstall 1.9.2 --patch debug --force-autoconf
#可以先试试下面这个命令
$ gem install ruby-debug19 -- --with-ruby-include="${MY_RUBY_HOME/rubies/src}"</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>237</wp:post_id>
		<wp:post_date>2012-02-14 15:41:45</wp:post_date>
		<wp:post_date_gmt>2012-02-14 07:41:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rvm%e4%b8%8b%e5%ae%89%e8%a3%85gem%e7%bc%96%e8%af%91%e5%a4%b1%e8%b4%a5-linecache19</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linecache19"><![CDATA[linecache19]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="rvm"><![CDATA[rvm]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rails学习笔记: rake  相关命令</title>
		<link></link>
		<pubDate>Wed, 15 Feb 2012 10:23:17 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=240</guid>
		<description></description>
		<content:encoded><![CDATA[命令行 
rake db：*****
script/generate model task name:string priority:integer   
script/generate migration add_description_to_task description:string   
script/generate migration remove_description_from_task description:string 

类似的概念里有叫做“迁移 (migration)”的东西，Rails的世界里，指的是改变数据库的结构（schema）。这个通过db/migrate目录下面的 Ruby 脚本执行。

另一方面，db/seeds.rb 也向数据库插入数据。例如，在希望从开始状态准备初期管理者帐户的情况下使用。

在此之前这样的代码只在迁移脚本内描述，我想对此感觉不方便的不止我一个人。

db/seeds.rb 是像下面的例子一样的普通的 Rails 脚本：

Administrator.create(:name => 'root', :password => '')专用的 Rake 任务 db:seeds 也具备。



数据类型 
引用
# :string, :text, :integer, :float,:decimal, :datetime, :timestamp, :time, :date, 
# :binary, :boolean 

与db有关的rake任务 
 
db:charset 检索当前环境下数据库的字符设置   
db:collation 检索当前环境下数据库的校对   
db:create 用config\database.yml中的定义创建当前 RAILS_ENV 项目环境下的数据库   
db:create:all 用config\database.yml中的定义创建所有数据库   
db:drop 删除当前 RAILS_ENV项目环境中的数据库   
db:drop:all 删除所有在 config\database.yml中定义的数据库   
db:reset 从db\schema.rb中为当前环境重建数据库（先删后建）.   
db:rollback 回滚(清华出版社一本SQLSERVER书的名词[很奇怪为什么不直接用滚回])数据库到前一个版本. 指定回滚到哪一步要用 STEP=n 参数   
db:version 检索当前模式下的版本   

备份数据库
rake db:backup:create 根据database.yml的信息备份数据库
rake db:backup:destroy 默认删除一天前的备份数据
rake db:backup:rebuild 默认恢复最新的备份数据

注意：这里设置的备份目录是db的backup目录，可以修改 

添加索引 
引用

add_index :acls, ["action_id","group_id"],:unique=>true 
add_index :acls, :action_id 

drop all tables 删除全部表
rake db:migrate VERSION=0  

指定恢复/删除：
rake db:migrate:down/up VERSION = version_of_migrati

定义数字精确度 
t.integer :total_price, :precision=>8,:scale=>2,:default=>0


========================================================================================================================================================
rake db:abort_if_pending_migrations  # Raises an error if there are pending migrations
rake db:charset                      # Retrieves the charset for the current environment's database
rake db:collation                    # Retrieves the collation for the current environment's database
rake db:create                       # Create the database defined in config/database.yml for the current RAILS_ENV
rake db:create:all                   # Create all the local databases defined in config/database.yml
rake db:drop                         # Drops the database for the current RAILS_ENV
rake db:drop:all                     # Drops all the local databases defined in config/database.yml
rake db:fixtures:identify            # Search for a fixture given a LABEL or ID.
rake db:fixtures:load                # Load fixtures into the current environment's database.
rake db:migrate                      # Migrate the database through scripts in db/migrate.
rake db:migrate:down                 # Runs the "down" for a given migration VERSION.
rake db:migrate:redo                 # Rollbacks the database one migration and re migrate up.
rake db:migrate:reset                # Resets your database using your migrations for the current environment
rake db:migrate:up                   # Runs the "up" for a given migration VERSION.
rake db:reset                        # Drops and recreates the database from db/schema.rb for the current environment.
rake db:rollback                     # Rolls the schema back to the previous version.
rake db:schema:dump                  # Create a db/schema.rb file that can be portably used against any DB supported by AR
rake db:schema:load                  # Load a schema.rb file into the database
rake db:sessions:clear               # Clear the sessions table
rake db:sessions:create              # Creates a sessions migration for use with CGI::Session::ActiveRecordStore
rake db:structure:dump               # Dump the database structure to a SQL file
rake db:test:clone                   # Recreate the test database from the current environment's database schema
rake db:test:clone_structure         # Recreate the test databases from the development structure
rake db:test:load                    # Recreate the test database from the current schema.rb
rake db:test:prepare                 # Check for pending migrations and load the test schema
rake db:test:purge                   # Empty the test database
rake db:version                      # Retrieves the current schema version number
rake doc:app                         # Build the app HTML Files
rake doc:clobber_app                 # Remove rdoc products
rake doc:clobber_plugins             # Remove plugin documentation
rake doc:clobber_rails               # Remove rdoc products
rake doc:guides                      # Generate Rails guides
rake doc:plugins                     # Generate documentation for all installed plugins
rake doc:rails                       # Build the rails HTML Files
rake doc:reapp                       # Force a rebuild of the RDOC files
rake doc:rerails                     # Force a rebuild of the RDOC files
rake gems                            # List the gems that this rails application depends on
rake gems:build                      # Build any native extensions for unpacked gems
rake gems:install                    # Installs all required gems for this application.
rake gems:refresh_specs              # Regenerate gem specifications in correct format.
rake gems:unpack                     # Unpacks the specified gem into vendor/gems.
rake gems:unpack:dependencies        # Unpacks the specified gems and its dependencies into vendor/gems
rake log:clear                       # Truncates all *.log files in log/ to zero bytes
rake notes                           # Enumerate all annotations
rake notes:custom                    # Enumerate a custom annotation, specify with ANNOTATION=WTFHAX
rake notes:fixme                     # Enumerate all FIXME annotations
rake notes:optimize                  # Enumerate all OPTIMIZE annotations
rake notes:todo                      # Enumerate all TODO annotations
rake rails:freeze:edge               # Lock to latest Edge Rails, for a specific release use RELEASE=1.2.0
rake rails:freeze:gems               # Lock this application to the current gems (by unpacking them into vendor/rails)
rake rails:unfreeze                  # Unlock this application from freeze of gems or edge and return to a fluid use of system gems
rake rails:update                    # Update both configs, scripts and public/javascripts from Rails
rake rails:update:configs            # Update config/boot.rb from your current rails install
rake rails:update:javascripts        # Update your javascripts from your current rails install
rake rails:update:scripts            # Add new scripts to the application script/ directory
rake routes                          # Print out all defined routes in match order, with names.
rake secret                          # Generate a crytographically secure secret key.
rake stats                           # Report code statistics (KLOCs, etc) from the application
rake test                            # Run all unit, functional and integration tests
rake test:benchmark                  # Run tests for benchmarkdb:test:prepare / Benchmark the performance tests
rake test:functionals                # Run tests for functionalsdb:test:prepare / Run the functional tests in test/functional
rake test:integration                # Run tests for integrationdb:test:prepare / Run the integration tests in test/integration
rake test:plugins                    # Run tests for pluginsenvironment / Run the plugin tests in vendor/plugins/*/**/test (or specify with PLUGIN=name)
rake test:profile                    # Run tests for profiledb:test:prepare / Profile the performance tests
rake test:recent                     # Run tests for recentdb:test:prepare / Test recent changes
rake test:uncommitted                # Run tests for uncommitteddb:test:prepare / Test changes since last checkin (only Subversion and Git)
rake test:units                      # Run tests for unitsdb:test:prepare / Run the unit tests in test/unit
rake time:zones:all                  # Displays names of all time zones recognized by the Rails TimeZone class, grouped by offset.
rake time:zones:local                # Displays names of time zones recognized by the Rails TimeZone class with the same offset as the system local time
rake time:zones:us                   # Displays names of US time zones recognized by the Rails TimeZone class, grouped by offset.
rake tmp:cache:clear                 # Clears all files and directories in tmp/cache
rake tmp:clear                       # Clear session, cache, and socket files from tmp/
rake tmp:create                      # Creates tmp directories for sessions, cache, and sockets
rake tmp:pids:clear                  # Clears all files in tmp/pids
rake tmp:sessions:clear              # Clears all files in tmp/sessions
rake tmp:sockets:clear               # Clears all files in tmp/sockets]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date>2012-02-15 18:23:17</wp:post_date>
		<wp:post_date_gmt>2012-02-15 10:23:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0-rake-%e7%9b%b8%e5%85%b3%e5%91%bd%e4%bb%a4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rake"><![CDATA[rake]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ubuntu下查看进程端口 </title>
		<link></link>
		<pubDate>Thu, 16 Feb 2012 07:08:06 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=244</guid>
		<description></description>
		<content:encoded><![CDATA[# 查看所有打开的端口及服务名（注意这里显示的服务名只是标准端口对应的服务名，可能并不准确）

nmap localhost

# 查看哪些进程打开了指定端口port（对于守护进程必须以root用户执行才能查看到）

lsof -i:port             +sudo比较好

# 查看哪些进程打开了指定端口port，最后一列是进程ID（此方法对于守护进程作用不大）

netstat -nap|grep port

# 查看端口号对应的系统服务名称

cat /etc/services

# 启动｜停止｜重启系统服务

sudo /etc/init.d/service start|stop|restart

 

常见端口详细说明 

服务及对应端口　　　 　　　　　　服务及对应端口　　　 
Echo（7）　　　　　　　　　　　　　　　　　FTP（21） 
Ssh（22）　　　　　　　　　　　　　　　　　Telnet（23） 
SMTP（25）　　　　　　　　　　　　　　　　 DNS（53） 
HTTP（80）　　　　　　　　　　　　　　　　 MTA-X.400 over TCP/IP（102） 
pop3（110）　　　　　　　　　　　　　　　　NETBIOS Name Service（137、 
138、139） 
IMAP v2（143）　　　　　　　　　　　　　　 SNMP（161） 
LDAP、ILS（389）　　　　　　　　　　　　　 Https（443） 
IMAP(993)                                SQL(1433) 
NetMeeting T.120(1503)                   NetMeeting(1720) 
NetMeeting Audio Call Control(1731)      超级终端(3389)  
QQ客户端(4000)                            pcAnywere(5631) 
RealAudio(6970)                           Sygate (7323) 
OICQ(8000)                               Wingate(8010) 
代理端口(8080) 
1、端口：7 
服务：Echo 
说明：能看到许多人搜索Fraggle放大器时，发送到X.X.X.0和X.X.X.255的信息。 
2、端口：21 
服务：FTP 
说明：FTP服务器所开放的端口，用于上传、下载。最常见的攻击者用于寻找打开anonymous的FTP服务器的方法。这些服务器带有可读写的目录。木马Doly Trojan、Fore、Invisible FTP、WebEx、WinCrash和Blade Runner所开放的端口。 
3、端口：22 
服务：Ssh 
说明：PcAnywhere建立的TCP和这一端口的连接可能是为了寻找ssh。这一服务有许多弱点，如果配置成特定的模式，许多使用RSAREF库的版本就会有不少的漏洞 
存在。 
4、端口：23 
服务：Telnet 
说明：远程登录，入侵者在搜索远程登录UNIX的服务。大多数情况下扫描这一端口是为了找到机器运行的操作系统。还有使用其他技术，入侵者也会找到密码。木马Tiny Telnet Server就开放这个端口。 
5、端口：25 
服务：SMTP 
说明：SMTP服务器所开放的端口，用于发送邮件。入侵者寻找SMTP服务器是为了传递他们的SPAM。入侵者的帐户被关闭，他们需要连接到高带宽的E-MAIL服务器上，将简单的信息传递到不同的地址。木马Antigen、Email Password Sender、Haebu Coceda、Shtrilitz Stealth、WinPC、WinSpy都开放这个端口。 
6、端口：53 
服务：Domain Name Server（DNS）
说明：DNS服务器所开放的端口，入侵者可能是试图进行区域传递（TCP），欺骗DNS（UDP）或隐藏其他的通信。因此防火墙常常过滤或记录此端口。 
7、端口：80 
服务：HTTP 
说明：用于网页浏览。木马Executor开放此端口。 
8、端口：102 
服务：Message transfer agent(MTA)-X.400 over TCP/IP 
说明：消息传输代理。 
9、端口：110 
服务：pop3
说明：POP3(Post Office Protocol 3)服务器开放此端口，用于接收邮件，客户端访问服务器端的邮件服务。POP3服务有许多公认的弱点。关于用户名和密码交换缓冲区溢出的弱点至少有20个，这意味着入侵者可以在真正登陆前进入系统。成功登陆后还有其他缓冲区溢出错误。
10、端口：137、138、139 
服务：NETBIOS Name Service 
说明：其中137、138是UDP端口，当通过网上邻居传输文件时用这个端口。而139端口：通过这个端口进入的连接试图获得NetBIOS/SMB服务。这个协议被用于windows文件和打印机共享和SAMBA。还有WINS Regisrtation也用它。 
11、端口：143 
服务：Interim Mail Access Protocol v2 
说明：和POP3的安全问题一样，许多IMAP服务器存在有缓冲区溢出漏洞。记住： 
一种LINUX蠕虫（admv0rm）会通过这个端口繁殖，因此许多这个端口的扫描来自不知情的已经被感染的用户。当REDHAT在他们的LINUX发布版本中默认允许IMAP后，这些漏洞变的很流行。这一端口还被用于IMAP2，但并不流行。 
12、端口：161 
服务：SNMP 
说明：SNMP允许远程管理设备。所有配置和运行信息的储存在数据库中，通过SNMP可获得这些信息。许多管理员的错误配置将被暴露在Internet。Cackers将试图使用默认的密码public、private访问系统。他们可能会试验所有可能的组合。
SNMP包可能会被错误的指向用户的网络。 
13、端口：389 
服务：LDAP、ILS 
说明：轻型目录访问协议和NetMeeting Internet Locator Server共用这一端口 。 
14、端口：443 
服务：Https 
说明：网页浏览端口，能提供加密和通过安全端口传输的另一种HTTP。 
15、端口：993 
服务：IMAP 
说明：SSL（Secure Sockets layer） 
16、端口：1433 
服务：SQL 
说明：Microsoft的SQL服务开放的端口。 
17、端口：1503 
服务：NetMeeting T.120 
说明：NetMeeting T.120 
18、端口：1720 
服务：NetMeeting 
说明：NetMeeting H.233 call Setup。 
19、端口：1731 
服务：NetMeeting Audio Call Control 
说明：NetMeeting音频调用控制。 
20、端口：3389 
服务：超级终端
说明：WINDOWS 2000终端开放此端口。 
21、端口：4000 
服务：QQ客户端
说明：腾讯QQ客户端开放此端口。 
22、端口：5631
服务：pcAnywere 
说明：有时会看到很多这个端口的扫描，这依赖于用户所在的位置。当用户打开pcAnywere时，它会自动扫描局域网C类网以寻找可能的代理（这里的代理是指agent而不是proxy）。入侵者也会寻找开放这种服务的计算机。，所以应该查看这种扫描的源地址。一些搜寻pcAnywere的扫描包常含端口22的UDP数据包。 
23、端口：6970 
服务：RealAudio 
说明：RealAudio客户将从服务器的6970-7170的UDP端口接收音频数据流。这是由TCP-7070端口外向控制连接设置的。 
24、端口：7323 
服务：[NULL] 
说明：Sygate服务器端。 
25、端口：8000 
服务：OICQ 
说明：腾讯QQ服务器端开放此端口。 
26、端口：8010 
服务：Wingate 
说明：Wingate代理开放此端口。 
27、端口：8080
服务：代理端口
说明：WWW代理开放此端口
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date>2012-02-16 15:08:06</wp:post_date>
		<wp:post_date_gmt>2012-02-16 07:08:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ubuntu%e4%b8%8b%e6%9f%a5%e7%9c%8b%e8%bf%9b%e7%a8%8b%e7%ab%af%e5%8f%a3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="port"><![CDATA[port]]></category>
		<category domain="post_tag" nicename="ubuntu"><![CDATA[ubuntu]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rails 3.1.0 ActionView::Template::Errror (application.css isn&#039;t precompiled)</title>
		<link></link>
		<pubDate>Thu, 23 Feb 2012 08:30:45 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=247</guid>
		<description></description>
		<content:encoded><![CDATA[I made a basic rails app with a simple pages controller with an index function and when I load the page I get:

ActionView::Template::Error (application.css isn't precompiled):
app/views/layouts/application.html.erb:5:in `_app_views_layouts_application_html

By default Rails assumes that you have your files precompiled in the production environment, if you want use live compiling (compile your assets during runtime) in production you must set the config.assets.compile to true.

 Demo

# config/environments/production.rb
...
config.assets.compile = true
...
You can use this option to fallback to Sprockets when you are using precompiled assets but there are any missing precompiled files.

If config.assets.compile option is set to false and there are missing precompiled files you will get an "AssetNoPrecompiledError" indicating the name of the missing file.

<strong>You will get better performance in production if you set config.assets.compile to false in production.rb and precompile your assets. You can precompile with this rake task:</strong>

bundle exec rake assets:precompile]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date>2012-02-23 16:30:45</wp:post_date>
		<wp:post_date_gmt>2012-02-23 08:30:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-3-1-0-actionviewtemplateerrror-application-css-isnt-precompiled</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="assets"><![CDATA[assets]]></category>
		<category domain="post_tag" nicename="precompiled"><![CDATA[precompiled]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用 RSpec 进行行为驱动测试</title>
		<link></link>
		<pubDate>Fri, 24 Feb 2012 02:37:05 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=251</guid>
		<description></description>
		<content:encoded><![CDATA[Bruce Tate, CTO, WellGood LLC

在过去十年中，软件开发人员对测试的热情日渐低迷。同一时期出现的动态语言并没有提供编译程序来捕捉最基本的错误，这使得测试变得更加重要。随着测试社区的成长，开发人员开始注意到，除了捕获 bug 等最基本的优点外，测试还具有以下优势：
<ul>
	<li>测试能够改进您的设计。进行测试的每个目标对象必须具备至少两个客户机：生产代码和测试用例。这些客户机强制您对代码进行解耦。测试还鼓励开发人员使用更小、更简单的方法。</li>
	<li>测试减少了不必要的代码。在编写测试用例时，您养成了很好的测试习惯，即只编写运行测试用例所需的最少代码。您抵制住了对功能进行编码的诱惑，因为您目前还不需要它。</li>
	<li>推动了测试优先开发。您编写的每个测试用例会确定一个小问题。使用代码解决这个问题非常有用并且可以推动开发。当我进行测试驱动开发时，时间过得飞快。</li>
	<li>测试提供了更多的自主权。在使用测试用例捕获可能的错误时，您会发现自己非常愿意对代码进行改进。</li>
</ul>
<a name="N10059"></a>测试驱动的开发和 RSpec

有关测试的优点无需赘述，我将向您介绍一个简单的使用 RSpec 的测试驱动开发示例。RSpec 工具是一个 Ruby 软件包，可以用它构建有关您的软件的规范。该规范实际上是一个描述系统行为的测试。使用 RSpec 的开发流程如下：
<ul>
	<li>编写一个测试。该测试描述系统中某个较小元素的行为。</li>
	<li>运行测试。由于尚没有为系统中的相应部分构建代码，测试失败。这一重要步骤将测试您的测试用例，检验测试用例是否在应当失败的时候失败。</li>
	<li>编写足够的代码，使测试通过。</li>
	<li>运行测试，检验测试是否成功。</li>
</ul>
实质上，RSpec 开发人员所做的工作就是将失败的测试用例调试为成功的测试用例。这是一个主动的过程。本文中，我将介绍 RSpec 的基本用法。

首先，假设您已安装了 Ruby 和 gems。您还需要安装 RSpec。输入下面的内容：

<code>gem install rspec</code>
<div> </div>
&nbsp;

<a name="N1007D"></a>使用示例

接下来，我将逐步构建一个状态机。我将遵循 TDD 规则。首先编写自己的测试用例，并且直到测试用例需要时才编写代码。Rake 的创建者 Jim Weirich 认为这有助于角色扮演。在编写实际的生产代码时，您希望充当一回 jerk 开发人员的角色，只完成最少量的工作来使测试通过。在编写测试时，您则扮演测试人员的角色，试图为开发人员提供一些有益的帮助。

以下的示例展示了如何构建一个状态机。如果您以前从未接触过状态机，请查阅 参考资料。状态机具有多种状态。每种状态支持可以转换状态机状态的事件。测试驱动开发入门的关键就是从零入手，尽量少地使用假设条件。针对测试进行程序设计。

使用清单 1 的内容创建名为 machine_spec.rb 的文件。该文件就是您的规范。您还不了解 machine.rb 文件的作用，目前先创建一个空文件。

<a name="resources"></a><strong>清单 1. 最初的 machine_spec.rb 文件 </strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>  require 'machine'</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

接下来，需要运行测试。始终通过输入 <code>spec machine_spec.rb</code> 运行测试。清单 2 展示了预料之中的测试失败：
<a name="listing2"></a><strong>清单 2. 运行空的规范</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>~/rspec batate$ spec machine_spec.rb
/opt/local/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:27:in `gem_original_require':
 no such file to load -- machine (LoadError)
        from /opt/local/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:27:in `require'
        from ./state_machine_spec.rb:1
        from ...</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

在测试驱动开发中，您需要进行增量开发，因此在进行下一次开发前，需要先解决此次测试出现的问题。现在，我将扮演 jerk 开发人员的角色，即只完成满足应用程序运行所需的最少工作量。我将创建一个名为 machine.rb 的空文件，使测试通过。我现在可以以逸待劳，测试通过而我几乎没做任何事情。

继续角色扮演。我现在扮演一个烦躁的测试人员，促使 jerk 开发人员做些实际的工作。我将编码以下规范，需要使用 <code>Machine</code> 类，如清单 3 所示：
<a name="listing3"></a><strong>清单 3. 初始规范</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>require 'machine'

describe Machine do
  before :each do
    @machine = Machine
  end
end</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

该规范描述了目前尚不存在的 <code>Machine</code> 类。<code>describe</code> 方法提供了 RSpec 描述，您将传入测试类的名称和包含实际规范的代码块。通常，测试用例需要执行一定数量的设置工作。在 RSpec 中，将由 <code>before</code> 方法完成这些设置工作。您向 <code>before</code> 方法传递一个可选的标志和一个代码块。代码块中包含设置工作。标志确定 RSpec 执行代码块的频率。默认的标志为 <code>:each</code>，表示 RSpec 将在每次测试之前调用 set up 代码块。您也可以指定 <code>:all</code>，表示 RSpec 在执行所有测试之前只调用一次 <code>before</code> 代码块。您应该始终使用<code>:each</code>，使各个测试彼此独立。

输入 <code>spec</code> 运行测试，如清单 4 所示：
<a name="listing4"></a><strong>清单 4. 存在性测试失败</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>~/rspec batate$ spec machine_spec.rb 

./machine_spec.rb:3: uninitialized constant Machine (NameError)</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

现在，烦躁的测试人员要促使 jerk 开发人员做点什么了 — jerk 开发人员现在需要创建某个类。对我来说，就是修复测试出现的错误。在 <code>machine.rb</code> 中，我输入最少量的代码，如清单 5 所示：
<a name="listing5"></a><strong>清单 5. 创建初始 Machine 类</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>class Machine
end</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

保存文件，然后运行测试。毫无疑问，清单 6 显示的测试报告没有出现错误：
<a name="listing6"></a><strong>清单 6. 测试 Machine 是否存在</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>~/rspec batate$ spec machine_spec.rb 

Finished in 5.0e-06 seconds

0 examples, 0 failures</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;
<div> </div>
<a name="N1010D"></a>编写行为

现在，我可以开始实现更多的行为。我知道，所有状态机必须在某些初始状态下启动。目前我还不是很清楚如何设计这个行为，因此我先编写一个非常简单的测试，首先假设 <code>state</code> 方法会返回 <code>:initial</code> 标志。我对 <code>machine_spec.rb</code> 进行修改并运行测试，如清单 7 所示：
<a name="listing7"></a><strong>清单 7. 实现初始状态并运行测试</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>require 'machine'

describe Machine do
  before :each do
    @machine = Machine.new
  end

  it "should initially have a state of :initial" do
    @machine.state.should == :initial
  end

end

~/rspec batate$ spec machine_spec.rb 

F

1)
NoMethodError in 'Machine should initially have a state of :initial'
undefined method `state' for #&lt;Machine:0x10c7f8c&gt;
./machine_spec.rb:9:

Finished in 0.005577 seconds

1 example, 1 failure</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

注意这条规则：<code> it "should initially have a state of :initial" do @machine.state.should == :initial end</code>。首先注意到这条规则读起来像是一个英文句子。删除标点，将得到 <code>it should initially have a state of initial</code>。然后会注意到这条规则并不像是典型的面向对象代码。它确实不是。您现在有一个方法，称为 <code>it</code>。该方法具有一个使用引号括起来的字符串参数和一个代码块。字符串应该描述测试需求。最后，<code>do</code> 和 <code>end</code> 之间的代码块包含测试用例的代码。

可以看到，测试进度划分得很细。这些微小的步骤产生的收益却很大。它们使我能够改进测试密度，提供时间供我思考期望的行为以及实现行为所需的 API。这些步骤还能使我在开发期间跟踪代码覆盖情况，从而构建更加丰富的规范。

这种风格的测试具有双重作用：测试实现并在测试的同时构建需求设计文档。稍后，我将通过测试用例构建一个需求列表。

我使用最简单的方式修复了测试，返回 <code>:initial</code>，如清单 8 所示：
<a name="listing8"></a><strong>清单 8. 指定初始状态</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>class Machine

  def state
    :initial
  end
end</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

当查看实现时，您可能会放声大笑或感觉受到了愚弄。对于测试驱动开发，您必须稍微改变一下思考方式。您的目标并不是编写最终的生产代码，至少现在不是。您的目标是使测试通过。当掌握以这种方式工作时，您可能会发现新的实现，并且编写的代码要远远少于采用 TDD 时编写的代码。

下一步是运行代码，查看它是否通过测试：
<a name="listing9"></a><strong>清单 9. 运行初始状态测试</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>~/rspec batate$ spec machine_spec.rb 

.

Finished in 0.005364 seconds

1 example, 0 failures</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

花些时间思考一下这个通过测试的迭代。如果查看代码的话，您可能会觉得气馁。因为并没有取得什么进展。如果查看整个迭代，将看到更多内容：您捕获了一个重要需求并编写测试用例实现需求。作为一名程序员，我的第一个行为测试帮助我明确了开发过程。因为实现细节随着测试的进行越来越清晰。

现在，我可以实现一个更健壮的状态实现。具体来讲，我需要处理状态机的多个状态。我需要创建一个新的规则获取有效状态列表。像以前一样，我将运行测试并查看是否通过。
<a name="listing10"></a><strong>清单 10. 实现有效状态规范</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre> it "should remember a list of valid states" do
    @machine.states = [:shopping, :checking_out]
    @machine.states.should = [:shopping, :checking_out]
  end

run test(note: failing first verifies test)

~/rspec batate$ spec machine_spec.rb 

.F

1)
NoMethodError in 'Machine should remember a list of valid states'
undefined method `states=' for #&lt;Machine:0x10c7154&gt;
./machine_spec.rb:13:

Finished in 0.005923 seconds

2 examples, 1 failure</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

在清单 10 中，出现了一个 RSpec 形式的断言。该断言从 <code>should</code> 方法开始，然后添加了一些比较关系。<code>should</code> 方法对应用程序进行某种观察。工作中的应用程序应该以某种方式运行。<code>should</code> 方法很好地捕获了这种需求。在本例中，我的状态机应该记忆两种不同的状态。

现在，应该添加一个实例变量来实际记忆状态。像以往一样，我在修改代码后运行测试用例，并观察测试是否成功。
<a name="listing11"></a><strong>清单 11. 创建一个属性以记忆状态</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>class Machine
  attr_accessor :states

  def state
    :initial
  end
end

~/rspec batate$ spec machine_spec.rb 

..

Finished in 0.00606 seconds

2 examples, 0 failures</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;
<div> </div>
<a name="N10190"></a>驱动重构

此时，我并不想决定将 <code>:initial</code> 状态称为状态机的第一个状态。相反，我更希望第一个状态是状态数组中的第一个元素。我对状态机的理解在不断演变。这种现象并不少见。测试驱动开发经常迫使我重新考虑之前的假设。由于我已经通过测试用例捕获了早期需求，我可以轻松地对代码进行重构。在本例中，重构就是对代码进行调整，使其更好地工作。

修改第一个测试，使其如清单 12 所示，并运行测试：
<a name="listing12"></a><strong>清单 12. 初始状态应该为指定的第一个状态</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>it "should initially have a state of the first state" do
  @machine.states = [:shopping, :checking_out]
  @machine.state.should == :shopping
end

~/rspec batate$ spec machine_spec.rb 

F.

1)
'Machine should initially have a state of the first state' FAILED
expected :shopping, got :initial (using ==)
./machine_spec.rb:10:

Finished in 0.005846 seconds

2 examples, 1 failure</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

可以这样说，测试用例起到作用了，因为它运行失败，因此我现在需要修改代码以使其工作。显而易见，我的任务就是使测试通过。我喜欢这种测试目的，因为我的测试用例正在驱动我进行设计。我将把初始状态传递给 <code>new</code> 方法。我将对实现稍作修改，以符合修改后的规范，如清单 13 所示。
<a name="listing13"></a><strong>清单 13. 指定初始状态</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>start to fix it
class Machine
  attr_accessor :states
  attr_reader :state

  def initialize(states)
    @states = states
    @state = @states[0]
  end
end

~/rspec batate$ spec machine_spec.rb 

1)
ArgumentError in 'Machine should initially have a state of the first state'
wrong number of arguments (0 for 1)
./machine_spec.rb:5:in `initialize'
./machine_spec.rb:5:in `new'
./machine_spec.rb:5:

2)
ArgumentError in 'Machine should remember a list of valid states'
wrong number of arguments (0 for 1)
./machine_spec.rb:5:in `initialize'
./machine_spec.rb:5:in `new'
./machine_spec.rb:5:

Finished in 0.006391 seconds

2 examples, 2 failures</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

现在，测试出现了一些错误。我找到了实现中的一些 bug。测试用例不再使用正确的接口，因为我没有把初始状态传递给状态机。可以看到，测试用例已经起到了保护作用。我进行了较大的更改，测试就发现了 bug。我们需要对测试进行重构以匹配新的接口，将初始状态列表传递给 <code>new</code> 方法。在这里我并没有重复初始化代码，而是将其放置在 <code>before</code> 方法中，如清单 14 所示：
<a name="listing14"></a><strong>清单 14. 在 “<code>before</code>” 中初始化状态机 </strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>require 'machine'

describe Machine do
  before :each do
    @machine = Machine.new([:shopping, :checking_out])
  end

  it "should initially have a state of the first state" do
    @machine.state.should == :shopping
  end

  it "should remember a list of valid states" do
    @machine.states.should == [:shopping, :checking_out]
  end

end

~/rspec batate$ spec machine_spec.rb 

..

Finished in 0.005542 seconds

2 examples, 0 failures</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

状态机开始逐渐成型。代码仍然有一些问题，但是正在向良好的方向演化。我将开始对状态机进行一些转换。这些转换将促使代码实际记忆当前状态。

测试用例促使我全面地思考 API 的设计。我需要知道如何表示事件和转换。首先，我将使用一个散列表表示转换，而没有使用成熟的面向对象实现。随后，测试需求可能会要求我修改假设条件，但是目前，我仍然保持这种简单性。清单 15 显示了修改后的代码：
<a name="listing15"></a><strong>清单 15. 添加事件和转换</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>remember events... change before conditions

require 'machine'

describe Machine do
  before :each do
    @machine = Machine.new([:shopping, :checking_out])
    @machine.events = {:checkout =&gt;
                               {:from =&gt; :shopping, :to =&gt; :checking_out}}
  end

  it "should initially have a state of the first state" do
    @machine.state.should == :shopping
  end

  it "should remember a list of valid states" do
    @machine.states.should == [:shopping, :checking_out]
  end

  it "should remember a list of events with transitions" do
    @machine.events.should == {:checkout =&gt;
                               {:from =&gt; :shopping, :to =&gt; :checking_out}}
  end

end

~/rspec batate$ spec machine_spec.rb 

FFF

1)
NoMethodError in 'Machine should initially have a state of the first state'
undefined method `events=' for #&lt;Machine:0x10c6f38&gt;
./machine_spec.rb:6:

2)
NoMethodError in 'Machine should remember a list of valid states'
undefined method `events=' for #z7lt;Machine:0x10c5afc&gt;
./machine_spec.rb:6:

3)
NoMethodError in 'Machine should remember a list of events with transitions'
undefined method `events=' for #&lt;Machine:0x10c4a58&gt;
./machine_spec.rb:6:

Finished in 0.006597 seconds

3 examples, 3 failures</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

由于新的测试代码位于 <code>before</code> 中，将我的三个测试分解开来。尽管如此，清单 16 中展示的测试非常容易修复。我将添加另一个访问程序：
<a name="listing16"></a><strong>清单 16. 记忆事件</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>class Machine
  attr_accessor :states, :events
  attr_reader :state

  def initialize(states)
    @states = states
    @state = @states[0]
  end
end

~/rspec batate$ spec machine_spec.rb 

...

Finished in 0.00652 seconds

3 examples, 0 failures

test</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

测试全部通过。我得到了一个能正常运行的状态机。接下来的几个测试将使它更加完善。
<div> </div>
<a name="N101F2"></a>接近真实的应用程序

目前为止，我所做的不过是触发了一次状态转换，但是我已经做好了所有基础工作。我得到了一组需求。我还构建了一组测试。我的代码可以为状态机提供使用的数据。此时，管理单个状态机转换仅表示一次简单的转换，因此我将添加如清单 17 所示的测试：
<a name="listing17"></a><strong>清单 17. 构建状态机的状态转换</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>it "should transition to :checking_out upon #trigger(:checkout) event " do
  @machine.trigger(:checkout)
  @machine.state.should == :checking_out
end

~/rspec batate$ spec machine_spec.rb 

...F

1)
NoMethodError in 'Machine should transition to :checking_out upon
#trigger(:checkout) event '
undefined method `trigger' for #&lt;Machine:0x10c4d00&gt;
./machine_spec.rb:24:

Finished in 0.006153 seconds

4 examples, 1 failure</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

我需要抵制快速构建大量功能的诱惑。我应该只编写少量代码，只要使测试通过即可。清单 18 展示的迭代将表示 API 和需求。这就足够了：
<a name="listing18"></a><strong>清单 18. 定义 <code>trigger</code> 方法</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>def trigger(event)
  @state = :checking_out
end

~/rspec batate$ spec machine_spec.rb 

....

Finished in 0.005959 seconds

4 examples, 0 failures</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

这里出现了一个有趣的边注。在编写代码时，我两次都弄错了这个简单的方法。第一次我返回了 <code>:checkout</code>；第二次我将状态设置为<code>:checkout</code> 而不是 <code>:checking_out</code>。在测试中使用较小的步骤可以为我节省大量时间，因为测试用例为我捕获的这些错误在将来的开发中很难捕获到。本文的最后一个步骤是实际执行一次状态机转换。在第一个示例中，我并不关心实际的机器状态是什么样子的。我仅仅是根据事件进行盲目转换，而不考虑状态。

两节点的状态机无法执行这个操作，我需要在第三个节点中构建。我没有使用已有的 <code>before</code> 方法，只是在新状态中添加另外的状态。我将在测试用例中进行两次转换，以确保状态机能够正确地执行转换，如清单 19 所示：
<a name="listing19"></a><strong>清单 19. 实现第一次转换</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>it "should transition to :success upon #trigger(:accept_card)" do
    @machine.events = {
       :checkout =&gt; {:from =&gt; :shopping, :to =&gt; :checking_out},
       :accept_card =&gt; {:from =&gt; :checking_out, :to =&gt; :success}
    }

    @machine.trigger(:checkout)
    @machine.state.should == :checking_out
    @machine.trigger(:accept_card)
    @machine.state.should == :success
  end

~/rspec batate$ spec machine_spec.rb
....F

1)
'Machine should transition to :success upon #trigger(:accept_card)' FAILED
expected :success, got :checking_out (using ==)
./machine_spec.rb:37:

Finished in 0.007564 seconds

5 examples, 1 failure</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

这个测试将使用 <code>:checkout</code> 和 <code>:accept_card</code> 事件建立新的状态机。在处理签出时，我选择使用两个事件而不是一个，这样可以防止发生双命令。签出代码可以确保状态机在签出之前处于 <code>shopping</code> 状态。第一次签出首先将状态机从 <code>shopping</code> 转换为 <code>checking_out</code>。测试用例通过触发 <code>checkout</code> 和 <code>accept_card</code> 事件实现两个转换，并在调用事件之后检验事件状态是否正确。与预期一样，测试用例失败 — 我并没有编写处理多个转换的触发器方法。代码修正包含一行非常重要的代码。清单 20 展示了状态机的核心：
<a name="listing20"></a><strong>清单 20. 状态机的核心</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>def trigger(event)
    @state = events[event][:to]
  end

~/rspec batate$ spec machine_spec.rb
.....

Finished in 0.006511 seconds

5 examples, 0 failures</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

测试可以运行。这些粗糙的代码第一次演变为真正可以称之为状态机的东西。但是这还远远不够。目前，状态机缺乏严密性。不管状态如何，状态机都会触发事件。例如，当处于 <code>shopping</code> 状态时，触发 <code>:accept_card</code> 并不会转换为 <code>:success</code> 状态。您只能够从<code>:checking_out</code> 状态触发 <code>:accept_card</code>。在编程术语中，<code>trigger</code> 方法的范围应针对事件。我将编写一个测试来解决问题，然后修复 bug。我将编写一个负测试（negative test），即断言一个不应该出现的行为，如清单 21 所示：
<a name="listing21"></a><strong>清单 21: 负测试</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>it "should not transition from :shopping to :success upon :accept_card" do
    @machine.events = {
       :checkout =&gt; {:from =&gt; :shopping, :to =&gt; :checking_out},
       :accept_card =&gt; {:from =&gt; :checking_out, :to =&gt; :success}
    }

    @machine.trigger(:accept_card)
    @machine.state.should_not == :success
  end

rspec batate$ spec machine_spec.rb
.....F

1)
'Machine should not transition from :shopping to :success upon :accept_card' FAILED
expected not == :success, got :success
./machine_spec.rb:47:

Finished in 0.006582 seconds

6 examples, 1 failure</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

现在可以再次运行测试，其中一个测试如预期一样运行失败。修复代码同样只有一行，如清单 22 所示：
<a name="listing22"></a><strong>清单 22. 修复 <code>trigger</code> 中的范围问题 </strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>def trigger(event)
    @state = events[event][:to] if state == events[event][:from]
  end

rspec batate$ spec machine_spec.rb
......

Finished in 0.006873 seconds

6 examples, 0 failures</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;
<div> </div>
<a name="N10291"></a>组合代码

现在，我具有一个可简单运行的状态机。无论从哪方面来说，它都不是一个完美的程序。它还具有下面这些问题：
<ul>
	<li>状态散列实际上不具备任何功能。我应该根据状态对事件及其转换进行验证，或者将所有状态集中起来。后续需求很可能会要求这样做。</li>
	<li>某个既定事件只能存在于一个状态中。这种限制并不合理。例如，<code>submit</code> 和 <code>cancel</code> 事件可能需要处于多个状态。</li>
	<li>代码并不具备明显的面向对象特征。为使配置保持简单，我将大量数据置入散列中。后续的迭代会进一步驱动设计，使其朝面向对象设计方向发展。</li>
</ul>
但是，您还可以看到，这个状态机已经能够满足一些需求了。我还具备一个描述系统行为的文档，这是进行一系列测试的好起点。每个测试用例都支持系统的一个基本需求。事实上，通过运行 <code>spec machine_spec.rb --format specdoc</code>，您可以查看由系统规范组成的基本报告，如清单 23 所示：
<a name="listing23"></a><strong>清单 23. 查看规范</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>spec machine_spec.rb --format specdoc

Machine
- should initially have a state of the first state
- should remember a list of valid states
- should remember a list of events with transitions
- should transition to :checking_out upon #trigger(:checkout) event
- should transition to :success upon #trigger(:accept_card)
- should not transition from :shopping to :success upon :accept_card

Finished in 0.006868 seconds</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

测试驱动方法并不适合所有人，但是越来越多的人开始使用这种技术，使用它构建具有灵活性和适应性的高质量代码，并且根据测试从头构建代码。当然，您也可以通过其他框架（如 test_unit）获得相同的优点。RSpec 还提供了优秀的实现方法。这种新测试框架的一大亮点就是代码的表示。新手尤其可以从这种行为驱动的测试方法中受益。请尝试使用该框架并告诉我您的感受。

参考资料

<strong>学习</strong>
<ul>
	<li>您可以参阅本文在 developerWorks 全球站点上的 <a href="http://www.ibm.com/developerworks/web/library/wa-rspec/index.html?S_CMP=cn-a-wa&amp;S_TACT=105AGX52" target="_blank">英文原文</a> 。</li>
	<li><a href="http://rspec.rubyforge.org/">RSpec</a> 是一种行为驱动框架，可增强 Ruby 中的测试驱动开发。</li>
	<li>Martin Fowler 有关 <a href="http://www.artima.com/intv/testdriven.html">Test Driven Development</a> 的访谈将进一步使您了解这种技术如此强大和高效的原因。</li>
	<li><a href="http://www.ruby-lang.org/en/">Ruby 主页</a> 提供了优秀的 Ruby 编程语言入门资料。</li>
	<li><a href="http://www.pragmaticprogrammer.com/title/fr_j2r/"><em>From Java to Ruby</em> </a>一书也由本文作者编写。Bruce Tate 提供了一份管理人员指南，解释了为什么 Ruby 语言对于某些业务问题来说非常重要。</li>
	<li><a href="http://www.ibm.com/developerworks/cn/web/wa-finitemach1/">有限状态机</a> 是一种软件概念，它将问题分为有限的状态，以及由事件触发的状态之间的转换。状态机构成了本文的基本内容。</li>
	<li>查看所有 developerWorks 的 <a href="http://www.ibm.com/developerworks/cn/downloads/">重要试用下载</a>。 </li>
	<li><a href="https://www.ibm.com/developerworks/cn/newsletter/">订阅</a> developerWorks Web 开发新闻。 </li>
	<li>从 <a href="http://www.ibm.com/developerworks/cn/views/web/articles.jsp">Web 开发专区的技术库</a> 获得更多 howto 文章。 </li>
</ul>
<strong>讨论</strong>
<ul>
	<li>加入 <a href="http://www.ibm.com/developerworks/community?S_CMP=cn-a-wa&amp;S_TACT=105AGX52">developerWorks 社区</a>：<a href="http://www.ibm.com/developerworks/blogs/?S_CMP=cn-a-wa&amp;S_TACT=105AGX52">blogs</a>、<a href="http://www.ibm.com/developerworks/forums?S_CMP=cn-a-wa&amp;S_TACT=105AGX52">论坛</a> 等。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date>2012-02-24 10:37:05</wp:post_date>
		<wp:post_date_gmt>2012-02-24 02:37:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%bf%e7%94%a8-rspec-%e8%bf%9b%e8%a1%8c%e8%a1%8c%e4%b8%ba%e9%a9%b1%e5%8a%a8%e6%b5%8b%e8%af%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rspec"><![CDATA[RSpec]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>RSpec best practices and tips</title>
		<link></link>
		<pubDate>Sun, 26 Feb 2012 08:30:57 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=255</guid>
		<description></description>
		<content:encoded><![CDATA[After a year using RSpec, I’m happy to share “(My) RSpec Best Practices and Tips”. Let’s make your specs easier to maintain, less verbose, more structured and covering more cases!
<h2>Use shortcuts <em>specify {}</em>, <em>it {}</em> and <em>subject {}</em></h2>
You think RSpec is verbose? In case your code doesn’t need any description, use a <em>specify block</em>!
<div>
<div id="highlighter_569165">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>it </code><code>"should be valid"</code> <code>do</code></div>
<div><code></code><code>@user</code><code>.should be_valid </code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
can be replaced with
<div>
<div id="highlighter_540926">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>specify { </code><code>@user</code><code>.should be_valid }</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
RSpec will generate a nice description text for you when running this expectation. Even better, you can use the <em>it block</em>!
<div>
<div id="highlighter_397260">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>describe User </code><code>do</code></div>
<div><code></code><code>it { should validate_presence_of </code><code>:name</code> <code>} </code></div>
<div><code></code><code>it { should have_one </code><code>:address</code> <code>} </code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
In case the subject is the not the class described, just set it with the <em>subject</em> method:
<div>
<div id="highlighter_634030">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>subject { </code><code>@user</code><code>.address } </code></div>
<div><code>it { should be_valid }</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<h2>Start context with ‘when’/'with’ and methods description with ‘#’</h2>
Have you ever get a failed test with an incomprehensible error message like:
<div>
<div id="highlighter_833360">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>User non confirmed confirm email wrong token should not be valid</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
Start your <em>contexts</em> with <em>when</em> and get nice messages like:
<div>
<div id="highlighter_259278">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>User when non confirmed when #confirm_email with wrong token should not be valid</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<h2>Use RSpec matchers to get meaningful messages</h2>
In case of failure
<div>
<div id="highlighter_723593">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>specify { user.valid?.should == </code><code>true</code> <code>}</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
displays:
<div>
<div id="highlighter_873437">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>'User should == true' FAILED </code></div>
<div><code></code><code>expected: true, </code></div>
<div><code></code><code>got: false (using ==)</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
While
<div>
<div id="highlighter_57131">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>specify { user.should be_valid }</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
displays:
<div>
<div id="highlighter_813731">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>'User should be valid' FAILED </code></div>
<div><code></code><code>expected valid? to return true, got false</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
Nice eh?
<h2>Only one expectation per <em>it block</em></h2>
I often see specs where it blocks contain several expectations. This makes your tests harder to read and maintain.

So instead of that…
<div>
<div id="highlighter_927685">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>describe DemoMan </code><code>do</code></div>
<div><code></code><code>it </code><code>"should have expected attributes"</code> <code>do</code></div>
<div><code></code><code>demo_man = DemoMan.</code><code>new</code></div>
<div><code></code><code>demo_man.should respond_to </code><code>:name</code></div>
<div><code></code><code>demo_man.should respond_to </code><code>:gender</code></div>
<div><code></code><code>demo_man.should respond_to </code><code>:age</code></div>
<div><code></code><code>end</code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
… do this:
<div>
<div id="highlighter_377829">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>describe DemoMan </code><code>do</code></div>
<div><code></code><code>before(</code><code>:all</code><code>) </code><code>do</code></div>
<div><code></code><code>@demo_man</code> <code>= DemoMan.</code><code>new</code></div>
<div><code></code><code>end</code></div>
<div> </div>
<div><code></code><code>subject { </code><code>@demo_man</code> <code>} </code></div>
<div> </div>
<div><code></code><code>it { should respond_to </code><code>:name</code> <code>} </code></div>
<div><code></code><code>it { should respond_to </code><code>:gender</code> <code>} </code></div>
<div><code></code><code>it { should respond_to </code><code>:age</code> <code>} </code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<h2>(Over)use describe and context</h2>
Big specs can be a joy to play with as long as they are ordered and DRY. Use nested <em>describe</em> and <em>context</em> blocks as much as you can, each level adding its own specificity in the before block.
To check your specs are well organized, run them in ‘nested’ mode (<code>spec spec/my_spec.rb -cf nested</code>).
Using <code>before(:each)</code> in each context and describe blocks will help you set up the environment without repeating yourself. It also enables you to use <em>it {}</em> blocks.
<h3>Bad:</h3>
<div>
<div id="highlighter_149816">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>describe User </code><code>do</code></div>
<div> </div>
<div><code></code><code>it </code><code>"should save when name is not empty"</code> <code>do</code></div>
<div><code></code><code>User.</code><code>new</code><code>(</code><code>:name</code> <code>=&gt; </code><code>'Alex'</code><code>).save.should == </code><code>true</code></div>
<div><code></code><code>end</code></div>
<div> </div>
<div><code></code><code>it </code><code>"should not save when name is empty"</code> <code>do</code></div>
<div><code></code><code>User.</code><code>new</code><code>.save.should == </code><code>false</code></div>
<div><code></code><code>end</code></div>
<div> </div>
<div><code></code><code>it </code><code>"should not be valid when name is empty"</code> <code>do</code></div>
<div><code></code><code>User.</code><code>new</code><code>.should_not be_valid </code></div>
<div><code></code><code>end</code></div>
<div> </div>
<div><code></code><code>it </code><code>"should be valid when name is not empty"</code> <code>do</code></div>
<div><code></code><code>User.</code><code>new</code><code>(</code><code>:name</code> <code>=&gt; </code><code>'Alex'</code><code>).should be_valid </code></div>
<div><code></code><code>end</code></div>
<div> </div>
<div><code></code><code>it </code><code>"should give the user a flower when gender is W"</code> <code>do</code></div>
<div><code></code><code>User.</code><code>new</code><code>(</code><code>:gender</code> <code>=&gt; </code><code>'W'</code><code>).present.should be_a Flower </code></div>
<div><code></code><code>end</code></div>
<div> </div>
<div><code></code><code>it </code><code>"should give the user a iMac when gender is M"</code> <code>do</code></div>
<div><code></code><code>User.</code><code>new</code><code>(</code><code>:gender</code> <code>=&gt; </code><code>'M'</code><code>).present.should be_an IMac </code></div>
<div><code></code><code>end</code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<h3>Good:</h3>
<div>
<div id="highlighter_852046">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>describe User </code><code>do</code></div>
<div><code></code><code>before { </code><code>@user</code> <code>= User.</code><code>new</code> <code>} </code></div>
<div> </div>
<div><code></code><code>subject { </code><code>@user</code> <code>} </code></div>
<div> </div>
<div><code></code><code>context </code><code>"when name empty"</code> <code>do</code></div>
<div><code></code><code>it { should </code><code>not</code> <code>be_valid } </code></div>
<div><code></code><code>specify { </code><code>@user</code><code>.save.should == </code><code>false</code> <code>} </code></div>
<div><code></code><code>end</code></div>
<div> </div>
<div><code></code><code>context </code><code>"when name not empty"</code> <code>do</code></div>
<div><code></code><code>before { </code><code>@user</code><code>.name = </code><code>'Sam'</code> <code>} </code></div>
<div> </div>
<div><code></code><code>it { should be_valid } </code></div>
<div><code></code><code>specify { </code><code>@user</code><code>.save.should == </code><code>true</code> <code>} </code></div>
<div><code></code><code>end</code></div>
<div> </div>
<div><code></code><code>describe </code><code>:present</code> <code>do</code></div>
<div><code></code><code>subject { </code><code>@user</code><code>.present } </code></div>
<div> </div>
<div><code></code><code>context </code><code>"when user is a W"</code> <code>do</code></div>
<div><code></code><code>before { </code><code>@user</code><code>.gender = </code><code>'W'</code> <code>} </code></div>
<div> </div>
<div><code></code><code>it { should be_a Flower } </code></div>
<div><code></code><code>end</code></div>
<div> </div>
<div><code></code><code>context </code><code>"when user is a M"</code> <code>do</code></div>
<div><code></code><code>before { </code><code>@user</code><code>.gender = </code><code>'M'</code> <code>} </code></div>
<div> </div>
<div><code></code><code>it { should be_an IMac } </code></div>
<div><code></code><code>end</code></div>
<div><code></code><code>end</code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<h2>Test Valid, Edge and Invalid cases</h2>
This is called <em>Boundary value analysis</em>, it’s simple and it will help you to cover the most important cases. Just split-up method’s input or object’s attributes into valid and invalid partitions and test both of them and there boundaries. A method specification might look like that:
<div>
<div id="highlighter_449964">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>describe </code><code>"#month_in_english(month_id)"</code> <code>do</code></div>
<div><code></code><code>context </code><code>"when valid"</code> <code>do</code></div>
<div><code></code><code>it </code><code>"should return 'January' for 1"</code> <code># lower boundary </code></div>
<div><code></code><code>it </code><code>"should return 'March' for 3"</code></div>
<div><code></code><code>it </code><code>"should return 'December' for 12"</code> <code># upper boundary </code></div>
<div><code></code><code>context </code><code>"when invalid"</code> <code>do</code></div>
<div><code></code><code>it </code><code>"should return nil for 0"</code></div>
<div><code></code><code>it </code><code>"should return nil for 13"</code></div>
<div><code></code><code>end</code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
I hope this will help you improve your specs. Let me know if I missed anything! :)

You could also be interested in <a href="http://eggsonbread.com/2010/09/06/my-cucumber-best-practices-and-tips/">(My) Cucumber best practices and tips</a> or <a href="https://github.com/pcreux/rspec-set">rspec-set</a> a little gem that helps you speeding up your model specs.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>255</wp:post_id>
		<wp:post_date>2012-02-26 16:30:57</wp:post_date>
		<wp:post_date_gmt>2012-02-26 08:30:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rspec-best-practices-and-tips</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="practices"><![CDATA[practices]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rspec"><![CDATA[RSpec]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="tips"><![CDATA[tips]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>724</wp:comment_id>
			<wp:comment_author><![CDATA[jhjguxin]]></wp:comment_author>
			<wp:comment_author_email>864248765@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://jhjguxin.hwcrazy.com/</wp:comment_author_url>
			<wp:comment_author_IP>180.173.38.94</wp:comment_author_IP>
			<wp:comment_date>2013-07-10 21:22:08</wp:comment_date>
			<wp:comment_date_gmt>2013-07-10 13:22:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, you can do it as you like.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>701</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1373462528.77";s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jhjguxin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:80:{s:15:"comment_post_ID";s:3:"255";s:14:"comment_author";s:8:"jhjguxin";s:20:"comment_author_email";s:16:"864248765@qq.com";s:18:"comment_author_url";s:28:"http://jhjguxin.hwcrazy.com/";s:15:"comment_content";s:31:"Yes, you can do it as you like.";s:14:"comment_parent";s:3:"701";s:7:"user_ID";s:1:"1";s:7:"user_ip";s:13:"180.173.38.94";s:10:"user_agent";s:131:"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/28.0.1500.52 Chrome/28.0.1500.52 Safari/537.36";s:8:"referrer";s:54:"http://jhjguxin.sinaapp.com/wp-admin/edit-comments.php";s:4:"blog";s:27:"http://jhjguxin.sinaapp.com";s:9:"blog_lang";s:5:"zh_CN";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:69:"http://jhjguxin.sinaapp.com/2012/02/26/rspec-best-practices-and-tips/";s:9:"user_role";s:13:"administrator";s:21:"akismet_comment_nonce";s:6:"passed";s:22:"POST_newcomment_author";s:0:"";s:28:"POST_newcomment_author_email";s:0:"";s:26:"POST_newcomment_author_url";s:0:"";s:12:"POST_user_ID";s:1:"1";s:11:"POST_action";s:15:"replyto-comment";s:15:"POST_comment_ID";s:3:"701";s:20:"POST_comment_post_ID";s:3:"255";s:11:"POST_status";s:0:"";s:13:"POST_position";s:2:"-1";s:13:"POST_checkbox";s:1:"1";s:9:"POST_mode";s:6:"detail";s:32:"POST__ajax_nonce-replyto-comment";s:10:"cdeb37f128";s:32:"POST__wp_unfiltered_html_comment";s:10:"ae770acab4";s:12:"POST_content";s:31:"Yes, you can do it as you like.";s:7:"POST_id";s:3:"255";s:21:"POST_comments_listing";s:3:"all";s:19:"POST_approve_parent";s:1:"1";s:15:"SERVER_SOFTWARE";s:6:"Apache";s:11:"REQUEST_URI";s:24:"/wp-admin/admin-ajax.php";s:14:"MEF_PROXY_ADDR";s:11:"10.67.15.12";s:11:"has_apphash";s:1:"1";s:16:"ApplimitOutOfCon";s:1:"0";s:16:"ApplimitOutOfMem";s:1:"0";s:10:"SCRIPT_URL";s:24:"/wp-admin/admin-ajax.php";s:10:"SCRIPT_URI";s:51:"http://jhjguxin.sinaapp.com/wp-admin/admin-ajax.php";s:20:"HTTP_X_FORWARDED_FOR";s:13:"180.173.38.94";s:9:"HTTP_HOST";s:20:"jhjguxin.sinaapp.com";s:12:"HTTP_APPNAME";s:8:"jhjguxin";s:15:"HTTP_APPVERSION";s:1:"1";s:9:"HTTP_MCIP";s:26:"1default;1::;1:@default:;;";s:14:"HTTP_ACCESSKEY";s:10:"34y21z4k20";s:12:"HTTP_APPHASH";s:3:"311";s:14:"HTTP_MYSQLPORT";s:4:"3307";s:14:"HTTP_APPCOOKIE";s:26:"default_version=1;debug=2;";s:12:"HTTP_APPSRVC";s:19:"0000000000000000AC0";s:15:"HTTP_CONNECTION";s:5:"close";s:14:"CONTENT_LENGTH";s:3:"342";s:11:"HTTP_ACCEPT";s:3:"*/*";s:11:"HTTP_ORIGIN";s:27:"http://jhjguxin.sinaapp.com";s:21:"HTTP_X_REQUESTED_WITH";s:14:"XMLHttpRequest";s:15:"HTTP_USER_AGENT";s:131:"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/28.0.1500.52 Chrome/28.0.1500.52 Safari/537.36";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:12:"HTTP_REFERER";s:54:"http://jhjguxin.sinaapp.com/wp-admin/edit-comments.php";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip,deflate,sdch";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.8";s:11:"HTTP_COOKIE";s:0:"";s:4:"PATH";s:46:"/bin:/usr/bin:/usr/ucb:/usr/bsd:/usr/local/bin";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:20:"jhjguxin.sinaapp.com";s:11:"SERVER_ADDR";s:11:"10.67.15.25";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:13:"180.173.38.94";s:13:"DOCUMENT_ROOT";s:32:"/data1/www/htdocs/311/jhjguxin/1";s:12:"SERVER_ADMIN";s:18:"saesupport@sina.cn";s:15:"SCRIPT_FILENAME";s:56:"/data1/www/htdocs/311/jhjguxin/1/wp-admin/admin-ajax.php";s:11:"REMOTE_PORT";s:5:"46934";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:24:"/wp-admin/admin-ajax.php";s:8:"PHP_SELF";s:24:"/wp-admin/admin-ajax.php";s:12:"REQUEST_TIME";s:10:"1373462518";s:14:"HTTP_SECRETKEY";s:9:"Discarded";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>701</wp:comment_id>
			<wp:comment_author><![CDATA[Collette]]></wp:comment_author>
			<wp:comment_author_email>collettevelazquez@gmx.de</wp:comment_author_email>
			<wp:comment_author_url>http://blog.yam.com/kitchenware/article/41493768</wp:comment_author_url>
			<wp:comment_author_IP>176.31.3.156</wp:comment_author_IP>
			<wp:comment_date>2013-06-02 18:21:25</wp:comment_date>
			<wp:comment_date_gmt>2013-06-02 10:21:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Would you mind if I quote a few of your articles as long as I provide credit and sources back to your blog: http://jhjguxin.
sinaapp.com/2012/02/26/rspec-best-practices-and-tips/.
I'll aslo make sure to give you the proper anchor text link using your webpage title: RSpec best practices and tips ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1373462528.79";s:7:"message";s:39:"jhjguxin 将评论状态改为 approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jhjguxin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1370168485.44";s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:70:{s:15:"comment_post_ID";s:3:"255";s:14:"comment_author";s:8:"Collette";s:20:"comment_author_email";s:24:"collettevelazquez@gmx.de";s:18:"comment_author_url";s:48:"http://blog.yam.com/kitchenware/article/41493768";s:15:"comment_content";s:451:"Would you mind if I quote a few of your articles as long as I provide credit and sources back to your blog: http://jhjguxin.
sinaapp.com/2012/02/26/rspec-best-practices-and-tips/.
I'll aslo make sure to give you the proper anchor text link using your webpage title: RSpec best practices and tips ]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>ruby参考手册VII </title>
		<link></link>
		<pubDate>Wed, 29 Feb 2012 16:07:19 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=260</guid>
		<description></description>
		<content:encoded><![CDATA[Ruby FAQ

1. 一般的问题
2. 变量、常数、参数
3. 调用带块方法（迭代器）
4. 句法
5. 方法
6. 类、模块
7. 内部库
8. 扩展库
9. 尚未列出的功能
10. 日语字符的处理
11. Ruby的处理系统

一般的问题

* 1.1 Ruby是什么？
* 1.2 为什么取名叫Ruby呢？
* 1.3 请介绍一下Ruby的诞生过程
* 1.4 哪里有Ruby的安装文件？
* 1.5 请问Ruby的主页在哪里？
* 1.6 请问有Ruby邮件列表吗？
* 1.7 怎么才能看到邮件列表中的老邮件？
* 1.8 rubyist和ruby hacker的区别是什么？
* 1.9 它的正确写法是"Ruby"还是"ruby"？
* 1.10 请介绍一些Ruby的参考书
* 1.11 我看了手册可还是不明白，该怎么办？
* 1.12 ruby的性格比较像羊？
* 1.13 遇到bug时怎么上报？

变量、常数、参数

* 2.1 将对象赋值给变量或常数时,会先拷贝该对象吗?
* 2.2 局部变量的作用域是如何划定的?
* 2.3 何时才能使用局部变量?
* 2.4 常数的作用域是如何划定的?
* 2.5 实参是怎么传递给形参的呢?
* 2.6 将实参赋值给形参之后,对实参本身有什么影响吗?
* 2.7 若向形参所指对象发送消息的话,可能出现什么结果?
* 2.8 参数前面的*是什么意思?
* 2.9 参数前面的&amp;代表什么?
* 2.10 可以给形参指定默认值吗?
* 2.11 如何向块传递参数呢?
* 2.12 为什么变量和常数的值会自己发生变化?
* 2.13 常数不能被修改吗?

调用带块方法

* 3.1 什么是"带块的方法调用"?
* 3.2 怎么将块传递给带块方法?
* 3.3 如何在主调方法中使用块?
* 3.4 为什么Proc.new没有生成过程对象呢?

句法

* 4.1 像:exit这种带:的标识符表示什么？
* 4.2 如何取得与符号同名的变量的值？
* 4.3 loop是控制结构吗？
* 4.4 a +b报错，这是怎么回事儿？
* 4.5 s = "x"; puts s *10 报错，这是怎么回事儿？
* 4.6 为什么p {}没有任何显示呢？
* 4.7 明明有pos=()这样的setter方法，可为什么pos=1时却没有任何反应呢？
* 4.8 '\1'和'\\1'有什么不同？
* 4.9 在p true or true an<span>d</span> false中会显示true，但在a=true if true or true and false中却不会把true赋值给a。
* 4.10 为什么p(nil || "")什么事儿都没有，可p(nil or "")却会报错呢？

方法

* 5.1 向对象发出消息之后，将按照什么顺序来搜索要执行的方法？
* 5.2 +和-是操作符吗？
* 5.3 Ruby中有函数吗？
* 5.4可以在外部使用对象的实例变量吗？
* 5.5 private和protected有什么不同？
* 5.6 能不能将实例变量变成public类型的变量？
* 5.7 怎样指定方法的可见性？
* 5.8 方法名可以用大写字母开头吗？
* 5.9 为什么使用super时会出现ArgumentError?
* 5.10 如何调用上2层的同名方法？
* 5.11 重定义内部函数时，如何调用原来的函数？
* 5.12 何谓破环性的方法？
* 5.13 那些情况下会产生副作用？
* 5.14 能让方法返回<span>多个值</span>吗？

类、模块

* 6.1 重定义类时，是否会覆盖原来的定义？
* 6.2 有类变量吗？
* 6.3 什么是类的实例变量？
* 6.4 什么是特殊方法？
* 6.5 什么是类方法？
* 6.6 什么是特殊类？
* 6.7 什么是模块函数？
* 6.8 类和模块有什么区别？
* 6.9 模块可以生成子类吗？
* 6.10 在类定义中定义类方法 和 在顶层中定义类方法 之间有什么不同？
* 6.11 load和require有什么不同？
* 6.12 include和extend有什么不同？
* 6.13 self是什么？
* 6.14 MatchData中的begin、end分别返回什么？
* 6.15 如何使用类名来获得类？

内部库

* 7.1 instance_methods(true)返回什么?
* 7.2 为什么rand总是生成相同的随机数?
* 7.3 怎样从0到51中选出5个不重复的随机数呢?
* 7.4 Fixnum、Symbol、true、nil和false这些立即值与引用有什么不同?
* 7.5 nil和false有什么不同?
* 7.6 为什么读入文件并修改之后, 原文件依然没有变化?
* 7.7 怎样覆盖同名文件?
* 7.8 写文件后拷贝该文件,但所得副本并不完整,请问原因何在?
* 7.9 在管道中将字符串传给less后, 为什么看不到结果?
* 7.10 无法引用的File对象将会何去何从?
* 7.11 怎样手动关闭文件?
* 7.12 如何按照更新时间的新旧顺序来排列文件?
* 7.13 如何获取文件中单词的出现频度?
* 7.14 为什么条件表达式中的空字符串表示true呢?
* 7.15 如何按照字典顺序来排列英文字符串数组?
* 7.16 "abcd"[0]会返回什么?
* 7.17 怎么把tab变成space?
* 7.18 如何对反斜线进行转义操作?
* 7.19 sub和sub!的区别在哪里?
* 7.20 \Z匹配什么？
* 7.21 范围对象中的..和...有什么不同?
* 7.22 有函数指针吗?
* 7.23 线程和进程fork有何异同？
* 7.24 如何使用Marshal？
* 7.25 Ruby有异常处理语句吗?
* 7.26 如何使用trap？
* 7.27 如何统计文件的行数？
* 7.28 怎样把数组转化为哈希表？
* 7.29 将字符串变为Array时可以使用%w(...)，那么将字符串变为Hash时能不能如法炮制呢？
* 7.30 为何无法捕捉NameError异常呢？
* 7.31 为什么有succ却没有prev呢

扩展库

* 8.1 如何使用交互式Ruby？
* 8.2 有调试器吗？
* 8.3 怎样在Ruby中使用以C写成的库？
* 8.4 有Tcl/Tk的接口吗？
* 8.5 为什么我的Tk不管用？
* 8.6 有gtk+、xforms的接口吗？
* 8.7 进行日期计算时需要注意哪些问题？

尚未列出的功能
日语字符的处理

* 10.1 若包含汉字的脚本输出乱码或无法正常运行时，该如何处理？
* 10.2 选项-K和$KCODE有什么不同？
* 10.3 可以使用日语标识符吗？
* 10.4 如何从包含日语字符的字符串中依次抽出1个字符？
* 10.5 tr("あ","a")运作不正常，应如何处置？
* 10.6 如何对平假名进行排序？
* 10.7 如何用空白来替代SJIS中从84BF到889F之间的系统相关代码？
* 10.8 如何进行全角－半角字符的变换？
* 10.9 关于半角假名的问题
* 10.10 怎样从包含日语字符的字符串中抽出n字节的内容？
* 10.11 怎么让日语文本在第n个字处换行？

Ruby的处理系统

* 11.1 能不能编译Ruby脚本呢？
* 11.2 有没有Java VM版的Ruby？
* 11.3 除了original Ruby之外，就没有其他版本吗？
* 11.4 有没有Ruby用的indent？
* 11.5 有没有使用本地线程的Ruby？
* 11.6 GC实在是太慢了，怎么办才好？
* 11.7 有没有Mac版的Ruby？

1. 一般的问题

* 1.1 Ruby是什么？
* 1.2 为什么取名叫Ruby呢？
* 1.3 请介绍一下Ruby的诞生过程
* 1.4 哪里有Ruby的安装文件？
* 1.5 请问Ruby的主页在哪里？
* 1.6 请问有Ruby邮件列表吗？
* 1.7 怎么才能看到邮件列表中的老邮件？
* 1.8 rubyist和ruby hacker的区别是什么？
* 1.9 它的正确写法是"Ruby"还是"ruby"？
* 1.10 请介绍一些Ruby的参考书
* 1.11 我看了手册可还是不明白，该怎么办？
* 1.12 ruby的性格比较像羊？
* 1.13 遇到bug时怎么上报？

1.1 Ruby是什么？

一言以蔽之，Ruby是一种

语法简单且功能强大的面向对象的脚本语言。

与perl一样，Ruby的文本处理功能十分强大。当然了它的功能远不止于此，您还可以使用它来开发实用的服务器软件。

Ruby博采众长，吸收了众多语言的优点，却又别具一格。

Ruby的优点主要体现在以下几个方面。

* 它的语法简单
* 它具有普通的面向对象功能(类、方法调用等)
* 它还具有特殊的面向对象功能(Mix-in、特殊方法等)
* 可重载操作符
* 具有异常处理功能
* 调用带块方法(迭代器)和闭包
* 垃圾回收器
* 动态载入(取决于系统架构)
* 可移植性。它可以运行在大部分的UNIX、DOS和Mac上

1.2 为什么取名叫Ruby呢？

松本先生曾经在[ruby-talk:00394][英译稿](June 11, 1999)中讲过取名的经过。

据说当初松本先生一直琢磨着要给这个新语言取个像Perl这样的宝石名字，正好有个同事的诞生石是Ruby，因此就取名叫Ruby了。

后来发现Ruby和Perl真的很投缘，例如pearl诞生石代表6月，而ruby诞生石则代表7月。还有pearl的字体大小是5pt，而ruby则是5.5pt等等。因此松本先生觉得Ruby这个名字很合适，并努力使其成为比Perl更新更好的脚本语言。

松本先生正期待着Ruby取代Perl的那一天早点到来(^^)。
1.3 请介绍一下Ruby的诞生过程

松本先生曾经在[ruby-talk:00382][英译稿](June 4, 1999)中介绍过Ruby的诞生过程。[ruby-list:15997]修改了Ruby的诞生时间。

*

Ruby诞生于1993年2月24日。那天我和同事们聊了聊面向对象语言的可能性问题。我了解Perl(Perl4而非Perl5)，但我不喜欢它身上的那股玩具味儿(现在也是如此)。面向对象的脚本语言的前途一片光明。

我觉得Python不能算作真正的面向对象语言，因为它的面向对象特性好像是后加进去的一样。15年来我一直为编程语言而痴狂，我热衷于面向对象编程，但却没有找到一款真正意义上的面向对象的脚本语言。

于是我下定决心自己来开发一个。经过几个月的努力，解释器终于开发成功。然后我又添加了一些自己梦寐以求的东西，如迭代器、异常处理、垃圾回收等。

后来我又采用类库方式添加了Perl的特性。1995年12月，我在日本国内的新闻组上发布了Ruby 0.95版本。

接下来我创建了邮件列表和网站。此后，大家在邮件列表中聊得酣畅淋漓。时至今日，第一个邮件列表中已经积累了14789封邮件。

Ruby 1.0发布于1996年12月，1.1发布于1997年8月。1998年12月，我又发布了安定版1.2和开发版1.3。

1.4 哪里有Ruby的安装文件？

您可以在这里&lt;URL:ftp://ftp.ruby-lang.org/pub/ruby/&gt;找到最新版的Ruby。

镜像站点列表如下

* &lt;URL:ftp://ftp.TokyoNet.AD.JP/pub/misc/ruby/&gt;
* &lt;URL:ftp://ftp.iij.ad.jp/pub/lang/ruby/&gt;
* &lt;URL:ftp://blade.nagaokaut.ac.jp/pub/lang/ruby/&gt;
* &lt;URL:ftp://ftp.krnet.ne.jp/pub/ruby/&gt;
* &lt;URL:ftp://mirror.nucba.ac.jp/mirror/ruby/&gt;
* &lt;URL:http://mirror.nucba.ac.jp/mirror/ruby/&gt;

您可以在Ruby Binaries中找到cygwin版、mingw版和djgpp版的二进制文件包。

另外，Windows(cygwin)中还为初学者准备了Ruby Entry Package。安装方法请参考面向初学者的Ruby安装说明。
1.5 请问Ruby的主页在哪里？

Ruby的官方网站是&lt;URL:http://www.ruby-lang.org/&gt;。
1.6 请问有Ruby邮件列表吗？

现在有6个正式的Ruby邮件列表。

* ruby-list
* ruby-dev
* ruby-ext
* ruby-math
* ruby-talk
* ruby-core

详情请参考Ruby邮件列表。
1.7 怎么才能看到邮件列表中的老邮件？

&lt;URL:http://blade.nagaokaut.ac.jp/ruby/ruby-list/index.shtml&gt;和&lt;URL:http://ruby.freak.ne.jp/&gt;里面有搜索邮件用的表单。

另外，ML Topics中列出了老邮件中的重要话题。
1.8 rubyist和ruby hacker的区别是什么？

松本先生对rubyist和Ruby hacker的定义如下。

rubyist是指那些对Ruby的关心程度超过常人的人。例如

* 向周围的人宣传Ruby的人
* 编写Ruby的FAQ的人
* 在计算机通信组中增加Ruby小组的组长
* 撰写Ruby书籍的作者
* 写信鼓励Ruby作者的热心人
* Ruby作者本人 ^^;;;

而Ruby hacker是指那些在技术层面上对Ruby有所专攻的人。例如

* Ruby扩展库的作者
* 修改Ruby中的bug并发布补丁的人
* djgpp版Ruby或win32版Ruby的作者
* 用Ruby编写了实用(必须得具备一定规模的)程序的人
* 用Ruby编写出天书般难懂的脚本的人
* Ruby作者本人 ^^;;;

等就是Ruby hacker。

这些称号只不过是自我解嘲式的自称，我不会为任何人进行正式的认证。松本先生特别将上述人士列为{rubyist、Ruby hacker}，可见其尊敬之情。
1.9 它的正确写法是"Ruby"还是"ruby"？

Ruby的正式写法是"Ruby"，其命令名是"ruby"。另外只要不让人觉得别扭的话，也可以使用ruby来替代Ruby。

但不能把"RUBY"、"ルビー"或"るびー"用作这门语言的名称。

此前曾经有一段时间把"ruby"用作正式名称。
1.10 请介绍一些Ruby的参考书

主要有《オブジェクト指向スクリプト言語Ruby》(译注:日语书名未翻译)[松本行弘／石塚圭树 合著 ASCII出版(ISBN4-7561-3254-5)]，其他书目请参考Ruby相关书籍。

至于正则表达式，请参考Jeffrey E. F.Friedl著的《詳説正規表現》(译注:日语书名未翻译)[reilly Japan出版(ISBN4-900900-45-1)]。这本书介绍了各种正则表达式的实现问题，有助于加深您对于Ruby正则表达式的理解。
1.11 我看了手册可还是不明白，该怎么办？

Ruby的基本句法从Ruby1.0以后就没有太大的变化，但却在不断完善和扩充，因此有时文档的更新速度跟不上最新的发展。另外，有人坚持说源代码就是文档，如此种种。

若您有何疑问，请不必顾虑太多，直接到ruby-list中提问即可。Ruby教主松本先生以及各位尊师还有我都会为您排忧解难。

提问时，请写明ruby -v的结果并附带上您的代码(若代码太长的话，只需摘录重要部分即可)。

若您使用的是irb的话，则稍有不同。因为irb自身也存在一些问题，所以您最好先用irb --single-irb重试一下，或者用ruby重新运行一次为好。

虽然搜索ML可以解决您的大部分问题，但因为邮件数量庞大，想找到答案实属不易。为遵从网络礼节(请参考RFC1855的3.1.1、3.1.2)，您可以只搜索最近的内容，但是说起来容易，做起来难。况且说不定最近又出现了什么新观点呢。所以您还是壮起胆子来提问吧。
1.12 ruby的性格比较像羊？

羊、蜂鸟、兔子...
1.13 遇到bug时怎么上报？

遇到bug时应该上报到Ruby Bug Tracking System，通常很快就会得到回复。您也可以用邮件将bug的情况上报到ruby-bugs-ja。

上报时，最好能提供ruby的版本和平台信息、错误消息以及能再现bug的脚本和数据。

遇到bug时，通常会显示[BUG]消息，而Ruby也将被强行关闭。此时大部分系统都会生成一个core文件。若您的调试器可用的话，可能还会有backtrace。若您能提供这些信息就更好了。


2. 变量、常数、参数

* 2.1 将对象赋值给变量或常数时,会先拷贝该对象吗?
* 2.2 局部变量的作用域是如何划定的?
* 2.3 何时才能使用局部变量?
* 2.4 常数的作用域是如何划定的?
* 2.5 实参是怎么传递给形参的呢?
* 2.6 将实参赋值给形参之后,对实参本身有什么影响吗?
* 2.7 若向形参所指对象发送消息的话,可能出现什么结果?
* 2.8 参数前面的*是什么意思?
* 2.9 参数前面的&amp;代表什么?
* 2.10 可以给形参指定默认值吗?
* 2.11 如何向块传递参数呢?
* 2.12 为什么变量和常数的值会自己发生变化?
* 2.13 常数不能被修改吗?

2.1 将对象赋值给变量或常数时,会先拷贝该对象吗?

变量和常数都指向一个对象。即使不赋值, 它也是指向nil对象的。赋值操作只不过是让它指向另一个新对象而已。

所以, 赋值时并不会拷贝并生成一个新对象. 而是让赋值表达式左边的变量或常数指向表达式右边的对象。

尽管如此, 可能还是有人不理解. 这也是情有可原的, 因为上面的解释并不能涵盖所有的情况. 实际上, Fixnum、NilClass、 TrueClass、FalseClass以及Symbol类的实例会被变量或常数直接保存, 所以赋值时会被拷贝。其他类的实例都在内存上的其他地方, 变量和常数会指向它们。请参考立即值和使用。
2.2 局部变量的作用域是如何划定的?

顶层、类(模块)定义或方法定义都是彼此独立的作用域。另外, 在块导入新的作用域时, 它还可以使用外侧的局部变量。

块之所以与众不同, 是因为这样能够保证Thread或过程对象中的局部变量的"局部性"。while、until、for是控制结构, 它们不会导入新的作用域。另外, loop是方法, 它的后面跟着块。
2.3 何时才能使用局部变量?

在Ruby解释器运行Ruby脚本时, 它会一次读取整个脚本,然后进行语法分析。若没有语法问题的话, 才会开始执行句法分析中得到的代码。

在进行语法分析时, 只有在遇到局部变量的赋值语句之后, 才能使用它。例如

for i in 1..2
if i == 2
print a
else
a = 1
end
end

把上述代码写入名为test.rb的脚本. 执行该脚本后发生如下错误

test.rb:3: undefined local variable or method `a' for
#&lt;Object:0x40101f4c&gt; (NameError)
from test.rb:1:in `each'
from test.rb:1

当i值为1时,并不会发生错误;当i变成2之后就不行了。这是因为, 在进行语法分析时并不会按照运行时的逻辑顺序来进行, 而只是机械地逐行分析. 在遇到print a语句时, a并未被赋值, 因而无法使用该局部变量. 之后,在运行时因为找不到名为a的方法, 所以发生错误。

相反地, 若使用如下脚本则不会出现错误。

a = 1 if false; print a
#=&gt; nil

若您不想因为局部变量的这个特性而费神的话, 我们推荐您在使用局部变量之前, 添加a = nil赋值语句。这样作还有一个好处, 就是可以加快局部变量的使用速度。
2.4 常数的作用域是如何划定的?

类/模块中定义的常数可以用在该类/模块中。

若类/模块定义发生嵌套时, 可在内侧类/模块中使用外侧的常数。

还可以使用超类以及包含模块中的常数。

因为顶层中定义的常数已经被添加到Object类中, 所以您可以在所有的类/模块中使用顶层中的常数。

若遇到无法直接使用的常数时, 可以使用 类/模块名+::操作符+常数名 的方式来使用它。
2.5 实参是怎么传递给形参的呢?

方法调用时, 会把实参赋值给形参。请您参考向变量进行赋值来了解Ruby中赋值的含义。若实参中的对象包含可以改变自身状态的方法时,就必须注意其副作用(当然了,也有可能不是副作用)了。请参考破坏性的方法。
2.6 将实参赋值给形参之后,对实参本身有什么影响吗?

形参是局部变量, 对其进行赋值之后, 它就会指向其他对象. 仅此而已, 它并不会对原来的实参有什么影响。
2.7 若向形参所指对象发送消息的话,可能出现什么结果?

形参所指对象实际上就是实参所指对象. 若该对象接到消息时状态发生变化的话,将会影响到主调方。请参考破坏性的方法。
2.8 参数前面的*是什么意思?

各位C语言大侠请看好, 这可不是什么指针。在Ruby的参数前面添加一个*表示, 它可以接受以数组形式传来的不定量的参数。

def foo(*all)
for e in all
print e, " "
end
end

foo(1, 2, 3)
#=&gt; 1 2 3

另外,如果在方法调用中传了一个带*的数组, 则表示先展开数组然后再进行传递。

a = [1, 2, 3]
foo(*a)

现在只能在以下部分的尾部使用*

1. 多重赋值的左边
2. 多重赋值的右边
3. 参数列表(定义方法时)
4. 参数列表(调用方法时)
5. case的when部分

下面是在第(1)种形式中使用*的例子

x, *y = [7, 8, 9]

上面的代码相当于x = 7、y = [8, 9]。另外,下面的代码

x, = [7, 8, 9]

也是合法的, 此时x = 7. 而

x = [7, 8, 9]

则表示x = [7, 8, 9]。
2.9 参数前面的&amp;代表什么?

在参数前面添加&amp;之后,就可以像使用块那样来传递/接收过程对象。它只能位于参数列表的末尾。
2.10 可以给形参指定默认值吗?

可以。

在调用函数时,才会计算该默认值。您可以使用任意表达式来设定Ruby的默认值(C++只能使用编译时的常数). 调用方法时,会在方法的作用域内计算默认值。
2.11 如何向块传递参数呢?

在块内部的前端,使用||将形参括起来之后, 就可以使用实参进行多重赋值了。该形参只是普通的局部变量, 若块的外侧已经有同名参数时, 块参数的作用域将扩大到块外侧, 请留意这个问题。
2.12 为什么变量和常数的值会自己发生变化?

请看下例。

A = a = b = "abc"; b &lt;&lt; "d"; print a, " ", A
#=&gt; abcd abcd

对变量或常数进行赋值, 是为了以后通过它们来使用对象。这并不是将对象本身赋值给变量或常数, 而只是让它们记住对该对象的引用。变量可以修改这个引用来指向其他的对象, 而常数却不能修改引用。

对变量或常数使用方法时, 实际上就是对它们所指的对象使用该方法。在上例中, &lt;&lt;方法修改了对象的状态,所以引发了"非预期"的结果。若该对象是数值的话, 就不会发生这种问题, 因为数值没有修改其自身状态的方法。若对数值使用方法时, 将返回新的对象。

这个例子虽然是用字符串来作演示的, 但就算使用带有可修改自身状态的方法的那些对象, 如数组或哈希表等来试验的话, 效果也是一样的。
2.13 常数不能被修改吗?

若想让指向某对象的常数转而指向其他对象时, 就会出现warning。

若该对象带有破坏性的方法的话, 则可以修改该对象的内容。


3. 带块的方法调用

* 3.1 什么是"带块的方法调用"?
* 3.2 怎么将块传递给带块方法?
* 3.3 如何在主调方法中使用块?
* 3.4 为什么Proc.new没有生成过程对象呢?

3.1 什么是"带块的方法调用"?

有些方法允许在调用它的过程中添加块或者过程对象, 这种特殊的方法调用就是"带块的方法调用"。

这原本是为了对控制结构(特别是循环)进行抽象而设置的功能, 因此有时也被称作迭代器. 当然了, 若您只想调用块而不进行iterate(迭代)操作时,也可以使用它.

下例中就用到了迭代器。

data = [1, 2, 3]
data.each do |i|
print i, "\n"
end

它会输出如下内容。

$ ruby test.rb
1
2
3

也就是说,do和end之间的块被传递给方法, 供其差遣。each方法分别为data中的每个元素来执行块的内容。

用C语言来改写的话,就是

int data[3] = {1, 2, 3};
int i;
for (i = 0; i &lt; 3; i++) {
printf("%d\n", data[i]);
}

用for来编写代码时, 必须自己进行迭代处理. 相反地, 使用带块的方法调用时, 则由方法负责处理, 这大大减少了因误判循环边界而导致bug的可能性。

另外, 除了do...end之外, 您还可以使用{...}。

data = [1, 2, 3]
data.each { |i|
print i, "\n"
}

这段代码与前面的完全等效。但这并不标明do...end与{...}完全等效。例如

foobar a, b do .. end # 此时foobar被看做是带块的方法
foobar a, b { .. } # 而此时 b被看做是带块的方法

这说明{ }的结合力大于do块。
3.2 怎么将块传递给带块方法?

如果想将块传递给带块方法, 只需要将块放在方法后面即可. 另外, 还可以在表示过程对象的变量/常数前添加&amp;, 并将其作为参数传递给方法即可。
3.3 如何在主调方法中使用块?

有3种方式可以让您在方法中使用块. 它们分别是yield控制结构、块参数和Proc.new。(在由C语言写成的扩展库中,需要使用rb_yield)

使用yield时, yield后面的参数会被传递给块, 然后执行块的内容。

块参数是指,插在方法定义中的参数列表末尾的 形如&amp;method的参数. 可以在方法中,这样method.call(args...)来进行调用。

使用Proc.new时, 它会接管传递给方法的块, 并以块的内容为范本生成一个过程对象。proc或lamda也是一样。

def a (&amp;b)
yield
b.call
Proc.new.call
proc.call
lambda.call
end
a{print "test\n"}

3.4 为什么Proc.new没有生成过程对象呢?

若没有给出块的话, Proc.new是不会生成过程对象的, 而且还会引发错误。在方法定义中插入Proc.new时, 一般都假定在方法调用时会传过来一个块。


4. 句法

* 4.1 像:exit这种带:的标识符表示什么？
* 4.2 如何取得与符号同名的变量的值？
* 4.3 loop是控制结构吗？
* 4.4 a +b报错，这是怎么回事儿？
* 4.5 s = "x"; puts s *10 报错，这是怎么回事儿？
* 4.6 为什么p {}没有任何显示呢？
* 4.7 明明有pos=()这样的setter方法，可为什么pos=1时却没有任何反应呢？
* 4.8 '\1'和'\\1'有什么不同？
* 4.9 在p true or true and false中会显示true，但在a=true if true or true and false中却不会把true赋值给a。
* 4.10 为什么p(nil || "")什么事儿都没有，可p(nil or "")却会报错呢？

4.1 像:exit这种带:的标识符表示什么？

它叫做符号对象，它与标识符之间是1对1的关系。您也可以使用"exit".intern来得到它。在catch, throw, autoload等方法中，既可以使用字符串参数，又可以使用符号参数。
4.2 如何取得与符号同名的变量的值？

在symbol的作用域内，使用eval((:symbol).id2name)来取值。

a = 'This is the content of "a"'
b = eval(:a.id2name)
a.id == b.id

4.3 loop是控制结构吗？

不，它是方法。该块会导入新的局部变量的作用域。
4.4 a +b报错，这是怎么回事儿？

它会被解释成a(+b)。+的两侧要么都有空格，要么就都没有。
4.5 s = "x"; puts s *10 报错，这是怎么回事儿？

puts s *10会被解释成s(*10)的方法调用，所以要么s*10这样，要么s * 10这样。
4.6 为什么p {}没有任何显示呢？

{}会被解释成块，而并非哈希表的构造函数。所以您需要使用p({})或者p Hash.new来解决这个问题。
4.7 明明有pos=()这样的setter方法，可为什么pos=1时却没有任何反应呢？

请看下例。

class C
attr_reader :pos
def pos=(n)
@pos = n * 3
end

def set
pos = 1 #A行
end
end

a = C.new
a.set
p a.pos #=&gt; nil (预期值是 3)

本来指望最后一行能输出 3，但却是个 nil ，这是因为Ruby把A行的pos解释成局部变量了。若想调用pos=()的话，请这样self.pos = 1调用。
4.8 '\1'和'\\1'有什么不同？

没有不同，二者完全一样。在单引号中，只有\'、\\和行尾的\(取消换行)会得到特殊的解释，其他字符不变。
4.9 在p true or true and false中会显示true，但在a=true if true or true and false中却不会把true赋值给a。

第1个表达式会被解释成(p true) or true and false，其中的and/or是构成语句的要素，而并不是用来连接p的参数的操作符。

第2个表达是则会被解释成a=true if (true or true and false)。因为if的优先度低于and/or，且or与and的优先度相同，所以就会从左到右地完成解析。
4.10 为什么p(nil || "")什么事儿都没有，可p(nil or "")却会报错呢？

虽然||可以连接参数，但or就只能连接句子，所以如此。关于这点区别，您试一试下面的例子就明白了。

p nil || ""
p nil or ""


5. 方法

* 5.1 向对象发出消息之后，将按照什么顺序来搜索要执行的方法？
* 5.2 +和-是操作符吗？
* 5.3 Ruby中有函数吗？
* 5.4可以在外部使用对象的实例变量吗？
* 5.5 private和protected有什么不同？
* 5.6 能不能将实例变量变成public类型的变量？
* 5.7 怎样指定方法的可见性？
* 5.8 方法名可以用大写字母开头吗？
* 5.9 为什么使用super时会出现ArgumentError?
* 5.10 如何调用上2层的同名方法？
* 5.11 重定义内部函数时，如何调用原来的函数？
* 5.12 何谓破环性的方法？
* 5.13 那些情况下会产生副作用？
* 5.14 能让方法返回<span>多个值</span>吗？

5.1 向对象发出消息之后，将按照什么顺序来搜索要执行的方法？

将依次搜索特殊方法、本类中定义的方法和超类(包括Mix-in进来的模块。写成 类名.ancestors。)中定义的方法，并执行所找到的第一个方法。若没有找到方法时，将按照同样的顺序来搜索method_missing。

mo<span>du</span>le Indexed
def [](n)
to_a[n]
end
end
class String
include Indexed
end
p String.ancestors # [String, Indexed, Enumerable, Comparable, Object, Kernel]
p "abcde".gsub!(/./, "\\&amp;\n")[1]

遗憾的是上述代码返回的是10，而并非预期的"b\n"。这是因为系统在String类中搜索[]，在遇到Indexed中定义的方法之前就已经完成了匹配，所以如此。若直接在Class String中重定义[]的话，就会如您所愿了。
5.2 +和-是操作符吗？

+和-等是方法调用，而并非操作符。因此可进行overload(重定义)。

class MyString &lt; String
def +(other)
print super(other)
end
end

但以下内容及其组合(!=、!~)则是控制结构，不能进行重定义。

=, .., ..., !, not, &amp;&amp;, and, |, or, ~, ::

重定义(或者定义)操作符时，应该使用形如+@或-@这样的方法名。

=是访问实例变量的方法，您可以在类定义中使用它来定义方法。另外，+或-等经过适当的定义之后，也可以进行形如+=这样的自赋值运算。

def attribute=(val)
@attribute = val
end

5.3 Ruby中有函数吗？

Ruby中看似函数的部分实际上都是些省略被调(self)的方法而已。例如

def writeln(str)
print(str, "\n")
end

writeln("Hello, World!")

中看似函数的部分实际上是Object类中定义的方法，它会被发送到隐藏的被调self中。因此可以说Ruby是纯粹的面向对象语言。

对内部函数这种方法来说，不管self如何，它们总是返回相同的结果。因此没有必要计较被调的问题，可以将其看作函数。
5.4 可以在外部使用对象的实例变量吗？

不能直接使用。若想操作实例变量，必须事先在对象中定义操作实例变量的方法(accessor)。例如

class C
def name
@name
end
def name=(str) # name 后面不能有空格！
@name = str
end
end

c = C.new
c.name = '山田太郎'
p c.name #=&gt; "山田太郎"

另外，您还可以使用Module#attr、attr_reader、 attr_writer、attr_accessor等来完成这种简单的方法定义。例如，您可以这样来重写上面的类定义。

class C
attr_accessor :name
end

若您不愿定义访问方法，却想使用实例变量时，可以使用Object#instance_eval。
5.5 private和protected有什么不同？

private意味着只能使用函数形式来调用该方法，而不能使用被调形式。所以，您只能在本类或其子类中调用private方法。

protected也是一样，只能用在本类及其子类中。但是您既可以使用函数形式又可以使用被调形式来调用它。

在封装方法时，该功能是必不可少。
5.6 能不能将实例变量变成public类型的变量？

无法让变量变成public类型的变量。在Ruby中访问实例变量时，需要使用访问方法。例如

class Foo
def initialize(str)
@name = str
end

def name
return @name
end
end

但是每次都这么写的话，未免有些繁琐。因此可以使用attr_reader、attr_writer、 attr_accessor等方法来完成这些简单的方法定义。

class Foo
def initialize(str)
@name = str
end

attr_reader :name
# 其效果等同于下面的代码。
# def name
# return @name
# end
end

foo = Foo.new("Tom")
print foo.name, "\n" # Tom

您还可以使用attr_accessor来同时定义写入的方法。

class Foo
def initialize(str)
@name = str
end

attr_accessor :name
# 其效果等同于下面的代码。
# def name
# return @name
# end
# def name=(str)
# @name = str
# end
end

foo = Foo.new("Tom")
foo.name = "Jim"
print foo.name, "\n" # Jim

若只想定义写入方法的话，可以使用attr_writer。
5.7 怎样指定方法的可见性？

首先 Ruby把那些只能以函数形式(省略被调的形式)来调用的方法叫做private方法。请注意，这里的private定义与C++以及Java中的定义不同。

若将方法设为private类型之后，就不能在其它的对象中调用该方法了。因此，若您只想在本类或其子类中调用某方法时， 就可以把它设为private类型。

您可以这样把方法设为private类型。

class Foo
def test
print "hello\n"
end
private :test
end

foo = Foo.new
foo.test
#=&gt; test.rb:9: private method `test' called for #&lt;Foo:0x400f3eec&gt;(Foo)

您可以使用private_class_method将类方法变为private类型。

class Foo
def Foo.test
print "hello\n"
end
private_class_method :test
end

Foo.test
#=&gt; test.rb:8: private method `test' called for Foo(Class)

同理，您可以使用public、public_class_method将方法设为public类型。

在默认情况下，类中的方法都被定义成public类型(initialize除外)，而顶层中的方法会被定义成private类型。
5.8 方法名可以用大写字母开头吗？

可以。但要注意：即使方法调用中不带参数，也不能省略方法名后的空括号。
5.9 为什么使用super时会出现ArgumentError?

在方法定义中调用super时，会把所有参数都传给上层方法，若参数个数不符合其要求，就会引发ArgumentError。因此，若参数个数不合时，应该自己指定参数然后再调用super。
5.10 如何调用上2层的同名方法？

super只能调用上1层的同名方法。若想调用2层以上的同名方法时，需要事先对该上层方法进行alias操作。
5.11 重定义内部函数时，如何调用原来的函数？

可以在方法定义中使用super。进行重定义之前，使用alias就可以保住原来的定义。也可以把它当作Kernel的特殊方法来进行调用。
5.12 何谓破环性的方法？

就是能修改对象内容的方法，常见于字符串、数组或哈希表中。一般是这样的：存在两个同名的方法，一个会拷贝原对象并返回副本；一个会直接修改原对象的内容，并返回修改后的对象。通常后者的方法名后面带有！，它就是破坏性的方法。但是有些不带！的方法也是具有破环性的，如String#concat等等。
5.13 那些情况下会产生副作用？

若在方法中对实参对象使用了破环性的方法的时候，就会产生副作用。

def foo(str)
str.sub!(/foo/, "baz")
end

obj = "foo"
foo(obj)
print obj
#=&gt; "baz"

此时，参数对象的内容被修改。另一方面，如果在程序中确有必要的话，也会对某对象发送具有副作用的消息，那就另当别论了。
5.14 能让方法返回<span>多个值</span>吗？

在Ruby中确实只能指定一个方法返回值，但若使用数组的话，就可以返回多个值了。

return 1, 2, 3

上例中，传给return的列表会被当作数组处理。这与下面的代码可谓是异曲同工。

return [1, 2, 3]

另外，若使用多重赋值的话，则可以达到返回多个值的效果。例如

def foo
return 20, 4, 17
end

a, b, c = foo
print "a:", a, "\n" #=&gt; a:20
print "b:", b, "\n" #=&gt; b:4
print "c:", c, "\n" #=&gt; c:17

您也可以这样处理。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date>2012-03-01 00:07:19</wp:post_date>
		<wp:post_date_gmt>2012-02-29 16:07:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby%e5%8f%82%e8%80%83%e6%89%8b%e5%86%8cvii</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby-------- loop </title>
		<link></link>
		<pubDate>Fri, 02 Mar 2012 02:52:07 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=264</guid>
		<description></description>
		<content:encoded><![CDATA[<code>
<pre>
class ForLoop
  
  def callFor 
    for i in 1..3
      print "index = #{i}\n"
    end
  end
  
  def callWhile
    a = 1
    a *= 2 while a < 10
    puts a
    
    a -= 2 until a < 0
    puts a
  end
  
  def callWhile2
    a = 1
    a += 1  while a < 5
    puts a
  #  print "index = #{a}\n"
  end

  def time
    3.times do
      print "Ho! "
    end
  end
  
  def upto
     1.upto(3) do |x|
      puts x
    end
  end
  
  def step
    0.step(10, 2) do |x|
      puts x
    end
  end

  def each 
    [1, 2, 3, 4, 5].each do |x|
      puts x
    end
  end
  
  def callFor2  # seems similar as each
    for n in [5, 4, 3, 2, 1]
      puts n
    end
  end
  
  def callLoop
     i = 0
     loop do
      i += 1
      puts i
      next if not i > 3
      puts "i > 3"
      redo if i >= 6 and i <= 9
      puts "i < 6 or i > 9"
      break if i == 10 
    end
  end
  
end

instance = ForLoop.new
instance.callFor
print "----------\n"
instance.callWhile2
print "----------\n"
instance.time
print "\n----------\n"
instance.upto
print "----------\n"
instance.step
print "----------\n"
instance.each
print "----------\n"
instance.callFor2
print "----------\n"
instance.callLoop

# output
#index = 1
#index = 2
#index = 3
#----------
#5
#----------
#Ho! Ho! Ho! 
#----------
#1
#2
#3
#----------
#0
#2
#4
#6
#8
#10
#----------
#1
#2
#3
#4
#5
#----------
#5
#4
#3
#2
#1
#----------
#1
#2
#3
#4
#i > 3
#i < 6 or i > 9
#5
#i > 3
#i < 6 or i > 9
#6
#i > 3
#7
#i > 3
#8
#i > 3
#9
#i > 3
#10
#i > 3
#i < 6 or i > 9
</pre>
</code>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date>2012-03-02 10:52:07</wp:post_date>
		<wp:post_date_gmt>2012-03-02 02:52:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-loop</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="loop"><![CDATA[loop]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>跨越边界: Ajax on Rails</title>
		<link></link>
		<pubDate>Fri, 02 Mar 2012 05:26:08 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=268</guid>
		<description></description>
		<content:encoded><![CDATA[<em>跨越边界</em> 系列之前的两篇文章（参见 <a href="http://www.ibm.com/developerworks/cn/java/j-cb12056/index.html#resources">参考资料</a>）全面介绍了 Streamlined，这是 Rails 的辅助框架，该框架有效地利用 scaffolding 来快速生成简单的、使用 Ajax 的用户界面。除非您一直与世隔绝，不然您一定会知道 Ajax 是这样一种编程技术，它使用 XML、JavaScript 和 Web 标准来创建高度交互性的 Web 页面，正如您在 Google Maps 和大量其他站点上所看到的页面那样。许多读过 Streamlined 文章的读者都要求我描述一下 Ajax 在 Ruby on Rails 上的运行方式。本文全面介绍了两个简单的 Ajax 例子，延着这个思路介绍了 Ruby/Ajax 这一组合如此成功的原因。在本系列的下篇文章中，我将探究 JavaScript 这门编程语言。

<a name="N10062"></a>Ajax 定义

Ajax 代表 Asynchronous JavaScript + XML。信息架构师 Jesse James Garrett 于 2005 年提出这一术语，该术语用来描述一门在夹缝中生存了近二十年的技术（参见 <a href="http://www.ibm.com/developerworks/cn/java/j-cb12056/index.html#resources">参考资料</a>）。Ajax 的使用随即爆增，不论在图书馆、流行网站还是文献作品中都保持同步增长。

Ajax 重新定义了基本的浏览器使用模型。原模型一次呈现一个页面。Ajax 允许浏览器在页面更新的间隔同服务器进行交流。这样做的好处是带来更加丰富的客户体验，但却以增加复杂度为代价。Ajax 是这样运行的：使用 JavaScript 客户端库在客户机和服务器间发送 XML。Ajax 开发人员可以在任何时刻从客户机发送异步请求，因而在服务器处理这些请求时，用户交互可以继续进行。下面就是 Ajax 请求的流程：
<div>
<h2>关于本系列</h2>
<div>

在 <a href="http://www.ibm.com/developerworks/cn/java/j-cb/">跨越边界系列</a> 文章中，作者 Bruce Tate 提出这样一种观点，即当今的 Java 程序员们可以通过学习其他方法和语言很好地武装自己。自从 Java 技术明显成为所有开发项目最好的选择以来，编程前景已经发生了改变。其他框架影响着 Java 框架的构建方式，从其他语言学到的概念也可以影响 Java 编程。您编写的 Python（或 Ruby、Smalltalk 等语言）代码可以改变编写 Java 代码的方式。

本系列介绍与 Java 开发完全不同的编程概念和技术，但是这些概念和技术也可以直接应用于 Java 开发。在某些情况下，需要集成这些技术来利用它们。在其他情况下，可以直接应用概念。具体的工具并不重要，重要的是其他语言和框架可以影响 Java 社区中的开发人员、框架，甚至是基本方式。

</div>
</div>
<ol>
	<li>一个事件（如用户的鼠标点击或编程计时器的触发）启动一个 JavaScript 函数。</li>
	<li>JavaScript 函数为部分页面而不是整个页面创建一个请求。JavaScript 随后通过 HTTP 将该请求发送到 Web 服务器。</li>
	<li>此 HTTP 请求调用服务器上的一个脚本，如 Rails 控制器方法或 Java™ servlet。</li>
	<li>该服务器脚本创建一个 XML 文档并将其返回给服务器。</li>
	<li>在接收结果的同时，客户机异步处理创建、更新或删除部分 Web 页面，如列表元素、<code>div</code> 标记或图像。</li>
</ol>
所有 Ajax 应用程序都使用类似这种顺序的一种方法。例如，某个应用程序允许将字典中的单词与其定义一起保存。旧式的应用程序会强迫您用一个新的页面视图来编辑定义。Ajax 允许原地编辑，它用一个条目字段替换定义文本，然后用更新的定义来替换该表单。

Ajax 解决方案的组件是：
<ul>
	<li>客户端 JavaScript 库，用来管理异步请求。</li>
	<li>服务器端 JavaScript 库，用来处理进来的请求，并构造一个 XML 响应。</li>
	<li>客户端 JavaScript 库，用来处理生成的 XML。</li>
	<li>称作文档对象模型（DOM）的库，允许对现有 Web 页面进行更新。</li>
	<li>辅助例程，用来处理不可避免的 UI 和集成问题。</li>
</ul>
事件/请求/响应/替换模型是大多数 Ajax 应用程序的核心模型，但如果您刚接触 Ajax，您一定会对 Ajax 中大量的可用库和这些库之间巨大的差别感到惊讶不已。该领域中有许多 Ajax 框架，它们的功能常常重叠且没有确定的胜出者。单就 Java 市场而言，有许多库可用，包括 Echo、Dojo、DWR、Google Web Toolkit（GWT）、Java Web Parts、AjaxAnywhere、AjaxTags、Scriptaculous 和 Prototype。这些框架使用截然不同的方法。一些框架试图通过生成 JavaScript 代码的 Java 库来隐藏 JavaScript，如 GWT。另一些框架致力于使 JavaScript 更易使用。一些相当地全面，如 Dom4J，而另一些则仅着力于解决好一个小问题。由于有许多流行的新技术，解决方案之间互相割据的场面有时会很难驾驭，调试工具、UI 实践（如 Back 按钮）和明智的开发实践的实现非常缓慢。Java 平台上的 Ajax 库的力量源自其多样性。这也正是其缺点所在，因为多样性导致了难以决断、集成方面的顾虑和复杂性。

有了 Ruby on Rails，开发体验就显著不同了，这是由于两个原因。首先，Ruby on Rails 有一个核心的 Web 开发平台：Ruby on Rails。其次，到目前为止，大多数在 Rails 上的 Ajax 开发体验都围绕着两个核心框架：Scriptaculous 和 Prototype（参见 <a href="http://www.ibm.com/developerworks/cn/java/j-cb12056/index.html#resources">参考资料</a>）。Rails 方法使用运行时代码生成和定制标记，这使您不必理会复杂的 JavaScript。是时候自己来实践了。如果您想要在学习本文的过程中编写代码的话，需要下载 Rails，也要下载必要的 Ajax 框架（参见 <a href="http://www.ibm.com/developerworks/cn/java/j-cb12056/index.html#resources">参考资料</a>）。打开您的 Rails 环境，跟我一起来吧。
<div>

<hr />

</div>
<a href="http://www.ibm.com/developerworks/cn/java/j-cb12056/index.html#ibm-pcon">回页首</a>

<a name="N100D4"></a>没有 Ajax 的简单的 Rails 应用程序

要使用 Rails 和 Ajax，就要创建一个空项目，并生成一个有两个方法的控制器。一个控制器控制简单的页面，另一个控制器建立一个 Ajax 响应。键入下列代码：
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>rails ajax
cd ajax
script/generate controller ajax show time</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

第一行和第二行代码生成一个 Rails 项目，并切换到新目录。第三行代码生成一个叫做 <code>ajax</code> 的控制器，并查看两个动作：<code>show</code> 和 <code>time</code>。清单 1 显示了该控制器的代码：
<a name="N100F5"></a><strong>清单 1. 有两个空方法的控制器 </strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>class AjaxController &lt; ApplicationController

   def show
   end

   def time
   end
end</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

首先在不使用 Ajax 的情况下构建两个简单视图，然后用 Ajax 将这两个视图绑定到一起。编辑 app/views/ajax 中的 show.rhtml 视图，使它和清单 2 类似：
<a name="N10103"></a><strong>清单 2. 简单视图</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>&lt;h1&gt;Ajax show&lt;/h1&gt;
Click this link to show the current &lt;%= link_to "time", :action =&gt; "time" %&gt;.</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

清单 1 和清单 2 中的代码不支持 Ajax，但我还是会仔细分析该代码。首先，看清单 1 中的控制器。两个空的控制器方法处理进来的 HTTP 请求。如果不明确地呈现一个视图（使用 <code>render</code> 方法），Rails 会呈现和该方法同名的视图。由于 Scriptaculous 和 Prototype 库也使用 HTTP，Rails 不需要对标准 HTTP 方法和 Ajax 方法进行区分。

现在将注意力转移到清单 2 中的视图。大多数代码都是简单的 HTML 代码，只有第二行的 <code>link_to</code> 辅助例程例外：<code>&lt;%= link_to "time", :action =&gt; "time" %&gt;</code>。

正如在<em>跨越边界</em> 之前的文章中所看到的那样，Ruby 用其表达式的值替代 <code>&lt;%=h</code> 和 <code>%&gt;</code> 之间的代码。在这个示例中，<code>link-to</code> 方法是一个生成简单 HTML 链接的辅助例程。可以通过执行该代码看到该链接。通过键入 <code>script/server</code> 启动服务器，然后将浏览器指向 http://localhost:3000/ajax/show 。您将看到图 1 中的视图：
<a name="figure1"></a><strong>图 1. 不涉及 Ajax 的简单用户界面</strong>
<img src="http://www.ibm.com/developerworks/cn/java/j-cb12056/figure-1.jpg" alt="不涉及 Ajax 的简单用户界面" width="296" height="211" />

在浏览器中，单击菜单项来查看页面源代码（在 Internet Explorer 为 <strong>View &gt; Source</strong> ，在 Firefox 中为 <strong>View &gt; Page Source</strong>）。您将看到清单 3 中的代码：
<a name="N1014E"></a><strong>清单 3. 由 show.rhtml 生成的视图</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>&lt;h1&gt;Ajax show&lt;/h1&gt;
Click this link to show the current &lt;a href="/ajax/time"&gt;time&lt;/a&gt;.</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

请注意清单 3 中的链接代码。该模板让 Rails 用户不必面对冗长且容易出错的 HTML 句法。（Ajax 代码也是这样运行：使用辅助方法插入 JavaScript 代码，该代码替您管理远程请求和 HTML 替换。）如果单击该链接，将看到针对 <code>time</code> 方法的默认视图，但我还没有实现它。为加以补救，请用清单 4 中的代码替换 app/controllers/ajax_controller.rb 中的 <code>time</code> 方法。为保持简单，我直接从控制器中呈现视图。稍后，我会把一切处理好并呈现视图。
<a name="N10164"></a><strong>清单 4. 呈现时间</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>def time
  render_text "The current time is #{Time.now.to_s}"
end</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

现在，当单击该链接时，会得到图 2 中的视图：
<a name="figure2"></a><strong>图 2. 不涉及 Ajax 的视图</strong>
<img src="http://www.ibm.com/developerworks/cn/java/j-cb12056/figure-2.jpg" alt="不涉及 Ajax 的简单视图" width="394" height="215" />

很快就能看到这个 UI 的一个问题。这两个视图不从属于单独的页面。该应用程序表示一个单一概念：单击一个链接来显示时间。为反复更新时间，每次都需要单击该链接和 Back 按钮。将该链接和时间放到相同的页面中也许可以解决这个问题。但如果该页面变得非常大或非常复杂，重新显示整个页面会很浪费，也会很复杂。
<div>

<hr />

</div>
<a href="http://www.ibm.com/developerworks/cn/java/j-cb12056/index.html#ibm-pcon">回页首</a>

<a name="N10180"></a>添加 Ajax

Ajax 让您可以只更新 Web 页面的一个片段。Rails 库为您处理大部分的工作。要将 Ajax 添加到这个应用程序中，需要以下四个步骤：
<ol>
	<li>配置 Rails 以使用 JavaScript。</li>
	<li>更改时间链接来提交 JavaScript Ajax 请求，而不是仅呈现一个 HTML 链接。</li>
	<li>指定要更新的 HTML 片断。</li>
	<li>为更新的 HTML 内容准备一个位置。</li>
	<li>构建一个控制器方法，或者一个视图来呈现 Ajax 响应。</li>
</ol>
首先，更改 app/views/ajax/show.rhtml 中的代码，使其与清单 5 类似：
<a name="N101A2"></a><strong>清单 5. 更改显示视图来使用 Ajax</strong>
<pre id="best-answer-content">rails3 中取消了link_to_remote方法
取而代之的是
使用的 remote参数
例如：
link_to image_tag("delete.png"), { :controller =&gt; 'products', :action =&gt; 'destroy', :id =&gt; product }, :method =&gt; :delete, :confirm =&gt; "Are you sure?", :remote =&gt; true</pre>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>&lt;%= javascript_include_tag :defaults %&gt;
&lt;h1&gt;Ajax show&lt;/h1&gt;
Click this link to show the current
&lt;%= link_to_remote "time",
    :update =&gt; 'time_div',
    :url =&gt; {:action =&gt; "time"} %&gt;.&lt;br/&gt;
&lt;div id='time_div'&gt;
&lt;/div&gt;</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

我做了一些更改。首先，为处理配置，简单地将必要的 JavaScript 库直接包含在视图中。通常，还会有更多的视图，为避免重复，我将 JavaScript 文件包含在一个公共的 Rails 组件中，如 Rails 布局。本例只有一个视图，所以一切从简。

其次，我改变了链接标记来使用 <code>link_to_remote</code>。您一会儿就能看到这个链接的作用。请注意下列三个参数：
<ul>
	<li>链接文本：从非 Ajax 的例子中照搬过来。</li>
	<li><code>:update</code> 参数。如果您以前没见过这种语法，那么就把 <code>:update =&gt; 'time_div'</code> 当作是一个已命名的参数，其中的 <code>:update</code> 是名称，<code>update_div</code> 是值。此代码告诉 Prototype 库：此链接中的结果将用 <code>time_div</code> 这一名称更新 HTML 组件。</li>
	<li>代码 <code>:url =&gt; {:action =&gt; "time"}</code> 指定该链接将调用的 URL。<code>:url</code> 从一个哈希映射表中获取值。在实际中，该哈希映射表只有一个针对控制器动作的元素：<code>:time</code>。理论上，该 URL 也可以包含控制器的名称和控制器需要的任何可选参数。</li>
</ul>
在清单 5 中，还可以看到空的 <code>div</code>，Rails 将用当前时间更新它。

在浏览器中，装载页面 http://localhost:3000/ajax/show。单击该链接，将看到图 3 中的结果。
<a name="figure3"></a><strong>图 3. 含 Ajax 的视图</strong>
<img src="http://www.ibm.com/developerworks/cn/java/j-cb12056/figure-3.jpg" alt="含 Ajax 的简单视图" width="443" height="197" />

为了很好地了解这里发生的情况，请查看该 Web 页面的源代码。清单 6 显示了该代码：
<a name="N10207"></a><strong>清单 6. 显示模板的结果（在启用 Ajax 的情况下）</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>&lt;script src="/javascripts/prototype.js?1159113688" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/javascripts/effects.js?1159113688" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/javascripts/dragdrop.js?1159113688" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/javascripts/controls.js?1159113688" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/javascripts/application.js?1159113688" type="text/javascript"&gt;&lt;/script&gt;
&lt;h1&gt;Ajax show&lt;/h1&gt;
Click this link to show the current
&lt;a href="#" onclick="new Ajax.Updater(
   'time_div', '/ajax/time', {asynchronous:true, evalScripts:true});
   return false;"&gt;time&lt;/a&gt;.&lt;br/&gt;
&lt;div id='time_div'&gt;

&lt;/div&gt;</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

请注意包含的 JavaScript 列表。Rails 辅助方法（<code>include_javascript_tags :defaults</code>）为您构建了此列表。接下来，看到一个用来构建新的 <code>Ajax.Updater</code> 对象的 JavaScript 函数调用，而不是一个 HTML 链接。正如您所料想的那样，名为 <code>asynchronous</code> 的参数被设置为 true。最后，在 HTML <code>div</code> 标记中看不到值，这是由于初始页面在那里没有值。
<div>

<hr />

</div>
<a href="http://www.ibm.com/developerworks/cn/java/j-cb12056/index.html#ibm-pcon">回页首</a>

<a name="N10221"></a>使用其他 Ajax 选项

Ajax 能生成强大的动作，甚至能生成一些预料不到的动作。例如，用户也许没注意到更新的时间链接。<code>link_to_remote</code> 选项让您能够轻易地将特殊效果应用到该条目上，从而让用户注意到该结果。现在将应用一些效果。请更改 show.rhtml 中的 <code>link_to_remote</code> 辅助方法，使它与清单 7 类似：
<a name="N10236"></a><strong>清单 7. 添加效果</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>&lt;%= link_to_remote "time",
    :update =&gt; 'time_div',
    :url =&gt; {:action =&gt; "time"},
    :complete =&gt; "new Effect.Highlight('time_div')" %&gt;</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

最佳 Ajax 效果会使您的更改获得临时的关注，但却不会永久持续。您的目标应该是把更改提示给用户，而不打断他们的工作流。像这种用黄色来弱化强调的技术，或用滑入内容或淡出内容来让用户注意的技术都不是长久之计。

到目前为止，链接是您见到的惟一触发器。Ajax 还有许多其他的可用武器，一些由用户驱动，而另一些由程序事件驱动，如时钟。它是一个像闹钟一样并不需要用户干预的东西。可以用 Ajax 的 <code>periodically_call_remote</code> 方法定期更新时钟。请按照清单 8 编辑 show.rhtml 中的代码：
<a name="N1024B"></a><strong>清单 8. 定期调用远程方法</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>&lt;%= javascript_include_tag :defaults %&gt;
&lt;h1&gt;Ajax show&lt;/h1&gt;
&lt;%= periodically_call_remote :update =&gt; 'time_div',
                             :url =&gt; {:action =&gt; "time"},
                             :frequency =&gt; 1.0 %&gt;
&lt;div id='time_div'&gt;
&lt;/div&gt;</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

图 4 显示了结果：不需要用户干预，每隔一秒钟进行更新的时钟：
<a name="figure4"></a><strong>图 4. 用 Ajax 定期更新的时钟</strong>
<img src="http://www.ibm.com/developerworks/cn/java/j-cb12056/figure-4.jpg" alt="用 Ajax 定期更新的时钟" width="367" height="223" />

尽管 Rails 视图中的代码和不含 Ajax 的版本相似，但背后的代码却很不同：此版本使用 JavaScript 代替了 HTML。可以通过在浏览器中查看源代码看到清单 9 中的代码：
<a name="N1026B"></a><strong>清单 9. periodically_call_remote 的源代码</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>&lt;script src="/javascripts/prototype.js?1159113688" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/javascripts/effects.js?1159113688" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/javascripts/dragdrop.js?1159113688" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/javascripts/controls.js?1159113688" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/javascripts/application.js?1159113688" type="text/javascript"&gt;&lt;/script&gt;
&lt;h1&gt;Ajax show&lt;/h1&gt;
&lt;script type="text/javascript"&gt;
//&lt;![CDATA[
new PeriodicalExecuter(function() {new Ajax.Updater(
   'time_div', '/ajax/time', {asynchronous:true, evalScripts:true})}, 1.0)
//]]&gt;
&lt;/script&gt;
&lt;div id='time_div'&gt;
&lt;/div&gt;</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

请一定注意这里发生的情况。您正在一个更高层的抽象之上有效地工作，而不是使用小块的自定义 JavaScript 片段，Ruby on Rails 模板系统使使用模型变得相当自然。

正如之前提到的那样，我正从控制器中直接呈现文本。这一简化使开始编程变得很容易，但却不能一直持续下去。视图应该处理显示，控制器应该在视图和模型间调度数据。这项设计技术叫做模型-视图-控制器（MVC），它使对视图或模型的更改更容易分隔开。为使这个应用程序符合 MVC，可以让 Rails 呈现默认视图，正如预料的那样，该内容将替代 <code>time-div</code> 之前的内容。请按照清单 10 更改 app/controllers/ajax_controller.rb 中的 <code>time</code> 方法：
<a name="N10284"></a><strong>清单 10. 重构</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>def time
  @time = Time.now
end</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

请按照清单 11 更改 app/views/ajax/time.rhtml 中的视图：
<a name="N10292"></a><strong>清单 11. 使用视图呈现 Ajax 内容</strong>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>&lt;p&gt;The current time is &lt;%=h @time %&gt;&lt;/p&gt;</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

控制器方法设置一个名为 <code>@time</code> 的实例变量。由于控制器什么都没明确地呈现出来，Rails 将 time.rhtml 视图呈现出来。<em>这种使用模型和呈现一个不含 Ajax 的视图完全一致。</em> 可以再一次看到，Rails 使开发人员不必考虑使用 Ajax 和不使用 Ajax 的应用程序间的区别。从传统的 Web 应用程序到 Ajax，该使用模型都惊人地相似。由于使用 Ajax 的成本如此之低，越来越多的 Rails 应用程序都开始利用 Ajax。
<div>

<hr />

</div>
<a href="http://www.ibm.com/developerworks/cn/java/j-cb12056/index.html#ibm-pcon">回页首</a>

<a name="N102A3"></a>Rails 中 Ajax 的其他用法

Rails Ajax 体验领域宽广且内容深刻 —— 我无法用单篇文章甚至一系列文章来概括其深刻的内容。我只能指出 Rails Ajax 支持可以解决其他一些问题。下面是 Rails 中 Ajax 的一些通常用法：
<ul>
	<li><strong>提交远程表单。</strong> 除了必须异步提交以外，Rails 中的 Ajax 表单和传统表单的执行方式完全一样。这意味着 Rails 中的 <code>Forms</code> 辅助标记让您必须指定一个要更新的 URL，执行可视化的效果，正如使用 <code>link_to_remote</code> 一样。正如 <code>link-to-remote</code> 扩展了 <code>link_to</code> 辅助方法一样，Rails <code>submit_to_remote</code> 扩展了一个 Rails <code>submit</code> 辅助方法。</li>
	<li><strong>执行复杂脚本。</strong> Rails 开发人员常常需要执行复杂的脚本，远不止更新单个 <code>div</code> 和执行效果那么简单。为此，Rails 提供 JavaScript 模板。用 JavaScript 模板，可以将任意 JavaScript 脚本作为 Ajax 请求的结果来执行。这些模板的一些常见用法（叫作 RJS 模板）为更新多个 <code>div</code>、处理表单验证和管理 Ajax 错误场景。</li>
	<li><strong>拼写补全。</strong> 您一定想基于数据库中的条目为您的用户提供拼写补全服务。例如，如果用户键入 <code>Bru</code>，我想让我的应用程序注意到数据库中 “Bruce Tate” 这个值。可以使用 Ajax 定期检查字段的更改，并根据用户键入的内容发送拼写补全建议。</li>
	<li><strong>动态构建复杂表单。</strong> 在业务领域里，常常需要查看部分已完成表单，然后才能知道用户应该完成哪个字段。例如，如果用户拥有一些特定种类的收入或费用，那么 1040EZ 纳税单是无效的。可以在这个过程中用 Ajax 更新表单。</li>
	<li><strong>拖放。</strong> 可以用 Rails 快速实现拖放支持，这比大多数其他框架要省力得多。</li>
</ul>
&nbsp;
<div>

<hr />

</div>
<a href="http://www.ibm.com/developerworks/cn/java/j-cb12056/index.html#ibm-pcon">回页首</a>

<a name="N10301"></a>结束语

Ajax 并不是没有问题。当 Ajax 运行良好时，整个体验会是激动人心的。但当运行不顺利时，您也许会发现对其进行调试是一个全新的领域，调试技术和工具还没有其他语言中那么成熟。Ruby on Rails 的确有一个核心优势：简单。Rails 包装器（加上很棒的社区支持）使得进入这一新环境变得简单，而且最初的投资非常低。但 Rails 支持也仅限于此。这两个框架还没有覆盖 Ajax 的全部内容，无法满足每个用户的需求。

Java 语言有更多的 Ajax 框架和方法可供选择。可以找到更具灵活性的，也可以找到具有很棒的支持基础的。但灵活性是要付出代价的。您不仅需要一个强大的 Ajax 框架，也需要一个 Web 开发框架。例如，集成 JSF 框架和集成 Struts 是两种截然不同的体验。新技术通常追求简单。对于那些在 UI 中需要 Ajax 的出色特性，却又不需要由 Java 提供的高级企业集成特性的问题，Ajax on Rails 也许正合适。下一次，我将更深入地介绍 JavaScript。请继续关注跨越边界。

&nbsp;

<a name="resources"></a>参考资料

<strong>学习</strong>
<ul>
	<li>您可以参阅本文在 developerWorks 全球站点上的 <a href="http://www.ibm.com/developerworks/java/library/j-cb12056/?S_TACT=105AGX52&amp;S_CMP=cn-a-j" target="_blank">英文原文</a> 。</li>
	<li><a href="http://www.pragmaticprogrammer.com/titles/fr_j2r/index.html"><em>Java To Ruby: Things Every Manager Should Know</em> </a>（Pragmatic Bookshelf，2006 年）：这是本文作者编著的一本书，讲述何时何处从 Java 编程转到 Ruby on Rails 以及如何完成这种转变。</li>
	<li><a href="http://www.oreilly.com/catalog/beyondjava/index.html"><em>Beyond Java</em> </a>（O’Reilly，2005 年）：本文作者编写的一本书，讲述 Java 语言的提高和稳步发展，以及在某些方面能够挑战 Java 平台的技术。</li>
	<li>“<a href="http://www.ibm.com/developerworks/rational/library/dec05/reader/torpey.html?S_TACT=105AGX52&amp;S_CMP=cn-a-j">Book review: <em>Agile Web Development with Rails</em> </a>”（Darren Torpey，developerWorks，2005 年 5 月）：这里介绍的这本书可以加深读者对 Rails 及敏捷开发方式原理的理解。</li>
	<li>“<a href="http://adaptivepath.com/publications/essays/archives/000385.php">Ajax: A New Approach to Web Applications</a>”（Jesse James Garrett，Adaptive Path，2005 年 2 月）：“Ajax” 这一术语的发明者 Garrett 描述了其基本结构和用户体验特征。</li>
	<li><a href="http://script.aculo.us/">Scriptaculous</a> 和 <a href="http://prototype.conio.net/">Prototype</a>：增强 Rails Ajax 的两个 JavaScript 框架。</li>
	<li><a href="http://wiki.rubyonrails.org/rails/pages/How+to+use+the+Ajax+helpers">Rails Ajax helpers</a>：这些辅助方法让 Rails 开发人员不必考虑低层 Ajax 编程的复杂性。</li>
	<li><a href="http://www.ibm.com/developerworks/cn/ajax">Ajax 技术资源中心</a>：developerWorks Ajax 的门户，包含了专注于 Ajax 编程的内容、blog、论坛和其他资源。</li>
	<li><a href="http://www.ibm.com/developerworks/cn/web">Web 开发专区</a>：developerWorks Web 开发方面的资源中心，包含了专注于 Web 和 Web 2.0 开发的文章、教程和其他资源。</li>
	<li><a href="http://ajaxian.com/">Ajaxian</a>：这是一个很棒的 Ajax 门户，它提供对所有 Ajax 相关内容的讨论。</li>
	<li><a href="http://java.sun.com/blueprints/ajax.html">Ajax BluePrints</a>：对 Ajax 框架和 Java 编程语言设计技术的讨论。</li>
	<li><a href="http://www.pragmaticprogrammer.com/titles/ruby/index.html"><em>Programming Ruby</em> </a>（Dave Thomas et al.，Pragmatic Bookshelf，2005 年）：一本流行的关于 Ruby 编程的书。</li>
	<li><a href="http://www.ibm.com/developerworks/cn/java/">Java 技术专区</a>：数百篇关于 Java 编程各方面的文章。</li>
</ul>
<strong>获得产品和技术</strong>
<ul>
	<li><a href="http://rubyonrails.org/">Ruby on Rails</a>：下载开放源码的 Ruby on Rails Web 框架。</li>
	<li><a href="http://www.ruby-lang.org/en/20020102.html">Ruby</a>：从该项目的 Web 站点获取 Ruby。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>268</wp:post_id>
		<wp:post_date>2012-03-02 13:26:08</wp:post_date>
		<wp:post_date_gmt>2012-03-02 05:26:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%b7%a8%e8%b6%8a%e8%be%b9%e7%95%8c-ajax-on-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[ajax]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Windows 8消费者预览版Winkey快捷键汇总</title>
		<link></link>
		<pubDate>Sun, 04 Mar 2012 09:12:25 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=284</guid>
		<description></description>
		<content:encoded><![CDATA[Windows 8消费者预览版带来了很多新变化，极大地方便了用户在触屏设备上的操作，不过对于采用键盘的用户，微软也没有怠慢，下面就为大家汇总一下Windows 8的Winkey快捷键，能在实际操作中节省不少时间。

<strong>Windows 8消费者预览版新快捷键：</strong>

Windows键+空格键：切换输入语言和键盘布局

Windows键+O：禁用屏幕翻转

Windows键+,：临时查看桌面

Windows键+V：切换系统通知信息

Windows键+Shift+V：反向切换系统通知信息

Windows键+回车：打开“讲述人”

Windows键+PgUp：将开始屏幕或Metro应用移至左侧显示器

Windows键+PgDown：将开始屏幕或Metro应用移至右侧显示器

Windows键+Shift+.：将应用移至左侧

Windows键+.：将应用移至右侧

Windows键+C：打开Charms栏(提供设置、设备、共享和搜索等选项)

Windows键+I：打开设置栏

Windows键+K：打开连接显示屏

Windows键+H：打开共享栏

Windows键+Q：打开应用搜索面板

Windows键+W：打开“设置搜索”应用

Windows键+F：打开“文件搜索”应用

Windows键+Tab：循环切换应用

Windows键+Shift+Tab：反向循环切换应用

Windows键+Ctrl+Tab：循环切换应用，切换时手动选择应用

Windows键+Z：打开“应用栏”

Windows键+/：恢复默认输入法

Windows键+J：显示之前操作的应用

Windows键+X：快捷菜单

<strong>沿袭Windows 7的快捷方式：</strong>

Windows键：显示或隐藏开始菜单

Windows键 + ←：最大化窗口到左侧的屏幕上(与Metro应用无关)

Windows键 + →：最大化窗口到右侧的屏幕上(与Metro应用无关)

Windows键+ ↑：最大化窗口(与Metro应用无关)

Windows键+ ↓：最小化窗口(与Metro应用无关)

Windows键+ SHIFT +↑：垂直拉伸窗口，宽度不变(与Metro应用无关)

Windows键+ SHIFT +↓：垂直缩小窗口，宽度不变(与Metro应用无关)

Windows键+SHIFT+←：将活动窗口移至左侧显示器 (与Metro应用无关)

Windows键+SHIFT+→：将活动窗口移至右侧显示器(与Metro应用无关)

Windows键+ P：演示设置

Windows键+ Home：最小化所有窗口，第二次键击恢复窗口(不恢复Metro应用)

Windows键+ 数字键：打开或切换位于任务栏指定位置的程序

Windows键+Shift+数字键：打开位于任务栏指定位置程序的新实例

Windows键+B：光标移至通知区域

Windows键+Break：显示"系统属性"对话框

Windows键+D：显示桌面，第二次键击恢复桌面 (不恢复Metro应用)

Windows键+E：打开我的电脑

Windows键+Ctrl+F：搜索计算机(如果你在网络上)

Windows键+G：循环切换侧边栏小工具

Windows键+L：锁住电脑或切换用户

Windows键+M：最小化所有窗口

Windows键+Shift+M：在桌面恢复所有最小化窗口(不恢复Metro应用)

Windows键+R：打开“运行”对话框

Windows键+T：切换任务栏上的程序

Windows键+Alt+回车：打开Windows媒体中心

Windows键+U：打开轻松访问中心

Windows键+F1：打开Windows帮助和支持

Windows键+N：插件新笔记(OneNote)

Windows键+S：打开屏幕截图工具(OneNote)

Windows键+Q：打开Lync，Windows 8搜索功能移除了该快捷键

Windows键+A：接受所有来电 (Lync)

Windows键+X：拒绝来电(Lync)，如果Windows移动中心存在，该快捷键不起作用

Windows键+减号：缩小(放大镜)

Windows键+加号：放大(放大镜)

Windows键+Esc：关闭放大镜]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date>2012-03-04 17:12:25</wp:post_date>
		<wp:post_date_gmt>2012-03-04 09:12:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows-8%e6%b6%88%e8%b4%b9%e8%80%85%e9%a2%84%e8%a7%88%e7%89%88winkey%e5%bf%ab%e6%8d%b7%e9%94%ae%e6%b1%87%e6%80%bb</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="shortcuts"><![CDATA[shortcuts]]></category>
		<category domain="post_tag" nicename="win8"><![CDATA[win8]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Django Tagging </title>
		<link></link>
		<pubDate>Mon, 05 Mar 2012 16:07:43 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=287</guid>
		<description></description>
		<content:encoded><![CDATA[---
layout: post
title: "Django Tagging "
date: 2012-03-06 00:07
comments: true
categories: [django]
tags: [django,tagging]
---
## Django Tagging 
==============
Django Tagging
==============

A generic tagging application for `Django`_ projects, which allows
association of a number of tags with any Django model instance and makes
retrieval of tags simple.

.. _`Django`: http://www.djangoproject.com

.. contents::
:depth: 3

Installation
============

Installing an official release
------------------------------

Official releases are made available from
http://code.google.com/p/django-tagging/

Source distribution
~~~~~~~~~~~~~~~~~~~

Download the .zip distribution file and unpack it. Inside is a script
named ``setup.py``. Enter this command::

python setup.py install

...and the package will install automatically.

Windows installer
~~~~~~~~~~~~~~~~~

A Windows installer is also made available - download the .exe
distribution file and launch it to install the application.

An uninstaller will also be created, accessible through Add/Remove
Programs in your Control Panel.

Installing the development version
----------------------------------

Alternatively, if you'd like to update Django Tagging occasionally to pick
up the latest bug fixes and enhancements before they make it into an
official release, perform a `Subversion`_ checkout instead. The following
command will check the application's development branch out to an
``tagging-trunk`` directory::

svn checkout http://django-tagging.googlecode.com/svn/trunk/ tagging-trunk

Add the resulting folder to your `PYTHONPATH`_ or symlink (`junction`_,
if you're on Windows) the ``tagging`` directory inside it into a
directory which is on your PYTHONPATH, such as your Python
installation's ``site-packages`` directory.

You can verify that the application is available on your PYTHONPATH by
opening a Python interpreter and entering the following commands::

&gt;&gt;&gt; import tagging
&gt;&gt;&gt; tagging.VERSION
(0, 3, 'pre')

When you want to update your copy of the Django Tagging source code, run
the command ``svn update`` from within the ``tagging-trunk`` directory.

.. caution::

The development version may contain bugs which are not present in the
release version and introduce backwards-incompatible changes.

If you're tracking trunk, keep an eye on the `CHANGELOG`_ and the
`backwards-incompatible changes wiki page`_ before you update your
copy of the source code.

.. _`Subversion`: http://subversion.tigris.org
.. _`PYTHONPATH`: http://docs.python.org/tut/node8.html#SECTION008110000000000000000
.. _`junction`: http://www.microsoft.com/technet/sysinternals/FileAndDisk/Junction.mspx
.. _`CHANGELOG`: http://django-tagging.googlecode.com/svn/trunk/CHANGELOG.txt
.. _`backwards-incompatible changes wiki page`: http://code.google.com/p/django-tagging/wiki/BackwardsIncompatibleChanges

Using Django Tagging in your applications
-----------------------------------------

Once you've installed Django Tagging and want to use it in your Django
applications, do the following:

1. Put ``'tagging'`` in your ``INSTALLED_APPS`` setting.
2. Run the command ``manage.py syncdb``.

The ``syncdb`` command creates the necessary database tables and
creates permission objects for all installed apps that need them.

That's it!

Settings
========

Some of the application's behaviour can be configured by adding the
appropriate settings to your project's settings file.

The following settings are available:

FORCE_LOWERCASE_TAGS
--------------------

Default: ``False``

A boolean that turns on/off forcing of all tag names to lowercase before
they are saved to the database.

MAX_TAG_LENGTH
--------------

Default: ``50``

An integer which specifies the maximum length which any tag is allowed
to have. This is used for validation in the ``django.contrib.admin``
application and in any ``newforms`` forms automatically generated using
``ModelForm``.

Registering your models
=======================

Your Django models can be registered with the tagging application to
access some additional tagging-related features.

.. note::

You don't *have* to register your models in order to use them with
the tagging application - many of the features added by registration
are just convenience wrappers around the tagging API provided by the
``Tag`` and ``TaggedItem`` models and their managers, as documented
further below.

The ``register`` function
-------------------------

To register a model, import the ``tagging`` module and call its
``register`` function, like so::

from django.db import models

import tagging

class Widget(models.Model):
name = models.CharField(max_length=50)

tagging.register(Widget)

The following argument is required:

``model``
The model class to be registered.

An exception will be raised if you attempt to register the same class
more than once.

The following arguments are optional, with some recommended defaults -
take care to specify different attribute names if the defaults clash
with your model class' definition:

``tag_descriptor_attr``
The name of an attribute in the model class which will hold a tag
descriptor for the model. Default: ``'tags'``

See `TagDescriptor`_ below for details about the use of this
descriptor.

``tagged_item_manger_attr``
The name of an attribute in the model class which will hold a custom
manager for accessing tagged items for the model. Default:
``'tagged'``.

See `ModelTaggedItemManager`_ below for details about the use of this
manager.

``TagDescriptor``
-----------------

When accessed through the model class itself, this descriptor will return
a ``ModelTagManager`` for the model. See `ModelTagManager`_ below for
more details about its use.

When accessed through a model instance, this descriptor provides a handy
means of retrieving, updating and deleting the instance's tags. For
example::

&gt;&gt;&gt; widget = Widget.objects.create(name='Testing descriptor')
&gt;&gt;&gt; widget.tags
[]
&gt;&gt;&gt; widget.tags = 'toast, melted cheese, butter'
&gt;&gt;&gt; widget.tags
[, , ]
&gt;&gt;&gt; del widget.tags
&gt;&gt;&gt; widget.tags
[]

``ModelTagManager``
-------------------

A manager for retrieving tags used by a particular model.

Defines the following methods:

* ``get_query_set()`` -- as this method is redefined, any ``QuerySets``
created by this model will be initially restricted to contain the
distinct tags used by all the model's instances.

* ``cloud(*args, **kwargs)`` -- creates a list of tags used by the
model's instances, with ``count`` and ``font_size`` attributes set for
use in displaying a tag cloud.

See the documentation on ``Tag``'s manager's `cloud_for_model method`_
for information on additional arguments which can be given.

* ``related(self, tags, *args, **kwargs)`` -- creates a list of tags
used by the model's instances, which are also used by all instance
which have the given ``tags``.

See the documentation on ``Tag``'s manager's
`related_for_model method`_ for information on additional arguments
which can be given.

* ``usage(self, *args, **kwargs))`` -- creates a list of tags used by
the model's instances, with optional usages counts, restriction based
on usage counts and restriction of the model instances from which
usage and counts are determined.

See the documentation on ``Tag``'s manager's `usage_for_model method`_
for information on additional arguments which can be given.

Example usage::

# Create a ``QuerySet`` of tags used by Widget instances
Widget.tags.all()

# Retrieve a list of tags used by Widget instances with usage counts
Widget.tags.usage(counts=True)

# Retrieve tags used by instances of WIdget which are also tagged with
# 'cheese' and 'toast'
Widget.tags.related(['cheese', 'toast'], counts=True, min_count=3)

``ModelTaggedItemManager``
--------------------------

A manager for retrieving model instance for a particular model, based on
their tags.

* ``related_to(obj, queryset=None, num=None)`` -- creates a list
of model instances which are related to ``obj``, based on its tags. If
a ``queryset`` argument is provided, it will be used to restrict the
resulting list of model instances.

If ``num`` is given, a maximum of ``num`` instances will be returned.

* ``with_all(tags, queryset=None)`` -- creates a ``QuerySet`` containing
model instances which are tagged with *all* the given tags. If a
``queryset`` argument is provided, it will be used as the basis for
the resulting ``QuerySet``.

* ``with_any(tags, queryset=None)`` -- creates a ``QuerySet`` containing model
instances which are tagged with *any* the given tags. If a ``queryset``
argument is provided, it will be used as the basis for the resulting
``QuerySet``.

Tags
====

Tags are represented by the ``Tag`` model, which lives in the
``tagging.models`` module.

API reference
-------------

Fields
~~~~~~

``Tag`` objects have the following fields:

* ``name`` -- The name of the tag. This is a unique value.

Manager functions
~~~~~~~~~~~~~~~~~

The ``Tag`` model has a custom manager which has the following helper
methods:

* ``update_tags(obj, tag_names)`` -- updates tags associated with an
object.

``tag_names`` is a string containing tag names with which ``obj``
should be tagged.

If ``tag_names`` is ``None`` or ``''``, the object's tags will be
cleared.

* ``add_tag(obj, tag_name)`` -- associates a tag with an an object.

``tag_name`` is a string containing a tag name with which ``obj``
should be tagged.

* ``get_for_object(obj)`` -- returns a ``QuerySet`` containing all
``Tag`` objects associated with ``obj``.

.. _`usage_for_model method`:

* ``usage_for_model(model, counts=False, min_count=None, filters=None)``
-- returns a list of ``Tag`` objects associated with instances of
``model``.

If ``counts`` is ``True``, a ``count`` attribute will be added to each
tag, indicating how many times it has been associated with instances
of ``model``.

If ``min_count`` is given, only tags which have a ``count`` greater
than or equal to ``min_count`` will be returned. Passing a value for
``min_count`` implies ``counts=True``.

To limit the tags (and counts, if specified) returned to those used by
a subset of the model's instances, pass a dictionary of field lookups
to be applied to ``model`` as the ``filters`` argument.

.. _`related_for_model method`:

* ``related_for_model(tags, Model, counts=False, min_count=None)``
-- returns a list of tags related to a given list of tags - that is,
other tags used by items which have all the given tags.

If ``counts`` is ``True``, a ``count`` attribute will be added to each
tag, indicating the number of items which have it in addition to the
given list of tags.

If ``min_count`` is given, only tags which have a ``count`` greater
than or equal to ``min_count`` will be returned. Passing a value for
``min_count`` implies ``counts=True``.

.. _`cloud_for_model method`:

* ``cloud_for_model(Model, steps=4, distribution=LOGARITHMIC,
filters=None, min_count=None)`` -- returns a list of the distinct
``Tag`` objects associated with instances of ``Model``, each having a
``count`` attribute as above and an additional ``font_size``
attribute, for use in creation of a tag cloud (a type of weighted
list).

``steps`` defines the number of font sizes available - ``font_size``
may be an integer between ``1`` and ``steps``, inclusive.

``distribution`` defines the type of font size distribution algorithm
which will be used - logarithmic or linear. It must be either
``tagging.utils.LOGARITHMIC`` or ``tagging.utils.LINEAR``.

To limit the tags displayed in the cloud to those associated with a
subset of the Model's instances, pass a dictionary of field lookups to
be applied to the given Model as the ``filters`` argument.

To limit the tags displayed in the cloud to those with a ``count``
greater than or equal to ``min_count``, pass a value for the
``min_count`` argument.

Basic usage
-----------

Tagging objects and retrieving an object's tags
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Objects may be tagged using the ``update_tags`` helper function::

&gt;&gt;&gt; from shop.apps.products.models import Widget
&gt;&gt;&gt; from tagging.models import Tag
&gt;&gt;&gt; widget = Widget.objects.get(pk=1)
&gt;&gt;&gt; Tag.objects.update_tags(widget, 'house thing')

Retrieve tags for an object using the ``get_for_object`` helper
function::

&gt;&gt;&gt; Tag.objects.get_for_object(widget)
[,]

Tags are created, associated and unassociated accordingly when you use
``update_tags`` and ``add_tags``::

&gt;&gt;&gt; Tag.objects.update_tags(widget, 'house monkey')
&gt;&gt;&gt; Tag.objects.get_for_object(widget)
[, ]
&gt;&gt;&gt; Tag.objects.add_tag(widget, 'tiles')
&gt;&gt;&gt; Tag.objects.get_for_object(widget)
[,,]

Clear an object's tags by passing ``None`` or ``''`` to
``update_tags``::

&gt;&gt;&gt; Tag.objects.update_tags(widget, None)
&gt;&gt;&gt; Tag.objects.get_for_object(widget)
[]

Retrieving tags used by a particular model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To retrieve all tags used for a particular model, use the
``get_for_model`` helper function::

&gt;&gt;&gt; widget1 = Widget.objects.get(pk=1)
&gt;&gt;&gt; Tag.objects.update_tags(widget1, 'house thing')
&gt;&gt;&gt; widget2 = Widget.objects.get(pk=2)
&gt;&gt;&gt; Tag.objects.update_tags(widget2, 'cheese toast house')
&gt;&gt;&gt; Tag.objects.usage_for_model(Widget)
[,,,]

To get a count of how many times each tag was used for a particular
model, pass in ``True`` for the ``counts`` argument::

&gt;&gt;&gt; tags = Tag.objects.usage_for_model(Widget, counts=True)
&gt;&gt;&gt; [(tag.name, tag.count) for tag in tags]
[('cheese', 1), ('house', 2), ('thing', 1), ('toast', 1)]

To get counts and limit the tags returned to those with counts above a
certain size, pass in a ``min_count`` argument::

&gt;&gt;&gt; tags = Tag.objects.usage_for_model(Widget, min_count=2)
&gt;&gt;&gt; [(tag.name, tag.count) for tag in tags]
[('house', 2)]

You can also specify a dictionary of `field lookups`_ to be used to
restrict the tags and counts returned based on a subset of the
model's instances. For example, the following would retrieve all tags
used on Widgets created by a user named Alan which have a size
greater than 99::

&gt;&gt;&gt; Tag.objects.usage_for_model(Widget, filters=dict(size__gt=99, user__username='Alan'))

.. _`field lookups`: http://www.djangoproject.com/documentation/db-api/#field-lookups

Tag input
---------

Tag input from users is treated as follows:

* If the input doesn't contain any commas or double quotes, it is simply
treated as a space-delimited list of tag names.

* If the input does contain either of these characters, we parse the
input like so:

* Groups of characters which appear between double quotes take
precedence as multi-word tags (so double quoted tag names may
contain commas). An unclosed double quote will be ignored.

* For the remaining input, if there are any unquoted commas in the
input, the remainder will be treated as comma-delimited. Otherwise,
it will be treated as space-delimited.

Examples:

====================== ======================================= ================================================
Tag input string Resulting tags Notes
====================== ======================================= ================================================
apple ball cat [``apple``], [``ball``], [``cat``] No commas, so space delimited
apple, ball cat [``apple``], [``ball cat``] Comma present, so comma delimited
"apple, ball" cat dog [``apple, ball``], [``cat``], [``dog``] All commas are quoted, so space delimited
"apple, ball", cat dog [``apple, ball``], [``cat dog``] Contains an unquoted comma, so comma delimited
apple "ball cat" dog [``apple``], [``ball cat``], [``dog``] No commas, so space delimited
"apple" "ball dog [``apple``], [``ball``], [``dog``] Unclosed double quote is ignored
====================== ======================================= ================================================

Tagged items
============

The relationship between a ``Tag`` and an object is represented by
the ``TaggedItem`` model, which lives in the ``tagging.models``
module.

API reference
-------------

Fields
~~~~~~

``TaggedItem`` objects have the following fields:

* ``tag`` -- The ``Tag`` an object is associated with.
* ``content_type`` -- The ``ContentType`` of the associated model
instance.
* ``object_id`` -- The id of the associated object.
* ``object`` -- The associated object itself, accessible via the
Generic Relations API.

Manager functions
~~~~~~~~~~~~~~~~~

The ``TaggedItem`` model has a custom manager which has the following
helper methods, which accept either a ``QuerySet`` or a ``Model``
class as one of their arguments. To restrict the objects which are
returned, pass in a filtered ``QuerySet`` for this argument:

* ``get_by_model(queryset_or_model, tag)`` -- creates a ``QuerySet``
containing instances of the specififed model which are tagged with
the given tag or tags.

* ``get_intersection_by_model(queryset_or_model, tags)`` -- creates a
``QuerySet`` containing instances of the specified model which are
tagged with every tag in a list of tags.

``get_by_model`` will call this function behind the scenes when you
pass it a list, so you can use ``get_by_model`` instead of calling
this method directly.

* ``get_union_by_model(queryset_or_model, tags)`` -- creates a
``QuerySet`` containing instances of the specified model which are
tagged with any tag in a list of tags.

.. _`get_related method`:

* ``get_related(obj, queryset_or_model, num=None)`` - returns a list of
instances of the specified model which share tags with the model
instance ``obj``, ordered by the number of shared tags in descending
order.

If ``num`` is given, a maximum of ``num`` instances will be returned.

Basic usage
-----------

Retrieving tagged objects
~~~~~~~~~~~~~~~~~~~~~~~~~

Objects may be retrieved based on their tags using the ``get_by_model``
manager method::

&gt;&gt;&gt; from shop.apps.products.models import Widget
&gt;&gt;&gt; from tagging.models import Tag
&gt;&gt;&gt; house_tag = Tag.objects.get(name='house')
&gt;&gt;&gt; TaggedItem.objects.get_by_model(Widget, house_tag)
[,]

Passing a list of tags to ``get_by_model`` returns an intersection of
objects which have those tags, i.e. tag1 AND tag2 ... AND tagN::

&gt;&gt;&gt; thing_tag = Tag.objects.get(name='thing')
&gt;&gt;&gt; TaggedItem.objects.get_by_model(Widget, [house_tag, thing_tag])
[]

Functions which take tags are flexible when it comes to tag input::

&gt;&gt;&gt; TaggedItem.objects.get_by_model(Widget, Tag.objects.filter(name__in=['house', 'thing']))
[]
&gt;&gt;&gt; TaggedItem.objects.get_by_model(Widget, 'house thing')
[]
&gt;&gt;&gt; TaggedItem.objects.get_by_model(Widget, ['house', 'thing'])
[]

Restricting objects returned
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Pass in a ``QuerySet`` to restrict the objects returned::

# Retrieve all Widgets which have a price less than 50, tagged with 'house'
TaggedItem.objects.get_by_model(Widget.objects.filter(price__lt=50), 'house')

# Retrieve all Widgets which have a name starting with 'a', tagged with any
# of 'house', 'garden' or 'water'.
TaggedItem.objects.get_union_by_model(Widget.objects.filter(name__startswith='a'),
['house', 'garden', 'water'])

Utilities
=========

Tag-related utility functions are defined in the ``tagging.utils``
module:

``parse_tag_input(input)``
--------------------------

Parses tag input, with multiple word input being activated and
delineated by commas and double quotes. Quotes take precedence, so they
may contain commas.

Returns a sorted list of unique tag names.

See `tag input`_ for more details.

``edit_string_for_tags(tags)``
------------------------------
Given list of ``Tag`` instances, creates a string representation of the
list suitable for editing by the user, such that submitting the given
string representation back without changing it will give the same list
of tags.

Tag names which contain commas will be double quoted.

If any tag name which isn't being quoted contains whitespace, the
resulting string of tag names will be comma-delimited, otherwise it will
be space-delimited.

``get_tag_list(tags)``
----------------------

Utility function for accepting tag input in a flexible manner.

If a ``Tag`` object is given, it will be returned in a list as its
single occupant.

If given, the tag names in the following will be used to create a
``Tag`` ``QuerySet``:

* A string, which may contain multiple tag names.
* A list or tuple of strings corresponding to tag names.
* A list or tuple of integers corresponding to tag ids.

If given, the following will be returned as-is:

* A list or tuple of ``Tag`` objects.
* A ``Tag`` ``QuerySet``.

``calculate_cloud(tags, steps=4, distribution=tagging.utils.LOGARITHMIC)``
--------------------------------------------------------------------------

Add a ``font_size`` attribute to each tag according to the frequency of
its use, as indicated by its ``count`` attribute.

``steps`` defines the range of font sizes - ``font_size`` will be an
integer between 1 and ``steps`` (inclusive).

``distribution`` defines the type of font size distribution algorithm
which will be used - logarithmic or linear. It must be one of
``tagging.utils.LOGARITHMIC`` or ``tagging.utils.LINEAR``.

Model Fields
============

The ``tagging.fields`` module contains fields which make it easy to
integrate tagging into your models and into the
``django.contrib.admin`` application.

Field types
-----------

``TagField``
~~~~~~~~~~~~

A ``CharField`` that actually works as a relationship to tags "under
the hood".

Using this example model::

class Link(models.Model):
...
tags = TagField()

Setting tags::

&gt;&gt;&gt; l = Link.objects.get(...)
&gt;&gt;&gt; l.tags = 'tag1 tag2 tag3'

Getting tags for an instance::

&gt;&gt;&gt; l.tags
'tag1 tag2 tag3'

Getting tags for a model - i.e. all tags used by all instances of the
model::

&gt;&gt;&gt; Link.tags
'tag1 tag2 tag3 tag4 tag5'

This field will also validate that it has been given a valid list of
tag names, separated by a single comma, a single space or a comma
followed by a space, using the ``isTagList`` validator from
``tagging.validators``.

Form fields
===========

The ``tagging.forms`` module contains a ``Field`` for use with
Django's `newforms library`_ which takes care of validating tag name
input when used in your forms.

.. _`newforms library`: http://www.djangoproject.com/documentation/newforms/

Field types
-----------

``TagField``
~~~~~~~~~~~~

A form ``Field`` which is displayed as a single-line text input, which
validates that the input it receives is a valid list of tag names.

When you generate a form for one of your models automatically, using
the ``ModelForm`` class provided by newforms, any
``tagging.fields.TagField`` fields in your model will automatically be
represented by a ``tagging.forms.TagField`` in the generated form.

Generic views
=============

The ``tagging.views`` module contains views to handle simple cases of
common display logic related to tagging.

``tagging.views.tagged_object_list``
------------------------------------

**Description:**

A view that displays a list of objects for a given model which have a
given tag. This is a thin wrapper around the
``django.views.generic.list_detail.object_list`` view, which takes a
model and a tag as its arguments (in addition to the other optional
arguments supported by ``object_list``), building the appropriate
``QuerySet`` for you instead of expecting one to be passed in.

**Required arguments:**

* ``queryset_or_model``: A ``QuerySet`` or Django model class for the
object which will be listed.

* ``tag``: The tag which objects of the given model must have in
order to be listed.

**Optional arguments:**

Please refer to the `object_list documentation`_ for additional optional
arguments which may be given.

* ``related_tags``: If ``True``, a ``related_tags`` context variable
will also contain tags related to the given tag for the given
model.

* ``related_tag_counts``: If ``True`` and ``related_tags`` is
``True``, each related tag will have a ``count`` attribute
indicating the number of items which have it in addition to the
given tag.

**Template context:**

Please refer to the `object_list documentation`_ for additional
template context variables which may be provided.

* ``tag``: The ``Tag`` instance for the given tag.

.. _`object_list documentation`: http://www.djangoproject.com/documentation/generic_views/#django-views-generic-list-detail-object-list

Example usage
~~~~~~~~~~~~~

The following sample URLconf demonstrates using this generic view to
list items of a particular model class which have a given tag::

from django.conf.urls.defaults import *

from tagging.views import tagged_object_list

from shop.apps.products.models import Widget

urlpatterns = patterns('',
url(r'^widgets/tag/(?P[^/]+)/$',
tagged_object_list,
dict(model=Widget, paginate_by=10, allow_empty=True,
template_object_name='widget'),
name='widget_tag_detail'),
)

The following sample view demonstrates wrapping this generic view to
perform filtering of the objects which are listed::

from myapp.models import People

from tagging.views import tagged_object_list

def tagged_people(request, country_code, tag):
queryset = People.objects.filter(country__code=country_code)
return tagged_object_list(request, queryset, tag, paginate_by=25,
allow_empty=True, template_object_name='people')

Template tags
=============

The ``tagging.templatetags.tagging_tags`` module defines a number of
template tags which may be used to work with tags.

Tag reference
-------------

tags_for_model
~~~~~~~~~~~~~~

Retrieves a list of ``Tag`` objects associated with a given model and
stores them in a context variable.

Usage::

`{% tags_for_model [model] as [varname] %}`

The model is specified in ``[appname].[modelname]`` format.

Extended usage::

`{% tags_for_model [model] as [varname] with counts %}`

If specified - by providing extra ``with counts`` arguments - adds a
``count`` attribute to each tag containing the number of instances of
the given model which have been tagged with it.

Examples::

`{% tags_for_model products.Widget as widget_tags %}`
`{% tags_for_model products.Widget as widget_tags with counts %}`

tag_cloud_for_model
~~~~~~~~~~~~~~~~~~~

Retrieves a list of ``Tag`` objects for a given model, with tag cloud
attributes set, and stores them in a context variable.

Usage::

`{% tag_cloud_for_model [model] as [varname] %}`

The model is specified in ``[appname].[modelname]`` format.

Extended usage::

`{% tag_cloud_for_model [model] as [varname] with [options] %}`

Extra options can be provided after an optional ``with`` argument, with
each option being specified in ``[name]=[value]`` format. Valid extra
options are:

``steps``
Integer. Defines the range of font sizes.

``min_count``
Integer. Defines the minimum number of times a tag must have
been used to appear in the cloud.

``distribution``
One of ``linear`` or ``log``. Defines the font-size
distribution algorithm to use when generating the tag cloud.

Examples::

`{% tag_cloud_for_model products.Widget as widget_tags %}`
`{% tag_cloud_for_model products.Widget as widget_tags with steps=9 min_count=3 distribution=log %}`

tags_for_object
~~~~~~~~~~~~~~~

Retrieves a list of ``Tag`` objects associated with an object and stores
them in a context variable.

Usage::

`{% tags_for_object [object] as [varname] %}`

Example::

`{% tags_for_object foo_object as tag_list %}`

tagged_objects
~~~~~~~~~~~~~~

Retrieves a list of instances of a given model which are tagged with a
given ``Tag`` and stores them in a context variable.

Usage::

`{% tagged_objects [tag] in [model] as [varname] %}`

The model is specified in ``[appname].[modelname]`` format.

The tag must be an instance of a ``Tag``, not the name of a tag.

Example::

`{% tagged_objects comedy_tag in tv.Show as comedies %}`]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>287</wp:post_id>
		<wp:post_date>2012-03-06 00:07:43</wp:post_date>
		<wp:post_date_gmt>2012-03-05 16:07:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>django-tagging</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="django"><![CDATA[django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[django]]></category>
		<category domain="post_tag" nicename="tagging"><![CDATA[tagging]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f9eca28414490b726ce4099c005c5f15</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails 使用参数提交表单时，要注意保护敏感字段 by huacnlee</title>
		<link></link>
		<pubDate>Tue, 06 Mar 2012 04:53:09 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=289</guid>
		<description></description>
		<content:encoded><![CDATA[刚接触 Rails 的人都会对 Rails form 实际特别喜爱，因为它让我们省时省力，就算遇到有100多个字段的表单，也能够几下就做出来了，因为在服务端不用再去对每个字段分别写文本框与字段的赋值。

但是如果没有注意保护，使用 Model.create(params[:model]) 的方式提交会有很大的安全漏洞。
&lt;h2&gt;下面来看一个例子：&lt;/h2&gt;
&lt;h3&gt;有用户表 [users]&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;id&lt;/li&gt;
 &lt;li&gt;login [用户名]&lt;/li&gt;
 &lt;li&gt;passwd [密码]&lt;/li&gt;
 &lt;li&gt;nick_name [昵称]&lt;/li&gt;
 &lt;li&gt;email [Email]&lt;/li&gt;
 &lt;li&gt;state [状态]&lt;/li&gt;
 &lt;li&gt;group_id [组 [1 管理员, 2 编辑, 3 普通用户]]&lt;/li&gt;
 &lt;li&gt;exp [经验值]&lt;/li&gt;
 &lt;li&gt;money [金币]&lt;/li&gt;
 &lt;li&gt;level_id [等级]&lt;/li&gt;
 &lt;li&gt;created_at&lt;/li&gt;
 &lt;li&gt;updated_at&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;
&lt;h3&gt;注册表单 users/regist.html.erb&lt;/h3&gt;
&amp;nbsp;

&lt;code&gt;
&lt;div id="register"&gt;
  &lt;% form_for @user do |f| -%&gt;
    &lt;p&gt;
      &lt;%= f.label :login, "Login" %&gt;
      &lt;%= f.text_field :login %&gt;
    &lt;/p&gt;
    &lt;p&gt;
      &lt;%= f.label :passwd, "Password" %&gt;
      &lt;%= f.password_field :passwd %&gt;
    &lt;/p&gt;
    &lt;p&gt;
      &lt;%= f.label :nick_name, "Nick Name" %&gt;
      &lt;%= f.password_field :nick_name %&gt;
    &lt;/p&gt;
   &lt;p&gt;
     &lt;%= f.submit "Regist" %&gt;
   &lt;/p&gt;
  &lt;% end -%&gt;
&lt;/div&gt; 
&lt;/code&gt;

控制器 UsersController.rb

 class UsersController &lt; ApplicationController
  def index
  end
  def new
    @user = User.new
  end
  def create
    @user = User.new(params[:user])
      if @user.save
        flash[:notice] = "注册成功。"
        redirect_to "/"
      end
   end
end

这是 Rails 里面很常见的写法,但是如果没有做相应的保护措施，那么使用 <code>@user = User.new(params[:user])</code> 然后 <code>@user.save</code> 这样的方式就会有很严重的问题，因为HTML表单是可以通过 <a href="http://www.getfirebug.com/">Firebug</a> 这类前端调试工具修改的。比如，现在的注册表单上面有 <code>login,passwd,nick_name</code> 三个字段，我可以使用 Firebug 强制修改HTML，加上：

<code>&lt;input name="user[:group_id]" type="text" value="1" /&gt;</code>

<code>&lt;input name="user[:money]" type="text" value="9999999" /&gt;</code>

<code>&lt;input name="user[:exp]" type="text" value="9999999" /&gt; </code>

然后提交保存… 接下来出现的结果大家应该都能猜到，这个用户的金币和经验值都被强制加上了，而且还注册成为了超级管理员！很恐怖把！ 看我在 <a href="http://pasite.is-programmer.com/posts/15200.html">is-programmer.com</a> 上面测试的这个例子我把访问量修改到上亿次！当然 is-programmer.com 做过这方面的保护，这个地方的问题不大不小，我本想强制注册个超级管理员的…但后面发现有做保护的… 呵呵
<h2>如何保护？</h2>
在 Model 里面使用 <em>attr_accessible</em> 或 <em>attr_protected</em> 详见：<a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M002280">ActiveRecord::Base 文档</a>

<code># models/user.rb class
User &lt; ActiveRecord::base
  # 使用 attr_protected 保护
   attr_protected :group_id, :money, :exp, :level_id, :state   # 或使用 attr_accessible # attr_accessible :login, :passwd, :email
end
# controllers/users_controller.rb
class UsersController &lt; ApplicationController
  def index
  end
  def new
    @user = User.new
  end
  def create
    @user = User.new(params[:user]) # 如果需要特别修改 attr_protected 保护的字段，请手动赋值，如 @user.exp = 1000 # 初始经验值 1000
   @user.level_id = 1
   if @user.save flash[:notice] = "注册成功。"
     redirect_to "/"
   end
  end
end </code>

<strong>特别需要更改保护字段的时候，需要使用 @model.money = 55 这样的方式赋值，而直接 @model.update_attributes(params[:model]) 这总方式会把保护字段过滤掉。</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>289</wp:post_id>
		<wp:post_date>2012-03-06 12:53:09</wp:post_date>
		<wp:post_date_gmt>2012-03-06 04:53:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-%e4%bd%bf%e7%94%a8%e5%8f%82%e6%95%b0%e6%8f%90%e4%ba%a4%e8%a1%a8%e5%8d%95%e6%97%b6%ef%bc%8c%e8%a6%81%e6%b3%a8%e6%84%8f%e4%bf%9d%e6%8a%a4%e6%95%8f%e6%84%9f%e5%ad%97%e6%ae%b5-by-huacnlee</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="activerecord"><![CDATA[ActiveRecord]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="%e5%ae%89%e5%85%a8"><![CDATA[安全]]></category>
		<category domain="post_tag" nicename="%e6%bc%8f%e6%b4%9e"><![CDATA[漏洞]]></category>
		<category domain="post_tag" nicename="%e7%a0%b4%e8%a7%a3"><![CDATA[破解]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mass assignment vulnerability - how to force dev. define attr_accesible? by homakov</title>
		<link></link>
		<pubDate>Tue, 06 Mar 2012 11:03:53 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=294</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div>

Those who don't know methods attr_accesible / protected - check that article out <a href="http://enlightsolutions.com/articles/whats-new-in-edge-scoped-mass-assignment-in-rails-3-1">http://enlightsolutions.com/articles/whats-new-in-edge-scoped-mass-assignment-in-rails-3-1</a>

Let's view at typical situation - middle level rails developer builds website for customer, w/o any special protections in model(Yeah! they don't write it! I have asked few my friends - they dont!)
Next, people use this website but if any of them has an idea that developer didnt specify "attr_accesible" - hacker can just add an http field in params, e.g. we have pursue's name edition. POST request at pursues#update

id = 333 (target's pursues id)
pursue['name'] = 'my purses name'
pursue['user_id'] = 412(hacker id)

if code is scaffolded than likely we got Pursue.find(params[:id]).update_attributes(params[:pursue]) in the controller. And that is what I worry about.

After execution that POST we got hacker owning target's pursue!

I don't mean that it is Rails problem, of course not. But let's get it real(Getting Real ok) - most of developers are middle/junior level and most of them don't write important but not very neccessary things: tests, role checks etc including topic - attr_accesible

how to avoid injections ? What should Rails framework do to force people to keep their rails websites safe? Making attr_accesible necessary field in model? What do you think guys.

</div>
</div>
<div id="method-i-attr_accessible"><a name="method-i-attr_accessible"></a><strong>attr_accessible</strong>(*args)</div>
<div>
<div>

Specifies a white list of model attributes that can be set via mass-assignment.指定一个model属性的白名单，其可以通过来定制（白名单里面的的值）。

Like <code>attr_protected</code>, a role for the attributes is optional, if no role is provided then :default is used. A role can be defined by using the :as option.

如同<code>attr_protected，添加的attributes 是他的一个选项，如果没有角色被提供，那么会使用:default选项。一个属性role可以在定义的时候使用:as选项（定制别名）</code>

This is the opposite of the <code>attr_protected</code> macro: Mass-assignment will only set attributes in this list, to assign to the rest of attributes you can use direct writer methods. This is meant to protect sensitive attributes from being overwritten by malicious users tampering with URLs or forms. If you’d rather start from an all-open default and restrict attributes as needed, have a look at <code>attr_protected</code>.

这是<code>attr_protected</code> macro（宏）的相反操作: Mass-assignment 将会仅仅只能设定在这个名单中的attributes ，要分派其余的属性的值你可以使用直接的写方法（赋值然后save）。这里意图去保护敏感的attributes防止其被恶意的用户重写或篡改通过forms的URLs。如果你宁愿开始一个默认全部开放以及需要限制某些属性，去看一看<code>attr_protected</code>.

class Customer
  include ActiveModel::MassAssignmentSecurity

</div>
</div>
  attr_accessor :name, :credit_rating

  attr_protected :credit_rating, :last_login
  attr_protected :last_login, :as =&gt; :admin

  def assign_attributes(values, options = {})
    sanitize_for_mass_assignment(values, options[:as]).each do |k, v|
      send("#{k}=", v)
    end
  end
end
When using the :default role :

customer = Customer.new
customer.assign_attributes({ "name" =&gt; "David", "credit_rating" =&gt; "Excellent",:last_login =&gt; 1.day.ago }, :as =&gt; :default)
customer.name # =&gt; "David"
customer.credit_rating # =&gt; nil
customer.last_login # =&gt; nil

customer.credit_rating = "Average"
customer.credit_rating # =&gt; "Average"
And using the :admin role :

customer = Customer.new
customer.assign_attributes({ "name" =&gt; "David", "credit_rating" =&gt; "Excellent", :last_login =&gt; 1.day.ago }, :as =&gt; :admin)
customer.name # =&gt; "David"
customer.credit_rating # =&gt; "Excellent"
customer.last_login # =&gt; nil
To start from an all-closed default and enable attributes as needed, have a look at attr_accessible.

Note that using Hash#except or Hash#slice in place of attr_protected to sanitize attributes won’t provide sufficient protection.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>294</wp:post_id>
		<wp:post_date>2012-03-06 19:03:53</wp:post_date>
		<wp:post_date_gmt>2012-03-06 11:03:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mass-assignment-vulnerability-how-to-force-dev-define-attr_accesible-by-homakov</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="assignment"><![CDATA[assignment]]></category>
		<category domain="post_tag" nicename="mass"><![CDATA[mass]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="vulnerability"><![CDATA[vulnerability]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>RSpec简明指南 By Yuanyi ZHANG</title>
		<link></link>
		<pubDate>Fri, 09 Mar 2012 10:05:19 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=305</guid>
		<description></description>
		<content:encoded><![CDATA[这是<a href="http://blog.davidchelimsky.net/">David Chelimsky</a>写的一篇RSpec简明指南，原文在<a href="http://blog.davidchelimsky.net/articles/2007/05/14/an-introduction-to-rspec-part-i">这里</a>。

<span style="font-size: large;"><strong>简介</strong></span>

要了解RSpec，我们首先需要了解什么是行为驱动开发（Behaviour Driven Development，简称BDD），BDD是一种融合了可接受性测试驱动计划（Acceptance Test Driven Planning），域驱动设计（Domain Driven Design）以及测试驱动开发（Test Driven Development，简称TDD）的敏捷开发模型。RSpec为BDD开发提供TDD支持。

你可以简单的将RSpec看作一个传统的单元测试框架，但我们更愿意将它看成是一种领域特定语言（Domain Specific Language，以下简称DSL），它的主要作用就是描述我们对系统执行某个样例(example)的期望行为(behavior)。

这篇指南遵从TDD思想，但是我们将使用行为（behavior）和样例（example）来代替测试例（test case）和测试方法（test method），想知道我们为什么采用这样的术语，请参看<a href="http://dannorth.net/tags/agile/bdd/">Dan North</a>, <a href="http://daveastels.com/articles/2005/07/05/a-new-look-at-test-driven-development">Dave Astels</a>, 以及 <a href="http://exampler.com/">Brian Marick</a> 的相关文章。

<span style="font-size: large;"><strong>安装</strong></span>

目前RSpec的最新版本是1.0.5，需要Ruby184以上版本，可以通过下面这条命令安装：

<code># gem install rspec</code>

<span style="font-size: large;"><strong>准备工作</strong></span>

整篇指南都围绕一个例子展开，因此在开始前，你最好先为这个例子建个目录：

<code>$ mkdir rspec_tutorial
$ cd rspec_tutorial</code>

<span style="font-size: large;"><strong>开始</strong></span>

我们首先要了解的是RSpec DSL的”describe”与”it”方法，这两个方法有很多其它的名字（但是我们不推荐使用它们），我们之所以使用这样的命名，只是想让你站在行为（behavior）而不是结构（structure）的角度进行思考。

创建名为user_spec.rb的文件：

<code>describe User do
end</code>

describe方法创建一个Behavior实例，所以你可以将”describe User”理解为”描述用户的行为（describe the behaviour of the User class）”，或许这个方法叫做“
describe_the_behaviour_of”会更合适些，但这实在太冗长了，所以我们决定只选取第一个单词describe来作为这个方法的名字。

现在你可以在shell中试试这条命令：

<code>$ spec user_spec.rb</code>

spec命令有很多选项，但大部分超出了本指南的范围，如果你感兴趣，可以只输入spec而不带任何参数来查看帮助信息。

让我们接着回到上面那条命令，它应该会产生下面的输出：

<code>./user_spec.rb:1: uninitialized constant User (NameError)</code>

这是因为我们还没有创建User类，也就是说我们要描述的东西不存在，因此我们需要再创建一个user.rb来定义我们所要描述的对象：

<code>class User
end</code>

并在user_spec.rb中包含它：

<code>require 'user'
describe User do
end</code>

现在再次运行spec命令：

<code>$ spec user_spec.rb
Finished in 6.0e-06 seconds
0 examples, 0 failures</code>

这个输出是说我们还没有定义样例，所以现在我们就来定义一个：

<code>describe User do
  it "should be in any roles assigned to it" do
  end
end</code>

it方法返回一个Example实例，因此我们可以将it方法理解成“用户行为的一个样例”。

再次运行spec：

<code>$ spec user_spec.rb --format specdoc
User
- should be in any roles assigned to it
Finished in 0.022865 seconds
1 example, 0 failures</code>

specdoc参数格式化行为（describe方法创建的对象）以及样例（it方法创建的对象）的名字然后输出，这种格式来自于TestDox，一个为JUnit测试例及方法提供相似报告的工具。

现在我们开始增加Ruby代码：

<code>describe User do
  it "should be in any roles assigned to it" do
    user.should be_in_role("assigned role")
  end
end</code>

这句话的意思是User应该能够胜任所有分配给他的角色，那么事实是这样么？让我们运行spec试试看：

<code>$ spec user_spec.rb --format specdoc
User
- should be in any roles assigned to it (ERROR - 1)
1)
NameError in ‘User should be in any roles assigned to it’
undefined local variable or method `user’ for #&lt;#:0×14ecdd8&gt;
./user_spec.rb:6:
Finished in 0.017956 seconds
1 example, 1 failure</code>

又出错了，是的，但在继续之前，让我们先仔细看看这段出错信息：
<ul>
	<li>“ERROR -1)”告诉我们”should be in any roles assigned to it”这个样例出错了</li>
	<li>“1)”则为我们详细描述了这个错误，当样例很多时，你就会发现这个编号非常有用</li>
</ul>
还有一点需要注意：这段信息没有给出RSpec代码的backtrace，如果你需要它，可以通过–backtrace选项来获取。

下面，我们继续我们的例子，上面的错误是因为我们没有创建User对象，那我们就创建一个：

<code>describe User do
  it "should be in any roles assigned to it" do
    user = User.new
    user.should be_in_role("assigned role")
  end
end</code>

<code>$ spec user_spec.rb --format specdoc
User
- should be in any roles assigned to it (ERROR - 1)
1)
NoMethodError in ‘User should be in any roles assigned to it’
undefined method `in_role?’ for #
./user_spec.rb:7:
Finished in 0.020779 seconds
1 example, 1 failure</code>

还是失败，不过这次是因为User对象缺少role_in?方法，修改user.rb:

<code>class User
  def in_role?(role)
  end</code>

<code>$ spec user_spec.rb --format specdoc
User
- should be in any roles assigned to it (FAILED - 1)
1)
‘User should be in any roles assigned to it’ FAILED
expected in_role?(”assigned role”) to return true, got nil
./user_spec.rb:7:
Finished in 0.0172110000000001 seconds
1 example, 1 failure</code>

虽然又失败了，但我们的第一个目标其实已经达到了，我们得到了一段更有意义的错误描述”User should be in any roles assigned to it”。

让这段代码避免失败很简单：

<code>class User
  def in_role?(role)
    true
  end</code>

<code>$ spec user_spec.rb --format specdoc
User
- should be in any roles assigned to it
Finished in 0.018173 seconds
1 example, 0 failures</code>

现在终于通过了，但是让我们再来看看这段代码：

<code>describe User do
  it "should be in any roles assigned to it" do
    user = User.new
    user.should be_in_role("assigned role")
  end
end</code>

我们可以将这个样例理解成“用户应该接受所有分配给他的角色”，但问题是我们还没有分给他角色呢？

<code>describe User do
  it "should be in any roles assigned to it" do
    user = User.new
    user.assign_role("assigned role")
    user.should be_in_role("assigned role")
  end
end</code>

这段代码又会引发一个错误，因为User并没有assign_role这个方法：

<code>class User
  def in_role?(role)
    true
  end
  def assign_role(role)
  end
end</code>

<code>$ spec user_spec.rb --format specdoc
User
- should be in any roles assigned to it
Finished in 0.018998 seconds
1 example, 0 failures</code>

样例再次通过，但是我们的任务还没结束，只要你再回头看看我们目前的代码，就会发现这个User的行为与我们的目标还有距离。

现在，我们只是解决了“用户必须接受所有分配给他的角色”，但是还有一个问题就是”用户不应该接受没有分配给他的角色“。所以我们需要为用户行为再增加一个样例：

<code>describe User do
  it "should be in any roles assigned to it" do
    user = User.new
    user.assign_role("assigned role")
    user.should be_in_role("assigned role")
  end
  it “should NOT be in any roles not assigned to it” do
    user = User.new
    user.should_not be_in_role(”unassigned role”)
  end
end</code>

<code>$ spec user_spec.rb --format specdoc
User
- should be in any roles assigned to it
- should NOT be in any roles not assigned to it (FAILED - 1)
1)
‘User should NOT be in any roles not assigned to it’ FAILED
expected in_role?(”unassigned role”) to return false, got true
./user_spec.rb:12:
Finished in 0.019014 seconds
2 examples, 1 failure</code>

失败了，用户接受了没有分给他的角色，这需要我们对User的实现做些改动：

<code>class User
  def in_role?(role)
    role == "assigned role"
  end
  def assign_role(role)
  end
end</code>

现在，一切都搞定了，但是我们的代码与样例有些重复（它们都使用了”assigned role”），因此，有必要对User类进行重构：

<code>class User
  def in_role?(role)
    role == @role
  end
  def assign_role(role)
    @role = role
  end
end</code>

随后，让我们再来测试一下：

<code>$ spec user_spec.rb --format specdoc
User
- should be in any roles assigned to it
- should NOT be in any roles not assigned to it
Finished in 0.018199 seconds
2 examples, 0 failures</code>

事情就这么结束了么？你可能还有些疑惑，因为我们甚至可以将一个数字分配给用户，但这与”用户应该接受任何分配给他的角色”是吻合的，所以，这时候我们应该征求下我们的客户的意见，“每个用户在同一时间只能担当一个角色吗？”，如果客户的回答是Yes，那么很幸运，我们不需要对我们的代码进行改动，而只需对样例的描述进行一些修改，但如果客户的回答是No，那我们恐怕还得再做些工作。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date>2012-03-09 18:05:19</wp:post_date>
		<wp:post_date_gmt>2012-03-09 10:05:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rspec%e7%ae%80%e6%98%8e%e6%8c%87%e5%8d%97-by-yuanyi-zhang</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="guide"><![CDATA[guide]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rspec"><![CDATA[RSpec]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TomDoc for Ruby - Version 1.0.0-rc1</title>
		<link></link>
		<pubDate>Thu, 15 Mar 2012 02:54:28 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=308</guid>
		<description></description>
		<content:encoded><![CDATA[Purpose
TomDoc is a code documentation specification that helps you write precise documentation that is nice to read in plain text, yet structured enough to be automatically extracted and processed by a machine.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119.

Method Documentation
A quick example will serve to best illustrate the TomDoc method documentation format:

# Public: Duplicate some text an arbitrary number of times.
#
# text  - The String to be duplicated.
# count - The Integer number of times to duplicate the text.
#
# Examples
#
#   multiplex('Tom', 4)
#   # => 'TomTomTomTom'
#
# Returns the duplicated String.
def multiplex(text, count)
  text * count
end
TomDoc for a specific method consists of a block of single comment markers (#) that appears directly above the method. There SHOULD NOT be a blank line between the comment block and the method definition. A TomDoc method block consists of five optional sections: a description section, an arguments section, a yields section, an examples section, a returns section, and a signature section. Lines that contain text MUST be separated from the comment marker by a single space. Lines that do not contain text SHOULD consist of just a comment marker (no trailing spaces).

The Description Section
The description section SHOULD be in plain sentences. Each sentence SHOULD end with a period. Good descriptions explain what the code does at a high level. Make sure to explain any unexpected behavior that the method may have, or any pitfalls that the user may experience. Paragraphs SHOULD be separated with blank lines. Code within the description section should be indented three spaces from the starting comment symbol. Lines SHOULD be wrapped at 80 characters.

To describe the status of a method, you SHOULD use one of several prefixes:

Public: Indicates that the method is part of the project's public API. This annotation is designed to let developers know which methods are considered stable. You SHOULD use this to document the public API of your project. This information can then be used along with Semantic Versioning to inform decisions on when major, minor, and patch versions should be incremented.

# Public: Initialize a new Widget.
Internal: Indicates that the method is part of the project's internal API. These are methods that are intended to be called from other classes within the project but not intended for public consumption. For example:

# Internal: Normalize the filename.
Deprecated: Indicates that the method is deprecated and will be removed in a future version. You SHOULD use this to document methods that were Public but will be removed at the next major version.

# Deprecated: Resize an object to the given dimensions.
An example description that includes all of these elements might look something like the following.

# Public: Format some data with the given format. Possible format
# identifiers include:
#
# %i   - Output the Integer i.
# %f.n - Output a Float f with n decimal places rounded.
#
# The format String may include any text. To escape a percent sign, prefix
# it with a backslash:
#
#   "The sale price was %f.n\% off retail."
The Arguments Section
The arguments section consists of a list of arguments. Each list item MUST be comprised of the name of the argument, a dash, and an explanation of the argument in plain sentences. The expected type (or types) of each argument SHOULD be clearly indicated in the explanation. When you specify a type, use the proper classname of the type (for instance, use 'String' instead of 'string' to refer to a String type). If the argument has other constraints (e.g. duck-typed method requirements), simply state those requirements. The dashes following each argument name SHOULD be lined up in a single column. Lines SHOULD be wrapped at 80 columns. If an explanation is longer than that, additional lines MUST be indented at least two spaces but SHOULD be indented to match the indentation of the explanation. For example:

# element - The Symbol representation of the element. The Symbol should
#           contain only lowercase ASCII alpha characters.
An argument that is String-like might look like this:

# actor - An object that responds to to_s. Represents the actor that
#         will be output in the log.
All arguments are assumed to be required. If an argument is optional, you MUST specify the default value:

# host - The String hostname to bind (default: '0.0.0.0').
For hash arguments, you SHOULD enumerate each valid option in a way similar to how normal arguments are defined:

# options - The Hash options used to refine the selection (default: {}):
#           :color  - The String color to restrict by (optional).
#           :weight - The Float weight to restrict by. The weight should
#                     be specified in grams (optional).
Ruby allows for some interesting argument capabilities. In those cases, try to explain what's going on as best as possible. Examples are a good way to demonstrate how methods should be invoked. For example:

# Print a log line to STDOUT. You can customize the output by specifying
# a block.
#
# msgs  - Zero or more String messages that will be printed to the log
#         separated by spaces.
# block - An optional block that can be used to customize the date format.
#         If it is present, it will be sent a Time object representing
#         the current time. Your block should return a String version of
#         the time, formatted however you please.
#
# Examples
#
#   log("An error occurred.")
#
#   log("No such file", "/var/log/server.log") do |time|
#     time.strftime("%Y-%m-%d %H:%M:%S")
#   end
#
# Returns nothing.
def log(*msgs, &block)
  ...
end
The Yields Section
The yields section is used to specify what is sent to the implicitly given block. The section MUST start with the word "Yields" and SHOULD contain a description and type of the yielded object. For example:

# Yields the Integer index of the iteration.
Lines SHOULD be wrapped at 80 columns. Wrapped lines MUST be indented under the above line by at least two spaces.

The Examples Section
The examples section MUST start with the word "Examples" on a line by itself. The next line SHOULD be blank. The following lines SHOULD be indented by two spaces (three spaces from the initial comment marker) and contain code that shows off how to call the method and (optional) examples of what it returns. Everything under the "Examples" line should be considered code, so make sure you comment out lines that show return values. For example:

# Examples
#
#   multiplex('x', 4)
#   # => 'xxxx'
#
#   multiplex('apple', 2)
#   # => 'appleapple'
The Returns/Raises Section
The returns section should explain in plain sentences what is returned from the method. The line MUST begin with "Returns". If only a single thing is returned, state the nature and type of the value. For example:

# Returns the duplicated String.
If several different types may be returned, list all of them. For example:

# Returns the given element Symbol or nil if none was found.
If the return value of the method is not intended to be used, then you should simply state:

# Returns nothing.
If the method raises exceptions that the caller may be interested in, add additional lines that explain each exception and under what conditions it may be encountered. The lines MUST begin with "Raises". For example:

# Returns nothing.
# Raises Errno::ENOENT if the file cannot be found.
# Raises Errno::EACCES if the file cannot be accessed.
Lines SHOULD be wrapped at 80 columns. Wrapped lines MUST be indented under the above line by at least two spaces. For example:

# Returns the atomic mass of the element as a Float. The value is in
#   unified atomic mass units.
The Signature Section
The signature section allows you specify the nature of methods that are dynamically created at runtime.

The section MUST start with the word "Signature" on a line by itself. The next line SHOULD be blank. The following lines SHOULD be indented by two spaces (three spaces from the initial comment marker) and contain special code that shows the method signature(s). For complex dynamic signatures, you SHOULD name and demarcate signature variables with <> for required parts and [] for optional parts. Use ... for repeating elements. If there are dynamic elements to the signature, document them in the same was as the Arguments section, but leave out any type declarations. Documentation for metaprogrammed methods may exist independent of any actual code, or it may appear above the code that creates the methods. Use your best judgment.

# Signature
#
#   find_by_<field>[_and_<field>...](args)
#
# field - A field name.
Because metaprogrammed methods may be difficult to decipher, it's best to include an examples section to demonstrate proper usage. For example:

# Public: Find Records by a specific field name and value. This method
# will be available for each field defined on the record.
#
# args - The value or Array of values of the field(s) to find by.
#
# Examples
#
#   find_by_name_and_email("Tom", "tom@mojombo.com")
#
# Returns an Array of matching Records.
#
# Signature
#
#   find_by_<field>[_and_<field>...](args)
#
# field - A field name.
Class/Module Documentation
TomDoc for classes and modules follows the same form as Method Documentation but only contains the Description and Examples sections.

# Public: Various methods useful for performing mathematical operations.
# All methods are module methods and should be called on the Math module.
#
# Examples
#
#   Math.square_root(9)
#   # => 3
module Math
  ...
end
Just like methods, classes may be marked as Public, Internal, or Deprecated depending on their intended use.

Constants Documentation
Constants should be documented with freeform comments. The type of the constant and any important constraints should be stated.

# Public: Integer number of seconds to wait before connection timeout.
CONNECTION_TIMEOUT = 60
Just like methods, constants may be marked as Public, Internal, or Deprecated depending on their intended use.

Special Considerations
Constructor
A Ruby class's initialize method does not have a significant return value. You MAY exclude the returns section. A larger description of the purpose of this class should be done at the Class level.

# Public: Initialize a Widget.
#
# name - A String naming the widget.
def initialize(name)
  ...
end
Attributes
Ruby's built in attr_reader, attr_writer, and attr_accessor require a bit more consideration. With TomDoc you SHOULD document each of these method generators separately. Because each part of a method documentation section is optional, you can write concise yet unambiguous docs.

Here is an example TomDoc for attr_reader.

# Public: Returns the String name of the user.
attr_reader :name
Here is an example TomDoc for attr_writer.

# Public: Sets the String name of the user.
attr_writer :name
For attr_accessor you can use an overloaded shorthand that documents the getter and setter simultaneously:

# Public: Gets/Sets the String name of the user.
attr_accessor :name
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>308</wp:post_id>
		<wp:post_date>2012-03-15 10:54:28</wp:post_date>
		<wp:post_date_gmt>2012-03-15 02:54:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tomdoc-for-ruby-version-1-0-0-rc1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="doc"><![CDATA[doc]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="tomdoc"><![CDATA[tomdoc]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>factory_girl Validation failed</title>
		<link></link>
		<pubDate>Fri, 16 Mar 2012 08:22:49 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=314</guid>
		<description></description>
		<content:encoded><![CDATA[You need to use a sequence to prevent the creation of user objects with the same email, since you must have a validation for the uniqueness of emails in your User model.
<pre><code>Factory.sequence :email do |n|
  “test#{n}@example.com”
end

Factory.define :user do |user|
  user.name "Testing User"
  user.email { Factory.next(:email) }
  user.password "foobar"
  user.password_confirmation "foobar"
end
</code></pre>
You can read more in the <a href="https://github.com/thoughtbot/factory_girl/wiki/Usage" rel="nofollow">Factory Girl documentation</a>.

&nbsp;

Using factory_girl to create several instances of a class that belongs to another class causes a Validation failed error.

This happens because each instance tries to automatically create the object to which it belongs. However since the first instance creates it, the following instances crash because the object already exists.

I have been struggling to solve this problem and it seems finally I arrived to a satisfactory solution.

The problem arises when there is a one to many relationship between to classes and I try to create several instances of a class.

In my case I have a subdomain which has many users:

class Subdomain &lt; ActiveRecord::Base validates_uniqueness_of :name, :case_sensitive =&gt; false
has_many :users
end
class User &lt; ActiveRecord::Base belongs_to: subdomain endThe factories are as follows: FactoryGirl.define do factory :subdomain do name 'test-subdomain' end factory :user do subdomain email 'test-user@example.com' password '123456¿ password_confirmation '123456' end endWhen I try to create two users using the following code: FactoryGirl.create(:user, :email =&gt; "first@example.com")
FactoryGirl.create(:user, :email =&gt; "second@example.com")I get the following error:

Validation failed: Name has already been taken (ActiveRecord::RecordInvalid)This happens because when the first user is created, the default subdomain is created too and when the second user is created the subdomain already exists.

If we want to use the same subdomain for both users we can do the following:

s = FactoryGirl.create(:subdomain)
FactoryGirl.create(:user, :email =&gt; "first@example.com", :subdomain =&gt; s)
FactoryGirl.create(:user, :email =&gt; "second@example.com", :subdomain =&gt; s)However as our has_many relations become deeper, test data creation becomes more complex.

My solution to this problem is as to change the factory for user:

factory :user do
subdomain { Subdomain.find_by_name('test-subdomain') || FactoryGirl.create(:subdomain) }
email 'test-user@example.com'
password '123456'
password_confirmation '123456'
endIn this case the factory uses the default subdomain if it already exists, avoiding the validation problem.

Now if we use the initial code, it works without problem, assigning both users to the default subdomain

FactoryGirl.create(:user, :email =&gt; "first@example.com")
FactoryGirl.create(:user, :email =&gt; "second@example.com")However this does not limit us to use the same subdomain for all users:

other_subdomain = FactoryGirl.create(:subdomain, :name =&gt; "other-subdomain")

FactoryGirl.create(:user, :email =&gt; "first@example.com", :subdomain =&gt; other_subdomain)
FactoryGirl.create(:user, :email =&gt; "second@example.com")In this case, the first user is assigned to other-subdomain and the second user is assigned to test-subdomain.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>314</wp:post_id>
		<wp:post_date>2012-03-16 16:22:49</wp:post_date>
		<wp:post_date_gmt>2012-03-16 08:22:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>factory_girl-validation-failed</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="factory_girl"><![CDATA[factory_girl]]></category>
		<category domain="post_tag" nicename="failed"><![CDATA[failed]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="validation"><![CDATA[Validation]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Helper Antipatterns</title>
		<link></link>
		<pubDate>Mon, 19 Mar 2012 02:44:22 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=318</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Helper AntiPatterns</h2>
Helper （輔助方法）的存在目的是用來輔助整理 View 中內嵌的複雜 Ruby 程式碼。設計得當的 Helper 可以加速專案的開發，以及增進程式的可讀性。然而，設計不好的 Helper 卻可能造成嚴重的反效果。

以下列舉常見的幾種糟糕的 Helper 設計模式：
<h3>1. 矯往過正：用 Helper 作 partial 該做的事</h3>
開發者以為 partial 效率是低下的，刻意不使用 partial，而改用 Helper 完成所有的動作：將需要重複使用的 HTML 通通寫成了 Ruby code，串接成 HTML：
def show_index_block(block_name, post, is_show_game)

block_title = content_tag(:h3, block_name)
section_header = content_tag(:div, block_title, :class =&gt; "section-header")

game_name = is_show_game ? "【 #{post.games.first.name} 】" : ""
title = content_tag(:h4, link_to("#{game_name} #{post.title}", post_path(post)))
image = content_tag(:div, render_post_image(post), :class =&gt; "thumbnail")
content = content_tag(:p, truncate( post.content, :length =&gt; 100))
section_content = content_tag(:div, "#{title}#{image}#{content}", :class =&gt; "section-content")

section_footer = content_tag(:div, link_to("閱讀全文", post_path(post)), :class =&gt; "section-footer")

return content_tag(:div, "#{section_header}#{section_content}#{section_footer}" , :class =&gt; "article-teaser")
end
 Helper 的作用只是協助整理 HTML 中的邏輯程式碼。若有大片 HTML 需要重複使用，應當需要利用 partial 機制進行 HTML 的重複利用。這樣的寫法，非但效率低下（可以用 HTML 產生，卻使用 Ruby 呼叫 Tag Helper，且製造大量 Ruby Object），且嚴重降低程式的可讀性，其他維護者將難以對這樣的 DOM 進行後續的維護翻修。

&nbsp;

 
2. 容易混淆：在 Helper 裡面穿插 HTML tag

這也是另外一個矯枉過正的例子，不過方向剛好相反：「因為覺得使用 Ruby code 產生 HTML tag 可能浪費效能，而直接插入 HTML 在 Helper 裡面與 Ruby Code 混雜。」也造成了專案維護上的困難：因為 Ruby 中的字串是使用雙引號"，而 HTML 也是使用雙引號"，，所以就必須特別加入 \" 跳脫，否則就可能造成 syntax error。
錯誤
def post_tags_tag(post, opts = {})
# ....
<span style="background-color: #ff9632;">raw tags.collect</span> { |tag| "#{tag}" }.join(", ")
end
大量的 " 混雜在程式碼裡面，嚴重造成程式的可閱讀性，而且發生 syntax error 時難以 debug。
def post_tags_tag(post, opts = {})
# ....
<span>raw tags.collect</span> { |tag| "#{tag}" }.join(", ")
end
即便換成 ' 單引號，狀況並沒有好上多少。
def post_tags_tag(post, opts = {})
# ...
<span>raw tags.collect</span> { |tag| link_to(tag,posts_path(:tag =&gt; tag)) }.join(", ")
end
正確的作法應該是妥善使用 Rails 內建的 Helper，使 Helper 裡面維持著都是 Ruby code 的狀態，並且具有高可讀性。

3. 強耦合：把 CSS 應該做的事綁在 Ruby Helper 上。

錯誤
def red_alert(message)
return content_tag(:span,message, :style =&gt; "font-color: red;")
end

def green_notice(message)
return content_tag(:span,message, :style =&gt; "font-color: green;")
end
開發者不熟悉 unobtrusive 的設計手法，直接就把 design 就綁上了 Ruby Helper。將來設計上若需要變更時，難以修改或擴充。
正確
def stickies(message, message_type)
content_tag(:span,message, :class =&gt; message_type.to_sym)
end

<span class="alert">Please Login!! </span>
樣式應該由 CSS 決定，使用 CSS class 控制，而非強行綁在 Helper 上。
4. 重複發明輪子

Rails 已內建許多實用 Helper，開發者卻以較糟的方式重造輪子。在此舉幾個比較經典的案例：

cycle
如何設計 table 的雙色列效果？

&lt;% count = 0 &gt; &lt;table&gt; &lt;% @items.each do |item| %&gt; &lt;% if count % 2 == 0 %&gt; &lt;% css_class = "even "%&gt; &lt;% else %&gt; &lt;% css_class = "odd" %&gt; &lt;% end %&gt; &lt;tr class="&lt;%= css_class %&gt;"&gt; &lt;td&gt;item&lt;/td&gt; &lt;/tr&gt; &lt;% count += 1%&gt; &lt;% end %&gt; &lt;/table&gt;

一般的想法會是使用兩種不同 CSS class : even 與 odd，著上不同的顏色。

&lt;table&gt; &lt;% @items.each_with_index do |item, count| %&gt; &lt;% if count % 2 == 0 %&gt; &lt;% css_class = "even "%&gt; &lt;% else %&gt; &lt;% css_class = "odd" %&gt; &lt;% end %&gt; &lt;tr class="&lt;%= css_class %&gt;"&gt; &lt;td&gt;item&lt;/td&gt; &lt;/tr&gt; &lt;% count += 1%&gt; &lt;% end %&gt; &lt;/table&gt;

這是一般粗心者會犯的錯誤。實際上 Ruby 的 Array 內建 each_with_index，不需另外宣告一個 count。
優

&lt;table&gt; &lt;% @items.each_with_index do |item, count| %&gt; &lt;% if count % 2 == 0 %&gt; &lt;% css_class = "even "%&gt; &lt;% else %&gt; &lt;% css_class = "odd" %&gt; &lt;% end %&gt; &lt;tr class="&lt;%= css_class %&gt;"&gt; &lt;td&gt;item&lt;/td&gt; &lt;/tr&gt; &lt;% count += 1%&gt; &lt;% end %&gt; &lt;/table&gt;

但其實還有更簡便的方法：Rails 內建了 <code>cycle</code> 這個 Helper。所以只要這樣寫就好了…

&lt;table&gt; &lt;% @items.each do |item| %&gt; &lt;trodd", "even") %&gt;"&gt; &lt;td&gt;item&lt;/td&gt; &lt;/tr&gt; &lt;% end %&gt; &lt;/table&gt;
<h4>常用你可能不知道的 Helper</h4>
限於篇幅，直接介紹幾個因為使用機率高，所以很容易被重造輪子的 Helper。開發者會寫出的相關 AntiPattern 部分就跳過了。
<ul>
	<li><a href="http://apidock.com/rails/ActionView/Helpers/TextHelper/truncate">truncate</a></li>
	<li><a href="http://apidock.com/rails/ActionView/Helpers/TextHelper/auto_link">auto_link</a></li>
	<li><a href="http://apidock.com/rails/ActionView/Helpers/RecordTagHelper/div_for">div_for</a> &amp; <a href="http://apidock.com/rails/ActionController/RecordIdentifier/dom_id">dom_id</a></li>
	<li><a href="http://apidock.com/rails/ActionView/Helpers/TextHelper/simple_format">simple_format</a></li>
</ul>
<code>#TODO: examples</code>
<h2>5. Tell, dont ask</h2>
<h2>這也是在 View 中會常出現的問題，直接違反了 Law of Demeter 原則，而造成了效能問題。十之八九某個 View 緩慢無比，最後抓出來背後幾乎都是這樣的原因。</h2>
不少開發者會設計出這樣的 helper：

 
def post_tags_tag(post, opts = {})
tags = post.tags
tags.collect { |tag| link_to(tag,posts_path(:tag =&gt; tag)) }.join(", ")
end

這種寫法會造成在 View 中，執行迴圈時，造成不必要的大量 query (n+1)，以及在 View 中製造不確定數量的大量物件。View 不僅效率低落也無法被 optimized。
def post_tags_tag(post, tags, opts = {})
tags.collect { |tag| link_to(tag,posts_path(:tag =&gt; tag)) }.join(", ")
end

def index
@posts = Post.recent.includes(:tags)
end
正確的方法是使用 Tell, dont ask 原則，主動告知會使用的物件，而非讓 Helper 去猜。並配合 ActiveRecord 的 includes 減少不必要的 query（ includes 可以製造 join query ，一次把需要的 posts 和 tags 撈出來）。

且在 controller query 有 object cache 效果，在 view 中則無。

小結

Helper 是 Rails Developer 時常在接觸的工具。但可惜的是，多數開發者卻無法將此利器使得稱手，反而造成了更多問題。在我所曾經參與的幾十個 Rails 專案中，很多設計和效能問題幾乎都是因為寫的不好的 View / Helper 中的 slow query 或伴隨產生的大量 object 所造成的 memory bloat 導致的。但參與專案的開發者並沒有那麼多的經驗，能夠抓出確切的病因，卻都將矛頭直接是 Rails 的效能問題，或者是沒打上 Cache 的關係。這樣的說法只是把問題掩蓋起來治標，而非治本。

下次若有遇到 performance issue，請先往 View 中瞧看看是不是裡面出現了問題。也許你很快就可以找到解答。

Posted by xdite Jan 12th, 2012]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>318</wp:post_id>
		<wp:post_date>2012-03-19 10:44:22</wp:post_date>
		<wp:post_date_gmt>2012-03-19 02:44:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>helper-antipatterns</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="helpers"><![CDATA[helpers]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="templates"><![CDATA[templates]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>python ruby geek by django社区and ruby-china</title>
		<link></link>
		<pubDate>Tue, 20 Mar 2012 05:48:55 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=326</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: left;">by ruby-china 由 <a href="http://ruby-china.org/users/gaicitadie" data-name="盖茨他爹">gaicitadie</a> 在 <a href="http://ruby-china.org/topics/node27">瞎扯淡</a> 节点</p>

<div>
<p style="text-align: left;">统计一个字符串在另一个字符串中出现的次数，python只需要一个count方法：</p>

<div>
<pre>&gt;&gt;&gt; '11ab1111ab111ac11111'.count('ab') 2</pre>
huacnlee 1楼, 于24小时前回复 irb&gt; '11ab1111ab111ac11111'.scan("ab").count
2
ywencn 2楼, 于24小时前回复 1.9.2p290 :001 &gt;  '11ab1111ab111ac11111'.count('ab')
 =&gt; 5
楼主想表达什么？

ywencn 3楼, 于24小时前回复 哎呀。。。怎么python和ruby的count还不一样，哈哈

huacnlee 4楼, 于24小时前回复 Ruby 的 "".count 统计的是后面所有的字符

dreamrise 5楼, 于24小时前回复 貌似_who还写过一个python与ruby转换的程序？

gaicitadie 6楼, 于23小时前回复 奥运奖牌榜：
国家 金牌数 银牌数 铜牌数
china 37 26 11
usa 30 22 50
russia 30 33 20

中国习惯上先按金牌数排名，金牌数一样的按银牌数再排，如果银牌数再一样就按铜牌数排：

&gt;&gt;&gt; sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:(-x[1],-x[2],-x[3]))
[('china', 37, 26, 11), ('russia', 30, 33, 20), ('usa', 30, 22, 50)]
美国习惯上金牌银牌铜牌都是奖牌，所以按奖牌总数排序：

&gt;&gt;&gt; sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:-(x[1]+x[2]+x[3]))
[('usa', 30, 22, 50), ('russia', 30, 33, 20), ('china', 37, 26, 11)]
python的排序达到了类似SQL查询的能力，只需要告诉它排序的条件就可以了，python为数据而生

gaicitadie 7楼, 于23小时前回复 上面的例子是python模拟SQL的order by功能，下面的例子用python模拟SQL的where条件查询

统计金牌数超过35的国家：

&gt;&gt;&gt; [x for x in [('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)] if x[1]&gt;35]
[('china', 37, 26, 11)]
统计奖牌总数超过100的国家：

&gt;&gt;&gt; [x for x in [('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)] if x[1]+x[2]+x[3]&gt;100]
[('usa', 30, 22, 50)]
huyong36 8楼, 于23小时前回复 @gaicitadie ruby是

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].select{|x| x[1] &gt; 35}
[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].select{|x| x[1] + x[2] + x[3] &gt; 100}
quakewang 9楼, 于23小时前回复 #6楼 @gaicitadie
order by 的ruby代码

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].sort_by{|m| [-m[1], -m[2], -m[3]]}
[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].sort_by{|m| -(m[1] + m[2] + m[3])]}
skandhas 10楼, 于23小时前回复 从楼主的例子直接翻译到Ruby
1 中国习惯上先按金牌数排名，金牌数一样的按银牌数再排，如果银牌数再一样就按铜牌数排：

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].sort_by{|x| [-x[1],-x[2],-x[3]]}
2 美国习惯上金牌银牌铜牌都是奖牌，所以按奖牌总数排序：

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].sort_by{|x| -(x[1]+x[2]+x[3])}
3 统计金牌数超过35的国家：

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].select{|x| x[1] &gt;35}
4 统计奖牌总数超过100的国家：

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].select{|x| x[1]+x[2]+x[3] &gt; 100}
这两个语言都挺类似，我觉得ruby的select更直观。

另 楼主这个帖子想表达什么？没看出什么来。如果说只通过sorted就说明python是为数据而生的话，那ruby不也是吗。哈哈

daqing 11楼, 于23小时前回复 我来写个Ruby版本的。

第一个，奖牌排序:

data = [[:china, 27, 26, 11], [:usa, 20, 22, 50], [:russia, 30, 33, 20]]

data.sort_by { |x| [-x[1], -x[2], -x[3]] } # 中国排序方法，按金/银/铜牌数
data.sort_by { |x| -(x[1] + x[2] + x[3]) } # 美国排序方法，按奖牌总数
第二个，奖牌统计:

data.select { |x| x[1] &gt; 35 } # 金牌数超过35的国家
data.select { |x| x[1] + x[2] + x[3] &gt; 100 } # 奖牌总数超过100的国家
哪个更简洁，一目了然了吧。

daqing 12楼, 于23小时前回复 原来大家都在回复。。等我写出来才发现。

daqing 13楼, 于23小时前回复 #10楼 @skandhas 看了你的方法，才想到，select是更直接的做法。collect方法会包含nil值。

reus 14楼, 于23小时前回复 Why I Hate Advocacy
<a href="http://www.perl.com/pub/2000/12/advocacy.html">http://www.perl.com/pub/2000/12/advocacy.html</a>

gaicitadie 15楼, 于23小时前回复 总统选举投票，初步唱票记录：

['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
根据唱票记录统计每人的票数并按从多到少排序

&gt;&gt;&gt; l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
&gt;&gt;&gt; sorted(set([(i, l.count(i)) for i in l]), key=lambda x:-x[1])
[('Jim', 4), ('bush', 2), ('obama', 1)]
clearJiang 16楼, 于23小时前回复 #15楼 @gaicitadie 不如直接用collections.Counter

gaicitadie 17楼, 于23小时前回复 #16楼 @clearJiang 低版本没有collections

daqing 18楼, 于23小时前回复 总统选举投票

l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
l.uniq.collect { |x| [x, l.count(x)] }
=&gt; [["Jim", 4], ["bush", 2], ["obama", 1]]
skandhas 19楼, 于22小时前回复 #15楼 @gaicitadie
根据唱票记录统计每人的票数并按从多到少排序:

l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
l.group_by{|i| i}.map{|k,v| [k,v.length] }
quakewang 20楼, 于22小时前回复 python要和ruby比 文件、字符操作或者数组、Hash操作的便利性绝对完败，要砸场还不如在性能上一棍子打死ruby。

bony 21楼, 于22小时前回复 这样的帖子应该多一点。长知识。@skandhas cool.

quakewang 22楼, 于22小时前回复 #15楼 @gaicitadie

['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama'].inject(Hash.new(0)) {|h, e| h[e] += 1; h}.sort_by{|e| -e[1]}
daqing 23楼, 于22小时前回复 说实话，Python的lambda匿名函数，跟Ruby的Block相比，从书写上就败了。

gaicitadie 24楼, 于22小时前回复 随机设置验证码的4个字符(不包括图片处理部分)

&gt;&gt;&gt; import random
&gt;&gt;&gt; s = 'ABCDEFGHIJKLMNPRSTUVWXYZ'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'EXSG'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'TGYN'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'MEYP'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'TGIF'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'JDWF'
quakewang 25楼, 于22小时前回复 #24楼 @gaicitadie

('A'..'Z').to_a.sample(4).join
reus 26楼, 于22小时前回复 #15楼 @gaicitadie 你这个算法是O(n ^ 2)的，应该用reduce

def stat(acc, x):
  acc.setdefault(x, 0)
  acc[x] += 1
  return acc
sorted(reduce(stat,
  ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama'], {}).iteritems(),
    key = lambda x: -x[1])
huyong36 27楼, 于22小时前回复 @skandhas cool,加上个排序。

gaicitadie 28楼, 于22小时前回复 #26楼 @reus reduce不如列表解析快，虽然list.count会重复统计

skandhas 29楼, 于22小时前回复 #27楼 @huyong36
对，是忘了排序

l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
l.group_by{|i| i}.map{|k,v| [k,v.length] }.sort_by{|name,count| -count }
huacnlee 30楼, 于22小时前回复 风格不同而已，用起来都是一样方便。这个就是让我喜欢 Python 和 Ruby 的原因之一。

reus 31楼, 于22小时前回复 #28楼 @gaicitadie
就是慢在count调用上，for i in l遍历数组，且每个元素又再count遍历一次，O(n ^ 2)
reduce只需要遍历一次，O(n)
不信可以测试下

huyong36 32楼, 于22小时前回复 这帖应该是捧场帖,我喜欢这样的学习。

raecoo 33楼, 于22小时前回复 受用

hysios 34楼, 于21小时前回复 •字符串查找
# python
&gt;&gt;&gt; '11ab1111ab111ac11111'.count('ab')
2
# Ruby
ruby-1.9.2-p290 &gt;   '11ab111123ab111ac11111'.count 'ab', 'b'
2
hysios 35楼, 于21小时前回复 •奖牌排序
# python
&gt;&gt;&gt; sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:(-x[1],-x[2],-x[3]))
[('china', 37, 26, 11), ('russia', 30, 33, 20), ('usa', 30, 22, 50)]
# ruby
ruby-1.9.2-p290 &gt; [['china',37,26,11], ['usa',30,22,50],['russia',30,33,20]].sort_by {|name,j,y,t| [-j,-y,-t] }
 =&gt; [["china", 37, 26, 11], ["russia", 30, 33, 20], ["usa", 30, 22, 50]]
hysios 36楼, 于21小时前回复 •奖牌统计
# python
&gt;&gt;&gt; sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:-(x[1]+x[2]+x[3]))
[('usa', 30, 22, 50), ('russia', 30, 33, 20), ('china', 37, 26, 11)]
# ruby
ruby-1.9.2-p290 &gt; [['china',37,26,11], ['usa',30,22,50],['russia',30,33,20]].sort_by {|name,j,y,t| [-j + -y + -t] }
 =&gt; [["usa", 30, 22, 50], ["russia", 30, 33, 20], ["china", 37, 26, 11]]
kfll 37楼, 于21小时前回复 捧场..
js:

'11ab1111ab111ac11111'.match(/ab/g).length;
'11ab1111ab111ac11111'.split('ab').length - 1;
中式排名：

[[37, 26, 11], [30, 22, 50], [30, 33, 20]].sort().reverse();
hysios 38楼, 于21小时前回复 总统选举投票，初步唱票记录：

# ruby
&gt;&gt;&gt; l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
&gt;&gt;&gt; sorted(set([(i, l.count(i)) for i in l]), key=lambda x:-x[1])
[('Jim', 4), ('bush', 2), ('obama', 1)]
# ruby
ruby-1.9.2-p290 &gt;  ['bush','Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama'].each_with_object({}) {|name,s| s[name] = s.fetch(name,0) + 1 }.sort
 =&gt; [["Jim", 4], ["bush", 3], ["obama", 1]]
huyong36 39楼, 于21小时前回复 #34楼 @hysios

'11ab111123ab111ac11111'.count 'ab', 'b'
这样不对吧...这样只是找出来字符串里出现b的次数。

irb(main):106:0&gt; '11ab111123ab111ac11111b'.count 'ab', 'b'
=&gt; 3
hysios 40楼, 于21小时前回复 @huyong36 thx count是没办法实现的, 别的方法也不错

huyong36 41楼, 于20小时前回复 #40楼 @hysios 恩,请教

irb(main):115:0&gt; '11ab111123ab111c11111'.count  'a'
=&gt; 2
irb(main):114:0&gt; '11ab111123ab111c11111'.count  'ab'
=&gt; 4
字符可以统计,为什么字符串不能。。

jhjguxin 42楼, 于20小时前回复 @huyong36
count([other_str]+) → fixnum click to toggle source
Each other_str parameter defines a set of characters to count. The intersection of these sets defines the characters to count in str. Any other_str that starts with a caret (^) is negated. The sequence c1–c2 means all characters between c1 and c2.

Guest 43楼, 于20小时前回复 gaicitadie = [['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].tap do |man|
  def man.make_self(&amp;process); process.call self; end
  def man.become_egghead
    `python -c "print( sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:(-x[1],-x[2],-x[3])) )"`
  end
  def man.glow_up
    dont_be_shy = true
    unless self.respond_to? :more_elegant, dont_be_shy
      def self.more_elegant
        self.sort_by { |country, glods, silvers, bronzes| [-glods,-silvers,-bronzes] }
      end
    end
    if self.respond_to? :become_egghead
      class &lt;&lt; self; remove_method :become_egghead; end
    end
    self
  end
end
gaicitadie.make_self &amp;:become_egghead
gaicitadie.glow_up.make_self &amp;:more_elegant
geekontheway 44楼, 于20小时前回复 #41楼 @huyong36 ruby的count 统计的是字符的数量 所以'11ab111123ab111c11111'.count 'ab'等同于'11ab111123ab111c11111'.count 'a' + '11ab111123ab111c11111'.count 'b'

jhjguxin 45楼, 于20小时前回复 简而言之就是 取每一个字符的count的交集

huyong36 46楼, 于20小时前回复 @geekontheway @jhjguxin 3Q...

hysios 47楼, 于20小时前回复 #41楼 @huyong36 count 是统计所有的字符,并不会把参数当成字符串处理

FenRagwort 48楼, 于17小时前回复 合并两个字典/哈希，重复的项目，两个值相加

hash1.merge(hash2) {|dupkey,val1,val2| val1 + val2 }
楼主来个Python的写法？

hhuai 49楼, 于16小时前回复 method_missing, 楼主来个？？

gaicitadie 50楼, 于14小时前回复 #48楼 @FenRagwort ，这个暂时只想到了普通方法

for k,v in hash2.items():
    if k in hash1:
        hash1[k] += v
    else:
        hash1.setdefault(k,v)
zw963 51楼, 于12小时前回复 #19楼 @skandhas

的确酷, 不说说实在的. group_by用来做这个, 真是有点大才小用了.

reus 52楼, 于12小时前回复 #49楼 @hhuai

class Foo:
  def __getattr__(self, name):
    def _foo(*arg, **kwargs):
      return self.method_missing(name, *arg, **kwargs)
    return _foo

  def method_missing(self, name, *args, **kwargs):
    print name, args, kwargs

a = Foo()
a.foo('bar', baz = 'baz')

&nbsp;

huacnlee 1楼, 于24小时前回复 irb&gt; '11ab1111ab111ac11111'.scan("ab").count
2
ywencn 2楼, 于24小时前回复 1.9.2p290 :001 &gt;  '11ab1111ab111ac11111'.count('ab')
 =&gt; 5
楼主想表达什么？

ywencn 3楼, 于24小时前回复 哎呀。。。怎么python和ruby的count还不一样，哈哈

huacnlee 4楼, 于24小时前回复 Ruby 的 "".count 统计的是后面所有的字符

dreamrise 5楼, 于24小时前回复 貌似_who还写过一个python与ruby转换的程序？

gaicitadie 6楼, 于23小时前回复 奥运奖牌榜：
国家 金牌数 银牌数 铜牌数
china 37 26 11
usa 30 22 50
russia 30 33 20

中国习惯上先按金牌数排名，金牌数一样的按银牌数再排，如果银牌数再一样就按铜牌数排：

&gt;&gt;&gt; sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:(-x[1],-x[2],-x[3]))
[('china', 37, 26, 11), ('russia', 30, 33, 20), ('usa', 30, 22, 50)]
美国习惯上金牌银牌铜牌都是奖牌，所以按奖牌总数排序：

&gt;&gt;&gt; sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:-(x[1]+x[2]+x[3]))
[('usa', 30, 22, 50), ('russia', 30, 33, 20), ('china', 37, 26, 11)]
python的排序达到了类似SQL查询的能力，只需要告诉它排序的条件就可以了，python为数据而生

gaicitadie 7楼, 于23小时前回复 上面的例子是python模拟SQL的order by功能，下面的例子用python模拟SQL的where条件查询

统计金牌数超过35的国家：

&gt;&gt;&gt; [x for x in [('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)] if x[1]&gt;35]
[('china', 37, 26, 11)]
统计奖牌总数超过100的国家：

&gt;&gt;&gt; [x for x in [('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)] if x[1]+x[2]+x[3]&gt;100]
[('usa', 30, 22, 50)]
huyong36 8楼, 于23小时前回复 @gaicitadie ruby是

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].select{|x| x[1] &gt; 35}
[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].select{|x| x[1] + x[2] + x[3] &gt; 100}
quakewang 9楼, 于23小时前回复 #6楼 @gaicitadie
order by 的ruby代码

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].sort_by{|m| [-m[1], -m[2], -m[3]]}
[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].sort_by{|m| -(m[1] + m[2] + m[3])]}
skandhas 10楼, 于23小时前回复 从楼主的例子直接翻译到Ruby
1 中国习惯上先按金牌数排名，金牌数一样的按银牌数再排，如果银牌数再一样就按铜牌数排：

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].sort_by{|x| [-x[1],-x[2],-x[3]]}
2 美国习惯上金牌银牌铜牌都是奖牌，所以按奖牌总数排序：

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].sort_by{|x| -(x[1]+x[2]+x[3])}
3 统计金牌数超过35的国家：

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].select{|x| x[1] &gt;35}
4 统计奖牌总数超过100的国家：

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].select{|x| x[1]+x[2]+x[3] &gt; 100}
这两个语言都挺类似，我觉得ruby的select更直观。

另 楼主这个帖子想表达什么？没看出什么来。如果说只通过sorted就说明python是为数据而生的话，那ruby不也是吗。哈哈

daqing 11楼, 于23小时前回复 我来写个Ruby版本的。

第一个，奖牌排序:

data = [[:china, 27, 26, 11], [:usa, 20, 22, 50], [:russia, 30, 33, 20]]

data.sort_by { |x| [-x[1], -x[2], -x[3]] } # 中国排序方法，按金/银/铜牌数
data.sort_by { |x| -(x[1] + x[2] + x[3]) } # 美国排序方法，按奖牌总数
第二个，奖牌统计:

data.select { |x| x[1] &gt; 35 } # 金牌数超过35的国家
data.select { |x| x[1] + x[2] + x[3] &gt; 100 } # 奖牌总数超过100的国家
哪个更简洁，一目了然了吧。

daqing 12楼, 于23小时前回复 原来大家都在回复。。等我写出来才发现。

daqing 13楼, 于23小时前回复 #10楼 @skandhas 看了你的方法，才想到，select是更直接的做法。collect方法会包含nil值。

reus 14楼, 于23小时前回复 Why I Hate Advocacy
<a href="http://www.perl.com/pub/2000/12/advocacy.html">http://www.perl.com/pub/2000/12/advocacy.html</a>

gaicitadie 15楼, 于23小时前回复 总统选举投票，初步唱票记录：

['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
根据唱票记录统计每人的票数并按从多到少排序

&gt;&gt;&gt; l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
&gt;&gt;&gt; sorted(set([(i, l.count(i)) for i in l]), key=lambda x:-x[1])
[('Jim', 4), ('bush', 2), ('obama', 1)]
clearJiang 16楼, 于23小时前回复 #15楼 @gaicitadie 不如直接用collections.Counter

gaicitadie 17楼, 于23小时前回复 #16楼 @clearJiang 低版本没有collections

daqing 18楼, 于23小时前回复 总统选举投票

l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
l.uniq.collect { |x| [x, l.count(x)] }
=&gt; [["Jim", 4], ["bush", 2], ["obama", 1]]
skandhas 19楼, 于22小时前回复 #15楼 @gaicitadie
根据唱票记录统计每人的票数并按从多到少排序:

l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
l.group_by{|i| i}.map{|k,v| [k,v.length] }
quakewang 20楼, 于22小时前回复 python要和ruby比 文件、字符操作或者数组、Hash操作的便利性绝对完败，要砸场还不如在性能上一棍子打死ruby。

bony 21楼, 于22小时前回复 这样的帖子应该多一点。长知识。@skandhas cool.

quakewang 22楼, 于22小时前回复 #15楼 @gaicitadie

['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama'].inject(Hash.new(0)) {|h, e| h[e] += 1; h}.sort_by{|e| -e[1]}
daqing 23楼, 于22小时前回复 说实话，Python的lambda匿名函数，跟Ruby的Block相比，从书写上就败了。

gaicitadie 24楼, 于22小时前回复 随机设置验证码的4个字符(不包括图片处理部分)

&gt;&gt;&gt; import random
&gt;&gt;&gt; s = 'ABCDEFGHIJKLMNPRSTUVWXYZ'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'EXSG'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'TGYN'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'MEYP'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'TGIF'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'JDWF'
quakewang 25楼, 于22小时前回复 #24楼 @gaicitadie

('A'..'Z').to_a.sample(4).join
reus 26楼, 于22小时前回复 #15楼 @gaicitadie 你这个算法是O(n ^ 2)的，应该用reduce

def stat(acc, x):
  acc.setdefault(x, 0)
  acc[x] += 1
  return acc
sorted(reduce(stat,
  ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama'], {}).iteritems(),
    key = lambda x: -x[1])
huyong36 27楼, 于22小时前回复 @skandhas cool,加上个排序。

gaicitadie 28楼, 于22小时前回复 #26楼 @reus reduce不如列表解析快，虽然list.count会重复统计

skandhas 29楼, 于22小时前回复 #27楼 @huyong36
对，是忘了排序

l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
l.group_by{|i| i}.map{|k,v| [k,v.length] }.sort_by{|name,count| -count }
huacnlee 30楼, 于22小时前回复 风格不同而已，用起来都是一样方便。这个就是让我喜欢 Python 和 Ruby 的原因之一。

reus 31楼, 于22小时前回复 #28楼 @gaicitadie
就是慢在count调用上，for i in l遍历数组，且每个元素又再count遍历一次，O(n ^ 2)
reduce只需要遍历一次，O(n)
不信可以测试下

huyong36 32楼, 于22小时前回复 这帖应该是捧场帖,我喜欢这样的学习。

raecoo 33楼, 于22小时前回复 受用

hysios 34楼, 于21小时前回复 •字符串查找
# python
&gt;&gt;&gt; '11ab1111ab111ac11111'.count('ab')
2
# Ruby
ruby-1.9.2-p290 &gt;   '11ab111123ab111ac11111'.count 'ab', 'b'
2
hysios 35楼, 于21小时前回复 •奖牌排序
# python
&gt;&gt;&gt; sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:(-x[1],-x[2],-x[3]))
[('china', 37, 26, 11), ('russia', 30, 33, 20), ('usa', 30, 22, 50)]
# ruby
ruby-1.9.2-p290 &gt; [['china',37,26,11], ['usa',30,22,50],['russia',30,33,20]].sort_by {|name,j,y,t| [-j,-y,-t] }
 =&gt; [["china", 37, 26, 11], ["russia", 30, 33, 20], ["usa", 30, 22, 50]]
hysios 36楼, 于21小时前回复 •奖牌统计
# python
&gt;&gt;&gt; sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:-(x[1]+x[2]+x[3]))
[('usa', 30, 22, 50), ('russia', 30, 33, 20), ('china', 37, 26, 11)]
# ruby
ruby-1.9.2-p290 &gt; [['china',37,26,11], ['usa',30,22,50],['russia',30,33,20]].sort_by {|name,j,y,t| [-j + -y + -t] }
 =&gt; [["usa", 30, 22, 50], ["russia", 30, 33, 20], ["china", 37, 26, 11]]
kfll 37楼, 于21小时前回复 捧场..
js:

'11ab1111ab111ac11111'.match(/ab/g).length;
'11ab1111ab111ac11111'.split('ab').length - 1;
中式排名：

[[37, 26, 11], [30, 22, 50], [30, 33, 20]].sort().reverse();
hysios 38楼, 于21小时前回复 总统选举投票，初步唱票记录：

# ruby
&gt;&gt;&gt; l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
&gt;&gt;&gt; sorted(set([(i, l.count(i)) for i in l]), key=lambda x:-x[1])
[('Jim', 4), ('bush', 2), ('obama', 1)]
# ruby
ruby-1.9.2-p290 &gt;  ['bush','Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama'].each_with_object({}) {|name,s| s[name] = s.fetch(name,0) + 1 }.sort
 =&gt; [["Jim", 4], ["bush", 3], ["obama", 1]]
huyong36 39楼, 于21小时前回复 #34楼 @hysios

'11ab111123ab111ac11111'.count 'ab', 'b'
这样不对吧...这样只是找出来字符串里出现b的次数。

irb(main):106:0&gt; '11ab111123ab111ac11111b'.count 'ab', 'b'
=&gt; 3
hysios 40楼, 于21小时前回复 @huyong36 thx count是没办法实现的, 别的方法也不错

huyong36 41楼, 于20小时前回复 #40楼 @hysios 恩,请教

irb(main):115:0&gt; '11ab111123ab111c11111'.count  'a'
=&gt; 2
irb(main):114:0&gt; '11ab111123ab111c11111'.count  'ab'
=&gt; 4
字符可以统计,为什么字符串不能。。

jhjguxin 42楼, 于20小时前回复 @huyong36
count([other_str]+) → fixnum click to toggle source
Each other_str parameter defines a set of characters to count. The intersection of these sets defines the characters to count in str. Any other_str that starts with a caret (^) is negated. The sequence c1–c2 means all characters between c1 and c2.

Guest 43楼, 于20小时前回复 gaicitadie = [['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].tap do |man|
  def man.make_self(&amp;process); process.call self; end
  def man.become_egghead
    `python -c "print( sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:(-x[1],-x[2],-x[3])) )"`
  end
  def man.glow_up
    dont_be_shy = true
    unless self.respond_to? :more_elegant, dont_be_shy
      def self.more_elegant
        self.sort_by { |country, glods, silvers, bronzes| [-glods,-silvers,-bronzes] }
      end
    end
    if self.respond_to? :become_egghead
      class &lt;&lt; self; remove_method :become_egghead; end
    end
    self
  end
end
gaicitadie.make_self &amp;:become_egghead
gaicitadie.glow_up.make_self &amp;:more_elegant
geekontheway 44楼, 于20小时前回复 #41楼 @huyong36 ruby的count 统计的是字符的数量 所以'11ab111123ab111c11111'.count 'ab'等同于'11ab111123ab111c11111'.count 'a' + '11ab111123ab111c11111'.count 'b'

jhjguxin 45楼, 于20小时前回复 简而言之就是 取每一个字符的count的交集

huyong36 46楼, 于20小时前回复 @geekontheway @jhjguxin 3Q...

hysios 47楼, 于20小时前回复 #41楼 @huyong36 count 是统计所有的字符,并不会把参数当成字符串处理

FenRagwort 48楼, 于17小时前回复 合并两个字典/哈希，重复的项目，两个值相加

hash1.merge(hash2) {|dupkey,val1,val2| val1 + val2 }
楼主来个Python的写法？

hhuai 49楼, 于16小时前回复 method_missing, 楼主来个？？

gaicitadie 50楼, 于14小时前回复 #48楼 @FenRagwort ，这个暂时只想到了普通方法

for k,v in hash2.items():
    if k in hash1:
        hash1[k] += v
    else:
        hash1.setdefault(k,v)
zw963 51楼, 于12小时前回复 #19楼 @skandhas

的确酷, 不说说实在的. group_by用来做这个, 真是有点大才小用了.

reus 52楼, 于12小时前回复 #49楼 @hhuai

class Foo:
  def __getattr__(self, name):
    def _foo(*arg, **kwargs):
      return self.method_missing(name, *arg, **kwargs)
    return _foo

  def method_missing(self, name, *args, **kwargs):
    print name, args, kwargs

a = Foo()
a.foo('bar', baz = 'baz')

&nbsp;

huacnlee 1楼, 于24小时前回复 irb&gt; '11ab1111ab111ac11111'.scan("ab").count
2
ywencn 2楼, 于24小时前回复 1.9.2p290 :001 &gt;  '11ab1111ab111ac11111'.count('ab')
 =&gt; 5
楼主想表达什么？

ywencn 3楼, 于24小时前回复 哎呀。。。怎么python和ruby的count还不一样，哈哈

huacnlee 4楼, 于24小时前回复 Ruby 的 "".count 统计的是后面所有的字符

dreamrise 5楼, 于24小时前回复 貌似_who还写过一个python与ruby转换的程序？

gaicitadie 6楼, 于23小时前回复 奥运奖牌榜：
国家 金牌数 银牌数 铜牌数
china 37 26 11
usa 30 22 50
russia 30 33 20

中国习惯上先按金牌数排名，金牌数一样的按银牌数再排，如果银牌数再一样就按铜牌数排：

&gt;&gt;&gt; sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:(-x[1],-x[2],-x[3]))
[('china', 37, 26, 11), ('russia', 30, 33, 20), ('usa', 30, 22, 50)]
美国习惯上金牌银牌铜牌都是奖牌，所以按奖牌总数排序：

&gt;&gt;&gt; sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:-(x[1]+x[2]+x[3]))
[('usa', 30, 22, 50), ('russia', 30, 33, 20), ('china', 37, 26, 11)]
python的排序达到了类似SQL查询的能力，只需要告诉它排序的条件就可以了，python为数据而生

gaicitadie 7楼, 于23小时前回复 上面的例子是python模拟SQL的order by功能，下面的例子用python模拟SQL的where条件查询

统计金牌数超过35的国家：

&gt;&gt;&gt; [x for x in [('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)] if x[1]&gt;35]
[('china', 37, 26, 11)]
统计奖牌总数超过100的国家：

&gt;&gt;&gt; [x for x in [('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)] if x[1]+x[2]+x[3]&gt;100]
[('usa', 30, 22, 50)]
huyong36 8楼, 于23小时前回复 @gaicitadie ruby是

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].select{|x| x[1] &gt; 35}
[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].select{|x| x[1] + x[2] + x[3] &gt; 100}
quakewang 9楼, 于23小时前回复 #6楼 @gaicitadie
order by 的ruby代码

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].sort_by{|m| [-m[1], -m[2], -m[3]]}
[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].sort_by{|m| -(m[1] + m[2] + m[3])]}
skandhas 10楼, 于23小时前回复 从楼主的例子直接翻译到Ruby
1 中国习惯上先按金牌数排名，金牌数一样的按银牌数再排，如果银牌数再一样就按铜牌数排：

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].sort_by{|x| [-x[1],-x[2],-x[3]]}
2 美国习惯上金牌银牌铜牌都是奖牌，所以按奖牌总数排序：

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].sort_by{|x| -(x[1]+x[2]+x[3])}
3 统计金牌数超过35的国家：

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].select{|x| x[1] &gt;35}
4 统计奖牌总数超过100的国家：

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].select{|x| x[1]+x[2]+x[3] &gt; 100}
这两个语言都挺类似，我觉得ruby的select更直观。

另 楼主这个帖子想表达什么？没看出什么来。如果说只通过sorted就说明python是为数据而生的话，那ruby不也是吗。哈哈

daqing 11楼, 于23小时前回复 我来写个Ruby版本的。

第一个，奖牌排序:

data = [[:china, 27, 26, 11], [:usa, 20, 22, 50], [:russia, 30, 33, 20]]

data.sort_by { |x| [-x[1], -x[2], -x[3]] } # 中国排序方法，按金/银/铜牌数
data.sort_by { |x| -(x[1] + x[2] + x[3]) } # 美国排序方法，按奖牌总数
第二个，奖牌统计:

data.select { |x| x[1] &gt; 35 } # 金牌数超过35的国家
data.select { |x| x[1] + x[2] + x[3] &gt; 100 } # 奖牌总数超过100的国家
哪个更简洁，一目了然了吧。

daqing 12楼, 于23小时前回复 原来大家都在回复。。等我写出来才发现。

daqing 13楼, 于23小时前回复 #10楼 @skandhas 看了你的方法，才想到，select是更直接的做法。collect方法会包含nil值。

reus 14楼, 于23小时前回复 Why I Hate Advocacy
<a href="http://www.perl.com/pub/2000/12/advocacy.html">http://www.perl.com/pub/2000/12/advocacy.html</a>

gaicitadie 15楼, 于23小时前回复 总统选举投票，初步唱票记录：

['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
根据唱票记录统计每人的票数并按从多到少排序

&gt;&gt;&gt; l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
&gt;&gt;&gt; sorted(set([(i, l.count(i)) for i in l]), key=lambda x:-x[1])
[('Jim', 4), ('bush', 2), ('obama', 1)]
clearJiang 16楼, 于23小时前回复 #15楼 @gaicitadie 不如直接用collections.Counter

gaicitadie 17楼, 于23小时前回复 #16楼 @clearJiang 低版本没有collections

daqing 18楼, 于23小时前回复 总统选举投票

l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
l.uniq.collect { |x| [x, l.count(x)] }
=&gt; [["Jim", 4], ["bush", 2], ["obama", 1]]
skandhas 19楼, 于22小时前回复 #15楼 @gaicitadie
根据唱票记录统计每人的票数并按从多到少排序:

l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
l.group_by{|i| i}.map{|k,v| [k,v.length] }
quakewang 20楼, 于22小时前回复 python要和ruby比 文件、字符操作或者数组、Hash操作的便利性绝对完败，要砸场还不如在性能上一棍子打死ruby。

bony 21楼, 于22小时前回复 这样的帖子应该多一点。长知识。@skandhas cool.

quakewang 22楼, 于22小时前回复 #15楼 @gaicitadie

['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama'].inject(Hash.new(0)) {|h, e| h[e] += 1; h}.sort_by{|e| -e[1]}
daqing 23楼, 于22小时前回复 说实话，Python的lambda匿名函数，跟Ruby的Block相比，从书写上就败了。

gaicitadie 24楼, 于22小时前回复 随机设置验证码的4个字符(不包括图片处理部分)

&gt;&gt;&gt; import random
&gt;&gt;&gt; s = 'ABCDEFGHIJKLMNPRSTUVWXYZ'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'EXSG'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'TGYN'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'MEYP'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'TGIF'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'JDWF'
quakewang 25楼, 于22小时前回复 #24楼 @gaicitadie

('A'..'Z').to_a.sample(4).join
reus 26楼, 于22小时前回复 #15楼 @gaicitadie 你这个算法是O(n ^ 2)的，应该用reduce

def stat(acc, x):
  acc.setdefault(x, 0)
  acc[x] += 1
  return acc
sorted(reduce(stat,
  ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama'], {}).iteritems(),
    key = lambda x: -x[1])
huyong36 27楼, 于22小时前回复 @skandhas cool,加上个排序。

gaicitadie 28楼, 于22小时前回复 #26楼 @reus reduce不如列表解析快，虽然list.count会重复统计

skandhas 29楼, 于22小时前回复 #27楼 @huyong36
对，是忘了排序

l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
l.group_by{|i| i}.map{|k,v| [k,v.length] }.sort_by{|name,count| -count }
huacnlee 30楼, 于22小时前回复 风格不同而已，用起来都是一样方便。这个就是让我喜欢 Python 和 Ruby 的原因之一。

reus 31楼, 于22小时前回复 #28楼 @gaicitadie
就是慢在count调用上，for i in l遍历数组，且每个元素又再count遍历一次，O(n ^ 2)
reduce只需要遍历一次，O(n)
不信可以测试下

huyong36 32楼, 于22小时前回复 这帖应该是捧场帖,我喜欢这样的学习。

raecoo 33楼, 于22小时前回复 受用

hysios 34楼, 于21小时前回复 •字符串查找
# python
&gt;&gt;&gt; '11ab1111ab111ac11111'.count('ab')
2
# Ruby
ruby-1.9.2-p290 &gt;   '11ab111123ab111ac11111'.count 'ab', 'b'
2
hysios 35楼, 于21小时前回复 •奖牌排序
# python
&gt;&gt;&gt; sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:(-x[1],-x[2],-x[3]))
[('china', 37, 26, 11), ('russia', 30, 33, 20), ('usa', 30, 22, 50)]
# ruby
ruby-1.9.2-p290 &gt; [['china',37,26,11], ['usa',30,22,50],['russia',30,33,20]].sort_by {|name,j,y,t| [-j,-y,-t] }
 =&gt; [["china", 37, 26, 11], ["russia", 30, 33, 20], ["usa", 30, 22, 50]]
hysios 36楼, 于21小时前回复 •奖牌统计
# python
&gt;&gt;&gt; sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:-(x[1]+x[2]+x[3]))
[('usa', 30, 22, 50), ('russia', 30, 33, 20), ('china', 37, 26, 11)]
# ruby
ruby-1.9.2-p290 &gt; [['china',37,26,11], ['usa',30,22,50],['russia',30,33,20]].sort_by {|name,j,y,t| [-j + -y + -t] }
 =&gt; [["usa", 30, 22, 50], ["russia", 30, 33, 20], ["china", 37, 26, 11]]
kfll 37楼, 于21小时前回复 捧场..
js:

'11ab1111ab111ac11111'.match(/ab/g).length;
'11ab1111ab111ac11111'.split('ab').length - 1;
中式排名：

[[37, 26, 11], [30, 22, 50], [30, 33, 20]].sort().reverse();
hysios 38楼, 于21小时前回复 总统选举投票，初步唱票记录：

# ruby
&gt;&gt;&gt; l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
&gt;&gt;&gt; sorted(set([(i, l.count(i)) for i in l]), key=lambda x:-x[1])
[('Jim', 4), ('bush', 2), ('obama', 1)]
# ruby
ruby-1.9.2-p290 &gt;  ['bush','Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama'].each_with_object({}) {|name,s| s[name] = s.fetch(name,0) + 1 }.sort
 =&gt; [["Jim", 4], ["bush", 3], ["obama", 1]]
huyong36 39楼, 于21小时前回复 #34楼 @hysios

'11ab111123ab111ac11111'.count 'ab', 'b'
这样不对吧...这样只是找出来字符串里出现b的次数。

irb(main):106:0&gt; '11ab111123ab111ac11111b'.count 'ab', 'b'
=&gt; 3
hysios 40楼, 于21小时前回复 @huyong36 thx count是没办法实现的, 别的方法也不错

huyong36 41楼, 于20小时前回复 #40楼 @hysios 恩,请教

irb(main):115:0&gt; '11ab111123ab111c11111'.count  'a'
=&gt; 2
irb(main):114:0&gt; '11ab111123ab111c11111'.count  'ab'
=&gt; 4
字符可以统计,为什么字符串不能。。

jhjguxin 42楼, 于20小时前回复 @huyong36
count([other_str]+) → fixnum click to toggle source
Each other_str parameter defines a set of characters to count. The intersection of these sets defines the characters to count in str. Any other_str that starts with a caret (^) is negated. The sequence c1–c2 means all characters between c1 and c2.

Guest 43楼, 于20小时前回复 gaicitadie = [['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].tap do |man|
  def man.make_self(&amp;process); process.call self; end
  def man.become_egghead
    `python -c "print( sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:(-x[1],-x[2],-x[3])) )"`
  end
  def man.glow_up
    dont_be_shy = true
    unless self.respond_to? :more_elegant, dont_be_shy
      def self.more_elegant
        self.sort_by { |country, glods, silvers, bronzes| [-glods,-silvers,-bronzes] }
      end
    end
    if self.respond_to? :become_egghead
      class &lt;&lt; self; remove_method :become_egghead; end
    end
    self
  end
end
gaicitadie.make_self &amp;:become_egghead
gaicitadie.glow_up.make_self &amp;:more_elegant
geekontheway 44楼, 于20小时前回复 #41楼 @huyong36 ruby的count 统计的是字符的数量 所以'11ab111123ab111c11111'.count 'ab'等同于'11ab111123ab111c11111'.count 'a' + '11ab111123ab111c11111'.count 'b'

jhjguxin 45楼, 于20小时前回复 简而言之就是 取每一个字符的count的交集

huyong36 46楼, 于20小时前回复 @geekontheway @jhjguxin 3Q...

hysios 47楼, 于20小时前回复 #41楼 @huyong36 count 是统计所有的字符,并不会把参数当成字符串处理

FenRagwort 48楼, 于17小时前回复 合并两个字典/哈希，重复的项目，两个值相加

hash1.merge(hash2) {|dupkey,val1,val2| val1 + val2 }
楼主来个Python的写法？

hhuai 49楼, 于16小时前回复 method_missing, 楼主来个？？

gaicitadie 50楼, 于14小时前回复 #48楼 @FenRagwort ，这个暂时只想到了普通方法

for k,v in hash2.items():
    if k in hash1:
        hash1[k] += v
    else:
        hash1.setdefault(k,v)
zw963 51楼, 于12小时前回复 #19楼 @skandhas

的确酷, 不说说实在的. group_by用来做这个, 真是有点大才小用了.

reus 52楼, 于12小时前回复 #49楼 @hhuai

class Foo:
  def __getattr__(self, name):
    def _foo(*arg, **kwargs):
      return self.method_missing(name, *arg, **kwargs)
    return _foo

  def method_missing(self, name, *args, **kwargs):
    print name, args, kwargs

a = Foo()
a.foo('bar', baz = 'baz')

&nbsp;

huacnlee 1楼, 于24小时前回复 irb&gt; '11ab1111ab111ac11111'.scan("ab").count
2
ywencn 2楼, 于24小时前回复 1.9.2p290 :001 &gt;  '11ab1111ab111ac11111'.count('ab')
 =&gt; 5
楼主想表达什么？

ywencn 3楼, 于24小时前回复 哎呀。。。怎么python和ruby的count还不一样，哈哈

huacnlee 4楼, 于24小时前回复 Ruby 的 "".count 统计的是后面所有的字符

dreamrise 5楼, 于24小时前回复 貌似_who还写过一个python与ruby转换的程序？

gaicitadie 6楼, 于23小时前回复 奥运奖牌榜：
国家 金牌数 银牌数 铜牌数
china 37 26 11
usa 30 22 50
russia 30 33 20

中国习惯上先按金牌数排名，金牌数一样的按银牌数再排，如果银牌数再一样就按铜牌数排：

&gt;&gt;&gt; sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:(-x[1],-x[2],-x[3]))
[('china', 37, 26, 11), ('russia', 30, 33, 20), ('usa', 30, 22, 50)]
美国习惯上金牌银牌铜牌都是奖牌，所以按奖牌总数排序：

&gt;&gt;&gt; sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:-(x[1]+x[2]+x[3]))
[('usa', 30, 22, 50), ('russia', 30, 33, 20), ('china', 37, 26, 11)]
python的排序达到了类似SQL查询的能力，只需要告诉它排序的条件就可以了，python为数据而生

gaicitadie 7楼, 于23小时前回复 上面的例子是python模拟SQL的order by功能，下面的例子用python模拟SQL的where条件查询

统计金牌数超过35的国家：

&gt;&gt;&gt; [x for x in [('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)] if x[1]&gt;35]
[('china', 37, 26, 11)]
统计奖牌总数超过100的国家：

&gt;&gt;&gt; [x for x in [('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)] if x[1]+x[2]+x[3]&gt;100]
[('usa', 30, 22, 50)]
huyong36 8楼, 于23小时前回复 @gaicitadie ruby是

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].select{|x| x[1] &gt; 35}
[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].select{|x| x[1] + x[2] + x[3] &gt; 100}
quakewang 9楼, 于23小时前回复 #6楼 @gaicitadie
order by 的ruby代码

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].sort_by{|m| [-m[1], -m[2], -m[3]]}
[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].sort_by{|m| -(m[1] + m[2] + m[3])]}
skandhas 10楼, 于23小时前回复 从楼主的例子直接翻译到Ruby
1 中国习惯上先按金牌数排名，金牌数一样的按银牌数再排，如果银牌数再一样就按铜牌数排：

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].sort_by{|x| [-x[1],-x[2],-x[3]]}
2 美国习惯上金牌银牌铜牌都是奖牌，所以按奖牌总数排序：

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].sort_by{|x| -(x[1]+x[2]+x[3])}
3 统计金牌数超过35的国家：

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].select{|x| x[1] &gt;35}
4 统计奖牌总数超过100的国家：

[['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].select{|x| x[1]+x[2]+x[3] &gt; 100}
这两个语言都挺类似，我觉得ruby的select更直观。

另 楼主这个帖子想表达什么？没看出什么来。如果说只通过sorted就说明python是为数据而生的话，那ruby不也是吗。哈哈

daqing 11楼, 于23小时前回复 我来写个Ruby版本的。

第一个，奖牌排序:

data = [[:china, 27, 26, 11], [:usa, 20, 22, 50], [:russia, 30, 33, 20]]

data.sort_by { |x| [-x[1], -x[2], -x[3]] } # 中国排序方法，按金/银/铜牌数
data.sort_by { |x| -(x[1] + x[2] + x[3]) } # 美国排序方法，按奖牌总数
第二个，奖牌统计:

data.select { |x| x[1] &gt; 35 } # 金牌数超过35的国家
data.select { |x| x[1] + x[2] + x[3] &gt; 100 } # 奖牌总数超过100的国家
哪个更简洁，一目了然了吧。

daqing 12楼, 于23小时前回复 原来大家都在回复。。等我写出来才发现。

daqing 13楼, 于23小时前回复 #10楼 @skandhas 看了你的方法，才想到，select是更直接的做法。collect方法会包含nil值。

reus 14楼, 于23小时前回复 Why I Hate Advocacy
<a href="http://www.perl.com/pub/2000/12/advocacy.html">http://www.perl.com/pub/2000/12/advocacy.html</a>

gaicitadie 15楼, 于23小时前回复 总统选举投票，初步唱票记录：

['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
根据唱票记录统计每人的票数并按从多到少排序

&gt;&gt;&gt; l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
&gt;&gt;&gt; sorted(set([(i, l.count(i)) for i in l]), key=lambda x:-x[1])
[('Jim', 4), ('bush', 2), ('obama', 1)]
clearJiang 16楼, 于23小时前回复 #15楼 @gaicitadie 不如直接用collections.Counter

gaicitadie 17楼, 于23小时前回复 #16楼 @clearJiang 低版本没有collections

daqing 18楼, 于23小时前回复 总统选举投票

l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
l.uniq.collect { |x| [x, l.count(x)] }
=&gt; [["Jim", 4], ["bush", 2], ["obama", 1]]
skandhas 19楼, 于22小时前回复 #15楼 @gaicitadie
根据唱票记录统计每人的票数并按从多到少排序:

l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
l.group_by{|i| i}.map{|k,v| [k,v.length] }
quakewang 20楼, 于22小时前回复 python要和ruby比 文件、字符操作或者数组、Hash操作的便利性绝对完败，要砸场还不如在性能上一棍子打死ruby。

bony 21楼, 于22小时前回复 这样的帖子应该多一点。长知识。@skandhas cool.

quakewang 22楼, 于22小时前回复 #15楼 @gaicitadie

['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama'].inject(Hash.new(0)) {|h, e| h[e] += 1; h}.sort_by{|e| -e[1]}
daqing 23楼, 于22小时前回复 说实话，Python的lambda匿名函数，跟Ruby的Block相比，从书写上就败了。

gaicitadie 24楼, 于22小时前回复 随机设置验证码的4个字符(不包括图片处理部分)

&gt;&gt;&gt; import random
&gt;&gt;&gt; s = 'ABCDEFGHIJKLMNPRSTUVWXYZ'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'EXSG'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'TGYN'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'MEYP'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'TGIF'
&gt;&gt;&gt; ''.join(random.sample((s),4))
'JDWF'
quakewang 25楼, 于22小时前回复 #24楼 @gaicitadie

('A'..'Z').to_a.sample(4).join
reus 26楼, 于22小时前回复 #15楼 @gaicitadie 你这个算法是O(n ^ 2)的，应该用reduce

def stat(acc, x):
  acc.setdefault(x, 0)
  acc[x] += 1
  return acc
sorted(reduce(stat,
  ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama'], {}).iteritems(),
    key = lambda x: -x[1])
huyong36 27楼, 于22小时前回复 @skandhas cool,加上个排序。

gaicitadie 28楼, 于22小时前回复 #26楼 @reus reduce不如列表解析快，虽然list.count会重复统计

skandhas 29楼, 于22小时前回复 #27楼 @huyong36
对，是忘了排序

l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
l.group_by{|i| i}.map{|k,v| [k,v.length] }.sort_by{|name,count| -count }
huacnlee 30楼, 于22小时前回复 风格不同而已，用起来都是一样方便。这个就是让我喜欢 Python 和 Ruby 的原因之一。

reus 31楼, 于22小时前回复 #28楼 @gaicitadie
就是慢在count调用上，for i in l遍历数组，且每个元素又再count遍历一次，O(n ^ 2)
reduce只需要遍历一次，O(n)
不信可以测试下

huyong36 32楼, 于22小时前回复 这帖应该是捧场帖,我喜欢这样的学习。

raecoo 33楼, 于22小时前回复 受用

hysios 34楼, 于21小时前回复 •字符串查找
# python
&gt;&gt;&gt; '11ab1111ab111ac11111'.count('ab')
2
# Ruby
ruby-1.9.2-p290 &gt;   '11ab111123ab111ac11111'.count 'ab', 'b'
2
hysios 35楼, 于21小时前回复 •奖牌排序
# python
&gt;&gt;&gt; sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:(-x[1],-x[2],-x[3]))
[('china', 37, 26, 11), ('russia', 30, 33, 20), ('usa', 30, 22, 50)]
# ruby
ruby-1.9.2-p290 &gt; [['china',37,26,11], ['usa',30,22,50],['russia',30,33,20]].sort_by {|name,j,y,t| [-j,-y,-t] }
 =&gt; [["china", 37, 26, 11], ["russia", 30, 33, 20], ["usa", 30, 22, 50]]
hysios 36楼, 于21小时前回复 •奖牌统计
# python
&gt;&gt;&gt; sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:-(x[1]+x[2]+x[3]))
[('usa', 30, 22, 50), ('russia', 30, 33, 20), ('china', 37, 26, 11)]
# ruby
ruby-1.9.2-p290 &gt; [['china',37,26,11], ['usa',30,22,50],['russia',30,33,20]].sort_by {|name,j,y,t| [-j + -y + -t] }
 =&gt; [["usa", 30, 22, 50], ["russia", 30, 33, 20], ["china", 37, 26, 11]]
kfll 37楼, 于21小时前回复 捧场..
js:

'11ab1111ab111ac11111'.match(/ab/g).length;
'11ab1111ab111ac11111'.split('ab').length - 1;
中式排名：

[[37, 26, 11], [30, 22, 50], [30, 33, 20]].sort().reverse();
hysios 38楼, 于21小时前回复 总统选举投票，初步唱票记录：

# ruby
&gt;&gt;&gt; l = ['Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama']
&gt;&gt;&gt; sorted(set([(i, l.count(i)) for i in l]), key=lambda x:-x[1])
[('Jim', 4), ('bush', 2), ('obama', 1)]
# ruby
ruby-1.9.2-p290 &gt;  ['bush','Jim', 'bush', 'Jim', 'Jim', 'Jim', 'bush', 'obama'].each_with_object({}) {|name,s| s[name] = s.fetch(name,0) + 1 }.sort
 =&gt; [["Jim", 4], ["bush", 3], ["obama", 1]]
huyong36 39楼, 于21小时前回复 #34楼 @hysios

'11ab111123ab111ac11111'.count 'ab', 'b'
这样不对吧...这样只是找出来字符串里出现b的次数。

irb(main):106:0&gt; '11ab111123ab111ac11111b'.count 'ab', 'b'
=&gt; 3
hysios 40楼, 于21小时前回复 @huyong36 thx count是没办法实现的, 别的方法也不错

huyong36 41楼, 于20小时前回复 #40楼 @hysios 恩,请教

irb(main):115:0&gt; '11ab111123ab111c11111'.count  'a'
=&gt; 2
irb(main):114:0&gt; '11ab111123ab111c11111'.count  'ab'
=&gt; 4
字符可以统计,为什么字符串不能。。

jhjguxin 42楼, 于20小时前回复 @huyong36
count([other_str]+) → fixnum click to toggle source
Each other_str parameter defines a set of characters to count. The intersection of these sets defines the characters to count in str. Any other_str that starts with a caret (^) is negated. The sequence c1–c2 means all characters between c1 and c2.

Guest 43楼, 于20小时前回复 gaicitadie = [['china',37,26,11], ['usa',30,22,50], ['russia',30,33,20]].tap do |man|
  def man.make_self(&amp;process); process.call self; end
  def man.become_egghead
    `python -c "print( sorted([('china',37,26,11), ('usa',30,22,50), ('russia',30,33,20)], key=lambda x:(-x[1],-x[2],-x[3])) )"`
  end
  def man.glow_up
    dont_be_shy = true
    unless self.respond_to? :more_elegant, dont_be_shy
      def self.more_elegant
        self.sort_by { |country, glods, silvers, bronzes| [-glods,-silvers,-bronzes] }
      end
    end
    if self.respond_to? :become_egghead
      class &lt;&lt; self; remove_method :become_egghead; end
    end
    self
  end
end
gaicitadie.make_self &amp;:become_egghead
gaicitadie.glow_up.make_self &amp;:more_elegant
geekontheway 44楼, 于20小时前回复 #41楼 @huyong36 ruby的count 统计的是字符的数量 所以'11ab111123ab111c11111'.count 'ab'等同于'11ab111123ab111c11111'.count 'a' + '11ab111123ab111c11111'.count 'b'

jhjguxin 45楼, 于20小时前回复 简而言之就是 取每一个字符的count的交集

huyong36 46楼, 于20小时前回复 @geekontheway @jhjguxin 3Q...

hysios 47楼, 于20小时前回复 #41楼 @huyong36 count 是统计所有的字符,并不会把参数当成字符串处理

FenRagwort 48楼, 于17小时前回复 合并两个字典/哈希，重复的项目，两个值相加

hash1.merge(hash2) {|dupkey,val1,val2| val1 + val2 }
楼主来个Python的写法？

hhuai 49楼, 于16小时前回复 method_missing, 楼主来个？？

gaicitadie 50楼, 于14小时前回复 #48楼 @FenRagwort ，这个暂时只想到了普通方法

for k,v in hash2.items():
    if k in hash1:
        hash1[k] += v
    else:
        hash1.setdefault(k,v)
zw963 51楼, 于12小时前回复 #19楼 @skandhas

的确酷, 不说说实在的. group_by用来做这个, 真是有点大才小用了.

reus 52楼, 于12小时前回复 #49楼 @hhuai

class Foo:
  def __getattr__(self, name):
    def _foo(*arg, **kwargs):
      return self.method_missing(name, *arg, **kwargs)
    return _foo

  def method_missing(self, name, *args, **kwargs):
    print name, args, kwargs

a = Foo()
a.foo('bar', baz = 'baz')

&nbsp;

Francis.J(864248765)  13:19:50
&gt;&gt;&gt; l=['a','a','b','b','b','c','c']

&gt;&gt;&gt; sorted(set([i for i in l]))
['a', 'b', 'c']
Francis.J(864248765)  13:20:01
这样还行
Francis.J(864248765)  13:21:15
但是感觉 没有 pop 省资源
GG(75865965)  13:26:39
cat cat source.txt |uniq

</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>326</wp:post_id>
		<wp:post_date>2012-03-20 13:48:55</wp:post_date>
		<wp:post_date_gmt>2012-03-20 05:48:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-ruby-geek-by-django%e7%a4%be%e5%8c%baand-ruby-china</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="ruby-china"><![CDATA[ruby-china]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[進階]使用 Facade Pattern 取代 Model Callbacks by xdite</title>
		<link></link>
		<pubDate>Tue, 20 Mar 2012 07:24:16 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=329</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>What is “callbacks”?</h2>
Rails 的 ActiveRecord 提供了相當方便的 callbacks，能讓開發者在寫 Controller 時，能夠寫出更加 DRY 的程式碼：
<ul>
	<li>before_crearte</li>
	<li>before_save</li>
	<li>after_create</li>
	<li>after_save</li>
	<li>…</li>
</ul>
在從前，在 Controller 裡面想要再 object 儲存之後 do_something，直觀的思路會是這樣：

class PostController
  def create
    @post = Post.new(params[:post])
    @post.save
    @post.do_something
    redirect_to posts_path
  end
end 

當時的最佳模式：通常是建議開發者改用 callbacks 或者是 Observer 模式實作。避免 controller 的髒亂。
<ul>
	<li>callbacks : after_create</li>
</ul>
或者是使用 Observer

class PostController &lt; ApplicationController
  def create
    @post = Post.new(params[:post])
    @post.save
    redirect_to posts_path
  end
end
class PostObserver &lt; ActiveRecord::Observer
  def after_create(post)
    post.do_something
  end
end
class Post &lt; ActiveRecord::Base
  protected
  def do_something
  end
end
<h2>使用 callbacks 所產生的問題</h2>
callbacks 雖然很方便，但也產生一些其他的問題。若這個 do_something 是很輕量的 db update，那這個問題還好。但如果是很 heavy 的 hit_3rd_party_api 呢？

在幾個情形下，開發者會遇到不小的麻煩。
<ul>
	<li>Model 測試：每次在測試時都會被這個 3rd_party_api 整到，因為外部通訊很慢。</li>
	<li>do_something_api 是很 heavy 的操作：每次寫測試還是會被很慢的 db query 整到。</li>
	<li>do_something_api 是很輕微的 update：但是綁定 after_save 操作，在要掃描資料庫，做大規模的某欄位修改時，會不小心觸發到不希望引發的 callbacks，造成不必要的效能問題。</li>
</ul>
當然，開發者還是可以用其他招數去閃開：

比如說若綁定 after_save 。

可以在 do_somehting 內加入對 dirty object 的偵測，避免被觸發：

 def do_somthing
  # 資料存在，且變動的欄位包括 content
  if presisited? &amp;&amp; changed.include?("content")
    the_real_thing
  end
 end

 但這一招並不算理想，原因有幾：
<ol>
	<li>每次儲存還是需要被掃描一次，可能有效能問題。</li>
	<li>寫測試時還是會呼叫到可能不需要引發的 do_somehting。</li>
	<li>if xxx ＆＆ yyy 這個 condiction chain 可能會無限延伸下去。</li>
</ol>
 Facade Pattern

那麼要怎樣才能解決這個問題呢？其實我們應該用 Facade Pattern 解決這個問題。

設計模式裡面有一招 Facade Pattern，這一招其實是沒有被寫進 <a href="http://designpatternsinruby.com/">Design Pattern in Ruby</a> 中的。Russ Olson 有寫了<a href="http://designpatternsinruby.com/section02/facade.html">一篇文章</a>解釋沒有收錄的原因：因為在 Ruby 中，這一招太簡單太直觀，所以不想收錄 XDDD。但他還是在網站上提供當時寫的草稿，供人參考。
<h3>What is Facade Pattern?</h3>
Facade Pattern 的目的是「將複雜的介面簡化，將複雜與瑣碎的步驟封裝起來，對外開放簡單的介面，讓客戶端能夠藉由呼叫簡單的介面而完成原本複雜的程式演算。」（<a href="http://www.dotblogs.com.tw/jameswu/archive/2008/06/26/4382.aspx">來源</a>）

延伸閱讀: <a href="http://www.cnblogs.com/oomusou/archive/2007/04/24/725714.html">(原創) 我的Design Pattern之旅[5]：Facade Pattern (OO) (Design Pattern) (C/C++)</a>
<h3>實際舉例：</h3>
在上述的例子中，其實 do_something 有可能只會在 PostController 用到，而非所有的 model 操作都「需要」用到。所以我們 <strong>不應該將 do_somehting 丟進 callbacks（等於全域觸發），再一一寫 case 去閃避執行</strong>

與其寫在 callbacks 裡。我們更應該寫的是一個 Service Class 將這一系列複雜昂貴的行為包裝起來，以簡單的介面執行。
class PostController &lt; ApplicationController
  def create
  CreatePostService(params[:post])
  redirect_to posts_path
  end
 end
class CreatePostService
  def self.create(params)
    post = Post.new(params[:post])
    post.save
    post.do_something_a
    post.do_something_b
    post.do_something_c
  end
end  而在寫測試，只需要對 PostCreateService 這個商業邏輯 class 寫測試即可。而 PostController 和 Post Model 就不會被殃及到。
<h2>小結</h2>
不少開發者討厭測試的原因，不只是「因為」寫測試很麻煩的原因，「跑一輪測試超級久」也是讓大家很不爽的主因之一。

其實不是這些測試框架寫的爛造成「寫測試很麻煩」、「執行測試超級久」。而是另有其他因素。

許多資深開發者逐漸意識到，真正的主因是在於目前 Rails 的 model 的設計，耦合度太高了。只要沾到 db 就慢，偏偏 db 是世界的中心。只是測某些邏輯，搞到不小心觸發其他不需要測的東西。

ActiveRecord 的問題在於，讓開發者太誤以為 ORM = model。其實開發者真正要寫的測試應該是對商業邏輯的測試，不是對 db 進行測試。

所以才會出現了用 Facade Pattern 取代 callbacks 的手法。
<h2>其他</h2>
MVC 其實有其不足的部份。坦白說，Rails 也不是真正的 MVC，而是 <a href="http://andrzejonsoftware.blogspot.com/2011/09/rails-is-not-mvc.html">Model2</a>

目前 MVC 其實是不足的，演化下來，開發者會發現 User class 裡面會開始出現這些東西：
<ul>
	<li>current_user.buy_book(book)</li>
	<li>current_user.add_creadit_point(point)</li>
</ul>
這屬於 User 裡面應該放的 method 嗎？well，你也可以說適合，也可以說不適合。

適合的原因是：其實你也不知道應該放哪裡，這好像是 User 執行的事，跟他有關，那就放這裡好了！不然也不知道要擺哪裡。

不適合的原因是：這是一個「商業購買行為」。不是所有人都會購物啊。這應該是一個商業購買邏輯。但是….也不知道要放在哪啊。

一直到最近，James Copelin 提出了：<a href="http://en.wikipedia.org/wiki/Data,_Context,_and_Interaction">DCI</a> 去補充了現有的 MVC 的不足，才算勉強解決了目前浮現的這些問題。

DCI ，與本篇談到的 Facade Pattern 算是頗類似的手法。

有關於 DCI ( Data, Context, Interaction ) 的文章，我會在之後發表。我同時也推薦各位去看這方面的主題。這個方向應該會是 Rails 專案設計上未來演化的方向之一。

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>329</wp:post_id>
		<wp:post_date>2012-03-20 15:24:16</wp:post_date>
		<wp:post_date_gmt>2012-03-20 07:24:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%80%b2%e9%9a%8e%e4%bd%bf%e7%94%a8-facade-pattern-%e5%8f%96%e4%bb%a3-model-callbacks-by-xdite</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="callbacks"><![CDATA[Callbacks]]></category>
		<category domain="post_tag" nicename="facade"><![CDATA[Facade]]></category>
		<category domain="post_tag" nicename="model"><![CDATA[Model]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="xdite"><![CDATA[xdite]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OO设计原则总结</title>
		<link></link>
		<pubDate>Wed, 21 Mar 2012 05:40:27 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=334</guid>
		<description></description>
		<content:encoded><![CDATA[<div> <wbr>设计原则是基本的工具，应用这些规则可以使你的代码更加灵活，更容易维护，更容易扩展。</wbr></div>
<div>基本设计原则</div>
<div><strong>封装变化（</strong><span style="font-family: Arial, Helvetica, sans-serif; color: #424a5e;">Encapsulate what varies</span><strong>）</strong></div>
<div><strong>面向接口编程而非实现(</strong>code to an interface rather than to an implementation<strong>)</strong></div>
<div><strong>优先使用组合而非继承(</strong>favor Composition over inheritance<strong>)</strong></div>
<div><strong>SRP(S</strong>ingle responsibility Principle<strong>) <wbr></wbr></strong></div>
<div><strong> <wbr>  <wbr></wbr></wbr></strong> <span style="color: #ff0000;">单一职责</span>。系统中的每一个对象都应该只有1个单独的职责，而所有对象所关注的就是自身职责的完成。</div>
<div> <wbr>  <wbr> 每一个职责都是一个设计的变因，需求变化的时候，需求变化反映为类的职责的变化。当你系统里的对象都只有一个变化的原因时，你就已经很好的遵循了SRP原则了。<span style="color: #ff0000;">如果一个类承担了过多的职责，就等于把这些职责耦合在一起了。一个职责的变化就可能消弱或者抑制这个类其它的职责的能力。这种设计会导致脆弱的设计。</span>当发生变化时，设计会遭到意想不到的破坏。</wbr></wbr></div>
<div> <wbr>  <wbr> SRP让这个系统更容易管理和维护，因为不是所有的问题都耦合在一起。</wbr></wbr></div>
<div> <wbr>  <wbr> 内聚（Cohesion）其实是SRP原则的另外一个名字。你写了高内聚的软件其实就是很好的应用了SRP原则。 <wbr></wbr></wbr></wbr></div>
<div><strong>DRY(</strong>Don't repeat yourself Principle<strong>)</strong></div>
<div><strong> <wbr>  <wbr></wbr></wbr></strong> <span style="color: #ff0000;">不要重复自己的工作</span>。通过抽取公共部分放置在一个地方来避免重复的代码或功能实现。</div>
<div> <wbr>  <wbr> DRY确保women代码容易维护和复用。确保每一个需求和功能在你的系统中只实现一次，否则就存在浪费！系统的用例不存在交集，所以我们的代码更不应该重复。从这个角度看DRY就不只是在说代码了。DRY关注的是系统内的信息和行为都放在一个单一的，明显的位置。</wbr></wbr></div>
<div> <wbr>  <wbr> <span style="color: #ff0000;">DRY原则：如何对系统职能进行良好的分割！职责清晰的界限一定程度上保证了代码的单一性。</span></wbr></wbr></div>
<div> <wbr>  <wbr> <wbr></wbr></wbr></wbr></div>
<div><strong>OCP(</strong>Open-Close Principle<strong>)</strong></div>
<div><strong> <wbr>  <wbr></wbr></wbr></strong> <span style="color: #ff0000;">开闭原则</span><span style="color: #ff0000;">。</span>OCP关注的是灵活性，改动是通过增加代码进行的，而不是改动现有的代码。</div>
<div> <wbr>  <wbr> OCP的应用限定在可能会发生的变化上，通过创建抽象来隔离以后发生的同类变化。</wbr></wbr></div>
<div> <wbr>  <wbr> OCP传递这样一个思想：<span style="color: #9dbb61;">一旦你写出来可以工作的代码，就要努力保证这段代码可以一直工作。这就成了你的编码的一个底线。一旦我们的代码质量到了一个水平，我们就要尽最大努力保证代码质量不回退。这样就要求我们面对一个问题的时候不会使用凑活的方法来解决，或者说放任自流的方式来解决一个问题</span>（比如：代码添加了无数对特定数据的处理，特化的代码越来越多，代码意图开始含糊不清，这就开始质量退化了。）</wbr></wbr></div>
<div> <wbr>  <wbr> OCP背后的机制：封装和抽象。封闭是建立在抽象的基础上的，使用抽象获得显示的封闭。继承是OCP最简单的例子。除了子类化和方法重载我们还有一些更优雅的方法来实现比如组合。</wbr></wbr></div>
<div> <wbr>  <wbr> 那么如何在不改变源代码（关闭修改）的情况下更改它的行为呢？答案就是抽象。</wbr></wbr></div>
<div> <wbr>  <wbr> 正确的做法就是<span style="color: #ff0000;">开发人员仅对频繁变化的部分做出抽象。拒绝不成熟的抽象，这和抽象本身一样的重要</span>。</wbr></wbr></div>
<div> <wbr>  <wbr> OCP是OOD很多说法的核心，如果这个原则有效的应用，我们可以获得更强的可维护性 可重用性 灵活性 健壮性。。然而LSP是OCP成为可能的主要原则之一。</wbr></wbr></div>
<div><strong>LSP(Liskov</strong> <wbr>substitution<strong> <wbr></wbr></strong>Principle<strong>)</strong></wbr></div>
<div><span style="color: #ff0000;">子类必须能够替换基类</span>。LSP关注的是怎样良好的使用继承。必须清楚是使用一个Method还是要扩展它，但是绝对不是改变它。</div>
<div> <wbr>  <wbr>  <wbr>  <wbr> LSP让我们得出一个重要的结论：一个模型如果孤立的看，并不具有真正意义的有效性，模型的有效性只能通过它的客户程序来表现。必须根据设计的使用者做出的合理假设来审视它。而假设是难以预测的，知道设计臭味出现的时候才处理他们。</wbr></wbr></wbr></wbr></div>
<div><strong>DIP(</strong>Dependency-Inversion Principle<strong>)</strong></div>
<div><strong><span style="color: #ff0000;">依赖反转/依赖倒置</span>。</strong>高层模块不依赖底层模块 两者都应只依赖于抽象。</div>
<div> <wbr>  <wbr> 抽象不依赖于细节， 而细节依赖于抽象。</wbr></wbr></div>
<div> <wbr>  <wbr> 高层模块：包含了应用程序中重要的策略选择和业务模型。这些高层模块使其所在的应用程序区别于其他。</wbr></wbr></div>
<div><span style="color: #b5a5d5;">框架设计的核心原则</span>： 如果高层模块依赖底层模块，那么在不同的上下文中重用高层模块会变得十分困难。然而，如果高层模块不依赖于底层模块，那么高层模块就可以非常容易的被重用。</div>
<div> <wbr>  <wbr> 这里的倒置不仅仅指依赖关系的倒置同时也是接口所有权的倒置。</wbr></wbr></div>
<div> <wbr>  <wbr>Hollywood原则： Don't call us。 we will call you. 底层模块实现了在高层模块声明并被高层模块调用的接口。</wbr></wbr></div>
<div><strong> <wbr>  <wbr></wbr></wbr></strong>DIP的简单的启发规则：依赖于抽象。程序汇总所有的依赖都应依赖于抽象类或接口。</div>
<div><strong> <wbr>  <wbr></wbr></wbr></strong>如果一个类很稳定，那么依赖于它不会造成伤害。然而我们自己的具体类大多是不稳定的，通过把他们隐藏在抽象接口后面可以隔离不稳定性。</div>
<div><strong> <wbr>  <wbr></wbr></wbr></strong></div>
<div><strong> <wbr>  <wbr>依赖倒置可以应用于任何一个类向另一个类发送消息的地方。。。（还不是很理解）</wbr></wbr></strong></div>
<div><strong> <wbr>  <wbr></wbr></wbr></strong>依赖倒置原则是实现许多面向对象技术多宣称的好处的基本底层机制，是面向对象的标志所在。 <strong> <wbr> <wbr></wbr></wbr></strong></div>
<div><strong>
</strong></div>
<div><strong>ISP(</strong>Interface Segregation Principle<strong>)</strong></div>
<div><strong><span style="color: #ff0000;">接口隔离原则</span>。</strong></div>
<div>使用多个专门的接口比使用一个单一的接口总要好：从一个客户类的角度来讲，一个类对另外一个类的依赖性应当是建立在最小的接口上。</div>
<div>如果接口不是高内聚的，一个接口可以分成N组方法，那么这个接口就需要使用ISP来处理一下了~~。</div>
<div> <wbr>  <wbr>  <wbr>  <wbr> 一个接口中包含了太多的行为时候，导致他们的客户程序之间产生不正常的依赖关系，我们要做的就是分离接口，实现解耦。使用了ISP后客户程序看到的是多个内聚的接口。</wbr></wbr></wbr></wbr></div>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>334</wp:post_id>
		<wp:post_date>2012-03-21 13:40:27</wp:post_date>
		<wp:post_date_gmt>2012-03-21 05:40:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>oo%e8%ae%be%e8%ae%a1%e5%8e%9f%e5%88%99%e6%80%bb%e7%bb%93</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dip"><![CDATA[dip]]></category>
		<category domain="post_tag" nicename="dry"><![CDATA[dry]]></category>
		<category domain="post_tag" nicename="isp"><![CDATA[isp]]></category>
		<category domain="post_tag" nicename="it"><![CDATA[it]]></category>
		<category domain="post_tag" nicename="ocp"><![CDATA[ocp]]></category>
		<category domain="post_tag" nicename="oo%e8%ae%be%e8%ae%a1%e5%8e%9f%e5%88%99"><![CDATA[oo设计原则]]></category>
		<category domain="post_tag" nicename="srp"><![CDATA[srp]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ruby变量</title>
		<link></link>
		<pubDate>Wed, 21 Mar 2012 08:51:21 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=337</guid>
		<description></description>
		<content:encoded><![CDATA[变量，实例变量，类变量，甚至还有"常量"其实都只是对象引用。它们引用对象，但是它们并不是对象本身。因此，它们可以被动态地改变，甚至引用另一种不同类型的对象。

　　因为这一灵活性，所以必须在Ruby中进行一些约定以帮助每个人都知道某个变量正为代码所使用。其实，你已经看到了其中之一（@符号，它意味着这是一个实例变量）。其它的变量，方法和类命名约定列于下表1中。

　　· 局部变量和方法参数以一个小写字母开头。
　　· 方法名字以一个小写字母开头。
　　· 全局变量以一个$开头。
　　· 实例变量以一个@开头。
　　· 类变量以两个@开头。
　　· 常数以一个大写字母开头(它们经常被指定全部大写)。
　　· 类和模块名以一个大写字母开头。
<table width="90%" border="1" cellspacing="0" cellpadding="0" align="center">
<tbody>
<tr>
<td>局部变量</td>
<td>全局变量</td>
<td>实例变量</td>
<td>类变量</td>
<td>常数</td>
<td>类名</td>
<td>方法名</td>
</tr>
<tr>
<td>aVar</td>
<td>$Var</td>
<td>@var</td>
<td>@@var</td>
<td>VAR</td>
<td>MyClass</td>
<td>myMethod</td>
</tr>
<tr>
<td>name</td>
<td>$debug</td>
<td>@lastName</td>
<td>@@interest</td>
<td>PI</td>
<td>Rectangle</td>
<td>area</td>
</tr>
</tbody>
</table>
　　　　　　　　表1.这个表包含了在Ruby编码约定下的相关示例]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>337</wp:post_id>
		<wp:post_date>2012-03-21 16:51:21</wp:post_date>
		<wp:post_date_gmt>2012-03-21 08:51:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby%e5%8f%98%e9%87%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="ruby%ef%bc%8c%e5%8f%98%e9%87%8f"><![CDATA[ruby，变量]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rails中的业务处理Active Record Transactions</title>
		<link></link>
		<pubDate>Sat, 24 Mar 2012 14:19:51 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=341</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://api.rubyonrails.org/classes/ActiveRecord/Transactions.html">Transactions</a> are protective blocks where SQL statements are only permanent if they can all succeed as one atomic action. The classic example is a transfer between two accounts where you can only have a deposit if the withdrawal succeeded and vice versa.

<a href="http://api.rubyonrails.org/classes/ActiveRecord/Transactions.html">Transactions</a>是保护行的代码块，用于只有你能够完成所有的元操作才permanent SQL statements（执行sql语句）。经典的例子是一个在两个帐号之间的业务，这里你只能在转账成功后才能有一个deposit存款，反之也是。

<a href="http://api.rubyonrails.org/classes/ActiveRecord/Transactions.html">Transactions</a> enforce the integrity of the database and guard the data against program errors or database break-downs. So basically you should use transaction blocks whenever you have a number of statements that must be executed together or not at all.

<a href="http://api.rubyonrails.org/classes/ActiveRecord/Transactions.html">Transactions</a> 保障了数据库的有效性，能够防止程序错误或者数据库故障对数据的影响。因此基本上你应该使用<a href="http://api.rubyonrails.org/classes/ActiveRecord/Transactions.html">Transactions</a>代码块无论何时你需要一系列的声明必须在一起执行或者什么都不做。

For example:
<pre data-second_best="[object Object]" data-result="[object Object]">ActiveRecord::Base.transaction do
  david.withdrawal(100)
  mary.deposit(100)
end</pre>
This example will only take money from David and give it to Mary if neither <code>withdrawal</code> nor <code>deposit</code> raise an exception. Exceptions will force a ROLLBACK that returns the database to the state before the transaction began. Be aware, though, that the objects will <em>not</em> have their instance data returned to their pre-transactional state.

这个例子仅仅从David那里转账一些钱给Mary如果汇款或者存款都没有异常抛出。意外情况发生则会强制一个回滚数据库到业务开始的状态。请保持清醒，这样，对象将不会有实例数据回到到它们的每一个业务来源地。
<h2 id="label-Different+Active+Record+classes+in+a+single+transaction">Different Active Record classes in a single transaction</h2>
Though the transaction class method is called on some Active Record class, the objects within the transaction block need not all be instances of that class. This is because transactions are per-database connection, not per-model.

即使transaction类方法被一些的Active Record class调用，在transaction代码块中的对象并不需要所有的实例都是来自那个类。这是因为transaction是基于每个数据连接的而不是每个model。

In this example a <code>balance</code> record is transactionally saved even though <code>transaction</code> is called on the <code>Account</code> class:

在这个例子中余额记录被transactionally保存即使<code>transaction也被Account类调用。</code>
<pre data-second_best="[object Object]" data-result="[object Object]">Account.transaction do
  balance.save!
  account.save!
end</pre>
The <code>transaction</code> method is also available as a model instance method. For example, you can also do this:

<code>transaction在model实例方法中也是可用的。例如你可以这样做：</code>
<pre data-second_best="[object Object]" data-result="[object Object]">balance.transaction do
  balance.save!
  account.save!
end</pre>
<h2 id="label-Transactions+are+not+distributed+across+database+connections"><a href="http://api.rubyonrails.org/classes/ActiveRecord/Transactions.html">Transactions</a> are not distributed across database connections</h2>
A transaction acts on a single database connection. If you have multiple class-specific databases, the transaction will not protect interaction among them. One workaround is to begin a transaction on each class whose models you alter:

一个transaction动作是一个单个的数据库连接。如果你的数据库指定了多个类，transaction将不会保护他们全部的相互影响。一个解决办法是开始一个transaction包含你要改变的model的每一个类：
<pre data-second_best="[object Object]" data-result="[object Object]">Student.transaction do
  Course.transaction do
    course.enroll(student)
    student.units += course.units
  end
end</pre>
This is a poor solution, but fully distributed transactions are beyond the scope of Active Record.

这是一个无赖的办法，但是完整的区域业务超出了Active Record的范围。
<h2 id="label-save+and+destroy+are+automatically+wrapped+in+a+transaction"><code>save</code> and <code>destroy</code> are automatically wrapped in a transaction</h2>
Both <code>save</code> and <code>destroy</code> come wrapped in a transaction that ensures that whatever you do in validations or callbacks will happen under its protected cover. So you can use validations to check for values that the transaction depends on or you can raise exceptions in the callbacks to rollback, including <code>after_*</code> callbacks.

保存和删除都是包装在一个业务中的确保无论你何时做验证或者回调都会在它的保护下。因此你可以使用验证来检查业务中的值在此基础上或者你可以在回调中抛出异常来回滚，包含<code>after_*</code> callbacks。

As a consequence changes to the database are not seen outside your connection until the operation is complete. For example, if you try to update the index of a search engine in <code>after_save</code> the indexer won’t see the updated record. The <code>after_commit</code> callback is the only one that is triggered once the update is committed. See below.

这样有一个后果就是在你的操作完成之前，数据库的改变都不会表现出来（不会突出于你的连接之外）。例如，如果你尝试使用<code>after_save</code>更新一个搜索引擎的索引，索引者将不会发现更新的记录。<code>after_commit回调是仅有的一个</code>它会在一旦更新完成就被触发。看下面。
<h2 id="label-Exception+handling+and+rolling+back">Exception handling and rolling back</h2>
<h2 id="label-Exception+handling+and+rolling+back">Exception handling and rolling back</h2>
Also have in mind that exceptions thrown within a transaction block will be propagated (after triggering the ROLLBACK), so you should be ready to catch those in your application code.

同样也要留心在一个业务代码块中的异常抛出将会被传播（在触发回调之后）。因此你应该准备好在应用程序中抓取这些异常。

One exception is the <code>ActiveRecord::Rollback</code> exception, which will trigger a ROLLBACK when raised, but not be re-raised by the transaction block.

<strong>Warning</strong>: one should not catch <code>ActiveRecord::StatementInvalid</code> exceptions inside a transaction block. <code>ActiveRecord::StatementInvalid</code> exceptions indicate that an error occurred at the database level, for example when a unique constraint is violated. On some database systems, such as PostgreSQL, database errors inside a transaction cause the entire transaction to become unusable until it's restarted from the beginning. Here is an example which demonstrates the problem:
<pre data-result="[object Object]"># Suppose that we have a Number model with a unique column called 'i'.
Number.transaction do
  Number.create(:i =&gt; 0)
  begin
    # This will raise a unique constraint error...
    Number.create(:i =&gt; 0)
  rescue ActiveRecord::StatementInvalid
    # ...which we ignore.
  end

  # On PostgreSQL, the transaction is now unusable. The following
  # statement will cause a PostgreSQL error, even though the unique
  # constraint is no longer violated:
  Number.create(:i =&gt; 1)
  # =&gt; "PGError: ERROR:  current transaction is aborted, commands
  #     ignored until end of transaction block"
end</pre>
One should restart the entire transaction if an <code>ActiveRecord::StatementInvalid</code> occurred.

应该重新开始业务如果<code>ActiveRecord::StatementInvalid发生了。</code>
<h2 id="label-Nested+transactions">Nested transactions</h2>
<code>transaction</code> calls can be nested. By default, this makes all database statements in the nested transaction block become part of the parent transaction. For example, the following behavior may be surprising:

<code>transaction可以嵌套调用。默认情况下，这将会将被嵌套的<code>transaction作为其中</code>所有的数据库声明</code>的父业务。
<pre data-result="[object Object]">User.transaction do
  User.create(:username =&gt; 'Kotori')
  User.transaction do
    User.create(:username =&gt; 'Nemu')
    raise ActiveRecord::Rollback
  end
end</pre>
creates both “Kotori” and “Nemu”. Reason is the <code>ActiveRecord::Rollback</code> exception in the nested block does not issue a ROLLBACK. Since these exceptions are captured in transaction blocks, the parent block does not see it and the real transaction is committed.

In order to get a ROLLBACK for the nested transaction you may ask for a real sub-transaction by passing <code>:requires_new =&gt; true</code>. <strong>If anything goes wrong, the database rolls back to the beginning of the sub-transaction without rolling back the parent transaction. 如果有任何错误，数据库将会回滚到子业务的开始状态，并没有回滚父业务。</strong>If we add it to the previous example:
<pre data-result="[object Object]">User.transaction do
  User.create(:username =&gt; 'Kotori')
  User.transaction(:requires_new =&gt; true) do
    User.create(:username =&gt; 'Nemu')
    raise ActiveRecord::Rollback
  end
end</pre>
<strong>only “Kotori” is created. (This works on MySQL and PostgreSQL, but not on SQLite3.)</strong>

<strong>Most databases don’t support true nested transactions.</strong> At the time of writing, the only database that we’re aware of that supports true nested transactions, is MS-SQL. Because of this, Active Record emulates nested transactions by using savepoints on MySQL and PostgreSQL. See <a href="http://dev.mysql.com/doc/refman/5.0/en/savepoint.html">dev.mysql.com/doc/refman/5.0/en/savepoint.html</a> for more information about savepoints.
<h3 id="label-Callbacks"><a href="http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html">Callbacks</a></h3>
There are two types of callbacks associated with committing and rolling back transactions: <code>after_commit</code> and <code>after_rollback</code>.

<code>after_commit</code> callbacks are called on every record saved or destroyed within a transaction immediately after the transaction is committed. <code>after_rollback</code> callbacks are called on every record saved or destroyed within a transaction immediately after the transaction or savepoint is rolled back.

These callbacks are useful for interacting with other systems since you will be guaranteed that the callback is only executed when the database is in a permanent state. For example, <code>after_commit</code> is a good spot to put in a hook to clearing a cache since clearing it from within a transaction could trigger the cache to be regenerated before the database is updated.
<h3 id="label-Caveats">Caveats</h3>
If you’re on MySQL, then do not use DDL operations in nested transactions blocks that are emulated with savepoints. That is, do not execute statements like ‘CREATE TABLE’ inside such blocks. This is because MySQL automatically releases all savepoints upon executing a DDL operation. When <code>transaction</code> is finished and tries to release the savepoint it created earlier, a database error will occur because the savepoint has already been automatically released. The following example demonstrates the problem:
<pre data-result="[object Object]">Model.connection.transaction do                           # BEGIN
  Model.connection.transaction(:requires_new =&gt; true) do  # CREATE SAVEPOINT active_record_1
    Model.connection.create_table(...)                    # active_record_1 now automatically released
  end                                                     # RELEASE savepoint active_record_1
                                                          # ^^^^ BOOM! database error!
end</pre>
Note that “TRUNCATE” is also a MySQL DDL statement!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>341</wp:post_id>
		<wp:post_date>2012-03-24 22:19:51</wp:post_date>
		<wp:post_date_gmt>2012-03-24 14:19:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails%e4%b8%ad%e7%9a%84%e4%b8%9a%e5%8a%a1%e5%a4%84%e7%90%86active-record-transactions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="transation"><![CDATA[transation]]></category>
		<category domain="post_tag" nicename="%e4%b8%9a%e5%8a%a1%ef%bc%8c%e5%a4%84%e7%90%86"><![CDATA[业务，处理]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>No one is coming</title>
		<link></link>
		<pubDate>Fri, 30 Mar 2012 15:36:26 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=345</guid>
		<description></description>
		<content:encoded><![CDATA[Happiness: resilience, optimism, self-faith, sence-meaning, social behavior, helping others
Stop blaming others. Take responsibility of your life.
No one is coming. You are responsible for your life, for your self-confidence, for your self-esteem, for your happiness.
No one is coming. It's up to you to make the most out of this experience.
People are comfortably numb.
Clutivating personal growth, working on the positive.
Idealism and good intentions are not enough to resolve conflict.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>345</wp:post_id>
		<wp:post_date>2012-03-30 23:36:26</wp:post_date>
		<wp:post_date_gmt>2012-03-30 15:36:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>no-one-is-coming</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="optimism"><![CDATA[optimism]]></category>
		<category domain="post_tag" nicename="resilience"><![CDATA[resilience]]></category>
		<category domain="post_tag" nicename="self-faith"><![CDATA[self-faith]]></category>
		<category domain="post_tag" nicename="sence-meaning"><![CDATA[sence-meaning]]></category>
		<category domain="post_tag" nicename="social-behavior"><![CDATA[social behavior]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ruby-style-guide-zh-cn</title>
		<link></link>
		<pubDate>Thu, 29 Mar 2012 15:35:50 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=347</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>序</h1>
<blockquote>风格可以用来区分从好到卓越。
-- Bozhidar Batsov</blockquote>
有一件事情总是困扰着，作为Ruby程序员的我 - python 开发者都有一个很棒的编程风格参考 (<a href="http://www.python.org/dev/peps/pep-0008/">PEP-8</a>)，然而我们从没有一个官方的（公认）的guide，Ruby代码风格文档和最佳实践。而且我信赖这些风格（的一些约定）。我也相信下面的一些好东西，像我们这样的Ruby开发者，也应该有能力写出这样的梦寐以求的文档。

这份指南诞生于我们公司内部的Ruby编程准则，基于Ruby社区的大多数成员会对我正在做的有兴趣这样的发点，我决定做这样的工作，而且世界上很少需要另一个公司内部的（编程）准则。但是这个世界将会一定有益于社区驱动的以及社区认可的，Ruby习惯和风格实践。

自从这个guide（发表）以来，我收到了很多来自优秀的Ruby社区的世界范围内的成员的回馈。感谢所有的建议和支持！集我们大家之力，我们可以创作出对每一个Ruby开发人员有益的资源。

补充，如果你正在使用rails你可能会希望查阅<a href="https://github.com/bbatsov/rails-style-guide">Ruby on Rails 3 Style Guide</a>.
<h1>Ruby 风格指南</h1>
这个Ruby风格指南推荐（一些）最佳实践使得现实世界中的Ruby程序员可以写出能够被其他真是世界的Ruby程序员维护的代码。一个风格指南反映了真实世界的使用习惯，同时一个风格指南紧紧把握一个观点那就是人们拒绝接受任何有可能无法使用指南的风险，无论它多好。

这个指南被分为几个具有相关的rules的几节。我尝试给rules添加合理的解释（如果它被省略我假设它相当的明显了）。

我并没有列举所有的rules - 它们大多数基于我作为一个专业的软件工程师的广泛生涯，回馈和来自Ruby社区成员的建议以及各种备受推崇的Ruby编程资源，例如<a href="http://pragprog.com/book/ruby3/programming-ruby-1-9">"Programming Ruby 1.9"</a> 和 <a href="http://www.amazon.com/Ruby-Programming-Language-David-Flanagan/dp/0596516177">"The Ruby Programming Language"</a>.

这个指南仍然在工作进程中 - 一些rules缺乏例子，一些rules没有合适的例子来使得它们足够明了。

你可以使用<a href="https://github.com/TechnoGate/transmuter">Transmuter</a>.来生成指南的PDF或者HTML的copy。
<h2>源代码布局</h2>
<blockquote>附近的每个人都深信每一个风格除了他们自己的都是 丑陋的并且难以阅读的。脱离"but their own"那么他们 完全正确... 
-- Jerry Coffin (on indentation缩进)</blockquote>
<ul>
	<li>使用 <code>UTF-8</code> 作为源文件编码。</li>
	<li>每个缩进级别使用两个 <strong>spaces</strong>
<div>
<pre># good
def some_method
  do_something
end

# bad - four spaces
def some_method
    do_something
end</pre>
</div></li>
	<li>使用Unix-风格行结束。(*BSD/Solaris/Linux/OSX 用户被涵盖为默认，Windows 用户必须特别小心.) &gt; \n是换行，英文是LineFeed，ASCII码是0xA。 &gt; \r是回车，英文是Carriage Return ,ASCII码是0xD。 &gt; windows下enter是 \n\r,unix下是\n,mac下是\r
<ul>
	<li>如果你正在使用Git你可能会想要添加下面的配置设置来保护你的项目（避免）Windows蔓延过来的行结束符:<code>$ git config --global core.autecrlf true</code></li>
</ul>
</li>
	<li>使用空格：在操作符旁；逗号，冒号和分号后；在 <code>{</code>旁和在 <code>}</code>之前，大多数空格可能对Ruby解释（代码）无关，但是它的恰当使用是让代码变得易读的关键。
<div>
<pre>sum = 1 + 2
a, b = 1, 2
1 &gt; 2 ? true : false; puts 'Hi'
[1, 2, 3].each { |e| puts e }</pre>
</div>
唯一的例外是当使用指数操作时：
<div>
<pre># bad
e = M * c ** 2

# good
e = M * c**2</pre>
</div></li>
	<li>没有空格 <code>(</code>, <code>[</code>之后或者 <code>]</code>, <code>)</code>之前。
<div>
<pre>some(arg).other
[1, 2, 3].length</pre>
</div></li>
	<li><code>when</code>和<code>case</code> 缩进深度一致。我知道很多人会不同意这点，但是它是"The Ruby Programming Language" 和 "Programming Ruby"中公认的风格。
<div>
<pre>case
when song.name == 'Misty'
  puts 'Not again!'
when song.duraton &gt; 120
  puts 'Too long!'
when Time.now &gt; 21
  puts "It's too late"
else
  song.play
end

kind = case year
       when 1850..1889 then 'Blues'
       when 1890..1909 then 'Ragtime'
       when 1910..1929 then 'New Orleans Jazz'
       when 1930..1939 then 'Swing'
       when 1940..1950 then 'Bebop'
       else 'Jazz'
       end</pre>
</div></li>
	<li>使用空行在 <code>def</code>s 并且一个方法根据逻辑段来隔开。
<div>
<pre>def some_method
  data = initialize(options)

  data.manipulate!

  data.result
end

def some_methods
  result
end</pre>
</div></li>
	<li>如果一个方法的调用参数分割为多行将它们于<strong>方法名</strong>对齐。
<div>
<pre># starting point (line is too long)
def send_mail(source)
  Mailer.deliver(to: 'bob@example.com', from: 'us@example.com', subject: 'Important message', body: source.text)
end
# bad (normal indent)
def send_mail(source)
  Mailer.deliver(
    to: 'bob@example.com',
    from: 'us@example.com',
    subject: 'Important message',
    body: source.text)
end

# bad (double indent)
def send_mail(source)
  Mailer.deliver(
      to: 'bob@example.com',
      from: 'us@example.com',
      subject: 'Important message',
      body: source.text)
end
# good
def send_mail(source)
  Mailer.deliver(to: 'bob@example.com',
                 from: 'us@example.com',
                 subject: 'Important message',
                 body: source.text)
end</pre>
</div></li>
	<li>在 API 文档中使用 RDoc和它的公约。不要在注释代码块和<code>def</code>之间加入空行。</li>
	<li>保持每一行少于80字符。</li>
	<li>避免尾随空格。</li>
</ul>
<h2>语法</h2>
<ul>
	<li>使用括号将<code>def</code>的参数括起来。当方法不接收任何参数的时候忽略括号。
<div>
<pre>def some_method
  # body omitted
end

def some_method_with_arguments(arg1, arg2)
  # body omitted
end</pre>
</div></li>
	<li>从来不要使用 <code>for</code>， 除非你知道使用它的准确原因。大多数时候迭代器都可以用来替代for。<code>for</code> is implemented in terms of<code>each</code>#<code>for</code>是<code>each</code>的组实现 (因此你正间接添加了一级)，但是有一个小道道 - <code>for</code>并不包含一个新的scope(不像<code>each</code>)并且在它的块中定义的变量在外面也是可以访问的。
<div>
<pre>arr = [1, 2, 3]

# bad
for elem in arr do 
  puts elem
end

puts elem # =&gt; 3

# good
arr.each { |elem| puts elem }</pre>
</div></li>
	<li>在多行的<code>if/unless</code>中坚决不要使用<code>then</code>.
<div>
<pre># bad
if some_condition then
  # body omitten
end

# good
if some_condition
  # body omitted
end</pre>
</div></li>
	<li>喜欢三元操作运算（<code>?:</code>）超过<code>if/then/else/end</code>结果。 它更加普遍而且明显的更加简洁。
<div>
<pre># bad
result = if some_condition then something else something_else end

# good
result = some_condition ? something : something_else</pre>
</div></li>
	<li>使用一个表达式在三元操作运算的每一个分支下面只使用一个表达式。也就是说三元操作符不要被嵌套。在这样的情形中宁可使用<code>if/else</code>。
<div>
<pre># bad
some_condition ? (nested_condition ? nested_something : nested_something_else) : something_else

# good
if some_condition
  nested_condition ? nested_something : nested_something_else
else
  something_else
end</pre>
</div></li>
	<li>使用三元操作运算代替<code>if x: ...</code>。</li>
	<li>在 one-line cases 的时候使用<code>when x then ...</code>。替代的语法<code>when x: xxx</code>已经在Ruby 1.9中移除。</li>
	<li>不要使用<code>when x; ...</code>。查看上面的规则。</li>
	<li>布尔表达式使用<code>&amp;&amp;/||</code>, <code>and/of</code>用于控制流程。（经验Rule:如果你必须使用额外的括号（表达逻辑），那么你正在使用错误的的操作符。）
<div>
<pre># boolean expression
if some_condition &amp;&amp; some_other_condition
  do_something
end

# control flow
document.save? or document.save!</pre>
</div></li>
	<li>避免多行<code>?:</code>(三元操作运算)，使用<code>if/unless</code>替代。</li>
	<li>在单行语句的时候喜爱使用<code>if/unless</code>修饰符。另一个好的选择就是使<code>and/of</code>来做流程控制。
<div>
<pre># bad
if some_condition
  do_something
end

# good
do_something if some_condition

# another good option
some_condition and do_something</pre>
</div></li>
	<li>在否定条件下喜欢<code>unless</code>超过<code>if</code>(或者控制流程 <code>or</code>)。
<div>
<pre># bad
do_something if !some_condition

# good
do_something unless some_condition

# another good option
some_condition or do_something</pre>
</div></li>
	<li>不要使用<code>else</code>搭配<code>unless</code>。将其的语义重写为肯定形式。
<div>
<pre># bad
unless sucess?
  puts 'failure'
else
  puts 'sucess'
end

# good
if sucess?
  puts 'sucess'
else
  puts 'failure'
end</pre>
</div></li>
	<li>不要在<code>if/unless/while</code>将条件旁括起来，除非这个条件包含一个参数(参见下面 "使用<code>=</code>返回值")。
<div>
<pre># bad
if (x&gt;10)
  # body omitted
end

# good
if x &gt; 10
  # body omitted
end

# ok
if (x = self.next_value)
  # body omitted
end</pre>
</div></li>
	<li>DSL(e.g. Rake, Rails, RSpec)里的方法，Ruby“关键字”方法(e.g. <code>attr_reader</code>, <code>puts</code>)以及属性访问方法，所带参数忽略括号。使用括号将在其他方法调用的参数括起来。
<div>
<pre>class Person
  attr_reader :name, :age

  # omitted
end

temperance = Person.new('Temperance', 30)
temperance.name

puts temperance.age

x = Math.sin(y)
array.delete(e)</pre>
</div></li>
	<li>在单行代码块的时候宁愿使用<code>{...}</code>而不是<code>do...end</code>。避免在多行代码块使用<code>{...}</code>(多行链式通常变得非常丑陋)。通常使用<code>do...end</code>来做<code>流程控制</code>和<code>方法定义</code>(例如 在Rakefiles和某些DSLs中)。避免在链式调用中使用<code>do...end</code>。
<div>
<pre>names = ["Bozhidar", "Steve", "Sarah"]

#good
names.each { |name| puts name }

#bad
names.each do |name|
  puts name
end

# good
names.select { |name| name.start_with?("S") }.map { |name| name.upcase }

# bad
names.select do |name|
  name.start_with?("S")
end.map { |name| name.upcase }</pre>
</div>
有人会争论多行链式看起来和使用<code>{...}</code>一样工作，但是他们问问自己 - 这样的代码真的有可读性码并且为什么代码块中的内容不能被提取到美丽的methods。</li>
	<li>避免在不需要的地方使用<code>return</code>
<div>
<pre># bad
def some_method(some_arr)
  return some_arr.size
end

# good
def some_method(some_arr)
  some_arr.size
end</pre>
</div></li>
	<li>当分配默认值给方法参数的时候，在<code>=</code>附近使用空格。
<div>
<pre># bad
def some_method(arg1=:default, arg2=nil, arg3=[])
  # do something...
end

# good
def some_method(arg1 = :default, arg2 = nil, arg3 = [])
  # do something...
end</pre>
</div></li>
	<li>避免在不需要的时候使用行连接符(<code>\\</code>)。实际上应该避免行连接符。
<div>
<pre># bad
result = 1 - \
         2

# good (but still ugly as hell)仍然像地狱一样丑陋
result = 1 \
         - 2</pre>
</div></li>
	<li>使用<code>=</code>返回一个表达式的值是很好的，但是需要用括号把赋值运算式括起来。
<div>
<pre># good - show intented use of assignment
if (v = array.grep(/foo/)) ...

# bad
if v = array.grep(/foo/) ...

# also good - show intended use of assignment and has correct precedence.
if (v = self.next_value) == "hello" ...</pre>
</div></li>
	<li>使用<code>||=</code>轻松的初始化变量。
<div>
<pre># set name to Vozhidar, only if it's nil or false
name ||= 'Bozhidar'</pre>
</div></li>
	<li>不要使用<code>||=</code>来初始化布尔变量。（思考一些如果当前值为<code>false</code>的时候会发生什么。）
<div>
<pre># bad - would set enabled to true even if it was false
enable ||= true

# good
enabled = true if enabled.nil?</pre>
</div></li>
	<li>避免使用Perl的指定变量风格（比如，<code>$0-9</code>，<code>$</code>，等等。）。它们相当神秘，不鼓励在单行代码之外使用它们。</li>
	<li>从来不要在方法名和（参数）开括号之间使用空格。
<div>
<pre># bad
f (3+2) + 1

# good
f(3 + 2) +1</pre>
</div></li>
	<li>如果方法的第一个参数以开括号开始，通常使用括号把它们全部括起来。例如<code>f((3 + 2) + 1)</code>。</li>
	<li>通常使用-w 选项运行Ruby解释器，在你忘记上面所诉规则，ruby将会提示你。</li>
	<li>当你的hash字典是symbols的时候，使用Ruby 1.9的字面量语法。
<div>
<pre># bad
hash = { :one =&gt; 1, :two =&gt; 2 }

#good
hash = { one: 1, two: 2 }</pre>
</div></li>
	<li>使用新的 lambda 语法。
<div>
<pre># bad
lambda = lambda { |a, b| a + b }
lambda.call(1, 2)

# good
lambda = -&gt;(a, b) { a + b }
lambda.(1, 2)</pre>
</div></li>
	<li>对不使用的块变量使用<code>_</code>。
<div>
<pre># bad
result = hash.map { |k, v| v + 1}

# good
result = hash.map { |_, v| v + 1 }</pre>
</div></li>
</ul>
<h3>命名</h3>
<blockquote>The only real difficulties in programming are cache invalidation and naming things. 
-- Phil Karlton 程序（运行）中唯一不一样的是无效的缓存和命名的事物（变量）。
-- Phil Karlton</blockquote>
<ul>
	<li>使用<code>snake_case</code>的形式给变量和方法命名。</li>
	<li>Snake case: punctuation is removed and spaces are replaced by single underscores. Normally the letters share the same case (either UPPER_CASE_EMBEDDED_UNDERSCORE or lower_case_embedded_underscore) but the case can be mixed</li>
	<li>使用<code>CamelCase(駝峰式大小寫)</code>的形式给类和模块命名。(保持使用缩略首字母大写的方式如HTTP, RFC, XML)</li>
	<li>使用<code>SCREAMING_SNAKE_CASE</code>给常量命名。</li>
	<li>在表示断言的方法名（方法返回真或者假）的末尾添加一个问号（如Array#empty?）。</li>
	<li>可能会造成潜在“危险”的方法名（如修改self或者在原处修改变量的方法，exit!等）应该在末尾添加一个感叹号。</li>
	<li>当在短的块中使用<code>reduce</code>时，命名参数<code>|a, e|</code> (accumulator, element)。
<div>
<pre>#Combines all elements of enum枚举 by applying a binary operation, specified by a block or a symbol that names a method or operator.
# Sum some numbers
(5..10).reduce(:+)                            #=&gt; 45#reduce
# Same using a block and inject
(5..10).inject {|sum, n| sum + n }            #=&gt; 45 #inject注入
# Multiply some numbers
(5..10).reduce(1, :*)                         #=&gt; 151200
# Same using a block
(5..10).inject(1) {|product, n| product * n } #=&gt; 151200</pre>
</div></li>
	<li>在定义二元操作符方法时，将其的参数取名为other。
<div>
<pre>def +(other)
  # body omitted
end</pre>
</div></li>
	<li><code>map</code>优先于<code>collect</code>，<code>find</code>优先于<code>detect</code>，<code>select</code>优先于<code>find_all</code>，<code>reduce</code>优先于<code>inject</code>，<code>size</code>优先于<code>length</code>。以上的规则并不绝定，如果使用后者能提高代码的可读性，那么尽管使用它们。这些对应的方法名（如collect，detect，inject）继承于SmallTalk语言，它们在其它语言中并不是很通用。鼓励使用select而不是find_all是因为select与reject一同使用时很不错，并且它的名字具有很好的自解释性。</li>
</ul>
<h2>注释</h2>
<blockquote>Good code is its own best documentation. As you're about to add a comment, ask yourself, "How can I improve the code so that this comment isn't needed?" Improve the code and then document it to make it even clearer. 
-- Steve McConnell 好的代码在于它有好的文档。当你打算添加一个注释，问问自己，“我该做的是怎样提高代码质量，那么这个注释是不是不需要了？”提高代码并且给他们添加文档使得它更加简洁。
-- Steve McConnell</blockquote>
<ul>
	<li>写出自解释文档代码，然后忽略不工作的这部分。这不是说着玩。</li>
	<li>注释长于一个单词则以大写开始并使用标点。使用一个空格将注释与符号隔开。Use <a href="http://en.wikipedia.org/wiki/Sentence_spacing">one space</a> after periods.</li>
	<li>避免多余的注释。
<div>
<pre># bad
counter += 1 # increments counter by one</pre>
</div></li>
	<li>随时更新注释，没有注释比过期的注释更好。</li>
	<li>不要为糟糕的代码写注释。重构它们，使它们能够“自解释”。(Do or do not - there is no try.)</li>
</ul>
<h2>注解</h2>
<ul>
	<li>注解应该写在紧接相关代码的上方。</li>
	<li>注解关键字后跟一个冒号和空格，然后是描述问题的记录。</li>
	<li>如果需要多行来描述问题，随后的行需要在<code>#</code>后面缩进两个空格。
<div>
<pre>def bar
  # FIXME: This has crashed occasionally since v3.2.1. It may
  #  be related to the BarBazUtil upgrade.
  baz(:quux)
end</pre>
</div></li>
	<li>如果问题相当明显，那么任何文档就多余了，注解也可以（违规的）在行尾而没有任何备注。这种用法不应当在一般情况下使用，也不应该是一个rule。
<div>
<pre>def bar
  sleep 100 # OPTIMIZE
end</pre>
</div></li>
	<li>使用<code>TODO</code>来备注缺失的特性或者在以后添加的功能。</li>
	<li>使用<code>FIXME</code>来备注有问题需要修复的代码。</li>
	<li>使用<code>OPTIMIZE</code>来备注慢的或者低效的可能引起性能问题的代码。</li>
	<li>使用<code>HACK</code>来备注那些使用问题代码的地方可能需要重构。</li>
	<li>使用<code>REVIEW</code>来备注那些需要反复查看确认工作正常的代码。例如：<code>REVIEW: 你确定客户端是怎样正确的完成X的吗？</code></li>
	<li>使用其他自定义的关键字如果认为它是合适的，但是确保在你的项目的<code>README</code>或者类似的地方注明。</li>
</ul>
<h2>类</h2>
<ul>
	<li>在设计类层次的时候确保他们符合<a href="http://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov Substitution Principle</a>原则。(译者注: LSP原则大概含义为: 如果一个函数中引用了`父类的实例', 则一定可以使用其子类的实例替代, 并且函数的基本功能不变. (虽然功能允许被扩展)) &gt;Liskov替换原则：子类型必须能够替换它们的基类型 &gt; 1. 如果每一个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都代换为o2时,程序P的行为没有变化，那么类型T2是类型T1的子类型。 &gt; 2. 换言之，一个软件实体如果使用的是一个基类的话，那么一定适用于其子类，而且它根本不能察觉出基类对象和子类对象的区别。只有衍生类替换基类的同时软件实体的功能没有发生变化，基类才能真正被复用。 &gt; 3. 里氏代换原则由Barbar Liskov(芭芭拉.里氏)提出，是继承复用的基石。 &gt; 4. 一个继承是否符合里氏代换原则，可以判断该继承是否合理（是否隐藏有缺陷）。</li>
	<li>努力是你的类尽可能的健壮<a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID</a>。</li>
	<li>总是为你自己的类提供to_s方法, 用来表现这个类（实例）对象包含的对象.
<div>
<pre>class Person
  attr_reader :first_name, :last_name

  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end

  def to_s
    "#@first_name #@last_name"
  end
end</pre>
</div></li>
	<li>使用<code>attr</code>功能功能成员来定义各个实例变量的访问器或者修改器方法。
<div>
<pre># bad
class Person
  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end

  def first_name
    @first_name
  end

  def last_name
    @last_name
  end
end

# good
class Person
  attr_reader :first_name, :last_name

  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end
end</pre>
</div></li>
	<li>考虑添加工厂方法来提供灵活的方法来创建实际类实例。
<div>
<pre>class Person
  def self.create(potions_hash)
    # body omitted
  end
end</pre>
</div></li>
	<li>鸭子类型（<a href="http://en.wikipedia.org/wiki/Duck_typing">duck-typing</a>）由于继承。
<div>
<pre># bad
class Animal
  # abstract method
  def speak
  end
end

# extend superclass
class Duck &lt; Animal
  def speak
    puts 'Quack! Quack'
  end
end

# extend superclass
class Dog &lt; Animal
  def speak
    puts 'Bau! Bau!'
  end
end

# good
class Duck
  def speak
    puts 'Quack! Quack'
  end
end

class Dog
  def speak
    puts 'Bau! Bau!'
  end
end</pre>
</div></li>
	<li>避免使用类变量（<code>@@</code>）因为他们讨厌的继承习惯（在子类中也可以修改父类的类变量）。
<div>
<pre>class Parent
  @@class_var = 'parent'

  def self.print_class_var
    puts @@class_var
  end
end

class Child &lt; Parent
  @@class_var = 'child'
end

Parent.print_class_var # =&gt; will print "child"</pre>
</div>
正如上例看到的, 所有的子类共享类变量, 并且可以直接修改类变量,此时使用类实例变量是更好的主意.</li>
	<li>根据方法的用途为他们分配合适的可见度( <code>private</code>, <code>protected</code> )，不要让所有的方法都是 <code>public</code> (这是默认设定)。这是 <em>Ruby</em> 不是 *Python*。</li>
	<li><code>public</code>, <code>protected</code>, 和 <code>private</code> 等可见性关键字应该和其（指定）的方法具有相同的缩进。并且不同的可见性关键字之间留一个空格。
<div>
<pre>class SomeClass
  def public_method
    # ...
  end

  private
  def private_method
    # ...
  end
end</pre>
</div></li>
	<li>使用self来定义单例方法. 当代码重构时, 这将使得方法定义代码更加具有灵活性.
<div>
<pre>class TestClass
  # bad
  def TestClass.some_method
    # body omitted
  end

  # good
  def self.some_other_method
    # body ommited
  end

  # 也可以这样方便的定义多个单例方法。
  class &lt;&lt; self
    def first_method
      # body omitted
    end

    def second_method_etc
      # body omitted
    end
  end
end</pre>
</div>
<pre lang="shell"><code>class SingletonTest def size 25 end end test1 = SingletonTest.new test2 = SingletonTest.new def test2.size 10 end test1.size # =&gt; 25 test2.size # =&gt; 10 </code></pre>
本例中，test1 與 test2 屬於同一類別，但 test2 具有重新定義的 size 方法，因此兩者的行為會不一樣。只給予單一物件的方法稱為单例方法 (singleton method)。</li>
</ul>
<h2>异常处理</h2>
<ul>
	<li>不要抑制异常输出。
<div>
<pre>begin
  # an exception occurs here
rescue SomeError
  # the rescue clause does absolutely nothing还没有补救代码
end</pre>
</div></li>
	<li>不要用异常来控制流。
<div>
<pre># bad
begin
  n / d
rescue ZeroDivisionError
  puts "Cannot divide by 0!"
end

# good
if n.zero?
  puts "Cannot divide by 0!"
else
  n / d</pre>
</div></li>
	<li>应该总是避免拦截(最顶级的)Exception异常类.
<div>
<pre># bad 
begin
  # an exception occurs here
rescue
  # exception handling
end

# still bad
begin
  # an exception occurs here
rescue Exception
  # exception handling
end</pre>
</div></li>
	<li>将更具体的异常放在拦截链的上方，否则他们将不会被捕获。
<div>
<pre># bad
begin
  # some code
rescue Exception =&gt; e
  # some handling
rescue StandardError =&gt; e
  # some handling
end

# good
begin
  # some code
rescue StandardError =&gt; e
  # some handling
rescue Exception =&gt; e
  # some handling
end</pre>
</div></li>
	<li>使用ensure语句, 来确保总是执行一些特地的操作.
<div>
<pre>f = File.open("testfile")
begin
  # .. process
rescue
  # .. handle error
ensure
  f.close unless f.nil?
end</pre>
</div></li>
	<li>除非必要, 尽可能使用Ruby标准库中异常类，而不是引入一个新的异常类。(而不是派生自己的异常类)</li>
</ul>
<h2>集合</h2>
<ul>
	<li>总是使用%w的方式来定义字符串数组.(译者注: w表示英文单词word, 而且定义之间千万不能有逗号)
<div>
<pre># bad
STATES = ['draft', 'open', 'closed']

# good
STATES = %w(draft open closed)</pre>
</div></li>
	<li>避免直接引用靠后的数组元素, 这样隐式的之前的元素都被赋值为nil.
<div>
<pre>arr = []
arr[100] = 1 # now you have an array with lots of nils</pre>
</div></li>
	<li>如果要确保元素唯一, 则使用 <code>Set</code> 代替 <code>Array</code> .<code>Set</code> 更适合于无顺序的, 并且元素唯一的集合, 集合具有类似于数组一致性操作以及哈希的快速查找.</li>
	<li>尽可能使用符号代替字符串作为哈希键.
<div>
<pre># bad
hash = { 'one' =&gt; 1, 'two' =&gt; 2, 'three' =&gt; 3 }

# good
hash = { one: 1, two: 2, three: 3 }</pre>
</div></li>
	<li>避免使用易变对象作为哈希键。</li>
	<li>优先使用1.9的新哈希语法。
<div>
<pre># bad
hash = { :one =&gt; 1, :two =&gt; 2, :three =&gt; 3 }

# good
hash = { one: 1, two: 2, three: 3 }</pre>
</div></li>
	<li>记住, 在Ruby1.9中, 哈希的表现不再是无序的. (译者注: Ruby1.9将会记住元素插入的序列)</li>
	<li>当遍历一个集合的同时, 不要修改这个集合。</li>
</ul>
<h2>字符串</h2>
<ul>
	<li>优先使用 <code>字符串插值</code> 来代替 <code>字符串串联</code>。
<div>
<pre># bad
email_with_name = user.name + ' &lt;' + user.email + '&gt;'

# good
email_with_name = "#{user.name} &lt;#{user.email}&gt;"</pre>
</div></li>
	<li>当不需要使用 <code>字符串插值</code> 或某些特殊字符时, 应该优先使用单引号.
<div>
<pre># bad
name = "Bozhidar"

# good
name = 'Bozhidar'</pre>
</div></li>
	<li>当使用字符串插值替换 <code>实例变量</code> 时, 应该省略{}.
<div>
<pre>class Person
  attr_reader :first_name, :last_name

  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end

  # bad
  def to_s
    "#{@first_name} #{@last_name}"
  end

  # good
  def to_s
    "#@first_name #@last_name"
  end
end</pre>
</div></li>
	<li>操作较大的字符串时, 避免使用 <code>String#+</code> , 如果需要修改被操作字符串, 应该总是使用 <code>String#&lt;&lt;</code> 作为代替。就地并列字符串实例变体比 <code>String#+</code> 更快，它创建了多个字符串对象。
<div>
<pre># good and also fast
html = ''
html &lt;&lt; '&lt;h1&gt;Page title&lt;/h1&gt;'

paragraphs.each do |paragraph|
  html &lt;&lt; "&lt;p&gt;#{paragraph}&lt;/p&gt;"
end</pre>
</div></li>
</ul>
<h2>正则表达式</h2>
<ul>
	<li>如果只是需要中查找字符串的 <code>text</code>, 不要使用正则表达式：<code>string['text']</code></li>
	<li>针对简单的结构, 你可以直接使用string[/RE/]的方式来查询.
<div>
<pre>match = string[/regexp/]             # get content of matched regexp
first_group = string[/text(grp)/, 1] # get content of captured group
string[/text (grp)/, 1] = 'replace'  # string =&gt; 'text replace'</pre>
</div></li>
	<li>当无需引用分组内容时, 应该使用(?:RE)代替(RE).
<div>
<pre>/(first|second)/   # bad
/(?:first|second)/ # good</pre>
</div></li>
	<li>避免使用 <code>$1-$9</code> 风格的分组引用, 而应该使用1.9新增的命名分组来代替.
<div>
<pre># bad
/(regexp)/ =~ string
...
process $1

# good
/(?&lt;meaningful_var&gt;regexp)/ =~ string
...
process meaningful_var</pre>
</div></li>
	<li>字符类有以下几个特殊关键字值得注意: <code>^</code>, <code>-</code>, <code>\</code>, <code>]</code>, 所以, 不要在集合中, 转义 <code>.</code> 或者 <code>[]</code> 中的括号, 他们是正常字符.</li>
	<li>注意, <code>^</code> 和 <code>$</code> , 他们匹配行首和行尾, 而不是一个字符串的结尾, 如果你想匹配整个字符串, 用 <code>\A</code> 和 <code>\Z</code>。
<div>
<pre>string = "some injection\nusername"
string[/^username$/]   # matches
string[/\Ausername\Z/] # don't match</pre>
</div></li>
	<li>使用 <code>x</code> 修饰符来匹配复杂的表达式, 这将使得RE更具可读性, 你可以添加一些有用的注释. 注意, 所有空格将被忽略.
<div>
<pre>regexp = %r{
  start         # some text
  \s            # white space char
  (group)       # first group
  (?:alt1|alt2) # some alternation
  end
}x</pre>
</div></li>
	<li><code>sub</code>/<code>gsub</code>也支持哈希以及代码块形式语法, 可用于复杂情形下的替换操作.</li>
</ul>
<h2>百分号和字面值</h2>
<ul>
	<li>多用 <code>%w</code>
<div>
<pre>STATES = %w(draft open closed)</pre>
</div></li>
	<li>定义需要插值和嵌套双引号符号的单行字符串，使用%()的方式.而多行字符串, 尽量使用heredocs格式.
<div>
<pre># bad (不需要插值)
%(&lt;div&gt;Some text&lt;/div&gt;)
# should be '&lt;div&gt;Some text&lt;/div&gt;' # 应该这样写

# bad (没有双引号)
%(This is #{quality} style)
# should be "This is #{quality} style" # 应该这样写

# bad (multiple lines)
%(&lt;div&gt;\n&lt;span&gt;#{exclamation}&lt;/span&gt;\n&lt;/div&gt;)
# should be a heredoc.

# good (插值, 引号, 单行)
%(&lt;tr&gt;&lt;td&gt;#{name}&lt;/td&gt;)</pre>
</div>
Heredoc is a robust way to create string in PHP with more lines but without using quotations. Heredoc 是 php 中不使用引号就可以创建多行字符串的一种强大的方式。

line-oriented string literals (Here document) There's a line-oriente form of the string literals that is usually called as <code>here document</code>. Following a <code>&lt;&lt;</code> you can specify a string or an identifier to terminate the string literal, and all lines following the current line up to the terminator are the value of the string. If the terminator is quoted, the type of quotes determines the type of the line-oriented string literal. Notice there must be <strong>no space between <code>&lt;&lt;</code> and the terminator</strong> .

If the - placed before the delimiter, then all leading whitespcae characters (tabs or spaces) are stripped from input lines and the line containing delimiter. This allows here-documents within scripts to be indented in a natural fashion.
<div>
<pre>  print &lt;&lt;EOF
    The price is #{$Price}.
    EOF

  print &lt;&lt;"EOF";            # same as above
The price is #{$Price}.
EOF

  print &lt;&lt;`EOC`         # execute commands
echo hi there
echo lo there
EOC

  print &lt;&lt;"foo", &lt;&lt;"bar"    # you can stack them
I said foo.
foo
I said bar.
bar

  myfunc(&lt;&lt;"THIS", 23, &lt;&lt;'THAT')
Here's a line
or two.
THIS
and here's another.
THAT

  if need_define_foo
    eval &lt;&lt;-EOS         # delimiters can be indented
      def foo
        print "foo\n"
      end
    EOS
  end</pre>
</div></li>
	<li><code>%r</code> 的方式只适合于定义包含多个 <code>/</code> 符号的正则表达式。
<div>
<pre># bad
%r(\s+)

# still bad
%r(^/(.*)$)
# should be /^\/(.*)$/

# good
%r(^/blog/2011/(.*)$)</pre>
</div>
<div>
<pre>irb(main):001:0&gt; string="asdfas.64"
=&gt; "asdfas.64"
irb(main):002:0&gt; string[/^\/(.*)$/]
=&gt; nil
irb(main):003:0&gt; string="/asdfas.64"
=&gt; "/asdfas.64"
irb(main):004:0&gt; string[/^\/(.*)$/]
=&gt; "/asdfas.64"
irb(main):007:0&gt; string="/blog/2011/asdfas.64"
=&gt; "/blog/2011/tmp/asdfas.64"
irb(main):008:0&gt; string[%r(^/blog/2011/(.*)$)]
=&gt; "/blog/2011/tmp/asdfas.64"</pre>
</div></li>
	<li>避免使用<code>%q</code>，<code>%Q</code>， <code>%x</code>， <code>%s</code>,和 <code>%W</code></li>
	<li>优先使用()作为%类语法格式的分隔符.(译者注, 本人很喜欢 <code>%(...)</code>, 不过Programming Ruby中, 显然更喜欢使用%{}的方式)</li>
</ul>
<h2>元编程</h2>
<ul>
	<li>在编写库时，不要乱动核心库。（不要画蛇添足）</li>
</ul>
<h2>杂项</h2>
<ul>
	<li>总是打开Ruby -w开关。</li>
	<li>通常情况下, 尽量避免使用哈希作为方法的 <code>optional</code> 参数. (此时应该考虑这个方法是不是功能太多?)</li>
	<li>避免一个方法内容超过10行代码, 理想情况下, 大多数方法内容应该少于5行.(不算空行)</li>
	<li>尽量避免方法的参数超过三或四个.</li>
	<li>有时候, 必须用到全局方法, 应该增加这些方法到 Kernel 模块，并设置他们可见性关键字为 <code>private</code>。</li>
	<li>尽可能使用类实例变量代替全局变量. (译者注:是类实例变量, 而不是类的实例变量. 汗~~)
<div>
<pre>#bad
$foo_bar = 1

#good
class Foo
  class &lt;&lt; self
    attr_accessor :bar
  end
end

Foo.bar = 1</pre>
</div></li>
	<li>能够用 <code>alias_method</code> 就不要用 <code>alias</code>。</li>
	<li>使用 <code>OptionParser</code> 来解析复杂的命令行选项， 较简单的命令行， <code>-s</code> 参数即可。</li>
	<li>按照功能来编写方法, 当方法名有意义时, 应该避免方法功能被随意的改变。</li>
	<li>避免不需要的元编程。</li>
	<li>除非必要, 避免更改已经定义的方法的参数。</li>
	<li>避免超过三级的代码块嵌套。</li>
	<li>应该持续性的遵守以上指导方针。</li>
	<li>多使用（生活）常识。</li>
</ul>
<h1>Contributing</h1>
Nothing written in this guide is set in stone. It's my desire to work together with everyone interested in Ruby coding style, so that we could ultimately create a resource that will be beneficial to the entire Ruby community.

Feel free to open tickets or send pull requests with improvements. Thanks in advance for your help!
<h1>Spread the Word</h1>
A community-driven style guide is of little use to a community that doesn't know about its existence. Tweet about the guide, share it with your friends and colleagues. Every comment, suggestion or opinion we get makes the guide just a little bit better. And we want to have the best possible guide, don't we?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date>2012-03-29 23:35:50</wp:post_date>
		<wp:post_date_gmt>2012-03-29 15:35:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-style-guide-zh-cn</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="guide"><![CDATA[guide]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="style"><![CDATA[style]]></category>
		<category domain="post_tag" nicename="zh-cn"><![CDATA[zh-cn]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ruby-style-guide.en.md</title>
		<link></link>
		<pubDate>Fri, 30 Mar 2012 04:56:29 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=351</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Prelude</h1>
<blockquote>Style is what separates the good from the great. 
-- Bozhidar Batsov</blockquote>
One thing has always bothered me as Ruby developer - Python developers have a great programming style reference (<a href="http://www.python.org/dev/peps/pep-0008/">PEP-8</a>) and we never got an official guide, documenting Ruby coding style and best practices. And I do believe that style matters. I also believe that such fine fellows, like us Ruby developers, should be quite capable to produce this coveted document.

This guide started its life as our internal company Ruby coding guidelines (written by yours truly). At some point I decided that the work I was doing might be interesting to members of the Ruby community in general and that the world had little need for another internal company guideline. But the world could certainly benefit from a community-driven and community-sanctioned set of practices, idioms and style prescriptions for Ruby programming.

Since the inception of the guide I've received a lot of feedback from members of the exceptional Ruby community around the world. Thanks for all the suggestions and the support! Together we can make a resource beneficial to each and every Ruby developer out there.

By the way, if you're into Rails you might want to check out the complementary <a href="https://github.com/bbatsov/rails-style-guide">Ruby on Rails 3 Style Guide</a>.
<h1>The Ruby Style Guide</h1>
This Ruby style guide recommends best practices so that real-world Ruby programmers can write code that can be maintained by other real-world Ruby programmers. A style guide that reflects real-world usage gets used, and a style guide that holds to an ideal that has been rejected by the people it is supposed to help risks not getting used at all – no matter how good it is.

The guide is separated into several sections of related rules. I've tried to add the rationale behind the rules (if it's omitted I've assumed that is pretty obvious).

I didn't come up with all the rules out of nowhere - they are mostly based on my extensive career as a professional software engineer, feedback and suggestions from members of the Ruby community and various highly regarded Ruby programming resources, such as<a href="http://pragprog.com/book/ruby3/programming-ruby-1-9">"Programming Ruby 1.9"</a> and <a href="http://www.amazon.com/Ruby-Programming-Language-David-Flanagan/dp/0596516177">"The Ruby Programming Language"</a>.

The guide is still a work in progress - some rules are lacking examples, some rules don't have examples that illustrate them clearly enough. In due time these issues will be addressed - just keep them in mind for now.

You can generate a PDF or an HTML copy of this guide using <a href="https://github.com/TechnoGate/transmuter">Transmuter</a>.
<h2>Source Code Layout</h2>
<blockquote>Nearly everybody is convinced that every style but their own is ugly and unreadable. Leave out the "but their own" and they're probably right... 
-- Jerry Coffin (on indentation)</blockquote>
<ul>
	<li>Use <code>UTF-8</code> as the source file encoding.</li>
	<li>Use two <strong>spaces</strong> per indentation level.
<div>
<pre># good
def some_method
  do_something
end

# bad - four spaces
def some_method
    do_something
end</pre>
</div></li>
	<li>Use Unix-style line endings. (*BSD/Solaris/Linux/OSX users are covered by default, Windows users have to be extra careful.)
<ul>
	<li>If you're using Git you might want to add the following configuration setting to protect your project from Windows line endings creeping in:

<code>$ git config --global core.autocrlf true</code></li>
</ul>
</li>
	<li>Use spaces around operators, after commas, colons and semicolons, around <code>{</code> and before <code>}</code>. Whitespace might be (mostly) irrelevant to the Ruby interpreter, but its proper use is the key to writing easily readable code.
<div>
<pre>sum = 1 + 2
a, b = 1, 2
1 &gt; 2 ? true : false; puts 'Hi'
[1, 2, 3].each { |e| puts e }</pre>
</div>
The only exception is when using the exponent operator:
<div>
<pre># bad
e = M * c ** 2

# good
e = M * c**2</pre>
</div></li>
	<li>No spaces after <code>(</code>, <code>[</code> or before <code>]</code>, <code>)</code>.
<div>
<pre>some(arg).other
[1, 2, 3].length</pre>
</div></li>
	<li>Indent <code>when</code> as deep as <code>case</code>. I know that many would disagree with this one, but it's the style established in both the "The Ruby Programming Language" and "Programming Ruby".
<div>
<pre>case
when song.name == 'Misty'
  puts 'Not again!'
when song.duration &gt; 120
  puts 'Too long!'
when Time.now.hour &gt; 21
  puts "It's too late"
else
  song.play
end

kind = case year
       when 1850..1889 then 'Blues'
       when 1890..1909 then 'Ragtime'
       when 1910..1929 then 'New Orleans Jazz'
       when 1930..1939 then 'Swing'
       when 1940..1950 then 'Bebop'
       else 'Jazz'
       end</pre>
</div></li>
	<li>Use empty lines between <code>def</code>s and to break up a method into logical paragraphs.
<div>
<pre>def some_method
  data = initialize(options)

  data.manipulate!

  data.result
end

def some_method
  result
end</pre>
</div></li>
	<li>Align the parameters of a method call if they span over multiple lines.
<div>
<pre># starting point (line is too long)
def send_mail(source)
  Mailer.deliver(to: 'bob@example.com', from: 'us@example.com', subject: 'Important message', body: source.text)
end

# bad (normal indent)
def send_mail(source)
  Mailer.deliver(
    to: 'bob@example.com',
    from: 'us@example.com',
    subject: 'Important message',
    body: source.text)
end

# bad (double indent)
def send_mail(source)
  Mailer.deliver(
      to: 'bob@example.com',
      from: 'us@example.com',
      subject: 'Important message',
      body: source.text)
end

# good
def send_mail(source)
  Mailer.deliver(to: 'bob@example.com',
                 from: 'us@example.com',
                 subject: 'Important message',
                 body: source.text)
end</pre>
</div></li>
	<li>Use RDoc and its conventions for API documentation. Don't put an empty line between the comment block and the <code>def</code>.</li>
	<li>Keep lines fewer than 80 characters.</li>
	<li>Avoid trailing whitespace.</li>
</ul>
<h2>Syntax</h2>
<ul>
	<li>Use <code>def</code> with parentheses when there are arguments. Omit the parentheses when the method doesn't accept any arguments.
<div>
<pre> def some_method
   # body omitted
 end

 def some_method_with_arguments(arg1, arg2)
   # body omitted
 end</pre>
</div></li>
	<li>Never use <code>for</code>, unless you know exactly why. Most of the time iterators should be used instead. <code>for</code> is implemented in terms of<code>each</code> (so you're adding a level of indirection), but with a twist - <code>for</code> doesn't introduce a new scope (unlike <code>each</code>) and variables defined in its block will be visible outside it.
<div>
<pre>arr = [1, 2, 3]

# bad
for elem in arr do
  puts elem
end

# good
arr.each { |elem| puts elem }</pre>
</div></li>
	<li>Never use <code>then</code> for multi-line <code>if/unless</code>.
<div>
<pre># bad
if some_condition then
  # body omitted
end

# good
if some_condition
  # body omitted
end</pre>
</div></li>
	<li>Favor the ternary operator(<code>?:</code>) over <code>if/then/else/end</code> constructs. It's more common and obviously more concise.
<div>
<pre># bad
result = if some_condition then something else something_else end

# good
result = some_condition ? something : something_else</pre>
</div></li>
	<li>Use one expression per branch in a ternary operator. This also means that ternary operators must not be nested. Prefer <code>if/else</code>constructs in these cases.
<div>
<pre># bad
some_condition ? (nested_condition ? nested_something : nested_something_else) : something_else

# good
if some_condition
  nested_condition ? nested_something : nested_something_else
else
  something_else
end</pre>
</div></li>
	<li>Never use <code>if x: ...</code> - it is removed in Ruby 1.9. Use the ternary operator instead.
<div>
<pre># bad
result = if some_condition: something else something_else end

# good
result = some_condition ? something : something_else</pre>
</div></li>
	<li>Never use <code>if x; ...</code>. Use the ternary operator instead.</li>
	<li>Use <code>when x then ...</code> for one-line cases. The alternative syntax <code>when x: ...</code> is removed in Ruby 1.9.</li>
	<li>Never use <code>when x; ...</code>. See the previous rule.</li>
	<li>Use <code>&amp;&amp;/||</code> for boolean expressions, <code>and/or</code> for control flow. (Rule of thumb: If you have to use outer parentheses, you are using the wrong operators.)
<div>
<pre># boolean expression
if some_condition &amp;&amp; some_other_condition
  do_something
end

# control flow
document.saved? or document.save!</pre>
</div></li>
	<li>Avoid multi-line <code>?:</code> (the ternary operator), use <code>if/unless</code> instead.</li>
	<li>Favor modifier <code>if/unless</code> usage when you have a single-line body. Another good alternative is the usage of control flow <code>and/or</code>.
<div>
<pre># bad
if some_condition
  do_something
end

# good
do_something if some_condition

# another good option
some_condition and do_something</pre>
</div></li>
	<li>Favor <code>unless</code> over <code>if</code> for negative conditions (or control flow <code>or</code>).
<div>
<pre># bad
do_something if !some_condition

# good
do_something unless some_condition

# another good option
some_condition or do_something</pre>
</div></li>
	<li>Never use <code>unless</code> with <code>else</code>. Rewrite these with the positive case first.
<div>
<pre># bad
unless success?
  puts 'failure'
else
  puts 'success'
end

# good
if success?
  puts 'success'
else
  puts 'failure'
end</pre>
</div></li>
	<li>Don't use parentheses around the condition of an <code>if/unless/while</code>, unless the condition contains an assignment (see "Using the return value of <code>=</code>" below).
<div>
<pre># bad
if (x &gt; 10)
  # body omitted
end

# good
if x &gt; 10
  # body omitted
end

# ok
if (x = self.next_value)
  # body omitted
end</pre>
</div></li>
	<li>Omit parentheses around parameters for methods that are part of an internal DSL (e.g. Rake, Rails, RSpec), methods that are with "keyword" status in Ruby (e.g. <code>attr_reader</code>, <code>puts</code>) and attribute access methods. Use parentheses around the arguments of all other method invocations.
<div>
<pre>class Person
  attr_reader :name, :age

  # omitted
end

temperance = Person.new('Temperance', 30)
temperance.name

puts temperance.age

x = Math.sin(y)
array.delete(e)</pre>
</div></li>
	<li>Prefer <code>{...}</code> over <code>do...end</code> for single-line blocks. Avoid using <code>{...}</code> for multi-line blocks (multiline chaining is always ugly). Always use <code>do...end</code> for "control flow" and "method definitions" (e.g. in Rakefiles and certain DSLs). Avoid <code>do...end</code> when chaining.
<div>
<pre>names = ["Bozhidar", "Steve", "Sarah"]

# good
names.each { |name| puts name }

# bad
names.each do |name|
  puts name
end

# good
names.select { |name| name.start_with?("S") }.map { |name| name.upcase }

# bad
names.select do |name|
  name.start_with?("S")
end.map { |name| name.upcase }</pre>
</div>
Some will argue that multiline chaining would look OK with the use of {...}, but they should ask themselves - it this code really readable and can't the blocks contents be extracted into nifty methods.</li>
	<li>Avoid <code>return</code> where not required.
<div>
<pre># bad
def some_method(some_arr)
  return some_arr.size
end

# good
def some_method(some_arr)
  some_arr.size
end</pre>
</div></li>
	<li>Use spaces around the <code>=</code> operator when assigning default values to method parameters:
<div>
<pre># bad
def some_method(arg1=:default, arg2=nil, arg3=[])
  # do something...
end

# good
def some_method(arg1 = :default, arg2 = nil, arg3 = [])
  # do something...
end</pre>
</div>
While several Ruby books suggest the first style, the second is much more prominent in practice (and arguably a bit more readable).</li>
	<li>Avoid line continuation (\) where not required. In practice, avoid using line continuations at all.
<div>
<pre># bad
result = 1 - \
         2

# good (but still ugly as hell)
result = 1 \
         - 2</pre>
</div></li>
	<li>Using the return value of <code>=</code> (an assignment) is ok, but surround the assignment with parenthesis.
<div>
<pre># good - shows intented use of assignment
if (v = array.grep(/foo/)) ...

# bad
if v = array.grep(/foo/) ...

# also good - shows intended use of assignment and has correct precedence.
if (v = self.next_value) == "hello" ...</pre>
</div></li>
	<li>Use <code>||=</code> freely to initialize variables.
<div>
<pre># set name to Bozhidar, only if it's nil or false
name ||= 'Bozhidar'</pre>
</div></li>
	<li>Don't use <code>||=</code> to initialize boolean variables. (Consider what would happen if the current value happened to be <code>false</code>.)
<div>
<pre># bad - would set enabled to true even if it was false
enabled ||= true

# good
enabled = true if enabled.nil?</pre>
</div></li>
	<li>Avoid using Perl-style special variables (like <code>$0-9</code>, <code>$</code>`, etc. ). They are quite cryptic and their use in anything but one-liner scripts is discouraged.</li>
	<li>Never put a space between a method name and the opening parenthesis.
<div>
<pre># bad
f (3 + 2) + 1

# good
f(3 + 2) + 1</pre>
</div></li>
	<li>If the first argument to a method begins with an open parenthesis, always use parentheses in the method invocation. For example, write <code>f((3 + 2) + 1)</code>.</li>
	<li>Always run the Ruby interpreter with the <code>-w</code> option so it will warn you if you forget either of the rules above!</li>
	<li>When the keys of your hash are symbols use the Ruby 1.9 hash literal syntax.
<div>
<pre># bad
hash = { :one =&gt; 1, :two =&gt; 2 }

# good
hash = { one: 1, two: 2 }</pre>
</div></li>
	<li>Use the new lambda literal syntax.
<div>
<pre># bad
lambda = lambda { |a, b| a + b }
lambda.call(1, 2)

# good
lambda = -&gt;(a, b) { a + b }
lambda.(1, 2)</pre>
</div></li>
	<li>Use <code>_</code> for unused block parameters.
<div>
<pre># bad
result = hash.map { |k, v| v + 1 }

# good
result = hash.map { |_, v| v + 1 }</pre>
</div></li>
</ul>
<h2>Naming</h2>
<blockquote>The only real difficulties in programming are cache invalidation and naming things. 
-- Phil Karlton</blockquote>
<ul>
	<li>Use <code>snake_case</code> for methods and variables.</li>
	<li>Use <code>CamelCase</code> for classes and modules. (Keep acronyms like HTTP, RFC, XML uppercase.)</li>
	<li>Use <code>SCREAMING_SNAKE_CASE</code> for other constants.</li>
	<li>The names of predicate methods (methods that return a boolean value) should end in a question mark. (i.e. <code>Array#empty?</code>).</li>
	<li>The names of potentially "dangerous" methods (i.e. methods that modify <code>self</code> or the arguments, <code>exit!</code>, etc.) should end with an exclamation mark.</li>
	<li>When using <code>reduce</code> with short blocks, name the arguments <code>|a, e|</code> (accumulator, element).</li>
	<li>When defining binary operators, name the argument <code>other</code>.
<div>
<pre>def +(other)
  # body omitted
end</pre>
</div></li>
	<li>Prefer <code>map</code> over <code>collect</code>, <code>find</code> over <code>detect</code>, <code>select</code> over <code>find_all</code>, <code>reduce</code> over <code>inject</code> and <code>size</code> over <code>length</code>. This is not a hard requirement; if the use of the alias enhances readability, it's ok to use it. The rhyming methods are inherited from Smalltalk and are not common in other programming languages. The reason the use of <code>select</code> is encouraged over <code>find_all</code> is that it goes together nicely with <code>reject</code> and its name is pretty self-explanatory.</li>
</ul>
<h2>Comments</h2>
<blockquote>Good code is its own best documentation. As you're about to add a comment, ask yourself, "How can I improve the code so that this comment isn't needed?" Improve the code and then document it to make it even clearer. 
-- Steve McConnell</blockquote>
<ul>
	<li>Write self-documenting code and ignore the rest of this section. Seriously!</li>
	<li>Comments longer than a word are capitalized and use punctuation. Use <a href="http://en.wikipedia.org/wiki/Sentence_spacing">one space</a> after periods.</li>
	<li>Avoid superfluous comments.
<div>
<pre># bad
counter += 1 # increments counter by one</pre>
</div></li>
	<li>Keep existing comments up-to-date. No comment is better than an outdated comment.</li>
	<li>Avoid writing comments to explain bad code. Refactor the code to make it self-explanatory. (Do or do not - there is no try.)</li>
</ul>
<h2>Annotations</h2>
<ul>
	<li>Annotations should usually be written on the line immediately above the relevant code.</li>
	<li>The annotation keyword is followed by a colon and a space, then a note describing the problem.</li>
	<li>If multiple lines are required to describe the problem, subsequent lines should be indented two spaces after the <code>#</code>.
<div>
<pre>def bar
  # FIXME: This has crashed occasionally since v3.2.1. It may
  #   be related to the BarBazUtil upgrade.
  baz(:quux)
end</pre>
</div></li>
	<li>In cases where the problem is so obvious that any documentation would be redundant, annotations may be left at the end of the offending line with no note. This usage should be the exception and not the rule.
<div>
<pre>def bar
  sleep 100 # OPTIMIZE
end</pre>
</div></li>
	<li>Use <code>TODO</code> to note missing features or functionality that should be added at a later date.</li>
	<li>Use <code>FIXME</code> to note broken code that needs to be fixed.</li>
	<li>Use <code>OPTIMIZE</code> to note slow or inefficient code that may cause performance problems.</li>
	<li>Use <code>HACK</code> to note code smells where questionable coding practices were used and should be refactored away.</li>
	<li>Use <code>REVIEW</code> to note anything that should be looked at to confirm it is working as intended. For example:<code>REVIEW: Are we sure this is how the client does X currently?</code></li>
	<li>Use other custom annotation keywords if it feels appropriate, but be sure to document them in your project's <code>README</code> or similar.</li>
</ul>
<h2>Classes</h2>
<ul>
	<li>When designing class hierarchies make sure that they conform to the <a href="http://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov Substitution Principle</a>.</li>
	<li>Try to make your classes as <a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID</a> as possible.</li>
	<li>Always supply a proper <code>to_s</code> method for classes that represent domain objects.
<div>
<pre>class Person
  attr_reader :first_name, :last_name

  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end

  def to_s
    "#@first_name #@last_name"
  end
end</pre>
</div></li>
	<li>Use the <code>attr</code> family of functions to define trivial accessors or mutators.
<div>
<pre># bad
class Person
  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end

  def first_name
    @first_name
  end

  def last_name
    @last_name
  end
end

# good
class Person
  attr_reader :first_name, :last_name

  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end
end</pre>
</div></li>
	<li>Consider adding factory methods to provide additional sensible ways to create instances of a particular class.
<div>
<pre>class Person
  def self.create(options_hash)
    # body omitted
  end
end</pre>
</div></li>
	<li>Prefer <a href="http://en.wikipedia.org/wiki/Duck_typing">duck-typing</a> over inheritance.
<div>
<pre># bad
class Animal
  # abstract method
  def speak
  end
end

# extend superclass
class Duck &lt; Animal
  def speak
    puts 'Quack! Quack'
  end
end

# extend superclass
class Dog &lt; Animal
  def speak
    puts 'Bau! Bau!'
  end
end

# good
class Duck
  def speak
    puts 'Quack! Quack'
  end
end

class Dog
  def speak
    puts 'Bau! Bau!'
  end
end</pre>
</div></li>
	<li>Avoid the usage of class (<code>@@</code>) variables due to their "nasty" behavior in inheritance.
<div>
<pre>class Parent
  @@class_var = 'parent'

  def self.print_class_var
    puts @@class_var
  end
end

class Child &lt; Parent
  @@class_var = 'child'
end

Parent.print_class_var # =&gt; will print "child"</pre>
</div>
As you can see all the classes in a class hierarchy actually share one class variable. Class instance variables should usually be preferred over class variables.</li>
	<li>Assign proper visibility levels to methods (<code>private</code>, <code>protected</code>) in accordance with their intended usage. Don't go off leaving everything <code>public</code> (which is the default). After all we're coding in <em>Ruby</em> now, not in <em>Python</em>.</li>
	<li>Indent the <code>public</code>, <code>protected</code>, and <code>private</code> methods as much the method definitions they apply to. Leave one blank line above them.
<div>
<pre>class SomeClass
  def public_method
    # ...
  end

  private
  def private_method
    # ...
  end
end</pre>
</div></li>
	<li>Use <code>def self.method</code> to define singleton methods. This makes the methods more resistant to refactoring changes.
<div>
<pre>class TestClass
  # bad
  def TestClass.some_method
    # body omitted
  end

  # good
  def self.some_other_method
    # body omitted
  end

  # Also possible and convenient when you
  # have to define many singleton methods.
  class &lt;&lt; self
    def first_method
      # body omitted
    end

    def second_method_etc
      # body omitted
    end
  end
end</pre>
</div></li>
</ul>
<h2>Exceptions</h2>
<ul>
	<li>Don't suppress exceptions.
<div>
<pre>begin
  # an exception occurs here
rescue SomeError
  # the rescue clause does absolutely nothing
end</pre>
</div></li>
	<li>Don't use exceptions for flow of control.
<div>
<pre># bad
begin
  n / d
rescue ZeroDivisionError
  puts "Cannot divide by 0!"
end

# good
if n.zero?
  puts "Cannot divide by 0!"
else
  n / d</pre>
</div></li>
	<li>Avoid rescuing the <code>Exception</code> class.
<div>
<pre># bad 
begin
  # an exception occurs here
rescue
  # exception handling
end

# still bad
begin
  # an exception occurs here
rescue Exception
  # exception handling
end</pre>
</div></li>
	<li>Put more specific exceptions higher up the rescue chain, otherwise they'll never be rescued from.
<div>
<pre># bad
begin
  # some code
rescue Exception =&gt; e
  # some handling
rescue StandardError =&gt; e
  # some handling
end

# good
begin
  # some code
rescue StandardError =&gt; e
  # some handling
rescue Exception =&gt; e
  # some handling
end</pre>
</div></li>
	<li>Release external resources obtained by your program in an ensure block.
<div>
<pre>f = File.open("testfile")
begin
  # .. process
rescue
  # .. handle error
ensure
  f.close unless f.nil?
end</pre>
</div></li>
	<li>Favor the use of exceptions for the standard library over introducing new exception classes.</li>
</ul>
<h2>Collections</h2>
<ul>
	<li>Prefer <code>%w</code> to the literal array syntax when you need an array of strings.
<div>
<pre># bad
STATES = ['draft', 'open', 'closed']

# good
STATES = %w(draft open closed)</pre>
</div></li>
	<li>Avoid the creation of huge gaps in arrays.
<div>
<pre>arr = []
arr[100] = 1 # now you have an array with lots of nils</pre>
</div></li>
	<li>Use <code>Set</code> instead of <code>Array</code> when dealing with unique elements. <code>Set</code> implements a collection of unordered values with no duplicates. This is a hybrid of <code>Array</code>'s intuitive inter-operation facilities and <code>Hash</code>'s fast lookup.</li>
	<li>Use symbols instead of strings as hash keys.
<div>
<pre># bad
hash = { 'one' =&gt; 1, 'two' =&gt; 2, 'three' =&gt; 3 }

# good
hash = { one: 1, two: 2, three: 3 }</pre>
</div></li>
	<li>Avoid the use of mutable object as hash keys.</li>
	<li>Use the new 1.9 literal hash syntax in preference to the hashrocket syntax.
<div>
<pre># bad
hash = { :one =&gt; 1, :two =&gt; 2, :three =&gt; 3 }

# good
hash = { one: 1, two: 2, three: 3 }</pre>
</div></li>
	<li>Rely on the fact that hashes in 1.9 are ordered.</li>
	<li>Never modify a collection while traversing it.</li>
</ul>
<h2>Strings</h2>
<ul>
	<li>Prefer string interpolation instead of string concatenation:
<div>
<pre># bad
email_with_name = user.name + ' &lt;' + user.email + '&gt;'

# good
email_with_name = "#{user.name} &lt;#{user.email}&gt;"</pre>
</div></li>
	<li>Prefer single-quoted strings when you don't need string interpolation or special symbols such as <code>\t</code>, <code>\n</code>, <code>'</code>, etc.
<div>
<pre># bad
name = "Bozhidar"

# good
name = 'Bozhidar'</pre>
</div></li>
	<li>Don't use <code>{}</code> around instance variables being interpolated into a string.
<div>
<pre>class Person
  attr_reader :first_name, :last_name

  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end

  # bad
  def to_s
    "#{@first_name} #{@last_name}"
  end

  # good
  def to_s
    "#@first_name #@last_name"
  end
end</pre>
</div></li>
	<li>Avoid using <code>String#+</code> when you need to construct large data chunks. Instead, use <code>String#&lt;&lt;</code>. Concatenation mutates the string instance in-place and is always faster than <code>String#+</code>, which creates a bunch of new string objects.
<div>
<pre># good and also fast
html = ''
html &lt;&lt; '&lt;h1&gt;Page title&lt;/h1&gt;'

paragraphs.each do |paragraph|
  html &lt;&lt; "&lt;p&gt;#{paragraph}&lt;/p&gt;"
end</pre>
</div></li>
</ul>
<h2>Regular Expressions</h2>
<ul>
	<li>Don't use regular expressions if you just need plain text search in string: <code>string['text']</code></li>
	<li>For simple constructions you can use regexp directly through string index.
<div>
<pre>match = string[/regexp/]             # get content of matched regexp
first_group = string[/text(grp)/, 1] # get content of captured group
string[/text (grp)/, 1] = 'replace'  # string =&gt; 'text replace'</pre>
</div></li>
	<li>Use non capturing groups when you don't use captured result of parenthesis.
<div>
<pre>/(first|second)/   # bad
/(?:first|second)/ # good</pre>
</div></li>
	<li>Avoid using $1-9 as it can be hard to track what they contain. Named groups can be used instead.
<div>
<pre># bad
/(regexp)/ =~ string
...
process $1

# good
/(?&lt;meaningful_var&gt;regexp)/ =~ string
...
process meaningful_var</pre>
</div></li>
	<li>Character classes have only few special characters you should care about: <code>^</code>, <code>-</code>, <code>\</code>, <code>]</code>, so don't escape <code>.</code> or brackets in<code>[]</code>.</li>
	<li>Be careful with <code>^</code> and <code>$</code> as they match start/end of line, not string endings. If you want to match the whole string use: <code>\A</code> and<code>\Z</code>.
<div>
<pre>string = "some injection\nusername"
string[/^username$/]   # matches
string[/\Ausername\Z/] # don't match</pre>
</div></li>
	<li>Use <code>x</code> modifier for complex regexps. This makes them more readable and you can add some useful comments. Just be careful as spaces are ignored.
<div>
<pre>regexp = %r{
  start         # some text
  \s            # white space char
  (group)       # first group
  (?:alt1|alt2) # some alternation
  end
}x</pre>
</div></li>
	<li>For complex replacements <code>sub</code>/<code>gsub</code> can be used with block or hash.</li>
</ul>
<h2>Percent Literals</h2>
<ul>
	<li>Use <code>%w</code> freely.
<div>
<pre>STATES = %w(draft open closed)</pre>
</div></li>
	<li>Use <code>%()</code> for single-line strings which require both interpolation and embedded double-quotes. For multi-line strings, prefer heredocs.
<div>
<pre># bad (no interpolation needed)
%(&lt;div&gt;Some text&lt;/div&gt;)
# should be '&lt;div&gt;Some text&lt;/div&gt;'

# bad (no double-quotes)
%(This is #{quality} style)
# should be "This is #{quality} style"

# bad (multiple lines)
%(&lt;div&gt;\n&lt;span&gt;#{exclamation}&lt;/span&gt;\n&lt;/div&gt;)
# should be a heredoc.

# good (requires interpolation, has quotes, single line)
%(&lt;tr&gt;&lt;td&gt;#{name}&lt;/td&gt;)</pre>
</div></li>
	<li>Use <code>%r</code> only for regular expressions matching <em>more than</em> one '/' character.
<div>
<pre># bad
%r(\s+)

# still bad
%r(^/(.*)$)
# should be /^\/(.*)$/

# good
%r(^/blog/2011/(.*)$)</pre>
</div></li>
	<li>Avoid <code>%q</code>, <code>%Q</code>, <code>%x</code>, <code>%s</code>, and <code>%W</code>.</li>
	<li>Prefer <code>()</code> as delimiters for all <code>%</code> literals.</li>
</ul>
<h2>Metaprogramming</h2>
<ul>
	<li>Do not mess around in core classes when writing libraries. (Do not monkey patch them.)</li>
</ul>
<h2>Misc</h2>
<ul>
	<li>Write <code>ruby -w</code> safe code.</li>
	<li>Avoid hashes as optional parameters. Does the method do too much?</li>
	<li>Avoid methods longer than 10 LOC (lines of code). Ideally, most methods will be shorter than 5 LOC. Empty lines do not contribute to the relevant LOC.</li>
	<li>Avoid parameter lists longer than three or four parameters.</li>
	<li>If you really have to, add "global" methods to Kernel and make them private.</li>
	<li>Use class instance variables instead of global variables.
<div>
<pre>#bad
$foo_bar = 1

#good
class Foo
  class &lt;&lt; self
    attr_accessor :bar
  end
end

Foo.bar = 1</pre>
</div></li>
	<li>Avoid <code>alias</code> when <code>alias_method</code> will do.</li>
	<li>Use <code>OptionParser</code> for parsing complex command line options and <code>ruby -s</code> for trivial command line options.</li>
	<li>Code in a functional way, avoiding mutation when that makes sense.</li>
	<li>Avoid needless metaprogramming.</li>
	<li>Do not mutate arguments unless that is the purpose of the method.</li>
	<li>Avoid more than three levels of block nesting.</li>
	<li>Be consistent. In an ideal world, be consistent with these guidelines.</li>
	<li>Use common sense.</li>
</ul>
<h1>Contributing</h1>
Nothing written in this guide is set in stone. It's my desire to work together with everyone interested in Ruby coding style, so that we could ultimately create a resource that will be beneficial to the entire Ruby community.

Feel free to open tickets or send pull requests with improvements. Thanks in advance for your help!
<h1>Spread the Word</h1>
A community-driven style guide is of little use to a community that doesn't know about its existence. Tweet about the guide, share it with your friends and colleagues. Every comment, suggestion or opinion we get makes the guide just a little bit better. And we want to have the best possible guide, don't we?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>351</wp:post_id>
		<wp:post_date>2012-03-30 12:56:29</wp:post_date>
		<wp:post_date_gmt>2012-03-30 04:56:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-style-guide-en-md</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>windows Shell 脚本语法</title>
		<link></link>
		<pubDate>Fri, 06 Apr 2012 06:22:13 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=374</guid>
		<description></description>
		<content:encoded><![CDATA[windows Shell 脚本语法
扩展名是bat(在nt/2000/xp/2003下也可以是cmd)的文件就是批处理文件。
==== 注 =======================================
.bat是dos下的批处理文件
.cmd是nt内核命令行环境的另一种批处理文件
从 更广义的角度来看，unix的shell脚本以及其它操作系统甚至应用程序中由外壳进行解释执行的文本，都具有与批处理文件十分相似的作用，而且同样是由 专用解释器以行为单位解释执行，这种文本形式更通用的称谓是脚本语言。所以从某个程度分析，batch, unix shell, awk, basic, perl 等脚本语言都是一样的，只不过应用的范围和解释的平台各有不同而已。甚至有些应用程序仍然沿用批处理这一称呼，而其内容和扩展名与dos的批处理却又完全 不同。
===================================
首先批处理文件是一个文本文件，这个文件的每一行都是一条DOS命令（大部分时候就好象我们在DOS提示符下执行的命令行一样），你可以使用DOS下的Edit或者Windows的记事本(notepad)等任何文本文件编辑工具创建和修改批处理文件。
==== 注 ===================
批 处理文件中完全可以使用非dos命令，甚至可以使用不具有可执行特性的普通数据性文件，这缘于windows系统这个新型解释平台的涉入，使得批处理的应 用越来越"边缘化"。所以我们讨论的批处理应该限定在dos环境或者命令行环境中，否则很多观念和设定都需要做比较大的变动。
========================
其 次，批处理文件是一种简单的程序，可以通过条件语句(if)和流程控制语句(goto)来控制命令运行的流程，在批处理中也可以使用循环语句(for)来 循环执行一条命令。当然，批处理文件的编程能力与C语言等编程语句比起来是十分有限的，也是十分不规范的。批处理的程序语句就是一条条的DOS命令（包括 内部命令和外部命令），而批处理的能力主要取决于你所使用的命令。
==== 注 ==================
批 处理文件(batch file)也可以称之为批处理程序(batch program)，这一点与编译型语言有所不同，就c语言来说，扩展名为c或者cpp的文件可以称之为c语言文件或者c语言源代码，但只有编译连接后的 exe文件才可以称之为c语言程序。因为批处理文件本身既具有文本的可读性，又具有程序的可执行性，这些称谓的界限是比较模糊的。
===========================
第 三，每个编写好的批处理文件都相当于一个DOS的外部命令，你可以把它所在的目录放到你的DOS搜索路径(path)中来使得它可以在任意位置运行。一个 良好的习惯是在硬盘上建立一个bat或者batch目录（例如C:\BATCH），然后将所有你编写的批处理文件放到该目录中，这样只要在path中设置 上c:\batch，你就可以在任意位置运行所有你编写的批处理程序。
==== 注 =====
纯以dos系统而言，可执 行程序大约可以细分为五类，依照执行优先级由高到低排列分别是：DOSKEY宏命令（预先驻留内存），COMMAND.COM中的内部命令（根据内存的环 境随时进驻内存），以com为扩展名的可执行程序（由command.com 直接载入内存），以exe位扩展名的可执行程序（由command.com 重定位后载入内存），以bat位扩展名的批处理程序（由command.com 解释分析，根据其内容按优先级顺序调用第2，3，4，5种可执行程序，分析一行，执行一行，文件本身不载入内存）
============ 第 四，在DOS和Win9x/Me系统下，C:盘根目录下的AUTOEXEC.BAT批处理文件是自动运行批处理文件，每次系统启动时会自动运行该文件，你 可以将系统每次启动时都要运行的命令放入该文件中，例如设置搜索路径，调入鼠标驱动和磁盘缓存，设置系统环境变量等。下面是一个运行于Windows 98下的autoexec.bat的示例：
@ECHO OFF
PATH C:\WINDOWS;C:\WINDOWS\COMMAND;C:\UCDOS;C:\DOSTools;<br>
C:\SYSTOOLS;C:\WINTOOLS;C:\BATCH
LH SMARTDRV.EXE /X
LH DOSKEY.COM /insert
LH CTMOUSE.EXE
SET TEMP=D:\TEMP
SET TMP=D:\TEMP
==== 注 =====
AUTOEXEC.BAT为DOS系统的自动运行批处理文件，由COMMAND.COM启动时解释执行；
而在Win9x环境中，不仅增加支持了 DOSSTART.BAT, WINSTART.BAT 等许多其它自动运行的批处理文件，对AUTOEXEC.BAT 也增加了 .DOS .W40 .BAK .OLD .PWS 等许多变体以适应复杂的环境和多变的需求。
==== willsort 编注 =============
以 下关于命令的分类，有很多值得推敲的地方。常用命令中的@本不是命令，而dir、copy等也很常用的命令却没有列入, 而特殊命令中所有命令对我来说都是常用命令。建议将批处理所引用的命令分为内部命令、外部命令、第三方程序三类。而内部命令和外部命令中别有一类是专用于 或常用于批处理中的命令可称之为"批处理命令"。
以下摘录MS-DOS 6.22 帮助文档中关于"批处理命令"的文字，当然，其中有些概念和定义已经有些落后了。
批处理命令
批处理文件或批处理程序是一个包含若干MS-DOS命令的正文文件，扩展名为.BAT。当在命令提示符下敲入批处理程序的名称时，MS-DOS成组执行此批处理程序中的命令。
任何在命令提示符下可使用的命令都可用在批处理程序中。此外，下面MS-DOS命令是专门在批处理程序中使用的。
==========
常用命令
echo、@、call、pause、rem(小技巧：用::代替rem)是批处理文件最常用的几个命令，我们就从他们开始学起。
==== 注 ===========
首先, @ 不是一个命令, 而是DOS 批处理的一个特殊标记符, 仅用于屏蔽命令行回显. 下面是DOS命令行或批处理中可能会见到的一些特殊标记符:
CR(0D) 命令行结束符
Escape(1B) ANSI转义字符引导符
Space(20) 常用的参数界定符
Tab(09) ; = 不常用的参数界定符
+ COPY命令文件连接符
* ? 文件通配符
"" 字符串界定符
| 命令管道符
< > >> 文件重定向符
@ 命令行回显屏蔽符
/ 参数开关引导符
: 批处理标签引导符
% 批处理变量引导符
其次, :: 确实可以起到rem 的注释作用, 而且更简洁有效; 但有两点需要注意:
第一, 除了 :: 之外, 任何以 :开头的字符行, 在批处理中都被视作标号, 而直接忽略其后的所有内容, 只是为了与正常的标号相区别, 建议使用 goto 所无法识别的标号, 即在 :后紧跟一个非字母数字的一个特殊符号.
第 二, 与rem 不同的是, ::后的字符行在执行时不会回显, 无论是否用echo on打开命令行回显状态, 因为命令解释器不认为他是一个有效的命令行, 就此点来看, rem 在某些场合下将比 :: 更为适用; 另外, rem 可以用于 config.sys 文件中.
=====================
echo 表示显示此命令后的字符
echo off 表示在此语句后所有运行的命令都不显示命令行本身
@与echo off相象，但它是加在每个命令行的最前面，表示运行时不显示这一行的命令行（只能影响当前行）。
call 调用另一个批处理文件（如果不用call而直接调用别的批处理文件，那么执行完那个批处理文件后将无法返回当前文件并执行当前文件的后续命令）。
pause 运行此句会暂停批处理的执行并在屏幕上显示Press any key to continue...的提示，等待用户按任意键后继续
rem 表示此命令后的字符为解释行（注释），不执行，只是给自己今后参考用的（相当于程序中的注释）。
==== 注 =====
此处的描述较为混乱, 不如直接引用个命令的命令行帮助更为条理
-------------------------
ECHO
当程序运行时，显示或隐藏批处理程序中的正文。也可用于允许或禁止命令的回显。
在运行批处理程序时，MS-DOS一般在屏幕上显示（回显）批处理程序中的命令。
使用ECHO命令可关闭此功能。
语法
ECHO [ON|OFF]
若要用echo命令显示一条命令，可用下述语法：
echo [message]
参数
ON|OFF
指定是否允许命令的回显。若要显示当前的ECHO的设置，可使用不带参数的ECHO
命令。
message
指定让MS-DOS在屏幕上显示的正文。
-------------------
CALL
从一个批处理程序中调用另一个批处理程序，而不会引起第一个批处理的中止。
语法
CALL [drive:][path]filename [batch-parameters]
参数
[drive:][path]filename
指定要调用的批处理程序的名字及其存放处。文件名必须用.BAT作扩展名。

batch-parameters
指定批处理程序所需的命令行信息。
-------------------------------
PAUSE
暂停批处理程序的执行并显示一条消息，提示用户按任意键继续执行。只能在批处
理程序中使用该命令。
语法
PAUSE

REM
在批处理文件或CONFIG.SYS中加入注解。也可用REM命令来屏蔽命令（在CONFIG.SYS
中也可以用分号 ; 代替REM命令，但在批处理文件中则不能替代）。
语法
REM [string]
参数
string
指定要屏蔽的命令或要包含的注解。
=======================
例1：用edit编辑a.bat文件，输入下列内容后存盘为c:\a.bat，执行该批处理文件后可实现：将根目录中所有文件写入 a.txt中，启动UCDOS，进入WPS等功能。
　　批处理文件的内容为: 　　　　　　　 命令注释：
　　　　@echo off　　　　　　　　　　　不显示后续命令行及当前命令行
　　　　dir c:\*.* >a.txt　　　　　　　将c盘文件列表写入a.txt
　　　　call c:\ucdos\ucdos.bat　　　　调用ucdos
　　　　echo 你好 　　　　　　　　　　 显示"你好"
　　　　pause 　　　　　　　　　　　　 暂停,等待按键继续
　　　　rem 准备运行wps 　　　　　　　 注释：准备运行wps
　　　　cd ucdos　　　　　　　　　　　 进入ucdos目录
　　　　wps 　　　　　　　　　　　　　 运行wps　　
批处理文件的参数
批处理文件还可以像C语言的函数一样使用参数（相当于DOS命令的命令行参数），这需要用到一个参数表示符"%"。
%[1-9]表示参数，参数是指在运行批处理文件时在文件名后加的以空格（或者Tab）分隔的字符串。变量可以从%0到%9，%0表示批处理命令本身，其它参数字符串用%1到%9顺序表示。
例2：C:根目录下有一批处理文件名为f.bat，内容为：
@echo off
format %1
如果执行C:\>f a:
那么在执行f.bat时，%1就表示a:，这样format %1就相当于format a:，于是上面的命令运行时实际执行的是format a:
例3：C:根目录下一批处理文件名为t.bat，内容为:
@echo off
type %1
type %2
那么运行C:\>t a.txt b.txt
%1 : 表示a.txt
%2 : 表示b.txt
于是上面的命令将顺序地显示a.txt和b.txt文件的内容。
==== 注 ===============
参 数在批处理中也作为变量处理, 所以同样使用百分号作为引导符, 其后跟0-9中的一个数字构成参数引用符. 引用符和参数之间 (例如上文中的 %1 与 a: ) 的关系类似于变量指针与变量值的关系. 当我们要引用第十一个或更多个参数时, 就必须移动DOS 的参数起始指针. shift 命令正充当了这个移动指针的角色, 它将参数的起始指针移动到下一个参数, 类似C 语言中的指针操作. 图示如下:
初始状态, cmd 为命令名, 可以用 %0 引用
cmd arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10
^ ^ ^ ^ ^ ^ ^ ^ ^ ^
| | | | | | | | | |
%0 %1 %2 %3 %4 %5 %6 %7 %8 %9
经过1次shift后, cmd 将无法被引用
cmd arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10
^ ^ ^ ^ ^ ^ ^ ^ ^ ^
| | | | | | | | | |
%0 %1 %2 %3 %4 %5 %6 %7 %8 %9
经过2次shift后, arg1也被废弃, %9指向为空, 没有引用意义
cmd arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10
^ ^ ^ ^ ^ ^ ^ ^ ^
| | | | | | | | |
%0 %1 %2 %3 %4 %5 %6 %7 %8
遗憾的是, win9x 和DOS下均不支持 shift 的逆操作. 只有在 nt 内核命令行环境下, shift 才支持 /n 参数, 可以以第一参数为基准返复移动起始指针.
=================
特殊命令

if goto choice for是批处理文件中比较高级的命令，如果这几个你用得很熟练，你就是批处理文件的专家啦。

一、if 是条件语句，用来判断是否符合规定的条件，从而决定执行不同的命令。 有三种格式:
1、if [not] "参数" == "字符串" 待执行的命令
参数如果等于(not表示不等，下同)指定的字符串，则条件成立，运行命令，否则运行下一句。
例：if "%1"=="a" format a:
====
if 的命令行帮助中关于此点的描述为:
IF [NOT] string1==string2 command
在此有以下几点需要注意:
1. 包含字符串的双引号不是语法所必须的, 而只是习惯上使用的一种"防空"字符
2. string1 未必是参数, 它也可以是环境变量, 循环变量以及其他字符串常量或变量
3. command 不是语法所必须的, string2 后跟一个空格就可以构成一个有效的命令行
=============================
2、if [not] exist [路径\]文件名 待执行的命令
如果有指定的文件，则条件成立，运行命令，否则运行下一句。
如: if exist c:\config.sys type c:\config.sys
表示如果存在c:\config.sys文件，则显示它的内容。
****** 注 ********
也可以使用以下的用法:
if exist command
device 是指DOS系统中已加载的设备, 在win98下通常有:
AUX, PRN, CON, NUL
COM1, COM2, COM3, COM4
LPT1, LPT2, LPT3, LPT4
XMSXXXX0, EMMXXXX0
A: B: C: ...,
CLOCK$, CONFIG$, DblBuff$, IFS$HLP$
具体的内容会因硬软件环境的不同而略有差异, 使用这些设备名称时, 需要保证以下三点:
1. 该设备确实存在(由软件虚拟的设备除外)
2. 该设备驱动程序已加载(aux, prn等标准设备由系统缺省定义)
3. 该设备已准备好(主要是指a: b: ..., com1..., lpt1...等)
可通过命令 mem/d | find "device" /i 来检阅你的系统中所加载的设备
另 外, 在DOS系统中, 设备也被认为是一种特殊的文件, 而文件也可以称作字符设备; 因为设备(device)与文件都是使用句柄(handle)来管理的, 句柄就是名字, 类似于文件名, 只不过句柄不是应用于磁盘管理, 而是应用于内存管理而已, 所谓设备加载也即指在内存中为其分配可引用的句柄.
==================================
3、if errorlevel <数字> 待执行的命令
很 多DOS程序在运行结束后会返回一个数字值用来表示程序运行的结果(或者状态)，通过if errorlevel命令可以判断程序的返回值，根据不同的返回值来决定执行不同的命令(返回值必须按照从大到小的顺序排列)。如果返回值等于指定的数 字，则条件成立，运行命令，否则运行下一句。
如if errorlevel 2 goto x2
==== 注 ===========
返回值从大到小的顺序排列不是必须的, 而只是执行命令为 goto 时的习惯用法, 当使用 set 作为执行命令时, 通常会从小到大顺序排列, 比如需将返回码置入环境变量, 就需使用以下的顺序形式:
if errorlevel 1 set el=1
if errorlevel 2 set el=2
if errorlevel 3 set el=3
if errorlevel 4 set el=4
if errorlevel 5 set el=5
...
当然, 也可以使用以下循环来替代, 原理是一致的:
for %%e in (1 2 3 4 5 6 7 8...) do if errorlevel %%e set el=%%e
更高效简洁的用法, 可以参考我写的另一篇关于获取 errorlevel 的文章
出 现此种现象的原因是, if errorlevel 比较返回码的判断条件并非等于, 而是大于等于. 由于 goto 的跳转特性, 由小到大排序会导致在较小的返回码处就跳出; 而由于 set命令的 "重复" 赋值特性, 由大到小排序会导致较小的返回码 "覆盖" 较大的返回码.
另外, 虽然 if errorlevel=<数字> command 也是有效的命令行, 但也只是 command.com 解释命令行时将 = 作为命令行切分符而忽略掉罢了
===========================

二、goto 批处理文件运行到这里将跳到goto所指定的标号(标号即label，标号用:后跟标准字符串来定义)处，goto语句一般与if配合使用，根据不同的条件来执行不同的命令组。
如:
goto end
:end
echo this is the end
标号用":字符串"来定义，标号所在行不被执行。
==== willsort 编注
label 常被译为 "标签" , 但是这并不具有广泛的约定性.
goto 与 : 联用可实现执行中途的跳转, 再结合 if 可实现执行过程的条件分支, 多个 if 即可实现命令的分组, 类似 C 中 switch case 结构或者 Basic 中的 select case 结构, 大规模且结构化的命令分组即可实现高级语言中的函数功能. 以下是批处理和C/Basic在语法结构上的对照:
Batch C / Basic
goto&: goto&:
goto&:&if if{}&else{} / if&elseif&endif
goto&:&if... switch&case / select case
goto&:&if&set&envar... function() / function(),sub()
==================================
三、choice 使用此命令可以让用户输入一个字符（用于选择），从而根据用户的选择返回不同的errorlevel，然后于if errorlevel配合，根据用户的选择运行不同的命令。
注意：choice命令为DOS或者Windows系统提供的外部命令，不同版本的choice命令语法会稍有不同，请用choice /?查看用法。
choice的命令语法（该语法为Windows 2003中choice命令的语法，其它版本的choice的命令语法与此大同小异）：
CHOICE [/C choices] [/N] [/CS] [/T timeout /D choice] [/M text]
描述:
该工具允许用户从选择列表选择一个项目并返回所选项目的索引。
参数列表:
/C choices 指定要创建的选项列表。默认列表是 "YN"。
/N 在提示符中隐藏选项列表。提示前面的消息得到显示，
选项依旧处于启用状态。
/CS 允许选择分大小写的选项。在默认情况下，这个工具
是不分大小写的。
/T timeout 做出默认选择之前，暂停的秒数。可接受的值是从 0
到 9999。如果指定了 0，就不会有暂停，默认选项
会得到选择。
/D choice 在 nnnn 秒之后指定默认选项。字符必须在用 /C 选
项指定的一组选择中; 同时，必须用 /T 指定 nnnn。
/M text 指定提示之前要显示的消息。如果没有指定，工具只
显示提示。
/? 显示帮助消息。
注意:
ERRORLEVEL 环境变量被设置为从选择集选择的键索引。列出的第一个选
择返回 1，第二个选择返回 2，等等。如果用户按的键不是有效的选择，
该工具会发出警告响声。如果该工具检测到错误状态，它会返回 255 的
ERRORLEVEL 值。如果用户按 Ctrl+Break 或 Ctrl+C 键，该工具会返回 0
的 ERRORLEVEL 值。在一个批程序中使用 ERRORLEVEL 参数时，将参数降
序排列。
示例:
CHOICE /?
CHOICE /C YNC /M "确认请按 Y，否请按 N，或者取消请按 C。"
CHOICE /T 10 /C ync /CS /D y
CHOICE /C ab /M "选项 1 请选择 a，选项 2 请选择 b。"
CHOICE /C ab /N /M "选项 1 请选择 a，选项 2 请选择 b。"
==== willsort 编注 ===============================
我列出win98下choice的用法帮助, 已资区分
Waits for the user to choose one of a set of choices.
等待用户选择一组待选字符中的一个
CHOICE [/C[:]choices] [/N] [/S] [/T[:]c,nn] [text]
/C[:]choices Specifies allowable keys. Default is YN
指定允许的按键(待选字符), 默认为YN
/N Do not display choices and ? at end of prompt string.
不显示提示字符串中的问号和待选字符
/S Treat choice keys as case sensitive.
处理待选字符时大小写敏感
/T[:]c,nn Default choice to c after nn seconds
在 nn 秒后默认选择 c
text Prompt string to display
要显示的提示字符串
ERRORLEVEL is set to offset of key user presses in choices.
ERRORLEVEL 被设置为用户键入的字符在待选字符中的偏移值
如果我运行命令：CHOICE /C YNC /M "确认请按 Y，否请按 N，或者取消请按 C。"
屏幕上会显示：
确认请按 Y，否请按 N，或者取消请按 C。 [Y,N,C]?

例：test.bat的内容如下（注意，用if errorlevel判断返回值时，要按返回值从高到低排列）:
@echo off
choice /C dme /M "defrag,mem,end"
if errorlevel 3 goto end
if errorlevel 2 goto mem
if errorlevel 1 goto defrag
:defrag
c:\dos\defrag
goto end
:mem
mem
goto end
:end
echo good bye
此 批处理运行后，将显示"defrag,mem,end[D,M,E]?" ，用户可选择d m e ，然后if语句根据用户的选择作出判断，d表示执行标号为defrag的程序段，m表示执行标号为mem的程序段，e表示执行标号为end的程序段，每个 程序段最后都以goto end将程序跳到end标号处，然后程序将显示good bye，批处理运行结束。
四、for 循环命令，只要条件符合，它将多次执行同一命令。
语法：
对一组文件中的每一个文件执行某个特定命令。
FOR %%variable IN (set) DO command [command-parameters]
%%variable 指定一个单一字母可替换的参数。
(set) 指定一个或一组文件。可以使用通配符。
command 指定对每个文件执行的命令。
command-parameters
为特定命令指定参数或命令行开关。
例如一个批处理文件中有一行:
for %%c in (*.bat *.txt) do type %%c
则该命令行会显示当前目录下所有以bat和txt为扩展名的文件的内容。
==== willsort 编注 =====================================================
需要指出的是, 当()中的字符串并非单个或多个文件名时, 它将单纯被当作字符串替换, 这个特性再加上()中可以嵌入多个字符串的特性, 很明显 for 可以被看作一种遍历型循环.
当然, 在 nt/2000/xp/2003 系列的命令行环境中, for 被赋予了更多的特性, 使之可以分析命令输出或者文件中的字符串, 也有很多开关被用于扩展了文件替换功能.
========================================================================
批处理示例
1. IF-EXIST
1) 首先用记事本在C:\建立一个test1.bat批处理文件，文件内容如下：
@echo off
IF EXIST \AUTOEXEC.BAT TYPE \AUTOEXEC.BAT
IF NOT EXIST \AUTOEXEC.BAT ECHO \AUTOEXEC.BAT does not exist
然后运行它：
C:\>TEST1.BAT
如果C:\存在AUTOEXEC.BAT文件，那么它的内容就会被显示出来，如果不存在，批处理就会提示你该文件不存在。
2) 接着再建立一个test2.bat文件，内容如下：
@ECHO OFF
IF EXIST \%1 TYPE \%1
IF NOT EXIST \%1 ECHO \%1 does not exist
执行:
C:\>TEST2 AUTOEXEC.BAT
该命令运行结果同上。
说明：
(1) IF EXIST 是用来测试文件是否存在的，格式为
IF EXIST [路径+文件名] 命令
(2) test2.bat文件中的%1是参数，DOS允许传递9个批参数信息给批处理文件，分别为%1~%9(%0表示test2命令本身) ，这有点象编程中的实参和形参的关系，%1是形参，AUTOEXEC.BAT是实参。
==== willsort 编注 =====================================================
DOS没有 "允许传递9个批参数信息" 的限制, 参数的个数只会受到命令行长度和所调用命令处理能力的限制. 但是, 我们在批处理程序中, 在同一时刻只能同时引用10个参数, 因为 DOS只给出了 %0~%9这十个参数引用符.
========================================================================
3) 更进一步的，建立一个名为TEST3.BAT的文件，内容如下：
@echo off
IF "%1" == "A" ECHO XIAO
IF "%2" == "B" ECHO TIAN
IF "%3" == "C" ECHO XIN
如果运行：
C:\>TEST3 A B C
屏幕上会显示:
XIAO
TIAN
XIN
如果运行：
C:\>TEST3 A B
屏幕上会显示
XIAO
TIAN
在这个命令执行过程中，DOS会将一个空字符串指定给参数%3。
2、IF-ERRORLEVEL
建立TEST4.BAT，内容如下：
@ECHO OFF
XCOPY C:\AUTOEXEC.BAT D:\
IF ERRORLEVEL 1 ECHO 文件拷贝失败
IF ERRORLEVEL 0 ECHO 成功拷贝文件
然后执行文件:
C:\>TEST4
如果文件拷贝成功，屏幕就会显示"成功拷贝文件"，否则就会显示"文件拷贝失败"。
IF ERRORLEVEL 是用来测试它的上一个DOS命令的返回值的，注意只是上一个命令的返回值，而且返回值必须依照从大到小次序顺序判断。
因此下面的批处理文件是错误的：
@ECHO OFF
XCOPY C:\AUTOEXEC.BAT D:\
IF ERRORLEVEL 0 ECHO 成功拷贝文件
IF ERRORLEVEL 1 ECHO 未找到拷贝文件
IF ERRORLEVEL 2 ECHO 用户通过ctrl-c中止拷贝操作
IF ERRORLEVEL 3 ECHO 预置错误阻止文件拷贝操作
IF ERRORLEVEL 4 ECHO 拷贝过程中写盘错误
无论拷贝是否成功，后面的：
未找到拷贝文件
用户通过ctrl-c中止拷贝操作
预置错误阻止文件拷贝操作
拷贝过程中写盘错误
都将显示出来。
以下就是几个常用命令的返回值及其代表的意义：
backup
0 备份成功
1 未找到备份文件
2 文件共享冲突阻止备份完成
3 用户用ctrl-c中止备份
4 由于致命的错误使备份操作中止
diskcomp
0 盘比较相同
1 盘比较不同
2 用户通过ctrl-c中止比较操作
3 由于致命的错误使比较操作中止
4 预置错误中止比较
diskcopy
0 盘拷贝操作成功
1 非致命盘读/写错
2 用户通过ctrl-c结束拷贝操作
3 因致命的处理错误使盘拷贝中止
4 预置错误阻止拷贝操作
format
0 格式化成功
3 用户通过ctrl-c中止格式化处理
4 因致命的处理错误使格式化中止
5 在提示"proceed with format（y/n）?"下用户键入n结束
xcopy
0 成功拷贝文件
1 未找到拷贝文件
2 用户通过ctrl-c中止拷贝操作
4 预置错误阻止文件拷贝操作
5 拷贝过程中写盘错误
chkdsk
0 未找到错误
255 找到一个或多个错误
choice
0 用户按下ctrl+c/break
1 用户按下第一个键
255 检测到命令行中的错误条件
其它 用户按下的有效字符在列表中的位置
defrag
0 碎片压缩成功
1 出现内部错误
2 磁盘上没有空簇。要运行DEFRAG，至少要有一个空簇
3 用户用Ctrl+C退出了DEFRAG
4 出现一般性错误
5 DEFRAG在读簇时遇到错误
6 DEFRAG在写簇时遇到错误
7 分配空间有错
8 内存错
9 没有足够空间来压缩磁盘碎片
deltree
0 成功地删除一个目录
diskcomp
0 两盘相同
1 发现不同
2 按CTRL+C 终止了比较
3 出现严重错误
4 出现初始化错误
find
0 查找成功且至少找到了一个匹配的字符串
1 查找成功但没找到匹配的字符串
2 查找中出现了错误
keyb
0 键盘定义文件装入成功
1 使用了非法的键盘代码，字符集或语法
2 键盘定义文件坏或未找到
4 键盘、监视器通讯时出错
5 要求的字符集未准备好
move
0 成功地移动了指定的文件
1 发生了错误
msav /N
86 检查到了病毒
replace
0 REPLACE成功地替换或加入了文件
1 MS-DOS版本和REPLACE不兼容
2 REPLACE找不到源文件
3 REPLACE找不到源路径或目标路径
5 不能存取要替换的文件
8 内存不够无法执行REPLACE
11 命令行句法错误
restore
0 RESTORE成功地恢复了文件
1 RESTORE找不到要恢复的文件
3 用户按CTRL+C终止恢复过程
4 RESTORE因错误而终止
scandisk
0 ScanDisk在它检查的驱动器上未检测到任何错误
1 由于命令行的语法不对，不能运行ScanDisk
2 由于内存用尽或发生内部错误，ScanDisk意外终止
3 用户让ScanDisk中途退出
4 进行盘面扫描时，用户决定提前退出
254 ScanDisk找到磁盘故障并已全部校正
255 ScanDisk找到磁盘故障，但未能全部校正
setver
0 SETVER成功地完成了任务
1 用户指定了一个无效的命令开关
2 用户指定了一个非法的文件名
3 没有足够的系统内存来运行命令
4 用户指定了一个非法的版本号格式
5 SETVER在版本表中未找到指定的项
6 SETVER未找到SETVER.EXE文件
7 用户指定了一个非法的驱动器
8 用户指定了太多的命令行参数
9 SETVER检测到丢失了命令行参数
10 在读SETVER.EXE文件时，SETVER检测到发生错误
11 SETVER.EXE文件损坏
12 指定的SETVER.EXE文件不支持版本表
13 版本表中没有足够的空间存放新的项
14 在写SETVER.EXE文件时SETVER检测到发生错误
========================================================================
3、IF STRING1 == STRING2
建立TEST5.BAT，文件内容如下：
@echo off
IF "%1" == "A" FORMAT A:
执行：
C:\>TEST5 A
屏幕上就出现是否将A:盘格式化的内容。
注意：为了防止参数为空的情况，一般会将字符串用双引号（或者其它符号，注意不能使用保留符号）括起来。
如：if [%1]==[A] 或者 if %1*==A*
5、GOTO
建立TEST6.BAT，文件内容如下：
@ECHO OFF
IF EXIST C:\AUTOEXEC.BAT GOTO _COPY
GOTO _DONE
:_COPY
COPY C:\AUTOEXEC.BAT D:\
:_DONE
注意：
(1) 标号前是ASCII字符的冒号":"，冒号与标号之间不能有空格。
(2) 标号的命名规则与文件名的命名规则相同。
(3) DOS支持最长八位字符的标号，当无法区别两个标号时，将跳转至最近的一个标号。
==== willsort 编注 =====================================================
1)标号也称作标签(label)
2)标签不能以大多数的非字母数字字符开始, 而文件名中则可以使用很多
3)当无法区别两个标签时, 将跳转至位置最靠前的标签
========================================================================
6、FOR
建立C:\TEST7.BAT，文件内容如下：
@ECHO OFF
FOR %%C IN (*.BAT *.TXT *.SYS) DO TYPE %%C
运行：
C:\>TEST7
执行以后，屏幕上会将C:盘根目录下所有以BAT、TXT、SYS为扩展名的文件内容显示出来（不包括隐藏文件）。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>374</wp:post_id>
		<wp:post_date>2012-04-06 14:22:13</wp:post_date>
		<wp:post_date_gmt>2012-04-06 06:22:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows-shell-%e8%84%9a%e6%9c%ac%e8%af%ad%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="shell"><![CDATA[shell]]></category>
		<category domain="post_tag" nicename="windows"><![CDATA[windows]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ubuntu 下利用ndiswrapper安装无线网卡驱动</title>
		<link></link>
		<pubDate>Sat, 31 Mar 2012 13:49:14 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=375</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

首先 安装 ndiswrapper
ubuntu下也就是 ndisgtk   (用于安装无线网卡驱动)

sudo apt-get install ndisgtk

安装好了之后，找到你的无线网卡在windows下的驱动文件(含有.inf的目录)（可以从网上下载也可以从驱动盘中获得），将该目录中的文件拷到主目录的新建文件夹中，
执行 sudo ndiswrapper -i yourname.inf     //yourname是你驱动inf的文件名称
安装以后会在  /etc/ndiswrapper/  下面建立一个相应的目录youname，

到该目录下(cd /etc/ndiswrapper)执行  sudo ndiswrapper -l   //查看驱动安装ok了没 显示driver installed

写入配置文件：
sudo ndiswrapper -m           (让ndiswrapper在启动时自动加载,
无线网卡会在系统启动初始化hotplug subsysytem时装载(这时卡上的电源灯才会亮) )

modprobe ndiswrapper        （让linux加载ndiswrapper module）

这样就可以配置无线网卡了，在SSID中输入无线路由名，在“无线安全性”中选择“WPA及WPA2个人”，然后输入密码即可。

配置好后重启下无线网络即连接成功。

终端中的步骤：

sudo apt-get install ndisgtk

# sudo ndiswrapper -i net8192u.inf

cd /etc/ndiswrapper/

sudo ndiswrapper -l

sudo ndiswrapper -m

sudo ndiswrapper -mi   \\保证重启之后不再设置

sudo modprobe ndiswrapper

最后设置无线网络连接。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>375</wp:post_id>
		<wp:post_date>2012-03-31 21:49:14</wp:post_date>
		<wp:post_date_gmt>2012-03-31 13:49:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ubuntu-%e4%b8%8b%e5%88%a9%e7%94%a8ndiswrapper%e5%ae%89%e8%a3%85%e6%97%a0%e7%ba%bf%e7%bd%91%e5%8d%a1%e9%a9%b1%e5%8a%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="driver"><![CDATA[driver]]></category>
		<category domain="post_tag" nicename="ndisgtk"><![CDATA[ndisgtk]]></category>
		<category domain="category" nicename="ubuntu"><![CDATA[ubuntu]]></category>
		<category domain="post_tag" nicename="wifi"><![CDATA[wifi]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails Object Relationships and JSON Rendering</title>
		<link></link>
		<pubDate>Tue, 03 Apr 2012 14:46:11 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=378</guid>
		<description></description>
		<content:encoded><![CDATA[<code>class ModelA &lt; ActiveRecord::Base
  belongs_to :ModelB</code>

  ...

class ModelB &lt; ActiveRecord::Base
  has_many :ModelA

When calling the show action of the ModelA controller the returned JSON should show all ObjectAs that are children of the ObjectB of which the ObjectA in question is a child of.

By default you'll only get the JSON that represents <code>modelb</code> in your example above. But, you can tell Rails to include the other related objects as well:

<code>def export
  @export_data = ModelA.find(params[:id])
  respond_to do |format|
    format.html
    format.json { render :json =&gt; @export_data.to_json(:include =&gt; :modelb) }
  end
end
</code>

You can even tell it to exclude certain fields if you don't want to see them in the export:

<code>render :json =&gt; @export_data.to_json(:include =&gt; { :modelb =&gt; { :except =&gt; [:created_at, updated_at]}})</code>

Or, include only certain fields:

<code>
render :json =&gt; @export_data.to_json(:include =&gt; { :modelb =&gt; { :only =&gt; :name }})
</code>

And you can nest those as deeply as you need (let's say that ModelB also has_many ModelC):

<code>
render :json =&gt; @export_data.to_json(:include =&gt; { :modelb =&gt; { :include =&gt; :modelc }})</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>378</wp:post_id>
		<wp:post_date>2012-04-03 22:46:11</wp:post_date>
		<wp:post_date_gmt>2012-04-03 14:46:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-object-relationships-and-json-rendering</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="json-rendering"><![CDATA[JSON Rendering]]></category>
		<category domain="post_tag" nicename="object"><![CDATA[Object]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="relationships"><![CDATA[Relationships]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>免费的持续集成测试服务 --saberma</title>
		<link></link>
		<pubDate>Tue, 03 Apr 2012 15:18:00 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=392</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://github.com/saberma/shopqi">ShopQi</a> 大部分的功能都是被自动化测试覆盖的，每次代码提交之前如果都要在本地把所有测试跑一遍所花费的时间也不少。所以我们需要有一个服务器，代码提交后自动触发运行所有测试用例。

排除自建服务器这条路子，就只能在网上寻找了，优先考虑免费的

当时(几个月前)找的时候，travis-ci还没有出来，其他收费的持续集成也不太满意。
在一次偶然的机会，看到github上某个项目的README中显示了一个building status的图标，才发现了 <code>travis-ci</code>

从6月初使用到现在， <code>travis-ci</code> 的功能已经非常完善稳定，因此推荐给大家试用一下
<h2>travis-ci</h2>
A distributed build system for the open source community.
专为开源社区打造的分布式编译系统，也就是持续集成测试了。

<img src="http://saberma.me/images/article/travis/travis.png" alt="" />

它有以下特点:
<ol>
	<li>免费，虽然是免费，但比收费的还要简单好用!</li>
	<li>支持多语言: 支持Clojure Erlang Javascript(Node.js) PHP Ruby，我只试用了Ruby</li>
	<li>支持多环境: 例如同时测试项目在 ruby1.8.6, 1.9.2, 1.9.3, jruby等的运行情况，支持多数据库mysql, postgres等</li>
	<li>支持浏览器headless测试: 结合Xvfb可以跑集成测试了</li>
	<li>非侵入式，只需要一个.travis.yml，就可以了，项目不用做过多的改动</li>
</ol>
<h3>配置.travis.yml</h3>
项目的根目录要加入 <code>.travis.yml</code> 文件
在里面指定rvm使用的ruby版本，指定bundler的运行参数等等

可以参考 <a href="https://github.com/saberma/shopqi/blob/master/.travis.yml">.travis.yml</a>
<h3>使用</h3>
要有一个 <a href="https://github.com/saberma">github</a> 帐号，在 <a href="http://travis-ci.org/">travis-ci网站</a> 使用该帐号登录
在 <a href="http://travis-ci.org/profile">profile</a> 选中您要使用的 项目 就可以了

以后向github提交代码时，travis-ci就会自动跑测试了，测试結果会发送到邮箱

<img src="http://saberma.me/images/article/travis/building.png" alt="" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>392</wp:post_id>
		<wp:post_date>2012-04-03 23:18:00</wp:post_date>
		<wp:post_date_gmt>2012-04-03 15:18:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%8d%e8%b4%b9%e7%9a%84%e6%8c%81%e7%bb%ad%e9%9b%86%e6%88%90%e6%b5%8b%e8%af%95%e6%9c%8d%e5%8a%a1-saberma</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="travis-ci"><![CDATA[travis-ci]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<category domain="post_tag" nicename="%e6%8c%81%e7%bb%ad%e9%9b%86%e6%88%90%e6%b5%8b%e8%af%95"><![CDATA[持续集成测试]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails 3.1 Engines – Mountable or Full? – Part 1</title>
		<link></link>
		<pubDate>Mon, 09 Apr 2012 10:39:30 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=396</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

I decided to create my <a href="https://www.github.com/astjohn/cornerstone" target="_blank">first rails engine</a> about a week or so ago.  I figured this was a great way to learn Rails 3.1 and the new engine generator; however, I quickly ran into a problem.  Do I want a mountable or full engine?  <a title="http://stackoverflow.com/questions/6118905/rails-3-1-engine-vs-mountable-app" href="http://stackoverflow.com/questions/6118905/rails-3-1-engine-vs-mountable-app" target="_blank">What’s the difference anyway?</a>  At the time, a quick google search showed that not many people really knew. The Rails <a href="https://github.com/rails/rails/blob/master/railties/lib/rails/engine.rb">code comments</a> are great, but after reading them, I was still a bit confused.  For those of you out there in the same boat, here’s my attempt at highlighting some of the differences.
<h2>Full Engines</h2>
<h3>Engine Details</h3>
To generate a full engine, run <code>rails plugin new myengine --full</code> on the console. This will generate the engine’s basic structure.

The first thing I noticed was that the typical assets associated with a normal Rails application were not generated; <em>application.js</em> and <em>application.css</em> were not created. In fact, the application controller was completely omitted, alluding that perhaps a full engine is feared toward supplementing a parent application only. As far as routing goes, the engine’s route looked like this:
<div>
<div id="highlighter_57643">
<div><a href="http://www.astjohn.ca/2011/08/06/rails-31-engines-mountable-or-full-part-1/#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div>
<div>4</div></td>
<td>
<div>
<div><code># my_engine/config/routes.rb </code></div>
<div><code> </code></div>
<div><code>Rails.application.routes.draw </code><code>do</code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
… and the dummy application’s routes file looked like this:
<div>
<div id="highlighter_162083">
<div><a href="http://www.astjohn.ca/2011/08/06/rails-31-engines-mountable-or-full-part-1/#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div>
<div>4</div>
<div>5</div></td>
<td>
<div>
<div><code># my_engine/test/dummy/config/routes.rb </code></div>
<div><code> </code></div>
<div><code>Dummy::Application.routes.draw </code></div>
<div><code>  </code><code># route stuff </code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
Another item that was missing from the basic application structure was the database folder. For engine configuration, a full engine is not namespaced, so the <em>engine.rb</em> file was essentially blank.
<div>
<div id="highlighter_367735">
<div><a href="http://www.astjohn.ca/2011/08/06/rails-31-engines-mountable-or-full-part-1/#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div>
<div>4</div>
<div>5</div>
<div>6</div></td>
<td>
<div>
<div><code># my_engine/lib/my_engine/engine.rb </code></div>
<div><code> </code></div>
<div><code>module</code> <code>MyEngine </code></div>
<div><code>  </code><code>class</code> <code>Engine &lt; Rails::Engine </code></div>
<div><code>  </code><code>end</code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
Now, the <a title="https://github.com/rails/rails/blob/master/railties/lib/rails/engine.rb" href="https://github.com/rails/rails/blob/master/railties/lib/rails/engine.rb" target="_blank">rails comments</a> state that engines allow you to add a “subset of functionality to an existing Rails application.” Since the full engine is missing an application controller, it seems that its purpose is to plug into an existing application without namespacing to add functionality to the parent application. To test this theory, I generated a new application and referenced my engine in the parent application’s Gemfile.
<h3>Routing</h3>
Since the engine is not namespaced, the engine’s routes are incorporated into the parent application’s routes directly. To test this, I created a model within the engine called “Post”, along with the migration, controller, and helper to match. To create the migration, I also had to build the <em>my_engine/db/migrate/</em> folder, which was not created when I generated the engine. Running <code>rake routes</code> within the parent application resulted in the following:
<div>
<div id="highlighter_215592">
<div><a href="http://www.astjohn.ca/2011/08/06/rails-31-engines-mountable-or-full-part-1/#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div>
<div>4</div>
<div>5</div>
<div>6</div>
<div>7</div></td>
<td>
<div>
<div><code>    </code><code>posts </code><code>GET</code>    <code>/posts(.</code><code>:format</code><code>)          {</code><code>:action</code><code>=&gt;</code><code>"index"</code><code>, </code><code>:controller</code><code>=&gt;</code><code>"posts"</code><code>} </code></div>
<div><code>          </code><code>POST</code>   <code>/posts(.</code><code>:format</code><code>)          {</code><code>:action</code><code>=&gt;</code><code>"create"</code><code>, </code><code>:controller</code><code>=&gt;</code><code>"posts"</code><code>} </code></div>
<div><code> </code><code>new_post </code><code>GET</code>    <code>/posts/</code><code>new</code><code>(.</code><code>:format</code><code>)      {</code><code>:action</code><code>=&gt;</code><code>"new"</code><code>, </code><code>:controller</code><code>=&gt;</code><code>"posts"</code><code>} </code></div>
<div><code>edit_post </code><code>GET</code>    <code>/posts/</code><code>:id</code><code>/edit(.</code><code>:format</code><code>) {</code><code>:action</code><code>=&gt;</code><code>"edit"</code><code>, </code><code>:controller</code><code>=&gt;</code><code>"posts"</code><code>} </code></div>
<div><code>     </code><code>post </code><code>GET</code>    <code>/posts/</code><code>:id</code><code>(.</code><code>:format</code><code>)      {</code><code>:action</code><code>=&gt;</code><code>"show"</code><code>, </code><code>:controller</code><code>=&gt;</code><code>"posts"</code><code>} </code></div>
<div><code>          </code><code>PUT</code>    <code>/posts/</code><code>:id</code><code>(.</code><code>:format</code><code>)      {</code><code>:action</code><code>=&gt;</code><code>"update"</code><code>, </code><code>:controller</code><code>=&gt;</code><code>"posts"</code><code>} </code></div>
<div><code>          </code><code>DELETE</code> <code>/posts/</code><code>:id</code><code>(.</code><code>:format</code><code>)      {</code><code>:action</code><code>=&gt;</code><code>"destroy"</code><code>, </code><code>:controller</code><code>=&gt;</code><code>"posts"</code><code>}</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
As you can see, the Post routes from the engine were included directly into the parent application.

After running <code>rake my_engine:install:migrations</code> and <code>rake db:migrate</code> in the parent application, I was ready to test how the engine’s controllers and helpers would integrate. In my engine, I had a simple view template:
<div>
<div id="highlighter_606207">
<div><a href="http://www.astjohn.ca/2011/08/06/rails-31-engines-mountable-or-full-part-1/#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div></td>
<td>
<div>
<div><code># my_engine/app/views/posts/index.html.erb </code></div>
<div><code> </code></div>
<div><code>&lt;p&gt;Hi There!&lt;/p&gt;</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
Of course, navigating to <em>/posts</em> in the parent application showed an almost blank page with the words “Hi There!” The controller actions and views from the engine were incorporated into the parent application.

One helpful feature of engines is the fact that their controller methods and views can be overridden simply by placing similar files within the parent application. For example, I created a new view template for the Post index action within the parent application that looked like this:
<div>
<div id="highlighter_860835">
<div><a href="http://www.astjohn.ca/2011/08/06/rails-31-engines-mountable-or-full-part-1/#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div></td>
<td>
<div>
<div><code># parent_app/app/views/posts/index.html.erb </code></div>
<div><code> </code></div>
<div><code>&lt;p&gt;Good Bye!&lt;/p&gt;</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
Now visiting <em>/posts</em> in the parent application shows “Good Bye!” That’s great, but what about the engine’s helpers? I tested that functionality by adding a method to the Post helper back inside the engine.
<div>
<div id="highlighter_870319">
<div><a href="http://www.astjohn.ca/2011/08/06/rails-31-engines-mountable-or-full-part-1/#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div>
<div>4</div>
<div>5</div>
<div>6</div>
<div>7</div>
<div>8</div>
<div>9</div></td>
<td>
<div>
<div><code># my_engine/app/helpers/posts_helper.rb </code></div>
<div><code> </code></div>
<div><code>module</code> <code>PostsHelper </code></div>
<div><code> </code></div>
<div><code>  </code><code>def</code> <code>test </code></div>
<div><code>    </code><code>raw(</code><code>"&lt;p&gt;hello world&lt;/p&gt;"</code><code>) </code></div>
<div><code>  </code><code>end</code></div>
<div><code> </code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
I then changed the parent application’s view template to use the helper.
<div>
<div id="highlighter_258772">
<div><a href="http://www.astjohn.ca/2011/08/06/rails-31-engines-mountable-or-full-part-1/#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div>
<div>4</div></td>
<td>
<div>
<div><code># parent_app/app/views/posts/index.html.erb </code></div>
<div><code> </code></div>
<div><code>&lt;p&gt;Good Bye!&lt;/p&gt; </code></div>
<div><code>&lt;%= test %&gt;</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
This time, visiting the page again in the parent application resulted in the words “Good Bye!” and “hello world.” Therefore, the engine’s helper methods were directly exposed to the parent application, allowing the parent to use them.
<h3>Summary</h3>
In summary, it seems as though full engines are best suited to augment a parent application. The engine routes, controllers, models, helpers, etc. are exposed to the parent application which allows for easy access, but could result in namespace conflicts.

It looks like this post is getting a bit lengthy so I’ll stop it here and talk about mountable engines soon.

</div>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>396</wp:post_id>
		<wp:post_date>2012-04-09 18:39:30</wp:post_date>
		<wp:post_date_gmt>2012-04-09 10:39:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-3-1-engines-%e2%80%93-mountable-or-full-%e2%80%93-part-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="engine"><![CDATA[engine]]></category>
		<category domain="post_tag" nicename="mountable"><![CDATA[mountable]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails 3.1 Engines – Mountable or Full? – Part 2</title>
		<link></link>
		<pubDate>Mon, 09 Apr 2012 10:40:52 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=398</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

This is a continuation of my post <a title="http://www.astjohn.ca/blog/rails-31-engines-mountable-or-full-part-1" href="http://www.astjohn.ca/blog/rails-31-engines-mountable-or-full-part-1" target="_blank">Rails 3.1 Engines – Mountable or Full? – Part 1</a> which highlights some key features of a full engine. There are a few differences with a mountable engine, which I will try to explain below.
<h2>Mountable Engines</h2>
<h3>Engine Details</h3>
To generate a mountable engine, run <code>rails plugin new myengine --mountable</code> on the console. This will generate the engine’s basic structure.

The first difference I noted with a mountable engine is that, by default, the engine is namespaced. The engine’s starting config is:
<div>
<div id="highlighter_331397">
<div><a href="http://www.astjohn.ca/2011/08/07/rails-31-engines-mountable-or-full-part-2#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div>
<div>4</div>
<div>5</div>
<div>6</div>
<div>7</div></td>
<td>
<div>
<div><code>module</code> <code>MyEngine </code></div>
<div><code># my_engine/lib/my_engine/engine.rb </code></div>
<div><code> </code></div>
<div><code>  </code><code>class</code> <code>Engine &lt; Rails::Engine </code></div>
<div><code>    </code><code>isolate_namespace MyEngine </code></div>
<div><code>  </code><code>end</code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
Since the engine has an isolated namespace, the controllers, models, helpers, etc. are all bundled within the module <em>MyEngine</em>. The folder structure reflects this change as well. Unlike a full engine, the mountable engine generated the typical assets that are normally associated with a Rails application, namely <em>application.js</em>, <em>application.css</em>, and <em>application_controller.rb</em>. Note the namespacing that occurs with the application controller:
<div>
<div id="highlighter_591938">
<div><a href="http://www.astjohn.ca/2011/08/07/rails-31-engines-mountable-or-full-part-2#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div>
<div>4</div>
<div>5</div>
<div>6</div></td>
<td>
<div>
<div><code># my_engine/app/controllers/my_engine/application_controller.rb </code></div>
<div><code> </code></div>
<div><code>module</code> <code>MyEngine </code></div>
<div><code>  </code><code>class</code> <code>ApplicationController &lt; ActionController::Base </code></div>
<div><code>  </code><code>end</code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
This namespacing occurs throughout the engine. There are subtle differences in terms of routing as well. With a mountable engine, the engine’s route file looks like this:
<div>
<div id="highlighter_217802">
<div><a href="http://www.astjohn.ca/2011/08/07/rails-31-engines-mountable-or-full-part-2#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div>
<div>4</div>
<div>5</div></td>
<td>
<div>
<div><code># my_engine/config/routes.rb </code></div>
<div><code> </code></div>
<div><code>MyEngine::Engine.routes.draw </code><code>do</code></div>
<div><code>  </code><code># route stuff goes here </code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
Remember, the full application’s routes start with <code>Rails.application.routes.draw</code>. The dummy application’s routes file was generated as:
<div>
<div id="highlighter_791594">
<div><a href="http://www.astjohn.ca/2011/08/07/rails-31-engines-mountable-or-full-part-2#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div>
<div>4</div>
<div>5</div>
<div>6</div></td>
<td>
<div>
<div><code># my_engine/test/dummy/config/routes.rb </code></div>
<div><code> </code></div>
<div><code>Rails.application.routes.draw </code><code>do</code></div>
<div><code> </code></div>
<div><code>  </code><code>mount MyEngine::Engine =&gt; </code><code>"/my_engine"</code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
Notice that the engine is bundled under a “mounted” route at <em>/my_engine</em>. This means that all of the engine’s functionality will be located under the engine’s root location of <em>/my_engine</em> within the dummy (parent) application. This type of structure suggests that a mountable engine is best suited for situations when a developer wants the engine to behave as its own application operating in parallel with the parent application. Most of the engine’s features are isolated and independent of the parent application. To test this, I plugged the mountable engine into a test application.
<h3>Routing</h3>
I used a model within the engine called “Post”, along with the migration, controller, and helper to match (<code>rails generate scaffold post title:string body:text</code>). Now my engine’s routes file looks like this:
<div>
<div id="highlighter_669702">
<div><a href="http://www.astjohn.ca/2011/08/07/rails-31-engines-mountable-or-full-part-2#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div>
<div>4</div>
<div>5</div></td>
<td>
<div>
<div><code># my_engine/config/routes.rb </code></div>
<div><code> </code></div>
<div><code>MyEngine::Engine.routes.draw </code><code>do</code></div>
<div><code>  </code><code>resources </code><code>:posts</code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
With a full engine, the <em>Post</em> routes were included directly into the parent application automatically. This time, using the mountable engine and running <code>rake routes</code> within the parent application, nothing happened! That’s because I did not mount the engine in a similar manner to what the dummy application in our engine is using. The parent application’s route file had to be adjusted like so:
<div>
<div id="highlighter_791424">
<div><a href="http://www.astjohn.ca/2011/08/07/rails-31-engines-mountable-or-full-part-2#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div>
<div>4</div>
<div>5</div></td>
<td>
<div>
<div><code># parent_app/config/routes.rb </code></div>
<div><code> </code></div>
<div><code>ParentApp::Application.routes.draw </code><code>do</code></div>
<div><code> </code><code>mount MyEngine::Engine =&gt; </code><code>"/my_engine"</code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<code>rake routes</code> now produced the following:
<div>
<div id="highlighter_402176">
<div><a href="http://www.astjohn.ca/2011/08/07/rails-31-engines-mountable-or-full-part-2#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div></td>
<td>
<div>
<div><code>my_engine  /my_engine {</code><code>:to</code><code>=&gt;MyEngine::Engine}</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
…and that’s it. All of the engine’s functionality is bundled into the parent application underneath the route <em>/my_engine</em>.

After running <code>rake my_engine:install:migrations</code> and <code>rake db:migrate</code> in the parent application, I was ready to test how the engine’s controllers and helpers would integrate. [note: running migrations from an isolated engine will prefix your database tables with the engine name]. As with the full engine, I established a simple view template:
<div>
<div id="highlighter_339249">
<div><a href="http://www.astjohn.ca/2011/08/07/rails-31-engines-mountable-or-full-part-2#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div></td>
<td>
<div>
<div><code># my_engine/app/views/my_engine/posts/index.html.erb </code></div>
<div><code> </code></div>
<div><code>&lt;p&gt;Hi There!&lt;/p&gt;</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
Of course, navigating to <em>/my_engine/posts</em> in the parent application showed an almost blank page with the words “Hi There!” The controller actions and views from the engine were incorporated into the parent application, but only under the namespaced route <em>/my_engine</em>.

Next, I tested if the view could be overridden by the parent application. I created a new view template for the <em>Post</em> index action within the parent application that looked like this:
<div>
<div id="highlighter_91729">
<div><a href="http://www.astjohn.ca/2011/08/07/rails-31-engines-mountable-or-full-part-2#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div></td>
<td>
<div>
<div><code># parent_app/app/views/posts/index.html.erb </code></div>
<div><code> </code></div>
<div><code>&lt;p&gt;Good Bye!&lt;/p&gt;</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
No change and of course not! Our engine is namespaced, remember? Instead, I moved the template to <code>parent_app/app/views/my_engine/posts/index.html.erb</code>. Now visiting <em>/my_engine/posts</em> in the parent application showed “Good Bye!” That’s better. Next I decided to test out the engine’s helpers. I added a method to the Post helper inside the engine.
<div>
<div id="highlighter_125857">
<div><a href="http://www.astjohn.ca/2011/08/07/rails-31-engines-mountable-or-full-part-2#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div>
<div>4</div>
<div>5</div>
<div>6</div>
<div>7</div>
<div>8</div>
<div>9</div></td>
<td>
<div>
<div><code># my_engine/app/helpers/my_engine/posts_helper.rb </code></div>
<div><code> </code></div>
<div><code>module</code> <code>MyEngine </code></div>
<div><code>  </code><code>module</code> <code>PostsHelper </code></div>
<div><code>    </code><code>def</code> <code>test </code></div>
<div><code>      </code><code>raw(</code><code>"&lt;p&gt;hello world&lt;/p&gt;"</code><code>) </code></div>
<div><code>    </code><code>end</code></div>
<div><code>  </code><code>end</code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
I then changed the parent application’s view template to use the helper.
<div>
<div id="highlighter_710583">
<div><a href="http://www.astjohn.ca/2011/08/07/rails-31-engines-mountable-or-full-part-2#">?</a></div>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>1</div>
<div>2</div>
<div>3</div>
<div>4</div></td>
<td>
<div>
<div><code># parent_app/app/views/posts/index.html.erb </code></div>
<div><code> </code></div>
<div><code>&lt;p&gt;Good Bye!&lt;/p&gt; </code></div>
<div><code>&lt;%= test %&gt;</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
Visiting the page resulted in the words “Good Bye!” and “hello world.” Therefore, the engine’s helper methods were directly exposed to the parent application, allowing the parent to use them.

To be honest, I did not expect this to work. There is a section in the <a href="https://github.com/rails/rails/blob/master/railties/lib/rails/engine.rb" target="_blank">Rails comments</a> about sharing an isolated engine’s helpers with the parent application by using <code>helper MyEngine::Engine.helpers</code> in the application controller of the parent. It states that in doing so “[the parent application] will include all of the helpers from engine’s directory.” Perhaps this is a bug in the release candidates of Rails 3.1? Maybe my interpretation of the instructions is way off? I’m not sure. If this does change by the time you use it, and you can’t access the engine’s helpers, I suggest trying the method described.
<h3>Summary</h3>
It seems as though mountable engines are best suited as complete applications in themselves which run along side a parent application. The engine routes, controllers, models, helpers, etc. are namespaced and bundled into the mounted route within the parent application, thus avoiding namespace conflicts. If I’m way off in my assessment or there are other things which I have missed, drop me a line and I’ll add them!

</div>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>398</wp:post_id>
		<wp:post_date>2012-04-09 18:40:52</wp:post_date>
		<wp:post_date_gmt>2012-04-09 10:40:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-3-1-engines-%e2%80%93-mountable-or-full-%e2%80%93-part-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="engine"><![CDATA[engine]]></category>
		<category domain="post_tag" nicename="mountable"><![CDATA[mountable]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>linux下svn命令大全 </title>
		<link></link>
		<pubDate>Tue, 10 Apr 2012 03:38:02 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=403</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>1、将文件checkout到本地目录</strong> <wbr>
svn checkout path（path是服务器 <wbr>上的目录）
例如：svn checkout svn://192.168.1.1/pro/domain
简写：svn co

<strong>2、往版本库中添加新的文件</strong> <wbr>
svn add file
例如：svn add test.php(添加test.php)
svn add *.php(添加当前目录下所有的php文件)

<strong>3、将改动的文件提交到版本库</strong> <wbr>
svn commit -m “LogMessage“ [-N] [--no-unlock] PATH(如果选择了保持锁，就使用–no-unlock开关)
例如：svn commit -m “add test file for my test“ test.php
简写：svn ci

<strong>4、加锁/解锁</strong> <wbr>
svn lock -m “LockMessage“ [--force] PATH
例如：svn lock -m “lock test file“ test.php
svn unlock PATH

<strong>5、更新到某个版本</strong> <wbr>
svn update -r m path
例如：
svn update如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本 <wbr>。
svn update -r 200 test.php(将版本库中的文件test.php还原到版本200)
svn update test.php(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先update，修改 <wbr>文件，然后清除svn resolved，最后再提交commit)
简写：svn up

<strong>6、查看文件或者目录状态</strong> <wbr>
1）svn status path（目录下的文件和子目录的状态，正常状态不显示）
【?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定】
2）svn status -v path(显示文件和子目录状态)
第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。
注：svn status、svn diff和 svn revert这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝。
简写：svn st

<strong>7、删除 <wbr>文件</wbr></strong> <wbr>
svn delete path -m “delete test fle“
例如：svn delete svn://192.168.1.1/pro/domain/test.php -m “delete test file”
或者直接svn delete test.php 然后再svn ci -m ‘delete test file‘，推荐使用这种
简写：svn (del, remove, rm)

<strong>8、查看日志</strong> <wbr>
svn log path
例如：svn log test.php 显示这个文件的所有修改记录，及其版本号的变化

<strong>9、查看文件详细信息 <wbr></wbr></strong>
svn info path
例如：svn info test.php

<strong>10、比较差异</strong> <wbr>
svn diff path(将修改的文件与基础版本比较)
例如：svn diff test.php
svn diff -r m:n path(对版本m和版本n比较差异)
例如：svn diff -r 200:201 test.php
简写：svn di

<strong>11、将两个版本之间的差异合并到当前文件</strong> <wbr>
svn merge -r m:n path
例如：svn merge -r 200:205 test.php（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下）

<strong>12、SVN 帮助</strong> <wbr>
svn help
svn help ci
——————————————————————————

以上是常用命令，下面写几个不经常用的

——————————————————————————

<strong>13、版本库下的文件和目录列表</strong> <wbr>
svn list path
显示path目录下的所有属于版本库的文件和目录
简写：svn ls

<strong>14、创建纳入版本控制下的新目录</strong> <wbr>
svn mkdir: 创建纳入版本控制下的新目录。
用法: 1、mkdir PATH…
2、mkdir URL…
创建版本控制的目录。
1、每一个以工作副本 PATH 指定的目录，都会创建在本地端，并且加入新增
调度，以待下一次的提交。
2、每个以URL指定的目录，都会透过立即提交于仓库中创建。
在这两个情况下，所有的中间目录都必须事先存在。

<strong>15、恢复本地修改</strong> <wbr>
svn revert: 恢复原始未改变的工作副本文件 (恢复大部份的本地修改)。revert:
用法: revert PATH…
注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复
被删除的目录


<strong>16、代码 <wbr>库URL变更</wbr></strong> <wbr>
svn switch (sw): 更新工作副本至不同的URL。
用法: 1、switch URL [PATH]
2、switch –relocate FROM TO [PATH...]

1、更新你的工作副本，映射到一个新的URL，其行为跟“svn update”很像，也会将
服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的
方法。
2、改写工作副本的URL元数据，以反映单纯的URL上的改变。当仓库的根URL变动
(比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用
这个命令更新工作副本与仓库的对应关系。
我的例子：svn switch --relocate <wbr><a href="http://59.41.99.254/mytt" rel="nofollow" target="_blank">http://59.41.99.254/mytt</a> <wbr><a href="http://www.mysvn.com/mytt" rel="nofollow" target="_blank">http://www.mysvn.com/mytt</a> <wbr>

<strong>17、解决 <wbr>冲突</wbr></strong> <wbr>
svn resolved: 移除工作副本的目录或文件的“冲突”状态。
用法: resolved PATH…
注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的
相关文件，然后让 PATH 可以再次提交。

<strong>18、输出指定文件或URL的内容。</strong> <wbr>
svn cat 目标[@版本]…如果指定了版本，将从指定的版本开始查找。
svn cat -r PREV filename &gt; filename (PREV 是上一版本,也可以写具体版本号,这样输出结果是可以提交的)</wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr>

<strong>19、</strong> <wbr><strong><a name="svn-ch-3-sect-7.1" rel="nofollow"></a>查找工作拷贝中的所有遗留的日志文件，删除进程中的锁 <wbr></wbr></strong><strong>。</strong></wbr>

<a name="svn-ch-3-sect-7.1" rel="nofollow"></a>当Subversion改变你的工作拷贝（或是<code>.svn</code> <wbr>中 的任何信息），它会尽可能的小心，在修改任何事情之前，它把意图写到日志文件中去，然后执行log文件中的命令，然后删掉日志文件，这与分类帐的文件系统 架构类似。如果Subversion的操作中断了（举个例子：进程被杀死了，机器死掉了），日志文件会保存在硬盘上，通过重新执行日志文 件，Subversion可以完成上一次开始的操作，你的工作拷贝可以回到一致的状态。</wbr>

<a name="svn-ch-3-sect-7.1" rel="nofollow"></a>这就是<strong>svn cleanup</strong> <wbr>所作的：它查找工作拷贝中的所有遗留的日志文件，删除进程中的锁。如果Subversion告诉你工作拷贝中的一部分已经“锁定 <wbr>”了，你就需要运行这个命令了。同样，<strong>svn status</strong> <wbr>将会使用<code>L</code> <wbr>显示锁定的项目：</wbr></wbr></wbr></wbr>
<pre><a name="svn-ch-3-sect-7.1" rel="nofollow"></a>$ svn status
 L somedir
 M somedir/foo.c 
 
 $ svn cleanup
 $ svn status
 M somedir/foo.c
 
 <strong>20、</strong>  <strong><a name="svn-ch-3-sect-7.3" rel="nofollow"></a>拷贝用户的一个未被版本化的目录树到版本库。
 </strong></pre>
<a name="svn-ch-3-sect-7.3" rel="nofollow"></a><strong>svn import</strong> <wbr></wbr><a name="svn-ch-3-sect-7.3" rel="nofollow"></a>命令是拷贝用户的一个未被版本化的目录树到版本库最快的方法，如果需要，它也要建立一些中介文件。

<a name="svn-ch-3-sect-7.3" rel="nofollow"></a>$ svnadmin create /usr/local/svn/newrepos $ svn import mytree file:///usr/local/svn/newrepos/some/project Adding mytree/foo.c Adding mytree/bar.c Adding mytree/subdir Adding mytree/subdir/quux.h Committed revision 1.

<a name="svn-ch-3-sect-7.3" rel="nofollow"></a>在上一个例子里，将会拷贝目录<code>mytree</code> <wbr>到版本库的<code>some/project</code> <wbr>下：</wbr></wbr>

<a name="svn-ch-3-sect-7.3" rel="nofollow"></a>$ svn list file:///usr/local/svn/newrepos/some/project bar.c foo.c subdir/

<a name="svn-ch-3-sect-7.3" rel="nofollow"></a>注意，在导入之后，原来的目录树并<em>没有</em> <wbr>转化成工作拷贝，为了开始工作，你还是需要运行<strong>svn checkout</strong> <wbr>导出一个工作拷贝。</wbr></wbr>

另附：为SVN <wbr>加入Email通知 <wbr>
可以通过Subversion的Hook脚本的方式为SVN <wbr>加入邮件列表功能 <wbr>
编译安装了Subversion后 在源码的tools 下有一个comm-email.pl的Perl脚本，在你的档案目录下有一个hooks目录，进入到hooks目录把post-commit.tmpl 改名为post-commit并给它可执行的权限。 <wbr>
更改post-commit脚本 把comm-email.pl脚本的决对路径加上，否则 <wbr>SVN <wbr>找不到comm-email.pl <wbr>

REPOS="$1" <wbr>
REV="$2" <wbr>
/usr/local/svn <wbr>/resp/commit-email.pl "$REPOS" "$REV" email@address1.com email@address2.com <wbr>
#log-commit.py --repository "$REPOS" --revision "$REV" <wbr>

最后一行是用来记日志的 我不用这个功能 所以注释掉了</wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr></wbr>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>403</wp:post_id>
		<wp:post_date>2012-04-10 11:38:02</wp:post_date>
		<wp:post_date_gmt>2012-04-10 03:38:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linux%e4%b8%8bsvn%e5%91%bd%e4%bb%a4%e5%a4%a7%e5%85%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="command"><![CDATA[command]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="svn"><![CDATA[svn]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>开源许可协议</title>
		<link></link>
		<pubDate>Wed, 11 Apr 2012 04:37:06 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=405</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>1       目的</h1>
<p align="left">为了让开发人员能够正确合法的使用开源软件，避免因为不小心而触犯到相关法律法规，产生不必要的法律纠纷，现对开源界的几大开原协议进行了翻译和整理。</p>

<h1>2       开源许可协议定义</h1>
<p align="left">自由软件/开源软件是自由的，免费的，源代码开放的，我们可自由下载安装和使用。同时，为了维护作者和贡献者的合法权利，保证这些软件不被一些商业机构或个人窃取，影响软件的发展，开源社区开发出了各种的开源许可协议。其中主要分三大类。</p>
<p align="left">OSI-Approved Open Source：被开放源码组织（www.opensource.org）所批准的开放源码授权协议。如常见的Apache，GPL，LGPL，MIT Licence，都属于OSI-Approved的授权协议，OSI 的要求之一是二进制文件和源代码的自由发放。</p>
<p align="left">Other/Proprietary License：其他的，私有的授权协议。指软件作者提供源代码，但是对软件的分发和发布有其他的限制。</p>
<p align="left">Public Domain：公共域授权。将软件授权为公共域，表示作者完全放弃版权，任何人都可以随意使用。</p>
<p align="left">大部分开源工程都属于OSI-Approved Open Source，下面对常见的License做简单的介绍。</p>

<h1>3       开源许可协议介绍</h1>
<h2>3.1              GNU GPL</h2>
<p align="left">GNU有两种协议其中一种为 General Public Licence (GPL) ，该协议有可能是开源界最常用的许可模式。GPL 保证了所有开发者的权利，同时为使用者提供了足够的复制，分发，修改的权利。主要条款如下：</p>

<ol>
	<li>使用者可以将软件自由的复制到任何地方。</li>
	<li>使用者可以以任何方式自由的分发，下载。注意分发的时候需要提供源代码和二进制文件。</li>
	<li>使用者可以盈利，基于 GPL 的软件允许商业化销售，但不允许封闭源代码。</li>
	<li>如果使用者对遵循 GPL 的软件进行任何改动和/或再次开发并予以发布，则使用者的产品必须继承 GPL 协议，不允许封闭源代码。</li>
</ol>
<p align="left">GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商 业软件公司开发的免费软件了。但对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。GPL3.0详见附录<a href="http://jhjguxin.sinaapp.com/wp-admin/post-new.php?post_type=post#_GPL3.0协议">4.1GPL3.0协议</a>。</p>

<h2>3.2              GNU LGPL</h2>
<p align="left">GNU 还有另外一种协议，叫做LGPL（Lesser General Public Licence），它对产品所保留的权利比GPL少，总的来说，LGPL适合那些用于非GPL或非开源产品的开源类库或框架。因为GPL要求，使用了GPL代码的产品必须也使用GPL协议，开发者不允许将GPL代码用于商业产品。而LGPL绕过了这一限制。</p>

<ol>
	<li>基于LGPL的软件也允许商业化销售，但不允许封闭源代码。</li>
	<li>如果您对遵循LGPL的软件进行任何改动和/或再次开发并予以发布，则您的产品必须继承LGPL协议，不允许封闭源代码。但是如果您的程序对遵循LGPL 的软件进行任何连接、调用而不是包含，则允许封闭源代码。</li>
</ol>
<p align="left">如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。具体条款详见<a href="http://jhjguxin.sinaapp.com/wp-admin/post-new.php?post_type=post#_LGPL_2.1协议">LGPL 2.1协议</a>。</p>

<h2>3.3              BSD</h2>
<p align="left">BSD授权许可证(FreeBSD Copyright Information)具有多种授权许可证。其中BSD 在软件分发方面的限制比别的开源协议（如GNU GPL）要少。该协议有多种版本，最主要的版本有两个，新BSD协议与简单BSD协议，这两种协议经过修正，都和 GPL 兼容，并为开源组织所认可。简单BSD协议主要条款如下：</p>

<ol>
	<li>使用者可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。</li>
	<li>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。</li>
	<li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。</li>
	<li>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</li>
</ol>
<p align="left">新版（也称“三句版”）BSD许可证规定，只要软件的版权申明和许可证的免责条款得以保存，软件可以以任何目的不受限制地分发。该许可证还包含如下条款：即未经许可，不得以软件贡献者的名字为软件的衍生产品做代言。这一条款正是新版BSD许可证与简版BSD许可证之间的主要区别。</p>

<h2>3.4              Apache license. 2.0</h2>
<p align="left">Apache Licence是著名的非盈利开源组织Apache采用的协议。Apache协议 2.0和别的开源协议相比，除了为用户提供版权许可之外，还有专利许可，对于那些涉及专利内容的开发者而言，该协议最适合。以下为Apache Licence的详细介绍：</p>

<ol>
	<li>需要授予使用代码的用户一份Apache Licence。一旦被授予许可，使用者可以无限期的使用。</li>
	<li>如果使用者修改了代码，需要再被修改的文件中说明。</li>
	<li>在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。</li>
	<li>如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。</li>
</ol>
<p align="left">以下是该授权关于对工作中使用的说明和限制：</p>
<p align="left">如果在工作中需要应用该授权，请附上如下样板式说明，以[]围起来，来替换你自己的说明信息。（不要包含括弧）文本通常被适当的文件语法格式所包围。我们也建议，一个文件或者类名和特定目的的描述，一起被包含在印刷页上，该印刷页作为一个简单的第三方文档授权证明。下为授权的文档格式。</p>

<blockquote> <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/" rel="license"><img src="http://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" alt="知识共享许可协议" /></a>
dreamcamp by <a href="http://jhjguxin.github.com/dreamcamp" rel="cc:attributionURL">Francis Jiang</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/" rel="license">Creative Commons 署名-非商业性使用-相同方式共享 3.0 Unported License</a>.
基于<a href="https://github.com/jhjguxin/dreamcamp" rel="dct:source">github.com</a>上的作品创作。

&nbsp;

## License
(The MIT License)

Copyright © 2009-2012 Francis Jiang

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‘Software’), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#### If you want to be awesome.
- Proudly display the 'Powered by Francis Jiang' credit in the footer.
- Add your site to the wiki so we can watch the communi</blockquote>
<h2>3.5    MIT许可协议（MIT License）</h2>
<p align="left">在所有常用的开源许可协议中，MIT许可协议最为简短，可能也最为广泛。它的条款非常松散，比起大部分其它许可协议来说更加宽松。其基本条款如下：</p>

<ol>
	<li>使用者可以随意使用，复制，修改这个软件。没有人能够阻止你在任何工程里使用它，你可以复制任意次数、以任何形式，或按你的愿望修改它。</li>
	<li>使用者可以向外免费发放，或出售。你可以随意的分发它，没有任何限制。</li>
	<li>唯一的限制是使用者必须接受协议条款。即软件必须附带版权和许可协议。</li>
	<li>MIT 协议是目前最少限制的协议。它基本上就是任何人可以对这个协议下的软件的做任何的事情，只要你能认可这个协议。</li>
</ol>
<h2>3.6    知识共享协议</h2>
<p align="left">知识共享（Creative Commons，简称CC）许可协议并非完全的开源许可协议，但设计类项目也常常使用。有各种不同的CC许可协议可供使用，每种授予特定的权利。一个CC许可证包含四个基本部分，每部分即可单独生效，又可联合使用。简述如下：</p>

<ol>
	<li>署名,使用者必须按照作者指定的方式对作品进行署名。除此之外，作品可被复制、分发、拷贝以及以其它方式使用。</li>
	<li>相同方式共享，即只能基于相同的CC许可证对作品进行修改、分发等。</li>
	<li>非商业性，作品可被修改、分发等，但不得以商业为目的进行。关于什么构成商业行为，许可证条款并未提供清晰的定义，因此使用者可能需要在自己的项目里给予澄清。比如说，有人认为“非商业”只是简单地意味着你不能出售作品，也有人认为你不能把作品放到一个带广告的网站上，还有人认为只有当牟利发生时才能称为“商业”。</li>
	<li>禁止衍生，即使用者可以拷贝和分发授权作品，但不得以任何方式修改、或基于原作进行创作。</li>
</ol>
<p align="left">如上所述，CC许可证的各个部分可以联合使用。最为严格的许可证为“署名-非商业-禁止衍生”许可证，即使用者可以自由分享作品，但不得修改或收费，同时必须按照作者指定的方式为作品署名。这对那些一方面希望发布作品，另一方面又希望多多少少保留对作品使用方式的控制权的作者来说，颇为不错。限制最少的CC许可证是“署名”许可证，即只要按照作者指定的方式为作品署名，就可以用作品做任何事。</p>
<p align="left">CC许可证在设计类作品中的应用要比在开发中的应用多，但并没有限制你在开发中使用它，只是要清楚各部分条款的细节。</p>

<h2>3.7    CPL(Common Public Liecense) vesion 1.0</h2>
<p align="left">CPL是IBM 提出的并通过了OSI（Open Source Initiative）批准的开源协议。主要用于一些IBM或跟IBM相关的开源软件 /项目中。如很著名的Java开发环境Eclipse、RIA开发平台Open Laszlo等。</p>
<p align="left">CPL也是一项对商业应用友好的协议。它允许使用者对源码进行任意的使用、复制、分发、传播、展示、修改以及改后做闭源的二次商业发布，这点跟BSD 很类似，也属于自由度比较高的开源协议。但是，需要遵循以下条款：</p>

<ol>
	<li>当使用者将源码的整体或部分再次开源发布的时候，必须继续遵循CPL 开源协议来发布，而不能改用其他协议发布。除非你得到了原“源码”Owner 的 授权。</li>
	<li>CPL协议下，使用者可以将源码不做任何修改来商业发布。但如果要将修改后的源码开源，而且当你再发布的是ObjectCode 的时候，你必须声明它的Source Code是可以获取的，而且要告知获取方法。</li>
	<li>当使用者需要将 CPL 下的源码作为一部分跟其他私有的源码混和着成为一个项目发布的时候，可以将整个项目/产品以私人的协议发布，但要声明哪一部分代码是CPL下的，而且声明那部分代码继续遵循CPL。独立的模块（Separate Module），不需要开源。</li>
</ol>
<h2>3.8              MPL协议</h2>
<p align="left">MPL是The Mozilla Public License的简写，是1998年初Netscape的 Mozilla小组为其开源软件项目设计的软件许可证。MPL许可证出现的最重要原因就是，Netscape公司认为GPL许可证没有很好地平衡开发者对源代码的需求和他们利用源代码获得的利益。同著名的GPL许可证和BSD许可证相比，MPL在许多权利与义务的约定方面与它们相同（因为都是符合OSIA认定的开源软件许可证）。但是，相比而言MPL还有以下几个显著的不同之处:</p>

<ol>
	<li>MPL允许免费重发布、免费修改，但要求修改后的代码版权归软件的发起者。这种授权维护了商业软件的利益，它要求基于这种软件得修改无偿贡献版权给该软件。这样，围绕该软件得所有代码得版权都集中在发起开发人得手中。但MPL是无偿使用得。MPL软件对链接没有要求。</li>
	<li>MPL要求对于经MPL许可证发布的源代码的修改也要以MPL许可证的方式再许可出来，以保证其他人可以在MPL的条款下共享源代码。但是，在MPL许可证中对“发布”的定义是“以源代码方式发布的文件”，这就意味着MPL允许一个企业在自己已有的源代码库上加一个接口，除了接口程序的源代码以MPL许可证的形式对外许可外，源代码库中的源代码就可以不用MPL许可证的方式强制对外许可。这些，就为借鉴别人的源代码用做自己商业软件开的行为留了一个豁口。</li>
	<li>MPL许可证第三条第7款中允许使用者将经过MPL许可证获得的源代码同自己其他类型的代码混合得到自己的软件程序。</li>
	<li>对软件专利的态度，MPL许可证不像GPL许可证那样明确表示反对软件专利，但是却明确要求源代码的提供者不能提供已经受专利保护的源代码（除非他本人是专利权人，并书面向公众免费许可这些源代码），也不能在将这些源代码以开放源代码许可证形式许可后再去申请与这些源代码有关的专利。</li>
	<li>MPL许可证第3条有专门的一款是关于对源代码修改进行描述的规定，就是要求所有再发布者都得有一个专门的文件就对源代码程序修改的时间和修改的方式有描述。</li>
</ol>
<h2>3.9              CDDL协议</h2>
<p align="left">CDDL全称Common Development and Distribution License.它是一个开源许可证书，采用著名的Mozilla公共许可证(MPL)，使其在未做任何改动的情况下可重用。CDDL满足 Open Source Definition 的要求并且已经获得开放源码促进会的认可作为开放源代码的许可证。</p>

<ol>
	<li>MPL作为CDDL的基础。除了保留所有所希望的MPL特性以外(参考前面)，CDDL许可证被设计成可重用的，并做了一些改进使其更加通用。</li>
	<li>对于任何遵守CDDL许可的源文件，以及使用者所做的任何修改都需要共享。但是不必将私有源文件共享。</li>
	<li>CDDL为在此许可下发布的代码提供了清楚的专利许可。这意味着使用者可以使用、修改并且重新发布CDDL授权的代码而不需要担心代码开发者(包括Sun)的任何技术专利。许可证同时包括了一项条款如果有任何人因为他们所提供的代码而对一个开发者进行专利起诉的话，该条款通过废除代码所有权来阻止任何对于开发者的专利指控。</li>
	<li>可以修改，然后遵守CDDL许可将代码重新发布，并可以进行收费。但是，需要遵循CDDL的条款，包括遵守CDDL许可将修改的代码共享。</li>
</ol>
<h1>4       附录</h1>
<h2>4.1     GPL3.0协议</h2>
<h3>4.1.1    导言</h3>
<p align="left">GNU通用公共授权是一份针对软件和其他种类作品的自由的、公共的授权文件。</p>
<p align="left">大多数软件授权申明被设计为剥夺您共享和修改软件的自由。相反地，GNU通用公共授权力图保护您分享和修改自由软件地自由——以确保软件对所有使用者都是自由的。我们，自由软件基金会，对我们的大多数软件使用GNU通用公共授权；本授权同样适用于任何其作者以这种方式发布的软件。您也可以让您的软件使用本授权。</p>
<p align="left">当我们谈论自由软件时，我们指的是行为的自由，而非价格免费。GNU通用公共授权被设计为确保您拥有发布自由软件副本(以及为此收费，如果您希望的话)的自由,确保您能收到源代码或者在您需要时能获取源代码，确保您能修改软件或者将它的一部分用于新的自由软件，并且确保您知道您能做这些事情。</p>
<p align="left">为了保护您的权利，我们需要做出要求，禁止任何人否认您的这些权利或者要求您放弃这些权利。因此，如果您发布此软件的副本或者修改它，您就需要肩负起尊重他人自由的责任。</p>
<p align="left">例如，如果您发布自由软件的副本，无论以免费还是以收费的模式，您都必须把您获得的自由同样的给予副本的接收者。您必须确保他们也能收到或者得到源代码。而且您必须向他们展示这些条款，以使他们知道自己享有这样的权利。</p>
<p align="left">使用GNU通用公共授权的开发者通过两项措施来保护您的权利：（1）声明软件的版权；（2）向您提供本授权文件以给您复制、发布并且/或者修改软件的法律许可。</p>
<p align="left">为了保护软件开发者和作者，通用公共授权明确阐释自由软件没有任何担保责任。如用户和软件作者所希望的，通用公共授权要求软件被修改过的版本必须明确标示，从而避免它们的问题被错误地归咎于先前的版本。</p>
<p align="left">某些设备被设计成拒绝用户安装或运行其内部软件的修改版本，尽管制造商可以安装和运行它们。这从根本上违背了通用公共授权保护用户能修改软件的自由的宗旨。此类滥用本授权的系统模式出现在了最让人无法接受的个人用户产品领域。因此，我们设计了这个版本的通用公共授权来禁止那些产品的侵权行为。如果此类问题在其他领域大量出现，我们准备好了在将来的通用公共授权版本里扩展这项规定，以保护用户的自由。</p>
<p align="left">最后，每个程序都经常受到软件专利的威胁。政府不应该允许专利权限制通用计算机软件的发展和使用，但是在政府确实允许这种事情的地区，我们希望避免应用于自由软件的专利权使该软件有效私有化的危险。为了阻止这样的事情的发生，通用公共授权确保没有人能够使用专利权使得自由软件非自由化。</p>
<p align="left">以下是复制，发布和修改软件的详细条款和条件。</p>

<h3>4.1.2    条款和条件</h3>
<h4>4.1.2.1 定义</h4>
<p align="left">“本授权”指GNU通用公共授权第三版。</p>
<p align="left">“版权”一词同样指适用于其他产品如半导体防护罩等的保护版权的法律。</p>
<p align="left">“本程序”指任何在本授权下发布的受版权保护的作品。被授权人称为“您”。“被授权人”和“版权接受者”可以是个人或组织。</p>
<p align="left">“修改”作品是指从软件中拷贝或者做出全部或一丁点儿的修改，这不同于逐字逐句的复制，是需要版权许可的。修改成果被称为先前作品的“修改版本”或者“基于”先前作品的软件。</p>
<p align="left">“覆盖程序”指未被修改过的本程序或者基于本程序的程序。</p>
<p align="left">“传播”程序指使用该程序做任何如果没有许可就会在适用的版权法下直接或间接侵权的事情，不包括在电脑上执行程序或者是做出您不与人共享的修改。传播包括复制，分发（无论修改与否），向公众共享，以及在某些国家的其他行为。</p>
<p align="left">“发布”作品指任何让其他组织制作或者接受副本的传播行为。仅仅通过电脑网络和一个用户交流，且没有发送程序拷贝的行为不是发布。</p>
<p align="left">一个显示“适当的法律通告”的交互的用户接口应包括这样一个方便而显著的可视部件，它具有以下功能：（1）显示一个合适的版权通告；（2）告诉用户对本程序没有任何担保责任（除非有担保明确告知），受权人可以在本授权下发布本程序，以及如果阅读本授权协议的副本。如果该接口显示了一个用户命令或选项列表，比如菜单，该列表中的选项需要符合上述规范。</p>

<h4>4.1.2.2  源代码</h4>
<p align="left">“源代码”指修改程序常用的形式。“目标代码”指程序的任何非源代码形式。</p>
<p align="left">“标准接口”有两种含义,一是由标准组织分支定义的官方标准；二是针对某种语言专门定义的众多接口中，在该类语言的开发者中广为使用的那种接口。</p>
<p align="left">可执行程序的“系统库”不是指整个程序，而是指任何包含于主要部件但不属于该部件的部分，并且只是为了使能该部件而开发，或者为了实现某些已有公开源代码的标准接口。“主要部件”在这里指的是执行程序的特定操作系统（如果有的话）的主要的关键部件（内核，窗口系统等），或者生成该可执行程序时使用的编译器，或者运行该程序的目标代码解释器。</p>
<p align="left">目标代码中的程序“对应的源代码”指所有生成，安装，（对可执行程序而言）运行该目标代码和修改该程序所需要的源代码，包括控制这些行为的脚本。但是，它不包括程序需要的系统库，通用目的的工具，以及程序在完成某些功能时不经修改地使用的那些不包括在程序中的普遍可用的自由软件。例如，对应的源代码包括与程序的源文件相关的接口定义文件，以及共享库中的源代码和该程序设计需要的通过如频繁的数据交互或者这些子程序和该程序其他部分之间的控制流等方式获得的动态链接子程序。</p>
<p align="left">对应的源代码不需要包含任何拥护可以从这些资源的其他部分自动再生的资源。</p>
<p align="left">源代码形式的程序对应的源代码定义同上。</p>

<h4>4.1.2.3 基本的许可</h4>
<p align="left">所有在本授权协议下授予的权利都是对本程序的版权而言，并且只要所述的条件都满足了，这些授权是不能收回的。本授权明确的确认您可以不受任何限制地运行本程序的未修改版本。运行一个本授权覆盖的程序获得的结果只有在该结果的内容构成一个覆盖程序的时候才由本授权覆盖。本授权承认您正当使用或版权法规定的其它类似行为的权利。</p>
<p align="left">只要您的授权仍然有效，您可以无条件地制作，运行和传播那些您不发布的覆盖程序。只要您遵守本授权中关于发布您不具有版权的资料的条款，您可以向别人发布覆盖程序，以要求他们为您做出专门的修改或者向您提供运行这些程序的简易设备。那些为您制作或运行覆盖程序的人作为您专门的代表也必须在您的指示和控制下做到这些，请禁止他们在他们和您的关系之外制作任何您拥有版权的程序的副本。当下述条件满足的时候，在任何其他情况下的发布都是允许的。转授许可证授权是不允许的，第10节让它变的没有必要了。</p>

<h4>4.1.2.4 保护用户的合法权利不受反破解法侵犯</h4>
<p align="left">在任何实现1996年通过的世界知识产权组织版权条约第11章中所述任务的法律，或者是禁止或限制这种破解方法的类似法律下，覆盖程序都不会被认定为有效的技术手段的一部分。</p>
<p align="left">当您发布一个覆盖程序时，您将放弃任何禁止技术手段破解的法律力量，甚至在本授权关于覆盖程序的条款下执行权利也能完成破解。同时，您放弃任何限制用户操作或修改该覆盖程序以执行您禁止技术手段破解的合法权利的企图。</p>

<h4>4.1.2.5 发布完整副本</h4>
<p align="left">你可以通过任何媒介发布本程序源代码的未被修改过的完整副本，只要您显著而适当地在每个副本上发布一个合适的版权通告；保持完整所有叙述本授权和任何按照第7节加入的非许可的条款；保持完整所有的免责申明；并随程序给所有的接受者一份本授权。</p>
<p align="left">您可以为您的副本收取任何价格的费用或者免费，你也可以提供技术支持或者责任担保来收取费用。</p>

<h4>4.1.2.6 发布修改过的源码版本</h4>
<p align="left">您可以在第4节的条款下以源码形式发布一个基于本程序的软件，或者从本程序中制作该软件需要进行的修改，只要您同时满足所有以下条件：</p>

<ol>
	<li>制作的软件必须包含明确的通告说明您修改了它，并给出相应的修改日期。</li>
	<li>制作的软件必须包含明确的通告，陈述它在本授权下发布并指出任何按照第7节加入的条件。这条要求修改了第4节的“保持所有通知完整”的要求。</li>
	<li>您必须把整个软件作为一个整体向任何获取副本的人按照本授权协议授权。本授权因此会和任何按照第7节加入的条款一起，对整个软件及其所有部分，无论是以什么形式打包的，起法律效力。本授权不允许以其他任何形式授权该软件，但如果您个别地收到这样的许可，本授权并不否定该许可。</li>
	<li>如果您制作的软件包含交互的用户接口，每个用户接口都必须显示适当的法律通告；但是，如果本程序包含没有显示适当的法律通告的交互接口，您的软件没有必要修改他们让他们显示。如果一个覆盖程序和其他本身不是该程序的扩展的程序的联合体，这样的联合的目的不是为了在某个存储或发布媒体上生成更大的程序，且联合体程序和相应产生的版权没有用来限制程序的使用或限制单个程序赋予的联合程序的用户的合法权利的时候，这样的联合体就被称为“聚集体”。在聚集体中包含覆盖程序并不会使本授权应用于该聚集体的其他部分。</li>
</ol>
<h4>4.1.2.7 发布非源码形式的副本</h4>
<p align="left">您可以在第4,5节条款下以目标代码形式发布程序，只要您同时以一下的一种方式在本授权条款下发布机器可读的对应的源代码：</p>

<ol>
	<li>在物理产品（包括一个物理的发布媒介）中或作为其一部分发布目标代码，并在通常用于软件交换的耐用的物理媒介中发布对应的源代码。</li>
	<li>在物理产品（包括一个物理的发布媒介）中或作为其一部分发布目标代码，并附上有效期至少3年且与您为该产品模型提供配件或客户服务的时间等长的书面承诺，给予每个拥有该目标代码的人（1）要么在通常用于软件交换的耐用物理媒介中，以不高于您执行这种源码的发布行为所花费的合理费用的价格，一份该产品中所有由本授权覆盖的软件的对应的源代码的拷贝；（2）要么通过网络服务器免费提供这些对应源代码的访问。</li>
	<li>单独地发布目标代码的副本，并附上一份提供对应源代码的书面承诺。这种行为只允许偶尔发生并不能盈利，且在您收到的目标代码附有第6节b规定的承诺的时候。</li>
	<li>在指定的地点（免费或收费地）提供发布的目标代码的访问并在同样的地点以不增加价格的方式提供对应源代码的同样的访问权。您不需要要求接收者在复制目标代码的时候一道复制对应的源代码。如果复制目标代码的地点是网络服务器，对应的源代码可以在另外一个支持相同复制功能的服务器上（由您或者第三方运作），只要您在目标代码旁边明确指出在哪里可以找到对应的源代码。无论什么样的服务器提供这些对应的源代码，您都有义务保证它在任何有需求的时候都可用，从而满足本条规定。</li>
	<li>用点对点传输发布目标代码，您需要告知其他的节点目标代码和对应的源代码在哪里按照第6节d的条款向大众免费提供。</li>
</ol>
<p align="left">目标代码中可分离的部分，其源代码作为系统库不包含在对应的源代码中，不需要包含在发布目标代码的行为中。</p>
<p align="left">“用户产品”指（1）“消费品”，即通常用于个人的、家庭的或日常目的的有形个人财产；或者（2）任何为公司设计或销售却卖给了个人的东西。在判断一个产品是否消费品时，有疑点的案例将以有利于覆盖面的结果加以判断。对特定用户接收到的特定产品，“正常使用”指该类产品的典型的或通常的使用，无论该用户的特殊情况，或者该用户实际使用该产品的情况，或者该产品要求的使用方式如何。一个产品是否是消费品与该产品是否具有实质的经济上的、工业的或非消费品的用处无关，除非该用处是此类产品唯一的重要使用模式。</p>
<p align="left">用户产品的“安装信息”指从对应源码的修改版本安装和运行该用户产品中包含的覆盖程序的修改版本所需要的任何方法、过程、授权密钥或其他信息。这些信息必须足以保证修改后的目标代码不会仅仅因为被修改过而不能继续运行。</p>
<p align="left">如果您在本节条款下在用户产品中，或随同，或专门为了其中的使用，发布目标代码程序，而在发布过程中用户产品的所有权和使用权都永久地或在一定时期内（无论此项发布的特点如何）传递给了接收者，在本节所述的条款下发布的对应的源代码必须包含安装信息。但是如果您或者任何第三方组织都没有保留在用户产品上安装修改过的目标代码的能力（比如程序被安装在了ROM上），那么这项要求不会生效。</p>
<p align="left">提供安装信息的要求并没有要求为接收者修改或安装过的程序，或者修改或安装该程序的用户产品，继续提供支持服务、担保或升级。当修改本身实际上相反地影响了网络的运行，或者违反了网络通信的规则和协议时，网络访问可以被拒绝。</p>
<p align="left">根据本节发布的对应源代码和提供的安装信息必须以公共的文件格式发布（并附加一个该类型文档的实现方法以源码形式向公众共享），解压缩、阅读或复制这些信息不能要求任何密码。</p>

<h4>4.1.2.8 附加条款</h4>
<p align="left">“附加许可”是通过允许一些本授权的特例来补充本授权的条款。只要它们在使用法律下合法，对整个程序都生效的附加许可就应当被认为是本授权的内容。如果附加许可只是对本程序的一部分生效，那么该部分可以在那些许可下独立使用，但整个程序是在本授权管理下，无论附加许可如何。</p>
<p align="left">当您发布覆盖程序的副本时，您可以选择删除该副本或其部分的任何附加许可。（当您修改程序时，附加许可可能要求在某些情况下将自身删除）。您可以把附加许可放在材料上，加入到您拥有或能授予版权许可的覆盖程序中。</p>
<p align="left">尽管本授权在别处有提供，对于您加入到程序中的材料，您可以（如果您由该材料的版权所有者授权的话）用以下条款补充本授权：</p>

<ol>
	<li>拒绝担保责任或以与本授权第15和16小节条款不同的方式限制责任；</li>
	<li> 要求保留特定的合理法律通告，或者该材料中或包含于适当法律通告中的该程序的作者贡献；</li>
	<li>禁止误传该材料的来源，或者要求该材料的修改版本以合理的方式标志为与原版本不同的版本；</li>
	<li>限制以宣传为目的的使用该材料作者或授权人的姓名；</li>
	<li>降低授权级别以在商标法下使用一些商品名称，商标或服务标记；</li>
	<li>要求任何发布该材料（或其修改版本）的人用对接收者的责任假设合同对授权人和材料作者进行保护，避免任何这样的假设合同直接造成授权人和作者的责任。</li>
</ol>
<p align="left">所有其他不许可的附加条款都被认为是第10节中的“进一步的约束”。如果您收到的程序或者其部分，声称自己由本授权管理，并补充了进一步约束，那么您可以删除这些约束。如果一个授权文件包含进一步约束，但是允许再次授权或者在本授权下发布，只要这样的进一步的约束在这样的再次授权或发布中无法保留下来，您就可以在覆盖程序中加入该授权文件条款管理下的材料。</p>
<p align="left">如果您依据本小节向覆盖程序添加条款,您必须在相关的源码文件中加入一个应用于那些文件的附加条款的声明或者指明在哪里可以找到这些条款的通告。</p>
<p align="left">附加的条款，无论是许可的还是非许可的条款，都可以写在一个单独的书面授权中，或者申明为例外情况；这两种方法都可以实现上述要求。</p>

<h4>4.1.2.9 终止授权</h4>
<p align="left">您只有在本授权的明确授权下才能传播或修改覆盖程序。任何其它的传播或修改覆盖程序的尝试都是非法的，并将自动终止您在本授权下获取的权利（包括依据第11节第三段条款授予的任何专利授权）。</p>
<p align="left">然而，如果您停止违反本授权，那么您从某个特定版权所有者处获取的授权许可能够以以下方式恢复（a）您可以暂时地拥有授权，直到版权所有者明确地终止您的授权；（b）如果在您停止违反本授权后的60天内，版权所有者没有以某种合理的方式告知您的违背行为，那么您可以永久地获取该授权。</p>
<p align="left">进一步地，如果某个版权所有者以某种合理的方式告知您违反本授权的行为，而这是您第一次收到来自该版权所有者的违反本授权的通知（对任何软件），并且在收到通知后30天内修正了违反行为，那么您从该版权所有者处获取的授权将永久地恢复。</p>
<p align="left">当您的授权在本节条款下被终止时，那些从您那获取授权的组织只要保持不违反本授权协议，其授权就不会被终止。您只有在授权被版权所有者恢复了之后才有资格依据第10节的条款获取该材料的新的授权。</p>

<h4>4.1.2.10         获取副本不需要接受本授权</h4>
<p align="left">您不需要为了接收或运行本程序的副本而接受本授权协议。仅仅是因为点对点传输获取副本引起传播行为，也不要求您接受本授权协议。然而，除了本授权外，任何授权协议都不能授予您传播或修改覆盖程序的许可。因此，如果您修改或者传播了本程序的副本，那么您就默认地接受了本授权。</p>

<h4>4.1.2.11         下游接收者的自动授权</h4>
<p align="left">每次您发布覆盖程序，接收者都自动获得一份来自原授权人的依照本授权协议运行、修改和传播该程序的授权。依据本授权，您不为执行任何第三方组织的要求负责。</p>
<p align="left">“实体事务”指转移一个组织的控制权或全部资产，或者拆分组织，或者合并组织的事务。如果覆盖程序的传播是实体事务造成的，该事务中每一个接收本程序副本的组织都将获取一份其前身拥有的或者能够依据前面的条款提供的任何授权，以及从其前身获取程序对应的源代码的权利，如果前身拥有或以合理的努力能够获取这些源代码的话。</p>
<p align="left">您不可以对从本授权协议获取或确认的权利的执行强加任何约束。比如，您不可以要求授权费用，版税要求或对从本授权获取的权利的执行收取任何费用。您不可以发起诉讼（包括联合诉讼和反诉）声称由于制作、使用、销售、批发或者引进本程序或其任何一部分而侵犯了任何专利权。</p>

<h4>4.1.2.12         专利权</h4>
<p align="left">“贡献者”是在本授权下授予本程序或者本程序所基于的程序的使用权的版权所有者。这样的程序被成为贡献者的“贡献者版本”。</p>
<p align="left">一个贡献者的“实质的专利申明”是该贡献者所占有和控制的全部专利，无论已经获得的还是在将来获得的，那些可能受到某种方式侵犯的专利权。本授权允许制作、使用和销售其贡献者版本，但不包括那些只会由于对贡献者版本进一步的修改而受到侵犯的专利的申明。为此，“控制”一词包括以同本授权要求一致的方式给予从属授权的权利。</p>
<p align="left">每个贡献者在该贡献者的实质的专利申明下授予您非独家的，全世界的，不需要版税的专利授权，允许您制作、使用、销售、批发、进口以及运行、修改和传播其贡献者版本内容。</p>
<p align="left">在以下三个自然段中，“专利授权”指任何形式表达的不执行专利权的协议或承诺（例如使用专利权的口头许可，或者不为侵犯专利而起诉的契约）。向一个组织授予专利授权指做出这样的不向该组织提出强制执行专利权的承诺。</p>
<p align="left">如果您在自己明确知道的情况下发布基于某个专利授权的覆盖程序，而这个程序的对应的源代码并不能在本授权条款下通过网络服务器或其他有效途径免费地向公众提供访问，您必须做到：（1）使对应的源代码按照上述方法可访问；或者（2）放弃从该程序的专利授权获取任何利益；或者（3）以某种与本授权要求一致的方法使该专利授权延伸到下游的接收者。“在自己明确知道的情况下”指您明确地知道除了获取专利授权外，在某个国家您传播覆盖程序的行为，或者接收者使用覆盖程序的行为，会由于该专利授权而侵犯一个或多个在该国可确认的专利权，而这些专利权您有足够的理由相信它们是有效的。</p>
<p align="left">在依照或者涉及某一次事务或安排时，如果您通过获取发布或传播覆盖程序的传输版本，并给予接收该覆盖程序的某些组织专利授权，允许他们使用，传播，修改或者发布该覆盖程序的特殊版本，那么您赋予这些组织的专利授权将自动延伸到所有该覆盖程序及基于该程序的作品的接收者。</p>
<p align="left">一份专利授权是“有偏见的”，如果它没有在自身所覆盖的范围内包含，禁止行使，或者要求不执行一个或多个本授权下明确认可的权利。以下情况，您不可以发布一个覆盖程序：如果您与软件发布行业的第三方组织有协议，而该协议要求您根据该程序的发布情况向该组织付费，同时该组织在你们的协议中赋予任何从您那里获得覆盖软件的组织一份有偏见的专利授权，要么（a）连同您所发布的副本（或者从这些副本制作的副本）；要么（b）主要为了并连同某个的产品或者包含该覆盖程序的联合体。如果您签署该协议或获得该专利授权的日期早于2007年3月28日，那么您不受本条款约束。</p>
<p align="left">本授权的任何部分不会被解释为拒绝或者限制任何暗含的授权或其他在适用专利权法下保护您的专利不受侵犯的措施。</p>

<h4>4.1.2.13         不要放弃别人的自由</h4>
<p align="left">如果您遇到了与本授权向矛盾的情况（无论是法庭判决，合同或者其他情况），它们不能使您免去本授权的要求。如果您不能同时按照本授权中的义务和其他相关义务来发布覆盖程序，那么您将不能发布它们。比如，如果您接受了要求您向从您这里或许本程序的人收取版税的条款，您唯一能够同时满足本授权和那些条款的方法是完全不要发布本程序。</p>

<h4>4.1.2.14         和GNU Affero通用公共授权一起使用</h4>
<p align="left">尽管本协议有其他防备条款，您有权把任何覆盖程序和基于第三版GNU Affero通用公共授权的程序链接起来，并且发布该联合程序。本授权的条款仍然对您的覆盖程序有效，但是GNU Affero通用公共授权第13节关于通过网络交互的要求会对整个联合体有效。</p>

<h4>4.1.2.15         本授权的修订版</h4>
<p align="left">自由软件基金会有时候可能会发布GNU通用软件授权的修订版本和/或新版本。这样的新版本将会和现行版本保持精神上的一致性，但是可能会在细节上有所不同，以处理新的问题和情况。</p>
<p align="left">每个版本都有一个单独的版本号。如果本程序指出了应用于本程序的一个特定的GNU通用公共授权版本号“以及后续版本”，您将拥有选择该版本或任何由自由软件基金会发布的后续版本中的条款和条件的权利。如果本程序没有指定特定的GNU通用公共授权版本号，那么您可以选择任何自由软件基金会已发布的版本。</p>
<p align="left">如果本程序指出某个代理可以决定将来的GNU通用公共授权是否可以应用于本程序，那么该代理的接受任何版本的公开称述都是您选择该版本应用于本程序的永久认可。</p>
<p align="left">后续的授权版本可能会赋予您额外的或者不同的许可。但是，您对后续版本的选择不会对任何作者和版权所有者强加任何义务。</p>

<h4>4.1.2.16         免责申明</h4>
<p align="left">在适用法律许可下，本授权不对本程序承担任何担保责任。除非是书面申明，否则版权所有者和/或提供本程序的第三方组织，“照旧”不承担任何形式的担保责任，无论是承诺的还是暗含的，包括但不限于就适售性和为某个特殊目的的适用性的默认担保责任。有关本程序质量与效能的全部风险均由您承担。如本程序被证明有瑕疵，您应承担所有必要的服务、修复或更正的费用。</p>

<h4>4.1.2.17         责任范围</h4>
<p align="left">除非受适用法律要求或者书面同意，任何版权所有者，或任何依前述方式修改和/或发布本程序者，对于您因为使用或不能使用本程序所造成的一般性、特殊性、意外性或间接性损失，不负任何责任（包括但不限于，资料损失，资料执行不精确，或应由您或第三人承担的损失，或本程序无法与其他程序运作等），即便该版权所有者或其他组织已经被告知程序有此类损失的可能性也是如此。</p>

<h4>4.1.2.18         第15和16节的解释</h4>
<p align="left">如果上述免责申明和责任范围不能按照地方法律条款获得法律效力，复审法庭应该采用最接近于完全放弃关于本程序的民事责任的法律，除非随同本程序的责任担保或责任假设合同是收费的。</p>

<h3>4.1.3    如何在您的新程序中应用这些条款？</h3>
<p align="left">如果您开发了一个新程序，并且希望能够让它尽可能地被大众使用，达成此目的的最好方式就是让它成为自由软件。任何人都能够依据这些条款对该软件再次发布和修改。</p>
<p align="left">为了做到这一点，请将以下声明附加到程序上。最安全的作法，是将声明放在每份源码文件的起始处，以有效传达无担保责任的讯息；且每份文件至少应有「版权」列以及本份声明全文位置的提示。</p>
<p align="left">&lt;用一行描述程序的名称与其用途简述&gt;</p>
<p align="left">版权所有(C) &lt;年份&gt;&lt;作者姓名&gt;</p>
<p align="left">本程序为自由软件；您可依据自由软件基金会所发表的GNU通用公共授权条款，对本程序再次发布和/或修改；无论您依据的是本授权的第三版，或（您可选的）任一日后发行的版本。</p>
<p align="left">本程序是基于使用目的而加以发布，然而不负任何担保责任；亦无对适售性或特定目的适用性所为的默示性担保。详情请参照GNU通用公共授权。</p>
<p align="left">您应已收到附随于本程序的GNU通用公共授权的副本；如果没有，请参照&lt;http://www.gnu.org/licenses/&gt;.同时附上如何以电子及书面信件与您联系的资料。</p>
<p align="left">如果程序进行终端交互方式运作，请在交互式模式开始时，输出以下提示：</p>
<p align="left">&lt;程序&gt; 版权所有(C) &lt;年份&gt; &lt;作者姓名&gt;</p>
<p align="left">本程序不负任何担保责任，欲知详情请键入'show w'。</p>
<p align="left">这是一个自由软件，欢迎您在特定条件下再发布本程序；欲知详情请键入'show c'。</p>
<p align="left">所假设的指令'show w'与'show c'应显示通用公共授权的相对应条款。当然，您可以使用'show w'与'show c'以外的指令名称；对于图形用户界面，您可以用“关于”项代实现此功能。</p>
<p align="left">如有需要，您还应该取得您的雇主（若您的工作为程序设计師）或学校就本程序所签署的“版权放弃承诺书”。欲知这方面的详情，以及如何应用和遵守GNU通用公共授权，请参考&lt;http://www.gnu.org/licenses/&gt;</p>
<p align="left">GNU通用公共授权并不允许您将本程序合并到私有的程序中。若您的程序是一个子程序库，您可能认为允许私有的应用程序链接该库会更有用。如果这是您所想做的，请使用GNU松弛通用公共授权代替本授权。但这样做之前，请阅读&lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;</p>

<h2>4.2     LGPL 2.1协议</h2>
<h3>4.2.1    导言</h3>
大多数软体许可证决意剥夺您共享和修改软体的自由。相反的，GNU 通用公共许可证力图保证您共享和修改自由软体的自由 —— 保证自由软体对所有使用者都是自由的。

这个许可证，较宽松公共许可证，适用于一些由自由软体基金会与其他决定使用此许可证的软体作者，所特殊设计的软体套件 —— 象是函数库。您也可以使用它，但我们建议您事先仔细考虑，基于以下的说明是否此许可证或原来的通用公共许可证在任何特殊情况下均为较好的方案。

当我们谈到自由软体时，我们所指的是自由，而不是价格。我们的 GNU 通用公共许可证是设计用以确保使您有发布自由软体备份的自由（如果您愿意，您可以对此项服务收取一定的费用）；确保您能收到程式原始码或者在您需要时能得到它；确保您能修改软体或将它的一部分用于新的自由软体；而且还确保您知道您可以做上述的这些事情。

为了保护您的权利，我们需要作出限制：禁止任何人否认您上述的权利，或者要求您放弃这些权利。如果您发布软件的副本，或者对之加以修改，这些规定就转化为您的责任。

例如，如果您发布此函数库的副本，不管是免费还是收取费用，您必须将您享有的一切权利给予接受者；您必须确保他们也能收到或得到原始程式码；如果您将此函数库与其他的程式码连结，您必须提供完整的目的对象文件和程序(object file)给接受者，则当他们修改此函数库并重新编译过后，可以重新与目的档连结。您并且要将这些条款给他们看，使他们知道他们有这样的权利。

我们采取两项措施来保护您的权利: （1）用版权来保护函数库。并且，（2）我们提供您这份许可证，赋予您复制，发布和（或）修改这些函数库的法律许可。

为了保护每个发布者，我们需要非常清楚地让每个人明白，自由函数库是没有担保责任的。如果由于某人修改了函数库，并继续加以传播，我们需要它的接受者明白：他们所得到的并不是原始的版本。故由其他人引入的任何问题，对原作者的声誉将不会有任何的影响。

最后，由于软体专利不断地威胁自由软体的存在，我们希望商业公司无法藉由自专利持有者取得一个受限的许可证，而有效地限制自由软体的使用者。因此，我们坚持一个函数库所能取得的任何专利，必须与本许可证所声明的“完全自由使用”一致。

大部分的 GNU 软体，包括一些函数库，是受到原来的 GNU 通用公共许可证的保护。本许可证， GNU 较宽松通用公共许可证，适用于特殊设计的函数库，且与原来的通用公共许可证有很大的不同。我们在特定的函数库中使用它，以准许非自由的程式可以与这些函数库连结。当一个程式与一个函数库连结，不论是静态连结或使用共享函数库，二者的结合可以合理地说是结合的作品，一个原来的函数库的衍生品。因此，原来的通用公共许可证只有在整个结合品满足其自由的标准时，才予许连结。较宽松通用公共许可证则以更宽松的标准允许其他程式码与本函数库连结。

我们称此许可证 "较宽松" 通用公共许可证，是因为它比起原来的通用公共许可证对使用者的自由做到较少的保护。在与非自由软体竞争时，它也提供其他自由软体的写作者较少的优势。这些不利之处正是我们使用原来的通用公共许可证于许多函数库的理由。然而，较宽松的许可证可在某些特殊场合下带来好处。例如，在少数情况下，可能会有特殊的需要而鼓励大家尽可能广泛地使用特定的函数库，因而使它成为实际上的标准。为了达到此目标，必须允许非自由的程式使用此函数库。一个较常发生的情况是一个自由的函数库与一个被广泛使用的非自由函数库做相同的工作，在此情况下，限制只有自由软体可以使用此自由函数库不会有多少好处，故我们如用了较宽松通用公共许可证。

在其他情况下，允许非自由程式使用特定的函数库，可以让更多的人们使用自由软体的大部分。例如，允许非自由程式使用 GNU C 函数库可以让更多的人们使用整个 GNU 作业系统，以及它的变形，GNU/Linux 作业系统。

尽管较宽松通用共公许可证对使用者的自由是较少的保护的，它却能确保与此函数库连结的程式的使用者拥有自由，而且具有使用修改过的函数库版本来执行该程式的必要方法。

以下是复制、发布、以及修改的精确条款与条件。请注意 "基于函数库的作品" 以及 "使用函数库的作品" 之间的差异：前者包含来自函数库修改过的原始码；而后者则必须与函数库结合才能执行。
<h3>4.2.2    条款和条件</h3>
<h4>4.2.2.1 定义</h4>
<ol>
	<li>本许可证适用于任何软体函数库，或其他包含了由版权所有者加入的注意事项的程式，或其他有公信力的团体宣称其程式可以在较宽松通用公共许可证 (也称之为 "本许可证") 的条款下发布。每一位许可证接受者以 "您" 来称呼。</li>
	<li>一个 "函数库" 意指一些软体函数的集合，以及或准备好的资料以方便与应用程式 (其使用了其中某些函数与资料) 连结形成可执行的程式。以下，"函数库" 一词指的是任何在本条款下发布的这一类软体函数库或作品，个 "基于本函数库的作品" 意指函数库或任何在版权法下的衍生作品：也就是说，一个包含了本函数库或其一部分的作品，可以是原封不动的，或经过修改的，和/或直接翻译成其他语言的。 (在下文中，翻译是不受限地包含在 "修改" 的条款中。)</li>
	<li>作品的 "原始码" 意指对作品进行修改最优先择取的形式。对函数库而言，完整的原始码意指所有模组的所有原始程式，加上有关的介面的定义，加上控制函数库的安装和编译的 script。</li>
	<li>本许可证条款不适用于复制，发布和修改以外的活动。这些活动超出这些条款的范围。使用本函数库来执行本程式的动作不受条款的限制，而程式的输出只有在其内容所构成的作品是基于本函数库时 (与在什么样的工具中使用本函数库来输出无关) ，这一条款才适用。以上是否为真则取决于本函数库具体用来做什么。</li>
	<li>只要您在每一程式副本上明显和恰当地宣告版权声明和不承担担保的声明，并保持此许可证的声明和没有担保的声明完整无损，并和程式一起给其他每位程式接受者一份许可证的副本，您就可以用任何媒体复制和发布您收到的函数库的完整原始码。您可以为转让副本的实际行动收取一定费用。您也可以选择提供担保以换取一定的费用。</li>
	<li>只要您同时满足下面的所有条件，您就可以按前面第一款的要求修改函数库的一个或几个副本或它的任何部分，以此形成基于此函数库的作品，并且复制和发布这一经过修改的程式或作品:</li>
</ol>
<h4>4.2.2.2  条款</h4>
1)     被修改的作品本身必须是一个软体函数库。

2)     您必须在修改过的档案中附有明确的说明：

3)     您修改了此一档案及任何修改的日期。您必须让整个作品允许第三方在此许可证条款下可以免费使用。

4)     如果修改过的函数库其某个设备使用到了「使用本函数库的应用程式」所提供的函数或资料表格，却不是当此设备被呼叫时以参数列传入时，则您必须确实做到，当应用程式不提供这样的函数或表格时，则此设备依旧能工作，且其执行的任何目的仍然有意义。

5)     (例如，一个函数库的函数用来计算平方根，其目的是有完整的定义且与应用程式是无关的。因此， 2d 小节要求任何本函数会使用的，由应用程式所提供的函数或表格必须是选择性的：如果应用程式不提供的话，则计算平方根的函数必须依旧能计算平方根)

这些要求适用于整个修改过的作品。如果能够确定作品的一部分并非本函数库的衍生产品，且可以合理地单独考虑并将它与原作品分开的话，则当您将它作为独立的作品发布时，它不受此许可证和其条款的约束。但是当您将这部分与基于本函数库的作品一同发布时，则整个套件将受到本许可证条款约束，其对于其他许可证持有人的使用范围扩大到整个产品，也就是套件的每个部分，不管它是谁写的。

因此，本条款的意图不在于索取权利，或剥夺完全由您完成的作品的权利，而是履行权利来控制基于本函数库的集体作品或衍生作品的发布。 此外，将与本函数库无关的作品和本函数库 (或基于本函数库的作品) 一起放在贮存媒体或发布媒体的同一卷上，并不导致将其他作品置于此许可证的约束范围之内。
<ol>
	<li>对于一个函数库的副本，您可以选择性地使用原来的 GNU 通用公共许可证上的条款来取代本许可证上的条款。如果您要这么做，您必须修改所有的参考到本许可证的注意事项，使它们指向原来的 GNU 通用公共许可证，第二版，以取代本许可证(如果有比第二版的原来的 GNU 通用公共许可证更新的版本出现的话，则如果您愿意的话可以特别指明使用新版)。请不要对这些注意事项做出其他的改变。一旦在一个副本上做了这样的改变，则该副本就无法撤回这样的改变，故原来的 GNU 通用公共许可证将适用于所有后续的副本以及由此副本衍生出来的作品。此一选择性适用于当您想要将一部分的函数库原始码复制到一个非函数库的程式使用时。</li>
	<li>您可以以目标码或可执行形式复制或发布本函数库 (或符合第 2 款，基于本函数库的作品)，只要您遵守前面的第 1、2 款，并同时提供完整的相关机器可读的原始码，而这些原始码必须在前面的第 1 与第 2 款条件下，在一般习惯上用来做软体交换的媒体上发布。如果所发布的目标码是由指定的地点提供拷贝索取，那么由同一地点所提供等价的原始码拷贝索取可以算作原始码的发布，即使第三方不强求与目标码一起复制原始码。</li>
	<li>一个程式若包含不经任何部分修改的函数库，但却是设计经由编译或连结的方式与本函数库一同工作者，称之为 "使用函数库的作品"。这样的一个作品，严格地说，并非本函数库的衍生作品，因而不在本许可证的范围之内。然而，将 "使用函数库的作品" 与本函数库连结而产生可执行程式，则是本函数库的衍生品 (因为它包函了本函数库的一部分)，而不是 "使用函数库的作品"，因此其可执行程式包含在本许可证的范围内。第 7 款说明了发布此可执行程式的条款。</li>
</ol>
当 "使用函数库的作品" 使用了函数库部分的标头档内容时，则此作品即使其原始码不属于本函数库的衍生品，但其目标码仍然是。这一点是否为真特别在是否本作品可以在不需要本函数库即可连结，或者是否该作品本身也是一个函数库时特别明显。

如果这样的目标档只使用数字参数、资料结构层级与附属品、以及小巨集和小内□式 (小于或等于十行) ，则此目标档的使用是不受限的，不论是否它是合法的衍生作品。 (但可执行程式若包函此目标档以及一部分的函数库，仍然将在第 7款的规定下)

否则的话，如果本作品是本函数库的衍生品，您必须在第 6 款的规定下发布该作品的目标码。任何包含该作品的可执行程式也在第 6 款的范围内，不论它们是否直接与本函数库连结。
<ol>
	<li>做为上述条款的例外情况，您也可以将 "使用函数库的作品" 与本函数库结合或连结，以产生包含部分本函数库的作品，并在允许使用者自身使用时可以修改该作品，以及在对修改进行反组译除错的情况下，您可以依照您的选择发布该作品。</li>
</ol>
您必须在每个作品的副本突显出如下的注意事项：本函数库在作品中被使用，以及本函数库以及它的使用是在本许可证的规定下。您必须提供本许可证的副本。如果该作品在执行时显示版权声明，您必须在其中包含本函数库的版权声明，以及指引使用者取得本许可证的副本。同时，您必须做到以下其中一件事：

必须将完整的机器可读的函数库原始码包含在该作品中，包括任何该作品使用到的改变 (这些改变必须在前述第 1 与第 2 款的要求下发布)；而且，如果该作品是一个与函数库连结的「完整的、机器可□的 "使用函数库的作品"」，则要有目标码和/或原始码，如此使用者可以修改本函数库且可以重新连结，以产生包函修改过的函数库的修改过的可执行程式。 (理所当然的若使用者修改了函数库的档案定义内容时，则该作品不必然可以重新编译以使用修改过的定义。)

在与函数库连结时使用适当的分享函数库连结机制。一个适当的机制是： (1) 在执行时使用已存在于使用者的电脑中的函数库副本，而不是将函数库的函数复制到可执行程式里，以及 (2) 如果使用者安装了一份修改过的函数库，只要修改过的版本在介面上与该作品在编译连结时所用的版本是相容的，则该执行程式可以与修改过的函数库运作良好。

在该作品内提供书面报价，有效期不少于三年，以提供同样的使用者上述第 7a 款中的内容，费用不得超过该程式发布的实际成本。 如果所发布的作品是由指定的地点提供拷贝索取，则由同一地点提供上述内容的等价拷贝索取。

确定使用者已经收到该作品的一份复制，或是您已经寄给该使用者一份复制品。

对于一个可执行程式，其所需的 "使用函数库的作品" 的形式必须包括任何要从中再产生可执行程式时所需的资料与工具程式。然而，有一个特殊例外，其所发布的内容不需要包括任何一般与「可执行本程式的作业系统」的主要部分 (如编译器、核心等) 一起发布的部分 (不论是原始码或可执行码)，除非这些组成部分和可执行作品结合在一起。

有一个可能情况是，这些要求与其他通常不与作业系统在一起的私有函数库的版权限制相抵触，这样的抵触表示您不能将它们与本函数库一起用于您发布的可执行程式中。
<ol>
	<li>您可以将使用本函数库的函数库设备，以及其他不在本许可证范围内的函数库，对等地放入一个单独的函数库中，并在基于本函数库的作品以及其他函数库在其他状态下同意可以个别发布，以及您做到以下两点的情况下，您可以发布此结合的函数库：将基于本函数库的作品单独不与其他函数库设备结合地，与此结合的函数库一同发布。该作品必须在上述条款的规定下发布。在此结合的函数库中明显地指出其中一部分的作品是基于本函数库，并且说明那里可以找到同样不具结合形式的作品。</li>
	<li>除非您明确按许可证提出的要求去做，否则您不能复制、修改、转发许可证、与本函数库连结、和发布本函数库。任何试图用其他方式复制、修改、转发许可证、与本函数库连结、和发布本函数库是无效的，而且将自动结束许可证赋予您的权利。然而，对那些从您那里按许可证条款得到副本和权利的人们，只要他们继续全面履行条款，许可证赋予他们的权利仍然有效。</li>
	<li>您没有在许可证上签字，因而您没有必要一定接受此一许可证。然而，没有任何其他东西赋予您修改和发布本函数库及其衍生作品的权利。如果您不接受许可证，这些行为是法律禁止的。因此，如果您修改或发布函数库 (或任何基于函数库的作品) ，您就表明您接受这一许可证以及它的所有有关复制、发布和修改本函数库或基于它的作品的条款和条件。</li>
	<li>每当您重新发布函数库 (或任何基于函数库的作品) 时，接受者自动从原始许可证颁发者那里接到受这些条款和条件支配的复制、发布、连结或修改本函数库的许可。您不可以强迫接受者履行除了这里赋予他们的权利之外的其他限制。您也没有强求第三方履行许可证条款的义务。</li>
	<li>如果由于法院判决或违反专利的指控或任何其他原因 (不限于专利问题) 的结果，使得强加于您的条件 (不管是法院判决，协议书或其他) 和许可证的条件有冲突时，他们也不能令您背离许可证的条款。在您不能同时满足本许可证规定的义务及其他相关的义务来发布函数库时，则结果您只能够根本不发布函数库。例如，如果某一专利许可证不允许所有直接或间接从您那里接受副本的人们，在不付专利费的情况下重新发布函数库，唯一能同时满足两方面要求的办法是停止发布函数库。</li>
</ol>
如果本条款的任何部分在特定的环境下无效或无法实施，就使用条款的其余部分，并将这部分条款作为整体用于其他环境。本条款的目的不在于引诱您侵犯专利或其他财产权的要求，或争论这种要求的有效性。本条款的主要目的在于保护自由软体发布系统的完整性。它是通过公共许可证的应用来实现的。许多人已依赖同是出自此系统的应用程式，经由此系统发布大量自由软体而做出慷慨的供献。作者/捐献者有权决定他/她是否通过任何其他系统发布软体，许可证持有人不能强加这种选择。

本节的目的在于明确说明许可证其余部分可能产生的结果。
<ol>
	<li>如果由于专利或者由于有版权的介面问题使函数库在某些国家的发布和使用受到限制，则在许可证约束下的原始版权拥有者可以增加发布地区的限制条款，将这些国家明确排除在外，并在这些国家以外的地区发布函数库。在这种情况下，许可证套件含的限制条款和许可证正文一样有效。 13. 自由软体基金会可能随时出版较宽松通用公共许可证的修改版或新版。新版和当前的版本在原则上保持一致，但在提到新问题时或有关事项时，在细节上可能出现差别。</li>
</ol>
每一版本都有不同的版本号。如果函数库指定可适用的许可证版本号以及 "任何更新的版本" ，您有权选择遵循指定的版本或自由软体基金会以后出版的新版本。如果函数库未指定许可证版本，您可选择自由软体基金会已经出版的任何版本。
<ol>
	<li>如果您愿意将函数库的一部分结合到其他自由程式中，而它们的发布条件不同，请写信给作者，要求准予使用。如果是自由软体基金会加以版权保护的软体，写信给自由软体基金会，我们有时会作为例外的情况处理。我们的决定受两个主要目标的指导，这两个主要目标是：我们的自由软体的衍生作品继续保持自由状态，以及从整体上促进软体的共享和重复利用。</li>
	<li>没有担保</li>
</ol>
1)     由于函数库准予免费使用，在适用法准许的范围内，对函数库没有担保。除非另有书面说明，版权所有者和/或其他提供函数库的人们 "一样" 不提供任何类型的担保，不论是明确的，还是隐含的，包括但不限于可销售和适合特定用途的隐含保证。全部的风险，如函数库的质量和性能问题都由您来承担。如果函数库出现缺陷，您应当承担所有必要的服务、修复和改正的费用。

2)     除非适用法或书面协议的要求，在任何情况下，任何版权所有者或任何按许可证条款修改和发布函数库的人们都不对您的损失负有任何责任。包括由于使用或不能使用函数库引起的任何一般的、特殊的、偶然发生的或重大的损失 (包括但不限于数据的损失，或者数据变得不精确，或者您或第三方的持续的损失，或者函数库不能和其他软体协调运行等) 。即使版权所有者和其他人提到这种损失的可能性也不例外。

<a href="http://image.beekka.com/blog/201105/free_software_licenses.png" target="_blank"><img src="http://image.beekka.com/blog/201105/bg2011050101.png" alt="" /></a>
<p align="center"> </p>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>405</wp:post_id>
		<wp:post_date>2012-04-11 12:37:06</wp:post_date>
		<wp:post_date_gmt>2012-04-11 04:37:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%bc%80%e6%ba%90%e8%ae%b8%e5%8f%af%e5%8d%8f%e8%ae%ae</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apache"><![CDATA[apache]]></category>
		<category domain="post_tag" nicename="bsd"><![CDATA[BSD]]></category>
		<category domain="post_tag" nicename="gpl"><![CDATA[GPL]]></category>
		<category domain="post_tag" nicename="lgpl"><![CDATA[LGPL]]></category>
		<category domain="post_tag" nicename="mit"><![CDATA[MIT]]></category>
		<category domain="post_tag" nicename="mozilla"><![CDATA[Mozilla]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<category domain="post_tag" nicename="%e5%bc%80%e6%ba%90%e8%ae%b8%e5%8f%af%e5%8d%8f%e8%ae%ae"><![CDATA[开源许可协议]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>python hashlib md5</title>
		<link></link>
		<pubDate>Thu, 12 Apr 2012 09:53:56 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=410</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>#-*- coding:utf-8 -*-
from hashlib import md5
content = 12
content_str = str(content)
ciphertext = md5(content_str).hexdigest() #加密
print ciphertext

#from hashlib import md5
#ciphertext_str=raw_input() #写入要解密的密文,如827ccb0eea8a706c4c34a16891f84e7b
#MD5是不可逆的密码加密，可以说除了暴力破解外无法还原，但同样的输入加密出来的结果是一致的，因此要比较输入是否正确，只要比较一下加密后的结果即可，而Python中可以使用hashlib进行MD5加密，具体方法如下

for i in xrange(100000):
ciphertext_tmp = md5(str(i)).hexdigest()
if ciphertext_tmp == ciphertext:
print 'the password is %d' % i
break</blockquote>
python的base64加密解密及md5加密
<blockquote>import hashlib

a = "a test string"
print hashlib.md5(a).hexdigest()
print hashlib.sha1(a).hexdigest()
print hashlib.sha224(a).hexdigest()
print hashlib.sha256(a).hexdigest()
print hashlib.sha384(a).hexdigest()
print hashlib.sha512(a).hexdigest()

import base64
str='haha'
encoded = base64.b64encode(str)
decoded = base64.b64decode(encoded)</blockquote>
&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>410</wp:post_id>
		<wp:post_date>2012-04-12 17:53:56</wp:post_date>
		<wp:post_date_gmt>2012-04-12 09:53:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>410</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hashlib"><![CDATA[hashlib]]></category>
		<category domain="post_tag" nicename="md5"><![CDATA[md5]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gedit Keyboard Shortcuts</title>
		<link></link>
		<pubDate>Fri, 13 Apr 2012 08:13:50 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=414</guid>
		<description></description>
		<content:encoded><![CDATA[Shortcut keys enable you to perform tasks more quickly than if you use a mouse. The following tables list all of Gedit's shortcut keys. These are in the <a href="http://live.gnome.org/Gedit/Manual">Gedit user manual</a>as of version 2.18.
<h2 id="Tabs">Tabs</h2>
<div>
<table>
<tbody>
<tr>
<td><strong>Shortcut Key</strong></td>
<td><strong>Command</strong></td>
</tr>
<tr>
<td><tt>Ctrl + Alt + PageUp</tt></td>
<td>Switches to the next tab to the left.</td>
</tr>
<tr>
<td><tt>Ctrl + Alt + PageDown</tt></td>
<td>Switches to the next tab to the right.</td>
</tr>
<tr>
<td><tt>Ctrl + W</tt></td>
<td>Close tab.</td>
</tr>
<tr>
<td><tt>Ctrl + Shift + L</tt></td>
<td>Save all tabs.</td>
</tr>
<tr>
<td><tt>Ctrl + Shift + W</tt></td>
<td>Close all tabs.</td>
</tr>
<tr>
<td><tt>Alt + </tt><em>n</em></td>
<td>Jump to <em>n</em>th tab.</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Files">Files</h2>
<div>
<table>
<tbody>
<tr>
<td><strong>Shortcut Key</strong></td>
<td><strong>Command</strong></td>
</tr>
<tr>
<td><tt>Ctrl + N</tt></td>
<td>Create a new document.</td>
</tr>
<tr>
<td><tt>Ctrl + O</tt></td>
<td>Open a document.</td>
</tr>
<tr>
<td><tt>Ctrl + L</tt></td>
<td>Open a location.</td>
</tr>
<tr>
<td><tt>Ctrl + S</tt></td>
<td>Save the current document to disk.</td>
</tr>
<tr>
<td><tt>Ctrl + Shift + S</tt></td>
<td>Save the current document with a new filename.</td>
</tr>
<tr>
<td><tt>Ctrl + P</tt></td>
<td>Print the current document.</td>
</tr>
<tr>
<td><tt>Ctrl + Shift + P</tt></td>
<td>Print preview.</td>
</tr>
<tr>
<td><tt>Ctrl + W</tt></td>
<td>Close the current document.</td>
</tr>
<tr>
<td><tt>Ctrl + Q</tt></td>
<td>Quit Gedit.</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Edit">Edit</h2>
<div>
<table>
<tbody>
<tr>
<td><strong>Shortcut Key</strong></td>
<td><strong>Command</strong></td>
</tr>
<tr>
<td><tt>Ctrl + Z</tt></td>
<td>Undo the last action.</td>
</tr>
<tr>
<td><tt>Ctrl + Shift + Z</tt></td>
<td>Redo the last undone action .</td>
</tr>
<tr>
<td><tt>Ctrl + X</tt></td>
<td>Cut the <span><span style="background-color: #ffd700;">select</span></span>ed text or region and place it on the clipboard.</td>
</tr>
<tr>
<td><tt>Ctrl + C</tt></td>
<td>Copy the <span><span style="background-color: #ffd700;">select</span></span>ed text or region onto the clipboard.</td>
</tr>
<tr>
<td><tt>Ctrl + V</tt></td>
<td>Paste the contents of the clipboard.</td>
</tr>
<tr>
<td><tt>Ctrl + A</tt></td>
<td><span><span style="background-color: #ffd700;">Select</span></span> all.</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Edit_.28from_GTKTextView.29">Edit (from GTKTextView)</h2>
<div>
<table>
<tbody>
<tr>
<td><strong>Shortcut Key</strong></td>
<td><strong>Command</strong></td>
</tr>
<tr>
<td><tt>Ctrl + D</tt></td>
<td>Delete the line.</td>
</tr>
<tr>
<td><tt>Ctrl + Left</tt></td>
<td>Move the cursor to the beginning of the word or previous word if it's already in the beginning of the current one.</td>
</tr>
<tr>
<td><tt>Ctrl + Right</tt></td>
<td>Move the cursor to the end of the word or next word if it's already in the end of the current one.</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Panes">Panes</h2>
<div>
<table>
<tbody>
<tr>
<td><strong>Shortcut Key</strong></td>
<td><strong>Command</strong></td>
</tr>
<tr>
<td><tt>F9</tt></td>
<td>Show/hide the side pane.</td>
</tr>
<tr>
<td><tt>Ctrl + F9</tt></td>
<td>Show/hide the bottom pane.</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Search">Search</h2>
<div>
<table>
<tbody>
<tr>
<td><strong>Shortcut Key</strong></td>
<td><strong>Command</strong></td>
</tr>
<tr>
<td><tt>Ctrl + F</tt></td>
<td>Find a string.</td>
</tr>
<tr>
<td><tt>Ctrl + G</tt></td>
<td>Find the next instance of the string.</td>
</tr>
<tr>
<td><tt>Ctrl + Shift + G</tt></td>
<td>Find the previous instance of the string.</td>
</tr>
<tr>
<td><tt>Ctrl + K</tt></td>
<td>Interactive search.</td>
</tr>
<tr>
<td><tt>Ctrl + H</tt></td>
<td>Search and replace.</td>
</tr>
<tr>
<td><tt>Ctrl + Shift + K</tt></td>
<td>Clear highlight.</td>
</tr>
<tr>
<td><tt>Ctrl + I</tt></td>
<td>Goto line.</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Tools">Tools</h2>
<div>
<table>
<tbody>
<tr>
<td><strong>Shortcut Key</strong></td>
<td><strong>Command</strong></td>
</tr>
<tr>
<td><tt>F7</tt></td>
<td>Check spelling (with plugin).</td>
</tr>
<tr>
<td><tt>Alt + F12</tt></td>
<td>Remove trailing spaces (with plugin).</td>
</tr>
<tr>
<td><tt>Ctrl + T</tt></td>
<td>Indent (with plugin).</td>
</tr>
<tr>
<td><tt>Ctrl + Shift + T</tt></td>
<td>Remove Indent (with plugin).</td>
</tr>
<tr>
<td><tt>F8</tt></td>
<td>Run "make" in current directory (with plugin).</td>
</tr>
<tr>
<td><tt>Ctrl + Shift + D</tt></td>
<td>Directory listing (with plugin).</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Help">Help</h2>
<div>
<table>
<tbody>
<tr>
<td><strong>Shortcut Key</strong></td>
<td><strong>Command</strong></td>
</tr>
<tr>
<td><tt>F1</tt></td>
<td>Load Gedit's online help document.</td>
</tr>
</tbody>
</table>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>414</wp:post_id>
		<wp:post_date>2012-04-13 16:13:50</wp:post_date>
		<wp:post_date_gmt>2012-04-13 08:13:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gedit-keyboard-shortcuts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gedit"><![CDATA[gedit]]></category>
		<category domain="post_tag" nicename="shortcuts"><![CDATA[shortcuts]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What are the Options for Storing Hierarchical 分层 Data in a Relational Database?</title>
		<link></link>
		<pubDate>Fri, 13 Apr 2012 15:29:12 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=419</guid>
		<description></description>
		<content:encoded><![CDATA[Generally speaking you're making a decision between fast read times (e.g. nested set) or fast write times (adjacency list). Usually you end up with a combination of the options below that best fit your needs. The following provides some in depth reading:
<ul>
	<li><a href="http://vadimtropashko.wordpress.com/2008/08/09/one-more-nested-intervals-vs-adjacency-list-comparison/" rel="nofollow">One more Nested Intervals vs. Adjacency List comparison</a>: <em>the best comparison</em> of Adjacency List, Materialized Path, Nested Set and Nested Interval I've found.</li>
	<li><a href="http://www.slideshare.net/billkarwin/models-for-hierarchical-data" rel="nofollow">Models for hierarchical data</a>: slides with good explanations of tradeoffs and example usage</li>
	<li><a href="http://mikehillyer.com/articles/managing-hierarchical-data-in-mysql/" rel="nofollow">Representing hierarchies in MySQL</a>: very good overview of Nested Set in particular</li>
	<li><a href="http://troels.arvin.dk/db/rdbms/links/#hierarchical" rel="nofollow">Hierarchical data in RDBMSs</a>: most comprehensive and well organized set of links I've seen, but not much in the way on explanation</li>
</ul>
<strong>Options</strong>

Ones I am aware of and general features:
<ol>
	<li><a href="http://en.wikipedia.org/wiki/Adjacency_list" rel="nofollow">Adjacency List</a>:
<ul>
	<li>Columns: ID, ParentID</li>
	<li>Easy to implement.</li>
	<li>Cheap node moves, inserts, and deletes.</li>
	<li>Expensive to find level (can store as a computed column), ancestry &amp; descendants (Bridge Hierarchy combined with level column can solve), path (Lineage Column can solve).</li>
	<li>Use <a href="http://en.wikipedia.org/wiki/Common_table_expressions" rel="nofollow">Common Table Expressions</a> in those databases that support them to traverse.</li>
</ul>
</li>
	<li><a href="http://en.wikipedia.org/wiki/Nested_set_model" rel="nofollow">Nested Set</a> (a.k.a Modified Preorder Tree Traversal)
<ul>
	<li>First described by Joe Celko - covered in depth in his book <a href="http://rads.stackoverflow.com/amzn/click/1558609202" rel="nofollow">Trees and Hierarchies in SQL for Smarties</a></li>
	<li>Columns: Left, Right</li>
	<li>Cheap level, ancestry, descendants</li>
	<li>Compared to Adjacency List, moves, inserts, deletes more expensive.</li>
	<li>Requires a specific sort order (e.g. created). So sorting all descendants in a different order requires additional work.</li>
</ul>
</li>
	<li><a href="http://communities.bmc.com/communities/docs/DOC-9902" rel="nofollow">Nested Intervals</a>
<ul>
	<li>Combination of Nested Sets and Materialized Path where left/right columns are floating point decimals instead of integers and encode the path information. In the later development of this idea nested intervals gave rise to <a href="http://vadimtropashko.files.wordpress.com/2011/07/ch5.pdf" rel="nofollow">matrix encoding</a>.</li>
</ul>
</li>
	<li><a href="http://intelligent-enterprise.informationweek.com/showArticle.jhtml;jsessionid=MRBJR2LLRV1ANQE1GHPSKH4ATMY32JVN?articleID=219400252" rel="nofollow">Bridge Table</a> (a.k.a. <a href="http://dirtsimple.org/2010/11/simplest-way-to-do-tree-based-queries.html" rel="nofollow">Closure Table</a>: some good ideas about how to use triggers for maintaining this approach)
<ul>
	<li>Columns: ancestor, descendant</li>
	<li>Stands apart from table it describes.</li>
	<li>Can include some nodes in more than one hierarchy.</li>
	<li>Cheap ancestry and descendants (albeit not in what order)</li>
	<li>For complete knowledge of a hierarchy needs to be combined with another option.</li>
</ul>
</li>
	<li><a href="http://evolt.org/node/4047/" rel="nofollow">Flat Table</a>
<ul>
	<li>A modification of the Adjacency List that adds a Level and Rank (e.g. ordering) column to each record.</li>
	<li>Expensive move and delete</li>
	<li>Cheap ancestry and descendants</li>
	<li>Good Use: threaded discussion - forums / blog comments</li>
</ul>
</li>
	<li><a href="http://www.ferdychristant.com/blog//articles/DOMM-7QJPM7" rel="nofollow">Lineage Column</a> (a.k.a. <a href="http://communities.bmc.com/communities/docs/DOC-9902" rel="nofollow">Materialized Path</a>, Path Enumeration)
<ul>
	<li>Column: lineage (e.g. /parent/child/grandchild/etc...)</li>
	<li>Limit to how deep the hierarchy can be.</li>
	<li>Descendants cheap (e.g. <code>LEFT(lineage, #) = '/enumerated/path'</code>)</li>
	<li>Ancestry tricky (database specific queries)</li>
</ul>
</li>
</ol>
<strong>Database Specific Notes</strong>

<em>MySQL</em>
<ul>
	<li><a href="http://explainextended.com/2009/09/29/adjacency-list-vs-nested-sets-mysql/" rel="nofollow">Use session variables for Adjacency List</a></li>
</ul>
<em>Oracle</em>
<ul>
	<li>Use <a href="http://www.ypl.com/oracle/sql/hierarchical_queries/html_deep/index.html" rel="nofollow">CONNECT BY</a> to traverse Adjacency Lists</li>
</ul>
<em>PostgreSQL</em>
<ul>
	<li><a href="http://www.postgresql.org/docs/current/static/ltree.html" rel="nofollow">ltree datatype</a> for Materialized Path</li>
</ul>
<em>SQL Server</em>
<ul>
	<li><a href="http://msdn.microsoft.com/en-us/magazine/cc794278.aspx" rel="nofollow">General summary</a></li>
	<li>2008 offers <a href="http://msdn.microsoft.com/en-us/library/bb677290.aspx" rel="nofollow">HierarchyId</a> data type appears to help with Lineage Column approach and expand the depth that can be represented.</li>
</ul>
Some articles from my blog on the subject:
<ul>
	<li><a href="http://explainextended.com/2009/09/29/adjacency-list-vs-nested-sets-mysql/" rel="nofollow"><strong>Adjacency list vs. nested sets: MySQL</strong></a></li>
	<li><a href="http://explainextended.com/2009/09/24/adjacency-list-vs-nested-sets-postgresql/" rel="nofollow"><strong>Adjacency list vs. nested sets: PostgreSQL</strong></a></li>
	<li><a href="http://explainextended.com/2009/09/28/adjacency-list-vs-nested-sets-oracle/" rel="nofollow"><strong>Adjacency list vs. nested sets: Oracle</strong></a></li>
	<li><a href="http://explainextended.com/2009/09/25/adjacency-list-vs-nested-sets-sql-server/" rel="nofollow"><strong>Adjacency list vs. nested sets: SQL Server</strong></a></li>
	<li><a href="http://explainextended.com/2009/03/17/hierarchical-queries-in-mysql/" rel="nofollow"><strong>Hierarchical queries in MySQL</strong></a> (querying adjacency lists in <code>MySQL</code>)</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>419</wp:post_id>
		<wp:post_date>2012-04-13 23:29:12</wp:post_date>
		<wp:post_date_gmt>2012-04-13 15:29:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-are-the-options-for-storing-hierarchical-%e5%88%86%e5%b1%82-data-in-a-relational-database</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="database"><![CDATA[Database]]></category>
		<category domain="post_tag" nicename="hierarchial"><![CDATA[Hierarchial]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="relational"><![CDATA[Relational]]></category>
		<category domain="post_tag" nicename="storing"><![CDATA[Storing]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e5%b1%82"><![CDATA[分层]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>安装GitLab</title>
		<link></link>
		<pubDate>Tue, 17 Apr 2012 02:22:47 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/2012/04/17/%e5%ae%89%e8%a3%85gitlab/</guid>
		<description></description>
		<content:encoded><![CDATA[一、准备工作
根据GitLab的官方文档要求，安装GitLab需要以下软件：
ruby 1.9.2
sqlite
ubuntu/debian
pygments lib – sudo pip install pygments
gitolite
因此在安装GitLab之前需要做一些准备工作。
1、设置安装环境（安装一些必要软件）
sudo apt-get update
sudo apt-get dist-upgrade -y
sudo apt-get install git-core openssh-server sendmail curl gcc libxml2-dev libxslt-dev sqlite3 libsqlite3-dev libcurl4-openssl-dev libreadline-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev python-setuptools
*安装VMWare Tools（这是在虚拟机环境下需要安装的，如果不是的可忽略）
sudo apt-get update -y
sudo apt-get dist-upgrade -y
sudo apt-get install dkms build-essential gcc linux-headers-$(uname -r) -y
sudo mkdir -p /media/cdrom
sudo mount /dev/cdrom /media/cdrom
cp /media/cdrom/VM* /tmp
sudo umount /media/cdrom
cd /tmp
tar -xzvf VMware*.gz
cd vmware-tools-distrib/
sudo ./vmware-install.pl -d
sudo apt-get autoremove -y
sudo shutdown -r now
上面关于虚拟机的部分是摘抄官网的，因为没环境测试，所以也只是原样照搬了。:)
2、设置专门的帐号
接下来我们需要创建一个专门的gitlabhq用户帐号来运行程序，这个帐户需要设置密码，因为需要将它加入到admin组来运行sudo：
sudo useradd -s /bin/bash -m -G admin gitlabhq
sudo passwd gitlabhq
现在使用gitlabhq用户帐号登录机器：
ssh gitlabhq@localhost
3、配置git全局变量并生成SSH密钥
git config –global user.email “admin@local.host”
git config –global user.name “GitLabHQ Admin User”
由于gitlabhq用户稍后要使用SSH密钥访问稍后创建git用户帐号，执行git命令，所以需要生成gitlabhq用户的SSH密钥：
ssh-keygen -t rsa
注意：在出现提示询问文件保存位置时直接回车，在要求输入和确认passphrase时也按回车。
4、安装Ruby 1.9.2、RubyGem和Rails
Ubuntu 11.10中的Ruby包，其版本是1.8的，所以需要安装包ruby1.9.2。由于在Ubuntu 11.10中的Ruby1.9.1包中ruby版本实际上是Ruby1.9.2，之所以包名为Ruby1.9.1是因为该版本为1.9.1的“库兼容版本”，所以可以直接安装包Ruby1.9.1即可，然后更新rubygem并安装rails。
sudo apt-get install ruby1.9.1-full
sudo update-alternatives –config ruby
sudo update-alternatives –config gem
sudo gem install rails
注意两点：1)、02-03行命令是在安装了其他ruby版本包时使用；2)、如果在安装rails时出现“RubyGems will revert to legacy indexes degrading performance.”之类的错误时，修改~/.gemrc文件后重试（有时要试多次才进行安装，一般来说都会3－6次之间，下面的bundle命令也是如此，不知道是不是伟大的墙在起作用，看你的运气了！）：
vi ~/.gemrc
—
:backtrace: false
:benchmark: false
:bulk_threshold: 1000
:sources:
- http://gems.rubyforge.org/
- http://gems.github.com/
- http://gems.rubyonrails.org/
:update_sources: true
:verbose: true
5、安装和设置Gitolite
Gitolite 是一款 Perl 语言开发的 Git 服务管理工具，通过公钥对用户进行认证，并能够通过配置文件对写操作进行基于分支和路径的的精细授权，它是采用 SSH 协议并且使用 SSH 公钥认证的。Gitolite开始于 2009年8月，其作者当时是受到了 Gitosis 的启发，开发了这款功能更为强大和易于安装的软件。对于Gitolite的命名，作者原意是 Gitosis 和 lite 的组合，不过因为 Gitolite 的功能越来越强大，已经超越了 Gitosis，因此作者笑称 Gitolite 可以看作是 Github-lite —— 轻量级的 Github。
安装Gitolite也十分简单，首先添加git用户帐号并将其加入git组：
sudo adduser \
–system \
–shell /bin/sh \
–gecos ‘git version control’ \
–group \
–disabled-password \
–home /home/git \
git
sudo usermod -a -G git `eval whoami`
然后将生成的gitlabhq用户的公钥拷到git用户目录中：
sudo cp ~/.ssh/id_rsa.pub /home/git/rails.pub
接下来以git用户的名义将gitolite源文件下载的git用户家目录中：
sudo -u git -H git clone git://github.com/gitlabhq/gitolite ~git/gitolite
再以git用户的名义安装gitolite
sudo -u git -H /home/git/gitolite/src/gl-system-install
在这里该命令会提示关于目录的警告信息，不用理会。直接运行下列命令：
sudo -u git -H sh -c “PATH=/home/git/bin:$PATH; gl-setup ~/rails.pub”
在这里将会出现vim文本编辑器的编辑界面，请将其中的REPO_UMASK=0077改为REPO_UMASK=0007，然后保存退出（退出编辑状态ESC，然后使用:x）。关于如何在vim中编辑这里就不做说明了，我偷个懒，反正有谷歌和百度。:)
最后设置库目录的权限：
sudo chmod -R g+rwX ~git/repositories/
sudo chown -R git:git ~git/repositories/
OK，设置完了之后，重新进入一次gitlabhq用户，以使gitlabhq用户生效：
exit
ssh gitlabhq@localhost
二、安装和设置GitLab
1、安装GitLab
cd ~
git clone git://github.com/gitlabhq/gitlabhq.git ~/gitlabhq
cd gitlabhq
sudo easy_install pygments
sudo gem install bundler
sudo gem install linecache19 — –with-ruby-include=/usr/include/ruby-1.9.1/ruby/
bundle install –without development test
注意：linecache19的安装是必须要指定with-ruby-include参数的，否则将会在后面的bundle install中出错！
2、设置数据库
bundle exec rake db:setup RAILS_ENV=production
bundle exec rake db:seed_fu RAILS_ENV=production
注意：运行01行的rake db:setup语句时，如果出现“unititialized constant Rake::DSL”，则需要在GitLab根目录中的Rakefile文件中添加以下语句（参见http://stackoverflow.com /questions/6268518/uninitialized-constant-rakedsl-in-ruby-gem）来解决，如未出现上述出错信息，可忽略：
require ‘rake/dsl_definition’
require ‘rake’
3、配置GitLab
编辑GitLab的配置程序：
vi ~gitlabhq/gitlabhq/config/gitlab.yml
将下列内容
git_host:
system: gitolite
admin_uri: git@localhost:gitolite-admin
base_path: /home/git/repositories/
host: gitlab
git_user: git
# port: 22
修改为：
git_host:
system: gitolite
admin_uri: git@localhost:gitolite-admin
base_path: /home/git/repositories/
host: gitlabhq.your.domain
git_user: git
# port: 22
其中03和05行中的gitlabhq.your.domain是服务器的域名。
启动服务
cd ~gitlabhq/gitlabhq
bundle exec rails s -e production
三、测试服务
如果一切OK的话，就可以在浏览器上输入：http://server.ip:3000/ 来测试该服务了，使用以下信息登录：
Email: admin@local.host
Password: 5iveL!fe
接下来您可以在admin中创建一个新的用户，注意该用户在创建时要花费一段时间，请耐心等待。在该用户生成成功后，您需要按照前面的方法在客户机上生成该用户的密钥（Windows下可以使用Git for Windows中的Git Bash来代替）：
ssh-keygen -t rsa -C “your_email@youremail.com”
然后用新用户登录，点击GitLab中My profile&gt;Keys&gt;Add new按钮，将生成的SSH公钥贴到弹出对话框的Key中，Title可随便填，我一般是使用用户_机器名这种格式，然后点击Save按钮。
在保存用户公钥之后，就可测试是否可以通过公钥来访问服务器上的git用户，执行git命令：
ssh -T git@gitlabhq.your.domain
其中，gitlabhq.your.domain是服务器的域名。如果出现”Agent admitted failure to sign using the key”错误，并提示输入git用户密码，那么请在客户机上使用以下命令将用户私钥加进来 （根据个人的密匙命名不同更改 id_rsa）：
ssh-add ~/.ssh/id_rsa
ssh -T git@gitlabhq.your.domain
hello your_email_youremail_com_1324608633, this is gitolite v2.2-11-g8c4d1aa running on git 1.7.5.4 the gitolite config gives you the following access: @R_ @W_ testing
再次访问git，如出现类似02行信息时，则表明设置成功。
四、安裝和配置 Nginx和Passenger
1、卸载Apache2
sudo apt-get autoremove apache2*
sudo dpkg –purge apache2*
2、安装Nginx和Passenger模块
sudo gem install passenger
sudo passenger-install-ngnix-module
注意：02行语句会检查编译Ngnix和Passenger模块所需要的工具，然后询问你是否有Ngnix的源码，如果没有的话，就选1，会自动下载，如果有的话，就选2，并告之源码所在位置。在这里选择1。
3、创建运行Nginx服务的用户
sudo adduser –system –no-create-home –disabled-login –disabled-password –group nginx
4、将Nginx设置开机启动脚本
wget -O init-deb.sh http://library.linode.com/assets/660-init-deb.sh
sudo mv init-deb.sh /etc/init.d/nginx
sudo chmod +x /etc/init.d/nginx
sudo /usr/sbin/update-rc.d -f nginx defaults
5、将Nginx设置为GitLab的服务器
sudo vi /opt/nginx/conf/nginx.conf

user gitlabhq staff;
# —
server {
listen 80;
server_name gitlabhq.your.domain;
root /home/gitlabhq/gitlabhq/public;
passenger_enabled on;
}
# —
其中，07行的gitlab.yourdomain.com要改为你的域名。
6、启动Nginx
sudo /etc/init.d/nginx start
五、测试服务
在浏览器中输入http://gitlab.yourdomain.com/来测试GitLab能是否正常工作。如果一切正常的话，就可以打完收功了！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>421</wp:post_id>
		<wp:post_date>2012-04-17 10:22:47</wp:post_date>
		<wp:post_date_gmt>2012-04-17 02:22:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%ae%89%e8%a3%85gitlab</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gitlab"><![CDATA[gitlab]]></category>
		<category domain="post_tag" nicename="install"><![CDATA[install]]></category>
		<category domain="category" nicename="project-manage"><![CDATA[Project Manage]]></category>
		<category domain="post_tag" nicename="setting"><![CDATA[setting]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>683</wp:comment_id>
			<wp:comment_author><![CDATA[yutian]]></wp:comment_author>
			<wp:comment_author_email>herohenu@126.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>166.111.138.130</wp:comment_author_IP>
			<wp:comment_date>2013-05-08 16:43:54</wp:comment_date>
			<wp:comment_date_gmt>2013-05-08 08:43:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[求教：在gitlab上添加了ssh pub key  执行  ssh -T git@gitlabhq.your.domain 返回的是Welcome to GitLab, Anonymous!  克隆的时候不成功，提示：Cloning into 'bbb'...
fatal: The remote end hung up unexpectedly  这个该如何解决？]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1373462717.24";s:7:"message";s:39:"jhjguxin 将评论状态改为 approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jhjguxin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:12:"1368002634.7";s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:74:{s:15:"comment_post_ID";s:3:"421";s:14:"comment_author";s:6:"yutian";s:20:"comment_author_email";s:16:"herohenu@126.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:253:"求教：在gitlab上添加了ssh pub key  执行  ssh -T git@gitlabhq.your.domain 返回的是Welcome to GitLab, Anonymous!  克隆的时候不成功，提示：Cloning into 'bbb'...
fatal: The remote end hung up unexpectedly  这个该如何解决？";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:15:"166.111.138.130";s:10:"user_agent";s:108:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.64 Safari/537.31";s:8:"referrer";s:64:"http://jhjguxin.sinaapp.com/2012/04/17/%E5%AE%89%E8%A3%85gitlab/";s:4:"blog";s:27:"http://jhjguxin.sinaapp.com";s:9:"blog_lang";s:5:"zh_CN";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:64:"http://jhjguxin.sinaapp.com/2012/04/17/%e5%ae%89%e8%a3%85gitlab/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:6:"yutian";s:10:"POST_email";s:16:"herohenu@126.com";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:258:"求教：在gitlab上添加了ssh pub key  执行  ssh -T git@gitlabhq.your.domain 返回的是Welcome to GitLab, Anonymous!  克隆的时候不成功，提示：Cloning into 'bbb'...
fatal: The remote end hung up unexpectedly  这个该如何解决？

 ";s:11:"POST_submit";s:12:"发表评论";s:20:"POST_comment_post_ID";s:3:"421";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"49cab13ce2";s:15:"SERVER_SOFTWARE";s:6:"Apache";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:14:"MEF_PROXY_ADDR";s:11:"10.67.15.11";s:11:"has_apphash";s:1:"1";s:16:"ApplimitOutOfCon";s:1:"0";s:16:"ApplimitOutOfMem";s:1:"0";s:10:"SCRIPT_URL";s:21:"/wp-comments-post.php";s:10:"SCRIPT_URI";s:48:"http://jhjguxin.sinaapp.com/wp-comments-post.php";s:20:"HTTP_X_FORWARDED_FOR";s:32:"166.111.138.130, 166.111.138.130";s:9:"HTTP_HOST";s:20:"jhjguxin.sinaapp.com";s:12:"HTTP_APPNAME";s:8:"jhjguxin";s:15:"HTTP_APPVERSION";s:1:"1";s:9:"HTTP_MCIP";s:26:"1default;1::;1:@default:;;";s:14:"HTTP_ACCESSKEY";s:10:"34y21z4k20";s:12:"HTTP_APPHASH";s:3:"311";s:14:"HTTP_MYSQLPORT";s:4:"3307";s:14:"HTTP_APPCOOKIE";s:26:"default_version=1;debug=2;";s:12:"HTTP_APPSRVC";s:19:"0000000000000000AC0";s:15:"HTTP_CONNECTION";s:5:"close";s:14:"HTTP_X_REAL_IP";s:15:"166.111.138.130";s:14:"CONTENT_LENGTH";s:3:"652";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:11:"HTTP_ORIGIN";s:27:"http://jhjguxin.sinaapp.com";s:15:"HTTP_USER_AGENT";s:108:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.64 Safari/537.31";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:12:"HTTP_REFERER";s:64:"http://jhjguxin.sinaapp.com/2012/04/17/%E5%AE%89%E8%A3%85gitlab/";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip,deflate,sdch";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"zh-CN,zh;q=0.8";s:19:"HTTP_ACCEPT_CHARSET";s:23:"GBK,utf-8;q=0.7,*;q=0.3";s:11:"HTTP_COOKIE";s:0:"";s:4:"PATH";s:46:"/bin:/usr/bin:/usr/ucb:/usr/bsd:/usr/local/bin";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:20:"jhjguxin.sinaapp.com";s:11:"SERVER_ADDR";s:11:"10.67.15.25";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:15:"166.111.138.130";s:13:"DOCUMENT_ROOT";s:32:"/data1/www/htdocs/311/jhjguxin/1";s:12:"SERVER_ADMIN";s:18:"saesupport@sina.cn";s:15:"SCRIPT_FILENAME";s:53:"/data1/www/htdocs/311/jhjguxin/1/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"35990";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1368002633";s:14:"HTTP_SECRETKEY";s:9:"Discarded";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>725</wp:comment_id>
			<wp:comment_author><![CDATA[jhjguxin]]></wp:comment_author>
			<wp:comment_author_email>864248765@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://jhjguxin.hwcrazy.com/</wp:comment_author_url>
			<wp:comment_author_IP>180.173.38.94</wp:comment_author_IP>
			<wp:comment_date>2013-07-10 21:25:17</wp:comment_date>
			<wp:comment_date_gmt>2013-07-10 13:25:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[GitLab 克隆项目 首先需要有 clone project 的权限， 可能需要 developer 权限，]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>683</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1373462717.23";s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jhjguxin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:80:{s:15:"comment_post_ID";s:3:"421";s:14:"comment_author";s:8:"jhjguxin";s:20:"comment_author_email";s:16:"864248765@qq.com";s:18:"comment_author_url";s:28:"http://jhjguxin.hwcrazy.com/";s:15:"comment_content";s:95:"GitLab 克隆项目 首先需要有 clone project 的权限， 可能需要 developer 权限，";s:14:"comment_parent";s:3:"683";s:7:"user_ID";s:1:"1";s:7:"user_ip";s:13:"180.173.38.94";s:10:"user_agent";s:131:"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/28.0.1500.52 Chrome/28.0.1500.52 Safari/537.36";s:8:"referrer";s:73:"http://jhjguxin.sinaapp.com/wp-admin/edit-comments.php?paged=1&approved=1";s:4:"blog";s:27:"http://jhjguxin.sinaapp.com";s:9:"blog_lang";s:5:"zh_CN";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:64:"http://jhjguxin.sinaapp.com/2012/04/17/%e5%ae%89%e8%a3%85gitlab/";s:9:"user_role";s:13:"administrator";s:21:"akismet_comment_nonce";s:6:"passed";s:22:"POST_newcomment_author";s:0:"";s:28:"POST_newcomment_author_email";s:0:"";s:26:"POST_newcomment_author_url";s:0:"";s:12:"POST_user_ID";s:1:"1";s:11:"POST_action";s:15:"replyto-comment";s:15:"POST_comment_ID";s:3:"683";s:20:"POST_comment_post_ID";s:3:"421";s:11:"POST_status";s:0:"";s:13:"POST_position";s:2:"-1";s:13:"POST_checkbox";s:1:"1";s:9:"POST_mode";s:6:"detail";s:32:"POST__ajax_nonce-replyto-comment";s:10:"cdeb37f128";s:32:"POST__wp_unfiltered_html_comment";s:10:"ae770acab4";s:12:"POST_content";s:95:"GitLab 克隆项目 首先需要有 clone project 的权限， 可能需要 developer 权限，";s:7:"POST_id";s:3:"421";s:21:"POST_comments_listing";s:3:"all";s:19:"POST_approve_parent";s:1:"1";s:15:"SERVER_SOFTWARE";s:6:"Apache";s:11:"REQUEST_URI";s:24:"/wp-admin/admin-ajax.php";s:14:"MEF_PROXY_ADDR";s:11:"10.67.15.12";s:11:"has_apphash";s:1:"1";s:16:"ApplimitOutOfCon";s:1:"0";s:16:"ApplimitOutOfMem";s:1:"0";s:10:"SCRIPT_URL";s:24:"/wp-admin/admin-ajax.php";s:10:"SCRIPT_URI";s:51:"http://jhjguxin.sinaapp.com/wp-admin/admin-ajax.php";s:20:"HTTP_X_FORWARDED_FOR";s:13:"180.173.38.94";s:9:"HTTP_HOST";s:20:"jhjguxin.sinaapp.com";s:12:"HTTP_APPNAME";s:8:"jhjguxin";s:15:"HTTP_APPVERSION";s:1:"1";s:9:"HTTP_MCIP";s:26:"1default;1::;1:@default:;;";s:14:"HTTP_ACCESSKEY";s:10:"34y21z4k20";s:12:"HTTP_APPHASH";s:3:"311";s:14:"HTTP_MYSQLPORT";s:4:"3307";s:14:"HTTP_APPCOOKIE";s:26:"default_version=1;debug=2;";s:12:"HTTP_APPSRVC";s:19:"0000000000000000AC0";s:15:"HTTP_CONNECTION";s:5:"close";s:14:"CONTENT_LENGTH";s:3:"524";s:11:"HTTP_ACCEPT";s:3:"*/*";s:11:"HTTP_ORIGIN";s:27:"http://jhjguxin.sinaapp.com";s:21:"HTTP_X_REQUESTED_WITH";s:14:"XMLHttpRequest";s:15:"HTTP_USER_AGENT";s:131:"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/28.0.1500.52 Chrome/28.0.1500.52 Safari/537.36";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:12:"HTTP_REFERER";s:73:"http://jhjguxin.sinaapp.com/wp-admin/edit-comments.php?paged=1&approved=1";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip,deflate,sdch";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.8";s:11:"HTTP_COOKIE";s:0:"";s:4:"PATH";s:46:"/bin:/usr/bin:/usr/ucb:/usr/bsd:/usr/local/bin";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:20:"jhjguxin.sinaapp.com";s:11:"SERVER_ADDR";s:11:"10.67.15.25";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:13:"180.173.38.94";s:13:"DOCUMENT_ROOT";s:32:"/data1/www/htdocs/311/jhjguxin/1";s:12:"SERVER_ADMIN";s:18:"saesupport@sina.cn";s:15:"SCRIPT_FILENAME";s:56:"/data1/www/htdocs/311/jhjguxin/1/wp-admin/admin-ajax.php";s:11:"REMOTE_PORT";s:5:"19128";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:24:"/wp-admin/admin-ajax.php";s:8:"PHP_SELF";s:24:"/wp-admin/admin-ajax.php";s:12:"REQUEST_TIME";s:10:"1373462716";s:14:"HTTP_SECRETKEY";s:9:"Discarded";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>10 Cool Premium jQuery Countdown Scripts</title>
		<link></link>
		<pubDate>Tue, 17 Apr 2012 02:57:30 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=424</guid>
		<description></description>
		<content:encoded><![CDATA[Today’s post is a collection of 10 cool “premium” <strong>jQuery countdown scripts</strong> that you’d definitely find useful for your webpages at some point in time. Enjoy.
<h2>1. 5sec Maintenance Mode</h2>
6 beautiful, funny templates to make your visitors less angry while you’re offline.

<a href="http://codecanyon.net/item/5sec-maintenance-mode/217881?ref=lvraa" rel="nofollow" target="_blank">
<img src="http://www.jquery4u.com/wp-content/uploads/2012/04/5sec-Maintenance-Mode.jpg" alt="5sec Maintenance Mode" />
</a>
<a href="http://codecanyon.net/item/5sec-maintenance-mode/217881?ref=lvraa" rel="nofollow" target="_blank">Source</a>
<a href="http://codecanyon.net/item/5sec-maintenance-mode/full_screen_preview/217881" rel="nofollow" target="_blank">Demo</a>
<h2>2. Premium Coming Soon – WordPress Plugin</h2>
New, modern, user friendly countdown page that lets your visitors know when you will launch your website. It has a custom countdown counter and the possibility to create an endless number of new themes as you please.

<a href="http://codecanyon.net/item/premium-coming-soon-wordpress-plugin/273445?ref=lvraa" rel="nofollow" target="_blank">
<img src="http://www.jquery4u.com/wp-content/uploads/2012/04/Premium-Coming-Soon.jpg" alt="Premium Coming Soon" />
</a>
<a href="http://codecanyon.net/item/premium-coming-soon-wordpress-plugin/273445?ref=lvraa" rel="nofollow" target="_blank">Source</a>
<a href="http://codecanyon.net/item/premium-coming-soon-wordpress-plugin/full_screen_preview/273445" rel="nofollow" target="_blank">Demo</a>
<h2>3. Coming Soon Landing Page</h2>
JavaScript under construction website counter!

<a href="http://codecanyon.net/item/coming-soon-landing-page/135441?ref=lvraa" rel="nofollow" target="_blank">
<img src="http://www.jquery4u.com/wp-content/uploads/2012/04/Coming-Soon-Landing-Page.jpg" alt="Coming Soon Landing Page" />
</a>
<a href="http://codecanyon.net/item/coming-soon-landing-page/135441?ref=lvraa" rel="nofollow" target="_blank">Source</a>
<a href="http://codecanyon.net/item/coming-soon-landing-page/full_screen_preview/135441" rel="nofollow" target="_blank">Demo</a>
<h2>4. fresh Parallax Under Construction Countdown</h2>
fresh Parallax Under Construction upgrades your “Coming Soon” page with a dynamic 3D cloudy sky with your logo or item of choice in focus.

<a href="http://codecanyon.net/item/fresh-parallax-under-construction-countdown/758105?ref=lvraa" rel="nofollow" target="_blank">
<img src="http://www.jquery4u.com/wp-content/uploads/2012/04/fresh-Parallax-Under-Construction-Countdown.jpg" alt="fresh Parallax Under Construction" />
</a>
<a href="http://codecanyon.net/item/fresh-parallax-under-construction-countdown/758105?ref=lvraa" rel="nofollow" target="_blank">Source</a>
<a href="http://www.version-four.com/choosr/index_frame.php?item=underconstruction" rel="nofollow" target="_blank">Demo</a>
<h2>5. FlipTimer</h2>
FlipTimer 1.2 with 8 color themes ready-made and a beautiful template with working contact form included.

<a href="http://codecanyon.net/item/fliptimer/106012?ref=lvraa" rel="nofollow" target="_blank">
<img src="http://www.jquery4u.com/wp-content/uploads/2012/04/FlipTimer.jpg" alt="FlipTimer" />
</a>
<a href="http://codecanyon.net/item/fliptimer/106012?ref=lvraa" rel="nofollow" target="_blank">Source</a>
<a href="http://codecanyon.net/theme_previews/106012-fliptimer" rel="nofollow" target="_blank">Demo</a>
<h2>6. Fancy Countdown – jQuery Plugin</h2>
It is a highly customizable jQuery plugin that lets you create an outstanding countdown. It´s very easy to use. You can set an own target date with a timezone. The plugin comes with an extensive API.

<a href="http://codecanyon.net/item/fancy-countdown-jquery-plugin/163489?ref=lvraa" rel="nofollow" target="_blank">
<img src="http://www.jquery4u.com/wp-content/uploads/2012/04/Fancy-Countdown.jpg" alt="Fancy Countdown" />
</a>
<a href="http://codecanyon.net/item/fancy-countdown-jquery-plugin/163489?ref=lvraa" rel="nofollow" target="_blank">Source</a>
<a href="http://codecanyon.net/item/fancy-countdown-jquery-plugin/full_screen_preview/163489" rel="nofollow" target="_blank">Demo</a>
<h2>7. Countdown / Construction Page</h2>
Easy adaptable countdown, under construction – page. Including manual for easy set-up.

<a href="http://codecanyon.net/item/countdown-construction-page/310456?ref=lvraa" rel="nofollow" target="_blank">
<img src="http://www.jquery4u.com/wp-content/uploads/2012/04/Countdown-Construction-page.jpg" alt="Countdown / Construction Page" />
</a>
<a href="http://codecanyon.net/item/countdown-construction-page/310456?ref=lvraa" rel="nofollow" target="_blank">Source</a>
<a href="http://codecanyon.net/item/countdown-construction-page/full_screen_preview/310456" rel="nofollow" target="_blank">Demo</a>
<h2>8. JavaScript Animated Counter</h2>
Simple, animated JavaScript counter, which will allow you to present rapidly increased or decreased values, such as number of registered users, total income etc.

<a href="http://codecanyon.net/item/javascript-animated-counter/233648?ref=lvraa" rel="nofollow" target="_blank">
<img src="http://www.jquery4u.com/wp-content/uploads/2012/04/JavaScript-Animated-Counter.jpg" alt="JavaScript Animated Counter" />
</a>
<a href="http://codecanyon.net/item/javascript-animated-counter/233648?ref=lvraa" rel="nofollow" target="_blank">Source</a>
<a href="http://codecanyon.net/item/javascript-animated-counter/full_screen_preview/233648" rel="nofollow" target="_blank">Demo</a>
<h2>9. jsCountdown</h2>
Included are 14 different skins to choose from and a template file (png format) to make your own.

<a href="http://codecanyon.net/item/jscountdown/91064?ref=lvraa" rel="nofollow" target="_blank">
<img src="http://www.jquery4u.com/wp-content/uploads/2012/04/jsCountdown.jpg" alt="jsCountdown" />
</a>
<a href="http://codecanyon.net/item/jscountdown/91064?ref=lvraa" rel="nofollow" target="_blank">Source</a>
<a href="http://codecanyon.net/item/jscountdown/full_screen_preview/91064" rel="nofollow" target="_blank">Demo</a>
<h2>10. Live Broadcast Countdown Module</h2>
Nice jQuery based countdown timer. Header text depending on countdown stateus (counting down or finished). A lot of options available.

<a href="http://codecanyon.net/item/live-brodcast-countdown-module/1207265?ref=lvraa" rel="nofollow" target="_blank">
<img src="http://www.jquery4u.com/wp-content/uploads/2012/04/Live-Broadcast-Countdown-Module.jpg" alt="Live Broadcast Countdown" />
</a>
<a href="http://codecanyon.net/item/live-brodcast-countdown-module/1207265?ref=lvraa" rel="nofollow" target="_blank">Source</a>
<a href="http://codecanyon.net/item/live-brodcast-countdown-module/full_screen_preview/1207265" rel="nofollow" target="_blank">Demo</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>424</wp:post_id>
		<wp:post_date>2012-04-17 10:57:30</wp:post_date>
		<wp:post_date_gmt>2012-04-17 02:57:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>10-cool-premium-jquery-countdown-scripts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="countdown"><![CDATA[Countdown]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<category domain="post_tag" nicename="%e5%80%92%e8%ae%a1%e6%97%b6"><![CDATA[倒计时]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Git Submodule 的認識與正確使用！</title>
		<link></link>
		<pubDate>Thu, 19 Apr 2012 10:36:42 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=429</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

已經用了 git submodule 好一陣子了，今天看到了 <a href="http://johnleach.co.uk/words/323/git-submodules-in-n-easy-steps" target="_blank">Git submodules in N easy steps</a> 才覺得比較搞懂一些之前碰到的問題。趁機來整理、釐清之前常碰到的小問題吧~~
<h2>什麼是 Git Submodule</h2>
剛剛從 SVN 或 CVS 等 Client-Server 架構的版本控制系統切換到 Git 時，可能會有這個想法：「<em>能不能只取得一部分的程式碼、而非整個 Repository？</em>」因為在 SVN/CVS 可以針對 Repository 中的某個目錄 checkout，不需要是整個 Repository、甚至還可以用 SVN Externals 達到不同角色 （視覺、前端、後端）checkout 不同 File Layout（之前在無名小站時，超喜歡 svn:externals 的概念）。

但 Git 是分散式的版本控制系統，每個人都是一個完整的 Repository，沒辦法像 SVN/CVS 指定到某個資料夾。例如你要取得 YUI 3 的 Git，只能 git clone https://github.com/yui/yui3.git、而不能指定到底下的目錄。

SVN/CVS 你可以用目錄區隔大小專案、都在同一個大的 Repository。而 Git 的想法必須修正為<em>每個小專案就是一個 Repository</em>、或<em>不同團隊開發是一個 Repository</em>、甚至<em>功能獨立也可以是一個 Repository</em>。若說 SVN 是包容百川、<em>Git 就是各自獨立的小河流</em>。

但<em>軟體開發團隊不太容易如此單純</em>，有時需要給外包開發、有時需要分工、有時需要用 Open Source，<em>光用以上的切分方式是沒辦法達成所有需求的</em>、還是得將各自獨立的小河流連接起來。例如我先前在 WebRebuild 與 COSCUP 分享的 JavaScript Platform，為了分享把原始碼放了一份到 Github : <a href="http://github.com/josephj/javascript-platform-yui" target="_blank">http://github.com/josephj/javascript-platform-yui</a>，但我的工作及部落格都有使用的需求，該怎麼做呢？如果每次都得 git clone 再 copy 檔案到兩個地方、這樣手工做真的是個很遜的解決方案。好在有 Git Submodule 可以幫忙解決!

簡單來說，Git Submodule 可以<em>輕易地將別人的 git 掛入到你目前 git 的任何位置</em>。
<h2>新增一個 Git Submodule</h2>
例如我有目前本機有一個 josephj.git、在 /home/josephj/www 下，而我需要將 javascript platform 放到 /home/josephj/www/static/ 可以用以下幾行快速達成。
<ul>
	<li>切換到我的 repository 目錄：
<code>$ cd /home/josephj/www</code></li>
	<li>使用 <em>git submodule add [repository 位置] [欲放置的位置]</em> 增加一個新的 submodule：
<code>$ git submodule add git@github.com:josephj/javascript-platform-yui.git static/platform</code>需要注意 [欲放置的位置] 不能以 / 結尾（會造成修改不生效）、也不能已經是現有的路徑喔（不能順利 Clone）。</li>
	<li>按下去就會看到以下結果：
<pre><code>$ git submodule add git://github.com/josephj/javascript-platform-yui.git static/platform Initialized empty Git repository in /home/josephj/www/static/platform/.git/ remote: Counting objects: 31, done. remote: Compressing objects: 100% (31/31), done. remote: Total 31 (delta 14), reused 0 (delta 0) Receiving objects: 100% (31/31), 6.06 KiB, done. Resolving deltas: 100% (14/14), done. </code></pre>
這時在 /home/josephj/www/ 會產生一個 <em>.gitmodules</em> 記錄你的 Submodule 資訊。該 git 的<em>相關檔案也都會在此時被拉下來</em>。</li>
	<li>用 git status 看一下：
<pre><code>$ git status # On branch master # Changes to be committed: # (use "git reset HEAD ..." to unstage) # # new file: .gitmodules # new file: static/platform # </code></pre>
會發現它只列出 submodule 目錄而非所有底下檔案，parent git 實際上也只會記錄 submodule 的 commit id 以供未來做比對用。這裡一個很重要的點是大家必須理解的：<em>parent git 與 submodule git 的關連性（被掛入的目錄、repository 位置）記錄在 .gitmodules 中，而版本控制則是靠 parent git 記住 submodule git 的 commit id。</em></li>
	<li>先 commit 一下：
<pre><code>$ git add .gitmodules static/platform git commit -m "Add submodule into version control";</code></pre>
</li>
	<li>但是你還必須做 init 的動作，你的 .git/config 才會有對應 submodule 的資訊。
<pre><code>$ git submodule init </code></pre>
</li>
</ul>
<h2>更新已安裝的 Submodule</h2>
當初我第一次新增一個 Submodule 後，以為未來它都會像 SVN External 一樣、在我 git pull 的時候自動更新。但實際情況是你<em>必須手動處理才能更新 Submodule</em>。
<ol>
	<li>進入該目錄 Subomdule 目錄： <code>$ cd static/platform</code></li>
	<li>向來源的 master branch 做 git pull 的動作（這裡的 git pull 不會更新你 parent git 的檔案） <code>$ git pull origin master</code></li>
	<li>若 submodule 有更新的檔案，你可以到 parent git 觀看一下情況：
<pre><code>$ cd ../../ $ git status # Not currently on any branch. # Changed but not updated: # (use "git add ..." to update what will be committed) # (use "git checkout -- ..." to discard changes in working directory) # # modified: static/platform (new commits) # no changes added to commit (use "git add" and/or "git commit -a")</code></pre>
與第一次 git submodule add 相同，submodule 更新的檔案並不會在 git status 中要求你 commit 喔！</li>
	<li>我們前面提到，submodule 的版本控制在於 submodule git 的 commit id，上面看到 static/platform 有 new commit。表示你既然把新的內容 pull 回來、應該要更新 submodule 的 commit id 到你的 git 中：
<pre><code>$ git add static/platform $ git commit -m "static/platform submodule updated"</code></pre>
如此一來，新的 submodule commit id 就被你的 repositiory 給記錄下來囉！</li>
</ol>
<h2>團隊使用 Submodule</h2>
在一個多人的軟體開發團隊中，通常還是會有 Centralized Git Repositiory，像我們公司就採用了 gitosis 的解決方案。而像上述更新 Submodule 的情形，通常只有一兩個負責架構的人來做（大多是一開始把東西掛進來的人）、<em>其他人只是單純使用者的角色，並不需要負責更新的工作</em>。
<ol>
	<li>像上面我增加了一個 Submodule，對於團隊其他人來說，他們在下一次的 git pull 會看到以下的狀況：
<pre><code>$ git status # On branch develop # Changed but not updated: # (use "git add ..." to update what will be committed) # (use "git checkout -- ..." to discard changes in working directory) # # modified: static/platform (new commits) # no changes added to commit (use "git add" and/or "git commit -a")</code></pre>
這表示其他人也會拿到 .gitmodules 的設定，但他必須使用 git submodule init 將新的 Submodule 註冊到自己的 .git/config、未來才能使用。
<pre><code>$ git submodule init Submodule 'static/platform' (http://github.com/josephj/javascript-platform-yui.git) registered for path 'static/platform'</code></pre>
</li>
	<li>接著其他人使用 git submodule update 把該 Submodule 的內容全部拉下來！
<pre><code>$ git submodule update Cloning into static/platform... remote: Counting objects: 34, done. remote: Compressing objects: 100% (34/34), done. remote: Total 34 (delta 15), reused 0 (delta 0) Unpacking objects: 100% (34/34), done. Submodule path 'static/platform': checked out '117c5b3c5a195deac2e53aa118b78ef3f01ae371' </code></pre>
</li>
</ol>
<h3>使用時機</h3>
簡單整理一下：
<ul>
	<li><em>git submodule init</em>: 在 .gitmodules 第一次被其他人建立或有新增內容的時候，用 git submodule init <em>更新你的 .git/config、設定目錄與增加 submodule 的 remote URL</em>。</li>
	<li><em>git submodule update</em>: 在 init 完有新的 submodule commit id 後就可以做了，會把所有相關檔案拉下來。若其他人更新 submodule 造成你拿到新的 commit id 時，你可以直接用 git submodule update 做更新即可、不需要做任何 add 或 commit 的動作！</li>
</ul>
可以想見，其他成員使用 git submodule update 的情況會遠比 git submodule init 多很多。
<h2>修改 Submodule 的內容</h2>
有時自己也是 Submodule 的 Owner，碰到要改 Code 時，要我切回原本的此 Git 開發位置有點麻煩... 不如就<em>直接改被當成 Submodule 掛進來的原始碼吧</em>！
<ol>
	<li>到 submodule 目錄去做些修改：
<pre><code>$ cd static/platform $ vim README # 做些修改 </code></pre>
</li>
	<li>接著就是常見的 git add , git commit, git push
<pre><code>$ git add README $ git commit -m "Add comments" $ git push </code></pre>
</li>
	<li>push 完回到根目錄git status 看一下！會看到
<pre><code>$ git status # On branch master # Changed but not updated: # (use "git add ..." to update what will be committed) # (use "git checkout -- ..." to discard changes in working directory) # # modified: static/platform # no changes added to commit (use "git add" and/or "git commit -a")</code></pre>
</li>
	<li>這裡也需要再做一次 Commit 喔！
<pre><code>$ git add static/platform $ git commit -m 'Submodule updated' $ git push </code></pre>
</li>
</ol>
這裡有一點非常需要注意，因為 Submodule 的更新只記錄 commit id，所以<em>你必須先在 submodule 內做 commit、push 後、再到 parent git 做 push</em>，不然會出現版本錯亂的問題，別人跟你 submodule 的內容將會不一致。
<h2>如何移除 Submodule</h2>
這點也<em>非常地不直覺</em>，不是想像中 git submodule remove [欲移除的目錄] 這麼簡單...
<ol>
	<li>先砍掉目錄：
<pre><code>$ git rm --cached [欲移除的目錄] $ rm -rf [欲移除的目錄]</code></pre>
</li>
	<li>再修改 .gitmodules
<pre><code>$ vim .gitmodules</code></pre>
將相關內容移除</li>
	<li>再修改 .git/config
<pre><code>$ vim .git/config</code></pre>
將相關內容移除</li>
	<li>最後再 commit，改變整個 Repository。
<pre><code>$ git add .gitmodules $ git commit -m "Remove a submodule" </code></pre>
</li>
	<li>安全起見再做個 sync：
<pre><code>$ git submodule sync</code></pre>
</li>
</ol>
<h2>結語</h2>
我們公司目前主要將 Submodule 運用在<em>與外包公司的合作</em>上，因為彼此 <span>Engine</span>ering 團隊負責的專案項目雖不同，但<em>有部分的開發會需要在我們的結構下開目錄，我們也不希望他們改到我們的程式</em>，此時 Git Submodule 提供了非常好的分工效果：把他們開發好的東西掛進來、更新即可。另有一點很重要的是， <em>Git Submodule 內還可以將其他的 Submodule 給掛進來，形成一個巢狀式的結構</em>，彈性非常地大。我們只要抓他們的大 Git 當 Submodule，下面怎麼掛就由外包公司決定。

整篇文章看下來，會發現 <em>git submodule 的操作有許多需要注意的地方</em>，像是更新、修改、刪除都要遵循一定的程序，不然你 PUSH 回 Central Repository 時，別人 PULL 下來的 Submodule 可能並不會更新，就會產生混亂了 Orz...

暇不掩瑜，Git Submodule 還是一個強大且團隊開發上非常重要的功能，就盡量使用前先搞懂、小心使用囉 ;)

</div>
<div>

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>429</wp:post_id>
		<wp:post_date>2012-04-19 18:36:42</wp:post_date>
		<wp:post_date_gmt>2012-04-19 10:36:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-submodule-%e7%9a%84%e8%aa%8d%e8%ad%98%e8%88%87%e6%ad%a3%e7%a2%ba%e4%bd%bf%e7%94%a8%ef%bc%81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="project-manage"><![CDATA[Project Manage]]></category>
		<category domain="post_tag" nicename="submodule"><![CDATA[Submodule]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>你不必这么着急 --by Rei</title>
		<link></link>
		<pubDate>Mon, 23 Apr 2012 02:50:57 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=431</guid>
		<description></description>
		<content:encoded><![CDATA[现在这个世界，似乎一切都在快速演进：各种年少暴富的新闻充斥着我们的眼球，软件开发世界到处是敏捷方法，甚至你最亲近的人都在催促你更快——谁谁谁都已经XX了，你将来怎么打算？所以，现在的学生找实习的时间越来越早，想速成的心态越来越重。

但是，你不必这么着急。慢有慢的好处，最重要的是，急也急不来。我想和未走出社会的人分享一下，为什么是我们不用那么着急，并且应该把精力放去哪里。如果你已经工作数年了，但是对着未来感到恐惧，却从来没有试着让自己慢一点，也可以看一看接下来的内容。

在继续阅读之前，先看几个问题，判断这篇文章是否适合你。

1. 并不是所有人都那么聪明的，有些人只需要过普通的生活就够了。

对的，但我只想跟觉得自己足够聪明的人讨论后面的内容。实际上，我觉得没有什么聪不聪明之分，只是投入时间的问题。

2. 不是所有人都有那么崇高的理想的，这些内容太理想主义了。

对的，但我也是只想跟心怀理想的人交流。

3. 我负有助学贷款压力/出身贫寒/其他急需资金的原因，没空让我停下来好好考虑。

很遗憾，这部分人可能需要先解决温饱问题，待将来走出了困境，再仔细考虑一下前面的内容。

你没有对上面的内容嗤之以鼻，那么，可以进入正题了。
<h2>为什么你不用这么着急</h2>
这里有着确切的理由，你不用这么着急
<h3>1. 工作岗位比你想象中多</h3>
对于真正的人才，工作机会是源源不断的。他们困扰的不是找工作，而是找有趣的工作。这听起来很气人，大学毕业有很多人找不到工作呢，很多人工作几年还在用“码农”调侃自己呢。

但现实就是这样，企业缺人、缺人才，但是不缺平凡的人。企业发出一个招聘岗位，会收到数十上百封简历，但十有八九在第一轮人事MM筛选中就会去掉，真正到达缺人部门的领导手中时，又是十有八九看一眼就被淘汰掉了……等等，这是不是说找工作很难呢？正好相反，看问题得反过来看。

试想你是一个部门领导，你的部门急需补充成员，否则会拖慢年度的计划安排。一个月两个月过去了，总看不到可塑之才出现。所以你得不断地到人事部催促，多发些招聘信息；人事MM每天被催促，恨不得天上掉下个技术大牛，活好收费少，赶紧把招聘任务了结了。这样的部门、这样的公司都处都是，他们都在焦急的等着那些合适的人。如果你恰好是那类人，入职就是一张机票的事。

记住，关键是你是否能成为合适的人。“找”工作是没用的，只会成为那 (9/10 + 1/10 × 9/10) × 100%。最理想的是，让工作来找你，这放在后面说。
<h3>2. 现实工作不一定有趣</h3>
假设你已经足够成为那类公司热烈欢迎的人了，是不是得赶紧走出社会“积累积累”经验了呢？

我给建议依然是：别急。现实工作不一定有趣，无趣的工作意味着工作效率低下，工作效率低下意味着经验增长缓慢，经验增长缓慢的工作，还不知蹲在家里每天写8个小时代码呢。

一般说来，越大的公司越无趣，因为大公司有复杂的流程。如果你的工作环境被切割成了设计-UI-编码的团队界限分明的结构，那么你的发挥空间就很小了。你的最大目标是实现别人的需求，你需要实现很繁琐的注册表单和根本没人会用的后台控制；你需要在每个a标签里面放一些不必要的span；你需要学会写 ugly 的代码，因为时间紧/反正用得很好/要跟周围风格一致。另一方面，小公司也会让你很无趣，你需要做运维/产品/设计/编码/维护，半夜收到异常Email要起床，还要吃着老板画给你的“等公司上了轨道一定不会亏待你的”的大饼。

天阿，让不让人活了！

其实分辨工作是否有趣很简单：招人最靠谱的是看作品，找工作最靠谱的当然就是看产品了。看公司的产品，你觉得有不有趣，你自己会不会用，细节做得好吗，是又一个 C2C（Copy to China） 吗？从公司的产品，就可以看出公司的内部架构和流程，员工工作得愉不愉快，创意有没有施展的空间。我觉得，Twitter，Github 那样的公司就挺好。

要去，就要去有趣的公司，世界上缺工作的人那么多，为什么要跟他们争抢一份平凡的工作呢？
<h2>把精力花到刀刃上</h2>
如果你接受了我上面说的理由，那么可以淡定的看待身边一个又一个找到实习或者工作的同学了，因为你需要认真地挖掘什么才是你需要持久钻研的东西。
<h3>1. 多参与开源项目</h3>
<a href="http://github.com/">github.com</a> 不用多说了，现在已经成为技术人员最好的简历。

有了 github，参与开源项目成为一件很简单的事情：使用 -&gt; 发现 bug -&gt; 查找/提交 issues -&gt; 提交 pull-request。

不过，要一开始就参加一个热门的项目是很困难的，因为有很多比你聪明（本质只是编程时间比你长）的人都在上面折腾，根本没有让你“接球”的机会。

这时候最好自己发展一个开源项目。

可以练手的项目类型多着呢：你的博客/Todo-list好用吗？你觉得某个现有的服务/项目很搓吗？你需要帮你随机决定中午午餐吃什么而且自动发送邀请给好友的机器人程序吗？

发挥你的想象力，做一个实际能用的项目，比到公司打杂有用多了。
<h3>2. 多参与社区讨论</h3>
你得了解你学习的技术方向的牛人在哪里混，多跟他们交流，也多回答新手的提问，在网络社区里很有可能你会遇到你将来的同事或者合伙人。

编程是一项社会活动，即使你的程序完全是交给机器执行，但是最终的使用者和受益者是人类，所以你需要认识各种各样的人，了解你是为了什么去编程。

如果你学习 Ruby，我推荐 <a href="http://ruby-china.org/">ruby-china.org</a>，这是当前国内人气最旺的 Ruby 社区了。当然，还有 <a href="http://codecampo.com/">CodeCampo</a>，你可以看到 Rei 分享的各类奇怪资源。
<h3>3. 多进行户外活动</h3>
多进行户外活动，即可以强健体魄，也可以让你的性格更开朗。性格开朗的人，创造力会比整天闷闷不乐的人高。这里就有一个乐天向上好榜样：<a href="http://imtx.me/archives/1713.html">辞职旅行一周年</a>。
<h2>勇敢的编程 10000 小时</h2>
程序世界是非常公平的，随着你编程经验的积累，你的项目用户会开始增多，你的交友圈会更广泛，你的工作机会会找上门——或者该你给别人工作机会了。

无论怎么样，要成为技术牛人，编程 10000 小时是少不了的。无论你愿不愿意，你的经验都在增加，所以你完全不用心急。

看清自己的目标，一步一步的走，有一天它就会在你脚下。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>431</wp:post_id>
		<wp:post_date>2012-04-23 10:50:57</wp:post_date>
		<wp:post_date_gmt>2012-04-23 02:50:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%a0%e4%b8%8d%e5%bf%85%e8%bf%99%e4%b9%88%e7%9d%80%e6%80%a5-by-rei</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hurry"><![CDATA[hurry]]></category>
		<category domain="category" nicename="live"><![CDATA[live]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Markdown语法</title>
		<link></link>
		<pubDate>Tue, 24 Apr 2012 06:52:26 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=436</guid>
		<description></description>
		<content:encoded><![CDATA[<h2 id="overview">概述</h2>
<h3 id="philosophy">哲学</h3>
Markdown 的目标是易读易写。

Markdown强调可读性高于一切。一份Markdown格式的文档应该能直接以纯文本方式发布，而不致一眼看过去满眼都是标签和格式化指令。Markdown的语法确实受了几种现有的text转HTML过滤器影响－－包括 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank">Setext</a>, <a href="http://www.aaronsw.com/2002/atx/" target="_blank">atx</a>, <a href="http://textism.com/tools/textile/" target="_blank">Textile</a>, <a href="http://docutils.sourceforge.net/rst.html" target="_blank">reStructuredText</a>,<a href="http://www.triptico.com/software/grutatxt.html" target="_blank">Grutatext</a>, 和 <a href="http://ettext.taint.org/doc/" target="_blank">EtText</a> -- 其中对Markdown语法影响最大的单一来源是纯文本的Email格式。

为实现这一目标，Markdown的语法几乎全部由标点符号构成，这些标点符号都是精心挑选而来，尽量做到能望文生义。如星号括着一个单词（Markdown中表示强调）看上去就像 *强调*。Markdown的列表看上去就像列表；Markdown的引文就象引文，和你使用email时的感觉一样。
<h3 id="html">内嵌HTML</h3>
Markdown的语法为“方便地在网上写作”这一目标而生。

Markdown不是HTML替代品，也不是为了终接HTML。它的语法非常简单，只相当于HTML标签的一个非常非常小的子集。它并非是为了更容易输入HTML标签而创造一种新语法。在我看来，HTML标签已经够容易书写的了。Markdown的目标是让（在网上）让读文章、写文章、修改文章更容易。HTML是一种适合发表的格式；而Markdown是一种书写格式。正因如此，Markdown的格式化语法仅需解决用纯文本表达的问题。

对Markdown语法无法支持的格式，你可以直接用HTML。你不需要事先声明或者使用什么定界符来告诉Markdown要写HTML了，你直接写就是了。

唯一的限制是那些块级HTML元素 -- 如 <code>&lt;div&gt;</code>,<code>&lt;table&gt;</code>, <code>&lt;pre&gt;</code>, <code>&lt;p&gt;</code>等等 -- 必须使用空行与相邻内容分开，并且块元素的开始和结束标签之前不要留有空格或TAB。Markdown足够聪明不会添加额外的(也是不必要的)<code>&lt;p&gt;</code>标签包住这些块元素标签。

下面这个例子，在一篇Markdown文章中添加了一个HTML表格：
<pre><code>这是一个普通的段落。 &lt;table&gt; &lt;tr&gt; &lt;td&gt;Foo&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 这是另一个普通的段落。</code></pre>
注意一点，不要在块级HTML元素内使用Markdown格式化命令，Markdown不会处理它们。比如你不要在一个HTML块中使用 <code>*emphasis*</code> 这样的Markdown格式化命令。

行内HTML标签 -- 如 <code>&lt;span&gt;</code>, <code>&lt;cite&gt;</code>, 或 <code>&lt;del&gt;</code> -- 在一个Markdown段落里、列表中、或者标题中－－随便用。 如果需要，你甚至可以用HTML标签代替Markdown格式化命令。比方你可以直接用HTML标签 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 而不使用Markdown的链接和图片语法，随你的便。

不同于这些块级HTML元素，在HTML行内元素内的Markdown语法标记会被正确处理。
<h3 id="autoescape">自动转换特殊字符</h3>
在HTML中，有两个字符需要特殊对待：<code>&lt;</code>和 <code>&amp;</code>。<code>&lt;</code>用于标签开始，<code>&amp;</code>用于标识HTML实体。如果打算把它们当成普通字符，你必须使用反引号转义它们，如<code>&lt;</code>和<code>&amp;</code>。

对一些互联网作家来说，<code>&amp;</code>符号特别使人烦恼。如果你打算写'AT&amp;T'，你就得写 '<code>AT&amp;amp;T</code>'。甚至在URL中也得想着转义<code>&amp;</code>符号。比方你打算写：
<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird</code></pre>
你就得在A标签中把<code>href</code>属性中的URL编码成：
<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code></pre>
不用说，这很容易忘。这往往是那些良构HTML站点中最容易出错的地方。

在Markdown中，你尽管自然的使用这些字符，只需要关心那些必要的转义。如果使用在HTML实体中使用&amp;符号，它会保持不变；而在其它场合，它会转换成<code>&amp;</code>。

所以，如果你打算在文章中书写版权符号，你可以这样写：
<pre><code>&amp;copy;</code></pre>
Markdown不会碰它。然而如果你书写
<pre><code>AT&amp;T</code></pre>
Markdown就会把它翻译成：
<pre><code>AT&amp;amp;T</code></pre>
类似的，既然Markdown支持内嵌HTML，如果你使用<code>&lt;</code>作为HTML标签定界符，Markdown就会把它们当成HTML标签定界符。可是如果你书写：
<pre><code>4 &lt; 5</code></pre>
Markdown就会把它翻译成：
<pre><code>4 &amp;lt; 5</code></pre>
然而，在Mardown代码行内标记和块级标记之中，<code>&lt;</code>和<code>&amp;</code><em>始终</em>会被自动编码。这使得在Markdown文件中书写HTML代码更容易.(相对于纯HTML。如果想在纯在纯HTML里贴一段HTML代码，那才是糟糕透顶，必须对代码中的每一个<code>&lt;</code>和<code>&amp;</code>都转义才成。)

<hr />

<h2 id="block">块级元素</h2>
<h3 id="p">段落和换行</h3>
一个段落由一行或多个相关文本行构成。段落之间用一个或多个空行分隔。（一个空行就是一个看上去什么也没有的行－－如果一行什么也没有或者只有空格和TAB都会被视为空行）正常的段落不要以空白或TAB字符开始。

一行或多个相关文本行意味着Markdown支持“硬折行”。这一点与其它text转HTML的程序完全不同（包括Moveable Type的“Convert Line Breaks”选项），它们会将段落中的每一个换行符转换成<code>&lt;br /&gt;</code>标签。

如果你<em>确实</em>需要使用Markdown插入一个<code>&lt;br /&gt;</code>换行符，只需要在每一行的末尾以两个或更多个空格符号结束，然后再打回车键。

没错，在Markdown里生成一个<code>&lt;br /&gt;</code>稍稍有一点麻烦，但那种简单的“把每一个换行符都转换成<code>&lt;br /&gt;</code>规则”并不适用于Markdown。Markdown Email风格的 blockquoting 和 multi-paragraph list items更好用 -- 并且更美观 -- 在你用换行符对其格式化时。
<h3 id="header">标题</h3>
Markdown 支持两种风格的标题，<a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank">Setext</a> 和 <a href="http://www.aaronsw.com/2002/atx/" target="_blank">atx</a>.

Setext-风格的一级标题下面一行使用等号符号，二级标题下面使用连字符符号，例如：
<pre><code>这是一个一级标题 ============= 这是一个二级标题 -------------</code></pre>
至少有一个<code>=</code>和<code>-</code>就能正常工作。

Atx-风格的标题在每行的开头使用1－6个井号字符，分别对应标题级别1－6。例如：
<pre><code># 这是一级标题 ## 这是二级标题 ###### 这是六级标题</code></pre>
如果愿意, 你也可以 "结束" atx-风格的标题。这纯粹是美观考虑--如果你觉得这样会看上更舒服些的话。结束用的井号个数随便，不必与起始井号数量相同 (起始井号的数量决定标题级别)：
<pre><code># 这是一级标题 # ## 这是二级标题 ## ### 这是三级标题 ######</code></pre>
<h3 id="blockquote">引用块</h3>
Markdown使用Email风格的 <code>&gt;</code> 字符引用块。如果你熟悉Email中的引用块，你就知道在Markdown中如何使用引用块。如果每一行你都使用硬换行并在行首放一个<code>&gt;</code>符号，看上去会很美观：
<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, &gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. &gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. &gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse &gt; id sem consectetuer libero luctus adipiscing.</code></pre>
（如果觉得每行写一个<code>&gt;</code>太累，）Markdown允许你偷懒，你只需在硬换行段落的第一行之前放一个<code>&gt;</code>号:
<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre>
只需要多加一个<code>&gt;</code>，就得到嵌套的引用块(即引用块中的引用块):
<pre><code>&gt; This is the first level of quoting. &gt; &gt; &gt; This is nested blockquote. &gt; &gt; Back to the first level.</code></pre>
引用块中可包含其它Markdown元素，如标题、列表和代码块：
<pre><code>&gt; ## This is a header. &gt; &gt; 1. This is the first list item. &gt; 2. This is the second list item. &gt; &gt; Here's some example code: &gt; &gt; return shell_exec("echo $input | $markdown_script");</code></pre>
是个象样的文本编辑器都能实现Email风格的引用。比如在BBEdit里，你就可以选中一些文字之后从Text菜单里选择引用级别。
<h3 id="list">列表</h3>
Markdown 支持有序列表和无序列表

无序列表可使用星号、加号和连字符（这几个符号是等价的，你喜欢哪个就用哪个）作为列表标记：
<pre><code>* Red * Green * Blue</code></pre>
等同于：
<pre><code>+ Red + Green + Blue</code></pre>
也等同于：
<pre><code>- Red - Green - Blue</code></pre>
有序列表则使用数字加英文句点：
<pre><code>1. Bird 2. McHale 3. Parish</code></pre>
有一点需要注意，你在列表中输入的标记数字并不会反映到Markdown输出的HTML之中。上面这个列表Markdown会输出为：
<pre><code>&lt;ol&gt; &lt;li&gt;Bird&lt;/li&gt; &lt;li&gt;McHale&lt;/li&gt; &lt;li&gt;Parish&lt;/li&gt; &lt;/ol&gt;</code></pre>
即使你写成下面这样：
<pre><code>1. Bird 1. McHale 1. Parish</code></pre>
甚至这样：
<pre><code>3. Bird 1. McHale 8. Parish</code></pre>
都会得到一模一样（但正确的）输出。要点在于，如果你愿意，就在你的Markdown有序列表里顺序使用数字（这样源代码里的顺序和生成的顺序会一致），如果你希望省点儿事，你就不用费心（去手工编号）。

如果你打算偷懒，记住列表的第一行使用数字 1。以后Markdown或许会支持有序列表从任意数字开始（译者注：这儿和前面的例子有点矛盾，原文如此）。

列表标记通常从左边界开始，至多可以有三个空格的缩进。列表标记之后至少要跟一个空格或TAB。

为了让列表看起来美观，你可以使用TAB缩进列表项内容，使其整齐:
<pre><code>* Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre>
不过如果你很懒，下面这样也行：
<pre><code>* Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre>
如果列表项之间用空行分隔，Markdown就会在HTML输出中使用<code>&lt;p&gt;</code>标签包裹列表项。比如：
<pre><code>* Bird * Magic</code></pre>
生成的HTML如下：
<pre><code>&lt;ul&gt; &lt;li&gt;Bird&lt;/li&gt; &lt;li&gt;Magic&lt;/li&gt; &lt;/ul&gt;</code></pre>
而这个：
<pre><code>* Bird * Magic</code></pre>
生成的HTML是这样：
<pre><code>&lt;ul&gt; &lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;</code></pre>
列表项有可能由多个段落组成，列表项的每个后续段落必须缩进至少4个空格或者一个TAB：
<pre><code>1. This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. 2. Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre>
像上面这样缩进后续段落的每一行看起来很美观（但稍有些麻烦），如果你比较懒（和我一样），没问题，Markdown支持你：
<pre><code>* This is a list item with two paragraphs. This is the second paragraph in the list item. You're only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. * Another item in the same list.</code></pre>
要在列表项中使用引用，引用定界符 <code>&gt;</code> 需要缩进：
<pre><code>* A list item with a blockquote: &gt; This is a blockquote &gt; inside a list item.</code></pre>
要在列表项中使用代码块，代码块需要缩进<em>两次</em> -- 8个空格或者两个TAB：
<pre><code>* A list item with a code block: &lt;code goes here&gt;</code></pre>
有时候不小心会触发一个有序列表，比方在写类似下面这样的东西时：
<pre><code>1986. What a great season.</code></pre>
换言之， 以<em>数字＋句点＋空格</em> 序列起始的行会触发有序列表。为避免此情况，要对句点符号进行转义：
<pre><code>1986\. What a great season.</code></pre>
<h3 id="precode">代码块</h3>
我们经常在写有关编程或标记语言源代码时用到预格式化的代码块。不像格式化普通段落，代码块中的行会按字面进行解释。Markdown对代码块同时使用<code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code>标签包裹：

在Markdown中要生成一个代码块，只需要在代码块内容的每一行缩进至少四个空格或者一个TAB。比如：
<pre><code>This is a normal paragraph: This is a code block.</code></pre>
Markdown会生成：
<pre><code>&lt;p&gt;This is a normal paragraph:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;This is a code block. &lt;/code&gt;&lt;/pre&gt;</code></pre>
Markdown会从生成的代码块中删除一级缩进 -- 4个空格或者1个TAB。看下面这个例子：
<pre><code>Here is an example of AppleScript: tell application "Foo" beep end tell</code></pre>
会得到：
<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;tell application "Foo" beep end tell &lt;/code&gt;&lt;/pre&gt;</code></pre>
代码块在遇到没有缩进的一行，或者文件末尾时自动结束。

在代码块中，<code>&amp;</code>符号和<code>&lt;</code>、<code>&gt;</code>会自动转换成HTML实体。因此在Markdown中包含HTML源代码只是小菜一碟－－粘贴进去，缩进一下。剩下的脏活累活Markdown自会处理。看下面这个例子：
<pre><code> &lt;div class="sample_footer"&gt; &amp;copy; 2004 Foo Corporation &lt;/div&gt;</code></pre>
Markdown会生成：
<div>© 2004 Foo Corporation</div>
<pre> </pre>
&nbsp;

Markdown不会解析代码块中的Markdown标记。如代码块中的星号就是星号，失去了它原来的Markdown含义。这意味着你能够使用Markdown编写Markdown自己的语法教程。（就象这篇文章一样）。
<h3 id="hr">水平线</h3>
如果在一行里只放三个或更多个连字符，或星号或下划线，你就会得到一个水平线标记(<code>&lt;hr /&gt;</code>)。下面每一行都会得到一个水平线：
<pre><code>* * * *** ***** - - - ---------------------------------------</code></pre>

<hr />

<h2 id="span">行内元素</h2>
<h3 id="link">链接</h3>
Markdown 支持两种风格的链接： <em>行内链接</em> 和 <em>引用链接</em>.

两种风格的链接，链接文本都放在中括号之内[square brackets]。

要生成一个行内链接，在链接文本之后紧跟用一对小括号。小括号里放链接地址和<em>可选的</em>的链接title。如果提供链接title的话，链接title要用引号包起来。例如：
<pre><code>这是一个 [an example](http://example.com/ "Title") 行内链接。 [这个链接](http://example.net/) 没有title属性。</code></pre>
Markdown会生成：
<pre><code>&lt;p&gt;This is &lt;a href="http://example.com/" title="Title"&gt; an example&lt;/a&gt; inline link.&lt;/p&gt; &lt;p&gt;&lt;a href="http://example.net/"&gt;This link&lt;/a&gt; has no title attribute.&lt;/p&gt;</code></pre>
如果你打算引用一个本地资源或者同一站点的资源，可以使用相对路径：
<pre><code>如果想进一步了解我，请参阅我的 [关于我](/about/) 页。</code></pre>
引用风格的链接，在链接文本之后紧跟又一对中括号。这对中括号里放的是该链接的标识符（可以理解为别名）：
<pre><code>这是一个引用型链接 [示例][id]。</code></pre>
如果你嫌弃两对中括号过于亲密，Markdown允许你在两对中括号之间放一个空格：
<pre><code>这是一个引用型链接 [示例] [id]。</code></pre>
然后，我们可以在文档的任意位置，像下面这样定义链接标识与链接的对应关系（一行一个链接）：
<pre><code>[id]: http://example.com/ "Optional Title Here"</code></pre>
即：
<ul>
	<li>中括号内放链接标识符(行前可选缩进，至多不超过三个空格)；</li>
	<li>之后紧跟一个冒号；</li>
	<li>再后面是一个或多个空格（TAB也行）；</li>
	<li>接下来是链接URL；</li>
	<li>最后面是可选的用双引号或单引号或小括号括起来的链接title。</li>
</ul>
下面三种链接定义方式是等价的：
<pre><code>[foo]: http://example.com/ "Optional Title Here" [foo]: http://example.com/ 'Optional Title Here' [foo]: http://example.com/ (Optional Title Here)</code></pre>
<strong>注意：</strong> Markdown.pl 1.0.1 版本有一个已知的bug，用单引号作为链接title的定界符会出问题。

至于链接URL，还支持使用一对可选的尖括号包裹起来：
<pre><code>[id]: &lt;http://example.com/&gt; "Optional Title Here"</code></pre>
你也可以将链接的title属性放在下一行并使用额外的空格或TAB填充，这样较长的URL会比较美观：
<pre><code>[id]: http://example.com/longish/path/to/resource/here "Optional Title Here"</code></pre>
链妆定义仅供Markdown解析器使用。最终输出的HTML当中不会包含链接定义。

链接标识符可以由字母、数字、空格和标点符号组成－－不区分大小写。下面这两个链接：
<pre><code>[link text][a] [link text][A]</code></pre>
是等价的。

<em>隐式链接标识</em> 允许我们省略链接标识，这时链接文本本身就是链接标识。在链接文本之后加一对空的中括号－－例如，使用"Google"文本链接到google.com站点，可以这样写：
<pre><code>[Google][]</code></pre>
然后这样定义它的链接：
<pre><code>[Google]: http://google.com/</code></pre>
链接名字有可能包含空格，不过没问题，这种情况照样正常工作：
<pre><code>Visit [Daring Fireball][] for more information.</code></pre>
然后这样定义这个链接：
<pre><code>[Daring Fireball]: http://daringfireball.net/</code></pre>
链接定义可放于Markdown文档的任意位置。我建议把它们就近放到最先使用它的段落之后。不过如果你更喜欢放到文档末尾，当成某种形式的尾注，随你的便。

下面是一些引用链接的例子：
<pre><code>I get 10 times more traffic from [Google] [11] than from [Yahoo] [12] or [MSN] [13]. [1]: http://google.com/ "Google" [2]: http://search.yahoo.com/ "Yahoo Search" [3]: http://search.msn.com/ "MSN Search"</code></pre>
换成隐式链接标识，也可以这么写：
<pre><code>I get 10 times more traffic from [Google][] than from [Yahoo][] or [MSN][]. [google]: http://google.com/ "Google" [yahoo]: http://search.yahoo.com/ "Yahoo Search" [msn]: http://search.msn.com/ "MSN Search"</code></pre>
上面两种写法最终得到HTML输出是一样的：
<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href="http://google.com/" title="Google"&gt;Google&lt;/a&gt; than from &lt;a href="http://search.yahoo.com/" title="Yahoo Search"&gt;Yahoo&lt;/a&gt; or &lt;a href="http://search.msn.com/" title="MSN Search"&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre>
作为比较，下面这个段落使用Markdown的行内链接风格编写：
<pre><code>I get 10 times more traffic from [Google](http://google.com/ "Google") than from [Yahoo](http://search.yahoo.com/ "Yahoo Search") or [MSN](http://search.msn.com/ "MSN Search").</code></pre>
引用型链接的亮点并不在于它更容易书写，而在于引用型链接让你的文档可读性更好。看看上面的例子：使用引用型链接，段落本身仅81个字符；而使用行内链接的例子，是176个字符。最终输出的HTML则有234个字符。纯HTML中标记字符甚至超过了文本本身。

使用Markdown的引用型链接，源文档更接近于最终的浏览器输出效果。再加上Markdown允许将标记有关的元数据移到段落之外，你尽管添加链接，而不必担心打断文件的故事情节。
<h3 id="em">强调</h3>
Markdown使用星号(<code>*</code>)和下划线(<code>_</code>)作为表示强调。用一个 <code>*</code> 或 <code>_</code> 包裹的文本会使用 HTML <code>&lt;em&gt;</code> 标签包裹; 用两个 <code>*</code> 或 <code>_</code>包裹的文本会使用HTML<code>&lt;strong&gt;</code> 标签包裹。如：
<pre><code>*single asterisks* _single underscores_ **double asterisks** __double underscores__</code></pre>
将会输出为：
<pre><code>&lt;em&gt;single asterisks&lt;/em&gt; &lt;em&gt;single underscores&lt;/em&gt; &lt;strong&gt;double asterisks&lt;/strong&gt; &lt;strong&gt;double underscores&lt;/strong&gt;</code></pre>
你喜欢哪一种风格就用哪一种，唯一的限制就是起始字符与关闭字符必须一致。

强调符号可用于一个单词的一部分：
<pre><code>un*frigging*believable</code></pre>
不过如果你用空格包裹单独的 <code>*</code> 或 <code>_</code>，它们就失去了强调的含义，而成为字面上的星号或下划线。

如果不想让Markdown解释这两个元字符，就转义它：
<pre><code>\*this text is surrounded by literal asterisks\*</code></pre>
<h3 id="code">代码</h3>
要在行内表示部分代码，用反引号(<code>`</code>)包住它。与预格式代码块不同和，行内代码用于段落之内。例如：
<pre><code>Use the `printf()` function.</code></pre>
会生成：
<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</code></pre>
要在一个行内代码中使用反引号（<code>`</code>）本身，用多个反引号作为定界符包住它：
<pre><code>``There is a literal backtick (`) here.``</code></pre>
这样就会得到：
<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</code></pre>
包住行内代码的反引号定界符可以包括空格－－即在起始反引号之后，结束反引号之前可以有一个空格。这使得我们能够在行内代码的开始或结束处使用反引号：
<pre><code>A single backtick in a code span: `` ` `` A backtick-delimited string in a code span: `` `foo` ``</code></pre>
会生成：
<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt; &lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</code></pre>
在行内代码中，<code>&amp;</code>和<code>&lt;</code>和<code>&gt;</code>会自动编码为HTML实体，以方便包含HTML标签。Markdown会把下面这行：
<pre><code>Please don't use any `&lt;blink&gt;` tags.</code></pre>
转换为：
<pre><code>&lt;p&gt;Please don't use any &lt;code&gt;&lt;blink&gt;&lt;/code&gt; tags.&lt;/p&gt;</code></pre>
你也可以这样写：
<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</code></pre>
会得到：
<pre><code>&lt;p&gt;&lt;code&gt;&amp;#8212;&lt;/code&gt; is the decimal-encoded equivalent of &lt;code&gt;&amp;mdash;&lt;/code&gt;.&lt;/p&gt;</code></pre>
<h3 id="img">图片</h3>
必须承认，要以“自然的”语法把一个图片放到一个纯文本文档之中，确实是一个挑战。

Markdown使用了类似链接语法来表示图片，同样有两种风格：<em>行内图片</em>和<em>引用图片</em>。

行内图片语法示例：
<pre><code>![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg "Optional title")</code></pre>
即：
<ul>
	<li>一个感叹号<code>!</code>开头；</li>
	<li>其后紧跟一对中括号，中括号内存放图片的alt`属性；</li>
	<li>其后紧跟一对小括号，小括号内存放图片的URL或路径，及可选的用双引号或单引号或小括号括起来的图片<code>title</code></li>
</ul>
引用图片语法如下：
<pre><code>![Alt text][id]</code></pre>
这里 "id" 是图片引用标识。图片引用定义的语法与链接定义完全相同：
<pre><code>[id]: url/to/image "Optional title attribute"</code></pre>
在写这篇文章时，Markdown还没有语法指定图片的大小，如果这一点对你特别重要，你可以直接使用<code>&lt;img&gt;</code>标签。

<hr />

<h2 id="misc">杂七杂八</h2>
<h3 id="autolink">自动链接</h3>
Markdown提供了一种快捷方式"自动地"定义链接和Email地址：直接用一对尖括号把URL或Email地址包住。这表示链接文本就是URL本身，Email文本就是Email本身。这样你就得到了一个可点击的链接，如：
<pre><code>&lt;http://example.com/&gt;</code></pre>
Markdown会将它转换为：
<pre><code>&lt;a href="http://example.com/"&gt;http://example.com/&lt;/a&gt;</code></pre>
自动Email地址工作方式相似，只有一点不同。Markdown自动的用一些十进制和十六进制数字表示你的Email，以防止遭遇垃圾邮件袭击。 例如：
<pre><code>&lt;address@example.com&gt;</code></pre>
会被转换为：
<pre><code>&lt;a href="&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65; &amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111; &amp;#109;"&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61; &amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</code></pre>
浏览器会将它渲染为一个可点击的链接，并正确显示 "address@example.com"。

(这种实体编码的小方法可以骗过一些收集邮件地址的机器人，不过它确实无法骗过所有的机器人。有总比没有强，聊胜于无。能阻止一点就阻止一点好了。)
<h3 id="backslash">反斜线转义</h3>
Markdown允许你使用反斜线转义那些Markdown元字符，让它们失去原有的“魔力”。举个例子，如果你确实想用星号包住一个词组（而不是想得到<code>&lt;em&gt;</code>标签），就可以在星号之前使用反斜线将其转义。即：
<pre><code>\*literal asterisks\*</code></pre>
Markdown中，以下字符支持使用反斜线转义：
<pre><code>\ 反斜线 ` 反引号 * 星号 _ 下划线 {} 大括号 [] 中括号 () 小括号 # 井号 + 加号 - 减号（连字符） . 句点 ! 感叹号</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>436</wp:post_id>
		<wp:post_date>2012-04-24 14:52:26</wp:post_date>
		<wp:post_date_gmt>2012-04-24 06:52:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>markdown%e8%af%ad%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cn"><![CDATA[CN]]></category>
		<category domain="post_tag" nicename="markdown"><![CDATA[markdown]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<category domain="post_tag" nicename="%e4%b8%ad%e6%96%87"><![CDATA[中文]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>16 Impressive CSS3, HTML5 and Javascript Experiments From Hakim</title>
		<link></link>
		<pubDate>Thu, 26 Apr 2012 02:45:54 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=441</guid>
		<description></description>
		<content:encoded><![CDATA[If you're a fan of Canvas, WebGL and interactive CSS3, HTML5 and Javascript, you most probably have heard of the name <a href="http://hakim.se/">Hakim</a>. Hakim is a web developer and creative programmer from Sweden who passionate about working with animation and interactivity. He has many personal projects and experiments with HTML5, CSS and Javascript showcased in <a href="http://www.chromeexperiments.com/">Chrome Experiments</a> and other places. We are really impressed but his creativity and cool stuff that he managed to create, and the following is some of the coolest things on the web.
<ul>
	<li><a href="http://lab.hakim.se/scroll-effects" target="_blank">CSS3 Scroll Effect</a>Cool list scrolling effect. Not intended for any practical use but the visuals are surprisingly impactful.

<img title="CSS3 Scroll Effect" src="http://favbulous.com/resources/uploaded/hakim/1.jpg" alt="CSS3 Scroll Effect" /></li>
	<li><a href="http://hakim.se/experiments/css/domtree" target="_blank">DOM Tree</a>Christmas Pine Tree wit form elements.

<img title="DOM Tree" src="http://favbulous.com/resources/uploaded/hakim/2.jpg" alt="DOM Tree" /></li>
	<li><a href="http://hakim.se/experiments/html5/origami" target="_blank">Origami</a>Simply a colorful folding doodle on. Click anywhere on the drawing -- or use your keyboard -- to activate different layouts.

<img title="Origami" src="http://favbulous.com/resources/uploaded/hakim/3.jpg" alt="Origami" /></li>
	<li><a href="http://hakim.se/experiments/html5/404/netmag.html" target="_blank">.net 404</a>A creepy 404 page for .net magazine.

<img title=".net 404" src="http://favbulous.com/resources/uploaded/hakim/4.jpg" alt=".net 404" /></li>
	<li><a href="http://hakim.se/experiments/html5/sphere/" target="_blank">Sphere</a>The sphere -- actually more of a spiral -- is built out of 10,000 particles and the structure changes over time.

<img title="Sphere" src="http://favbulous.com/resources/uploaded/hakim/5.jpg" alt="Sphere" /></li>
	<li><a href="http://textify.it/" target="_blank">Textify.it</a>Browser for or drag an image onto the page and watch it be reconstructed purely out of text. The markup for the resulting textual image can be copied and used elsewhere.

<img title="Textify.it" src="http://favbulous.com/resources/uploaded/hakim/6.jpg" alt="Textify.it" /></li>
	<li><a href="http://hakim.se/experiments/webgl/particles/01/" target="_blank">WebGL Particles</a>An experiment created to test the efficiency of particles rendering with WebGL.

<img title="WebGL Particles" src="http://favbulous.com/resources/uploaded/hakim/7.jpg" alt="WebGL Particles" /></li>
	<li><a href="http://hakim.se/experiments/html5/breakdom/" target="_blank">BreakDOM</a>This is a remix of the classic Breakout game except all game elements have been replaced with HTML user interface elements.

<img title="BreakDOM" src="http://favbulous.com/resources/uploaded/hakim/8.jpg" alt="BreakDOM" /></li>
	<li><a href="http://sinuousgame.com/" target="_blank">Sinuous</a>A game built on the HTMLCanvas element which will test your mouse pointer reflexes. The objective is to stay clear of the evil red dots and stay alive as long as possible.

<img title="Sinuous" src="http://favbulous.com/resources/uploaded/hakim/9.jpg" alt="Sinuous" /></li>
	<li><a href="http://hakim.se/experiments/html5/magnetic/02/" target="_blank">Magnetic</a>Control and create currents of particles which react to magnetic nodes.

<img title="Magnetic" src="http://favbulous.com/resources/uploaded/hakim/10.jpg" alt="Magnetic" /></li>
	<li><a href="http://hakim.se/experiments/html5/wave/03/" target="_blank">Wave</a>A wave with bubbles floating on the surface, the bubbles each represent a tweet with the word "water" in it.

<img title="Wave" src="http://favbulous.com/resources/uploaded/hakim/11.jpg" alt="Wave" /></li>
	<li><a href="http://hakim.se/experiments/html5/trail/03/" target="_blank">Trail</a>Particle movement patterns that generate smooth trails.

<img title="Trail" src="http://favbulous.com/resources/uploaded/hakim/12.jpg" alt="Trail" /></li>
	<li><a href="http://hakim.se/experiments/html5/blob/03/" target="_blank">Blob</a>Soft blobby physics. It's like, you know... jelly?

<img title="Blob" src="http://favbulous.com/resources/uploaded/hakim/13.jpg" alt="Blob" /></li>
	<li><a href="http://hakim.se/experiments/html5/bacterium/01/" target="_blank">Bacterium</a>An interactive experiment with bacteria in a playful and dynamic physics world.

<img title="Bacterium" src="http://favbulous.com/resources/uploaded/hakim/14.jpg" alt="Bacterium" /></li>
	<li><a href="http://hakim.se/experiments/html5/particledepth/02/" target="_blank">Particle Depth</a>Particle positioning patterns using depth.

<img title="Particle Depth" src="http://favbulous.com/resources/uploaded/hakim/15.jpg" alt="Particle Depth" /></li>
	<li><a href="http://hakim.se/experiments/html5/keylight/03/" target="_blank">Keylight</a>A playhead travels between keys which resonate in sound depending on where they are placed in the room.

<img title="Keylight" src="http://favbulous.com/resources/uploaded/hakim/16.jpg" alt="Keylight" /></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>441</wp:post_id>
		<wp:post_date>2012-04-26 10:45:54</wp:post_date>
		<wp:post_date_gmt>2012-04-26 02:45:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>16-impressive-css3-html5-and-javascript-experiments-from-hakim</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="css3"><![CDATA[CSS3]]></category>
		<category domain="post_tag" nicename="html5"><![CDATA[HTML5]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>十个免费的Web压力测试工具</title>
		<link></link>
		<pubDate>Thu, 03 May 2012 03:15:38 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=448</guid>
		<description></description>
		<content:encoded><![CDATA[relate resources:

<a href="http://ruby-china.org/topics/3027">如何测试 rails 网站在高并发下的性能？</a>

两天，jnj在本站发布了《<a href="http://coolshell.cn/articles/2574.html" rel="bookmark" target="_blank">如何在低速率网络中测试 Web 应用</a>》，那是测试网络不好的情况。而下面是十个免费的可以用来进行Web的负载/压力测试的工具，这样，你就可以知道你的服务器以及你的WEB应用能够顶得住多少的并发量，以及你的网站的性能。我相信，北京奥组委的订票网站的开发团队并不知道有这样的测试工具。

<strong><a href="http://grinder.sourceforge.net/" target="_blank">Grinder</a></strong> –  Grinder是一个开源的JVM负载测试框架，它通过很多负载注射器来为分布式测试提供了便利。 支持用于执行测试脚本的Jython脚本引擎HTTP测试可通过HTTP代理进行管理。根据项目网站的说法，Grinder的 主要目标用户是“理解他们所测代码的人——Grinder不仅仅是带有一组相关响应时间的‘黑盒’测试。由于测试过程可以进行编码——而不是简单地脚本 化，所以程序员能测试应用中内部的各个层次，而不仅仅是通过用户界面测试响应时间。

<strong><a href="http://www.pylot.org/" target="_blank">Pylot</a></strong> -Pylot是一款开源的测试web service性能和扩展性的工具，它运行HTTP 负载测试，这对容量计划，确定基准点，分析以及系统调优都很有用处。Pylot产生并发负载（HTTP Requests），检验服务器响应，以及产生带有metrics的报表。通过GUI或者shell/console来执行和监视test suites。

<a href="http://www.iis.net/community/default.aspx?tabid=34&amp;i=1466&amp;g=6" target="_blank"><strong>Web Capacity Analysis Tool (WCAT)</strong></a> – 这是一种轻量级负载生成实用工具，不仅能够重现对 Web 服务器（或负载平衡服务器场）的脚本 HTTP 请求，同时还可以收集性能统计数据供日后分析之用。WCAT 是多线程应用程序，并且支持从单个源控制多个负载测试客户端，因此您可以模拟数千个并发用户。该实用工具利用您的旧机器作为测试客户端，其中每个测试客户 端又可以产生多个虚拟客户端（最大数量取决于客户端机器的网络适配器和其他硬件）。您可以选择使用 HTTP 1.0 还是 HTTP 1.1 请求，以及是否使用 SSL。并且，如果测试方案需要，您还可以使用脚本执行的基本或 NTLM 身份验证来访问站点的受限部分。（如果您的站点使用 cookie、表单或基于会话的身份验证，那您可以创建正确的 GET 或 POST 请求来对测试用户进行身份验证。）WCAT 还可管理您站点可能设置的任何 cookie，所以配置文件和会话信息将永久保存。

&nbsp;

<strong><a href="http://fwptt.sourceforge.net/index.html" target="_blank">fwptt</a></strong> – fwptt 也是一个用来进行WEB应用负载测试的工具。它可以记录一般的请求，也可以记录Ajax请求。它可以用来测试 asp.net， jsp， php 或是其它的Web应用。

<strong><a href="http://jcrawler.sourceforge.net/" target="_blank">JCrawler</a></strong> – JCrawler是一个开源(<a href="http://www.opensource.org/licenses/cpl.php" target="_blank"> CPL</a>) 的WEB应用压力测试工具。通过其名字，你就可以知道这是一个用Java写的像网页爬虫一样的工具。只要你给其几个URL，它就可以开始爬过去了，它用一 种特殊的方式来产生你WEB应用的负载。这个工具可以用来测试搜索引擎对你站点产生的负载。当然，其还有另一功能，你可以建立你的网站地图和再点击一下， 将自动提交Sitemap给前5名的搜索引擎！

<strong><a href="http://jakarta.apache.org/jmeter/" target="_blank">Apache JMeter</a></strong> – Apache JMeter是一个专门为运行和服务器装载测试而设计的、100％的纯Java桌面运行程序。原先它是为Web/HTTP测试而设计的，但是它已经扩展以 支持各种各样的测试模块。它和用于HTTP和SQL数据库（使用JDBC）的模块一起运送。它可以用来测试静止资料库或者活动资料库中的服务器的运行情 况，可以用来模拟对服务器或者网络系统加以重负荷以测试它的抵抗力，或者用来分析不同负荷类型下的所有运行情况。它也提供了一个可替换的界面用来定制数据 显示，测试同步及测试的创建和执行。

<strong><a href="http://www.joedog.org/index/siege-home" target="_blank">Siege</a></strong> -Siege（英文意思是围攻）是一个压力测试和评测工具，设计用于WEB开发这评估应用在压力下的承受能力：可以根据配置对一个WEB站点进行多用户的 并发访问，记录每个用户所有请求过程的相应时间，并在一定数量的并发访问下重复进行。 Siege 支持基本的认证，cookies， HTTP 和 HTTPS 协议。

<strong><a href="http://www.acme.com/software/http_load/" target="_blank">http_load</a></strong> – http_load 以并行复用的方式运行，用以测试web服务器的吞吐量与负载。但是它不同于大多数压力测试工具，它可以以一个单一的进程运行，一般不会把客户机搞死。可以可以测试HTTPS类的网站请求。

<strong><a href="http://www.web-polygraph.org/" target="_blank">Web Polygraph</a></strong> – Web Polygraph这个软件也是一个用于测试WEB性能的工具，这个工具是很多公司的标准测试工具，包括微软在分析其软件性能的时候，也是使用这个工具做为基准工具的。很多招聘测试员的广告中都注明需要熟练掌握这个测试工具。

<strong><a href="http://opensta.org/" target="_blank">OpenSTA</a></strong> – OpenSTA是一个免费的、开放源代码的web性能测试工具，能录制功能非常强大的脚本过程，执行性能测试。例如虚拟多个不同的用户同时登陆被测试网 站。其还能对录制的测试脚本进行,按指定的语法进行编辑。在录制完测试脚本后，可以对测试脚本进行编辑，以便进行特定的性能指标分析。其较为丰富的图形化 测试结果大大提高了测试报告的可阅读性。OpenSTA 基于CORBA 的结构体系，它通过虚拟一个proxy，使用其专用的脚本控制语言，记录通过 proxy 的一切HTTP/S traffic。通过分析OpenSTA的性能指标收集器收集的各项性能指标，以及HTTP 数据，对系统的性能进行分析。

欢迎您留下你认为不错的WEB应用性能测试的工具。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>448</wp:post_id>
		<wp:post_date>2012-05-03 11:15:38</wp:post_date>
		<wp:post_date_gmt>2012-05-03 03:15:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%8d%81%e4%b8%aa%e5%85%8d%e8%b4%b9%e7%9a%84web%e5%8e%8b%e5%8a%9b%e6%b5%8b%e8%af%95%e5%b7%a5%e5%85%b7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="web"><![CDATA[web]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<category domain="post_tag" nicename="%e5%8e%8b%e5%8a%9b%e6%b5%8b%e8%af%95"><![CDATA[压力测试]]></category>
		<category domain="post_tag" nicename="%e5%b7%a5%e5%85%b7"><![CDATA[工具]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GTD</title>
		<link></link>
		<pubDate>Fri, 04 May 2012 03:00:06 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=453</guid>
		<description></description>
		<content:encoded><![CDATA[GTD是英文Getting Things Done的缩写，是一种行为管理的方法，也是David Allen写的一本书的书名。

GTD的主要原则在于一个人需要通过记录的方式把头脑中的各种任务移出来。通过这样的方式，头脑可以不用塞满各种需要完成的事情，而集中精力在正在完成的事情。

GTD是关于什么的

和其他<a title="时间管理" href="http://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86">时间管理</a>专家不同的是，Allen并不把重点放在设置任务的优先级。他提出制定出在各种环境下的任务列表，例如，制定一个需要打电话的列表，或者在市区才能完成的事情的列表。他也建议任何两分钟之内就能完成的任务应该马上做。

GTD在心理上的好处在于使你需要完成的事情相关的信息易于保存，跟踪和获取。Allen认为导致很多我们在做事的时候碰到的脑力上的障碍的原因是前期的计划不足（举个例子，对任何项目我们需要弄清楚要达到什么目标，还有什么措施需要完成）。

Allen认为我们的脑力上的“提醒系统”相当的低效，很少能够在恰当的时间和地点提醒我们需要做的事情。因此，把“下一步行动”根据场景分类存放在“可信的系统”当中，是一个能使我们在正确的时间得到正确的提醒的手段。在“GTD”中有很多个人的管理小技巧在实行Allen描述的工作流程中很有用的。

一个很概括的对于Allen的书的内容的描述是<em>对于任何事情都准备好</em>:

<dl><dd>“把所有事情都从你的脑袋里弄出来。在事情出现，而不是在事情爆发的时候,就做好相关行动的一系列决定。以合适的类别组织好你的项目的各种提醒以及下一步的行动。保持你的系统更新和完整，充分地检查，使你在任何时候都能信任你的对于你正在做（或者不做）的事情直觉的选择。”</dd></dl>
<h2>原则</h2>
GTD的核心原则如下：
<h3>搜集</h3>
把任何你需要跟踪或者记住或者做的事情记在Allen称之为‘水桶’的地方：一个收件箱，电子邮箱，磁带，笔记本，PDA，或者它们的组合。把你脑子里的任何东西都拿出来放到你的搜集设备里，准备好做下一步的处理。每星期所有的水桶都应该被至少清空一次。
<h3>处理</h3>
处理你的收件箱要遵循一个严格的工作流程：
<ul>
	<li>从最上面开始。</li>
	<li>一次处理一项。</li>
	<li>不把任何东西放回收件箱。</li>
	<li>如果任何一项需要做：</li>
</ul>
<dl><dd>
<ul>
	<li>做（如果花的时间少于两分钟）</li>
	<li>委托别人完成，或者</li>
	<li>把它延期。</li>
</ul>
</dd></dl>
<ul>
	<li>否则</li>
</ul>
<dl><dd>
<ul>
	<li>把它存档以便查询，</li>
	<li>把它扔掉，或者</li>
	<li>使它成熟以便下一步的处理</li>
</ul>
</dd></dl>两分钟原则：任何事情如果花的时间少于两分钟，那么马上就去做。两分钟是一个分水岭，这样的时间和正式地推迟一个动作所花的时间差不多。
<h3>组织</h3>
Allen描述了一个建议的列表集合，你可以用来跟踪需要关注的项目：
<ul>
	<li><strong>下一步行动(Next actions)</strong>- 对于每个需要你关注的事项，定好什么是你可以实际采取的下一步行动。例如，如果事项为“写项目报告”，下一步行动可能会是“给Fred发邮件开个简短会议”，或者“给Jim打电话问报告的要求”，或者类似的事情。虽然要完成这个事项，可能会有很多的步骤和行动，但是其中一定会有你需要首先去做的事情，这样的事情就应该被记录在“下一步行动”列表上。较好的做法是把这些事项根据能够被完成的“环境”整理分类，例如“在办公室”,“用电话”,“在商场”.</li>
	<li><strong>专案(Projects)</strong>- 每个需要多于一个实际的行动才能达到的生活或者工作中的“开放式回路”就是一个“专案”.使用跟踪以及周期性的回顾来确保每个专案都有一个下一步的行动进行下去。</li>
	<li><strong>等待(Waiting for)</strong>- 当你已经指派了一个事项给其他人或者在项目进行下去之前需要等待外部的事件，就应当在你的系统当中跟踪以及定期检查是否已经可以采取行动或者需要发出一个提醒。</li>
	<li><strong>将来／可能(Someday/Maybe)</strong> - 这些事情你需要在某个点去做，但是不是马上。例如：“学习中文”，或者“进行一个潜水假期”.</li>
</ul>
对于跟踪你的预约和委托，一个日历也是重要的；另外，Allen特别推荐日历应该被用在他所谓的“硬工程”上：必须在某个特定的期限之前完成的事情，或者在约定的时间和地点完成的会议和约会.“待办”事项应该用在下一步行动列表当中。

GTD的最后一个关键组织模块是归档系统.“Getting Things Done”书里说如果要用一个归档系统，那它必须得是简单易用和有趣。即使是一张纸，如果你需要用来记录参考信息，如果不属于你已经有的一个目录，也要有自己的文件组织方式。Allen的建议是你可以维护一个按照字母顺序组织的归档系统，这样可以比较容易快速的存储和提取你所想要的信息。

Google的<a title="Gmail" href="http://zh.wikipedia.org/wiki/Gmail">Gmail</a>的用户可以用创建标签的方式来创建“待办事项”和“项目”，这种方式在Bryan Murdaugh的 “Getting Things Done with Gmail” <a href="http://spaceagewasteland.com/gtd%20with%20gmail.pdf" rel="nofollow">[1]</a>白皮书中有清楚的描述。它保留了很多GTD的相同概念，但是是在在线的电子邮件系统中实施。
<h3>检查</h3>
如果你不至少每天或者只要你有时间就回顾检查，那么你的行动和提醒的列表将会变的毫无用处。以你当时拥有的精力，资源和时间，决定什么是对你来说最重要的事情，然后做。如果你倾向于拖延，你可能会老是做最容易的事情，避免那些难的。为了解决这个问题，你可以一个接一个地做列表上的事情，按照它们的顺序，就象你处理你的收件箱一样。

至少以星期为周期，GTD要求你回顾所有你比较主要的“行动”,“项目”和“等待”的事项，确保所有的新任务或者即将到来的事件都进入你的系统，而且所有的事情都更新到符合最新的情况。Allen建议制作一个<a href="http://zh.wikipedia.org/wiki/GTD#.E5.B7.A5.E5.85.B7.E5.92.8C.E6.8A.80.E5.B7.A7">难题档案</a>来帮助你更新你关于主要行动的记忆。
<h3>做</h3>
如果你把你的时间都花在组织工作，而不是做它们，那么所有的GTD系统都是不好用的！David Allen的观点是，如果你可以把必须做的事情，让它变得简单、容易、有趣的话，那你就比较不会拖延、或者被太多的“开放性回路”所压倒。
<h2> 工具和技巧</h2>
<div>
<div>
<div>一个Allen推荐的工具是<strong>难题文件夹</strong>，用来组织你的GTD的文字工作（也被称为‘43文件夹’）.12个文件夹用来表示每一个月，另外的31个文件夹用来表示每一天。这些文件夹用来帮助提醒你当天的活动。每天你打开表达当天的文件夹。你把所有的事项都拿出文件夹，然后把空文件夹放进下一个月里。这种处理允许你为自己保存提醒的硬拷贝。例如，如果你在这个月的12号有一个音乐会，你可以把票放在第12个文件夹当中。当12号到的时候，它就在那里等着你。</div>
</div>
</div>
<h3>DIY Planner Hipster PDA</h3>
这是一种用来执行GTD的纸本DIY范本，对于习惯用实体纸本计划的人来说，可作为另一种优质选择。<a href="http://www.douglasjohnston.net/weblog/archives/2005/06/11/diyp2_hipsterpda/" rel="nofollow">[2]</a>
<h2> 引用</h2>
<ul>
	<li><a title="David Allen (author)" href="http://zh.wikipedia.org/w/index.php?title=David_Allen_(author)&amp;action=edit&amp;redlink=1">Allen, David</a>. Getting Things Done: The Art of Stress-Free Productivity. Penguin Books. 2001. <a href="http://zh.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/0142000280">ISBN 0-14-200028-0</a>. </li>
	<li><a title="David Allen (author)" href="http://zh.wikipedia.org/w/index.php?title=David_Allen_(author)&amp;action=edit&amp;redlink=1">Allen, David</a>. Ready for Anything. Viking Books. 2003. <a href="http://zh.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/0670032506">ISBN 0-670-03250-6</a>. </li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>453</wp:post_id>
		<wp:post_date>2012-05-04 11:00:06</wp:post_date>
		<wp:post_date_gmt>2012-05-04 03:00:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gtd</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gtd"><![CDATA[GTD]]></category>
		<category domain="category" nicename="live"><![CDATA[live]]></category>
		<category domain="post_tag" nicename="wiki"><![CDATA[Wiki]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby on Rails – Programming Best Practices</title>
		<link></link>
		<pubDate>Fri, 04 May 2012 05:44:08 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=455</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Don't Repeat Yourself</strong>

I'm sure most of you have heard of the <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY principle</a>. It is something Rails has taken to heart, and I'm very glad it has. By not repeating yourself you can freely change something in one area of the program without worrying if you need to make the same change in another area. Not only that, but keeping the code DRY usually leads to better design.

Sometimes it is difficult to find duplication in your code. If you find yourself making a similar change in multiple places, you should first remove this duplication so you only need to make the change <strong>in one place</strong>.

This principle should not only be followed in code, but in your database and other areas as well. If you are repeating logic or data in the database, consider changing the design so it is not repeated.

That said, there are times when repeated data is good. For example, if you are building a cart system, the price for the items in the cart should be stored in a separate field than the price for the product. This allows you to change the price of the product without effecting all previous orders.

&nbsp;

<strong>Stick to the Conventions</strong>

Another extremely important practice taken up by the Rails community: stick to the conventions. From naming variables to structuring files, there are conventions on how to do these things in Rails. If you are unsure of the conventions, check out a Rails book or tutorial - most of them stick to the conventions.

The advantages of sticking to conventions are almost too numerous to count. In fact, it deserves <a href="http://railsforum.com/viewtopic.php?id=1042">its own article</a>.

&nbsp;

<strong>Optimize Later</strong>

Performance is a major concern for many people switching to Rails, and rightly so. It is true that Rails is generally slower than other web frameworks. However, it is very scalable, so do not worry about it at the beginning. If you are a large corporation that needs to handle thousands of requests per second, then you may have something to be concerned about, but for the majority of us performance does not need to be considered until near the completion of the application.

Any optimization done early requires guessing. Instead you should wait until you know where the bottlenecks are. Optimizing usually requires extra/complex code, and you should keep the code as clean and simple as possible. Therefore, only optimize where necessary. Also, any performance testing should be done in the <strong>production</strong> environment, as this adds some optimizations which are usually turned off in the <strong>development</strong> environment.

Above all else, don't let fear of poor performance inhibit you from making good design decisions! There are usually good ways to optimize while still keeping the good design, but these ways are hard to see unless you have a good design already in place. In short, don't worry about performance while designing.

&nbsp;

<strong>Humans First</strong>

Code for humans first, computers second. In other words, make the code as readable as you can. No, I'm not talking about cluttering it with comments. Most code should be understandable <strong>without comments</strong>.

How do you make the code more readable without comments? Rename variables, move code into classes/methods, etc. Try to give variables and methods concise, yet descriptive names. Do not abbreviate the names unless the abbreviation is very common.

&nbsp;

<strong>Test Driven Development</strong>

You've heard it said: "Rails makes testing easy, so you don't have any excuses not to do it.". Well, in my opinion, testing is never easy - it is just <strong>easier</strong> in Rails.

Seriously, if you have not tried <a href="http://en.wikipedia.org/wiki/Test_driven_development">test driven development</a>, give it a go. Automated tests are a godsend! I find myself rarely going to the web browser anymore to test things out. I just know it works because all of the tests pass. I wouldn't dare code a mildly complex application without testing anymore. It will take some time to get used to testing, but the benefits are far worth it.

&nbsp;

<strong>Refactoring</strong>

This is my favorite best practice, and for good reason. Refactoring ties all of the things in this list together. Simply put, if you want to become a better programming, learn <a href="http://en.wikipedia.org/wiki/Refactoring">Refactoring</a>. Normally the first time you write a piece of code, it is messy. Whatever you do, <strong>don't leave the messy code as is</strong>. Even if it works correctly, it will be a headache to maintain. You should take some time to clean up the code, make it readable, and improve the design.

Make it beautiful.

<em>Last edited by ryanb (2006-10-31 00:13:39)</em>

The original <a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/">Refactoring</a> book is definitely recommended reading. There is also <a href="http://www.amazon.com/exec/obidos/ASIN/0321293533">Refactoring Databases</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>455</wp:post_id>
		<wp:post_date>2012-05-04 13:44:08</wp:post_date>
		<wp:post_date_gmt>2012-05-04 05:44:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-on-rails-%e2%80%93-programming-best-practices</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="practices%ef%bc%8cdry"><![CDATA[Practices，DRY]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Starting Ruby on Rails: What I Wish I Knew</title>
		<link></link>
		<pubDate>Sat, 05 May 2012 11:38:40 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=458</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>from betterexplained.com , update by francis</blockquote>
<a href="http://rubyonrails.com/">Ruby on Rails</a> is an <strong>elegant</strong>, <strong>compact</strong> and <strong>fun</strong> way to build web applications. Unfortunately, many gotchas await the new programmer. Now that I have a few [rails projects}(<a href="http://instacalc.com/">http://instacalc.com/</a>) under my belt, here's my shot at sparing you the suffering I experienced when first getting started.
<h3><a name="tools-just-get-them" href="https://github.com/jhjguxin/project-manage/blob/master/rails/wiki/starting-ruby-on-rails-what-i-wish-i-knew.en.markdown#tools-just-get-them"></a>Tools: Just Get Them</h3>
Here's the tools you'll need. Don't read endless reviews trying to decide on the best one; start somewhere and get going.
<ul>
	<li><a href="http://www.pragmaticprogrammer.com/titles/rails/">Agile Web Development with Rails.</a> Yes, it's a book. And a cohesive book is worth 100 hobbled-together online tutorials.</li>
	<li><a href="http://rubyforge.org/projects/instantrails/">InstantRails</a>: A <code>.zip</code> file containing Ruby, Apache, MySQL and PHP (for PhpMyAdmin), packaged and ready to go.</li>
	<li><a href="http://www.aptana.com/">Aptana/RadRails</a> (like Eclipse) or Ruby In Steel (like Visual Studio) for editing code.</li>
	<li><a href="http://subversion.tigris.org/">Subversion</a>, <a href="http://tortoisesvn.net/downloads">TortoiseSVN</a> and/or <a href="https://github.com/">Github</a> for source control.</li>
	<li>Browse popular ruby on rails links on [del.icio.us]<a href="http://del.icio.us/popular/rubyonrails">http://del.icio.us/popular/rubyonrails</a>), <a href="http://railsbrain.com/">Rails documentation</a> and <a href="http://docs.huihoo.com/ruby/ruby-man-1.4/syntax.html">Ruby syntax &amp; examples</a>.</li>
</ul>
But What Does It All Mean?

"Ruby on Rails" is catchy but confusing. Is Rails some type of magical drug that Ruby is on? (Depending on who you ask, yes.)

<strong>Ruby</strong> is a programming language, similar to +Python+ and +Perl+. It is dynamically typed (no need for "int i"), 解释执行, and can be modified at runtime (such as adding new methods to classes). It has 数十种 of shortcuts that make it very clean; methods are rarely over 10 lines. It has good RegEx support and works well for shell scripting.

<strong>Rails</strong> is a <a href="http://rubygems.org/read/book/1">gem</a>, or a Ruby library. Some gems let you use the Win32 API. Others handle networking. Rails helps make web applications, providing classes for saving to the database, handling URLs and displaying html (along with a webserver, maintenance tasks, a debugging console and much more).

<strong>IRB</strong> is the interactive Ruby console (type "irb" to use). Rails has a special IRB console to access your web app as it is running (excellent for live debugging).

<strong>Rake</strong> is Ruby's version of Make. Define and run maintenance 维护 tasks like setting up databases, reloading data, backing up, or even deploying an app to your website.

<strong>Erb</strong> is embedded Ruby, which is like PHP. It lets you mix Ruby with HTML (for example): Ruby, which is like PHP. It lets you mix Ruby with HTML (for example):
<div>
<pre>  &lt;div&gt;Hello there, &lt;%= get_user_name() %&gt;&lt;/div&gt;</pre>
</div>
<strong>YAML</strong> (or <strong>YML</strong>) means "YAML Ain't a Markup Language" — it's a simple way to <a href="http://en.wikipedia.org/wiki/YAML">specify data</a>:
<div>
<pre>  {name: John Smith, age: 33}</pre>
</div>
It's like JSON, much leaner than XML, and used by Rails for setting configuration options (like setting the database name and password).

Phew! Once Ruby is installed and in your path, you can add the rails gem using:
<pre lang="shell"><code> gem install rails </code></pre>
In general, use gem install "gem_name", which searches online sources for that library. Although Rails is "just another gem", it is the killer library that brought Ruby into the limelight.
<h3><a name="understanding-ruby-isms" href="https://github.com/jhjguxin/project-manage/blob/master/rails/wiki/starting-ruby-on-rails-what-i-wish-i-knew.en.markdown#understanding-ruby-isms"></a>Understanding Ruby-Isms</h3>
It's daunting to learn a new library and a new language at the same time. Here are some of the biggest Ruby gotchas 陷阱 for those with a C/C++/Java background.

Ruby removes unnecessary cruft: (){};
<ul>
	<li>Parenthesis on method calls are optional; use print "hi".</li>
	<li>Semicolons aren't needed after each line (crazy, I know).</li>
	<li>Use "if then else end" rather than braces.</li>
	<li>Parens aren't needed around the conditions in if-then statements.</li>
	<li>Methods automatically return the last line (call return explicitly if needed)</li>
</ul>
Ruby scraps the annoying, ubiquitous punctuation that distracts from the program logic. Why put parens ((around),(everything))? Again, if you want parens, put ‘em in there. But you'll take off the training wheels soon enough.

The line noise (er, "punctuation") we use in C and Java is for the compiler's benefit, not ours. Be warned: after weeks with Ruby, other languages become a bit painful to read.
<pre>def greet(name)              # simple method
   "Hello, " + name          # returned automatically
end

greet "world"                # ==&gt; "Hello, world"</pre>
<strong>Those Funny Ruby Variables</strong>
<ul>
	<li><code>x = 3</code> is a local variable for a method or block (gone when the method is done)</li>
	<li><code>@x = 3</code> is a instance variable owned by each object (it sticks around)</li>
	<li><code>@@x = 3</code> is a class variable shared by all objects (it sticks around, too).</li>
	<li><code>:hello</code> is a symbol, like a constant string. Useful for indexing hashes. Speaking of which…</li>
	<li><code>dictionary = { :cat =&gt; "Goes meow", :dog =&gt; "Barks loud."}</code> is a hash of key/value pairs. Access elements with<code>dictionary[:cat]</code>. &gt; when key is a symbol, after ruby 1.9 <code>dictionary = { "cat" =&gt; "Goes meow", dog: "Barks loud."}</code></li>
</ul>
<strong>Those Funny Ruby Assignments</strong>

Ruby has the <code>||</code> operator which is a bit funky. When put in a chain
<div>
<pre>  x = a || b || c || "default"</pre>
</div>
it means "test each value and return the first that's not false." <strong>So if a is false, it tries b. If b is false, it tries c. Otherwise, it returns the string "default".</strong>

If you write <code>x = x || "default"</code> it means "set x to itself (if it has a value), otherwise use the default." An easier way to write this is
<div>
<pre>  x ||= "default"</pre>
</div>
which means the same: set x to the default value unless it has some other value. You'll see this a lot in Ruby programs.

<strong>Those Funny Ruby Blocks</strong>

Ruby has "blocks", which are like anonymous functions passed to a loop or another function. These blocks can specify a parameter using<code>|param|</code> and then take actions, call functions of their own, and so on. Blocks are useful when applying some function to each element of an array. It helps to think of them as a type of anonymous function that can, but doesn't have to, take a parameter.
<pre>3.times do |i|
   print i*i
end</pre>
In this example, the numbers <code>0</code>,<code>1</code> and <code>2</code> are passed to a block (do… end) that takes a single parameter (i) and prints i squared. The output would be <code>0</code>, followed by <code>1</code> followed by <code>4</code> (and looks like "014″ since we didn't include spaces). Blocks are common in Ruby but take some getting used to, so be forewarned.

These are the Ruby lessons that were tricky when starting out. Try <a href="http://mislav.uniqpath.com/poignant-guide/">Why's Poignant Guide To Ruby</a> for more info ("Why" is the name of the author… it confused me too).
<h3><a name="understanding-rails-isms" href="https://github.com/jhjguxin/project-manage/blob/master/rails/wiki/starting-ruby-on-rails-what-i-wish-i-knew.en.markdown#understanding-rails-isms"></a>Understanding Rails-isms</h3>
Rails has its own peculiarities. "Trust us, it's good for you." say the programmers. It's true – the features/quirks make Rails stand out, but they're confusing until they click. Remember:
<ul>
	<li><strong>Class and table names are important</strong>. Rails has certain naming conventions; it expects objects from the class Person to be saved to a database table named people. Yes, Rails has <strong>a pluralization engine</strong> to figure out what object maps to what table (I kid you not). This magic is great, but scary at first when you're not sure how classes and tables are getting linked together.</li>
	<li>Many methods take an "options" hash as a parameter, rather than having dozens of individual parameters. When you see
<div>
<pre>link_to "View Post", :action =&gt; 'show', :controller =&gt; 'article', :id =&gt; @article</pre>
</div></li>
</ul>
The call is really doing this:
<div>
<pre>  link_to("View Post", {:action =&gt; 'show', :controller =&gt; 'article', :id =&gt; @article})</pre>
</div>
There are only two parameters: the name ("View Post") and a hash with 3 key/value pairs. Ruby lets us remove the extra parens and braces, leaving the stripped-down function call above.
<h3><a name="understanding-the-model-view-controller-pattern" href="https://github.com/jhjguxin/project-manage/blob/master/rails/wiki/starting-ruby-on-rails-what-i-wish-i-knew.en.markdown#understanding-the-model-view-controller-pattern"></a>Understanding The Model-View-Controller Pattern</h3>
Rails is built around the <a href="http://betterexplained.com/articles/intermediate-rails-understanding-models-views-and-controllers/">model-view-controller</a> pattern. It's a <strong>simple concept</strong>: <strong>separate the data, logic, and display layers of your program</strong>. This lets you split functionality cleanly, just like having separateHTML, CSS and Javascript files prevents your code from mushing together. Here's the MVC breakdown:
<ul>
	<li><strong>Models</strong> are classes that talk to the databse. You find, create and save models, so you don't (usually) have to write SQL. Rails has a class to handle the magic of saving to a database when a model is updated.</li>
	<li><strong>Controllers</strong> take user input (like a URL) and decide what to do (show a page, order an item, post a comment). They may initially have business logic, like finding the right models or changing data. As your rails ninjitsu improves, constantly refactor and move business logic into the model (<a href="http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model">fat model, skinny controller</a>). Ideally, controllers just take inputs, call model methods, and pass outputs to the view (including error messages).</li>
	<li><strong>Views</strong> display the output, usually HTML. They use ERB and this part of Rails is like PHP - you useHTML templates with some Ruby variables thrown in. Rails also makes it easy to create views asXML (for web services/RSS feeds) or JSON (for AJAX calls).</li>
</ul>
The MVC pattern is key to building a readable, maintainable and easily-updateable web app.
<h3><a name="understanding-rails-directory-structure" href="https://github.com/jhjguxin/project-manage/blob/master/rails/wiki/starting-ruby-on-rails-what-i-wish-i-knew.en.markdown#understanding-rails-directory-structure"></a>Understanding Rails' Directory Structure</h3>
When you create your first rails app, the directories are laid out for you. The structure is well-organized: Models are in <code>app/models</code>, controllers in <code>app/controllers</code>, and views in <code>app/my_local_views</code> (just kidding).

The naming conventions are important – it lets rails applications "find their parts" easily, without additional configuration. Also, it's very easy for another programmer to understand and learn from any rails app. I can take a look at Typo, the rails blogging software, and have a good idea of how it works in minutes. Consistency creates comprehension.
<h3><a name="understanding-rails-scaffolding" href="https://github.com/jhjguxin/project-manage/blob/master/rails/wiki/starting-ruby-on-rails-what-i-wish-i-knew.en.markdown#understanding-rails-scaffolding"></a>Understanding Rails' Scaffolding</h3>
<strong>Scaffolding</strong> gives you default controller actions (URLs to visit) and a view (forms to fill out) to interact with your data — you don't need to build an interface yourself. You do need to define the Model and create a database table.

Think of scaffolds as the "default" interface you can use to interact with your app – you'll slowly override parts of the default as your app is built. You specify scaffolds in the controller with a single line:

and it adds default actions and views for showing, editing, and creating your "Person" object. Rails forms take some getting used to, so scaffolding helps a lot in the initial stages.
<h3><a name="more-tips-and-tricks" href="https://github.com/jhjguxin/project-manage/blob/master/rails/wiki/starting-ruby-on-rails-what-i-wish-i-knew.en.markdown#more-tips-and-tricks"></a>More Tips and Tricks</h3>
I originally planned on a list of tips &amp; tricks I found helpful when learning rails. It quickly struck me that Ruby on Rails actually requires a lot of background knowledge, and despite (or because of) its "magic", it can still be confusing. I'll get into my favorite tricks in an upcoming article.

As you dive further into web development, these guides may be helpful:
<ul>
	<li><a href="http://betterexplained.com/articles/how-to-debug-web-applications-with-firefox/">How To Debug Web Applications With Firefox</a></li>
	<li><a href="http://betterexplained.com/articles/how-to-optimize-your-site-with-http-caching/">How To Optimize Your Site With HTTP Caching</a></li>
	<li><a href="http://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/">How To Optimize Your Site With GZIP Compression</a></li>
	<li><a href="http://betterexplained.com/articles/speed-up-your-javascript-load-time/">Speed Up Your Javascript Load Time</a></li>
	<li><a href="http://betterexplained.com/articles/the-quick-guide-to-guids/">The Quick Guide to GUIDs</a></li>
</ul>
Source : <a href="http://betterexplained.com/articles/starting-ruby-on-rails-what-i-wish-i-knew/">http://betterexplained.com/articles/starting-ruby-on-rails-what-i-wish-i-knew/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>458</wp:post_id>
		<wp:post_date>2012-05-05 19:38:40</wp:post_date>
		<wp:post_date_gmt>2012-05-05 11:38:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>starting-ruby-on-rails-what-i-wish-i-knew</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="starting"><![CDATA[Starting]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NoSQL</title>
		<link></link>
		<pubDate>Tue, 08 May 2012 09:39:37 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=460</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>NoSQL</h2>
NoSQL，指的是非关系型的数据库。随着互联网 web2.0 网站的兴起，传统的关系数据库在应付 web2.0 网站，特别是超大规模和高并发的 SNS 类型的 web2.0 纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。
<h3><a name="%E7%AE%80%E4%BB%8B" href="https://github.com/jhjguxin/project-manage/blob/master/nosql/nosql-baidubaike.zh-cn.markdown#%E7%AE%80%E4%BB%8B"></a>简介</h3>
NoSQL(NoSQL = Not Only SQL )，意即反 SQL 运动，是一项全新的数据库革命性运动，早期就有人提出，发展至 2009 年趋势越发高涨。NoSQL 的拥护者们提倡运用非关系型的数据存储，相对于目前铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。
<h3><a name="%E7%8E%B0%E4%BB%8A%E7%8A%B6%E5%86%B5" href="https://github.com/jhjguxin/project-manage/blob/master/nosql/nosql-baidubaike.zh-cn.markdown#%E7%8E%B0%E4%BB%8A%E7%8A%B6%E5%86%B5"></a>现今状况</h3>
现今的计算机体系结构在数据存储方面要求具备庞大的水平扩展性，而 NoSQL 致力于改变这一现状。目前 Google 的 BigTable 和 Amazon 的 Dynamo 使用的就是 NoSQL 型数据库。

NoSQL 项目的名字上看不出什么相同之处，但是，它们通常在某些方面相同：它们可以处理超大量的数据。

这场革命目前仍然需要等待。的确，NoSQL 对大型企业来说还不是主流，但是，一两年之后很可能就会变个样子。在 NoSQL 运动的最新一次聚会中，来自世界各地的 150 人挤满了 CBS Interactive 的一间会议室。分享他们如何推翻缓慢而昂贵的关系数据库的暴政，怎样使用更有效和更便宜的方法来管理数据。

“关系型数据库给你强加了太多东西。它们要你强行修改对象数据，以满足 RDBMS （relational database management system，关系型数据库管理系统）的需要。” 在 NoSQL 拥护者们看来，基于 NoSQL 的替代方案 “只是给你所需要的”。
<ol>
	<li>水平扩展性(horizontal scalability)指能够连接多个软硬件的特性,这样可以将多个服务器从逻辑上看成一个实体。</li>
</ol>
<h3><a name="%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8nosql%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93" href="https://github.com/jhjguxin/project-manage/blob/master/nosql/nosql-baidubaike.zh-cn.markdown#%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8nosql%E9%9D%9E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93"></a>我们为什么要使用NOSQL非关系数据库?</h3>
随着互联网 web2.0 网站的兴起，非关系型的数据库现在成了一个极其热门的新领域，非关系数据库产品的发展非常迅速。而传统的关系数据库在应付 web2.0 网站，特别是超大规模和高并发的 SNS 类型的 web2.0 纯动态网站已经显得力不从心，暴露了很多难以克服的问题，<strong>例如</strong>：
<ol>
	<li>High performance - 对数据库高并发读写的需求 web2.0 网站要根据用户个性化信息来实时生成动态页面和提供动态信息，所以基本上无法使用动态页面静态化技术，因此数据库并发负载非常高，往往要达到每秒上万次读写请求。关系数据库应付上万次 SQL 查询还勉强顶得住，但是应付上万次 SQL 写数据请求，硬盘 IO 就已经无法承受了。其实对于普通的 BBS 网站，往往也存在对高并发写请求的需求。</li>
	<li>Huge Storage - 对海量数据的高效率存储和访问的需求 对于大型的 SNS 网站，每天用户产生海量的用户动态，以国外的 Friendfeed 为例，一个月就达到了 2.5 亿条用户动态，对于关系数据库来说，在一张 2.5 亿条记录的表里面进行 SQL 查询，效率是极其低下乃至不可忍受的。再例如大型 web 网站的用户登录系统，<strong>例如</strong>腾讯，盛大，动辄数以亿计的帐号，关系数据库也很难应付。</li>
	<li>High Scalability &amp;&amp; High Availability- 对数据库的高可扩展性和高可用性的需求 在基于 web 的架构当中，数据库是最难进行横向扩展的，当一个应用系统的用户量和访问量与日俱增的时候，你的数据库却没有办法像 web server 和 app server 那样简单的通过添加更多的硬件和服务节点来扩展性能和负载能力。对于很多需要提供 24 小时不间断服务的网站来说，对数据库系统进行升级和扩展是非常痛苦的事情，往往需要停机维护和数据迁移，为什么数据库不能通过不断的添加服务器节点来实现扩展呢？</li>
</ol>
在上面提到的 “三高” 需求面前，关系数据库遇到了难以克服的障碍，而对于 web2.0 网站来说，关系数据库的很多主要特性却往往无用武之地，<strong>例如</strong>：
<ol>
	<li>数据库事务一致性需求 很多 web 实时系统并不要求严格的数据库事务，对读一致性的要求很低，有些场合对写一致性要求也不高。因此数据库事务管理成了数据库高负载下一个沉重的负担。</li>
	<li>数据库的写实时性和读实时性需求 对关系数据库来说，插入一条数据之后立刻查询，是肯定可以读出来这条数据的，但是对于很多 web 应用来说，并不要求这么高的实时性。</li>
	<li>对复杂的SQL查询，特别是多表关联查询的需求 任何大数据量的 web 系统，都非常忌讳多个大表的关联查询，以及复杂的数据分析类型的复杂 SQL 报表查询，特别是 SNS 类型的网站，从需求以及产品设计角度，就避免了这种情况的产生。往往更多的只是单表的主键查询，以及单表的简单条件分页查询，SQL 的功能被极大的弱化了。</li>
</ol>
因此，关系数据库在这些越来越多的应用场景下显得不那么合适了，为了解决这类问题的非关系数据库应运而生。

NoSQL 是非关系型数据存储的广义定义。它打破了长久以来关系型数据库与 ACID 理论大一统的局面。NoSQL 数据存储不需要固定的表结构，通常也不存在连接操作。在大数据存取上具备关系型数据库无法比拟的性能优势。该术语在 2009 年初得到了广泛认同。

当今的应用体系结构需要数据存储在横向伸缩性上能够满足需求。而 NoSQL 存储就是为了实现这个需求。Google 的 BigTable 与 Amazon 的 Dynamo 是非常成功的商业 NoSQL 实现。一些开源的 NoSQL 体系，如 Facebook 的 Cassandra， Apache 的 HBase，也得到了广泛认同。从这些 NoSQL 项目的名字上看不出什么相同之处：Hadoop、Voldemort、Dynomite，还有其它很多。
<h3><a name="nosql-%E4%B8%8E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E6%AF%94%E8%BE%83" href="https://github.com/jhjguxin/project-manage/blob/master/nosql/nosql-baidubaike.zh-cn.markdown#nosql-%E4%B8%8E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E6%AF%94%E8%BE%83"></a>NoSQL 与关系型数据库设计理念比较</h3>
关系型数据库中的表都是存储一些格式化的数据结构，每个元组字段的组成都一样，即使不是每个元组都需要所有的字段，但数据库会为每个元组分配所有的字段，这样的结构可以便于表与表之间进行连接等操作，但从另一个角度来说它也是关系型数据库性能瓶颈的一个因素。而非关系型数据库以键值对存储，它的结构不固定，每一个元组可以有不一样的字段，每个元组可以根据需要增加一些自己的键值对，这样就不会局限于固定的结构，可以减少一些时间和空间的开销。
<h3><a name="%E7%89%B9%E7%82%B9" href="https://github.com/jhjguxin/project-manage/blob/master/nosql/nosql-baidubaike.zh-cn.markdown#%E7%89%B9%E7%82%B9"></a>特点</h3>
<ul>
	<li><strong>它们可以处理超大量的数据。</strong></li>
	<li><strong>它们运行在便宜的PC服务器集群上。</strong></li>
	<li>PC集群扩充起来非常方便并且成本很低，避免了“sharding”操作的复杂性和成本。</li>
	<li><strong>它们击碎了性能瓶颈。</strong></li>
	<li>NoSQL的支持者称，通过NoSQL架构可以省去将Web或Java应用和数据转换成SQL友好格式的时间，执行速度变得更快。</li>
	<li>“SQL并非适用于所有的程序代码，” 对于那些繁重的重复操作的数据，SQL值得花钱。但是当数据库结构非常简单时，SQL可能没有太大用处。</li>
	<li><strong>没有过多的操作。</strong></li>
	<li>虽然NoSQL的支持者也承认关系数据库提供了无可比拟的功能集合，而且在数据完整性上也发挥绝对稳定，他们同时也表示，企业的具体需求可能没有那么多。</li>
	<li><strong>Bootstrap支持</strong></li>
	<li>因为NoSQL项目都是开源的，因此它们缺乏供应商提供的正式支持。这一点它们与大多数开源项目一样，不得不从社区中寻求支持。</li>
</ul>
<h3><a name="%E7%BC%BA%E7%82%B9" href="https://github.com/jhjguxin/project-manage/blob/master/nosql/nosql-baidubaike.zh-cn.markdown#%E7%BC%BA%E7%82%B9"></a>缺点</h3>
但是一些人承认，没有正式的官方支持，万一出了差错会是可怕的，至少很多管理人员是这样看。

“我们确实需要做一些说服工作，但基本在他们看到我们的第一个原型运行良好之后，我们就能够说服他们，这是条正确的道路。”

此外，nosql并未形成一定标准，各种产品层出不穷，内部混乱，各种项目还需时间来检验
<h2><a name="8-%E7%A7%8D-nosql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AF%B9%E6%AF%94" href="https://github.com/jhjguxin/project-manage/blob/master/nosql/nosql-baidubaike.zh-cn.markdown#8-%E7%A7%8D-nosql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AF%B9%E6%AF%94"></a>8 种 Nosql 数据库系统对比</h2>
<blockquote>
<h2><a style="direction: ltr;" href="http://blog.jobbole.com/1344/">resources from</a><span style="direction: ltr;">,</span><a style="direction: ltr;" href="http://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis">english resources</a></h2>
</blockquote>
虽然 SQL 数据库是非常有用的工具，但经历了 15 年的一支独秀之后垄断即将被打破。这只是时间问题：被迫使用关系数据库，但最终发现不能适应需求的情况不胜枚举。

但是 NoSQL 数据库之间的不同，远超过两 SQL 数据库之间的差别。这意味着软件架构师更应该在项目开始时就选择好一个适合的 NoSQL 数据库。针对这种情况，这里对 <a href="http://cassandra.apache.org/">Cassandra</a>、 <a href="http://www.mongodb.org/">Mongodb</a>、<a href="http://couchdb.apache.org/">CouchDB</a>、<a href="http://redis.io/">Redis</a>、 <a href="http://www.basho.com/Riak.html">Riak</a>、 <a href="http://www.couchbase.org/membase">Membase</a>、<a href="http://neo4j.org/">Neo4j</a>和 <a href="http://hbase.apache.org/">HBase</a> 进行了比较：
<ol>
	<li>CouchDB</li>
</ol>
<ul>
	<li>所用语言： Erlang</li>
	<li>特点：DB一致性，易于使用</li>
	<li>使用许可： Apache</li>
	<li>协议： HTTP/REST</li>
	<li>双向数据复制，</li>
	<li>持续进行或临时处理，</li>
	<li>处理时带冲突检查，</li>
	<li>因此，采用的是master-master复制（见编注2）</li>
	<li>MVCC – 写操作不阻塞读操作</li>
	<li>可保存文件之前的版本</li>
	<li>Crash-only（可靠的）设计</li>
	<li>需要不时地进行数据压缩</li>
	<li>视图：嵌入式 映射/减少</li>
	<li>格式化视图：列表显示</li>
	<li>支持进行服务器端文档验证</li>
	<li>支持认证</li>
	<li>根据变化实时更新</li>
	<li>支持附件处理</li>
	<li>因此，<a href="http://couchapp.org/">CouchApps</a>（独立的 js应用程序）</li>
	<li>需要 jQuery程序库

<strong>最佳应用场景</strong>：适用于数据变化较少，执行预定义查询，进行数据统计的应用程序。适用于需要提供数据版本支持的应用程序。

<strong>例如</strong>： CRM、CMS 系统。 master-master 复制对于多站点部署是非常有用的。

（编注2：master-master复制：是一种数据库同步方法，允许数据在一组计算机之间共享数据，并且可以通过小组中任意成员在组内进行数据更新。）</li>
</ul>
<ol>
	<li>Redis</li>
</ol>
<ul>
	<li>所用语言：C/C++</li>
	<li>特点：运行异常快</li>
	<li>使用许可： BSD</li>
	<li>协议：类 Telnet</li>
	<li>有硬盘存储支持的内存数据库，</li>
	<li>但自2.0版本以后可以将数据交换到硬盘（注意， 2.4以后版本不支持该特性！）</li>
	<li>Master-slave复制（见编注3）</li>
	<li>虽然采用简单数据或以键值索引的哈希表，但也支持复杂操作，例如 ZREVRANGEBYSCORE。</li>
	<li>INCR &amp; co （适合计算极限值或统计数据）</li>
	<li>支持 sets（同时也支持 union/diff/inter）</li>
	<li>支持列表（同时也支持队列；阻塞式 pop操作）</li>
	<li>支持哈希表（带有多个域的对象）</li>
	<li>支持排序 sets（高得分表，适用于范围查询）</li>
	<li>Redis支持事务</li>
	<li>支持将数据设置成过期数据（类似快速缓冲区设计）</li>
	<li>Pub/Sub允许用户实现消息机制

<strong>最佳应用场景</strong>：适用于数据变化快且数据库大小可遇见（适合内存容量）的应用程序。

<strong>例如</strong>：股票价格、数据分析、实时数据搜集、实时通讯。

（编注3：Master-slave 复制：如果同一时刻只有一台服务器处理所有的复制请求，这被称为 Master-slave 复制，通常应用在需要提供高可用性的服务器集群。）</li>
</ul>
<ol>
	<li>MongoDB</li>
</ol>
<ul>
	<li>所用语言：C++</li>
	<li>特点：保留了 SQL 一些友好的特性（查询，索引）。</li>
	<li>使用许可： AGPL（发起者： Apache）</li>
	<li>协议： Custom, binary（BSON）</li>
	<li>Master/slave复制（支持自动错误恢复，使用 sets 复制）</li>
	<li>内建分片机制</li>
	<li>支持 javascript表达式查询</li>
	<li>可在服务器端执行任意的 javascript函数</li>
	<li>update-in-place 支持比 CouchDB 更好</li>
	<li>在数据存储时采用内存到文件映射</li>
	<li>对性能的关注超过对功能的要求</li>
	<li>建议最好打开日志功能（参数 –journal）</li>
	<li>在 32 位操作系统上，数据库大小限制在约2.5Gb</li>
	<li>空数据库大约占 192Mb</li>
	<li>采用 GridFS存储大数据或元数据（不是真正的文件系统）

<strong>最佳应用场景</strong>：适用于需要动态查询支持；需要使用索引而不是 map/reduce功能；需要对大数据库有性能要求；需要使用 CouchDB但因为数据改变太频繁而占满内存的应用程序。

<strong>例如</strong>：你本打算采用 MySQL或 PostgreSQL，但因为它们本身自带的预定义栏让你望而却步。</li>
</ul>
<ol>
	<li>Riak
<ul>
	<li>所用语言：Erlang 和 C，以及一些 Javascript</li>
	<li>特点：具备容错能力</li>
	<li>使用许可： Apache</li>
	<li>协议： HTTP/REST 或者 custom binary</li>
	<li>可调节的分发及复制(N, R, W)</li>
	<li>用 JavaScript or Erlang 在操作前或操作后进行验证和安全支持。</li>
	<li>使用 JavaScript 或 Erlang 进行 Map/reduce</li>
	<li>连接及连接遍历：可作为图形数据库使用</li>
	<li>索引：输入元数据进行搜索（1.0版本即将支持）</li>
	<li>大数据对象支持（ Luwak）</li>
	<li>提供“开源”和“企业”两个版本</li>
	<li>全文本搜索，索引，通过 Riak搜索服务器查询（ beta版）</li>
	<li>支持Masterless多站点复制及商业许可的 SNMP 监控</li>
</ul>
<strong>最佳应用场景</strong>：适用于想使用类似 Cassandra（类似Dynamo）数据库但无法处理 bloat及复杂性的情况。适用于你打算做多站点复制，但又需要对单个站点的扩展性，可用性及出错处理有要求的情况。

<strong>例如</strong>：销售数据搜集，工厂控制系统；对宕机时间有严格要求；可以作为易于更新的 web服务器使用。</li>
	<li>Membase
<ul>
	<li>所用语言： Erlang和C</li>
	<li>特点：兼容 Memcache，但同时兼具持久化和支持集群</li>
	<li>使用许可： Apache 2.0</li>
	<li>协议：分布式缓存及扩展</li>
	<li>非常快速（200k+/秒），通过键值索引数据</li>
	<li>可持久化存储到硬盘</li>
	<li>所有节点都是唯一的（ master-master复制）</li>
	<li>在内存中同样支持类似分布式缓存的缓存单元</li>
	<li>写数据时通过去除重复数据来减少 IO</li>
	<li>提供非常好的集群管理 web界面</li>
	<li>更新软件时软无需停止数据库服务</li>
	<li>支持连接池和多路复用的连接代理</li>
</ul>
<strong>最佳应用场景</strong>：适用于需要低延迟数据访问，高并发支持以及高可用性的应用程序

<strong>例如</strong>：低延迟数据访问比如以广告为目标的应用，高并发的 web 应用比如网络游戏（例如 Zynga）</li>
	<li>Neo4j
<ul>
	<li>所用语言： Java</li>
	<li>特点：基于关系的图形数据库</li>
	<li>使用许可： GPL，其中一些特性使用 AGPL/商业许可</li>
	<li>协议： HTTP/REST（或嵌入在 Java中）</li>
	<li>可独立使用或嵌入到 Java应用程序</li>
	<li>图形的节点和边都可以带有元数据</li>
	<li>很好的自带web管理功能</li>
	<li>使用多种算法支持路径搜索</li>
	<li>使用键值和关系进行索引</li>
	<li>为读操作进行优化</li>
	<li>支持事务（用 Java api）</li>
	<li>使用 Gremlin图形遍历语言</li>
	<li>支持 Groovy脚本</li>
	<li>支持在线备份，高级监控及高可靠性支持使用 AGPL/商业许可</li>
</ul>
<strong>最佳应用场景</strong>：适用于图形一类数据。这是 Neo4j与其他nosql数据库的最显著区别

<strong>例如</strong>：社会关系，公共交通网络，地图及网络拓谱</li>
	<li>Cassandra
<ul>
	<li>所用语言： Java</li>
	<li>特点：对大型表格和 Dynamo支持得最好</li>
	<li>使用许可： Apache</li>
	<li>协议： Custom, binary (节约型)</li>
	<li>可调节的分发及复制(N, R, W)</li>
	<li>支持以某个范围的键值通过列查询</li>
	<li>类似大表格的功能：列，某个特性的列集合</li>
	<li>写操作比读操作更快</li>
	<li>基于 Apache分布式平台尽可能地 Map/reduce</li>
	<li>我承认对 Cassandra有偏见，一部分是因为它本身的臃肿和复杂性，也因为 Java的问题（配置，出现异常，等等）</li>
</ul>
<strong>最佳应用场景</strong>：当使用写操作多过读操作（记录日志）如果每个系统组建都必须用 Java编写（没有人因为选用 Apache的软件被解雇）

<strong>例如</strong>：银行业，金融业（虽然对于金融交易不是必须的，但这些产业对数据库的要求会比它们更大）写比读更快，所以一个自然的特性就是实时数据分析

<strong>最佳应用场景</strong>：当使用写操作多过读操作（记录日志）如果每个系统组建都必须用 Java编写（没有人因为选用 Apache的软件被解雇）

<strong>例如</strong>：银行业，金融业（虽然对于金融交易不是必须的，但这些产业对数据库的要求会比它们更大）写比读更快，所以一个自然的特性就是实时数据分析</li>
	<li>HBase
<blockquote>（配合 ghshephard 使用）</blockquote>
<ul>
	<li>所用语言： Java</li>
	<li>特点：支持数十亿行X上百万列</li>
	<li>使用许可： Apache</li>
	<li>协议：HTTP/REST （支持 Thrift，见编注4）</li>
	<li>在 BigTable之后建模</li>
	<li>采用分布式架构 Map/reduce</li>
	<li>对实时查询进行优化</li>
	<li>高性能 Thrift网关</li>
	<li>通过在server端扫描及过滤实现对查询操作预判</li>
	<li>支持 XML, Protobuf, 和binary的HTTP</li>
	<li>Cascading, hive, and pig source and sink modules</li>
	<li>基于 Jruby（ JIRB）的shell</li>
	<li>对配置改变和较小的升级都会重新回滚</li>
	<li>不会出现单点故障</li>
	<li>堪比MySQL的随机访问性能</li>
</ul>
<strong>最佳应用场景</strong>：适用于偏好BigTable:)并且需要对大数据进行随机、实时访问的场合。

<strong>例如</strong>： Facebook消息数据库（更多通用的用例即将出现）

编注4：Thrift 是一种接口定义语言，为多种其他语言提供定义和创建服务，由Facebook开发并开源。

当然，所有的系统都不只具有上面列出的这些特性。这里我仅仅根据自己的观点列出一些我认为的重要特性。与此同时，技术进步是飞速的，所以上述的内容肯定需要不断更新。我会尽我所能地更新这个列表。</li>
</ol>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>460</wp:post_id>
		<wp:post_date>2012-05-08 17:39:37</wp:post_date>
		<wp:post_date_gmt>2012-05-08 09:39:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nosql</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="db"><![CDATA[DB]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The 501 Developer Manifesto--《501程序员宣言》</title>
		<link></link>
		<pubDate>Fri, 11 May 2012 05:55:36 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=465</guid>
		<description></description>
		<content:encoded><![CDATA[We are software developers who take pride in our work but choose not to be wholly defined by it.
<div>As such, we are <strong>proud</strong> to say that we value:</div>
<div>
<ul>
	<li><strong>Our families</strong> over the commercial goals of business owners</li>
	<li><strong>Free time</strong> over free snacks</li>
	<li><strong>Living our lives</strong> over maintaining our <a href="http://www.codinghorror.com/blog/2006/04/your-personal-brand.html">personal brands</a></li>
	<li><strong>Sustainable pace</strong> over muscle-man heroics</li>
	<li>Our <strong>personal creative projects</strong> over commercial products the world doesn't need</li>
	<li>Having <strong>money for nice clothes</strong> over getting free t-shirts from Microsoft</li>
	<li>Playing fußball <strong>in the pub with our friends</strong> over playing fußball in the office with our team leader</li>
	<li><strong><a href="http://programmersbeingdicks.tumblr.com/">Not being a dick</a></strong> over being a rockstar</li>
</ul>
</div>
<div>That is to say, we value the things on the left more than we value the things on the right. And some of the things on the right aren't even on our radar.</div>
<div>If you:
<ul>
	<li>Write a technical blog</li>
	<li>Contribute to open source projects</li>
	<li>Attend user groups in your spare time</li>
	<li>Mostly only read books about coding and productivity</li>
	<li><a href="http://twitter.com/toiletcoder">Push to GitHub while sitting on the toilet</a></li>
	<li>Are committed to maximum awesomeness at all times, or would have us believe it</li>
</ul>
...we respect you for it. There's probably some pity in there too, but honestly, it's mostly respect.</div>
<div>We recognize that your willingness to allow your employment to penetrate deeply into your personal life means that you will inevitably become our supervisor. We're cool with this.</div>
<div>In return, you must recognize that the success of the projects on which we work together depends largely upon the degree to which you treat <em>us</em>with respect, both as <strong>skilled professionals</strong> and as <strong>a diversity of autonomous living people</strong>. Get that right, and we'll do a great job. Get it badly wrong, and there's a risk that we'll piss <em>all</em> over your fireworks. There are more of us than there are of you.</div>
<div>To us it is <em>just a job</em>, but we still do it well.</div>
<div>译文：</div>
我们是程序员。我们以我们的工作为荣，但不允许生活被其完全左右。

基于此，我们非常自豪的宣布，我们认为：
<div>
<pre>家庭比老板的生意更重要。
业余时间比公司提供的免费零食更重要。
过自己的生活比辛苦维护个人品牌更重要。
有计划和连续不断的工作节奏比个人超常的能力更重要。
花时间自己去购物比耗费心思得到微软的免费T恤更重要。
和挚友打球比和上司打球更重要。
不拖团队后腿比成为业界大牛更重要。</pre>
</div>
在以上所列内容中，我们把前者看的更重要。对于后者，我们不屑一顾。

但如果你：
<div>
<pre>写技术博客。
参与开源项目的开发。
在业余时间参加技术交流活动。
几乎只读和编程与开发效率有关的书籍。
在GitHub上有自己的托管项目。
许下诺言始终做到最好，或者让别人深信这一点。
……</pre>
</div>
我们会因此而尊重你。以上内容或许并不全面，但列出的这些，说实话，它们几乎都是值得尊重的。

而从这些内容中，我们也意识到你将把事业深深地融入到你的生活中，这些努力会让你不可避免的会成为我们的上司。对于这一点，我们为你感到高兴。

但反过来，你也必须意识到，事业的成功是和你是否尊重我们，包括对我们作为专业人士并有享受多姿多彩的生活权利的尊重，是息息相关的。选择尊重这些，我们将一起创造美好的未来；而如果选择否定这些，一切成功的梦想都将只是梦想。而这一切，将取决于你的选择。

虽然对于我们来说这只是一份工作，但我们依然做到最好。

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>465</wp:post_id>
		<wp:post_date>2012-05-11 13:55:36</wp:post_date>
		<wp:post_date_gmt>2012-05-11 05:55:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-501-developer-manifesto-%e3%80%8a501%e7%a8%8b%e5%ba%8f%e5%91%98%e5%ae%a3%e8%a8%80%e3%80%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coderfarmer"><![CDATA[CoderFarmer]]></category>
		<category domain="post_tag" nicename="developer"><![CDATA[developer]]></category>
		<category domain="post_tag" nicename="manifesto%ef%bc%8c501%e7%a8%8b%e5%ba%8f%e5%91%98%e5%ae%a3%e8%a8%80"><![CDATA[Manifesto，501程序员宣言]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>RVM 下载 加速 -by liuhui998</title>
		<link></link>
		<pubDate>Mon, 14 May 2012 07:37:52 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=477</guid>
		<description></description>
		<content:encoded><![CDATA[今天晚上有点时间，我就折腾了一下 rails。

按照这个<a title="教程" href="http://ruby-china.org/wiki/install_ruby_guide">教程</a>，我一步步的进行安装。

正如我之前听说的 <a title="rvm" href="https://rvm.beginrescueend.com/rvm/install/">rvm</a> 下载 ruby 的速度只有不到5KB/s 速度。

在 google 了二圈后，我发现国内外好像没有人解决这个问题。

于是我发扬geek精神，开始打起了 rvm 源代码的主意：

1） rvm 是从 ruby-lang.org 这个站点下载 ruby 的源代码
rvm 慢的主要是因为 ruby-lang.org 这个网站下载速度慢

2） 如果找到 ruby-lang.org 的更快的镜像网站，并修改 rvm 里面的配置
这个问题也就解决了

于是找到一个叫 <a title="UK Mirror Service " href="http://www.mirrorservice.org/">UK Mirror Service</a> 的网站，它提供了 ruby-lang.org 镜像服务：

<a title="http://www.mirrorservice.org/sites/ftp.ruby-lang.org/" href="http://www.mirrorservice.org/sites/ftp.ruby-lang.org/">http://www.mirrorservice.org/sites/ftp.ruby-lang.org/</a>

我测试了一下，平均速度最慢也超过 30KB/s

好的镜像找到了，那么下一步就是在哪里修改 ruby 下载地址。
<div>

&nbsp;
<div>
<table>
<tbody>
<tr>
<td></td>
<td>
<pre>&lt;code&gt;cd $rvm_path grep -nR &quot;ruby-lang.org&quot; ./&lt;/code&gt;</pre>
</td>
</tr>
</tbody>
</table>
</div>
&nbsp;

</div>
&nbsp;

发现地址是写在 $rvm_path/config/db 文件里

找到这一段：
<div>
<pre>ruby_1.0_url=http://ftp.ruby-lang.org/pub/ruby/1.0
ruby_1.2_url=http://ftp.ruby-lang.org/pub/ruby/1.2
ruby_1.3_url=http://ftp.ruby-lang.org/pub/ruby/1.3
ruby_1.4_url=http://ftp.ruby-lang.org/pub/ruby/1.4
ruby_1.5_url=http://ftp.ruby-lang.org/pub/ruby/1.5
ruby_1.6_url=http://ftp.ruby-lang.org/pub/ruby/1.6
ruby_1.7_url=http://ftp.ruby-lang.org/pub/ruby/1.7
ruby_1.8_url=http://ftp.ruby-lang.org/pub/ruby/1.8
ruby_1.9_url=http://ftp.ruby-lang.org/pub/ruby/1.9
ruby_2.0_url=http://ftp.ruby-lang.org/pub/ruby/2.0</pre>
</div>
改成
<div><pre>ruby_1.0_url=http://www.mirrorservice.org/sites/ftp.ruby-lang.org/pub/ruby/1.0
ruby_1.2_url=http://www.mirrorservice.org/sites/ftp.ruby-lang.org/pub/ruby/1.2
ruby_1.3_url=http://www.mirrorservice.org/sites/ftp.ruby-lang.org/pub/ruby/1.3
ruby_1.4_url=http://www.mirrorservice.org/sites/ftp.ruby-lang.org/pub/ruby/1.4
ruby_1.5_url=http://www.mirrorservice.org/sites/ftp.ruby-lang.org/pub/ruby/1.5
ruby_1.6_url=http://www.mirrorservice.org/sites/ftp.ruby-lang.org/pub/ruby/1.6
ruby_1.7_url=http://www.mirrorservice.org/sites/ftp.ruby-lang.org/pub/ruby/1.7
ruby_1.8_url=http://www.mirrorservice.org/sites/ftp.ruby-lang.org/pub/ruby/1.8
ruby_1.9_url=http://www.mirrorservice.org/sites/ftp.ruby-lang.org/pub/ruby/1.9
ruby_2.0_url=http://www.mirrorservice.org/sites/ftp.ruby-lang.org/pub/ruby/2.0</pre></div>
我已把这个修攺提交到我们仓库里 <a title="http://github.com/liuhui998/rvm" href="http://github.com/liuhui998/rvm">http://github.com/liuhui998/rvm</a>
可以直接点击下载我改好后的 <a title="db 文件" href="https://raw.github.com/liuhui998/rvm/0f0be9a1316d607a9956415110bef8ea9b8a6726/config/db">文件</a>

大家改好 $rvm_path/config/db 文件后，最好能重启终端程序后再执行 rvm install 命令
这样新的 mirror 就会起效。

经过测试，改进后的 rvm， 在家中4M 以太网的速度可以达到200KB/s.

其本上解决了 rvm 下载 ruby 慢的问题。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>477</wp:post_id>
		<wp:post_date>2012-05-14 15:37:52</wp:post_date>
		<wp:post_date_gmt>2012-05-14 07:37:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rvm-%e4%b8%8b%e8%bd%bd-%e5%8a%a0%e9%80%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="rvm"><![CDATA[rvm]]></category>
		<category domain="post_tag" nicename="speed"><![CDATA[speed]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>5 个常见的 Rails 开发误区</title>
		<link></link>
		<pubDate>Tue, 15 May 2012 11:14:41 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=483</guid>
		<description></description>
		<content:encoded><![CDATA[本文作者是一名Rails开发者，他总结了在Rails开发过程中的一些常见误区。<strong>文章内容如下：</strong>

我使用Rails已经有一段时间了，在这期间我看了大量的Rails项目，下面的这五个常见的误区，我几乎在每一个Rails代码中都看到过。

<strong>1.  没有 schema 规范的迁移</strong>

数据模型是应用程序的核心。没有schema的约束，你的数据会因为项目代码上的bugs而慢慢变得糟糕，直到你无法相信库中的任何字段。这里有一个 Concact Schema：
<pre>create_table "contacts" do |t|
    t.integer  "user_id"
    t.string   "name"
    t.string   "phone"
    t.string   "email"
end</pre>
<pre>上面哪些需要更改呢？通常一个Contact必须依附于User，并且会有一个name 属性，这可以使用数据库约束来确保。可以添加“:null =&gt; false”，这样即使验证代码存在bugs，我们依然可以确保模型一致性，因为如果违反了null约束，数据库并不会允许模型保存这些数据。</pre>
<pre>create_table "contacts" do |t|
    t.integer  "user_id", :null =&gt; false
    t.string   "name", :null =&gt; false
    t.string   "phone"
    t.string   "email"
end</pre>
<pre><strong>TIPS：</strong>使用“:limit =&gt; N”规范你的string类型字段的大小。Strings 默认255个字符，而phone字段应该不需要这么长吧！</pre>
<pre><strong>2.  面向对象编程</strong> 

大多数Rails开发人员并不写面向对象的代码。他们通常会在项目中写面向MVC的Ruby代码（把模型和控制器分开写在合适的位置）。通常是在lib目录下添加带有类方法的工具模块，仅此而已。但开发人员往往需要花费2-3年才能认识到“Rails就是Ruby。我完全可以创建一些简单的对象，并且不一定按照Rails建议的方式去封装它们。” 

<strong>TIPS：</strong>对你调用的第三方服务使用facade（外观模式）。通过在测试中提供mock facade，你就不用在你的测试集中真的去调用这些第三方服务了。</pre>
<pre><strong>3.  在 helpers中连接HTML</strong> 

如果你正在创建helper，恭喜，至少说明你正在试图让你的视图层更整洁。但是开发人员经常不知道一些使用helpers创建标签的常见方式，这就导致了槽糕的字符串连接或者糟糕的插值形式。</pre>
<pre>str = "&lt;li class='vehicle_list'&gt; "
str += link_to("#{vehicle.title.upcase} Sale", show_all_styles_path(vehicle.id, vehicle.url_title))
str += " &lt;/li&gt;"
str.html_safe</pre>
<pre>看吧，相当糟糕，而且容易导致XSS安全漏洞！让 content_tag 来拯救这些代码吧。</pre>
<pre>content_tag :li, :class =&gt; 'vehicle_list' do
  link_to("#{vehicle.title.upcase} Sale", show_all_styles_path(vehicle.id, vehicle.url_title))
end</pre>
<pre><strong>TIPS：</strong>现在就开始在helper中使用blocks（代码块）吧。当产生内嵌的HTML时，嵌入的blocks更自然、更贴切。 

<strong>4.  Giant Queries（大查询，比如载入整张表的查询）会把一切都加载到内存</strong> 

如果你需要修正数据，你只需要遍历并且修正它，对吗？</pre>
<pre>User.has_purchased(true).each do |customer|
  customer.grant_role(:customer)
end</pre>
<pre>假设你有个百万级别客户的电商网站，假设每个用户对象需要500字节，上面的代码会在运行的时候消耗500M内存。 

下面是更好的方式：</pre>
<pre>User.has_purchased(true).find_each do |customer|
  customer.grant_role(:customer)
end</pre>
<pre>find_each使用 find_in_batches 每次取出1000条记录，非常有效的降低了对内存的需求。 

<strong>TIPS：</strong>使用 update_all 或者原始 SQL 语句执行大的更新操作。学习SQL可能需要花费点时间，不过带来的好处是明显的：你会看到100x的性能改善。 

<strong>5.  代码审查</strong> 

我猜你会使用GitHub，并且我进一步猜测你不会去pull requests（GitHub上的申请代码合并操作）。如果你需要花费一到两天去构建一个新特性，那么到一个分支上去做吧，然后发送一个 pull request。团队会审查你的代码，并且给出一些你没有考虑到的改进或者最新特性的建议。我保证这样会提高你的代码质量。我们在<a href="http://www.theclymb.com/invite-from/mperham" target="_blank">TheClymb</a>项目中90%的改动都是通过这种方式完成的，并且这是100%值得去做的一个经验。 

<strong>TIPS：</strong>不要没有经过任何测试就合并你的pull request。测试对保证应用的稳定性非常有价值，并且可以让你踏实地睡一个好觉。</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>483</wp:post_id>
		<wp:post_date>2012-05-15 19:14:41</wp:post_date>
		<wp:post_date_gmt>2012-05-15 11:14:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>5-%e4%b8%aa%e5%b8%b8%e8%a7%81%e7%9a%84-rails-%e5%bc%80%e5%8f%91%e8%af%af%e5%8c%ba</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="common"><![CDATA[Common]]></category>
		<category domain="post_tag" nicename="mistakes"><![CDATA[Mistakes]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How use the collection type model column怎样使用集合类型的模型字段</title>
		<link></link>
		<pubDate>Thu, 17 May 2012 08:09:24 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=485</guid>
		<description></description>
		<content:encoded><![CDATA[For example you have bellow code in migrate folder

<code>      # 0: <20, 1: 20< <=25 , 2: 25< <=30, 3: 30< <=35, 4: 35< <=40, 5: 40<
    add_column :profiles, :agerange, :integer</code>

and then how to use it:

for model file:

<code>  # 0: <20, 1: 20< <=25 , 2: 25< <=30, 3: 30< <=35, 4: 35< <=40, 5: 40<
  A20     = 0
  A20_25  = 1
  A25_30  = 2
  A30_35  = 3
  A35_40  = 4
  A40     = 5

  AGERANGE = {
    A20        => "#{I18n.t("activerecord.attributes.profiles.agerange.A20")}",
    A20_25     => "#{I18n.t("activerecord.attributes.profiles.agerange.A20_25")}",
    A25_30     => "#{I18n.t("activerecord.attributes.profiles.agerange.A25_30")}",
    A30_35     => "#{I18n.t("activerecord.attributes.profiles.agerange.A30_35")}",
    A35_40     => "#{I18n.t("activerecord.attributes.profiles.agerange.A35_40")}",
    A40        => "#{I18n.t("activerecord.attributes.profiles.agerange.A40")}",
  }

  validates_inclusion_of :agerange, :in => AGERANGE.keys,
      :message => "{{value}} must be in #{AGERANGE.values.join ','}"

  # just a helper method for the view
  def age_range
    AGERANGE[agerange]
  end</code>
<pre>and then how use them in ‘form‘ and ’show‘ page</pre>
<pre>in form.html.erb</pre>

<code>
    <%= f.label :agerange, t("activerecord.attributes.profiles.agerange_label") %>
    <%= select_tag(:agerange, options_for_select(Profile::AGERANGE.invert)) %></code>
<pre>in show.html.erb</pre>
<pre><%= s.attribute :age_range %></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>485</wp:post_id>
		<wp:post_date>2012-05-17 16:09:24</wp:post_date>
		<wp:post_date_gmt>2012-05-17 08:09:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-use-the-collection-type-model-column%e6%80%8e%e6%a0%b7%e4%bd%bf%e7%94%a8%e9%9b%86%e5%90%88%e7%b1%bb%e5%9e%8b%e7%9a%84%e6%a8%a1%e5%9e%8b%e5%ad%97%e6%ae%b5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="collection"><![CDATA[collection]]></category>
		<category domain="post_tag" nicename="column"><![CDATA[column]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How To: Allow users to sign in using their username or email address</title>
		<link></link>
		<pubDate>Fri, 18 May 2012 06:58:17 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=490</guid>
		<description></description>
		<content:encoded><![CDATA[For this example, we will assume your model is called <code>User</code>
<h3>Create a username field in the <code>users</code> table</h3>
<ol>
	<li>Create a migration:
<div>
<pre> rails generate migration add_username_to_users username:string</pre>
</div></li>
	<li>Run the migration:
<div>
<pre> rake db:migrate</pre>
</div></li>
	<li>Modify the <code>User</code> model and add username to attr_accessible
<div>
<pre> attr_accessible :username</pre>
</div></li>
</ol>
<h3>Create a login virtual attribute in Users</h3>
<ol>
	<li>Add login as an attr_accessor
<div>
<pre># Virtual attribute for authenticating by either username or email
# This is in addition to a real persisted field like 'username'
attr_accessor :login</pre>
</div></li>
	<li>Add login to attr_accessible
<div>
<pre>attr_accessible :login</pre>
</div></li>
</ol>
<h3>Tell Devise to use :login in the authentication_keys</h3>
<ol>
	<li>Modify config/initializers/devise.rb to have:
<div>
<pre> config.authentication_keys = [ :login ]</pre>
</div></li>
</ol>
<ul>
	<li>If you are using multiple models with Devise, it is best to set the authentication_keys on the model itself if the keys may differ:
<div>
<pre>devise :database_authenticatable, :registerable,
       :recoverable, :rememberable, :trackable, 
       :validatable, :authentication_keys =&gt; [:login]</pre>
</div></li>
</ul>
<ol>
	<li>Overwrite Devise’s find_for_database_authentication method in Users model</li>
</ol>
<ul>
	<li>For ActiveRecord:
<div>
<pre> def self.find_for_database_authentication(warden_conditions)
   conditions = warden_conditions.dup
   login = conditions.delete(:login)
   where(conditions).where(["lower(username) = :value OR lower(email) = :value", { :value =&gt; login.strip.downcase }]).first
 end</pre>
</div></li>
	<li>For Mongoid:
Note: This code for Mongoid does some small things differently then the ActiveRecord code above. Would be great if someone could port the complete functionality of the ActiveRecord code over to Mongoid [basically you need to port the ‘where(conditions)’]. It is not required but will allow greater flexibility.
<div>
<pre>field :email

def self.find_for_database_authentication(conditions)
  login = conditions.delete(:login)
  self.any_of({ :username =&gt; login }, { :email =&gt; login }).first
end</pre>
</div></li>
</ul>
<ul>
	<li>For MongoMapper:
<div>
<pre>def self.find_for_database_authentication(conditions)
  login = conditions.delete(:login).downcase
  where('$or' =&gt; [{:username =&gt; login}, {:email =&gt; login}]).first
end</pre>
</div></li>
</ul>
<h3>Update your views</h3>
<ol>
	<li>Make sure you have the Devise views in your project so that you can customize them
Rails 3:
<div>
<pre> rails g devise:views</pre>
</div>
Rails 2:
<div>
<pre> script/generate devise_views</pre>
</div></li>
	<li>Modify the views
<ul>
	<li>sessions/new.html.erb:
<div>
<pre>-  &lt;p&gt;&lt;%= f.label :email %&gt;&lt;br /&gt;
-  &lt;%= f.email_field :email %&gt;&lt;/p&gt;
+  &lt;p&gt;&lt;%= f.label :login %&gt;&lt;br /&gt;
+  &lt;%= f.text_field :login %&gt;&lt;/p&gt;</pre>
</div></li>
	<li>registrations/new.html.erb
<div>
<pre>+  &lt;p&gt;&lt;%= f.label :username %&gt;&lt;br /&gt;
+  &lt;%= f.text_field :username %&gt;&lt;/p&gt;
   &lt;p&gt;&lt;%= f.label :email %&gt;&lt;br /&gt;
   &lt;%= f.email_field :email %&gt;&lt;/p&gt;</pre>
</div></li>
	<li>registrations/edit.html.erb
<div>
<pre>+  &lt;p&gt;&lt;%= f.label :username %&gt;&lt;br /&gt;
+  &lt;%= f.text_field :username %&gt;&lt;/p&gt;
   &lt;p&gt;&lt;%= f.label :email %&gt;&lt;br /&gt;
   &lt;%= f.email_field :email %&gt;&lt;/p&gt;</pre>
</div></li>
</ul>
</li>
</ol>
<h3>Manipulate the :login label that Rails will display</h3>
<ol>
	<li>Modify config/locales/en.yml to contain something like:
Rails 2:
<div>
<pre>activemodel:
  attributes:
    user:
      login: "Username or email"</pre>
</div>
Rails 3:
<div>
<pre>en:
  activerecord:
    attributes:
      user:  
        login: "Username or email"</pre>
</div></li>
</ol>
<h2>Allow users to recover their password using either username or email address</h2>
This section assumes you have run through the steps in Allow users to Sign In using their username or password.
<h3>Tell Devise to use :login in the reset_password_keys</h3>
<ol>
	<li>Modify config/initializers/devise.rb to have:
<div>
<pre> config.reset_password_keys = [ :login ]</pre>
</div></li>
</ol>
<h3>Overwrite Devise’s finder methods in Users</h3>
<ul>
	<li>For ActiveRecord:
<div>
<pre> protected

 # Attempt to find a user by it's email. If a record is found, send new
 # password instructions to it. If not user is found, returns a new user
 # with an email not found error.
 def self.send_reset_password_instructions(attributes={})
   recoverable = find_recoverable_or_initialize_with_errors(reset_password_keys, attributes, :not_found)
   recoverable.send_reset_password_instructions if recoverable.persisted?
   recoverable
 end 

 def self.find_recoverable_or_initialize_with_errors(required_attributes, attributes, error=:invalid)
   (case_insensitive_keys || []).each { |k| attributes[k].try(:downcase!) }

   ###the has some error in my issue, my you should comment two line bellow
   attributes = attributes.slice(*required_attributes)
   attributes.delete_if { |key, value| value.blank? }

   if attributes.size == required_attributes.size
     if attributes.has_key?(:login)
        login = attributes.delete(:login)
        record = find_record(login)
     else  
       record = where(attributes).first
     end  
   end  

   unless record
     record = new

     required_attributes.each do |key|
       value = attributes[key]
       record.send("#{key}=", value)
       record.errors.add(key, value.present? ? error : :blank)
     end  
   end  
   record
 end

 def self.find_record(login)
   where(["username = :value OR email = :value", { :value =&gt; login }]).first
 end</pre>
</div></li>
	<li>For Mongoid:</li>
</ul>
<div>
<pre>def self.find_record(login)
  found = where(:username =&gt; login).to_a
  found = where(:email =&gt; login).to_a if found.empty?
  found
end</pre>
</div>
For Mongoid this can be optimized using a <a href="http://omarqureshi.net/posts/2010/06/17/mongoid-or-query/" rel="nofollow">custom javascript function</a>
<div>
<pre>def self.find_record(login)
  where("function() {return this.username == '#{login}' || this.email == '#{login}'}")
end</pre>
</div>
<ul>
	<li>For MongoMapper:</li>
</ul>
<div>
<pre>def self.find_record(login)
  (self.where(:email =&gt; login[:login]).first || self.where(:username =&gt; login[:login]).first) rescue nil
end</pre>
</div>
<h3>Update your views</h3>
<ol>
	<li>Modify the views
<ul>
	<li>passwords/new.html.erb:
<div>
<pre>-  &lt;p&gt;&lt;%= f.label :email %&gt;&lt;br /&gt;
-  &lt;%= f.email_field :email %&gt;&lt;/p&gt;
+  &lt;p&gt;&lt;%= f.label :login %&gt;&lt;br /&gt;
+  &lt;%= f.text_field :login %&gt;&lt;/p&gt;</pre>
</div></li>
</ul>
</li>
</ol>
<h2>Gmail or me.com Style</h2>
Another way to do this is me.com and gmail style. You allow an email or the username of the email. For public facing accounts, this has more security. Rather than allow some hacker to enter a username and then just guess the password, they would have no clue what the user’s email is. Just to make it easier on the user for logging in, allow a short form of their email to be used e.g “someone@domain.com” or just “someone” for short.
<div>
<pre>before_create :create_login

  def create_login             
    email = self.email.split(/@/)
    login_taken = User.where( :login =&gt; email[0]).first
    unless login_taken
      self.login = email[0]
    else	
      self.login = self.email
    end	       
  end

  def self.find_for_database_authentication(conditions)
    self.where(:login =&gt; conditions[:email]).first || self.where(:email =&gt; conditions[:email]).first
  end</pre>
</div>
For the Rails 2 version (1.0 tree): There is no <code>find_for_database_authentication</code> method, so use <code>self.find_for_authentication</code> as the finding method.
<div>
<pre>def self.find_for_authentication(conditions)
  conditions = ["username = ? or email = ?", conditions[authentication_keys.first], conditions[authentication_keys.first]]
  super
end</pre>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>490</wp:post_id>
		<wp:post_date>2012-05-18 14:58:17</wp:post_date>
		<wp:post_date_gmt>2012-05-18 06:58:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-allow-users-to-sign-in-using-their-username-or-email-address</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="devise"><![CDATA[devise]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>669</wp:comment_id>
			<wp:comment_author><![CDATA[ncis finale 2012 full episode]]></wp:comment_author>
			<wp:comment_author_email>chantalseidel@bigstring.com</wp:comment_author_email>
			<wp:comment_author_url>http://darrelkny.momaroo.com/772666541/2-new-gibbs-rules-on-ncis/</wp:comment_author_url>
			<wp:comment_author_IP>198.143.144.253</wp:comment_author_IP>
			<wp:comment_date>2013-04-21 19:03:33</wp:comment_date>
			<wp:comment_date_gmt>2013-04-21 11:03:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You're so awesome! I don't believe I've truly read through anything like this before. So nice to discover another person with original thoughts on this issue. Really.. thank you for starting this up. This web site is one thing that is required on the internet, someone with a bit of originality!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1366542213.65";s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:71:{s:15:"comment_post_ID";s:3:"490";s:14:"comment_author";s:29:"ncis finale 2012 full episode";s:20:"comment_author_email";s:27:"chantalseidel@bigstring.com";s:18:"comment_author_url";s:65:"http://darrelkny.momaroo.com/772666541/2-new-gibbs-rules-on-ncis/";s:15:"comment_content";s:295:"You're so awesome! I don't believe I've truly read through anything like this before. So nice to discover another person with original thoughts on this issue. Really.. thank you for starting this up. This web site is one thing that is required on the internet, someone with a bit of originality!";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:15:"198.143.144.253";s:10:"user_agent";s:64:"Opera/9.80 (Windows NT 5.1; U; en) Presto/2.10.289 Version/12.01";s:8:"referrer";s:107:"http://jhjguxin.sinaapp.com/2012/05/18/how-to-allow-users-to-sign-in-using-their-username-or-email-address/";s:4:"blog";s:27:"http://jhjguxin.sinaapp.com";s:9:"blog_lang";s:5:"zh_CN";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:107:"http://jhjguxin.sinaapp.com/2012/05/18/how-to-allow-users-to-sign-in-using-their-username-or-email-address/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:29:"ncis finale 2012 full episode";s:10:"POST_email";s:27:"chantalseidel@bigstring.com";s:8:"POST_url";s:65:"http://darrelkny.momaroo.com/772666541/2-new-gibbs-rules-on-ncis/";s:12:"POST_comment";s:295:"You're so awesome! I don't believe I've truly read through anything like this before. So nice to discover another person with original thoughts on this issue. Really.. thank you for starting this up. This web site is one thing that is required on the internet, someone with a bit of originality!";s:11:"POST_submit";s:12:"发表评论";s:20:"POST_comment_post_ID";s:3:"490";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"f4fa75b9fa";s:15:"SERVER_SOFTWARE";s:6:"Apache";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:14:"MEF_PROXY_ADDR";s:11:"10.67.15.11";s:11:"has_apphash";s:1:"1";s:16:"ApplimitOutOfCon";s:1:"0";s:16:"ApplimitOutOfMem";s:1:"0";s:10:"SCRIPT_URL";s:21:"/wp-comments-post.php";s:10:"SCRIPT_URI";s:48:"http://jhjguxin.sinaapp.com/wp-comments-post.php";s:20:"HTTP_X_FORWARDED_FOR";s:32:"198.143.144.253, 198.143.144.253";s:9:"HTTP_HOST";s:20:"jhjguxin.sinaapp.com";s:12:"HTTP_APPNAME";s:8:"jhjguxin";s:15:"HTTP_APPVERSION";s:1:"1";s:9:"HTTP_MCIP";s:26:"1default;1::;1:@default:;;";s:14:"HTTP_ACCESSKEY";s:10:"34y21z4k20";s:12:"HTTP_APPHASH";s:3:"311";s:14:"HTTP_MYSQLPORT";s:4:"3307";s:14:"HTTP_APPCOOKIE";s:26:"default_version=1;debug=2;";s:12:"HTTP_APPSRVC";s:19:"0000000000000000AC0";s:15:"HTTP_CONNECTION";s:5:"close";s:14:"HTTP_X_REAL_IP";s:15:"198.143.144.253";s:11:"HTTP_COOKIE";s:0:"";s:15:"HTTP_USER_AGENT";s:64:"Opera/9.80 (Windows NT 5.1; U; en) Presto/2.10.289 Version/12.01";s:11:"HTTP_ACCEPT";s:129:"text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1";s:20:"HTTP_ACCEPT_LANGUAGE";s:2:"en";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:12:"HTTP_REFERER";s:107:"http://jhjguxin.sinaapp.com/2012/05/18/how-to-allow-users-to-sign-in-using-their-username-or-email-address/";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:14:"CONTENT_LENGTH";s:3:"584";s:4:"PATH";s:46:"/bin:/usr/bin:/usr/ucb:/usr/bsd:/usr/local/bin";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:20:"jhjguxin.sinaapp.com";s:11:"SERVER_ADDR";s:11:"10.67.15.22";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:15:"198.143.144.253";s:13:"DOCUMENT_ROOT";s:32:"/data1/www/htdocs/311/jhjguxin/1";s:12:"SERVER_ADMIN";s:18:"saesupport@sina.cn";s:15:"SCRIPT_FILENAME";s:53:"/data1/www/htdocs/311/jhjguxin/1/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"30140";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1366542212";s:14:"HTTP_SECRETKEY";s:9:"Discarded";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1373462952.46";s:7:"message";s:39:"jhjguxin 将评论状态改为 approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jhjguxin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>使用ruby解析纯真IP库-qqwry.dat</title>
		<link></link>
		<pubDate>Sun, 20 May 2012 07:40:16 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=494</guid>
		<description></description>
		<content:encoded><![CDATA[在写一个地区相关的节能时，需要用到根据IP判断地区的功能，就想着找一个能够解析IP到地址的库。找了一下资料，国内用的比较多的IP库是早年就开始流行到现在的纯真IP库（QQrwy.dat），至于用ruby来解析纯真IP库的，则没找到几个，文章是不少，不过引用的几乎都是同样的代码，那个是比较早的ruby版本了，在1.9.2下跑的话，会有问题，我小改了一下，发现还是会有些问题，于是索性自己写一个吧。

要解析纯真IP库，对于该库的数据结构是必须要了解的，不多说，网上几乎唯一的纯真数据格式的说明就是这篇了  <a href="http://lumaqq.linuxsir.org/article/qqwry_format_detail.html" target="_blank">纯真IP数据库格式解析</a>

格式并不算太复杂，主要是要注意偏移。纯真IP库的字符编码是GB2312的，而Windows下的命令行窗口也是GB2312编码，所以就不用转编码了。不过我是在linux下写的，所以默认编码用的是utf8，这也算是大势所趋么（也提供了GB编码的取得方式）。

代码如下，如果看过IP库格式的话，配上代码注释，应该是比较容易就懂的。

试了一下，查询1000次用时大概200毫秒左右
<pre>require 'iconv'

class IpSearch
	def initialize(file='qqwry.dat')
		filename = file
		@file = File.open(filename,"r")
		@index_first,@index_last  = @file.read(8).unpack('L2')
    		@index_total = (@index_last - @index_first)/7 + 1
    		@location = {}
	end

	#把IP转换为长整形
	def ip2long(ip)
	  long = 0
	  ip.split(/\./).each_with_index do |b, i|
	    long += b.to_i &lt;&lt; 8*(3-i)
	  end
	  long
	end

	#读取偏移值
	def read_offset(position)
		@file.seek position
		chars = @file.read(3).unpack('C3')
		(chars[2]&lt;&lt;16) + (chars[1]&lt;&lt;8) + chars[0]
	end

	#读取记录中的4字节作为一个long值
	def read_long(position)
		@file.seek position
		@file.read(4).unpack('L')[0]
	end

	#读取模式信息，1和2为正常，其他值异常
	#position:字符串偏移量
	def read_mode(position)
		@file.seek position #前4位为IP值
		@file.read(1).unpack('C')[0]
	end

	#根据IP在索引中查找具体位置
	def find_str_offset(ip_long)
		offset_min,offset_max = @index_first,@index_last

    		while offset_min &lt;= offset_max
      			offset_mid =  offset_min + (offset_max - offset_min) / 14*7
      			mid = read_long(offset_mid)

      			if ip_long &lt; mid
        			offset_max = offset_mid - 7
      			elsif ip_long == mid
        			return read_offset(offset_mid+4)
      			else
        			offset_min = offset_mid + 7
      			end
    		end

    		return read_offset(offset_max+4)
	end

	#读取字符串
	def read_str(position)
		@file.seek position
		str = []
		while c = @file.getc
		  break if str.size &gt; 60 #地址不会太长，防止有异常数据
		  break if c == "\0"  #地址字符串以\0结尾
		  str &lt;&lt; c
		end
		str.join ''
	end

	#根据IP查找地址
	def find_ip_location(ip)
		offset = find_str_offset(ip2long(ip))#读取具体数据在记录区的偏移
		@location = {}
		case read_mode(offset+4)
		when 1
      str_offset = read_offset(offset+4+1) #读取字符串存储位置偏移（4是IP值，1是模式）
      if read_mode(str_offset)==2 then
        country_offset = read_offset(str_offset+1)
        @location[:country] = read_str country_offset
      	@location[:area] = read_area(str_offset+4)
      else
        @location[:country] = read_str str_offset
      	@location[:area] = read_area(@file.pos)
      end

		when 2
			str_offset = read_offset(offset+4+1) #读取字符串存储位置偏移（4是IP值，1是模式）
			@location[:country] = read_str(str_offset)
			@location[:area] = read_area(offset+8)
		else
			@location[:country] = read_str(offset)
			@location[:area] = read_str(@file.pos)
		end

		@location
	end

	#读取记录中的地址信息
	def read_area(position)
		mode = read_mode(position)
		if mode==1 || mode==2
			offset = read_offset(position+1)
			return '' if offset==0
			return read_str(offset)
		else
			return read_str(position)
		end
	end

	#取得国家，UTF8编码
	def country
		Iconv.iconv('UTF-8//IGNORE','GB2312//IGNORE',@location[:country])
	end

	#取得地区，UTF8编码
	def area
		Iconv.iconv('UTF-8//IGNORE','GB2312//IGNORE',@location[:area])
	end

	#取得国家，GB2312编码
	def country_gb
		@location[:country]
	end

	#取得地区，GB2312编码
	def area_gb
		@location[:area]
	end
end

#************************以下测试代码*****************
time_start = Time.now
list = %w[66.249.71.153 202.8.15.255.2 61.157.175.233 58.19.176.201 61.178.12.170 61.191.187.113 121.14.133.169 58.222.234.230 202.198.184.136 121.12.116.58 203.191.148.55]
is = IpSearch.new
100.times do |i|
	list.each do |ip|
	  is.find_ip_location(ip)
	  #puts is.country
	  #puts is.area
	  #puts '-'*50
	end
end

puts "total time:#{Time.now-time_start}"</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>494</wp:post_id>
		<wp:post_date>2012-05-20 15:40:16</wp:post_date>
		<wp:post_date_gmt>2012-05-20 07:40:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%bf%e7%94%a8ruby%e8%a7%a3%e6%9e%90%e7%ba%af%e7%9c%9fip%e5%ba%93-qqwry-dat</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ip"><![CDATA[ip]]></category>
		<category domain="post_tag" nicename="qqwry-dat"><![CDATA[qqwry.dat]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e4%bd%bf%e7%94%a8ruby%e8%a7%a3%e6%9e%90%e7%ba%af%e7%9c%9fip%e5%ba%93%ef%bc%88qqwry-dat]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>数据迁移（rake ）</title>
		<link></link>
		<pubDate>Mon, 21 May 2012 06:05:59 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=500</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="blog_content">
<div>

有时候我们的Rails应用是在已有数据库上的，我们需要把基于SQL的schema转化成ActiveRecord的schema

1，dump schema
运行rake db:schema:dump来将数据库中的表结构复制到db/schema.rb文件中
这时运行rake db:schema:load或者将schema.rb的内容copy到一个migration中并运行rake db:migrate会生成表
其中:force =&gt; true表示会覆盖数据库已存在的表，这样会让我们丢失数据库已有的data

2，migration的版本
Rails会自动生成schema_info表，该表的version列表示当前的migration的version，即migration文件开头的number
可以修改schema_info的version来控制要执行的migrate任务

3，避免丢失数据
一种方式是先从数据库extract fixtures，然后rake db:schema:load或rake db:migrate，并且:force =&gt; true，然后rake db:fixtures:load
另一种方式是修改schema_info的version来控制要执行的migrate任务

</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>500</wp:post_id>
		<wp:post_date>2012-05-21 14:05:59</wp:post_date>
		<wp:post_date_gmt>2012-05-21 06:05:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%95%b0%e6%8d%ae%e8%bf%81%e7%a7%bb%ef%bc%88rake-%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="migrate"><![CDATA[migrate]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="sql"><![CDATA[sql]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Devise logout link non-functional</title>
		<link></link>
		<pubDate>Tue, 22 May 2012 05:37:10 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=502</guid>
		<description></description>
		<content:encoded><![CDATA[Resources: <a href="http://stackoverflow.com/questions/6110047/rails-devise-override-sessionscontroller">http://stackoverflow.com/questions/6110047/rails-devise-override-sessionscontroller</a>

the problem: In a nutshell, when I try to install a logout link to my app it fails to work. Here's as much context as I can think to put here (if you want anything else, please poke me)...

I've got this in a haml view:
<pre><code>= link_to("Logout", destroy_user_session_path, :method =&gt; :delete) </code></pre>
It generates this in the view:
<pre><code>&lt;a href="/users/sign_out" data-method="delete" rel="nofollow"&gt;Logout&lt;/a&gt; </code></pre>
I verified that in my config/initializers/devise.rb I have this setting uncommented and correct:
<pre><code>config.sign_out_via = :delete </code></pre>
I validated the following route:
<pre><code>destroy_user_session DELETE /users/sign_out(.:format) {:action=&gt;"destroy", :controller=&gt;"devise/sessions"} </code></pre>
I also have this bit of trickery in my routes.rb, and I suspect this is related to my issue:
<pre><code>devise_for :users, :controllers =&gt; {:sessions =&gt; "devise/sessions", :registrations =&gt; "users"} resources :users </code></pre>
This last bit is because I want to manage (edit, create and delete) users in my own controller.

The error message I'm getting is as follows:
<pre><code>ActiveRecord::RecordNotFound in UsersController#show Couldn't find User with ID=sign_out Rails.root: /home/jaydel/projects/mbsquared-projects/Wilson-Goldrick app/controllers/users_controller.rb:16:in `show' </code></pre>
In my server logs I see this for the request:
<pre><code>Started GET "/users/sign_out" for 127.0.0.1 at 2011-08-04 13:08:51 -0500   Processing by UsersController#show as HTML   Parameters: {"id"=&gt;"sign_out"} </code></pre>
Outside it's slightly overcast and in the mid 80s. I'm wearing a red shirt.

Anyone have any ideas?

1
<blockquote>The problem lies in the fact that in your logs the signout request is a GET request.
<pre><code>Started GET "/users/sign_out" </code></pre>
But the signout route is a DELETE
<pre><code>destroy_user_session DELETE /users/sign_out(.:format) </code></pre>
The reason why you are getting the exception is that is it getting confused with one of the routes created by <code>resources :users</code> which would be something like
<pre><code>edit_user GET /users/(:id)(.:format) {:action=&gt;"edit", :controller=&gt;"users"} </code></pre>
Basically 'sign_out' is being mistaken as a id.

I'm not sure why the delete link is not going through as a DELETE request. Though changing
<pre><code>config.sign_out_via = :delete </code></pre>
to be :get might solve the problem.</blockquote>
2
<blockquote>I think the more correct way to fix this, REST-wise, would be to change your logout links to use the DELETE method. It's a very easy fix, changing this:

link_to "Log out", destroy_user_session_path

to this:

link_to "Log out", destroy_user_session_path, :method =&gt; :delete</blockquote>
3
<blockquote>I had the same problem with rails 3.2 when I deleted from <code>application.js</code> this line:
<pre><code>//= require jquery_ujs </code></pre>
So, I think you have to insert this line in your <code>application.js</code> if you haven't it there.

PS. This behavior means that rails adapter for <code>jquery</code> doesn't function. So you should make sure if it is loaded in your html in browser. You should test it in development mode because you will have compressed js in production and it will be very difficult to find something there.

&nbsp;</blockquote>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>502</wp:post_id>
		<wp:post_date>2012-05-22 13:37:10</wp:post_date>
		<wp:post_date_gmt>2012-05-22 05:37:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devise-logout-link-non-functional</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="delete"><![CDATA[delete]]></category>
		<category domain="post_tag" nicename="devise"><![CDATA[devise]]></category>
		<category domain="post_tag" nicename="logout"><![CDATA[logout]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="signout"><![CDATA[signout]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Parse a web page and extract some json arrays</title>
		<link></link>
		<pubDate>Wed, 23 May 2012 02:29:48 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=506</guid>
		<description></description>
		<content:encoded><![CDATA[So I have some basic code below, which fetches the json from <a href="http://www.highcharts.com/demo/" rel="nofollow">http://www.highcharts.com/demo/</a>. But I want to be able to extract a hash, more specifically this:
<pre><code>series: [{
                    name: 'Tokyo',
                    data: [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6]
                }, {
                    name: 'New York',
                    data: [-0.2, 0.8, 5.7, 11.3, 17.0, 22.0, 24.8, 24.1, 20.1, 14.1, 8.6, 2.5]
                }, {
                    name: 'Berlin',
                    data: [-0.9, 0.6, 3.5, 8.4, 13.5, 17.0, 18.6, 17.9, 14.3, 9.0, 3.9, 1.0]
                }, {
                    name: 'London',
                    data: [3.9, 4.2, 5.7, 8.5, 11.9, 15.2, 17.0, 16.6, 14.2, 10.3, 6.6, 4.8]
                }]
            });</code></pre>
&nbsp;

Into to a hash so that I can access the different data points. Currently the script just spits out everything. Code below:
<pre><code>require "json"
require "open-uri"


$LOAD_PATH &lt;&lt; File.dirname(__FILE__)

result = JSON.parse(open("http://www.highcharts.com/demo/").read)</code></pre>
&nbsp;

There is no direct conversion since source is JavaScript code (not even valid JSON). There are many ways to accomplish this task (one ways more strict than others, generic escaping control may be tricky), but that's how I'd do it: HTML -&gt; JS -&gt; JSON -&gt; Ruby array.
<pre><code>require 'open-uri'
require 'json'

html = open("http://www.highcharts.com/demo/").read
js = html.match(/series: (\[\{.*?\}\])/m)[1]
json = js.gsub(/(\w+):/i, '"\1":').gsub(/'/, '"')
series = JSON.parse(json)
# =&gt; [{"name"=&gt;"Tokyo", "data"=&gt;[7.0, 6.9, 9.5, 14.5, 18.2, ... </code></pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>506</wp:post_id>
		<wp:post_date>2012-05-23 10:29:48</wp:post_date>
		<wp:post_date_gmt>2012-05-23 02:29:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>parse-a-web-page-and-extract-some-json-arrays</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="array"><![CDATA[array]]></category>
		<category domain="post_tag" nicename="json"><![CDATA[json]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3213</wp:comment_id>
			<wp:comment_author><![CDATA[ugg online]]></wp:comment_author>
			<wp:comment_author_email>qbxekhjlan@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://bootsoutletstoresonline.com</wp:comment_author_url>
			<wp:comment_author_IP>121.225.158.154</wp:comment_author_IP>
			<wp:comment_date>2013-10-11 17:31:35</wp:comment_date>
			<wp:comment_date_gmt>2013-10-11 09:31:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[good articles]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1381554582.39";s:7:"message";s:39:"jhjguxin 将评论状态改为 approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jhjguxin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>find_city</title>
		<link></link>
		<pubDate>Fri, 25 May 2012 07:45:03 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=509</guid>
		<description></description>
		<content:encoded><![CDATA[1. base on sina api

&nbsp;

&nbsp;
<code>require 'json'

class FindCity
  CityHash = JSON.parse `curl http://api.t.sina.com.cn/provinces.json`
  def initialize
    @cityhash=CityHash
    @municipality=[6,11,12,50,81,82]
  end
  def getcity(province_id=nil, city_id=nil)
    province_id.to_i
    city_id.to_i
    if @municipality.include? province_id
      @cityhash["provinces"].each do |provinces|
        if provinces["id"] == province_id
          return provinces["name"]
        end
      end
    else
      @cityhash["provinces"].each do |provinces|
        if provinces["id"] == province_id
          provinces["citys"].each do |city|
            return city[city_id.to_s] if city[city_id.to_s]
          end
        end
      end
    end
    return nil
  end
end

if __FILE__==$0
  #************************以下测试代码*****************
  time_start = Time.now
  city = FindCity.new
  list=[[6,2],[11,1],[43,2]]

  list.each do |l|
    puts city.getcity l[0],l[1]
  end


  puts "total time:#{Time.now-time_start}"
end</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>509</wp:post_id>
		<wp:post_date>2012-05-25 15:45:03</wp:post_date>
		<wp:post_date_gmt>2012-05-25 07:45:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>find_city</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="city"><![CDATA[city]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="sina"><![CDATA[sina]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HOWTO : easily create a Boot-Info summary</title>
		<link></link>
		<pubDate>Fri, 25 May 2012 12:16:59 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=511</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Boot-Repair</strong> is a simple tool to repair frequent boot issues you may encounter in Ubuntu like when you can't boot Ubuntu after installing Windows or another Linux distribution, or when you can't boot Windows after installing Ubuntu, or when GRUB is not displayed anymore, some upgrade breaks GRUB, etc.

Boot-Repair lets you fix these issues with a simple click, which (generally reinstalls GRUB and) restores access to the operating systems you had installed before the issue.

Boot-Repair also has advanced options to backup table partitions, backup bootsectors, create a Boot-Info-Summary (to get help by email or forum), or change the default repair parameters: configure GRUB, add kernel options (acpi=off ...), purge GRUB, change the default OS, restore a Windows-compatible MBR, repair a broken filesystem, specify the disk where GRUB should be installed, etc.

Boot-Repair is a free software, licensed under GNU-GPL. Boot-Repair should be <a href="https://bugs.launchpad.net/boot-repair/+bug/806291">soon</a> included in Ubuntu official repositories, until then use it at your own risks.

<img title="http://pix.toile-libre.org/upload/original/1335260967.png" src="http://pix.toile-libre.org/upload/original/1335260967.png" alt="http://pix.toile-libre.org/upload/original/1335260967.png" />

&nbsp;
<h1 id="Getting_Boot-Repair">Getting Boot-Repair</h1>
&nbsp;
<h2 id="A1st_option_:_get_a_CD_including_Boot-Repair">1st option : get a CD including Boot-Repair</h2>
The easiest way to use Boot-Repair is to burn one of the following disks and boot on it.
<ul>
	<li><a href="https://sourceforge.net/projects/boot-repair-cd/files/">Boot-Repair-Disk</a> is a CD starting Boot-Repair automatically. (English only, 32&amp;64bits compatible, based on Debian-live so Wifi drivers are not recent).</li>
	<li>Boot-Repair is also included in <a href="https://help.ubuntu.com/community/UbuntuSecureRemix">Ubuntu-Secure-Remix</a> (multi-languages, ok for Wifi, based on Ubuntu 12.04 LTS, run Boot-Repair from the Dash)</li>
</ul>
Remark : you can also install the ISO on a <a href="https://help.ubuntu.com/community/Installation/FromUSBStick">live-USB</a> (eg via <a href="http://unetbootin.sourceforge.net/">UnetBootin</a>, <a href="http://www.linuxliveusb.com/">LiliUSB</a> or <a href="https://help.ubuntu.com/community/MultiSystem">MultiSystem</a>).

&nbsp;
<h2 id="A2nd_option_:_install_Boot-Repair_in_Ubuntu">2nd option : install Boot-Repair in Ubuntu</h2>
Remark: this can also be performed from a live-CD or live-USB.

Either add ‘ppa:yannubuntu/boot-repair’ to your Software Sources via the Software Centre or, for speeds-sake, add it using a new Terminal session:

&nbsp;
<pre>sudo add-apt-repository ppa:yannubuntu/boot-repair &amp;&amp; sudo apt-get update
sudo apt-get install -y boot-repair &amp;&amp; boot-repair</pre>
Boot-Repair can be installed &amp; used from any Ubuntu session (normal session, or live-CD, or live-USB). PPA packages are available for Ubuntu 10.04, 10.10, 11.04, 11.10 and 12.04.

&nbsp;
<h2>Adding this PPA to your system</h2>
<p id="yui_3_2_0_1_1337949503297112">You can update your system with unsupported packages from this untrusted PPA by adding <strong>ppa:yannubuntu/boot-repair</strong> to your system's Software Sources. (<a href="https://launchpad.net/+help-soyuz/ppa-sources-list.html" target="help">Read about installing</a>)</p>

<div><a href="https://launchpad.net/%7Eyannubuntu/+archive/boot-repair/+index#">Technical details about this PPA</a></div>
This PPA can be added to your system manually by copying the lines below and adding them to your system's software sources.
<div id="series-widget-div"><form id="yui_3_2_0_1_1337949503297108">Display sources.list entries for:</form></div>
<pre id="sources-list-entries">deb <a href="http://ppa.launchpad.net/yannubuntu/boot-repair/ubuntu">http://ppa.launchpad.net/yannubuntu/boot-repair/ubuntu</a> precise main
deb-src <a href="http://ppa.launchpad.net/yannubuntu/boot-repair/ubuntu">http://ppa.launchpad.net/yannubuntu/boot-repair/ubuntu</a> precise main</pre>
<dl id="signing-key"><dt>Signing key:</dt><dd><a href="http://keyserver.ubuntu.com:11371/pks/lookup?search=0x3C48D16124B50277AF10D27F32B18A1260D8DA0B&amp;op=index"> <code>1024R/60D8DA0B</code> </a> (<a href="https://launchpad.net/+help-soyuz/ppa-sources-list.html" target="help">What is this?</a>)</dd></dl>
<h1 id="Using_Boot-Repair">Using Boot-Repair</h1>
&nbsp;
<h2 id="Recommended_repair">Recommended repair</h2>
<ul>
	<li>launch Boot-Repair from either :
<ul>
	<li>the dash (Unity)</li>
	<li>System-&gt;Administration-&gt;Boot-Repair menu (Gnome)</li>
	<li>by typing 'boot-repair' in a terminal</li>
</ul>
</li>
	<li>Then try "Recommended repair" button. When repair is finished, note the URL that appeared on a paper, then reboot and check if you recovered access to your OSs.</li>
</ul>
If the repair did not succeed, indicate the URL to people who help you by email or forum.

&nbsp;
<h2 id="Advanced_options">Advanced options</h2>
<img title="http://pix.toile-libre.org/upload/img/1335263156.png" src="http://pix.toile-libre.org/upload/img/1335263156.png" alt="http://pix.toile-libre.org/upload/img/1335263156.png" /> <img title="http://pix.toile-libre.org/upload/img/1335263804.png" src="http://pix.toile-libre.org/upload/img/1335263804.png" alt="http://pix.toile-libre.org/upload/img/1335263804.png" /> <img title="http://pix.toile-libre.org/upload/img/1335263271.png" src="http://pix.toile-libre.org/upload/img/1335263271.png" alt="http://pix.toile-libre.org/upload/img/1335263271.png" /> <img title="http://pix.toile-libre.org/upload/img/1335263417.png" src="http://pix.toile-libre.org/upload/img/1335263417.png" alt="http://pix.toile-libre.org/upload/img/1335263417.png" /> <img title="http://pix.toile-libre.org/upload/img/1335263366.png" src="http://pix.toile-libre.org/upload/img/1335263366.png" alt="http://pix.toile-libre.org/upload/img/1335263366.png" />

&nbsp;
<h1 id="External_Links">External Links</h1>
<ul>
	<li><a href="https://sourceforge.net/p/boot-repair/">Official website of Boot-Repair</a></li>
	<li><a href="http://ubuntuforums.org/showthread.php?p=10871917#post10871917">Topic "Boot-repair: Graphical tool to repair the PC boot in 1 clic !"</a> - on Ubuntu forum, for any questions/comments.</li>
	<li><a href="http://ubuntuforums.org/showthread.php?t=1821980">HOWTO : easily create a Boot-Info summary with Boot-Repair</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>511</wp:post_id>
		<wp:post_date>2012-05-25 20:16:59</wp:post_date>
		<wp:post_date_gmt>2012-05-25 12:16:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>howto-easily-create-a-boot-info-summary</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="boot-repair"><![CDATA[Boot-Repair]]></category>
		<category domain="category" nicename="ubuntu"><![CDATA[ubuntu]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rails - Devise - Handling - devise_error_messages</title>
		<link></link>
		<pubDate>Wed, 30 May 2012 05:10:46 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=523</guid>
		<description></description>
		<content:encoded><![CDATA[in my user edit page, there is a line as follows:
<pre><code>&lt;%= devise_error_messages! %&gt; </code></pre>
The problem is this does not output errors the stand way that the rest of the app does:
<pre><code>&lt;% flash.each do |key, value| %&gt;     &lt;divpun" style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; border-image: initial; vertical-align: baseline; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; color: rgb(0, 0, 0); "&gt;&lt;%= key %&gt;"&gt;&lt;%= value %&gt;&lt;/div&gt; &lt;% end %&gt; </code></pre>
My question, is how to I get the devise error message to work like the others that use the flash.each?

Thanks

I'm trying to figure this out myself. I just found this issue logged on Github<a href="https://github.com/plataformatec/devise/issues/issue/504/#comment_574788" rel="nofollow">https://github.com/plataformatec/devise/issues/issue/504/#comment_574788</a>

Jose is saying that <code>devise_error_messsages!</code> method is just a <em>stub</em> (though it contains implementation) and that we're supposed to override/replace it. It would have been nice if this was pointed out somewhere in the wiki, which is why i guess there are a few people like us that have been guessing.

So I'm going to try reopening the module and redefine the method, effectively overriding the default implementation. I'll let you know how it goes.
<h2>Update</h2>
Yep, that works. I created <code>app/helpers/deivse_helper.rb</code> and overrode it like so:
<pre><code>module DeviseHelper   def devise_error_messages!     'KABOOM!'   end end </code></pre>
So knowing this, I can modify the method to display error messages the way I want it to.

To help you solve your original problem: Here's the original <a href="https://github.com/plataformatec/devise/blob/master/app/helpers/devise_helper.rb#L6" rel="nofollow"><code>devise_helper.rb</code> on Github</a>. Take a look at how the error messages are being traversed, specifically <a href="https://github.com/plataformatec/devise/blob/master/app/helpers/devise_helper.rb#L5" rel="nofollow">Line 5</a>.
<pre><code>messages = resource.errors.full_messages.map { |msg| content_tag(:li, msg) }.join </code></pre>
That should help you get started. :)
<h2>Another update</h2>
The <code>resource</code> object is actually the model that is being used by devise (go figure).
<pre><code>resource.class         #=&gt; User resource.errors.class  #=&gt; ActiveModel::Error </code></pre>
It also appears to be defined in a higher scope (probably coming from the controller), so it can be accessed in a variety of places.

Anywhere in your Helper
<pre><code>module DeviseHelper   def devise_error_messages1!     resource.errors.full_messages.map { |msg| content_tag(:li, msg) }.join   end   def devise_error_messages2!     resource.errors.full_messages.map { |msg| content_tag(:p, msg) }.join   end end </code></pre>
Your View
<pre><code>&lt;div&gt;&lt;%= resource.errors.inspect %&gt;&lt;/div&gt;</code></pre>
More info look at <a href="http://stackoverflow.com/questions/4101641/rails-devise-handling-devise-error-messages">http://stackoverflow.com/questions/4101641/rails-devise-handling-devise-error-messages</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>523</wp:post_id>
		<wp:post_date>2012-05-30 13:10:46</wp:post_date>
		<wp:post_date_gmt>2012-05-30 05:10:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-devise-handling-devise_error_messages</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="devise"><![CDATA[devise]]></category>
		<category domain="post_tag" nicename="errors"><![CDATA[errors]]></category>
		<category domain="post_tag" nicename="messages"><![CDATA[messages]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LVM (简体中文)</title>
		<link></link>
		<pubDate>Fri, 01 Jun 2012 02:55:36 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=526</guid>
		<description></description>
		<content:encoded><![CDATA[<h2> 介绍</h2>
LVM 是一个应用于 Linux 内核的本地卷管理器 (Logical Volume Manager)。 使用 LVM 你可以抽象你的存储空间，并且可以有很容易更改的“虚拟分区”。LVM的基本模块如下：
<ul>
	<li><strong>Physical volume (PV)</strong>: 物理卷,例如一个硬盘,或一个Software RAID设备; 硬盘的一个分区 (或者甚至硬盘本身或者回环文件)，在它上面可以建立卷组。It has a special header and is divided into physical extents. Think of physical volumes as big building blocks which can be used to build your hard drive.</li>
	<li><strong>Volume group (VG)</strong>: 卷组,将一组物理卷收集为一个管理单元;Group of physical volumes that are used as storage volume (as one disk). They contain logical volumes. Think of volume groups as hard drives.</li>
	<li><strong>Logical volume(LV)</strong>: 逻辑卷,等同于传统分区,可看作便准的块设备,以容纳文件系统;A "virtual/logical partition" that resides in a volume group and is composed of physical extents. Think of logical volumes as normal partitions.</li>
	<li><strong>Physical extent (PE)</strong>: 物理块,划分物理卷的数据块;A small part of a disk (usually 4MB) that can be assigned to a logical Volume. Think of physical extents as parts of disks that can be allocated to any partition.</li>
</ul>
使用 LVM 你可以比正常的硬盘分区更容易的管理硬盘分区（逻辑卷）。例如，你可以：
<ul>
	<li>使用卷组(VG)，使众多硬盘空间看起来像一个大硬盘。</li>
	<li>使用逻辑卷（LV），可以创建跨越众多硬盘空间的分区。</li>
	<li>可以根据需要，对分区（LV）和硬盘空间（VG）进行创建、删除、调整大小等操作。(it doesn't depend on position of the logical volumes within volume groups as with normal partitions)</li>
	<li>Resize/create/delete partitions(LV) and disks(VG) <em>online</em> (filesystems on them still need to be resized, but some support online resizing)</li>
	<li><em>Name</em> your disks(VG) and partitions(LV) as you like</li>
	<li>Create small partitions(LV) and resize them "<em>dynamically</em>" as they get more filled (growing must be still done by hand, but you can do it online with some filesystems)</li>
	<li>...</li>
</ul>
示例:
<pre><strong>两块物理硬盘</strong>

  硬盘1 (/dev/sda):
     _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    |分区1 50GB (Physical volume) |分区2 80GB (Physical volume)     |
    |/dev/sda1                   |/dev/sda2                       |
    |_ _ _ _ _ _ _ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |

  硬盘2 (/dev/sdb):
     _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
    |分区1 120GB (Physical volume)                 |
    |/dev/sdb1                                    |
    | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __ _ _|</pre>
<pre><strong>LVM方式</strong>

  卷组VG1 (/dev/MyStorage/ = /dev/sda1 + /dev/sda2 + /dev/sdb1):
     _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  
    |逻辑卷lv1 15GB         |逻辑卷lv2 35GB              |逻辑卷lv3 200GB               |
    |/dev/MyStorage/rootvol|/dev/MyStorage/usrvol     |/dev/MyStorage/homevol       |
    |_ _ _ _ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _ _ _ _ _ _ |_ _ _ _ _ _ _ _ _ _ _ _ _ _ _|</pre>
总而言之: With LVM you can use all your storage space as one big disk (volume group) and have more flexibility over your partitions (logical volumes).
<h2>Advantages</h2>
Here are some things you can do with LVM that you can't (or can't do easily) with just mdadm, MBR partitions, GPT partitions, parted/gparted and a file-level tool like rsync.
<ol>
	<li>Online/live partition resizing</li>
	<li>No need for an extended partition (not relevant for GPT)</li>
	<li>Resize partitions regardless of their order on disk (no need to ensure surrounding available space)</li>
	<li>Online/live migration of partitions being used by services without having to restart services</li>
</ol>
These can be very helpful in a server situation, desktop less so, but you must decide if the features are worth the abstraction.
<h2>安装</h2>
在做其他工作之前，我们需要加载合适的模块：
<pre># modprobe dm-mod</pre>
如果你已经安装好了操作系统，并只是想利用增加或尝试一个LVM分区，请跳到这 <a title="Lvm" href="https://wiki.archlinux.org/index.php/Lvm#Partition_disks">partition disks</a>.
<h3>在 LVM 上安装 Arch Linux</h3>
在开始安装arch之前（即输入：/arch/setup之前），先使用cfdisk等工具来规划分区。因为grub不能从LVM逻辑卷引导启动 （版本1.0时），所以需要先创建一个/boot引导区，100MB应该够了。另外的解决办法就是使用lilo或者高于1.95版本的grub。
<h3>创建 LVM 分区</h3>
接下来，要创建LVM将使用的分区。文件类型使用'Linux LVM'，所以使用分区id 0x8e (文件系统类型：8E)。在需要使用LVM的每块硬盘上，各创建一个LVM分区。 Your logical volumes will reside inside these partitions so size them accordingly. If you will use only LVM and no other external partitions, use all of free space on each disk.
<div><strong> 警告: </strong> /boot不能包含在LVM分区里，因为grub (version&lt;1.95)不能从LVM中引导grub。</div>
<div><strong> 小贴士: </strong>所有硬盘的所有LVM分区可以被设置成看起来就像一个大硬盘。</div>
<h3>创建物理卷（PV）</h3>
接下来，要加载使用lvm所需的相应模块:
<pre># modprobe dm-mod</pre>
用命令'fdisk -l'查看那个分区的文件系统类型是'Linux LVM'，然后在其上创建一个物理卷组pv（假设是/dev/sda2)，输入如下命令:
<pre># pvcreate /dev/sda2</pre>
Substitute /dev/sda2 with all your partitions to create physical volumes on all of them. This command creates a header on each partition so it can be used for LVM. 查看物理卷情况：
<pre># pvdisplay</pre>
<h3>创建卷组（VG）</h3>
创建完成物理卷之后，就是开始创建卷组了。 如果有两个以上的物理卷pv（比如下面例子，有两个/dev/sda2和/dev/sdb1），首先必须先在其中一个创建一个卷组vg，然后让该卷组vg 扩大到其他所有的物理卷pv（这里假设你只使用一个卷组vg来管理其他所有的物理卷pv。）:
<pre># vgcreate VolGroup00 /dev/sda2
# vgextend VolGroup00 /dev/sdb1</pre>
其中，“VolGroup00”名字换成你自己起的名字即可。接下来看看卷组情况：
<pre># vgdisplay</pre>
<div><strong> 注意: </strong>可以创建多于一个的卷组，但因此将让你的硬盘空间看起来不像一块硬盘。</div>
<h3>创建逻辑卷（LV）</h3>
创建完卷组vg之后，就可以开始创建逻辑卷了。输入下面命令：
<pre># lvcreate -L 10G VolGroup00 -n lvolhome</pre>
其中10G是大小，VolGroup00是卷组vg名称，lvolhome是逻辑卷lv名称，这些都可以根据你自己喜欢设定，以后可以使用/dev/mapper/Volgroup00-lvolhome 或者 /dev/VolGroup00/lvolhome来操作.

查看逻辑卷情况:
<pre># lvdisplay</pre>
<div><strong> 注意: </strong>You may need to load the <em>device-mapper</em> kernel module (<strong>modprobe dm-mod</strong>) for the above commands to succeed.</div>
<div><strong> 小贴士: </strong>一开始可以创建小一点的逻辑卷lv，然后留一部分未使用空间在卷组vg里，以后可以根据需要再扩展各个逻辑卷。</div>
<h3>建立文件系统与挂载逻辑卷</h3>
Your logical volumes should now be located in <strong>/dev/mapper/</strong> and <strong>/dev/YourVolumeGroupName</strong>. If you can't find them use the next commands to bring up the module for creating device nodes and to make volume groups availabile:
<pre># modprobe dm-mod
# vgscan
# vgchange -ay</pre>
Now you can create filesystems on logical volumes and mount them as normal partitions (if you are installing Arch linux, skip this step):
<pre># mkfs.ext3 /dev/mapper/VolGroup00-lvolhome
# mount /dev/mapper/VolGroup00-lvolhome /home</pre>
如果你正在安装Archlinux，到 <em>Prepare Hard Drive</em> 这一步时，转到第三项 <em>Set Filesystem Mountpoints</em> ，请 <em><strong>在进入安装前，阅读下面的 <a title="Arch LVM配置 (简体中文)" href="https://wiki.archlinux.org/index.php/Arch_LVM%E9%85%8D%E7%BD%AE_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#.E9.87.8D.E8.A6.81">重要</a>部分 !</strong></em>
<h3>重要</h3>
有几点在使用/安装带有 LVM 的 Arch Linux 时你需要特别注意的地方。（括号里是相关的安装过程中的菜单）：
<h4>设置文件系统挂载点</h4>
<ul>
	<li>当选择挂载点时（除了/boot），千万不要选择实际存在的逻辑卷（比如：<code>/dev/sda2</code>），只需选择由lv创建的逻辑卷（比如: <code>/dev/mapper/Volgroup00-lvolhome</code>)。</li>
</ul>
<h4>配置系统</h4>
<ul>
	<li>确保在 <code>/etc/rc.conf</code> 中，把<code>USELVM="no"</code>修改成 <code>USELVM="yes"</code>。<code>rc.sysinit</code> 脚本处理 <code>USELVM</code> 变量时只会识别<code>yes</code> 或者 <code>YES</code>，不支持大小写混合。</li>
</ul>
<ul>
	<li>确保 <em>lvm2</em> 在 <code>/etc/mkinitcpio.conf</code> HOOKS 部分的 <em>filesystems</em> 前面，这样您的内核就可以在启动时找到 LVM 卷。</li>
	<li>If your root filesystem ( "/" ) is put onto a logical volume, make sure regenerate kernel image based on above modified <code>/etc/mkinitcpio.conf</code> by using below command so that bootloader can find your root during booting</li>
</ul>
<pre>     cd /boot 
     mkinitcpio -p linux</pre>
<ul>
	<li>确保为 root 使用了正确的卷。</li>
</ul>
<dl><dd>对于 GRUB，编辑<code>/boot/grub/menu.lst</code> ：</dd></dl>
<pre>     ...
     (0) Arch Linux
     title  Arch Linux
     root   (hd0,0)
     kernel /vmlinuz-linux <strong>root=/dev/mapper/VolGroup00-lvolroot</strong> resume=/dev/mapper/VolGroup00-lvolswap ro
     initrd /initramfs-linux.img
     ...</pre>
<dl><dd>For SYSLINUX, edit <code>/boot/syslinux/syslinux.cfg</code>:</dd></dl>
<pre>     ...
     # (0) Arch Linux
     LABEL arch
       MENU LABEL Arch Linux
       LINUX ../vmlinuz-linux
       APPEND <strong>root=/dev/mapper/VolGroup00-lvolroot</strong> ro
       INITRD ../initramfs-linux.img</pre>
<dl><dd>对于 LILO ，检查 <code>/etc/lilo.conf</code>:</dd></dl>
<pre>     ...
     image=/boot/vmlinuz-linux
       label=arch
       append="<strong>root=/dev/mapper/VolGroup00-lvolroot</strong> resume=/dev/mapper/VolGroup00-lvolswap ro"
       initrd=/boot/initramfs-linux.img
     ...</pre>
<h2>配置</h2>
<h3>扩大逻辑卷</h3>
To grow a logical volume you first need to grow the logical volume and then the filesystem to use the newly created free space. Let's say we have a logical volume of 15GB with ext3 on it and we want to grow it to 20G. We need to do the following steps:
<pre># lvextend -L 20G VolGroup00/lvolhome (or lvresize -L +5G VolGroup00/lvolhome)
# resize2fs /dev/VolGroup00/lvolhome</pre>
You may use lvresize insted of lvextend.

If you want to fill all the free space on a volume group use the next command:
<pre># lvextend -l +100%FREE VolGroup00/lvolhome</pre>
<div><strong> 警告: </strong>并非所有的文件系统都支持无损或在线扩大逻辑卷。</div>
<div><strong> 注意: </strong>If you do not resize your filesystem, you will still have a volume with the same size as before (volume will be bigger but partly unused).</div>
<h3>缩小逻辑卷</h3>
Because your filesystem is probably as big as the logical volume it resides on, you need to shrink the filesystem first and then shrink the logical volume. Depending on your filesystem, you may need to unmount it first. Let us say we have a logical volume of 15GB with ext3 on it and we want to shrink it to 10G. We need to do the following steps:
<pre># resize2fs /dev/VolGroup00/lvolhome 9G
# lvreduce -L 10G VolGroup00/lvolhome (or lvresize -L -5G VolGroup00/lvolhome)
# resize2fs /dev/VolGroup00/lvolhome</pre>
Here we shrunk the filesystem more than needed so that when we shrunk the logical volume we did not accidentally cut off the end of the filesystem. After that we normally grow the filesystem to fill all free space left on logical volume. You may use <code>lvresize</code> instead of <code>lvreduce</code>.
<div><strong> Warning: </strong>
<ul>
	<li>Do not reduce the filesystem size to less than the amount of space occupied by data or you risk data loss.</li>
	<li>Not all filesystems support shrinking without loss of data and/or shrinking online.</li>
</ul>
</div>
<div><strong> Note: </strong>It is better to reduce the filesystem to a smaller size than the logical volume, so that after resizing the logical volume, we do not accidentally cut off some data from the end of the filesystem.</div>
<h3>Remove logical volume</h3>
<div><strong> Warning: </strong>Before you remove a logical volume, make sure to move all data that you want to keep somewhere else, otherwise it will be lost!</div>
First, find out the name of the logical volume you want to remove. You can get a list of all logical volumes installed on the system with:
<pre># lvs</pre>
Next, look up the mountpoint for your chosen logical volume...:
<pre>$ df -h</pre>
... and unmount it:
<pre># umount /your_mountpoint</pre>
Finally, remove the logical volume:
<pre># lvremove /dev/yourVG/yourLV</pre>
Confirm by typing "y" and you are done.

Dont forget, to update /etc/fstab:
<pre># sudo nano /etc/fstab</pre>
You can verify the removal of your logical volume by typing "lvs" as root again (see first step of this section).
<h3>添加分区到卷组中</h3>
To add a partition to your volume group you must first make its type 'Linux LVM' (for example with <code>cfdisk</code>). Then you need to create a physical volume on it and extend the volume group over it:
<pre># pvcreate /dev/sdb1
# vgextend VolGroup00 /dev/sdb1</pre>
Now you have free space in your volume group that can be used by logical volumes in this group.
<div><strong> Tip: </strong>You can add partitions from any disks to volume groups.</div>
<h3>从卷组中移除卷</h3>
All of the data on that partition needs to be moved to another partition. Fortunately, LVM makes this easy:
<pre># pvmove /dev/sdb1</pre>
If you want to have the data on a specific physical volume, specify that as the second argument to <code>pvmove</code>:
<pre># pvmove /dev/sdb1 /dev/sdf1</pre>
Then the physical volume needs to be removed from the volume group:
<pre># vgreduce myVg /dev/sdb1</pre>
Or remove all empty physical volumes:
<pre># vgreduce --all vg0</pre>
And lastly, if you want to use the partition for something else, and want to avoid LVM thinking that the partition is a physical volume:
<pre># pvremove /dev/sdb1</pre>
<h3>快照功能</h3>
<h4>介绍</h4>
LVM可以给系统创建一个快照，由于使用了COW (copy-on-write) 策略，相比传统的备份更有效率。 The initial snapshot you take simply contains hard-links to the inodes of your actual data. So long as your data remains unchanged, the snapshot merely contains its inode pointers and not the data itself. Whenever you modify a file or directory that the snapshot points to, LVM automatically clones the data, the old copy referenced by the snapshot, and the new copy referenced by your active system. 这样的话，如果你只修改了不超过2G数据（包括原始的和快照的），你将可以只使用2G的空间，就能快照一个有35G的数据的系统。
<h4>配置</h4>
You create snapshot logical volumes just like normal ones.
<pre># lvcreate --size 100M --snapshot --name snap01 /dev/mapper/vg0-pv</pre>
With that volume, you may modify less than 100M of data, before the snapshot volume fills up.

Todo: scripts to automate snapshots of root before updates, to rollback... updating menu.lst to boot snapshots (separate article?)

snapshots are primarily used to provide a frozen copy of a filesystem to make backups; a backup taking two hours provides a more consistent image of the filesystem than directly backing up the partition.
<h2>常见问题</h2>
<h3>LVM 命令不起作用</h3>
try preceeding commands with <em>lvm</em> like this:
<pre># lvm pvdisplay</pre>
<h3>设定文件系统挂载点的页面不显示逻辑卷</h3>
If you are installing on a system where there is an existing volume group, you may find that even after doing "modprobe dm-mod" you don't see the list of logical volumes.

In this case, you may also need to do:
<pre># vgchange -ay &lt;volgroup&gt;</pre>
in order to activate the volume group and make the logical volumes available.
<h3>Receiving Input/Output Errors after plugging in a removable device with LVM partitions</h3>
Symptoms:
<pre>~$ sudo vgscan
 Reading all physical volumes.  This may take a while...
 /dev/backupdrive1/backup: read failed after 0 of 4096 at 319836585984: Input/output error
 /dev/backupdrive1/backup: read failed after 0 of 4096 at 319836643328: Input/output error
 /dev/backupdrive1/backup: read failed after 0 of 4096 at 0: Input/output error
 /dev/backupdrive1/backup: read failed after 0 of 4096 at 4096: Input/output error
 Found volume group "backupdrive1" using metadata type lvm2
 Found volume group "networkdrive" using metadata type lvm2</pre>
Cause:

<dl><dd>Removing an external LVM drive without deactivating the volume group(s) first. Before you disconnect, make sure to:</dd></dl>
<pre># vgchange -an &lt;volume group name&gt;</pre>
Fix: (assuming you already tried to activate the volume group with vgchange -ay &lt;vg&gt;, and are receiving the Input/output errors
<pre># vgchange -an &lt;volume group name&gt;</pre>
<dl><dd>Unplug the external drive and wait a few minutes</dd></dl>
<pre># vgscan
# vgchange -ay &lt;volume group name&gt;</pre>
<h2>技巧</h2>
<h2>更多资源</h2>
archwiki的其他关于LVM的文章：
<ul>
	<li><a title="Installing with Software RAID or LVM" href="https://wiki.archlinux.org/index.php/Installing_with_Software_RAID_or_LVM">Installing with software RAID or LVM</a></li>
	<li><a title="RAID Encryption LVM" href="https://wiki.archlinux.org/index.php/RAID_Encryption_LVM">RAID encryption LVM</a></li>
</ul>
外部资源：
<ul>
	<li><a href="http://en.wikipedia.org/wiki/Logical_Volume_Manager_%28Linux%29" rel="nofollow">LVM on wikipedia</a></li>
	<li><a href="http://tldp.org/HOWTO/LVM-HOWTO/" rel="nofollow">LVM HOWTO on tldp.org </a></li>
	<li><a href="http://www.gentoo.org/doc/en/lvm2.xml" rel="nofollow">Gentoo LVM2 installation at gentoo.org </a></li>
	<li><a href="http://en.gentoo-wiki.com/wiki/LVM" rel="nofollow">LVM at en.gentoo-wiki.com</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>526</wp:post_id>
		<wp:post_date>2012-06-01 10:55:36</wp:post_date>
		<wp:post_date_gmt>2012-06-01 02:55:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lvm-%e7%ae%80%e4%bd%93%e4%b8%ad%e6%96%87</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="logical"><![CDATA[logical]]></category>
		<category domain="post_tag" nicename="lvm"><![CDATA[lvm]]></category>
		<category domain="category" nicename="ubuntu"><![CDATA[ubuntu]]></category>
		<category domain="post_tag" nicename="volume"><![CDATA[volume]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>创建基于Rails 3的纯净Ajax CRUD程序</title>
		<link></link>
		<pubDate>Wed, 06 Jun 2012 14:50:27 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=530</guid>
		<description></description>
		<content:encoded><![CDATA[Rails 3利用scaffold可以很容易地创建CRUD程序，但那是多页面的，现在很多场景需要使用Ajax在一个页面上实现CRUD。这对Rails 来说也是很简单的，下面就来创建一个符合Rails风格的Ajax CRUD程序。整个过程大概15分钟，建议先把整个代码照应敲一遍，然后再慢慢理解。
<h3>目标：</h3>
只有1个页面，CRUD全部基于Ajax在一个页面完成。使用无入侵式的Javascript风格。
<h3>平台：</h3>
适用于Rails 3.*，使用jQuery+sqlite。
Rails 3.1开始默认自带jQuery，如果是Rails 3.0.*需要手动添加jQuery。
如果想用Prototype要把那些js做相应修改。

Let’s GO：
<h3>1、创建项目</h3>
<pre title="">rails new AjaxCRUD
# 创建scaffold
rails g scaffold Entry name:string address:text phone:string email:string
# 建立数据库和表
rake db:create
rake db:migrate</pre>
<h3>2、修改controller</h3>
因为创建的是基于Ajax的CRUD，所以controller返回的数据要支持‘.js’格式，可以把默认的json格式删掉，其实除了index会返回网页，其它都是返回js，所以index外的html格式返回也可以删除。
<pre title="">respond_to do |format|
format.html
format.js
end</pre>
基于个思想，修改后的controller如下：
<pre title="">class EntriesController &lt; ApplicationController
  def index
    @entries = Entry.all
    @entry = Entry.new

    respond_to do |format|
      format.html # index.html.erb
      format.js
    end
  end

  def show
    @entry = Entry.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.js
    end
  end

  def new
    @entry = Entry.new

    respond_to do |format|
      format.html # new.html.erb
      format.js
    end
  end

  def edit
    @entry = Entry.find(params[:id])

    respond_to do |format|
      format.html
      format.js
    end
  end

  def create
    @entry = Entry.new(params[:entry])

    respond_to do |format|
      if @entry.save
        format.html { redirect_to @entry, notice: 'Entry was successfully created.' }
        format.js
      else
        format.html { render action: "new" }
        format.js { render action: "new" }
      end
    end
  end

  def update
    @entry = Entry.find(params[:id])

    respond_to do |format|
      if @entry.update_attributes(params[:entry])
        format.html { redirect_to @entry, notice: 'Entry was successfully updated.' }
        format.js
      else
        format.html { render action: "edit" }
        format.js { render action: "edit" }
      end
    end
  end

  def destroy
    @entry = Entry.find(params[:id])
    @entry.destroy

    respond_to do |format|
      format.html { redirect_to entries_url }
      format.js
    end
  end
end</pre>
<h3>3、修改Views</h3>
修改index页面(app/views/entries/index.html.erb)来显示Entry表单。
<pre title=""><h1>Listing entries</h1>
<table id="entries">
<tbody>
<tr>
<th>Name</th>
<th>Phone</th>
<th>Email</th>
<th>Address</th>
<th></th>
<th></th>
<th></th>
</tr>
</tbody>
</table>
<h2>Entry form</h2>
<div id="form">"form" %></div></pre>
注意：为了后面用jQuery操作DOM，table设置id=”entries”。

修改partial（app/views/entries/_form.html.erb）,注意在form_for中添加remote以发送异步请求。
<pre title=""><%= form_for(@entry, :remote => true) do |f| %>
  <% if @entry.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@entry.errors.count, "error") %> prohibited this entry from being saved:</h2>

      <ul>
      <% @entry.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= f.label :name %><br />
    <%= f.text_field :name %>
  </div>
  <div class="field">
    <%= f.label :phone %><br />
    <%= f.text_field :phone %>
  </div>
  <div class="field">
    <%= f.label :email %><br />
    <%= f.text_field :email %>
  </div>
  <div class="field">
    <%= f.label :address %><br />
    <%= f.text_area :address, :rows => 3 %>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>
<% end %></pre>
新建Entry partial(app/views/entries/_entry.html.erb)。
为了发送AJAX请求，edit，destroy都设置remote=true。
为了区分不同的entry，调用dom_id来根据entry生成不同的id
<pre title=""><tr id="<%= dom_id entry %>">
  <td><%= entry.name %></td>
  <td><%= entry.phone %></td>
  <td><%= entry.email %></td>
  <td><%= simple_format entry.address %></td>
  <td><%= link_to 'Show', entry %></td>
  <td><%= link_to 'Edit', edit_entry_path(entry), :remote => true %></td>
  <td><%= link_to 'Destroy', entry, confirm: 'Are you sure?', method: :delete, :remote => true %></td>
</tr></pre>
<h3>4、添加js.erb来响应Ajax请求</h3>
下面是关键，首先先说下操作流程：浏览器发起Ajax请求(CRUD)–&gt;controller收到请求，并调用model更新数据–&gt;返回js代码–&gt;浏览器收到js代码，使用jQuery来更新index页面中的DOM对象，包括列表和表单。

新建 app/views/entries/create.js.erb 响应添加Entry的请求
1、在index页面的entry列表中添加刚才新增的entry对象。
2、清空index页面中添加entry表单中的数据。
<pre title="">$('<%= escape_javascript(render(:partial => @entry)) %>').appendTo('#entries').hide().fadeIn();
$("#new_entry")[0].reset();</pre>
escape_javascript(render(:partial =&gt; @entry))可以缩写成：j render @entry。

新建 app/views/entries/edit.js.erb 处理点击编辑时的请求
在index页面的新建entry的form中填充要编辑entry的数据。
<pre title="">$("#form > form").replaceWith("<%= j render "form" %>");</pre>
新建 app/views/entries/update.js.erb 来更新列表中的Entry对象。新建Entry并清空form
<pre title="">$("#<%= dom_id @entry %>").replaceWith("<%= j render @entry %>");
<% @entry = Entry.new # reset for new form %>
$(".edit_entry").replaceWith("<%= j render "form" %>")
$(".new_entry")[0].reset();</pre>
新建 app/views/entries/destroy.js.erb 来删除list中的Entry
<pre title="">$("#<%= dom_id @entry %>").remove();</pre>
<h3>5、设置主页</h3>
设置entries页面为主页。修改 config/routes.rb
<pre title="">AjaxCRUD::Application.routes.draw do
  resources :entries
  root :to => "entries#index"
end</pre>
删除静态首页文件。
<pre title="">rm public/index.html</pre>
<h3>6、启动程序</h3>
<pre title="">rails s</pre>
此时打开 http://127.0.0.1:3000
就可以使用了。
<blockquote>源代码托管在
<a title="Rails基于Ajax的CRUD源代码" href="https://github.com/camelsong/AjaxCRUD" target="_blank">https://github.com/camelsong/AjaxCRUD</a></blockquote>
英文原文地址：http://codefundas.blogspot.com/2010/12/create-ajax-based-curd-using-rails-3.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>530</wp:post_id>
		<wp:post_date>2012-06-06 22:50:27</wp:post_date>
		<wp:post_date_gmt>2012-06-06 14:50:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%88%9b%e5%bb%ba%e5%9f%ba%e4%ba%8erails-3%e7%9a%84%e7%ba%af%e5%87%80ajax-crud%e7%a8%8b%e5%ba%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[ajax]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ror"><![CDATA[ror]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Configuring Gedit for Rails</title>
		<link></link>
		<pubDate>Thu, 07 Jun 2012 02:34:19 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=534</guid>
		<description></description>
		<content:encoded><![CDATA[I haven’t kept my feelings about IDEs hidden, I’m a big believer in using text editors instead.

I know, I should earn my chops and become a Vim guy, and some day I hope to sit down and make that conversion, but for now it’s all about Gedit for me. With a few plugins and a little TLC gedit can be a lighter version of the more powerful, more intensive ide.

The first thing we’re going to install gMate, an addon designed to make Gedit run like TextMate
<blockquote>sudo add-apt-repository ppa:ubuntu-on-rails/ppa

sudo apt-get update</blockquote>
<blockquote>sudo apt-get install gedit-gmate</blockquote>
Additionally we’re going to install the standard plugins package
<blockquote>sudo apt-get install gedit-plugins</blockquote>
Now lets fire up Gedit and turn on our preferences.

To get to our plugins go to Edit &gt; Preferences &gt; Plugins.

We’re going to enable the following options:
<ul>
	<li>Snippets</li>
	<li>Code Comment</li>
	<li>Embedded Terminal</li>
	<li>Find in Files</li>
	<li>Rails Extract Partial</li>
	<li>Rails File Loader</li>
	<li>Session Saver (Optional)</li>
	<li>Smart Indent (Optional)</li>
	<li>Tab Switch (Optional)</li>
	<li>TextMate Style AutoCompletion</li>
</ul>
This is going to enable a lot of different functionality, and while this is the setup I use, it may be more than you need.

Now if you’re in a ruby file and you type def, tabbing over will add the end and place you straight on the method name, control+tab will switch between documents, and syntax highlighting will work correctly in html.erb files.

Also, going to view &gt; bottom pane will display a terminal window that I find convenient for running irb.

While these instructions will enable a lot of different useful environments, and the target of this post was rails, I do have to sadly add that Google Go, which I cover quite often, does not, to my knowledge, have a plugin for Gedit currently.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>534</wp:post_id>
		<wp:post_date>2012-06-07 10:34:19</wp:post_date>
		<wp:post_date_gmt>2012-06-07 02:34:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>configuring-gedit-for-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="configuring"><![CDATA[configuring]]></category>
		<category domain="post_tag" nicename="gedit"><![CDATA[gedit]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Logs Are Streams, Not Files</title>
		<link></link>
		<pubDate>Thu, 07 Jun 2012 13:55:36 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=538</guid>
		<description></description>
		<content:encoded><![CDATA[Server daemons (such as PostgreSQL or Nginx) and applications (such as a Rails or Django app) sometimes offer a configuration parameter for a path to the program’s logfile. This can lead us to think of logs as files.

But a better conceptual model is to treat logs as time-ordered streams: there is no beginning or end, but rather an ongoing, collated collection of events which we may wish to view in realtime as they happen (e.g. via <code>tail -f</code> or <code>heroku logs --tail</code>) or which we may wish to search in some time window (e.g. via <code>grep</code> or Splunk).
<h2>Using the power of unix for logs</h2>
Unix provides some excellent tools for handling streams. There are two default output streams, <code>stdout</code> and<code>stderr</code>, available automatically to all programs. Streams can be turned into files with a redirect operator, but they can also be channeled in more powerful ways, such as splitting the streams to multiple locations or pipelining the stream to another program for further processing.

A program that uses <code>stdout</code> for its logging can easily log to any file you wish:
<pre><code>$ mydaemon &gt;&gt; /var/log/mydaemon.log</code></pre>
(Typically you would not invoke this command directly, but would run this from an init program such as Upstart or Systemd.)

Programs that send their logs directly to a logfile lose all the power and flexibility of unix streams. What’s worse is that they end up reinventing some of these capabilities, badly. How many programs end up re-writing log rotation, for example?
<h2>Distributed logging with syslog</h2>
Logging on any reasonably large distributed system will generally end up using the syslog protocol to send logs from many components to a single location. Programs that treat logs as files are now on the wrong path: if they wisht to log to syslog, each program needs to implement syslog internally - and provide yet more logging configuration options to set the various syslog fields.

A program using <code>stdout</code> for logging can use syslog without needing to implement any syslog awareness into the program, by piping to the standard <code>logger</code> command available on all modern unixes:
<pre><code>$ mydaemon | logger</code></pre>
Perhaps we want to split the stream and log to a local file as well as syslog:
<pre><code>$ mydaemon | tee /var/log/mydaemon.log | logger</code></pre>
A program which uses <code>stdout</code> is equipped to log in a variety of ways without adding any weight to its codebase or configuration format.
<h2>Other distributed logging protocols</h2>
Syslog is an entrenched standard for distributed logging, but there are other, more modern options as well.<a href="http://www.splunk.com/">Splunk</a>, fast becoming a indispensable tool for anyone running a large software service, can accept syslog; but it also has its own custom protocol which offers additional features like authentication and encryption.<a href="https://github.com/facebook/scribe/wiki">Scribe</a> is another example of a modern logging protocol.

Programs that log to <code>stdout</code> can be adapted to work with a new protocol without needing to modify the program. Simply pipe the program’s output to a receiving daemon just as you would with the <code>logger</code> program for syslog. Treating your logs as streams is a form of <a href="http://en.wikipedia.org/wiki/Future_proof">future-proofing</a> for your application.
<h2>Logging in the Ruby world</h2>
Most Rack frameworks (Sinatra, Ramaze, etc) and Rack webservers (Mongrel, Thin, etc) do the right thing: they log to <code>stdout</code>. If you run them in the foreground, as is typical of development mode, you see the output right in your terminal. This is exactly what you want. If you run in production mode, you can redirect the output to a file, to syslog, to both, or to any other logging system that can accept an input stream.

Unfortunately, Rails stands out as a major exception to this simple principle. It creates its own log directory and writes various files into it; some plugins even take it upon themselves to write their own, separate logfiles. This hurts the local development experience: what you see in your terminal isn’t complete, so you have to open a separate window with <code>tail -f log/*.log</code> to get the information you want. But it hurts the deployment experience even more, because you end up having to tinker around with a bunch of Rails logger configuration options to get your logs from all your web machines to merge into a single stream.
<h2>Logging on Heroku</h2>
The need to treat application logs as a stream is especially poignant with <a href="http://blog.heroku.com/archives/2010/12/13/logging/">Heroku's new logging system</a>. On the backend, we route logs with a syslog router written in Erlang called <a href="https://github.com/heroku/logplex">Logplex</a>.

Logplex handles input streams (which we call “sinks”) from many different sources: all the dynos running on the app, system components like our HTTP router, and (currently in alpha) logs from add-on providers. Sinks are merged together into channels (each app has its own channel) which is a unified stream of all logs relevant to the app. This allows developers to see a holistic view of everything happening with their app, or to filter down to logs from a particular type of sink (for example: just logs from the HTTP router, or just logs from worker processes).

Further, log streams can also be sent outbound, which we call “drains.” Users can configure syslog drains, and we’re currently working up a technical design for how add-on providers can automatically add drains. This latter item will enable a new class of log search and archival add-on, most notably the emerging syslog-as-a-service products like <a href="http://www.loggly.com/">Loggly</a> and <a href="https://papertrailapp.com/">Papertrail</a>.

This logging system works quite well, and it gets even better with the new features on the way - but it only works where all programs output their logs as streams. Programs that write logfiles, such as Rails in its default configuration, don’t make sense in this world.

As a workaround, Heroku injects the <a href="https://github.com/ddollar/rails_log_stdout/blob/master/init.rb">rails_log_stdout</a> plugin into Rails apps at deploy time. We’d prefer not to have to do this (injecting code is a dicey way to solve problems), but it’s the best way to get Rails logs into the app’s logstream without requiring extra configuration from the app developer.
<h2>Conclusion</h2>
Logs are a stream, and it behooves everyone to treat them as such. Your programs should log to <code>stdout</code>and/or <code>stderr</code> and omit any attempt to handle log paths, log rotation, or sending logs over the syslog protocol. Directing where the program’s log stream goes can be left up to the runtime container: a local terminal or IDE (in development environments), an Upstart / Systemd launch script (in traditional hosting environments), or a system like Logplex/Heroku (in a platform environment).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>538</wp:post_id>
		<wp:post_date>2012-06-07 21:55:36</wp:post_date>
		<wp:post_date_gmt>2012-06-07 13:55:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>logs-are-streams-not-files</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="daemons"><![CDATA[daemons]]></category>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="logs"><![CDATA[logs]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="server"><![CDATA[server]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>解决Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8_general_ci,COER</title>
		<link></link>
		<pubDate>Wed, 13 Jun 2012 02:56:27 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=540</guid>
		<description></description>
		<content:encoded><![CDATA[部署完项目，测试一下，诶，数据出来了 没有多大问题（暗舒一口气）。继续测吧，一点新建完了，报错了，看看什么错误

一看完了 java.sql.SQLException: Illegal mix of collations (latin1_swedish_ci,IMPLICIT)

and (utf8_general_ci,COERCIBLE) for operation '=' 是这个错误 ，什么原因呢，第一次遇到。

头大了。去查文档说是：结果集中有两种字符集。 我晕了 ，怎么会这样呢，看看表结构，一种啊。 继续查吧。
<table width="620" border="0" cellspacing="1" cellpadding="1" align="center">
<tbody>
<tr>
<td bgcolor="#FFE7CE" width="464" height="27"> 代码如下</td>
<td align="center" bgcolor="#FFE7CE" width="109">复制代码</td>
</tr>
<tr>
<td id="copy7096" colspan="2" valign="top" bgcolor="#FFFFFF" height="auto">SHOW VARIABLES LIKE 'character_set_%'; 查看一下 显示+--------------------------+----------------------------+

| Variable_name | Value |

+--------------------------+----------------------------+

| character_set_client | utf8|

| character_set_connection | utf8|

| character_set_database | latin1 |

| character_set_results | utf8|

| character_set_server | latin1 |

| character_set_system | utf8 |

| character_sets_dir | /home/jh/<a href="http://www.111cn.net/list-110/" target="_blank">mysql</a>/share/mysql/charsets |</td>
</tr>
</tbody>
</table>
+--------------------------+----------------------------+

再用 SHOW VARIABLES LIKE 'collation_%'; 查看一下 显示
<table width="620" border="0" cellspacing="1" cellpadding="1" align="center">
<tbody>
<tr>
<td bgcolor="#FFE7CE" width="464" height="27"> 代码如下</td>
<td align="center" bgcolor="#FFE7CE" width="109">复制代码</td>
</tr>
<tr>
<td id="copy1112" colspan="2" valign="top" bgcolor="#FFFFFF" height="auto">+----------------------+-------------------+| Variable_name | Value |

+----------------------+-------------------+

| collation_connection | utf8_swedish_ci |

| collation_database | latin1_swedish_ci |

| collation_server | latin1_swedish_ci |

+----------------------+-------------------+</td>
</tr>
</tbody>
</table>
原来如此啊 哈哈 知道错在哪里 剩下的就好办了

<strong>解决方法：</strong>

依次执行：
<table width="620" border="0" cellspacing="1" cellpadding="1" align="center">
<tbody>
<tr>
<td bgcolor="#FFE7CE" width="464" height="27"> 代码如下</td>
<td align="center" bgcolor="#FFE7CE" width="109">复制代码</td>
</tr>
<tr>
<td id="copy2457" colspan="2" valign="top" bgcolor="#FFFFFF" height="auto">set character_set_database =utf8;

&nbsp;

set character_set_results =utf8;

&nbsp;

set character_set_server =utf8;

&nbsp;

set character_set_system =utf8; --此处utf-8也可以

&nbsp;

然后执行：

&nbsp;

SET collation_server = utf8_general_ci

&nbsp;

&nbsp;

SET collation_database = utf8_general_ci</td>
</tr>
</tbody>
</table>
执行完之后，请检查mysql下每个<a href="http://www.111cn.net/database/database.html" target="_blank">数据库</a>，表，字段是否都是utf8，不是则改过来，这样子就不会出现

&nbsp;

最笨的方法是重装一下数据库。（一般不要用这种方法呀）

最终解决方法：

1.1 如果是windows版本的mysql，那么在安装的时候，系统就会提示用哪种编码。

如果安装的时候设置错误了，修改mysql安装目录下的my.ini文件：
<table width="620" border="0" cellspacing="1" cellpadding="1" align="center">
<tbody>
<tr>
<td bgcolor="#FFE7CE" width="464" height="27"> 代码如下</td>
<td align="center" bgcolor="#FFE7CE" width="109">复制代码</td>
</tr>
<tr>
<td id="copy1531" colspan="2" valign="top" bgcolor="#FFFFFF" height="auto">[mysql]default-character-set=utf8

...

# The default character set that will be used when a new schema or table is

# created and no character set is defined

default-character-set=utf8</td>
</tr>
</tbody>
</table>
配置好后，重启mysql。

1.2 如果是linux版本的mysql

&nbsp;

修改mysql的配置文件,使数据库与服务器操作系统的字符集设置一致。

vi /etc/my.cnf 设置(如果没有发现这个文件，就新建1个)
<table width="620" border="0" cellspacing="1" cellpadding="1" align="center">
<tbody>
<tr>
<td bgcolor="#FFE7CE" width="464" height="27"> 代码如下</td>
<td align="center" bgcolor="#FFE7CE" width="109">复制代码</td>
</tr>
<tr>
<td id="copy7728" colspan="2" valign="top" bgcolor="#FFFFFF" height="auto">[mysqld]datadir=/var/lib/mysql

socket=/var/lib/mysql/mysql.sock

default-character-set=utf8</td>
</tr>
</tbody>
</table>
(增加的关键一句,使得数据库缺省以utf8存储)

当然，修改后，要重启数据库。（这样设置后对新建的数据库表才起作用）

&nbsp;
<table width="620" border="0" cellspacing="1" cellpadding="1" align="center">
<tbody>
<tr>
<td bgcolor="#FFE7CE" width="464" height="27"> 代码如下</td>
<td align="center" bgcolor="#FFE7CE" width="109">复制代码</td>
</tr>
<tr>
<td id="copy8374" colspan="2" valign="top" bgcolor="#FFFFFF" height="auto">用SHOW VARIABLES LIKE 'character_set_%';命令查看到如下内容：+--------------------------+-----------------------------------------------------------------------+

| Variable_name | Value |

+--------------------------+-----------------------------------------------------------------------+

| character_set_client | utf8|

| character_set_connection | utf8|

| |character_set_database |utf8 |

| character_set_filesystem | binary |

| character_set_results | utf8|

| character_set_server | utf8 |

| character_set_system | utf8 |

| character_sets_dir | /home/jh/mysql/share/mysql/charsets |

+--------------------------+-----------------------------------------------------------------------+</td>
</tr>
</tbody>
</table>
发现关键项目已经用了utf8，但这样还不够，还要保证客户端也是用utf8的字符集来操作的。

登录的时候，要用以下命令：mysql --default-character-set=utf8 -u root -p

再次用SHOW VARIABLES LIKE 'character_set_%';命令查看，结果变成了：
<table width="620" border="0" cellspacing="1" cellpadding="1" align="center">
<tbody>
<tr>
<td bgcolor="#FFE7CE" width="464" height="27"> 代码如下</td>
<td align="center" bgcolor="#FFE7CE" width="109">复制代码</td>
</tr>
<tr>
<td id="copy4025" colspan="2" valign="top" bgcolor="#FFFFFF" height="auto">+--------------------------+-----------------------------------------------------------------------+| Variable_name | Value |

+--------------------------+-----------------------------------------------------------------------+

| character_set_client | utf8 |

| character_set_connection | utf8 |

| character_set_database | utf8 |

| character_set_filesystem | binary |

| character_set_results | utf8 |

| character_set_server | utf8 |

| character_set_system | utf8 |

| character_sets_dir | /home/jh/mysql/share/mysql/charsets/ |</td>
</tr>
</tbody>
</table>
+--------------------------+-----------------------------------------------------------------------+

这样才能保证客户端所发命令都是基于utf8格式的，比如说建立数据库和表，默认就会以utf8编码，而无须再次指定。（再次说一句对新建的数据库和表起作用）。

另外：

第三种方法：网上看到的，先记录一下。

1.如果安装mysql的编码已不能更改,很多朋友是购买虚拟主机建立网站,无权更改MYSQL的安装编码,这一关我们可以跳过,因为只要后面的步聚正确,一样能解决乱码问题
2.修改数据库编码，如果是数据库编码不正确: 可以在<a href="http://www.111cn.net/phper/php.html" target="_blank">php</a>myadmin 执行如下命令: ALTER DATABASE `test` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin
以上命令就是将test数据库的编码设为utf8
3.修改表的编码：
<table width="620" border="0" cellspacing="1" cellpadding="1" align="center">
<tbody>
<tr>
<td bgcolor="#FFE7CE" width="464" height="27"> 代码如下</td>
<td align="center" bgcolor="#FFE7CE" width="109">复制代码</td>
</tr>
<tr>
<td id="copy1726" colspan="2" valign="top" bgcolor="#FFFFFF" height="auto">ALTER TABLE `category` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin</td>
</tr>
</tbody>
</table>
以上命令就是将一个表category的编码改为utf8
4.修改字段的编码：
<table width="620" border="0" cellspacing="1" cellpadding="1" align="center">
<tbody>
<tr>
<td bgcolor="#FFE7CE" width="464" height="27"> 代码如下</td>
<td align="center" bgcolor="#FFE7CE" width="109">复制代码</td>
</tr>
<tr>
<td id="copy2640" colspan="2" valign="top" bgcolor="#FFFFFF" height="auto">
<pre>mysql&gt; use askjane_development;
Database changed
mysql&gt; alter database mydb character set utf8;
ERROR 1 (HY000): Can't create/write to file './mydb/db.opt' (Errcode: 2)
mysql&gt; ALTER TABLE tags CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;Query OK, 2 rows affected (0.35 sec)</pre>
</td>
</tr>
</tbody>
</table>
以上命令就是将test表中 dd的字段编码改为utf8
5.如果是这种情况容易解决，只需检查下页面，修改源文件的charset即可
, //这个正确就无问题了
6.这种情况也是修改页面charset即可.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>540</wp:post_id>
		<wp:post_date>2012-06-13 10:56:27</wp:post_date>
		<wp:post_date_gmt>2012-06-13 02:56:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%a7%a3%e5%86%b3illegal-mix-of-collations-latin1_swedish_ciimplicit-and-utf8_general_cicoer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="encode"><![CDATA[encode]]></category>
		<category domain="post_tag" nicename="errors"><![CDATA[errors]]></category>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using Resque to send mail for Devise</title>
		<link></link>
		<pubDate>Fri, 15 Jun 2012 07:03:22 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=544</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div id="wiki-body">
<div>

Since sending email synchronously is not a good idea, you'll probably want to have Devise enqueuing it's notification emails for background processing.

Although Devise doesn't support this out of the box you can achieve it easily by using the <a href="https://github.com/mhfs/devise-async">devise-async</a> gem.

To do so, first add it to your Gemfile:
<div>
<pre>gem "devise-async"</pre>
</div>
Then tell Devise to use the proxy mailer in <code>config/initializers/devise.rb</code>:
<div>
<pre># Configure the class responsible to send e-mails.
config.mailer = "Devise::Async::Proxy"</pre>
</div>
And last but not least, set your queuing backend by creating <code>config/initializers/devise_async.rb</code>:
<div>
<pre># Supported options: :resque, :sidekiq, :delayed_job
Devise::Async.backend = :resque</pre>
</div>
Your notification emails should now be gracefully enqueued for background processing.

</div>
</div>
</div>
<h2 id="gollum-footer">## Notice I have jobs in queue but no workers. Do I have to create task, or workers?</h2>
&nbsp;

<code>#!/usr/bin/env rake
# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.</code>

require File.expand_path('../config/application', __FILE__)
require 'resque/tasks'

Askjane::Application.load_tasks

task "resque:setup" =&gt; :environment do
ENV['QUEUE'] ||= '*'
#for redistogo on heroku http://stackoverflow.com/questions/2611747/rails-resque-workers-fail-with-pgerror-server-closed-the-connection-unexpectedl
Resque.before_fork = Proc.new { ActiveRecord::Base.establish_connection }
end
####run below command
#QUEUE=* rake environment resque:work]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>544</wp:post_id>
		<wp:post_date>2012-06-15 15:03:22</wp:post_date>
		<wp:post_date_gmt>2012-06-15 07:03:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-resque-to-send-mail-for-devise</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="devise"><![CDATA[devise]]></category>
		<category domain="post_tag" nicename="mail"><![CDATA[mail]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="resque"><![CDATA[resque]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>15 Things for a Ruby Beginner</title>
		<link></link>
		<pubDate>Sat, 16 Jun 2012 14:47:32 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=555</guid>
		<description></description>
		<content:encoded><![CDATA[<em>The following is a post I had recently sent the <a href="https://groups.google.com/group/bangalorerug">Bangalore Ruby User Group</a>. It has been slightly modified to address a larger audience.</em>

There were many Ruby beginners in last week's meetup, and the common question we heard was 'after the very basics, what next?'

The best way to learn Ruby best practices is to pair with an experienced dev; the way I learned was by inheriting a reasonably small, but well-written codebase from an amazing colleague. In the absence of either, here is a checklist of 15 things (since 'N things that you need to know about X' is the in-thing these days!) that I'd recommend a Ruby beginner to consider:
<h3>1. The very basics</h3>
Our very own <a href="http://rubymonk.com/" target="_blank">rubymonk.com</a> has a Ruby primer which was written for exactly this purpose; we open our inbox everyday to gushing feedback from people who've found it to be a great way to learn Ruby. Try it and let us know how it goes!

<a href="http://tryruby.org/" target="_blank">tryruby.org</a> also has a basic introduction to Ruby, and has been around longer. <a href="http://rubykoans.com/" target="_blank">Edgecase's Ruby Koan</a> is an interesting concept, and covers the language both in breadth and depth, and is a very strong recommendation. It should take you anywhere between 5-10 hours to finish all of the Koans. Do try it!

&nbsp;

I have heard good things about <a href="http://ruby.learncodethehardway.org/" target="_blank">Learn Ruby the Hardway</a>, but haven't tried it out myself. Okay, I just skimmed through portions of it and I'm not really happy - LRTH seems to be mostly a line-to-line translation of Python code to Ruby. It uses  'while' loop in places where equivalent Ruby idioms (Enumerables) would have made more sense. Also there is no mention of blocks, metaprogramming and duck-typing, which pretty much is a deal-breaker for me. But to be fair, the target audience for LRTH seem to be non-programmers for whom the concept of loops and objects would be new, and for them it does the job very well.

Wait, have you read Why's Poignant Guide to Ruby? If this is the first time you're hearing about why the lucky stiff, read <a href="http://www.smashingmagazine.com/2010/05/15/why-a-tale-of-a-post-modern-genius/" target="_blank">this amazing piece on _why by the Smashing Magazine</a>. And definitely read The Poignant Guide: <a href="http://mislav.uniqpath.com/poignant-guide/" target="_blank">http://mislav.uniqpath.com/<wbr>poignant-guide/</wbr></a>. It is full of cats, foxes, chunky bacon, cartoons that doesn't always make much sense, space travel and what not. This was one of my first introductions to the Ruby community, and the guide lent the language and the community a fun, quirky and happy aura. You may or may not take away much Ruby knowledge from the guide - I couldn't when I read it for the first time. However you'll definitely understand some of the quirkiness and philosophies that influence the Ruby community. I'm a huge fan of _why, and here is my favourite quote:

&nbsp;
<blockquote>when you don't create things, you become defined by your tastes rather than ability. your tastes only narrow &amp; exclude people. so create.</blockquote>
&nbsp;
<h3>2. The ecosystem - RVM/rbenv, RubyGems, Bundler, Git and Github</h3>
I think all of these tools are mandatory for being a productive Ruby programmer. You'll encounter them soon enough:

- RVM/rbenv: these are tools used to manage multiple Ruby versions on the same machine. I've been using RVM without complaint for quite a while, though there are people who will go up in arms against RVM for various reasons. As a beginner, you should be comfortable with either.

- RubyGems: a gem for anything, a gem for everything. If you are using RVM, it will install RubyGems by default for you. <a href="http://docs.rubygems.org/read/chapter/4" target="_blank">http://docs.rubygems.org/read/chapter/4</a>

- Bundler: You'll learn it easy enough if you are using Rails. But even for non-Rails projects, Bundler is now the de-facto tool to handle gems and dependencies. It is one of those tools that when you see for the first time you would wonder how you ever lived without it.

- Git: You are a git if you don't use git yet. If you are not even using any version control at all, good for you - there aren't bad practices that you need to unlearn. If you are on SVN, or God forbid CVS, jump now.<a href="http://git-scm.com/book/en/Getting-Started-About-Version-Control" target="_blank">http://git-scm.com/book/en/<wbr>Getting-Started-About-Version-<wbr>Control</wbr></wbr></a>

- Github: You have a Github handle, right? 'nuff said.
<h3>3. Editor</h3>
I don't care. Pick one, use it well. If you're on Vim and is on Insert mode all the time, then use Notepad instead. It would be more productive. Learn your editor.

Here is a list of editors/IDEs people generally use for Ruby development:

- Sublime Text
- Textmate
- RubyMine (My favourite, but needs a lot of memory and CPU)
- Vim
- emacs
- Aptana RadRails (recently saw a couple of people using it. don't know how good it is)
- Redcar (I've used it very occassionaly, am yet to see someone using it as a primary editor)

If you are using Sublime Text, install and use its corresponding Ruby package. Ditto for Textmate.

If you are on Vim, using the right set of plugins is a requisite to be productive. There is the popular<a href="https://github.com/carlhuda/janus" target="_blank">https://github.com/carlhuda/janus</a> and Srushti's <a href="https://github.com/srushti/vim-get" target="_blank">https://github.com/srushti/vim-get</a> which I use when I work with Vim. Even if you don't go for these plugin distributions, spend enough time to find the right plugins for Ruby development.

I don't know about the best plugins for emacs, but there are people who use emacs to develop in Ruby. Even Matz uses emacs; search and you shall find.
<h3>4. Ditch 'while', 'for' and array accumulation</h3>
Read this: <a href="http://martinfowler.com/bliki/CollectionClosureMethod.html" target="_blank">http://martinfowler.com/bliki/<wbr>CollectionClosureMethod.html</wbr></a>

An apparent sign of a programmer who does not Ruby well is code that uses 'for' and 'while' loops for iteration and accumulation. I'm hardpressed to remember occasions where I had to use them instead of the Enumerable methods #<em>each, #map, #select, #inject, #reject </em>and #<em>detect.</em> Learn these methods, chew on them, and use it everywhere!

(infinite loops are almost always written using the loop do..end construct though. but how often do you write infinite loops anyway?)
<h3>5. Hash</h3>
At the time when I started writing Ruby, the languages that I had written in for a reasonable period of time before were CA-Clipper, Borland Turbo C and some VB 6.

The first two did not have a hash, associative array or dictionary - whichever you prefer to call it.<strong> </strong>As to VB6, the only thing I can remember is DataGrid and ADODB. Ah, the failed promises of drag and drop programming!

So Hash was a revelation and I started using it anywhere and everywhere. Do you want to build a CRUD app to manage customer info? Forget databases, I'll build a Hash and serialize to and deserialize from a YAML file. There were even more crimes committed using Hash that I dare not mention here. You would have gone through enough exercises that uses Hash when working through RubyMonk or Ruby Koans. But if you haven't, make sure you understand Hashes well enough. Specifically:

- iterating over a hash
- assigning default values for undefined keys in a hash
- Hash#keys and Hash#values for extracting just the keys and values
- In Ruby 1.8 Hashes are un-ordered: ie, you can't rely on the ordering of the hash to be same as the order in which you added elements. In Ruby 1.9, a Hash is sorted on the basis of order of insertion.
<h3>6. JSON and YAML</h3>
These are not Ruby specific concepts, but find great use in the ecosystem. Know them well, they'll come in handy.
<h3>7. Understand Immutability and how Ruby passes object references around</h3>
This has slightly got to do with the above point - all the Enumerable methods are immutable, and it is a good introduction to how functional Ruby veer towards immutability.  Immutability is more of a good programming practice than a Ruby specific idea - it helps you write clean predictable code, leave aside concurrent programming and race conditions. A method that mutates its parameter is a vile creature, don't bring it forth into existence.

If you come from a C programming background, building new objects willy-nilly would be a little hard to digest. So much memory put to waste! I remember reading somewhere that programmers who use high level languages leave a higher carbon footprint because their code is inefficient. I leave you to ponder over it.

For understanding some quirks around Ruby's immutability and interesting effects of how Ruby passes object references around, figure out where Array#clone is used. I remember wasting many a debugger breakpoint during my early days of Ruby because I didn't realize this. Don't let that happen to you! Understand the difference between a shallow clone and a deep clone. Even better, go write your own deep_clone routine! (limit yourselves to objects that can have strings, numbers, arrays and hashes)

Also read: <a href="http://ruby-doc.org/docs/Newcomers/ruby.html#objects" target="_blank">http://ruby-doc.org/docs/Newcomers/ruby.html#objects</a>
<h3>8. Ruby's Object Hierarchy</h3>
&nbsp;
<div>
<pre># All objects are instances of the class Object. 
"a string".is_a? BasicObject         # true

# All classes are instances of the class Class.
String.is_a? Class                   # true

# Class is a subclass of BasicObject.
Class.is_a? BasicObject              # true

# Class is not an instance of BasicObject
Class.instance_of? BasicObject       # false

# BasicObject is an instance and a sub-class of Class
BasicObject.is_a? Class              # true
BasicObject.instance_of? Class       # true</pre>
</div>
&nbsp;

Okay, I lost it. It is pretty crazy: <a href="http://stackoverflow.com/questions/4967556/ruby-craziness-class-vs-object" target="_blank">http://stackoverflow.com/questions/4967556/ruby-craziness-class-vs-object</a>. As a beginner, you wouldn't need to understand the nitty-gritties. I've been programming in Ruby for about three years now, and it still confuses the heck out of me.

For now it is safe to understand that BasicObject is usually the root object of all objects in Ruby. And everything in Ruby is an object. This has a very useful side-effect (try this in IRB):
<div>
<pre>"some random string".methods - Object.methods</pre>
</div>
Also,
<div>
<pre>Array.new.methods - Object.methods</pre>
</div>
&nbsp;

The above commands will show you methods that are specific to just strings and arrays, excluding all methods that are always present in any Ruby object (inherited from Object -like instance_of, is_a? etc.).

<strong>Tip:</strong>You might have noticed that the '-' operator gives you the difference between two arrays. Whenever you need a general purpose method and wonder whether Ruby comes with it, just try some plausible syntax in IRB. You might be surprised at what you find.

Even though Ruby lets you Object Oriented and procedural code, the language leans toward OO. Ruby treats even methods as objects:
<div>
<pre>"some string".method(:length) # gives you an object of the Method class.</pre>
</div>
The method object can be asked to run by invoking the 'call' method on it.

&nbsp;
<h3>9. Creating your own Objects</h3>
Did you notice that the title wasn't 'Creating Classes'. That was one of the most useful advices I've ever received: Always think in terms of objects - not classes. Thinking in terms of Classes can subtly make you evolve your design upfront. Don't. Let your objects guide you in how your class definition should look. As a rough analogy, when building a home, the blueprint is valuable only as a reference for building the actual home. You imagine what your home should look like and draw a blueprint accordingly, not the other way round.

Start with sparse classes, add methods and attributes as your objects demand it. Srushti puts it better: Imagine you're an instance, and think about what you want to do and how you want to do it. You don't want to give up your secrets (encapsulation). You don't ask other people for information so you can do their work for them, you just tell them to do stuff for you (tell, don't ask)

Ruby has a very simple syntax for defining classes and building objects. If you come from a Java/C# background, it'd be the first thing you look for. But even if you are a die-hard procedural ninja, trust me, thinking in terms of objects will help you write better programs, tackle complexity and be a more capable programmer.

So, what are the things that are specific to Ruby that you need to be aware of?

&nbsp;

- Message Passing. "abcd".length is in fact "abcd".send(:length).
- Module vs Classes (hint: they're very similar, but you can't instantiate a Module)
- Mixins (Ruby's answer to multiple inheritance and the greatest thing _before_ sliced bread)
- attr_reader, attr_writer, attr_accessor.
- instance methods and class methods
- instance variables and class variables.

And we all know that you don't use class variables unless you have a very good reason. Class methods aren't that bad, but are usually a smell. Whenever you find yourselves writing a class method, take a step back and make sure it can't be rephrased as an instance method, perhaps in a child object?

There is a lot more to OO, some less specific to Ruby. As you go deep into the rabbit hole, ponder over these blanket statements:

- Primitives (Hash, Array etc.) are evil! Build objects.
- Inheritance is evil! Use Composition.
- Conditions (if..else, switch..case) are evil! Use Polymorphism.
<h3>10. Ruby is interpreted. It is malleable. Use that to your advantage.</h3>
Interpreted programs are almost always slower than native code (which includes JIT). By choosing to use such a language, you are accepting a compromise in the speed/efficiency of your programs. But this gives you a great advantage: the flexibility to change your code at runtime. Though we can't claim 'code is data, data is code' like those hipster LISPers do, there is tremendous power in the dynamism (no reference to type systems) of Ruby. Learn it, use it, change the world!

I had briefly mentioned the 'send' method that is available for every object in Ruby:
<div>
<pre>   "abcd".send(:length)</pre>
</div>
is same as
<div>
<pre>   "abcd".length</pre>
</div>
That means you can do things like this:

&nbsp;
<div>
<pre>puts "Hi, which method do you like to invoke on a string today?"
method_name = gets.strip
puts "a random string".send(method_name)</pre>
</div>
&nbsp;

Did you see that? Unlike fully compiled languages like C/C++, Ruby lets you call arbitrary methods during runtime! (you can pass arguments to the method as parameters to the 'send' method)

Leave aside calling arbitrary methods, running arbitrary code during runtime is a breeze:
<div>
<pre>puts "What code do you want to run today, dear sir?"
arbitrary_code = STDIN.read         # press ctrl+d to stop input
eval(arbitrary_code)</pre>
</div>
Try it, type in some short valid Ruby code and see it in action.

&nbsp;

Now that you know 'eval' exists, forget about it. It is too dangerous to be almost ever used. It is unsafe and unscoped, but there are better things to achieve similar and useful results. The point of this exercise though was to see Ruby's dynamic nature in action. Since Ruby is interpreted, there is no limitation on what can be done during runtime. This can be used to great good as we will see in Metaprogramming.
<h3>11. Metaprogramming</h3>
Metaprogramming in Ruby more or less gives you ways to create/remove/redefine methods at runtime. If you have used Rails, you would have seen that you would write something like
<div>
<pre>class User &lt; ActiveRecord::Base
end</pre>
</div>
and magically, the User class gives you methods like user.name, user.find_by_name, user.find_by_name_and_id. Depending on the fields in the database, Rails defines methods for you to use. This uses Metaprogramming where Rails defines the methods at runtime after consulting the table schema.

(talking about 'magic', usually when someone complain about 'magic' in Ruby code, she is most probably referring to some sort of metaprogramming in the code)

Metaprogramming is one of Ruby's most powerful concepts (anything borrowed from FP is yummy!), but it is open to use and abuse. They say that someone who knows metaprogramming well enough, but not enough to know where not to use it, is a danger to himself and society. The internet is rife with discussions around it and you'll find no shortage of flame wars, opinions and thankfully, documentation.

These are the methods you would want to look up to get a decent overview of metaprogramming in Ruby:

- define_method
- method_missing
- instance_eval
- class_eval

I would also recommend Yehuda Katz's excellent explanation of Metaprogramming by relating it to the context of 'self': <a href="http://yehudakatz.com/2009/11/15/metaprogramming-in-ruby-its-all-about-the-self/" target="_blank">http://yehudakatz.com/2009/11/<wbr>15/metaprogramming-in-ruby-its-all-about-the-self/</wbr></a>

Metaprogramming is a bit advanced, and if you don't understand all or any of it the first time, don't worry. Come back and take a look again later. Rinse and repeat. It is an acquired taste, give it time!
<h3>12. Closures (Blocks, Lambdas et al.)</h3>
Blocks are my favourite. They move mountains. Rather, they let you write beautiful DSLs when coupled with the right dose of metaprogramming. Have you seen factory_girl's syntax? It is an unholy mix of method_missing and 'yield'.
<pre><span>Factory :user, aliases: [:author, :commenter] do first_name "John" last_name "Doe" date_of_birth { 18.years.ago } end</span></pre>
It is not really hard to build a DSL that reads like this, and there is no better resource to learn all of this than <a href="http://rubysource.com/functional-programming-techniques-with-ruby-part-ii/" target="_blank">http://rubysource.com/<wbr>functional-programming-<wbr>techniques-with-ruby-part-ii/</wbr></wbr></a>. The first part of that series looks into the functional and immutable aspects of Ruby, and is also a recommended read:<a href="http://rubysource.com/functional-programming-techniques-with-ruby-part-i/" target="_blank">http://rubysource.com/<wbr>functional-programming-<wbr>techniques-with-ruby-part-i/</wbr></wbr></a>
<h3>13. Styleguides</h3>
Whenever you are in doubt, or the self becomes too much with you, go read the Ruby style guides.

Github's simpler style guide: <a href="https://github.com/styleguide/ruby" target="_blank">https://github.com/styleguide/<wbr>ruby</wbr></a>

The comprehensive one: <a href="https://github.com/bbatsov/ruby-style-guide" target="_blank">https://github.com/bbatsov/<wbr>ruby-style-guide</wbr></a>
<h3>14. Simplicity is virtue</h3>
Knowing what constructs to use where is a matter of knowledge and experience. Every approach has trade-offs in terms of readability, maintainability and efficiency. The battle between these have been the recurring theme in the battles programmers fight in their heads for years. Knowing the the trade-offs will help you make more informed decisions, but it might not always be enough. Some things need to be tried, tested and failed, and that is fine.

But be vary of <a href="http://c2.com/cgi/wiki?PrematureOptimization" target="_blank">Premature Optimization</a>. When you have a choice between clever, short and maybe faster code Vs longer but readable code, go for readability.  Ruby makes it easy to write really bad code that people would fear to touch with a long pole. It also lets you write  beautiful and concise code. When you contemplate between the two, remember the joke about the psychopath who'll inherit your codebase, knows where you live, and pings you from your local network! The choice is yours.
<h3>15. None of this matters</h3>
If you are overwhelmed by this document or any links referenced from here, just ignore it. Remember the<a href="http://norvig.com/21-days.html" target="_blank">10,000 hours rule</a>. Happily go about writing code the way you know best! And write a bit more code. Try to pair with someone who knows things a bit more. Go read some well-written Ruby code from Github. Then come back and see what you've learned.

None of this is rocket science, but it takes time and practice for concepts to sink in, and that is just fine.

<hr />

Have further questions? There are tons of resource on the internet to answer your questions!

Join one of your local Ruby Usergroups. The Ruby community is extremely helpful and accomodating towards newbies. Check this page to locate a usergroup near you: <a href="http://www.rubyinside.com/how-to-find-ruby-user-groups-3067.html">How To Find Ruby User Groups</a>

Participate in the usergroups, ask your questions. Also hop on to Ruby's IRC channel <a href="http://irc.lc/freenode/ruby-lang">#ruby-lang on Freenode</a>. Irrespective of the forum, just make sure that you give enough context about your question to help others understand your problem. If you haven't read ESR's "<a href="http://www.catb.org/~esr/faqs/smart-questions.html" target="_blank">Ask questions the smart way</a>" yet, *this* is the time. Go read it now and get enlightened on the ways of the interwebs!

And remember to have fun! In Matz's own words:
<blockquote> "For me the purpose of life is partly to have joy. Programmers often feel joy when they can concentrate on the creative side of programming, So Ruby is designed to make programmers happy."</blockquote>
Happy hacking!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>555</wp:post_id>
		<wp:post_date>2012-06-16 22:47:32</wp:post_date>
		<wp:post_date_gmt>2012-06-16 14:47:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>15-things-for-a-ruby-beginner</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="thing"><![CDATA[thing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Single table inheritance (单表继承)</title>
		<link></link>
		<pubDate>Mon, 18 Jun 2012 07:40:06 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=557</guid>
		<description></description>
		<content:encoded><![CDATA[Active Record allows inheritance by storing the name of the class in a column that by default is named “type” (can be changed by overwriting <code>Base.inheritance_column</code>). This means that an inheritance looking like this:
<pre data-result="[object Object]">class Company &lt; ActiveRecord::Base; end
class Firm &lt; Company; end
class Client &lt; Company; end
class PriorityClient &lt; Client; end</pre>
When you do <code>Firm.create(:name =&gt; "37signals")</code>, this record will be saved in the companies table with type = “Firm”. You can then fetch this row again using <code>Company.where(:name =&gt; '37signals').first</code> and it will return a Firm object.

If you don’t have a type column defined in your table, single-table inheritance won’t be triggered. In that case, it’ll work just like normal subclasses with no special magic for differentiating between them or reloading the right type with find.

Note, all the attributes for all the cases are kept in the same table. Read more: <a href="http://www.martinfowler.com/eaaCatalog/singleTableInheritance.html">www.martinfowler.com/eaaCatalog/singleTableInheritance.html</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>557</wp:post_id>
		<wp:post_date>2012-06-18 15:40:06</wp:post_date>
		<wp:post_date_gmt>2012-06-18 07:40:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>single-table-inheritance-%e5%8d%95%e8%a1%a8%e7%bb%a7%e6%89%bf</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="inheritance"><![CDATA[inheritance]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="single"><![CDATA[single]]></category>
		<category domain="post_tag" nicename="table"><![CDATA[table]]></category>
		<category domain="post_tag" nicename="%e5%8d%95%e8%a1%a8%e7%bb%a7%e6%89%bf"><![CDATA[单表继承]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ActionDispatch::RequestId &lt; Object</title>
		<link></link>
		<pubDate>Tue, 03 Jul 2012 05:15:11 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=560</guid>
		<description></description>
		<content:encoded><![CDATA[Makes a unique request id available to the action_dispatch.request_id env variable (which is then accessible through <a href="http://api.rubyonrails.org/classes/ActionDispatch/Request.html#method-i-uuid">ActionDispatch::Request#uuid</a>) and sends the same id to the client via the X-Request-Id header.

The unique request id is either based off the X-Request-Id header in the request, which would typically be generated by a firewall, load balancer, or the web server, or, if this header is not available, a random uuid. If the header is accepted from the outside world, we sanitize it to a max of 255 chars and alphanumeric and dashes only.

The unique request id can be used to trace a request end-to-end and would typically end up being part of log files from multiple pieces of the stack.

<a href="http://api.rubyonrails.org/classes/ActionDispatch/RequestId.html">http://api.rubyonrails.org/classes/ActionDispatch/RequestId.html</a>

<a href="http://stackoverflow.com/search?q=rails+RequestId">http://stackoverflow.com/search?q=rails+RequestId</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>560</wp:post_id>
		<wp:post_date>2012-07-03 13:15:11</wp:post_date>
		<wp:post_date_gmt>2012-07-03 05:15:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>actiondispatchrequestid-object</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="requestid"><![CDATA[requestId]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Creating nested resources in ruby on rails 3 and updating scaffolding links and redirection</title>
		<link></link>
		<pubDate>Mon, 09 Jul 2012 04:26:07 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=562</guid>
		<description></description>
		<content:encoded><![CDATA[In this article, I'll walk through a basic Rails (3.2.x) setup for creating a nested resource for two models. Nested resources work well when you want to build out URL structure between two related models, and still maintain a RESTful convention. This code assumes you are running RVM to manage Ruby/Gem versions, and Git for version control.

Creating a new Rails project
$ mkdir family # create rvm gemset 
$ echo "rvm use --create ruby-1.9.2@family" > family/.rvmrc 
$ cd family # install rails 
$ gem install rails # create new rails project 
$ rails new . # version control 
$ git init 
$ git add . 
$ git commit -am "new rails project"
Create two models (Parent & Child)
# Parent model 
$ rails generate scaffold Parent name:string 
$ git add . 
$ git commit -am "rails generate scaffold Parent name:string" 
# Child model 
$ rails generate scaffold Child name:string parent_id:integer 
$ git add . 
$ git commit -am "rails generate scaffold Child name:string parent_id:integer" 
# Create db (defaults to SQLite3) 
$ rake db:migrate 
# version control 
$ git add db/schema.rb 
$ git commit db/schema.rb -m "created database schema"
Review un-nested routes
$ rake routes
   children GET    /children(.:format)          children#index
            POST   /children(.:format)          children#create
  new_child GET    /children/new(.:format)      children#new
 edit_child GET    /children/:id/edit(.:format) children#edit
      child GET    /children/:id(.:format)      children#show
            PUT    /children/:id(.:format)      children#update
            DELETE /children/:id(.:format)      children#destroy
    parents GET    /parents(.:format)           parents#index
            POST   /parents(.:format)           parents#create
 new_parent GET    /parents/new(.:format)       parents#new
edit_parent GET    /parents/:id/edit(.:format)  parents#edit
     parent GET    /parents/:id(.:format)       parents#show
            PUT    /parents/:id(.:format)       parents#update
            DELETE /parents/:id(.:format)       parents#destroy
Adding model relationships
# file: app/models/parent.rb
class Parent < ActiveRecord::Base
  attr_accessible :name
  has_many :children
end

# file: app/models/child.rb
class Child < ActiveRecord::Base
  attr_accessible :name, :parent_id
  belongs_to :parent
end

# version control
$ git commit app/models -m "added relationships to models"
Nesting the routes
$ rake routes
  parent_children GET    /parents/:parent_id/children(.:format)          children#index
                  POST   /parents/:parent_id/children(.:format)          children#create
 new_parent_child GET    /parents/:parent_id/children/new(.:format)      children#new
edit_parent_child GET    /parents/:parent_id/children/:id/edit(.:format) children#edit
     parent_child GET    /parents/:parent_id/children/:id(.:format)      children#show
                  PUT    /parents/:parent_id/children/:id(.:format)      children#update
                  DELETE /parents/:parent_id/children/:id(.:format)      children#destroy
          parents GET    /parents(.:format)                              parents#index
                  POST   /parents(.:format)                              parents#create
       new_parent GET    /parents/new(.:format)                          parents#new
      edit_parent GET    /parents/:id/edit(.:format)                     parents#edit
           parent GET    /parents/:id(.:format)                          parents#show
                  PUT    /parents/:id(.:format)                          parents#update
                  DELETE /parents/:id(.:format)                          parents#destroy
Adding test data via Rails console
$ rails c

> dad = Parent.new(:name => 'Paul')
 => #<Parent id: nil, name: "Paul", created_at: nil, updated_at: nil> 

> dad.save
   (0.1ms)  begin transaction
  SQL (20.0ms)  INSERT INTO "parents" ("created_at", "name", "updated_at") VALUES (?, ?, ?)  [["created_at", Fri, 06 Apr 2012 16:13:17 UTC +00:00], ["name", "Paul"], ["updated_at", Fri, 06 Apr 2012 16:13:17 UTC +00:00]]
   (2.4ms)  commit transaction
 => true 

> son = dad.children.new(:name => 'Eric')
 => #<Child id: nil, name: "Eric", parent_id: 1, created_at: nil, updated_at: nil> 

> daughter = dad.children.new(:name => 'Mara')
 => #<Child id: nil, name: "Mara", parent_id: 1, created_at: nil, updated_at: nil> 

> exit
Adding a private controller method to load the Parent object for each method
# file: app/controllers/children_controller.rb
@@ -1,4 +1,7 @@
 class ChildrenController < ApplicationController
+
+  before_filter :load_parent
+
   # GET /children
   # GET /children.json
   def index
@@ -80,4 +83,11 @@ class ChildrenController < ApplicationController
       format.json { head :no_content }
     end
   end
+
+  private
+
+    def load_parent
+      @parent = Parent.find(params[:parent_id])
+    end
+
 end
At this point, each controller and view for the Child class model needs to be adjusted (links, redirection, form, etc)

Method: children#index

# file: app/controllers/children_controller.rb

   def index
-    @children = Child.all
+    @children = @parent.children.all
# file: app/views/children/index.html.erb

-    <td><%= link_to 'Show', child %></td>
-    <td><%= link_to 'Edit', edit_child_path(child) %></td>
-    <td><%= link_to 'Destroy', child, confirm: 'Are you sure?', method: :delete %></td>
+    <td><%= link_to 'Show', parent_child_path(@parent, child) %></td>
+    <td><%= link_to 'Edit', edit_parent_child_path(@parent, child) %></td>
+    <td><%= link_to 'Destroy', [@parent, child], confirm: 'Are you sure?', method: :delete %></td>

-<%= link_to 'New Child', new_child_path %>
+<%= link_to 'New Child', new_parent_child_path(@parent) %>
Method: children#new

# file: app/controllers/children_controller.rb

   def new
-    @child = Child.new
+    @child = @parent.children.new
# file: app/views/children/_form.html.erb

-<%= form_for(@child) do |f| %>
+<%= form_for([@parent, @child]) do |f| %>
# file: app/views/children/new.html.erb

-<%= link_to 'Back', children_path %>
+<%= link_to 'Back', parent_children_path(@parent) %>
Method: children#create

# file: app/controllers/children_controller.rb

   def create
-    @child = Child.new(params[:child])
+    @child = @parent.children.new(params[:child])

     respond_to do |format|
       if @child.save
-        format.html { redirect_to @child, notice: 'Child was successfully created.' }
+        format.html { redirect_to [@parent, @child], notice: 'Child was successfully created.' }
Method: children#show

# file: app/controllers/children_controller.rb

   def show
-    @child = Child.find(params[:id])
+    @child = @parent.children.find(params[:id])
# file: app/views/children/show.html.erb

-<%= link_to 'Edit', edit_child_path(@child) %> |
-<%= link_to 'Back', children_path %>
+<%= link_to 'Edit', edit_parent_child_path(@parent, @child) %> |
+<%= link_to 'Back', parent_children_path(@parent) %>
Method: children#edit

# file: app/controllers/children_controller.rb

   def edit
-    @child = Child.find(params[:id])
+    @child = @parent.children.find(params[:id])
# file: app/views/children/edit.html.erb

-<%= link_to 'Show', @child %> |
-<%= link_to 'Back', children_path %>
+<%= link_to 'Show', parent_child_path(@parent, @child) %> |
+<%= link_to 'Back', parent_children_path(@parent) %>
Method: children#update

# file: app/controllers/children_controller.rb

   def update
-    @child = Child.find(params[:id])
+    @child = @parent.children.find(params[:id])

     respond_to do |format|
       if @child.update_attributes(params[:child])
-        format.html { redirect_to @child, notice: 'Child was successfully updated.' }
+        format.html { redirect_to [@parent, @child], notice: 'Child was successfully updated.' }
Method: children#destroy

# file: app/controllers/children_controller.rb

   def destroy
-    @child = Child.find(params[:id])
+    @child = @parent.children.find(params[:id])
     @child.destroy

     respond_to do |format|
-      format.html { redirect_to children_url }
+      format.html { redirect_to parent_children_path(@parent) }
At this point, the default scaffolding's links and redirection have been updated to work with the nested routes.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>562</wp:post_id>
		<wp:post_date>2012-07-09 12:26:07</wp:post_date>
		<wp:post_date_gmt>2012-07-09 04:26:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creating-nested-resources-in-ruby-on-rails-3-and-updating-scaffolding-links-and-redirection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="nested"><![CDATA[nested]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="resources"><![CDATA[resources]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>3 招实用Asset Pipeline 加速 --by xdite</title>
		<link></link>
		<pubDate>Tue, 10 Jul 2012 01:24:20 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=567</guid>
		<description></description>
		<content:encoded><![CDATA[Asset Pipeline 最让人诟病的就是deploy 时花费速度过久。 在<a href="http://translate.googleusercontent.com/translate_c?hl=zh-CN&amp;prev=/search%3Fq%3D3-way-to-speedup-asset-pipeline/%26hl%3Dzh-CN%26newwindow%3D1%26safe%3Dstrict%26prmd%3Dimvns&amp;rurl=translate.google.com.hk&amp;sl=zh-TW&amp;u=http://www.meetup.com/Ruby-Taiwan-Group/&amp;usg=ALkJrhjELOiQOaWuvMEzLA44bw1JAEHk4Q">社群聚会</a>时发现大家都对这个主题非常不熟。 所以把最近累积了的这方面技巧整理出来分享给大家。
<h2>1. Capistrano deployment speedup</h2>
<h3>使用capistrano 内建task 执行assets:precompie</h3>
capistrano内建了<code>'deploy/assets'</code>这个task。 只要在<code>Capfile</code>里面

&nbsp;

<figure><figcaption>Capfile</figcaption>
<div>
<table>
<tbody>
<tr>
<td>
<pre>  1</pre>
</td>
<td>
<pre> <code>load 'deploy/assets'</code></pre>
</td>
</tr>
</tbody>
</table>
</div>
</figure>

&nbsp;

deploy 就会自动执行assets precompile 的动作。 由<a href="https://github.com/capistrano/capistrano/blob/master/lib/capistrano/recipes/deploy/assets.rb">原始档</a>可以看到这个task实际执行的是

<code>"cd /home/apps/APP_NAME/releases/20120708184757 &amp;&amp; bundle exec rake RAILS_ENV=production RAILS_GROUPS=assets assets:precompile"</code>

而执行的时机是

<code>after 'deploy:update_code', 'deploy:assets:precompile'</code>

许多开发者不知道有这一个task 可以用。 手动写task 去compile，造成了两个问题:
<ol>
	<li>时机执行错误。 Compile 时机错误会造成站上出现空白css。</li>
	<li>执行compile 机器负担太重。 如果是手写的task 通常会是load 整个production 的环境去compile。与只load assets 这个group 所吃的系统资源「有可能」差得非常多。</li>
</ol>
<h3>如果没有变更到assets 时，就不compile</h3>
请把这里面的内容贴到你的deploy.rb 档里面
<div>
<div id="gist-3072362">
<div>
<div>
<div>
<table>
<tbody>
<tr>
<td>
<pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30</pre>
</td>
<td>
<div id="LC1"># -*- encoding : utf-8 -*-</div>
<div id="LC3">set :assets_dependencies, %w(app/assets lib/assets vendor/assets Gemfile.lock config/routes.rb)</div>
<div id="LC5">namespace :deploy do</div>
<div id="LC6">  namespace :assets do</div>
<div id="LC8">    desc &lt;&lt;-DESC</div>
<div id="LC9">      Run the asset precompilation rake task. You can specify the full path \</div>
<div id="LC10">      to the rake executable by setting the rake variable. You can also \</div>
<div id="LC11">      specify additional environment variables to pass to rake via the \</div>
<div id="LC12">      asset_env variable. The defaults are:</div>
<div id="LC14">        set :rake, "rake"</div>
<div id="LC15">        set :rails_env, "production"</div>
<div id="LC16">        set :asset_env, "RAILS_GROUPS=assets"</div>
<div id="LC17">        set :assets_dependencies, fetch(:assets_dependencies) + %w(config/locales/js)</div>
<div id="LC18">    DESC</div>
<div id="LC19">    task :precompile, :roles =&gt; :web, :except =&gt; { :no_release =&gt; true } do</div>
<div id="LC20">      from = source.next_revision(current_revision)</div>
<div id="LC21">      if capture("cd #{latest_release} &amp;&amp; #{source.local.log(from)} #{assets_dependencies.join ' '} | wc -l").to_i &gt; 0</div>
<div id="LC22">        run %Q{cd #{latest_release} &amp;&amp; #{rake} RAILS_ENV=#{rails_env} #{asset_env} assets:precompile}</div>
<div id="LC23">      else</div>
<div id="LC24">        logger.info "Skipping asset pre-compilation because there were no asset changes"</div>
<div id="LC25">      end</div>
<div id="LC26">    end</div>
<div id="LC28">  end</div>
<div id="LC29">end</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div><a href="https://gist.github.com/raw/3072362/20d3c52d670af910096d4e9c41eca0b2675b0ca6/gistfile1.txt">view raw</a><a href="https://gist.github.com/3072362#file_gistfile1.txt">gistfile1.txt</a><a href="https://gist.github.com/3072362">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
</div>
</div>
这是在Railsconf 2012的<a href="https://speakerdeck.com/u/czarneckid/p/railsconf-2012-stack-smashing-cornflower-blue">Stack Smashing</a>上学到的一招。

如果你的assets 档案没有变动的话，只要执行copy 上一版本的assets 就好了。 这段task 会侦测
<ul>
	<li>app/assets</li>
	<li>lib/assets</li>
	<li>vendor/assets</li>
	<li>Gemfile.lock</li>
	<li>confir/routes.rb</li>
</ul>
是否有变动。 基本上已经含了所有可能assets 会变动的可能性。 有变动才会重新compile。

整体上会加速<strong>非常非常的多</strong> 。
<h2>2. use @import carefully</h2>
<h3>避免使用@import “compass”; 这种写法</h3>
<a href="http://translate.googleusercontent.com/translate_c?hl=zh-CN&amp;prev=/search%3Fq%3D3-way-to-speedup-asset-pipeline/%26hl%3Dzh-CN%26newwindow%3D1%26safe%3Dstrict%26prmd%3Dimvns&amp;rurl=translate.google.com.hk&amp;sl=zh-TW&amp;u=http://compass-style.org/&amp;usg=ALkJrhhOJafMffZNoGN_mrKZd66K8IgcBA">compass</a>是大家很爱用的SCSS framework。 大家写gradiant 或者css spriate 很常直接开下去。

但是你知道

&nbsp;

<figure><figcaption></figcaption>
<div>
<table>
<tbody>
<tr>
<td>
<pre>  1</pre>
</td>
<td>
<pre> <code>@import "compass" ;</code></pre>
</td>
</tr>
</tbody>
</table>
</div>
</figure>

&nbsp;

和

&nbsp;

<figure><figcaption></figcaption>
<div>
<table>
<tbody>
<tr>
<td>
<pre>  1</pre>
</td>
<td>
<pre> <code>@import "compass/typography/links/link-colors" ;</code></pre>
</td>
</tr>
</tbody>
</table>
</div>
</figure>

&nbsp;

这两种写法。

前者compile 的速度可能比后者慢到9 倍以上吗？

会这么慢的原因，是因为compass本身即是<a href="https://github.com/chriseppstein/compass/blob/stable/frameworks/compass/stylesheets/_compass.scss">懒人包</a> ， <code>@import "compass";</code>会把
<ul>
	<li>“compass/utilities”;</li>
	<li>“compass/typography”;</li>
	<li>“compass/css3”;</li>
</ul>
下面的东西<strong>通通</strong>都挂起来（还跑directory recursive）。

所以自然慢到爆炸。 如果要用什么helper，请直接挂它单支的CSS 就好了，不要整包都挂上来。

全挂其慢无比是正常的。
<h3>避免使用partial</h3>
我知道partial 是SCSS 整理术的大绝招。 但是若非必要，也尽量避免一直单档一路@import 到底。

&nbsp;

<figure><figcaption>common.css.scss</figcaption>
<div>
<table>
<tbody>
<tr>
<td>
<pre>  1
 2
 3</pre>
</td>
<td>
<pre> <code>@import "reset" ; @import "base" ; @import "product" ;</code></pre>
</td>
</tr>
</tbody>
</table>
</div>
</figure><figure><figcaption>common.css.scss</figcaption>
<div>
<table>
<tbody>
<tr>
<td>
<pre>  1
 2
 3</pre>
</td>
<td>
<pre> <code>//= require "reset" //= require "base" //= require "product"</code></pre>
</td>
</tr>
</tbody>
</table>
</div>
</figure>

&nbsp;

这两个在asset pipeline 输出结果是一样的。 但后者会比前者快。

如果真的需要用到非得使用partial 的技巧（如需读变数用require 读​​不到，@import 才读得到）再使用即可，因为只要一牵涉到directory recursive compile 就会慢…
<h2>3. don't require .scss &amp; .coffee for no reason</h2>
<h3>避免使用require_tree</h3>
使用generator 产生controller 时，rails 会自动帮忙产生
<ul>
	<li>product.css.scss</li>
	<li>product.js.coffee</li>
</ul>
然后application.css 与application.js 会利用

&nbsp;

<figure><figcaption>application.css</figcaption>
<div>
<table>
<tbody>
<tr>
<td>
<pre>  1</pre>
</td>
<td>
<pre> <code>//= require_tree</code></pre>
</td>
</tr>
</tbody>
</table>
</div>
</figure>

&nbsp;

这种技巧来把这些档案挂上去。

但是你知道吗？ 就算这些档案里面只写了这几行注解：

&nbsp;

<figure><figcaption></figcaption>
<div>
<table>
<tbody>
<tr>
<td>
<pre>  1
 2
 3</pre>
</td>
<td>
<pre> <code># Place all the behaviors and hooks related to the matching controller here. # All this logic will automatically be available in application.js. # You can use CoffeeScript in this file: http://jashkenas.github.com/coffee-script/</code></pre>
</td>
</tr>
</tbody>
</table>
</div>
</figure>

&nbsp;

而且实际执行结果也等于空输出。 compile 一支大概也要250ms。 你可以想想，多compile 10 支，就是2.5 秒了。 难怪超耗时。
<h3>可以使用.js 或.css 解决的不要用.scss 与.coffee 当结尾</h3>
&nbsp;

<figure><figcaption></figcaption>
<div>
<table>
<tbody>
<tr>
<td>
<pre>  1
 2
 3
 4
 5</pre>
</td>
<td>
<pre> <code>Compiled jquery-ui-1.8.16.custom.css (0ms) (pid 19108) Compiled jquery.ui.1.8.16.ie.css (0ms) (pid 19108) Compiled jquery.js (5ms) (pid 19108) Compiled jquery_ujs.js (0ms) (pid 19108) Compiled custom.css (14ms) (pid 19108)</code></pre>
</td>
</tr>
</tbody>
</table>
</div>
</figure>

&nbsp;

其中custom.css 的档名是custom.css.scss

这样应该知道为什么不要乱用scss 当档名了吧？
<h2>小结</h2>
为了方便大家调整，我把具体加速assets precompile 过程的步骤罗列在下面。
<h4>1. 换掉deploy.rb 的assets precompile tasks</h4>
<h4>2. 观察logs/product.log。</h4>
<ol>
	<li>找出慢的assets。</li>
	<li>拿掉直接使用import “comppass”; 的SCSS，改用功能针对性写法。</li>
	<li>不需要使用@import 写法的改用require</li>
	<li>拿掉require_tree，改用//=require 一行一行挂上去</li>
	<li>删掉空的scss 与coffeescript</li>
	<li>单纯只是CSS 的不要自作聪明帮忙加上.scss 档名。</li>
</ol>
====

如果有什么问题，欢迎各位在底下留言讨论。

也欢迎大家有空来<a href="http://translate.googleusercontent.com/translate_c?hl=zh-CN&amp;prev=/search%3Fq%3D3-way-to-speedup-asset-pipeline/%26hl%3Dzh-CN%26newwindow%3D1%26safe%3Dstrict%26prmd%3Dimvns&amp;rurl=translate.google.com.hk&amp;sl=zh-TW&amp;u=http://www.meetup.com/Ruby-Taiwan-Group/&amp;usg=ALkJrhjELOiQOaWuvMEzLA44bw1JAEHk4Q">Rails Tuesday</a>坐坐。 我很乐意帮大家解答问题。

PS如果你是要问<a href="http://translate.googleusercontent.com/translate_c?hl=zh-CN&amp;prev=/search%3Fq%3D3-way-to-speedup-asset-pipeline/%26hl%3Dzh-CN%26newwindow%3D1%26safe%3Dstrict%26prmd%3Dimvns&amp;rurl=translate.google.com.hk&amp;sl=zh-TW&amp;u=http://rails-101.logdown.com/&amp;usg=ALkJrhi9o1R7dFefWuKlx-RM98hTzl6FIA">Rails 101</a>书上的问题，请找小蟹。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>567</wp:post_id>
		<wp:post_date>2012-07-10 09:24:20</wp:post_date>
		<wp:post_date_gmt>2012-07-10 01:24:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>3-%e6%8b%9b%e5%ae%9e%e7%94%a8asset-pipeline-%e5%8a%a0%e9%80%9f-by-xdite</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asset"><![CDATA[asset]]></category>
		<category domain="post_tag" nicename="pipline"><![CDATA[pipline]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Simple CRUD with MongoDB </title>
		<link></link>
		<pubDate>Fri, 27 Jul 2012 04:34:37 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=570</guid>
		<description></description>
		<content:encoded><![CDATA[When I meet a new technology, I like to experience it "just as it comes". I'm happy at the command line and I like to type actual commands and see man pages before I use any wrappers or helper tools. So when I met <a href="http://www.mongodb.org/">MongoDB</a> for the first time, I did exactly that. This post shows those first steps of creating a database, and inserting, reading, deleting and updating data.

<em>Before we begin, you should install mongo. This is painless and for me, on ubuntu, <code>sudo aptitude install mongodb</code> did the trick.</em>
<h3>Some Terminology</h3>
Here are some translations from the RDBMS equivalent wording:
<ul>
	<li>"database" is still "database"</li>
	<li>"table" becomes "collection"</li>
	<li>"row" becomes "record"</li>
	<li>try to forget the word "column", we don't have those</li>
</ul>
<h3>Let's Begin</h3>
<strong>Creating a Database</strong>

You don't really create a database with mongo, you just kind of start using it. Once you put something in there, it exists. I'm going to name my new database <code>pets</code>.
<pre>use pets</pre>
<strong>Adding Data</strong>

To do anything in mongo, you start your command with <code>db</code> which refers to the database you're using. The different parts of the command are separated by dots. To insert data you use a command like <code>db.[collection].save()</code> and feed in the data to save. The format of the data is JSON-esque - I read JSON but I don't really write it, however I found it became familiar pretty quickly. To insert some data, you can do:
<pre>&gt; db.animals.save({'animal':'cat', 'name':'fluffy', 'type':'long-haired', 'owner':'Anna'});
&gt; db.animals.save({'animal':'dog', 'type':'spaniel', 'name':'toffee', 'colour':'toffee', 'owner':'Ben'});
&gt; db.animals.save({'owner':'Ben', 'animal':'cat', 'name':'ginger', 'collar':true});</pre>
<strong>Fetching Data</strong>

Did anything happen? We can check, using <code>db.[collection].find()</code> - this will give us everything in the collection, a bit like <code>select * from [table]</code> does in SQL.
<pre>&gt; db.animals.find();
{ "_id" : ObjectId("4ebb8fd68f7aaffc5d287383"), "animal" : "cat", "name" : "fluffy", "type" : "long-haired", "owner" : "Anna" }
{ "_id" : ObjectId("4ebb90048f7aaffc5d287384"), "animal" : "dog", "type" : "spaniel", "name" : "toffee", "colour" : "toffee", "owner" : "Ben" }
{ "_id" : ObjectId("4ebb90768f7aaffc5d287385"), "owner" : "Ben", "animal" : "cat", "name" : "ginger", "collar" : true }</pre>
We definitely have data! We can also filter this down, the equivalent of adding a "where" clause, for example, let's only see cats:
<pre>&gt; db.animals.find({'animal':'cat'});
{ "_id" : ObjectId("4ebb8fd68f7aaffc5d287383"), "animal" : "cat", "name" : "fluffy", "type" : "long-haired", "owner" : "Anna" }
{ "_id" : ObjectId("4ebb90768f7aaffc5d287385"), "owner" : "Ben", "animal" : "cat", "name" : "ginger", "collar" : true }</pre>
You can add multiple constraints here, how about cats belonging to Ben?
<pre>&gt; db.animals.find({'animal':'cat', 'owner':'Ben'});
{ "_id" : ObjectId("4ebb90768f7aaffc5d287385"), "owner" : "Ben", "animal" : "cat", "name" : "ginger", "collar" : true }</pre>
If any of the records don't have the field you're searching on, they won't appear in the results. We're not tied to a rigid structure of columns so you can just throw in whichever data seems useful at the time, and search on whatever is there. We can also search on whether we have the field at all, for example, animals where we know what colour they are:
<pre>&gt; db.animals.find({colour: {$exists: true}});
{ "_id" : ObjectId("4ebb90048f7aaffc5d287384"), "animal" : "dog", "type" : "spaniel", "name" : "toffee", "colour" : "toffee", "owner" : "Ben" }</pre>
<strong>Updating Data</strong>

This confused me for a long time, as mongo does have an <code>update()</code> function, which you can use to update one or many records in a particular way. What I found I really wanted though was to use the <code>save()</code> method again, because if the record has an identifier that exists, mongo will update it, otherwise it will insert it as we saw above. So we can just grab a record and change it, then save it:
<pre>&gt; db.animals.find({'animal':'dog'});
{ "_id" : ObjectId("4ebb90048f7aaffc5d287384"), "animal" : "dog", "type" : "spaniel", "name" : "toffee", "colour" : "toffee", "owner" : "Ben" }
db.animals.save({ "_id" : ObjectId("4ebb90048f7aaffc5d287384"), "animal" : "dog", "breed" : "spaniel", "name" : "toffee", "colour" : "toffee", "owner" : "Ben" });</pre>
I realised that calling a spaniel a "type" of dog would be better expressed as being a "breed", so I simply changed that record and mongo updated it for me. The <code>update() </code>statement is better for working on sets of records - for example if we decide Ben should be using his Sunday name:
<pre>&gt; db.animals.update({'owner':'Ben'}, {$set: {'owner':'Benjamin'}}, false, true);</pre>
There's a lot going on here, so let's look at the pieces step-by-step. The <a href="http://www.mongodb.org/display/DOCS/Updating">documentation</a> describes the update function as:
<pre>db.collection.update( criteria, objNew, upsert, multi )</pre>
The first part, the <em>criteria</em> is the same as we would use for the <code>find()</code> method. The next argument is what we're changing. I'm just setting one field to a given value, so I used the <code>$set</code> modifier (modifiers are an art in themselves, this post is rambling on already so I'll write about those another day if you're interested). The next argument is the <em>upsert</em>, which is whether to insert a new record if we didn't find any matches - I want to update existing records, not insert anything, so I set this to false. Finally the <em>multi</em> flag tells mongo to update ALL the records it can find that match the<em>criteria</em>, if this is false it will stop after one (lazy thing!).

<strong>Deleting Data</strong>

If you've come this far then I'm impressed, and deleting is the easy part so we're almost there! Exactly like the <code>find()</code>and <code>update()</code> commands, we just supply a criteria to the <code>remove()</code> command. This could be either one of the fields, as we used already, or the object ID itself, like this:
<pre>&gt; db.animals.remove({_id: ObjectId("4ebb90768f7aaffc5d287385")});</pre>
As with all things mongo, you won't get any feedback about whether it worked, since most of the time we're using this on systems so fast there isn't time for niceties, but if you try to <code>find()</code> this record now, you won't be able to.
<h3>MongoDB</h3>
There's so much that's exciting about mongo, the sheer size and speed of this data store, the support for map reduce, the sharding support ... I could go on. However you still need to be able to have a quick word with your database and check what data it has, maybe tweak something, and I hope that these mongo examples will serve as a quick reference for anyone who needs them, including me of course! I like databases, APIs and command line, so working with mongo is kind of magical for me, are you working with it? I'd love to hear how others are getting on and what other tips I need to know, so leave a comment and share, please!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>570</wp:post_id>
		<wp:post_date>2012-07-27 12:34:37</wp:post_date>
		<wp:post_date_gmt>2012-07-27 04:34:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>simple-crud-with-mongodb</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="crud"><![CDATA[CRUD]]></category>
		<category domain="category" nicename="db"><![CDATA[DB]]></category>
		<category domain="post_tag" nicename="mongodb"><![CDATA[MongoDB]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails date_select fields hidden and </title>
		<link></link>
		<pubDate>Fri, 27 Jul 2012 09:08:47 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=572</guid>
		<description></description>
		<content:encoded><![CDATA[Another 2 hours wasted. Today I was trying to use the date_select helper, but I could not figure out why the fields kept showing up as hidden inputs instead of select boxes.

Poked around for a long long long time, before catching this tidbit
<pre>: order – Set to an array containing :day, :month and :year do customize the order in which the select fields are shown. If you leave out any of the symbols, the respective select will not be shown (like when you set :discard_xxx =&gt; true. Defaults to the order defined in the respective locale (e.g. [:year, :month, :day] in the en locale that ships with Rails).</pre>
For some god forsaken reason, the “order” on the date_select field in my app was not set, or is defaulted to something else. I have no idea where this happens, or how it happens. But adding and order param fixed my problem
<pre>f.datetime_select :start_time, :order => [:year, :month, :day]</pre>
<ul>
	<li><code>:discard_day</code> - Set to true if you don't want to show a day select. This includes the day as a hidden field instead of showing a select field. Also note that this implicitly sets the day to be the first of the given month in order to not create invalid dates like 31 February.</li>
	<li><code>:discard_month</code> - Set to true if you don't want to show a month select. This includes the month as a hidden field instead of showing a select field. Also note that this implicitly sets :discard_day to true.</li>
	<li><code>:discard_year</code> - Set to true if you don't want to show a year select. This includes the year as a hidden field instead of showing a select field.</li>
	<li><code>:order</code> - Set to an array containing <code>:day</code>, <code>:month</code> and <code>:year</code> to customize the order in which the select fields are shown. If you leave out any of the symbols, the respective select will not be shown (like when you set <code>:discard_xxx =&gt; true</code>. Defaults to the order defined in the respective locale (e.g. [:year, :month, :day] in the en locale that ships with <a href="http://api.rubyonrails.org/classes/Rails.html">Rails</a>).</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>572</wp:post_id>
		<wp:post_date>2012-07-27 17:08:47</wp:post_date>
		<wp:post_date_gmt>2012-07-27 09:08:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-date_select-fields-hidden-and</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="date_select"><![CDATA[date_select]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My five favorite “hidden” features in Rails 3.2</title>
		<link></link>
		<pubDate>Fri, 10 Aug 2012 15:23:09 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=576</guid>
		<description></description>
		<content:encoded><![CDATA[Rails 3.2 is out with <a title="Rails 3.2.rc1 announced" href="http://weblog.rubyonrails.org/2011/12/20/rails-3-2-rc1-faster-dev-mode-routing-explain-queries-tagged-logger-store">great features on spotlight</a>: faster development reloading, faster router and explain queries. However, every Rails release ships with minor features that do not get that much attention but still would be a great fit to your application. This blog post is about my five favorites “hidden” features of Rails 3.2.
<h3>1) Smarter <code>content_tag_for</code></h3>
<a href="https://github.com/rails/rails/pull/2816">This feature written by Prem Sichanugrist</a> provides a very simple but welcome clean up to your views. Both <code>content_tag_for</code> and <code>div_for</code> now accepts an array of records and automatically loop over each record. Therefore, instead of writing this:
<div>
<div>
<pre>  @posts.each do |post|
    content_tag_for(:li, post) do
      ...
    end
  end</pre>
</div>
</div>
You can simply write:
<div>
<div>
<pre>  content_tag_for(:li, @posts) do |post|
    ...
  end</pre>
</div>
</div>
<h3>2) Smarter migration generators</h3>
It is funny how some parts of Rails as old as the migration generators continue receiving improvements day after day. Rails 3.1 already added a feature that automatically generate indexes for associations, by simply invoking:

&nbsp;
<pre>rails g scaffold Comment post:references title:string body:text</pre>
&nbsp;

With the above, Rails will detect that post is a reference and it will automatically 1) add a <code>post_id</code>integer column, 2) add an association to your model and 3) add an index to that column.

Right after 3.1 came out, I have pushed another small feature to the migration generator that simply makes the type attribute default to string. Therefore, you no longer need to write:

&nbsp;
<pre>rails g scaffold Person name:string email:string</pre>
&nbsp;

You could simply write:

&nbsp;
<pre>rails g scaffold Person name email</pre>
&nbsp;

Oddly enough, the idea for this feature came when I was preparing a presentation and the scaffold command could not fit in a slide (the so-called Presentation Driven Development). Anyhow, this small addition would not be enough to make to the best five “hidden” features of Rails 3.2. That’s when Dmitrii Samoilov comes in.

<a href="https://github.com/rails/rails/pull/2555">Dmitrii sent a pull request</a> that allows you to specify which columns should have an (unique) index. So one could write:

&nbsp;
<pre>rails g scaffold Person name:index email:uniq</pre>
&nbsp;

And the generator will automatically generate an index for name and an unique index for e-mail. There are other features there as well, so don’t forget to checkout the CHANGELOG.
<h3>3) Flexible exception handling</h3>
When Rails 3.0 came out, one of the features that people suddenly missed was the ability to better handle exceptions. The issue was: since Rails 3 became a lot more Rack “fluent”, we had to move some features to the middleware stack and this forced us to move the whole exceptions handling as well. Rails 3.2 attempts to bring some customization back to the game by allowing you to set your own exceptions rack application that is invoked when a failure happens. For instance, you could set the exceptions application to your own router in your<code>config/application.rb</code>:
<div>
<div>
<pre>config.exceptions_app = self.routes</pre>
</div>
</div>
Now, every time there is an exception, your router is going to be invoked. Therefore, to render custom 404 pages, you could simply add to your router:
<div>
<div>
<pre>match "/404", :to =&gt; "errors#not_found"</pre>
</div>
</div>
And implement the logic in the controller as you wish! However, there are a few things to keep in mind if you go down this road:
<ol>
	<li>You need to use <code>match</code> in your routes and not <code>get/post/put/delete</code> because such exceptions can happen in any HTTP request;</li>
	<li>You won’t be able to see your custom exceptions in development unless you set<code>config.consider_all_requests_local</code> to false in your <code>config/environments/development.rb</code>. The reason is, if the request is considered local, Rails will always favor to show the debug exceptions page;</li>
	<li>You can always access the original exception in the controller at<code>env["action_dispatch.exception"]</code>;</li>
	<li>It is not possible to set cookies, the session nor the flash after an exception happens. They all were already serialized back to the client;</li>
	<li>Finally, the default exceptions application used by Rails that simply renders a page in<code>public/STATUS.html</code> is available here: <a href="https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/middleware/public_exceptions.rb">action_dispatch/middleware/public_exceptions.rb</a></li>
</ol>
Remember that whatever you do in the errors controller, it should not be anything “fancy”. Keep it simple because something already went wrong with your application!
<h3>4) Custom partial paths</h3>
In order to render a partial for a given model, Rails 3.0 retrieved the partial name by calling:<code>model.class.model_name.partial_path</code>. <a href="https://github.com/rails/rails/commit/bf812074fd55e7dcfa426d6c9bfd4d8d68922194">Grant Hutchins &amp; Peter Jaros noticed that this was not very flexible</a> because the class was responsible to define the partial path and therefore they decided to move this responsibility to the instance. In order to better understand how you can use this feature, let’s consider the following practical example.

Imagine your application have an activity feed and each activity in the feed has a certain type. Usually, each type is rendered differently. For example, if you consider a to-do-list application, activities could be both “marking a list as favorite” or “marking a task as done”. Usually, applications solve this by looping for each item and rendering its respective partial, something like this:
<div>
<div>
<pre>@activities.each do |activity|
  render :partial =&gt; "activities/#{activity.kind}",
    :locals =&gt; { :activity =&gt;  activity }
end</pre>
</div>
</div>
Now, you can solve this problem by defining <code>to_partial_path</code> in the model (the method<code>to_partial_path</code> is part of the ActiveModel API and can be implemented in any object. The example above implements it in the model for convenience, but it could be a presenter, another ORM, etc):
<div>
<div>
<pre>class Activity &lt; ActiveRecord::Base
  def to_partial_path() "activities/#{kind}" end
end</pre>
</div>
</div>
And then invoking:
<div>
<div>
<pre>render :partial =&gt; @activities, :as =&gt; :activity</pre>
</div>
</div>
This will now work on Rails 3.2 because even though all activities are of the same class, each instance is actually responsible for telling Rails which partial should be rendered.

The difference here is not only in brevity, but also in performance. Although the first snippet works fine, it is slow. In the scenario where only one kind of activity happened, the first snippet will go through the render stack 30 times and lookup the same template in your filesystem 30 times. If you read <a title="Crafting Rails Applications" href="http://pragprog.com/book/jvrails/crafting-rails-applications">Crafting Rails Applications</a> you know that this lookup is cached, but even though it would certainly be faster if we didn’t have to do this 30 times, but once.

That’s where <code>render :collection</code> or <code>render :partial</code> with an array comes in. In such cases Rails will retrieve all templates up front skipping duplicates, and this new feature allows us to take advantage of it even if the partial lookup is dynamic. So, in the scenario where all the activities are of the same kind, the template lookup will happen just once and no longer 30 times. In other words, best case scenario becomes <code>O(1)</code>, worst case scenario is still <code>O(n)</code>.
<h3>5) Filtered chain logging is back</h3>
Another very small change that will make development more pleasant is that Rails will now log “Filter chain halted as CALLBACK_NAME rendered or redirected” every time a before/around/after filter in your controller halts the request. This was the case in Rails 2.3 but somehow got lost when Rails 3 came out. It is one of those small things you don’t know how much you missed until you see it again!

And what is your favorite Rails 3.2 “hidden” feature? Don’t forget to take a good look at the CHANGELOGs and check out many others improvements!

&nbsp;

Tags: <a href="http://blog.plataformatec.com.br/tag/crafting-rails-applications/" rel="tag">crafting rails applications</a>, <a href="http://blog.plataformatec.com.br/tag/exception-handling/" rel="tag">exception handling</a>, <a href="http://blog.plataformatec.com.br/tag/rails-3-2/" rel="tag">rails 3.2</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>576</wp:post_id>
		<wp:post_date>2012-08-10 23:23:09</wp:post_date>
		<wp:post_date_gmt>2012-08-10 15:23:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-five-favorite-%e2%80%9chidden%e2%80%9d-features-in-rails-3-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="crafting-rails-applications"><![CDATA[crafting rails applications]]></category>
		<category domain="post_tag" nicename="exception-handling"><![CDATA[exception handling]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rails-3-2"><![CDATA[rails 3.2]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Journey Through The JavaScript MVC Jungle -- By Addy Osmani</title>
		<link></link>
		<pubDate>Wed, 15 Aug 2012 16:51:20 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=582</guid>
		<description></description>
		<content:encoded><![CDATA[When writing a Web application from scratch, it’s easy to feel like we can get by simply by relying on a <a href="https://developer.mozilla.org/en/DOM/About_the_Document_Object_Model">DOM</a> manipulation library (like <a href="http://jquery.com/">jQuery</a>) and a handful of utility plugins. The problem with this is that it doesn’t take long to get lost in a nested pile of jQuery callbacks and DOM elements without any real structure in place for our applications.

In short, we’re stuck with <a href="http://en.wikipedia.org/wiki/Spaghetti_code">spaghetti code</a>. Fortunately there are modern JavaScript frameworks that can assist with bringing structure and organization to our projects, improving how easily maintainable they are in the long-run.
<h3>What Is MVC, Or Rather MV*?</h3>
These modern frameworks provide developers an easy path to organizing their code using variations of a pattern known as <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#detailmvcmvp">MVC</a> (Model-View-Controller). MVC separates the concerns in an application down into three parts:
<ul>
	<li><strong>Models</strong> represent the domain-specific knowledge and data in an application. Think of this as being a ‘type’ of data you can model — like a User, Photo or Note. Models should notify anyone observing them about their current state (e.g Views).</li>
	<li><strong>Views</strong> are typically considered the User-interface in an application (e.g your markup and templates), but don’t have to be. They should know about the existence of Models in order to observe them, but don’t directly communicate with them.</li>
	<li><strong>Controllers</strong> handle the input (e.g clicks, user actions) in an application and Views can be considered as handling the output. When a Controller updates the state of a model (such as editing the caption on a Photo), it doesn’t directly tell the View. This is what the observing nature of the View and Model relationship is for.</li>
</ul>
JavaScript ‘MVC’ frameworks that can help us structure our code don’t always strictly follow the above pattern. Some frameworks will include the responsibility of the Controller in the View (e.g <a href="http://backbonejs.org/">Backbone.js</a>) whilst others add their own opinionated components into the mix as they feel this is more effective.

For this reason we refer to such frameworks as following the MV* pattern, that is, you’re likely to have a View and a Model, but more likely to have something else also included.

<strong>Note:</strong> There also exist variations of MVC known as MVP (Model-View-Presenter) and MVVM (Model-View ViewModel). If you’re new to this and feel it’s a lot to take in, don’t worry. It can take a little while to get your head around patterns, but I’ve written more about the above patterns in my online book <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#detailmvcmvp">Learning JavaScript Design Patterns</a> in case you need further help.

<img title="cover" src="http://media.smashingmagazine.com/wp-content/uploads/2012/07/juggling-monkey.jpg" alt="" />
<h3>When Do You Need A JavaScript MV* Framework?</h3>
When building a single-page application using JavaScript, whether it involves a complex user interface or is simply trying to reduce the number of HTTP requests required for new Views, you will likely find yourself inventing many of the pieces that make up an MV* framework like Backbone or Ember.

At the outset, it isn’t terribly difficult to write an application framework that offers <em>some</em>opinionated way to avoid spaghetti code, however to say that it is equally as trivial to write something of the standard of Backbone would be a grossly incorrect assumption.

There’s a lot more that goes into structuring an application than tying together a DOM manipulation library, templating and routing. Mature MV* frameworks typically not only include many of the pieces you would find yourself writing, but also include solutions to problems you’ll find yourself running into later on down the road. This is a time-saver that you shouldn’t underestimate the value of.

So, where will you likely need an MV* framework and where won’t you?

If you’re writing an application that will likely only be communicating with an API or back-end data service, where much of the heavy lifting for viewing or manipulating that data will be occurring in the browser, you may find a JavaScript MV* framework useful.

Good examples of applications that fall into this category are <a href="http://gmail.com/">GMail</a> and <a href="http://docs.google.com/">Google Docs</a>. These applications typically download a single payload containing all the scripts, stylesheets and markup users need for common tasks and then perform a lot of additional behavior in the background. It’s trivial to switch between reading an email or document to writing one and you don’t need to ask the application to render the whole page again at all.

If, however, you’re building an application that still relies on the server for most of the heavy-lifting of Views/pages and you’re just using a little JavaScript or jQuery to make things a little more interactive, an MV framework may be overkill. There certainly are complex Web applications where the partial rendering of views can* be coupled with a single-page application effectively, but for everything else, you may find yourself better sticking to a simpler setup.
<h3>The Challenge Of Choice: Too Many Options?</h3>
The JavaScript community has been going through something of a renaissance over the last few years, with developers building even larger and more complex applications with it as time goes by. The language still greatly differs from those more classic Software engineers are used to using (C++, Java) as well as languages used by Web developers (PHP, Python, .Net etc). This means that in many cases we are borrowing concepts of how to structure applications from what we have seen done in the past in these other languages.

In my talk “<a href="http://addyosmani.com/blog/digesting-javascript-mvc-pattern-abuse-or-evolution/">Digesting JavaScript MVC: Pattern Abuse or Evolution</a>”, I brought up the point that there’s currently too much choice when it comes to what to use for structuring your JavaScript application. Part of this problem is fueled by how different JavaScript developers interpret how a scalable JavaScript application should be organized — MVC? MVP? MVVM? Something else? This leads to more frameworks being created with a different take on MV* each week and ultimately more noise because we’re still trying to establish the “right way” to do things, if that exists at all. Many developers believe it doesn’t.

We refer to the current state of new frameworks frequently popping up as ‘Yet Another Framework Syndrome’ (or YAFS). Whilst innovation is of course something we should welcome, YAFS can lead to a great deal of confusion and frustration when developers just want to start writing an app but don’t want to manually evaluate 30 different options in order to select something maintainable. In many cases, the differences between some of these frameworks can be very subtle if not difficult to distinguish.
<h3>TodoMVC: A Common Application For Learning And Comparison</h3>
There’s been a huge boom in the number of such MV* frameworks being released over the past few years.

<a href="http://backbonejs.org/">Backbone.js</a>, <a href="http://emberjs.com/">Ember.js</a>, <a href="http://angularjs.com/">AngularJS</a>, <a href="http://spinejs.com/">Spine</a>, <a href="http://canjs.us/">CanJS</a> … The list of new and stable solutions continues to grow each week and developers can quickly find themselves lost in a sea of options. From minds who have had to work on complex applications that inspired these solutions (such as <a href="http://github.com/wycats">Yehuda Katz</a> and <a href="http://github.com/jashkenas">Jeremy Ashkenas</a>), there are many strong contenders for what developers should consider using. The question is, what to use and how do you choose?

We understood this frustration and wanted to help developers simplify their selection process as much as possible. To help solve this problem, we created <a href="http://todomvc.com/">TodoMVC</a> — a project which offers the same Todo application implemented in most of the popular JavaScript MV* frameworks of today — think of it as speed dating for frameworks. Solutions look and feel the same, have a common feature set, and make it easy for us to compare the syntax and structure of different frameworks, so we can select the one we feel the most comfortable with or at least, narrow down our choices.

<img title="screenshot1" src="http://media.smashingmagazine.com/wp-content/uploads/2012/07/screenshot11.jpg" alt="" />

This week we’re releasing a <strong>brand new</strong> version of <a href="http://www.todomvc.com/">TodoMVC</a>, which you can find more details about lower down in the apps section.

In the near future we want to take this work even further, providing guides on how frameworks differ and recommendations for which options to consider for particular types of applications you may wish to build.
<h3>Our Suggested Criteria For Selecting A Framework</h3>
Selecting a framework is of course about more than simply comparing the Todo app implementations. This is why, once we’ve filtered down our selection of potential frameworks to just a few, it’s recommend to spend some time doing a little due diligence. The framework we opt for may need to support building non-trivial features and could end up being used to maintain the app for years to come.
<ul>
	<li><strong>What is the framework really capable of?</strong>
Spend time reviewing both the source code of the framework and official list of features to see how well they fit with your requirements. There will be projects that may require modifying or extending the underlying source and thus make sure that if this might be the case, you’ve performed due diligence on the code.</li>
	<li><strong>Has the framework been proved in production?</strong>
i.e Have developers actually built and deployed large applications with it that are publicly accessible? Backbone has a strong portfolio of these (SoundCloud, LinkedIn) but not all frameworks do. Ember is used in number of large apps, including the user tools in Square. JavaScriptMVC has been used to power applications at IBM amongst other places. It’s not only important to know that a framework works in production, but also being able to look at real world code and be inspired by what can be built with it.</li>
	<li><strong>Is the framework mature?</strong>
We generally recommend developers don’t simply “pick one and go with it”. New projects often come with a lot of buzz surrounding their releases but remember to take care when selecting them for use on a production-level app. You don’t want to risk the project being canned, going through major periods of refactoring or other breaking changes that tend to be more carefully planned out when a framework is mature. Mature projects also tend to have more detailed documentation available, either as a part of their official or community-driven docs.</li>
	<li><strong>Is the framework flexible or opinionated?</strong>
Know what flavor you’re after as there are plenty of frameworks available which provide one or the other. Opinionated frameworks lock (or suggest) you to do things in a specific way (theirs). By design they are limiting, but place less emphasis on the developer having to figure out how things should work on their own.</li>
	<li><strong>Have you really played with the framework?</strong>
Write a small application without using frameworks and then attempt to refactor your code with a framework to confirm whether it’s easy to work with or not. As much as researching and reading up on code will influence your decision, it’s equally as important to write actual code using the framework to make sure you’re comfortable with the concepts it enforces.</li>
	<li><strong>Does the framework have a comprehensive set of documentation?</strong>
Although demo applications can be useful for reference, you’ll almost always find yourself consulting the official framework docs to find out what its API supports, how common tasks or components can be created with it and what the gotchas worth noting are. Any framework worth it’s salt should have a detailed set of documentation which will help guide developers using it. Without this, you can find yourself heavily relying on IRC channels, groups and self-discovery, which can be fine, but are often overly time-consuming when compared to a great set of docs provided upfront.</li>
	<li><strong>What is the total size of the framework, factoring in minification, gzipping and any modular building that it supports?</strong>
What dependencies does the framework have? Frameworks tend to only list the total filesize of the base library itself, but don’t list the sizes of the librarys dependencies. This can mean the difference between opting for a library that initially looks quite small, but could be relatively large if it say, depends on jQuery and other libraries.</li>
	<li><strong>Have you reviewed the community around the framework?</strong>
Is there an active community of project contributors and users who would be able to assist if you run into issues? Have enough developers been using the framework that there are existing reference applications, tutorials and maybe even screencasts that you can use to learn more about it?</li>
</ul>
<h3>Dojo And Rise Of The JavaScript Frameworks</h3>
As many of us know, the <a href="http://dojotoolkit.org/">Dojo toolkit</a> was one of the first efforts to provide developers a means to developing more complex applications and some might say it in-part inspired us to think more about the needs of non-trivial applications. I sat down to ask Dojos <a href="http://dylanschiemann.com/">Dylan Schiemann</a>, Kitson Kelly, and James Thomas what their thoughts were on the rise of JavaScript MV* frameworks.

<strong>Q: Didn’t Dojo already solve all of this? Why hasn’t it been the dominent solution for developers wishing to build more structured (and more non-trivial) applications?</strong>

Years ago, while the JavaScript landscape evolved from adding simple Ajax and chrome to a page, Dojo was evangelizing a “toolkit” approach to building complex Web applications.

Many of those features were way ahead of most developers needs. With the emergence of the browser as the dominant application platform, many of the innovations pioneered in The Dojo Toolkit now appear in newer toolkits. MVC was just another package that Dojo has provided for quite some time, along with modular code packages, OO in JS, UI widgets, cross-browser graphics, templating, internationalization, accessibility, data stores, testing frameworks, a build system and much, much more.

JavaScript libraries shouldn’t end at “query”, which is why Dojo, early on, focussed on completing the picture for enterprise grade application development. This is the same focus that is has today with MVC, it’s just another “tool in the arsenal”.

Why is Dojo not the dominant toolkit? Its goal was never to be the only choice. The goal was to provide an open collection of tools that could be used with anything else, within projects, and liberally copied into other work as well. Dojo was criticized for being slow and even after that was addressed, it was criticized for being slow. Trying to shake that perception is challenging. It is very hard to document a feature-rich toolkit. There are 175 sub-packages in Dojo 1.8 and over 1,400 modules.

That is not only a challenge from a documentation purpose, it also means that there isn’t one thing that Dojo does. Which is good if you are building software, but very difficult when you are starting out trying to figure out where to start. These are all things we have been trying to work on for Dojo 1.8, in the form of tutorials and significantly improved documentation.

<strong>Q: Why should developers still consider Dojo and what ideas do you have lined up for the future of the project? I hear 1.8 will be another major milestone.</strong>

In Dojo 1.8, dojox/mvc takes another step towards full maturity. There has been a lot of investment in time, effort, testing and community awareness into the package. It focuses on providing an MVC model that leverages the rest of Dojo. Coupled with dojox/app, an application framework that is designed to make it easier to build rich applications across desktop and mobile, it makes a holistic framework for creating a
client side application.

In the typical Dojo way, this is just one of many viable ways in which to build applications with Dojo.

In 1.8, not only does the MVC sub-module become more mature, it is built upon a robust framework. It doesn’t just give you markup language to create your views, express your models or develop a controller. It is far more then just wiring up some controls to a data source. Because it is leveraging the rest of Dojo, you can draw in anything else you might need.

In Dojo 2.0 we will be looking to take modularity to a new level, so that it becomes even easier to take a bit of this and a bit of that and string it all together. We are also exploring the concepts of isomorphism, where it should be transparent to the end-user where your code is being executed, be it client side or server side and that ultimately it should be transparent to the developer.
<h3>The TodoMVC Collection</h3>
In our brand new release, Todo implementations now exist for the most popular frameworks with a large number of other commonly used frameworks being worked on in Labs. These implementations have gone through a lot of revision, often taking on board best practice tips and suggestions from framework authors, contributors and users from within the community.

<img title="screenshot2" src="http://media.smashingmagazine.com/wp-content/uploads/2012/07/screenshot2.jpg" alt="" />

Following on from comments previously made by Backbone.js author Jeremey Ashkenas and Yehuda Katz, TodoMVC now also offers consistent implementations based on an official application specification as well as routing (or state management).

We don’t pretend that more complex learning applications aren’t possible (they certainly are), but the simplicity of a Todo app allows developers to review areas such as code structure, component syntax and flow, which we feel are enough to enable a comparison between frameworks and prompt further exploration with a particular solution or set of solutions.

Our applications include:
<ul>
	<li><a href="http://documentcloud.github.com/backbone">Backbone.js</a></li>
	<li><a href="http://emberjs.com/">Ember.js</a></li>
	<li><a href="http://angularjs.org/">AngularJS</a></li>
	<li><a href="http://spinejs.com/">Spine.js</a></li>
	<li><a href="http://knockoutjs.com/">KnockoutJS</a> (MVVM)</li>
	<li><a href="http://dojotoolkit.org/">Dojo</a></li>
	<li><a href="http://yuilibrary.com/">YUI</a></li>
	<li><a href="http://batmanjs.org/">Batman.js</a></li>
	<li><a href="http://code.google.com/closure/library/">Closure</a></li>
	<li><a href="http://agilityjs.com/">Agility.js</a></li>
	<li><a href="http://kmalakoff.github.com/knockback">Knockback.js</a></li>
</ul>
For those interested in AMD versions:
<ul>
	<li><a href="http://documentcloud.github.com/backbone">Backbone.js</a> + <a href="http://requirejs.org/">RequireJS</a> (using AMD)</li>
	<li><a href="http://emberjs.com/">Ember.js</a> + <a href="http://requirejs.org/">RequireJS</a> (using AMD)</li>
</ul>
And our Labs include:
<ul>
	<li><a href="http://canjs.us/">CanJS</a></li>
	<li><a href="https://github.com/petermichaux/maria">Maria.js</a></li>
	<li><a href="http://cujojs.github.com/">cujo.js</a></li>
	<li><a href="http://meteor.com/">Meteor</a></li>
	<li><a href="http://www.socketstream.org/">SocketStream</a> + <a href="http://jquery.com/">jQuery</a></li>
	<li><a href="http://www.sencha.com/products/extjs">Ext.js</a></li>
	<li><a href="http://sammyjs.org/">Sammy.js</a></li>
	<li><a href="http://javascriptmvc.com/">JavaScriptMVC</a></li>
	<li><a href="https://developers.google.com/web-toolkit/">Google Web Toolkit</a></li>
	<li><a href="https://github.com/troopjs">TroopJS</a></li>
	<li><a href="http://hay.github.com/stapes">Stapes.js</a></li>
	<li><a href="http://somajs.github.com/somajs">soma.js</a></li>
	<li><a href="https://bitbucket.org/mckamey/duel/wiki/Home">DUEL</a></li>
	<li><a href="https://github.com/jgallen23/fidel">Fidel</a></li>
	<li><a href="https://github.com/flams/olives">Olives</a></li>
	<li><a href="https://github.com/rhysbrettbowen/PlastronJS">PlastronJS</a></li>
	<li><a href="https://github.com/creynders/dijon-framework">Dijon</a></li>
	<li><a href="http://www.rappidjs.com/">rAppid.js</a></li>
	<li><a href="https://github.com/brokenseal/broke">Broke</a></li>
	<li><a href="http://weepy.github.com/o_O">o_O</a></li>
	<li><a href="https://github.com/marcuswestin/fun">Fun</a></li>
	<li><a href="http://angularjs.org/">AngularJS</a> + <a href="http://requirejs.org/">RequireJS</a> (using AMD)</li>
</ul>
<strong>Note:</strong> We’ve implemented a version of our Todo application using <a href="https://github.com/addyosmani/todomvc/blob/master/vanilla-examples/vanillajs/js/app.js">just JavaScript</a> and another using primarily <a href="https://github.com/addyosmani/todomvc/blob/master/architecture-examples/jquery/js/app.js">jQuery conventions</a>. As you can see, whilst these applications are functionally equivalent to something you might write with an MVC framework, there’s no separation of concerns and the code becomes harder to read and maintain as the codebase grows.

We feel honored that over the past year, some framework authors have involved us in discussions about how to improve their solutions, helping bring our experience with a multitude of solutions to the table. We’ve also slowly moved towards TodoMVC being almost a defacto app that new frameworks implement and this means it’s become easier to make initial comparisons when you’re reviewing choices.
<h3>Frameworks: When To Use What?</h3>
To help you get started with narrowing down frameworks to explore, we would like to offer the below high-level framework summaries which we hope will help steer you towards a few specific options to try out.

I want something flexible which offers a minimalist solution to separating concerns in my application. It should support a persistence layer and RESTful sync, models, views (with controllers), event-driven communication, templating and routing. It should be imperative, allowing one to update the View when a model changes. I’d like some decisions about the architecture left up to me. Ideally, many large companies have used the solution to build non-trivial applications. As I may be building something complex, I’d like there to be an active extension community around the framework that have already tried addressing larger problems (<a href="https://github.com/derickbailey/backbone.marionette">Marionette</a>, <a href="https://github.com/chaplinjs/chaplin">Chaplin</a>, <a href="https://github.com/addyosmani/backbone-aura/">Aura</a>, <a href="https://github.com/walmartlabs/thorax">Thorax</a>). Ideally, there are also scaffolding tools (<a href="https://github.com/backbone-boilerplate/grunt-bbb">grunt-bbb</a>, <a href="http://brunch.io/">brunch</a>) available for the solution. <strong>Use Backbone.js.</strong>

I want something that tries to tackle desktop-level application development for the web. It should be opinionated, modular, support a variation of MVC, avoid the need to wire everything in my application together manually, support persistence, computed properties and have auto-updating (live) templates. It should support proper state management rather than the manual routing solution many other frameworks advocate being used. It should also come with extensive docs and of course, templating. It should also have scaffolding tools available (ember.gem, ember for brunch). <strong>Use Ember.js.</strong>

I want something more lightweight which supports live-binding templates, routing, integration with major libraries (like jQuery and Dojo) and is optimized for performance. It should also support a way to implement models, views and controllers. It may not be used on as many large public applications just yet, but has potential. Ideally, the solution should be built by people who have previous experience creating many complex applications. <strong>Use CanJS.</strong>

I want something declarative that uses the View to derive behavior. It focuses on achieving this through custom HTML tags and components that specify your application intentions. It should support being easily testable, URL management (routing) and a separation of concerns through a variation of MVC. It takes a different approach to most frameworks, providing a HTML compiler for creating your own DSL in HTML. It may be inspired by upcoming Web platform features such as Web Components and also has its own scaffolding tools available (angular-seed). <strong>Use AngularJS.</strong>

I want something that offers me an excellent base for building large scale applications. It should support a mature widget infrastructure, modules which support lazy-loading and can be asynchronous, simple integration with CDNs, a wide array of widget modules (graphics, charting, grids, etc) and strong support for internationalization (i18n, l10n). It should have support for OOP, MVC and the building blocks to create more complex architectures. <strong>Use Dojo.</strong>

I want something which benefits from the YUI extension infrastructure. It should support models, views and routers and make it simple to write multi-view applications supporting routing, View transitions and more. Whilst larger, it is a complete solution that includes widgets/components as well as the tools needed to create an organized application architecture. It may have scaffolding tools (yuiproject), but these need to be updated. <strong>Use YUI.</strong>

I want something simple that values asynchronous interfaces and lack any dependencies. It should be opinionated but flexible on how to build applications. The framework should provide bare-bones essentials like model, view, controller, events, and routing, while still being tiny. It should be optimized for use with CoffeeScript and come with comprehensive documentation. <strong>Use Spine.</strong>

I want something that will make it easy to build complex dynamic UIs with a clean underlying data model and declarative bindings. It should automatically update my UI on model changes using two-way bindings and support dependency tracking of model data. I should be able to use it with whatever framework I prefer, or even an existing app. It should also come with templating built-in and be easily extensible. <strong>Use KnockoutJS.</strong>

I want something that will help me build simple Web applications and websites. I don’t expect there to be a great deal of code involved and so code organisation won’t be much of a concern. The solution should abstract away browser differences so I can focus on the fun stuff. It should let me easily bind events, interact with remote services, be extensible and have a huge plugin community. <strong>Use jQuery.</strong>

&nbsp;
<h3>What Do Developers Think About The Most Popular Frameworks?</h3>
As part of our research into MV* frameworks for TodoMVC and this article, we decided to conduct a survey to bring together the experiences of those using these solutions. We asked developers what framework they find themselves using the most often and more importantly, why they would recommend them to others. We also asked what they felt was still missing in their project of choice.

We’ve grouped some of the most interesting responses below, by framework.
<h4>EMBER.JS</h4>
<blockquote><strong>Pros:</strong> The combination of live templates and observable objects has changed the way I write JavaScript. It can be a bit much to wrap your head around at first, but you end up with a nice separation of responsibility. I found that once I have everything set up, adding fairly complex features only takes a couple lines of code. Without Ember, these same features would’ve been hellish to implement.

<strong>Cons:</strong> Ember has yet to reach 1.0. Many things are still in flux, such as the router and Ember data. The new website is very helpful, but there’s still not as much documentation for Ember as there is for other frameworks, specifically Backbone. Also, with so much magic in the framework, it can be a little scary. There’s the fear that if something breaks you won’t be able to figure out exactly why. Oh, and the error messages that ember gives you often suck.</blockquote>
<blockquote><strong>Pros:</strong>
The key factors:

a) Features that let me avoid a lot of boilerplate (bindings, computer properties, view layer with the cool handlebars).

b) the core team: I’m a Rails developer and know the work of Yehuda Katz. I trust the guy =)

<strong>Cons:</strong> Documentation. It’s really sad that Ember doesn’t have good documentation, tutorials, screencast like Backbone, Angular or other frameworks. Right now, we browse the code looking for docs which isn’t ideal.</blockquote>
<blockquote><strong>Pros:</strong> Convention over configuration. Ember makes so many small decisions for you it’s by far the easiest way to build a client-side application these days.

<strong>Cons:</strong> The learning curve. It is missing the mass of getting started guides that exist for other frameworks like Backbone, this is partly because of the small community, but I think more because of the state of flux the codebase is in pre-1.0.</blockquote>
<blockquote><strong>Pros:</strong> Simplicity, bindings, tight integration with Handlebars, ease of enabling modularity in my own code.

<strong>Cons:</strong> I’d like to have a stable integration with ember-data, and integrated localStorage support synced with a REST API, but hey that’s fantasy that one day will surely come true ;-)</blockquote>
<h4>BACKBONE.JS</h4>
<blockquote><strong>Pros:</strong> Simplicity — only 4 core components (Collection, Model, View, Router). Huge community (ecosystem) and lots of solutions on StackOverflow. Higher order frameworks like Marionette or Vertebrae with lots of clever code inside. Somebody might like “low-levelness” — need to write lots of boilerplate code, but get customized application architecture.

<strong>Cons:</strong> I don’t like how extend method works — it copies content of parent objects into new one. Prototypal inheritance FTW. Sometime I miss real world scenarios in docs examples. Also there is a lot of research needed to figure out how to build a bigger app after reading the TODO tutorial.

I’m missing official AMD support in projects from DocumentCloud (BB, _). [Note: this shouldn’t be an issue with the new RequireJS shim() method in RequireJS 2.0].</blockquote>
<blockquote><strong>Pros:</strong> After the initial brain-warp of understanding how Backbone rolls, it is incredibly useful. Useful as in, well supported, lightweight, and constantly updated in a valid scope. Ties in with natural friends Underscore, jQuery/Zepto, tools that most of my studio’s projects would work with.

<strong>Cons:</strong> The amount of tutorials on how to do things with Backbone is inconsistent and at different periods of Backbones lifespan. I’ve asked other devs to have a look at Backbone, and they would be writing code for v0.3. Un-aware. Whilst not a problem Backbone can fix itself, it is certainly a major dislike associated with the framework.

I suppose in theory, you could apply this to anything else, but, Backbone is a recurrent one in my eyes. Hell, I’ve even seen month old articles using ancient Backbone methods and patterns.

Whatever dislikes I would have on the framework strictly itself, has been rectified by the community through sensible hacks and approaches. For me, that is why Backbone is great, the community backing it up.</blockquote>
<blockquote><strong>Pros:</strong> Provides just enough abstraction without unreasonable opinions — enabling you to tailor it to the needs of the project.

<strong>Cons:</strong> I would re-write (or possibly remove) Backbone.sync. It has baked in assumptions of typical client-initiated HTTP communications, and doesn’t adapt well to the push nature of WebSockets.</blockquote>
<blockquote><strong>Pros:</strong> It’s extremely easy to get into, offering a nice gateway to MV* based frameworks. It’s relatively customizable and there are also tons of other people using it, making finding help or support easy.

<strong>Cons:</strong> The fact that there’s no view bindings by default (although you can fix this). Re-rendering the whole view when a single property changes is wasteful.

The RESTful API has a lot of positives, but the lack of bulk-saving (admittedly a problem with REST itself, but still) and the difficulty in getting different URI schemes to work on different types of operations sucks.</blockquote>
<h4>ANGULARJS</h4>
<blockquote><strong>Pros:</strong>

a) 2-way data binding is incredibly powerful. You tend to think more about your model and the state that it is in instead of a series of events that need to happen. The model is the single source of truth.

b) Performance. AngularJS is a small download. It’s templating uses DOM nodes instead of converting strings into DOM nodes and should perform better.

c) If you are targeting modern browsers and/or are a little careful, you can drop jQuery from your dependencies too.

<strong>Cons:</strong> I’d like to be able to specify transitions for UI state changes that propgate from a model change. Specifically for elements that use ng-show or ng-hide I’d like to use a fade or slide in in an easy declarative way.</blockquote>
<blockquote><strong>Pros:</strong> It’s very intuitive, has excellent documentation. I love their data binding approach, HTML based views, nested scopes. I switched from Backbone/Thorax to Angular and never looked back. A new Chrome extension Batarang integrates with Chrome Developer’s Tools and provides live access the Angular data structures.

<strong>Cons:</strong> I’d like to have a built-in support to such functions as drag’n'drop, however this can be added using external components available on GitHub. I’d also like to see more 3rd party components available for reuse. I think it’s just a matter of time for the ecosystem around AngularJS to get more mature and then these will be available just like they are in communities like jQuery.</blockquote>
<blockquote><strong>Pros:</strong> It minimizes drastically the boilerplate code, allows for nice code reuse through components, extends the HTML syntax so that many complex features end up being as simple as applying a directive (attribute) in the HTML, and is super-easily testable thanks to a full commitment to dependency injection.
You can write a non-trivial app without jQuery or without directly manipulating the DOM. That’s quite a feat.

<strong>Cons:</strong> Its learning curve is somewhat steeper than Backbone (which is quite easy to master), but the gain is appreciative. Documentation could be better.</blockquote>
<h4>KNOCKOUTJS</h4>
<blockquote><strong>Pros:</strong> I don’t necessarily use it <em>all</em> the time, but KnockoutJS is just fantastic for single page applications. Extremely easy subscribing to live sorting; much better API for so called “collection views” in Backbone using observable arrays. And custom event on observables for effects, etc.

<strong>Cons:</strong> Feel like the API is quite hard to scale, and would probably prefer to wrangle Backbone on the bigger applications. (But that’s also partially due to community support).</blockquote>
<blockquote><strong>Pros:</strong> I like the data binding mechanism and feel very comfortable using it. In particular I like how they have replaced templates with control flow binding.

<strong>Cons:</strong> I don’t like that there is no guidance or best practice in terms of application structure. Aside from having a view model, the framework doesn’t help you in defining a well structured view model. It’s very easy to end up with a large unmaintainable function.</blockquote>
<h4>DOJO</h4>
<blockquote><strong>Pros:</strong> Syntactically, Dojo is very simple. It allows for dynamic and robust builds, with the initial loader file being as low as 6k in some cases. It is AMD compatible, making it extremely portable, and comes out-of-the-box with a ton of features ranging from basic dom interactions to complex SVG, VML, and canvas functionality. The widget system, Dijit, is unmatched in it’s ease-of-use and ability to be extended. It’s a very well-rounded and complete toolkit.
<strong>Cons:</strong> The dojo/_base/declare functionality is not 100% strict mode compliant and there is currently some overhead due to backwards compatibility, though this will mostly go away in the Dojo 2.0 release.</blockquote>
<blockquote><strong>Pros:</strong> Good components : tabs, datagrid, formManager… Renders the same cross browser. AMD compliant. Easy to test with mocks.Integrates well with other frameworks thks to amd (I ll integrate with JMVC)
<strong>Cons:</strong> Default design for components out of fashion. Not fully html5. So-so documentation
Poor templating system (no auto binding).</blockquote>
<h4>YUI</h4>
<blockquote><strong>Pros:</strong> YUI3 is a modular and use-at-will type of component library which includes all of the goodies of Backbone and more. It even (in my opinion) improves upon some of the concepts in Backbone by de-coupling some things (i.e. attribute is a separate module that can be mixed into any object – the event module can be mixed in similarly).

<strong>Cons:</strong> I’d love to see YUI3 support some of the auto-wiring (optional) of Ember. I think that is really the big win for Ember; otherwise, I see YUI3 as a superior component library where I can cherry-pick what I need. I’d also like to see a more AMD-compatible module loader. The loader today works very well; however, it would be nicer if I could start a new projects based on AMD modules and pull in certain YUI3 components and other things from other places that are also using AMD.</blockquote>
<h4>JAVASCRIPTMVC</h4>
<blockquote><strong>Pros:</strong> Has all tools included, just need to run commands and start building. I have used for the last 6 months and it’s been really good.

<strong>Cons:</strong> The only thing I would do is to speed up development of the next version. Developers are aware of problems and fixing issues but its going to be another ¾ months before some issues I want fixed are addressed, but then I could probably patch and do a pull request.</blockquote>
<h4>MARIA</h4>
<blockquote><strong>Pros:</strong> Because Maria is a pure MVC framework that is focused on being just an MVC framework. No more and no less. Its clean and simple.

<strong>Cons:</strong> A little more usage documentation outside of the source code, plus a few more test cases. A tutorial that drives home the real use of MVC with Maria would be good too.</blockquote>
<h4>CUJO.JS</h4>
<blockquote><strong>Pros:</strong> Real apps almost never fit perfectly into an MV* box, and the most important stuff is often outside the box. With cujo.js, you define the box.

Yes, cujo.js has high-level MV*-like features for creating views, models, controllers, etc., but every app is different, and no framework can ever be a 100% solution. Rather than try to be all things, cujo.js also provides lower level tools, architectural plumbling, and a rich plugin system that can even be used to integrate and extend other MV* frameworks.

Create the architecture that best suits your application, rather than constraining your app to fit inside someone else’s predefined architecture.

<strong>Cons:</strong> The broader JavaScript community is totally unprepared and untrained to take on large-scale applications. Most of us don’t even know that design patterns and architectural patterns exist.

Since cujo.js is so different from other frameworks, it needs more than a simple API reference and code snippets. Without tutorials, educational materials, and step-by-step examples, cujo.js might look strange and overwhelming to the untrained eye but documentation is supposed to be coming soon.</blockquote>
<h4>EXTJS</h4>
<blockquote><strong>Pros:</strong> I think ExtJS works best in combination with Ext Designer. It gives it an edge beyond the other GUI frameworks by letting non-programmers mock up the UI so programmers can fill in the blanks. I think comparing it to MVC frameworks like Backbone doesn’t do it justice – its strength lies in creating rich GUIs, not lean Web apps.

For rich, commercial back-office applications I think ExtJS remains the best choice when it comes to JavaScript solutions (i.e. not GWT etc). For public-facing Web apps I’d rather have something that gives me more control over the markup (and ideally something that degrades gracefully).

<strong>Cons:</strong> It has a steeper learning curve than many of the other modern structural frameworks. One can argue that if you’re investing in ExtJS for the long-term this time spent learning will pay off, however I think solutions like it should aim to better minimize the time it takes to train teams up in using it.</blockquote>
<blockquote><strong>Pros:</strong> I think a big feature of ExtJS 4 is that it throws you into the MVC mindset and the preferred filesystem structure right from the bat. With Dojo the initial tutorials seem to be mostly about augmenting existing websites whereas ExtJS assumes you’re starting from scratch.

Using ExtJS doesn’t really “feel” like you’re dealing with HTML at all. The component library is rich enough to let you go a long way without touching more HTML than what is needed to bootstrap your app.

It’d be interesting to see how both compare when Web components become more widely supported. This would finally allow manipulating the DOM without being afraid of breaking any widgets or causing your app’s internal state to become inconsistent.

<strong>Cons:</strong> The licensing is considered restrictive and difficult to understand by some. More people would be investing in ExtJS if it was clearer what the upfront and long-term costs of using it are. This isn’t a concern with some other structural solutions but probably isn’t as much a worry for larger businesses.</blockquote>
<blockquote><strong>Pros:</strong> ExtJS is a fantastic package for rapidly building out RIAs for internal use. I for one, love to build with HTML and JavaScript, and for me there’s great satisfaction in mucking around at that level. Even though ExtJS makes it feel like you’re not really working with HTML it still offers a great deal of power, especially if you’re using it to create a complex UI.

<strong>Cons:</strong> That said…I absolutely agree that it’s very heavy and I don’t think I’d recommend it for an external facing Web application. My biggest beef with the package overall is actually that it’s more of a PITA to test with than I’d would like. Our tester actually ended up switching to Sikuli because it was becoming too much of a battle trying to work with it in Selenium.</blockquote>
<h4>BATMAN</h4>
<blockquote><strong>Pros:</strong> It has a great and easy to use view bindings system. Plays with Rails very nicely and is all about convention over configuration.

<strong>Cons:</strong> The documentation could be a lot better and I feel Shopify won’t be adding the features that they say that they will.</blockquote>
<h3>Don’t Be Afraid To Experiment</h3>
Whilst it’s unlikely for a developer to need to learn how to use more than a handfull of these frameworks, I do encourage exploration of those you’re unfamiliar with. There’s more than mountain of interesting facts and techniques that can be learned in this process.

In my case: I discovered that Batman.js required the least hand-written lines of code for an implementation. I’m neither a frequent CoffeeScript nor Batman.js user but that in itself gave me some food for thought. Perhaps I could take some of what made this possible and bring it over to the frameworks I do use. Or, maybe I’d simply use Batman.js in a future project if I found the community and support around it improved over time.

Regardless of whether you end up using a different solution, at the end of the day all you have to gain from exploration is more knowledge about what’s out there.
<h3>Going Beyond MV* Frameworks</h3>
Whilst the MV* family of patterns are quite popular for structuring applications, they’re limited in that they don’t address any kind of application layer, communication between Views, services that perform work or anything else. Developers may thus find that they sometimes need to explore beyond just MVC — there are times when you absolutely need to take what they have to offer further.

We reached out to developers that have been taking MVC further with their own patterns or extensions for existing frameworks to get some insights on where you need something more.

“In my case, I needed something Composite. I noticed that there were patterns in Backbone apps where developers realized there was a need for an object that coordinated various parts of an application. Most of the time, I’ve seen developers try to solve this using a Backbone construct (e.g a View), even when there isn’t really a need for it. This is why I instead explored the need for an <a href="http://lostechies.com/derickbailey/2011/12/16/composite-javascript-applications-with-backbone-and-backbone-marionette/">Application Initializer</a>.

I also found that MVC didn’t really describe a way to handle regions of a page or application. The gist of <a href="http://lostechies.com/derickbailey/2011/12/12/composite-js-apps-regions-and-region-managers/">region management</a> is that you could define a visible area of the screen and build out the most basic layout for it without knowing what content was going to be displayed in it at runtime.

I created solutions for region management, application initialization and more in my extension project Marionette. It’s one of a number of solutions that extend upon a framework (or architecture pattern) that developers end up needing when they’re building single-page applications that are relatively complex.

There’s even a TodoMVC <a href="https://github.com/derickbailey/todomvc/tree/marionette">Marionette app</a> available for anyone wishing to compare the standard Backbone application with one that goes beyond just MV*.

<em>Derick Bailey — Author of Marionette</em>

“While a good portion of problems can be decomposed into JavaScript MVC, there are some which simply cannot. For example, an application consumes a third party API at runtime, but is not given any information as to how the data will be structured.

I spent almost a year trying to solve that very problem, but eventually I came to the realization that shoehorning it into MV* was not a viable solution. I was dealing with an “amorphous model” and that’s where it all fell apart. In other words, if you don’t have a well-defined model, most modern JavaScript frameworks can’t help you.

That’s where <a href="http://java.sun.com/blueprints/corej2eepatterns/Patterns/">Core J2EE Pat­terns</a> come in. I got turned on to them while read­ing <a href="http://www.amazon.com/Objects-Patterns-Practice-Matt-Zandstra/dp/1590599098">PHP Objects, Pat­terns, and Prac­tice</a> by Matt Zand­stra, and I’m glad I did! The J2EE Patterns basically outline a request-driven process, where the URL drives the behavior of the application. In a nutshell, a request is created, modified, and then used to determine the view to render.

I’ve expanded on my experiences with <a href="http://dblogit.com/archives/3895">request driven Javascript applications and J2EE patterns</a> for anyone who would like to learn more. ”

<em>Dustin Boston — co-author, Aura</em>
<h3>Conclusions</h3>
While there are several choices for what to use for structuring your JavaScript Web applications these days, it’s important to be <strong>diligent</strong> in the selection process – spend time thoroughly evaluating your options in order to make a decision which results in sustainable,<strong>maintainable</strong> code. Framework diversity fosters innovation, while too much similarity just creates noise.

Projects like TodoMVC can help narrow down your selections to those you feel might be the most interesting or most comfortable for a particular project. Remember to take your time choosing, don’t feel too constrained by using a specific pattern and keep in mind that it’s completely acceptable to build on the solution you select to best fit the needs of your application.

Experimenting with different frameworks will also give you different views on how to solve common problems which will in turn make you a better programmer.

<em>Thanks to my fellow TodoMVC team-member <a href="http://sindresorhus.com/">Sindre Sorhus</a> for his help with tweaks and a technical review of this article. </em>
<div>

<strong>Tags:</strong><a title="View all articles tagged 'Essentials' (32)" href="http://coding.smashingmagazine.com/tag/essentials/">Essentials</a>,<a title="View all articles tagged 'JavaScript' (44)" href="http://coding.smashingmagazine.com/tag/javascript/">JavaScript</a>,<a title="View all articles tagged 'MVC' (1)" href="http://coding.smashingmagazine.com/tag/mvc/">MVC</a><a title="View all articles tagged 'Tools' (27)" href="http://coding.smashingmagazine.com/tag/tools/">Tools</a>

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>582</wp:post_id>
		<wp:post_date>2012-08-16 00:51:20</wp:post_date>
		<wp:post_date_gmt>2012-08-15 16:51:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>journey-through-the-javascript-mvc-jungle-by-addy-osmani</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="essentials"><![CDATA[Essentials]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="mvctools"><![CDATA[MVCTools]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Conditional comments in html</title>
		<link></link>
		<pubDate>Mon, 20 Aug 2012 03:31:30 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=585</guid>
		<description></description>
		<content:encoded><![CDATA[Conditional comments only work in IE, and are thus excellently suited to give special instructions meant only for IE. They are supported from IE 5 onwards.

Conditional comments work as follows:
<pre>&lt;!--[if IE 6]&gt;
Special instructions for IE 6 here
&lt;![endif]--&gt;</pre>
<ol>
	<li>Their basic structure is the same as an HTML comment (<code>&lt;!-- --&gt;</code>). Therefore all other browsers will see them as normal comments and will ignore them entirely.</li>
	<li>IE, though, has been programmed to recognize the special <code>&lt;!--[if IE]&gt;</code> syntax, resolves the <code>if</code> and parses the content of the conditional comment as if it were normal page content.</li>
	<li>Since conditional comments use the <strong>HTML</strong> comment structure, they can only be included in HTML files, and not in CSS files. I'd have preferred to put the special styles in the CSS file, but that's impossible. You can also put an entire new <code>&lt;link&gt;</code> tag in the conditional comment referring to an extra style sheet.</li>
</ol>
<h3 id="link1">Example</h3>
Below I added a lot of conditional comments that print out messages according to your IE version.

<strong>Note</strong> however, that if you use multiple Explorers on one computer, the conditional comments will render as if all these Explorer versions are the highest Explorer version available on your machine (usually Explorer 6.0).
<h4 id="link2">Test</h4>
Below are a few conditional comments that reveal the IE version you're using.

According to the conditional comment this is not IE
<h4 id="link3">Code</h4>
The syntax I use is:
<pre>&lt;p&gt;
&lt;!--[if IE]&gt;
According to the conditional comment this is IE&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if IE 6]&gt;
According to the conditional comment this is IE 6&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if IE 7]&gt;
According to the conditional comment this is IE 7&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if IE 8]&gt;
According to the conditional comment this is IE 8&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if IE 9]&gt;
According to the conditional comment this is IE 9&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if gte IE 8]&gt;
According to the conditional comment this is IE 8 or higher&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if lt IE 9]&gt;
According to the conditional comment this is IE lower than 9&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if lte IE 7]&gt;
According to the conditional comment this is IE lower or equal to 7&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if gt IE 6]&gt;
According to the conditional comment this is IE greater than 6&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if !IE]&gt; --&gt;
According to the conditional comment this is not IE&lt;br /&gt;
&lt;!-- &lt;![endif]--&gt;
&lt;/p&gt;</pre>
Note the special syntax:
<ul>
	<li><code>gt</code>: greater than</li>
	<li><code>lte</code>: less than or equal to</li>
</ul>
Also note the last one. It has a different syntax, and its contents are shown in all browsers that are not IE:
<pre>&lt;!--[if !IE]&gt; --&gt;</pre>
<h3 id="link4">CSS hack?</h3>
Are conditional comments <a href="http://www.quirksmode.org/css/csshacks.html">CSS hacks</a>? Strictly speaking, yes, since they can serve to give special style instructions to some browsers. However, they do not rely on one browser bug to solve another one, as all true CSS hacks do. Besides, they can be used for more than CSS hacks only (though that rarely happens).

Since conditional comments are not based on a browser hack but on a deliberate feature I believe they are safe to use. Sure, other browsers could implement conditional comments, too (though as yet none have done so), but they're unlikely to react to the specific query <code>&lt;!--[if IE]&gt;</code>.

I use conditional comments, though sparingly. First I see if I can find a real CSS solution to an Explorer Windows problem. If I can't, though, I don't hesitate to use them.
<h3 id="link5">Comment tag</h3>
A reader told me IE8 and below also support the (non-standard) <code>&lt;comment&gt;</code> tag.
<pre>&lt;p&gt;This is &lt;comment&gt;not&lt;/comment&gt; IE.&lt;/p&gt;</pre>
This isnotIE.

This tag might be a replacement for the <code>!IE</code> conditional comment, but only if you target IE8 and below.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>585</wp:post_id>
		<wp:post_date>2012-08-20 11:31:30</wp:post_date>
		<wp:post_date_gmt>2012-08-20 03:31:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>conditional-comments-in-html</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="comments"><![CDATA[comments]]></category>
		<category domain="post_tag" nicename="conditional"><![CDATA[conditional]]></category>
		<category domain="post_tag" nicename="html"><![CDATA[html]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Practical Guide to Use Spine.JS in Real World App.</title>
		<link></link>
		<pubDate>Tue, 21 Aug 2012 05:13:19 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=590</guid>
		<description></description>
		<content:encoded><![CDATA[To give users the best possible fluid experience, we designed <a href="http://pragmatic.ly/">Pragmatic.ly</a> and complied with the <a title="Single Page Application" href="http://en.wikipedia.org/wiki/Single-page_application" target="_blank">single page application</a> standard. We believe that could make users focus on building product rather than spending time on project management itself. A wide range of technology solutions are available to make a single page application. Current trends suggest moving core application from server to client side and keeping server load at minimum for better performance by pure data APIs. <a href="http://pragmatic.ly/">Pragmatic.ly</a> took on the challange to cater to this need by developing server side in Rails, Spine.js at client side.

<strong>Why Spine.JS</strong>

There are many different JavaScript MVC frameworks such as <a title="Backbone.js" href="http://backbonejs.org/" target="_blank">Backbone.js</a>, <a title="Spine.js" href="http://spinejs.com/" target="_blank">Spine.js</a>, <a title="Knockout.js" href="http://knockoutjs.com/" target="_blank">Knockout.js</a>,<a title="Ember.js" href="http://emberjs.com/" target="_blank">Ember.js</a>, etc. There are too many choices and when I started Pragmatic.ly, I was struggling with the problem of which one I should pick up. Instead of wasting time on choosing I did a quick review by comparing the documents and then decided to choose Spine.js to start with. With months of development so far, I'm glad that Spine.js works pretty well and below are the great benefits I have found in using Spine.js.
<ul>
	<li><em>Simple and lightweight</em>. It's easy to dive into the core and extend as you need to.</li>
	<li><em>MVC pattern at its core</em>. It's very similar to the Rails counterparts. So I'm very comfortable with it from the first day.</li>
	<li><em>Rails integration</em>. It can't be easier to use Rails as the backend data API in Spine.js app. And the <a title="Spine Rails Gem" href="https://github.com/maccman/spine-rails" target="_blank">spine-rails</a> gem is another great addition.</li>
	<li><em><a title="Asynchronous User Interface" href="http://alexmaccaw.com/posts/async_ui" target="_blank">Asynchronous UI</a></em>. Ideally UIs never block and it will automatically update the data in backend. This brings the fast and very responsive user interface.</li>
</ul>
If you want to get a brief review among different frameworks, check out this <a title="Top 10 JavaScript MVC Frameworks Reviewed" href="http://codebrief.com/2012/01/the-top-10-javascript-mvc-frameworks-reviewed/">article</a> written by Gordon L. Hemption.

<strong>How we use Spine.js in Pragmatic.ly</strong>

We use spine-rails to generate the Spine.app structure, very similar to Rails app structure.

&nbsp;
<div id="gist-3370365">
<div>
<div>
<div>
<div id="LC1">├── app</div>
<div id="LC2">│   ├── controllers</div>
<div id="LC3">│   │   ├── center</div>
<div id="LC4">│   │   │   ├── filter_controller.js.coffee</div>
<div id="LC5">│   │   │   └── tickets_controller.js.coffee</div>
<div id="LC6">│   │   ├── center_content_controller.coffee</div>
<div id="LC7">│   │   ├── comments_controller.js.coffee</div>
<div id="LC8">│   │   ├── header</div>
<div id="LC9">│   │   │   └── project_nav_controller.js.coffee</div>
<div id="LC10">│   │   ├── header_controller.coffee</div>
<div id="LC11">│   │   ├── iterations_controller.coffee</div>
<div id="LC12">│   │   ├── left_sidebar_controller.coffee</div>
<div id="LC13">│   │   ├── projects_controller.coffee</div>
<div id="LC14">│   │   ├── right_sidebar_controller.coffee</div>
<div id="LC15">│   │   ├── sidebars</div>
<div id="LC16">│   │   │   ├── left_iteration.js.coffee</div>
<div id="LC17">│   │   │   ├── left_people.js.coffee</div>
<div id="LC18">│   │   │   ├── right_activities.js.coffee</div>
<div id="LC19">│   │   │   └── right_detail_section.js.coffee</div>
<div id="LC20">│   │   ├── tickets_controller.coffee</div>
<div id="LC21">│   │   └── users_controller.js.coffee</div>
<div id="LC22">│   ├── index.js.coffee</div>
<div id="LC23">│   ├── lib</div>
<div id="LC24">│   │   ├── constants.js.coffee</div>
<div id="LC25">│   │   ├── eco-helpers.js</div>
<div id="LC26">│   │   └── view.js.coffee</div>
<div id="LC27">│   ├── models</div>
<div id="LC28">│   │   ├── comment.js.coffee</div>
<div id="LC29">│   │   ├── iteration.js.coffee</div>
<div id="LC30">│   │   ├── project.js.coffee</div>
<div id="LC31">│   │   ├── ticket.js.coffee</div>
<div id="LC32">│   │   └── user.js.coffee</div>
<div id="LC33">│   └── views</div>
<div id="LC34">│   ├── comments</div>
<div id="LC35">│   │   ├── audit.jst.eco</div>
<div id="LC36">│   │   ├── form.jst.eco</div>
<div id="LC37">│   │   └── plain.jst.eco</div>
<div id="LC38">│   ├── iterations</div>
<div id="LC39">│   │   ├── section.jst.eco</div>
<div id="LC40">│   │   └── show.jst.eco</div>
<div id="LC41">│   ├── projects</div>
<div id="LC42">│   │   ├── edit.jst.eco</div>
<div id="LC43">│   │   ├── form.jst.eco</div>
<div id="LC44">│   │   ├── new.jst.eco</div>
<div id="LC45">│   │   └── switch.jst.eco</div>
<div id="LC46">│   ├── tickets</div>
<div id="LC47">│   │   ├── section.jst.eco</div>
<div id="LC48">│   │   ├── show.jst.eco</div>
<div id="LC49">│   │   └── toolbar.jst.eco</div>
<div id="LC50">│   └── users</div>
<div id="LC51">│   ├── people.jst.eco</div>
<div id="LC52">│   └── show.jst.eco</div>
<div id="LC53">├── application.js</div>
<div id="LC54">├── bootstrap.js.coffee</div>
<div id="LC55">└── dashboard.js.coffee</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/3370365/f5a2684f50f33afbe69eeff4cd6747f907e97141/Pragmatic.ly%20JS%20Structure">view raw</a><a href="https://gist.github.com/3370365#file_pragmatic.ly js structure">Pragmatic.ly JS Structure</a><a href="https://gist.github.com/3370365">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
</div>
&nbsp;

So basically it's controllers, models and views.

<strong>Controllers</strong>

There are two kinds of Controllers in Pragmatic.ly. In Spine, Controllers are considered the glue of an application, adding and responding to DOM events, rendering templates and ensuring that views and models are kept in sync. For example,

&nbsp;
<div id="gist-3370386">
<div>
<div>
<div>
<div id="LC1">class App.LeftIterationController extends Spine.Controller</div>
<div id="LC2">  el: '.sidebar #iterations'</div>
<div id="LC4">  elements:</div>
<div id="LC5">    'ul.list': 'list'</div>
<div id="LC7">  constructor: -&gt;</div>
<div id="LC8">    super</div>
<div id="LC9">    App.Iteration.bind 'create', @addIteration</div>
<div id="LC10">    App.Iteration.bind 'refresh', @refreshIterations</div>
<div id="LC12">  release: -&gt;</div>
<div id="LC13">    super</div>
<div id="LC14">    App.Iteration.unbind 'create', @addIteration</div>
<div id="LC15">    App.Iteration.unbind 'refresh', @refreshIterations</div>
<div id="LC17">  addIteration: (iteration) =&gt;</div>
<div id="LC18">    iteration.unbind()</div>
<div id="LC19">    view = new App.IterationItem(item: iteration)</div>
<div id="LC20">    @list.append(view.render().el)</div>
<div id="LC22">  refreshIterations: (iterations) =&gt;</div>
<div id="LC23">    @addIteration iteration for iteration in iterations</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/3370386/39fe0b331aa7d524f41132056a4ff6e1da432c74/left_iteration_controller.js.coffee">view raw</a><a href="https://gist.github.com/3370386#file_left_iteration_controller.js.coffee">left_iteration_controller.js.coffee</a><a href="https://gist.github.com/3370386">This Gist</a> brought to you by<a href="http://github.com/">GitHub</a>.</div>
</div>
</div>
&nbsp;

We split the page into multiple blocks and each block is a Spine Controller. Talking the above example, LeftIterationsController is the Controller to manage the iterations list in the left sidebar.

Then what's the other kind? The answer is <em>Routes</em>! We extract the routes to the dedicated controllers now. It will setup the routes and respond to the <em>navigation</em> event. Then it will prepare the data and trigger the event to let another controller handle it to render templates. For example,

&nbsp;
<div id="gist-3370398">
<div>
<div>
<div>
<div id="LC1">class App.TicketsController extends Spine.Controller</div>
<div id="LC2">  constructor: -&gt;</div>
<div id="LC3">    super</div>
<div id="LC4">    @routes</div>
<div id="LC5">      "/tickets": @index</div>
<div id="LC6">      "/tickets/:id" : (params) -&gt;</div>
<div id="LC7">        @show(params.id)</div>
<div id="LC9">  index: -&gt;</div>
<div id="LC10">    tickets = App.Ticket.all()</div>
<div id="LC11">    App.Ticket.trigger "tickets:index", tickets</div>
<div id="LC13">  show: (id) -&gt;</div>
<div id="LC14">    ticket = App.Ticket.find(id)</div>
<div id="LC15">    $.publish 'ticket:switch', ticket</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/3370398/6d475eed1c1c593ca1338cdc2681be3b1ec9dd6d/ticket_routing_controller.js.coffee">view raw</a><a href="https://gist.github.com/3370398#file_ticket_routing_controller.js.coffee">ticket_routing_controller.js.coffee</a><a href="https://gist.github.com/3370398">This Gist</a> brought to you by<a href="http://github.com/">GitHub</a>.</div>
</div>
</div>
&nbsp;

<strong>Models</strong>

Models manage data for the application. It's very similar to Rails models. I just want to mention one thing though - as we moved the logic from server side to client side, there was no need to translate 1:1 on the client side. Instead, encapsulate the data into model which is suitable for the page based on the user.

&nbsp;
<div id="gist-3370424">
<div>
<div>
<div>
<div id="LC1">class App.Project extends Spine.Model</div>
<div id="LC2">  @configure 'Project', 'id', 'name', 'description', 'owner_id', 'uid'</div>
<div id="LC3">  @extend Spine.Model.Ajax</div>
<div id="LC4">  @extend Spine.Model.Dirty</div>
<div id="LC6">  validate: -&gt;</div>
<div id="LC7">    'name required' unless @name</div>
<div id="LC9">  inviteUser: (email) -&gt;</div>
<div id="LC10">    App.Invitation.create(project_id: @id, email: email)</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/3370424/e79540cdbabd4cde1b1e2c142b3a26caba6e5da4/project.js.coffee">view raw</a><a href="https://gist.github.com/3370424#file_project.js.coffee">project.js.coffee</a><a href="https://gist.github.com/3370424">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
</div>
&nbsp;

<strong>Views</strong>

Views are about building and maintaining the DOM elements. Views in Spine are very simple and don't have the built-in UI binding. So most of the time you should let Controller observe the Model and get notified when the model changes, then update the view accordingly.

By doing all the view rendering client-side, you should use JavaScript templating solution to define templates for views as markup containing tempalte variables. There are a number of good candidates, such as <a title="Mustache" href="http://mustache.github.com/" target="_blank">Mustache</a>, <a title="jQuery Template" href="http://api.jquery.com/category/plugins/templates" target="_blank">jQuery.tmpl</a> and <a title="Eco" href="https://github.com/sstephenson/eco" target="_blank">Eco</a>.

I use Eco in Pragmatic.ly. The Erb-like syntax and CoffeeScript support is a big triumph. However, you should know that every eco template generates the same helpers which will increase the file size. You can use this gist to avoid the problem which will register the global helpers and inject into the Eco templates.

&nbsp;
<div id="gist-2360781">
<div>
<div>
<div>
<div id="LC1"># Put this file in lib/</div>
<div id="LC3">require 'sprockets/eco_template'</div>
<div id="LC5">class CleanEcoTemplate &lt; Sprockets::EcoTemplate</div>
<div id="LC6">  FROM = " (function() {"</div>
<div id="LC7">  TO = "}).call(__obj);"</div>
<div id="LC9">  def evaluate(scope, locals, &amp;block)</div>
<div id="LC10">    content = Eco.compile(data)</div>
<div id="LC11">    from = content.index(FROM)</div>
<div id="LC12">    to = content.rindex(TO)</div>
<div id="LC13">    content = content[from...to] + TO</div>
<div id="LC14">    &lt;&lt;-JS</div>
<div id="LC15">function(__obj) {</div>
<div id="LC16">if (!__obj) __obj = {};</div>
<div id="LC17">var __helpers = window.ecoHelpers;</div>
<div id="LC18">var __out = [];</div>
<div id="LC19">var __sanitize = __helpers.sanitize;</div>
<div id="LC20">var __capture = __helpers.captureFor(__obj, __out);</div>
<div id="LC21">var __rememberSafe = __obj.safe;</div>
<div id="LC22">var __rememberEscape = __obj.escape;</div>
<div id="LC23">__obj.safe = __helpers.safe;</div>
<div id="LC24">__obj.escape = __helpers.escape;</div>
<div id="LC25">#{content}</div>
<div id="LC26">__obj.safe = __rememberSafe;</div>
<div id="LC27">__obj.escape = __rememberEscape;</div>
<div id="LC28">return __out.join('');</div>
<div id="LC29">};</div>
<div id="LC30">JS</div>
<div id="LC31">  end</div>
<div id="LC32">end</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/2360781/8b3b00534fea091b4514589460e99deb2abfe618/clean_eco_template.rb">view raw</a><a href="https://gist.github.com/2360781#file_clean_eco_template.rb">clean_eco_template.rb</a><a href="https://gist.github.com/2360781">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
<div>
<div>
<div>
<div id="LC1"># Must include eco-helpers.js before eco files</div>
<div id="LC3">(function(global) {</div>
<div id="LC4">  var ecoHelpers = {</div>
<div id="LC5">    sanitize: function(value) {</div>
<div id="LC6">      if (value &amp;&amp; value.ecoSafe) {</div>
<div id="LC7">        return value;</div>
<div id="LC8">      } else if (typeof value !== 'undefined' &amp;&amp; value != null) {</div>
<div id="LC9">        return ecoHelpers.escape(value);</div>
<div id="LC10">      } else {</div>
<div id="LC11">        return '';</div>
<div id="LC12">      }</div>
<div id="LC13">    },</div>
<div id="LC15">    safe: function(value) {</div>
<div id="LC16">      if (value &amp;&amp; value.ecoSafe) {</div>
<div id="LC17">        return value;</div>
<div id="LC18">      } else {</div>
<div id="LC19">        if (!(typeof value !== 'undefined' &amp;&amp; value != null)) value = '';</div>
<div id="LC20">        var result = new String(value);</div>
<div id="LC21">        result.ecoSafe = true;</div>
<div id="LC22">        return result;</div>
<div id="LC23">      }</div>
<div id="LC24">    },</div>
<div id="LC26">    escape: function(value) {</div>
<div id="LC27">      return ('' + value)</div>
<div id="LC28">        .replace(/&amp;/g, '&amp;amp;')</div>
<div id="LC29">        .replace(/&lt;/g, '&amp;lt;')</div>
<div id="LC30">        .replace(/&gt;/g, '&amp;gt;')</div>
<div id="LC31">        .replace(/"/g, '&amp;quot;');</div>
<div id="LC32">    },</div>
<div id="LC34">    captureFor: function(obj, out) {</div>
<div id="LC35">      return (function(callback) {</div>
<div id="LC36">        var length = out.length;</div>
<div id="LC37">        callback.call(obj);</div>
<div id="LC38">        return ecoHelpers.safe(out.splice(length, out.length - length).join(''));</div>
<div id="LC39">      });</div>
<div id="LC40">    }</div>
<div id="LC41">  };</div>
<div id="LC43">  global.ecoHelpers = ecoHelpers;</div>
<div id="LC44">})(window);</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/2360781/9aa691027d57ddd63ec7f6969481336789539248/eco-helpers.js">view raw</a><a href="https://gist.github.com/2360781#file_eco_helpers.js">eco-helpers.js</a><a href="https://gist.github.com/2360781">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
<div>
<div>
<div>
<div id="LC1"># Put this file in config/initializers</div>
<div id="LC3">require 'clean_eco_template'</div>
<div id="LC5">Rails.application.assets.register_engine '.eco', CleanEcoTemplate</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/2360781/7ccb944d8613edd073dddd34547bcdaa766eefa6/eco_template.rb">view raw</a><a href="https://gist.github.com/2360781#file_eco_template.rb">eco_template.rb</a><a href="https://gist.github.com/2360781">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
</div>
&nbsp;

<strong>Problems</strong>

So that's how we use Spine.js to power Pragmatic.ly. It works very well but still have some limitations.
<ul>
	<li>By default, you can only monitor the whole Model change event and update the view accordingly. For example, even the username is not changed, you still have to update the views containing that data. There is a "change:field" event in Backbone.js which allow you only to update the view when that field of data changed. I like that. So I made a plugin to support that. Check the Gist out.
<div id="gist-2866558">
<div>
<div>
<div>
<div id="LC1">Spine ?= require('spine')</div>
<div id="LC3">Include =</div>
<div id="LC4">  savePrevious: -&gt;</div>
<div id="LC5">    @constructor.records[@id].previousAttributes = @attributes()</div>
<div id="LC7">Spine.Model.Dirty =</div>
<div id="LC8">  extended: -&gt;</div>
<div id="LC9">    @bind 'refresh', -&gt;</div>
<div id="LC10">      @each (record) -&gt; record.savePrevious()</div>
<div id="LC12">    @bind 'save', (record) -&gt;</div>
<div id="LC13">      if record.previousAttributes?</div>
<div id="LC14">        for key in record.constructor.attributes when key of record</div>
<div id="LC15">          if record[key] isnt record.previousAttributes[key]</div>
<div id="LC16">            record.trigger('change:'+key, record[key])</div>
<div id="LC17">      record.savePrevious()</div>
<div id="LC19">    @include Include</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/2866558/515b724d2e7b4b648e5f10c9ef93782f3242c9cd/dirty.js.coffee">view raw</a><a href="https://gist.github.com/2866558#file_dirty.js.coffee">dirty.js.coffee</a><a href="https://gist.github.com/2866558">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
<div>
<div>
<div>
<div id="LC1">So the model object can bind the event "change:#{field} to trigger event when the field value is changed.</div>
<div id="LC3">By default it's off and if need this feature, the model should extend Spine.Model.Dirty.</div>
<div id="LC5">A sample case.</div>
<div id="LC7">class User extends Spine.Model</div>
<div id="LC8">  @extend Spine.Model.Dirty</div>
<div id="LC9">end</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/2866558/568e3e12fd1a160d5cedd5a476edd202622d110b/Usage:">view raw</a><a href="https://gist.github.com/2866558#file_usage:">Usage:</a><a href="https://gist.github.com/2866558">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
</div></li>
	<li>The Ajax plugin in Spine.js plays very nice with backend REST APIs, such as Rails. For example, creating the model will trigger a "CREATE /collections" event to the server and updating the model will trigger a "PUT /collections/id" event, seemlessly. However, nested resources in Rails is very common but Spine lacks to support that. Either you have to trigger requests to top-level URL or setup the request yourself. I have done a dirty hack to support scoping. It's dirty but works.
<div id="gist-3371899">
<div>
<div>
<div>
<div id="LC1">class App.Ticket extends Spine.Model</div>
<div id="LC2">  @configure 'Ticket', "id", "project_id"</div>
<div id="LC4">  @scope: -&gt;</div>
<div id="LC5">    "projects/#{current.project_id}"</div>
<div id="LC7">  scope: -&gt;</div>
<div id="LC8">    "projects/#{@project_id}"</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/3371899/ec5a4177783ce2827796895f6b7c886f6f3643a6/url_scoping.js.coffee">view raw</a><a href="https://gist.github.com/3371899#file_url_scoping.js.coffee">url_scoping.js.coffee</a><a href="https://gist.github.com/3371899">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
</div></li>
	<li>Asynchronous UI is cool and works for 99% situations. But in a real world app you have to deal with errors like bugs or network failures. Spine doesn't have the default error handling for this situation and leave all work to you. It's fine but you should know that for that 1% situation, you have to spend lots of time to avoid the impact.</li>
</ul>
<strong>Test</strong>

I would like to cover how Test works in Pragmatic.ly in another post. To give a quick overview, we use <a title="JavaScript Behavior Test Framework" href="http://pivotal.github.com/jasmine/" target="_blank">Jasmine</a> for JS test and <a title="JavaScript Code Coverage Tool" href="http://siliconforks.com/jscoverage/" target="_blank">JSCoverage</a> for measuring code coverage. Nice pair!

&nbsp;

<strong>About Pragmatic.ly</strong>

<a title="Fast &amp; easy to use project management tool &amp; real-time collaboration" href="https://pragmatic.ly/">Pragmatic.ly</a> is a fast and easy to use project management tool featuring real time collaboration. It's an elegant project management service built for developers with love.

&nbsp;

Now that you've read so far, you should follow me <a title="yedingding's twitter" href="https://twitter.com/yedingding" target="_blank">@yedingding</a>!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>590</wp:post_id>
		<wp:post_date>2012-08-21 13:13:19</wp:post_date>
		<wp:post_date_gmt>2012-08-21 05:13:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-practical-guide-to-use-spine-js-in-real-world-app</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="guide"><![CDATA[guide]]></category>
		<category domain="post_tag" nicename="spine-js"><![CDATA[Spine.JS]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Rails flash isn&#039;t just for messages</title>
		<link></link>
		<pubDate>Thu, 23 Aug 2012 16:04:01 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=594</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://guides.rubyonrails.org/action_controller_overview.html#the-flash">The Rails flash</a> is typically used for short messages:

app/controllers/sessions_controller.rb
<pre>&lt;code&gt;redirect_to root_url, notice: &quot;You have been logged out.&quot;&lt;/code&gt;</pre>
But it can be used for more than that, any time that you redirect and want to pass along some state without making it part of the URL.

These are some things I’ve used it for.
<h2>Identifiers for more complex messages</h2>
Maybe you want to show a more complex message after signing up, containing things like links and bullet points.

Rather than send all that in the flash, you can send some identifier that your views know how to handle.

This could be the name of a partial:

app/controllers/users_controller.rb
<pre>class UsersController &lt; ApplicationController
  def create
   @user = actually_create_user
   flash[:partial] = &quot;welcome&quot;
   redirect_to some_path
 end
end</pre>


&nbsp;
app/views/layouts/application.html.haml
</figcaption>
<div>
<pre>- if flash[:partial]
 = render partial: &quot;shared/flashes/#{flash[:partial]}&quot;</pre>
app/views/shared/flashes/_welcome.html.haml

</div>

<pre>%p Welcome!
 %ul
   %li= link_to(&quot;Do this!&quot;, this_path)
   %li= link_to(&quot;Do that!&quot;, that_path)</pre>
</figure>

&nbsp;


Or just a flag:



&nbsp;

app/controllers/users_controller.rb
<div>
<pre>&lt;code&gt;flash[:signed_up] = true redirect_to root_path&lt;/code&gt;</pre>
</div>
</figure> <figure> <figcaption>app/views/welcomes/show.html.haml</figcaption>
<div>
<pre>&lt;code&gt;- if flash[:signed_up] %p Welcome!&lt;/code&gt;</pre>
</div>
</figure>

&nbsp;

&nbsp;

&nbsp;
<h2>Pass on the referer</h2>
Say you have some filter redirecting incoming requests. Maybe you’re detecting the locale and adding it to the URL, or verifying credentials.

You can use the flash to make sure the redirected-to controller gets the original referer.

&nbsp;

<figure> <figcaption>app/controllers/application_controller.rb</figcaption>
<div>
<pre>class ApplicationController &lt; ActionController::Base
 before_filter :make_locale_explicit

  private
  def make_locale_explicit
    if params[:locale].blank? &amp;&amp; request.get?
      flash[:referer] = request.referer
      redirect_to params.merge(locale: I18n.locale)
    end
  end
end</pre>
</div>
</figure>

&nbsp;

&nbsp;

&nbsp;

Now, any controller that cares about the referer could get it with:
<pre>&lt;code&gt;flash[:referer] || request.referer&lt;/code&gt;</pre>
<h2>Google Analytics events</h2>
Say you want to track a <a href="https://developers.google.com/analytics/devguides/collection/gajs/eventTrackerGuide">Google Analytics event</a> event with JavaScript when a user has signed up. You could do something like this.

Send event data from the controller:

&nbsp;

<figure> <figcaption>app/controllers/users_controller.rb</figcaption>
<div>
<pre>class UsersController &lt; ApplicationController
  def create
    @user = actually_create_user
    flash[:events] = [ [&quot;_trackEvent&quot;, &quot;users&quot;, &quot;signup&quot;] ]
    redirect_to some_path
  end
end</pre>
</div>
</figure>

&nbsp;


Then turn it into JavaScript in your view:

&nbsp;

<figure> <figcaption>app/helpers/layout_helper.rb</figcaption>
<div>
<pre>def analytics_events
  Array(flash[:events]).map do |event|
    &quot;_gaq.push(#{raw event.to_json});&quot;
  end.join(&quot;\n&quot;)
end</pre>
</div>
</figure> <figure> <figcaption>app/views/layouts/application.html.haml</figcaption>
<div>
<pre>:javascript
  = analytics_events</pre>
</div>
</figure>

&nbsp;

&nbsp;

&nbsp;
<h2>The flash vs. params</h2>
You may have considered that any of the above could have be done with query parameters instead. Including common flash messages:
&nbsp;

<figure> <figcaption>app/controllers/sessions_controller.rb</figcaption>
<div>
<pre>redirect_to root_url(notice: &quot;You have been logged out.&quot;)</pre>
<span style="font-size: small;"><span style="line-height: normal;">
</span></span>

</div>
</figure> <figure> <figcaption>app/views/layouts/application.html.haml</figcaption>
<div>
<pre>- if params[:notice]
  %p= params[:notice]</pre>
</div>
</figure>

&nbsp;

Using the flash means that the passed data doesn’t show in the URL, so it won’t happen twice if the link is shared, bookmarked or reloaded. Also the URL will be a little cleaner.

Additionally, the user can’t manipulate the flash, as it’s stored in the session. This adds some protection. If the flash partial example above used <code>params</code>, a user could pass in <code>../../admin/some_partial</code> to see things they shouldn’t.
<h2>Fin</h2>
I’d love to hear about what unconventional uses you’ve put the flash to!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>594</wp:post_id>
		<wp:post_date>2012-08-24 00:04:01</wp:post_date>
		<wp:post_date_gmt>2012-08-23 16:04:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-rails-flash-isnt-just-for-messages</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="analytics"><![CDATA[Analytics]]></category>
		<category domain="post_tag" nicename="events"><![CDATA[events]]></category>
		<category domain="post_tag" nicename="flash"><![CDATA[flash]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="message"><![CDATA[message]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails里的Magic Column Names</title>
		<link></link>
		<pubDate>Sun, 26 Aug 2012 16:37:38 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=604</guid>
		<description></description>
		<content:encoded><![CDATA[Active Record有一些富有“魔力”的列名:

<strong>created_at， created_on， updated_at， updated_on</strong>
在create或者update一行时Rails对_at形式的列用timestamp自动更新，对_on形式的列用date自动更新

<strong>lock_version</strong>
如果一个表有lock_version这个列，则Rails会跟踪一行的版本号并执行乐观锁

<strong>type</strong>
单表继承时跟踪一行的type

<strong>id</strong>
表的默认主键名

<strong>xxx_id</strong>
对以复数形式的xxx命名的表的引用的默认外键名

<strong>xxx_count</strong>
对子表xxx维护一个计数器cache

<strong>position</strong>
acts_as_list时用来表示一个list中该行的position

<strong>parent_id</strong>
acts_as_tree时用来表示该行的parent的id]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>604</wp:post_id>
		<wp:post_date>2012-08-27 00:37:38</wp:post_date>
		<wp:post_date_gmt>2012-08-26 16:37:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails%e9%87%8c%e7%9a%84magic-column-names</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="column"><![CDATA[column]]></category>
		<category domain="post_tag" nicename="names"><![CDATA[Names]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails counter cache</title>
		<link></link>
		<pubDate>Sun, 26 Aug 2012 16:44:20 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=606</guid>
		<description></description>
		<content:encoded><![CDATA[这次就是讲用_count字段来缓存has_many的计数 

看Project和Task的例子:
<div id="">
<pre><h1>Projects</h1>

<table>
<% for project in @projects %>
  <tr>
    <td><%= link_to project.name, poject_path(project) %></td>
    <td><small>(<%= pluralize project.tasks.size, 'task' %>)</small></td>
  </tr>
<% end %>
</table>
</pre>
</div>
<pre>上面的页面代码对所有的@projects显示tasks.size，看下log:</pre>
<div id="">
<pre>SQL (0.006385)  SELECT count(*) AS count_all FROM tasks WHERE (tasks.project_id = 326)
SQL (0.000220)  SELECT count(*) AS count_all FROM tasks WHERE (tasks.project_id = 327)
SQL (0.000383)  SELECT count(*) AS count_all FROM tasks WHERE (tasks.project_id = 328)
SQL (0.000197)  SELECT count(*) AS count_all FROM tasks WHERE (tasks.project_id = 329)
SQL (0.000215)  SELECT count(*) AS count_all FROM tasks WHERE (tasks.project_id = 330)</pre>
</div>
<pre>上面显示了对每个project都使用SQL来count tasks，我们采用eager loading看看能否改进性能:</pre>
<div id="">
<pre>class ProjectsController &lt; ApplicationController
  def index
    @projects = Project.find(:all, :include =&gt; :tasks)
  end
end</pre>
</div>
<pre>再来看看log:</pre>
<div id="">
<pre>Project Lood Incluing Associations (0.000954)  SELECT projects.'id' AS t0_r0, projects.'name' AS t0_r1, tasks.'id'
AS t1_r0, tasks.'name' AS t1_r1, tasks.'project_id' AS t1_r2 FROM projects LEFT OUTER JOIN tasks ON tasks.project
_id = projects.id</pre>
</div>
<pre>我们看到，使用eager loading确实只用一条SQL语句就完成工作，但是缺点是把tasks表所有的字段信息都取出来了，很多信息是 
没有用的。 

我们来看看更好的解决方案:</pre>
<div id="">
<pre>ruby script/generate migration add_tasks_count</pre>
</div>
<pre>我们新建一个migration，给projects表添加一个叫tasks_count的列:</pre>
<div id="">
<pre>class AddTasksCount &lt; ActiveRecord::Migration
  def self.up
    add_column :projects, :tasks_count, :integer, :default =&gt; 0

    Project.reset_column_information
    Project.find(:all).each do |p|
      p.update_attribute :tasks_count, p.tasks.length
    end
  end

  def self.down
    remove_column :projects, :tasks_count
  end
end</pre>
</div>
<pre>我们还需要告诉Task类开启counter cache:</pre>
<div id="">
<div>
<pre>class Task &lt; ActiveRecord::Base
  belongs_to :projects, :counter_cache =&gt; true
end</pre>
</div>
</div>
<pre>好了，我们把ProjectsController的index方法改回lazy loading，刷新页面，再看看log:</pre>
<div id="">
<pre>Project Lood (0.000295)  SELECT * FROM projects</pre>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>606</wp:post_id>
		<wp:post_date>2012-08-27 00:44:20</wp:post_date>
		<wp:post_date_gmt>2012-08-26 16:44:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-counter-cache</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cache"><![CDATA[cache]]></category>
		<category domain="post_tag" nicename="counter"><![CDATA[counter]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Advanced Caching: Part 1 - Caching Strategies</title>
		<link></link>
		<pubDate>Wed, 29 Aug 2012 15:15:06 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=610</guid>
		<description></description>
		<content:encoded><![CDATA[First, let's start with a brief overview of the different types of caching. We'll start from 50,000ft and work our way down.

HTTP Caching: Uses HTTP headers (Last-Modified, ETag, If-Modified-Since, If-None-Match, Cache-Control) to determine if the browser can use a locally stored version of the response or if it needs to request a fresh copy from the origin server. Rails makes it easy to use HTTP caching, however the cache is managed outside your application. You may have notice the config.cache_control and Rack::Cache, Rack::ETag, Rack::ConditionalGet middlewares. These are used for HTTP caching.

Page Caching: PRAISE THE GODS if you actually can use page caching in your application. Page caching is the holy grail. Save the entire thing. Don't hit the stack & give some prerendered stuff back. Great for worthless applications without authentication and other highly dynamic aspects. This essentially works like HTTP caching, but the response will always contain the entire page. With page caching the application is skipping the work.

Action Caching: Essentially the same as page caching, except all the before filters are run allowing you to check authentication and other stuff that may have prevented the request form rendering.

Fragment Caching: Store parts of views in the cache. Usually for caching partials or large bits of HTML that are independent from other parts. IE, a list of top stories or something like that.

Rails.cache: All cached content except cached pages are stored in the Rails.cache. We'll use this fact that later. You can cache arbitrary content in the Rails cache. You may cache a large complicated query that you don't want to wait to reinstantiate a ton of ActiveRecord::Base objects.

Under the Hood
All the caching layers are built on top of the next one. Page caching and HTTP caching are different because they do not use Rails.cache The cache is essentially a key-value store. Different things can be persisted. Strings are most common (for HTML fragments). More complicated objects can be persisted as well. Let's go through some examples of manually using the cache to store things. I am using memcached with dalli for all these examples. Dalli is the default memcached driver.

# Rails.cache.write takes two values: key and a value
> Rails.cache.write 'foo', 'bar'
=> true

# We can read an object back
> Rails.cache.read 'foo'
=> "bar"

# We can store a complicated object as well
> hash = { :this => { :is => 'a hash' }}
> Rails.cache.write 'complicated-object', object
> Rails.cache.read 'complicated-object'
=> {:this=>{:is=>"a hash"}}

# If we want something that doesn't exist, we get nil
> Rails.cache.read 'we-havent-cached-this-yet'
=> nil

# "Fetch" is the most common pattern. You give it a key and a block
# to execute to store if the cache misses. The blocks's return value is
# then written to the cache. The block is not executed if there is a
# hit.
> Rails.cache.fetch 'huge-array' do
    huge_array = Array.new
    1000000.times { |i| huge_array << i }
    huge_array # retrun value is stored in cache
  end
=> [huge array] # took some time to generate
> Rails.cache.read 'huge-array'
=> [huge array] # but returned instantly

# You can also delete everything from the cache
> Rails.cache.clear 
=> [true]
Those are the basics of interacting with the Rails cache. The rails cache is a wrapper around whatever functionality is provided by the underlying storage system. Now we are ready to move up a layer.

Understanding Fragment Caching
Fragment caching is taking rendered HTML fragments and storing them in the cache. Rails provides a cache view helper for this. Its most basic form takes no arguments besides a block. Whatever is rendered during the block will be written back to the cache. The basic principle behind fragment caching is that it takes much less time fetch pre-rendered HTML from the cache, then it takes to generate a fresh copy. This is appallingly true. If you haven't noticed, view generation can be very costly. If you have cachable content and are not using fragment caching then you need to implement this right away! Let's say you have generated a basic scaffold for a post:

$ rails g scaffold post title:string content:text author:string
Let's start with the most common use case: caching information specific to one thing. IE: One post. Here is a show view:

<!-- nothing fancy going on here -->
<p>
  <b>Title:</b>
  <%= @post.title %>
</p>

<p>
  <b>Content:</b>
  <%= @post.content %>
</p>
Let's say we wanted to cache fragment. Simply wrap it in cache and Rails will do it.

<%= cache "post-#{@post.id}" do %>
  <p>
    <b>Title:</b>
    <%= @post.title %>
  </p>

  <p>
    <b>Content:</b>
    <%= @post.content %>
  </p>
<% end %>
The first argument is the key for this fragment. The rendered HTML is stored with this key: views/posts-1. Wait what? Where did that 'views' come from? The cache view helper automatically prepends 'views' to all keys. This is important later. When you first load the page you'll see this in the log:

Exist fragment? views/post-2 (1.6ms)
Write fragment views/post-2 (0.9ms)
You can see the key and the operations. Rails is checking to see if the specific key exists. It will fetch or write it. In this case, it has not been stored so it is written. When you reload the page, you'll see a cache hit:

Exist fragment? views/post-2 (0.6ms)
Read fragment views/post-2 (0.0ms)
There we go. We got HTML from the cache instead of rendering it. Look at the response times for the two requests:

Completed 200 OK in 17ms (Views: 11.6ms | ActiveRecord: 0.1ms)
Completed 200 OK in 16ms (Views: 9.7ms | ActiveRecord: 0.1ms)
Very small differences in this case. 2ms different in view generation. This is a very simple example, but it can make a world of difference in more complicated situations.

You are probably asking the question: "What happens when the post changes?" This is an excellent question! What well if the post changes, the cached content will not be correct. It is up to us to remove stuff from the cache or figure out a way to get new content from the cache. Let's assume that our blog posts now have comments. What happens when a comment is created? How can handle this?

This is a very simple problem. What if we could figure out a solution to this problem: How can we create a cache miss when the associated object changes? We've already demonstrated how we can explicitly set a cache key. What if we made a key that's dependent on the time the object was last updated? We can create a key composed of the record's ID and its updated_at timestamp! This way the cache key will change as the content changes and we will not have to expire things manually. (We'll come back to sweepers later). Let's change our cache key to this:

<% cache "post-#{@post.id}", @post.updated_at.to_i do %>
Now we can see we have a new cache key that's dependent on the object's timestamp. Check out the rails log:

Exist fragment? views/post-2/1304291241 (0.5ms)
Write fragment views/post-2/1304291241 (0.4ms)
Cool! Now let's make it so creating a comment updates the post's timestamp:

class Comment < ActiveRecord::Base
  belongs_to :post, :touch => true
end
Now all comments will touch the post and change the updated_at timestamp. You can see this in action by touch'ing a post.

Post.find(1).touch

Exist fragment? views/post-2/1304292445 (0.4ms)
Write fragment views/post-2/1304292445 (0.4ms)
This concept is known as: auto expiring cache keys. You create a composite key with the normal key and a time stamp. This will create some memory build up as objects are updated and no longer fresh. Here's an example. You have that fragment. It is cached. Then someone updates the post. You now have two versions of the fragment cached. If there are 10 updates, then there are 10 different versions. Luckily for you, this is not a problem for memcached! Memcached uses a LRU replacement policy. LRU stands for Least Recently Used. That means the key that hasn't been requested in the longest time will be replaced by newer content when needed. For example, assume your cache can only hold 10 posts. The next update will create a new key and hence new content. Version 0 will be deleted and version 11 will be stored in the cache. The total amount of memory is cycled between things that are requested. There are two things to consider in this approach. 1: You will not be able to ensure that content is kept in the cache as long as possible. 2. You will never have to worry about expiring things manually as long as timestamps are updated in the model layer. I've found it is orders of magnitude easier to add a few :touch => true's to my relationships than it is to maintain sweepers. More on sweepers later. We must continue exploring cache keys.

Rails uses auto-expiring cache keys by default. The problem is they are not mentioned at all the documentation or in the guides. There is one very handy method: ActiveRecord::Base.cache_key. This will generate a key like this: posts/2-20110501232725. This is the exact same thing we did ourselves. This method is very important because depending on what type of arguments you pass into the cache method, a different key is generated. For the time being, this code is functionally equal to our previous examples.

<%= cache @post do %>
The cache helper takes different forms for arguments. Here are some examples:

cache 'explicit-key'      # views/explicit-key
cache @post               # views/posts/2-1283479827349
cache [@post, 'sidebar']  # views/posts/2-2348719328478/sidebar
cache [@post, @comment]   # views/posts/2-2384193284878/comments/1-2384971487
cache :hash => :of_things # views/localhost:3000/posts/2?hash_of_things
If an Array is the first arguments, Rails will use cache key expansion to generate a string key. This means calling doing logic on each object then joining each result together with a '/'. Essentially, if the object responds to cache_key, it will use that. Else it will do various things. Here's the source for expand_cache_key:

def self.expand_cache_key(key, namespace = nil)
  expanded_cache_key = namespace ? "#{namespace}/" : ""

  prefix = ENV["RAILS_CACHE_ID"] || ENV["RAILS_APP_VERSION"]
  if prefix
    expanded_cache_key << "#{prefix}/"
  end

  expanded_cache_key <<
    if key.respond_to?(:cache_key)
      key.cache_key
    elsif key.is_a?(Array)
      if key.size > 1
        key.collect { |element| expand_cache_key(element) }.to_param
      else
        key.first.to_param
      end
    elsif key
      key.to_param
    end.to_s

  expanded_cache_key
end
This is where all the magic happens. Our simple fragment caching example could easily be converted into an idea like this: The post hasn't changed, so cache the entire result of /posts/1. You can do with this action caching or page caching.

Moving on to Action Caching
Action caching is an around filter for specific controller actions. It is different from page caching since before filters are run and may prevent access to certain pages. For example, you may only want to cache if the user is logged in. If the user is not logged in they should be redirected to the log in page. This is different than page caching. Page caching bypasses the rails stack completely. Most web applications of legitimate complexity cannot use page caching. Action caching is the next logical step for most web applications. Let's break the idea down: If the post hasn't changed, return the entire cached page as the HTTP response, else render the show view, cache it, and return that as the HTTP response. Or in code:

# Note: you cannot run this code! This is just an example of what's
# happening under the covers using concepts we've already covered.
Rails.cache.fetch 'views/localhost:3000/posts/1' do
  @post = Post.find params[:id]
  render :show
end
Declaring action caching is easy. Here's how you can cache the show action:

class PostsController < ApplicationController

  caches_action :show

  def show
    # do stuff
  end
end
Now refresh the page and look at what's been cached.

Started GET "/posts/2" for 127.0.0.1 at 2011-05-01 16:54:43 -0700
  Processing by PostsController#show as HTML
  Parameters: {"id"=>"2"}
Read fragment views/localhost:3000/posts/2 (0.5ms)
Rendered posts/show.html.erb within layouts/application (6.1ms)
Write fragment views/localhost:3000/posts/2 (0.5ms)
Completed 200 OK in 16ms (Views: 8.6ms | ActiveRecord: 0.1ms)
Now that the show action for post #2 is cached, refresh the page and see what happens.

Started GET "/posts/2" for 127.0.0.1 at 2011-05-01 16:55:27 -0700
  Processing by PostsController#show as HTML
  Parameters: {"id"=>"2"}
Read fragment views/localhost:3000/posts/2 (0.6ms)
Completed 200 OK in 1ms
Damn. 16ms vs 1ms. You can see the difference! You can also see Rails reading that cache key. The cache key is generated from the url with action caching. Action caching is a combination of a before and around filter. The around filter is used to capture the output and the before filter is used to check to see if it's been cached. It works like this:

Execute before filter to check to see if cache key exists?
Key exists? - Read from cache and return HTTP Response. This triggers a render and prevents any further code from being executed.
No key? - Call all controller and view code. Cache output using Rails.cache and return HTTP response.
Now you are probably asking the same question as before: "What do we do when the post changes?" We do the same thing as before: we create a composite key with a string and a time stamp. The question now is, how do we generate a special key using action caching?

Action caching generates a key from the current url. You can pass extra options using the :cache_path option. Whatever is in this value is passed into url_for using the current parameters. Remember in the view cache key examples what happened when we passed in a hash? We get a much different key than before:

views/localhost:3000/posts/2?hash_of_things
Rails generated a URL based key instead of the standard views key. This is because you may different servers. This ensures that each server has it's own cache key. IE, server one does not collide with server two. We could generate our own url for this resource by doing something like this:

url_for(@post, :tag => @post.updated_at.to_i)
This will generate this url:

http://localhost:3000/posts/1?tag=234897123978
Notice the ?tag=23481329847. This is a hack that aims to stop browsers from using HTTP caching on specific urls. If the URL has changed (timestamp changes) then the browser knows it must request a fresh copy. Rails 2 used to do this for assets like CSS and JS. Things have changed with the asset pipeline.

Here's an example of generating a proper auto expring key for use with action caching.

caches_action :show, :cache_path => proc { |c|
  # c is the instance of the controller. Since action caching
  # is declared at the class level, we don't have access to instance
  # variables. If cache_path is a proc, it will be evaluated in the
  # the context of the current controller. This is the same idea
  # as validations with the :if and :unless options
  #
  # Remember, what is returned from this block will be passed in as
  # extra parameters to the url_for method.
  post = Post.find c.params[:id]
  { :tag => post.updated_at.to_i }
end
This calls url_for with the parameters already assigned by it through the router and whatever is returned by the block. Now if you refresh the page, you'll have this:

Started GET "/posts/2" for 127.0.0.1 at 2011-05-01 17:11:22 -0700
  Processing by PostsController#show as HTML
  Parameters: {"id"=>"2"}
Read fragment views/localhost:3000/posts/2?tag=1304292445 (0.5ms)
Rendered posts/show.html.erb within layouts/application (1.7ms)
Write fragment views/localhost:3000/posts/2?tag=1304292445 (0.5ms)
Completed 200 OK in 16ms (Views: 4.4ms | ActiveRecord: 0.1ms)
And volia! Now we have an expiring cache key for our post! Let's dig a little deeper. We know the key. Let's look into the cache and see what it actually is! You can see the key from the log. Look it up in the cache.

> Rails.cache.read 'views/localhost:3000/posts/2?tag=1304292445'
=> "<!DOCTYPE html>\n<html>\n<head>....."
It's just a straight HTML string. Easy to use and return as the body. This method works well for singular resources. How can we handle the index action? I've created 10,000 posts. It takes a good amount of time to render that page on my computer. It takes over 10 seconds. The question is, how can we cache this? We could use the most recently updated post for the time stamp. That way, when one post is updated, it will move to the top and create a new cache key. Here is the code without any action caching:

Started GET "/posts" for 127.0.0.1 at 2011-05-01 17:18:11 -0700
  Processing by PostsController#index as HTML
  Post Load (54.1ms)  SELECT "posts".* FROM "posts" ORDER BY updated_at DESC LIMIT 1
Read fragment views/localhost:3000/posts?tag=1304292445 (1.5ms)
Rendered posts/index.html.erb within layouts/application (9532.3ms)
Write fragment views/localhost:3000/posts?tag=1304292445 (36.7ms)
Completed 200 OK in 10088ms (Views: 9535.6ms | ActiveRecord: 276.2ms)
Now with action caching:

Started GET "/posts" for 127.0.0.1 at 2011-05-01 17:20:47 -0700
  Processing by PostsController#index as HTML
Read fragment views/localhost:3000/posts?tag=1304295632 (1.0ms)
Completed 200 OK in 11ms
Here's the code for action caching:

caches_action :index, :cache_path => proc {|c|
  { :tag => Post.maximum('updated_at') }
}
We'll come back to this situation later. This is a better way to do this. Points to the reader if they know the problem.

These are simple examples designed to show you who can create auto expiring keys for different situations. At this point we have not had to expire any thing ourselves! The keys have done it all for us. However, there are some times when you want more precise control over how things exist in the cache. Enter Sweepers.

Sweepers
Sweepers are HTTP request dependent observers. They are loaded into controllers and observe models the same way standard observers do. However there is one very important different. They are only used during HTTP requests. This means if you have things being created outside the context of HTTP requests sweepers will do you no good. For example, say you have a background process running that syncs with an external system. Creating a new model will not make it to any sweeper. So, if you have anything cached. It is up to you to expire it. Everything I've demonstrated so far can be done with sweepers.

Each cache_* method has an opposite expire_* method. Here's the mapping:

caches_page , expire_page
caches_action , expire_action
cache , expire_fragment
Their arguments work the same with using cache key expansion to find a key to read or delete. Depending on the complexity of your application, it may be easy to use sweepers or it may be impossible. It's easy to use sweepers with these examples. We only need to tie into the save event. For example, when a update or delete happens we need to expire the cache for that specific post. When a create, update, or delete happens we need to expire the index action. Here's what the sweeper would look like:

class PostSweeper < ActionController::Caching::Sweeper
  observe Post

  def after_create(post)
    expire_action :index
    expire_action :show, :id => post
    # this is the same as the previous line
    expire_action :controller => :posts, :action => :show, :id => @post.id
  end
end

# then in the controller, load the sweeper
class PostsController < ApplicationController
  cache_sweeper :post_sweeper
end
I will not go into much depth on sweepers because they are the only thing covered in the rails caching guide. The work, but I feel they are clumsy for complex applications. Let's say you have comments for posts. What do you do when a comment is created for a post? Well, you have to either create a comment sweeper or load the post sweeper into the comments controller. You can do either. However, depending on the complexity of your model layer, it may quickly become infeasible to do cache expiration with sweepers. For example, let say you have a Customer. A customer has 15 different types of associated things. Do you want to put the sweeper into 15 different controllers? You can, but you may forget to at some point.

The real problem with sweepers is that they cannot be used once your application works outside of HTTP requests. They can also be clumsy. I personally feel it's much easier to create auto expiring cache keys and only uses sweepers when I want to tie into very specific events. I'd also argue that any well designed system does not need sweepers (or at least in very minimally).

Now you should have a good grasp on how the Rails caching methods work. We've covered how fragment caching uses the current view to generate a cache key. We introduced the concept of auto expiring cache keys using ActiveRecord#cache_key to automatically expire cached content. We introduced action caching and how it uses url_for to generate a cache key. Then we covered how you can pass things into url_for to generate a time stamped key to expire actions automatically. Now that we understand these lower levels we can move up to page caching and HTTP caching.

Page Caching
Page caching bypasses the entire application by serving up a file in /public from disk. It is different from action or fragment caching for a two reasons: content is not stored in memory and content is stored directly on the disk. You use page caching the same way you use action caching. This means you can use sweepers and and all the other things associated with them. Here's how it works.

Webserver accepts an incoming request: GET /posts
File exists: /public/posts.html
posts.html is returned
Your application code is never called.
Since pages are written like public assets they are served as such. You will expliclity have to expire them. Warning! Forgetting to expire pages will cause you greif because you application code will not be called. Here's an example of page caching:

PostsController < ApplicationController
  caches_page :index

  def index
    # do stuff
  end
When the server receives a request to GET /posts it will write the response from the application to /public/posts.html. The .html part is the format for that request. For example you can use page caching with JSON. GET /posts.json would generate /public/posts.json.

Page caching is basically poor man's HTTP caching without any real benefits. HTTP caching is more useful.

I've not covered page caching in much depth because it's very likely that if you're reading this page caching is not applicable to your application. The Rails guides cover page caching in decent fashion. Follow up there if you need more information.

HTTP Caching
HTTP caching is the most complex and powerful caching strategy you can use. With great power comes great responsiblity. HTTP caching works at the protocol level. You can configure HTTP caching so the browser doesn't even need to contact your server at all. There are many ways HTTP caching can be configured. I will not cover them all here. I will give you an overview on how the system works and cover some common use cases.

How It Works
HTTP caching works at the protocol level. It uses a combination of headers and response codes to indicate weather the user agent should make a request or use a locally stored copy instead. The invalidation or expiring is based on ETags and Last-Modified timestamps. ETag stands for "entity tag". It's a unique fingerprint for this request. It's usually a checksum of the respnose body. Origin servers (computers sending the source content) can set either of these fields along with a Cache-Control header. The Cache-Control header tells the user agent what it can do with this response. It answers questions like: how long can I cache this for and am I allowed to cache it? When the user agent needs to make a request again it sends the ETag and/or the Last-Modified date to the origin server. The origin server decides based on the ETag and/or Last-Modified date if the user agent can use the cached copy or if it should use new content. If the server says use the cached content it will return status 304: Not Modified (aka fresh). If not it should return a 200 (cache is stale) and the new content which can be cached.

Let's use curl to see how this works out:

$ curl -I http://www.example.com
HTTP/1.1 200 OK
Cache-Control: max-age=0, private, must-revalidate
Content-length: 822
Content-Type: text/html
Date: Mon, 09 Jul 2012 22:46:29 GMT
Last-Modified: Mon, 09 Jul 2012 21:22:11 GMT
Status: 200 OK
Vary: Accept-Encoding
Connection: keep-alive
The Cache-Control header is a tricky thing. There are many many ways it can be configured. Here's the two easiest ways to break it down: private means only the final user agent can store the response. Public means any server can cache this content. (You know requests may go through many proxies right?). You can specify an age or TTL. This is how long it can be cached for. Then there is another common situation: Don't check with the server or do check with the server. This particular Cache-Control header means: this is a private (think per user cache) and check with the server everytime before using it.

We can trigger a cache hit by sending the apporiate headers with the next request. This response only has a Last-Modified date. We can send this date for the server to compare. Send this value in the If-Modified-Since header. If the content hasn't changed since that date the server should return a 304. Here's an example using curl:

$ curl -I -H "If-Modified-Since: Mon, 09 Jul 2012 21:22:11 GMT" http://www.example.com
HTTP/1.1 304 Not Modified
Cache-Control: max-age=0, private, must-revalidate
Date: Mon, 09 Jul 2012 22:55:53 GMT
Status: 304 Not Modified
Connection: keep-alive
This response has no body. It simply tells the user agent to use the locally stored version. We could change the date and get a different response.

$ curl -I -H "If-Modified-Since: Sun, 08 Jul 2012 21:22:11 GMT" http://www.example.com
HTTP/1.1 200 OK
Cache-Control: max-age=0, private, must-revalidate
Content-length: 822
Content-Type: text/html
Date: Mon, 09 Jul 2012 22:57:19 GMT
Last-Modified: Mon, 09 Jul 2012 21:22:11 GMT
Status: 200 OK
Vary: Accept-Encoding
Connection: keep-alive
Caches determine freshness based on the If-None-Match and/or If-Modified-Since date. Using our existing 304 response we can supply a random etag to trigger a cache miss:

$ curl -I -H 'If-None-Match: "foo"' -H "If-Modified-Since: Mon, 09 Jul 2012 21:22:11 GMT" http://www.example.com
HTTP/1.1 304 Not Modified
Cache-Control: max-age=0, private, must-revalidate
Date: Mon, 09 Jul 2012 22:55:53 GMT
Status: 304 Not Modified
Connection: keep-alive
Etags are sent using the If-None-Match header. Now that we understand the basics we can move onto higher level discussion.

Rack::Cache
HTTP caching is implemented in the webserver itself or at the application level. It is implemented at the application level in Rails. Rack::Cache is a middleware that sits at the top of the stack and intercepts requests. It will pass requests down to your app and store their contents. Or will it call down to your app and see what ETag and/or timestamps it returns for validation purposes. Rack::Cache acts as a proxy cache. This means it must respect caching rules described in the Cache-Control headers coming out of your app. This means it cannot cache private content but it can cache public content. Cachable content is stored in memcached. Rails configures this automatically.

I'll cover one use case to illustrate how code flows through middleware stack to the actual app code and back up. Let's use a private per user cache example. Here's the cache control header: max-age-0, private, must-revalidate. Pretend this is some JSON API.

The client sends initial request to /api/tweets.json
Rack::Cache sees the request and ignores it since there is no caching information along with it.
Application code is called. It returns a 200 response with a date and the some Cache-Control header.
The client makes another request to /api/tweets.json with an If-Modified-Since header matching the date from the previous request.
Rack::Cache sees that his request has cache information associated with it. It checks to see how it should handle this request. According to the Cache-Control header it has expired and needs to be checked to see if it's ok to use. Rack::Cache calls the application code.
Application returns a response with the same date.
Rack::Cache recieves the response, compares the dates and determines that it's a hit. Rack::Cache sends a 304 back.
The client uses response body from request in step 1.
HTTP Caching in Rails
Rails makes it easy to implement HTTP caching inside your controllers. Rails provides two methods: stale? and fresh_when. They both do the same thing but in opposite ways. I prefer to use stale? because it makes more sense to me. stale? reminds more of Rails.cache.fetch so I stick with that. stale? works like this: checks to see if the incoming request ETag and/or Last-Modified date matches. If they match it calls head :not_modified. If not it can call a black of code to render a response. Here is an example:

def show
  @post = Post.find params[:id]
  stale? @post do
    respond_with @post
  end
end
Using stale? with an ActiveRecord object will automatically set the ETag and Last-Modified headers. The Etag is set to a MD5 hash of the objects cache_key method. The Last-Modified date is set to the object's updated_at method. The Cache-Control header is set to max-age=0, private, must-revalidate by default. All these values can be changed by passing in options to stale? or fresh_when. The methods take three options: :etag, :last_modified, and :public. Here are some more examples:

# allow proxy caches to store this result
stale? @post, :public => true do
  respond_with @post
end

# Let's stay your posts are frozen and have no modifications
stale? @post, :etag => @post.posted_at do
  respond_with @post
end
Now you should understand how HTTTP caching works. Here are the important bits of code inside Rails showing it all works.

# File actionpack/lib/action_controller/metal/conditional_get.rb, line 39
def fresh_when(record_or_options, additional_options = {})
  if record_or_options.is_a? Hash
    options = record_or_options
    options.assert_valid_keys(:etag, :last_modified, :public)
  else
    record  = record_or_options
    options = { :etag => record, :last_modified => record.try(:updated_at) }.merge(additional_options)
  end

  response.etag          = options[:etag]          if options[:etag]
  response.last_modified = options[:last_modified] if options[:last_modified]
  response.cache_control[:public] = true if options[:public]

  head :not_modified if request.fresh?(response)
end
Here is the code for fresh?. This code should help you if you are confused on how resquests are validated. I found this code much easier to understand than the official spec.

def fresh?(response)
  last_modified = if_modified_since
  etag          = if_none_match

  return false unless last_modified || etag

  success = true
  success &&= not_modified?(response.last_modified) if last_modified
  success &&= etag_matches?(response.etag) if etag
  success
end

<h2>Index</h2>
<ol>
	<li><a href="http://www.broadcastingadam.com/2012/07/advanced_caching_part_1-caching_strategies">Caching Strategies</a></li>
	<li><a href="http://www.broadcastingadam.com/2012/07/advanced_caching_part_2-using_strategies">Using Strategies Effectively</a></li>
	<li><a href="http://www.broadcastingadam.com/2012/07/advanced_caching_part_3-static_assets">Handling Static Assets</a></li>
	<li><a href="http://www.broadcastingadam.com/2012/07/advanced_caching_part_4-stepping_outside_the_http_request">Stepping Outside the HTTP Request</a></li>
	<li><a href="http://www.broadcastingadam.com/2012/07/advanced_caching_part_5-tag_based_caching">Tag Based Caching</a></li>
	<li><a href="http://www.broadcastingadam.com/2012/07/advanced_caching_part_6-fast_json_apis">Fast JSON APIs</a></li>
	<li><a href="http://www.broadcastingadam.com/2012/07/advanced_caching_part_7-tips_and_tricks">Tips and Tricks</a></li>
	<li><a href="http://www.broadcastingadam.com/2012/07/advanced_caching_part_8-conclusion">Conclusion</a></li>
</ol>
<h3>Contact Me</h3>
Find a problem or have a question about this post? <a href="http://twitter.com/adman65/">@adman65</a> on Twitter or Adman65 on #freenode. Find me in (#rubyonrails or #sproutcore). You can find my code on <a href="http://github.com/twinturbo/">GitHub</a> or hit me up on <a href="https://plus.google.com/u/0/116377228668850173159">Google+</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>610</wp:post_id>
		<wp:post_date>2012-08-29 23:15:06</wp:post_date>
		<wp:post_date_gmt>2012-08-29 15:15:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>advanced-caching-part-1-caching-strategies</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="advanced"><![CDATA[advanced]]></category>
		<category domain="post_tag" nicename="cache"><![CDATA[cache]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_992fdee6957968386f9803907b0b18a1</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Chrome Keyboard and mouse shortcuts</title>
		<link></link>
		<pubDate>Thu, 30 Aug 2012 03:10:40 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=619</guid>
		<description></description>
		<content:encoded><![CDATA[<h3> Keyboard and mouse shortcuts</h3>
<h2>Windows keyboard shortcuts</h2>
<h3>Tab and window shortcuts</h3>
<table cellspacing="0" cellpadding="3">
<tbody>
<tr>
<td>Ctrl+N</td>
<td>Opens a new window.</td>
</tr>
<tr>
<td>Ctrl+T</td>
<td>Opens a new tab.</td>
</tr>
<tr>
<td>Ctrl+Shift+N</td>
<td>Opens a new window in incognito mode.</td>
</tr>
<tr>
<td>Press Ctrl+O, then select file.</td>
<td>Opens a file from your computer in Google Chrome.</td>
</tr>
<tr>
<td>Press Ctrl and click a link. Or click a link with your middle mouse button (or mousewheel).</td>
<td>Opens the link in a new tab in the background .</td>
</tr>
<tr>
<td>Press Ctrl+Shift and click a link. Or press Shift and click a link with your middle mouse button (or mousewheel).</td>
<td>Opens the link in a new tab and switches to the newly opened tab.</td>
</tr>
<tr>
<td>Press Shift and click a link.</td>
<td>Opens the link in a new window.</td>
</tr>
<tr>
<td>Ctrl+Shift+T</td>
<td>Reopens the last tab you've closed. Google Chrome remembers the last 10 tabs you've closed.</td>
</tr>
<tr>
<td>Drag a link to a tab.</td>
<td>Opens the link in the tab.</td>
</tr>
<tr>
<td>Drag a link to a blank area on the tab strip.</td>
<td>Opens the link in a new tab.</td>
</tr>
<tr>
<td>Drag a tab out of the tab strip.</td>
<td>Opens the tab in a new window.</td>
</tr>
<tr>
<td>Drag a tab out of the tab strip and into an existing window.</td>
<td>Opens the tab in the existing window.</td>
</tr>
<tr>
<td>Press Esc while dragging a tab.</td>
<td>Returns the tab to its original position.</td>
</tr>
<tr>
<td>Ctrl+1 through Ctrl+8</td>
<td>Switches to the tab at the specified position number on the tab strip.</td>
</tr>
<tr>
<td>Ctrl+9</td>
<td>Switches to the last tab.</td>
</tr>
<tr>
<td>Ctrl+Tab or Ctrl+PgDown</td>
<td>Switches to the next tab.</td>
</tr>
<tr>
<td>Ctrl+Shift+Tab or Ctrl+PgUp</td>
<td>Switches to the previous tab.</td>
</tr>
<tr>
<td>Alt+F4</td>
<td>Closes the current window.</td>
</tr>
<tr>
<td>Ctrl+W or Ctrl+F4</td>
<td>Closes the current tab or pop-up.</td>
</tr>
<tr>
<td>Click a tab with your middle mouse button (or mousewheel).</td>
<td>Closes the tab you clicked.</td>
</tr>
<tr>
<td>Right-click, or click and hold either the Back or Forward arrow in the browser toolbar.</td>
<td>Displays your browsing history in the tab.</td>
</tr>
<tr>
<td>Press Backspace, or Alt and the left arrow together.</td>
<td>Goes to the previous page in your browsing history for the tab.</td>
</tr>
<tr>
<td>Press Shift+Backspace, or Alt and the right arrow together.</td>
<td>Goes to the next page in your browsing history for the tab.</td>
</tr>
<tr>
<td>Press Ctrl and click either the Back arrow, Forward arrow, or Go button in the toolbar. Or click either button with your middle mouse button (or mousewheel).</td>
<td>Opens the button destination in a new tab in the background.</td>
</tr>
<tr>
<td>Double-click the blank area on the tab strip.</td>
<td>Maximizes or minimizes the window.</td>
</tr>
<tr>
<td>Alt+Home</td>
<td>Opens your homepage in your current window.</td>
</tr>
</tbody>
</table>
<h3>Google Chrome feature shortcuts</h3>
<table cellspacing="0" cellpadding="3">
<tbody>
<tr>
<td width="50%">Alt+F or Alt+E</td>
<td>Opens the wrench menu, which lets you customize and control settings in Google Chrome.</td>
</tr>
<tr>
<td width="50%">Ctrl+Shift+B</td>
<td>Toggles the bookmarks bar on and off.</td>
</tr>
<tr>
<td>Ctrl+H</td>
<td>Opens the History page.</td>
</tr>
<tr>
<td>Ctrl+J</td>
<td>Opens the Downloads page.</td>
</tr>
<tr>
<td>Shift+Esc</td>
<td>Opens the Task Manager.</td>
</tr>
<tr>
<td>Shift+Alt+T</td>
<td>Sets focus on the first tool in the browser toolbar. You can then use the following shortcuts to move around in the toolbar:
<ul>
	<li>Press Tab, Shift+Tab, Home, End, right arrow, and left arrow to move focus to different items in the toolbar.</li>
	<li>Press Space or Enter to activate toolbar buttons, including page actions and browser actions.</li>
	<li>Press Shift+F10 to bring up any associated context menu (e.g. browsing history for the Back button).</li>
	<li>Press Esc to return focus from the toolbar back to the page.</li>
</ul>
</td>
</tr>
<tr>
<td>F6 or Shift+F6</td>
<td>Switches focus to the next keyboard-accessible pane. Panes include:
<ul>
	<li>Highlights the URL in the address bar</li>
	<li>Bookmarks bar (if visible)</li>
	<li>The main web content (including any infobars)</li>
	<li>Downloads bar (if visible)</li>
</ul>
</td>
</tr>
<tr>
<td>Ctrl+Shift+J</td>
<td>Opens Developer Tools.</td>
</tr>
<tr>
<td>Ctrl+Shift+Delete</td>
<td>Opens the Clear Browsing Data dialog.</td>
</tr>
<tr>
<td>F1</td>
<td>Opens the Help Center in a new tab (our favorite).</td>
</tr>
<tr>
<td>Ctrl+Shift+M</td>
<td>Switch between multiple users.</td>
</tr>
</tbody>
</table>
<h3>Address bar shortcuts</h3>
Use the following shortcuts in the address bar:
<table cellspacing="0" cellpadding="3">
<tbody>
<tr>
<td width="50%">Type a search term, then press Enter.</td>
<td>Performs a search using your default search engine.</td>
</tr>
<tr>
<td>Type a search engine keyword, press Space, type a search term, and press Enter.</td>
<td>Performs a search using the search engine associated with the keyword.</td>
</tr>
<tr>
<td>Begin typing a search engine URL, press Tab when prompted, type a search term, and press Enter.</td>
<td>Performs a search using the search engine associated with the URL.</td>
</tr>
<tr>
<td>Ctrl+Enter</td>
<td>Adds www. and .com to your input in the address bar and open the resulting URL.</td>
</tr>
<tr>
<td>Type a URL, then press Alt+Enter.</td>
<td>Opens the URL in a new tab.</td>
</tr>
<tr>
<td>Ctrl+L or Alt+D</td>
<td>Highlights the URL.</td>
</tr>
<tr>
<td>Ctrl+K or Ctrl+E</td>
<td>Places a '?' in the address bar. Type a search term after the question mark to perform a search using your default search engine.</td>
</tr>
<tr>
<td>Press Ctrl and the left arrow together.</td>
<td>Moves your cursor to the preceding key term in the address bar</td>
</tr>
<tr>
<td>Press Ctrl and the right arrow together.</td>
<td>Moves your cursor to the next key term in the address bar</td>
</tr>
<tr>
<td>Ctrl+Backspace</td>
<td>Deletes the key term that precedes your cursor in the address bar</td>
</tr>
<tr>
<td>Select an entry in the address bar drop-down menu with your keyboard arrows, then press Shift+Delete.</td>
<td>Deletes the entry from your browsing history, if possible.</td>
</tr>
<tr>
<td>Click an entry in the address bar drop-down menu with your middle mouse button (or mousewheel).</td>
<td>Opens the entry in a new tab in the background.</td>
</tr>
<tr>
<td>Press Page Up or Page Down when the address bar drop-down menu is visible.</td>
<td>Selects the first or last entry in the drop-down menu.</td>
</tr>
</tbody>
</table>
<a name="webpage"></a>
<h3>Webpage shortcuts</h3>
<table cellspacing="0" cellpadding="3">
<tbody>
<tr>
<td width="50%">Ctrl+P</td>
<td>Prints your current page.</td>
</tr>
<tr>
<td>Ctrl+S</td>
<td>Saves your current page.</td>
</tr>
<tr>
<td>F5 or Ctrl+R</td>
<td>Reloads your current page.</td>
</tr>
<tr>
<td>Esc</td>
<td>Stops the loading of your current page.</td>
</tr>
<tr>
<td>Ctrl+F</td>
<td>Opens the find bar.</td>
</tr>
<tr>
<td>Ctrl+G or F3</td>
<td>Finds the next match for your input in the find bar.</td>
</tr>
<tr>
<td>Ctrl+Shift+G, Shift+F3, or Shift+Enter</td>
<td>Finds the previous match for your input in the find bar.</td>
</tr>
<tr>
<td>Click the middle mouse button (or mousewheel).</td>
<td>Activates auto-scrolling. As you move your mouse, the page automatically scrolls according to the direction of the mouse.</td>
</tr>
<tr>
<td>Ctrl+F5 or Shift+F5</td>
<td>Reloads your current page, ignoring cached content.</td>
</tr>
<tr>
<td>Press Alt and click a link.</td>
<td>Downloads the target of the link.</td>
</tr>
<tr>
<td>Ctrl+U</td>
<td>Opens the source of your current page.</td>
</tr>
<tr>
<td>Drag a link to bookmarks bar</td>
<td>Saves the link as a bookmark.</td>
</tr>
<tr>
<td>Ctrl+D</td>
<td>Saves your current webpage as a bookmark.</td>
</tr>
<tr>
<td width="50%">Ctrl+Shift+D</td>
<td>Saves all open pages as bookmarks in a new folder.</td>
</tr>
<tr>
<td>F11</td>
<td>Opens your page in full-screen mode. Press F11 again to exit full-screen.</td>
</tr>
<tr>
<td>Ctrl and +, or press Ctrl and scroll your mousewheel up.</td>
<td>Enlarges everything on the page.</td>
</tr>
<tr>
<td>Ctrl and -, or press Ctrl and scroll your mousewheel down.</td>
<td>Makes everything on the page smaller.</td>
</tr>
<tr>
<td>Ctrl+0</td>
<td>Returns everything on the page to normal size.</td>
</tr>
<tr>
<td>Space bar</td>
<td>Scrolls down the web page.</td>
</tr>
<tr>
<td>Home</td>
<td>Goes to the top of the page.</td>
</tr>
<tr>
<td>End</td>
<td>Goes to the bottom of the page.</td>
</tr>
<tr>
<td>Press Shift and scroll your mousewheel.</td>
<td>Scrolls horizontally on the page.</td>
</tr>
</tbody>
</table>
<h3>Text shortcuts</h3>
<table cellspacing="0" cellpadding="3">
<tbody>
<tr>
<td width="50%">Ctrl+C</td>
<td>Copies highlighted content to the clipboard.</td>
</tr>
<tr>
<td>Ctrl+V or Shift+Insert</td>
<td>Pastes content from the clipboard.</td>
</tr>
<tr>
<td>Ctrl+Shift+V</td>
<td>Paste content from the clipboard without formatting.</td>
</tr>
<tr>
<td>Ctrl+X or Shift+Delete</td>
<td>Deletes the highlighted content and copies it to the clipboard.</td>
</tr>
</tbody>
</table>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>619</wp:post_id>
		<wp:post_date>2012-08-30 11:10:40</wp:post_date>
		<wp:post_date_gmt>2012-08-30 03:10:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-chrome-keyboard-and-mouse-shortcuts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="chrome"><![CDATA[chrome]]></category>
		<category domain="post_tag" nicename="shurtcuts"><![CDATA[shurtcuts]]></category>
		<category domain="category" nicename="%e5%b7%a5%e5%85%b7%e6%8e%a7"><![CDATA[工具控]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>37signals Earns Millions Each Year. Its CEO’s Model? His Cleaning Lady</title>
		<link></link>
		<pubDate>Mon, 03 Sep 2012 14:55:33 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=621</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<header>
<h3>Don’t build a fast company, Jason Fried tells Fast Company. Build a slow one.</h3>
<figure><img title="" src="http://www.fastcompany.com/multisite_files/fastcompany/imagecache/640/poster/2012/08/3000852-poster-942-hs-37signals-earns-millions-each-year.jpg" alt="" width="640" height="299" /></figure></header>&nbsp;
<div>

Jason Fried is a founder and CEO of <a href="http://37signals.com/" target="_blank">37signals</a>, a software company based in Chicago. Fried also treats 37signals as something of a laboratory for innovative workplace practices--such as a recent experiment in shortening the summer workweek to just four days. We caught up with Fried to learn how employees are like fossil fuels, how a business can be like a cancer, and how one of the entrepreneurs he admires most is his cleaning lady.

<strong>FAST COMPANY: You have your employees only work four-day weeks in the summer.
</strong>
JASON FRIED: Sometimes people are not really used to working just four days and actually want to stay to get more work done.

<strong>You’re saying you have people who actually want to stay the fifth day?
</strong>
When we first started this a few years ago, there was a small sense of guilt in a few corners. People were like, “I have stuff to get done, it’s Thursday, so I’m gonna work Friday and just get it done. But we actually preferred that they didn’t. There are very few things that can’t wait till Monday.

<strong>How many employees would stay to work Fridays?
</strong>
I don’t know.

<strong>Because you weren’t there!
</strong>
We don’t track things in that way. I don’t look at that. I don’t want to encourage that kind of work. I want to encourage quality work.

<strong>As CEO, wouldn’t it simply be rational to let people work the fifth day for you if they wanted?
</strong>
If you’re a short-term thinker you’d think so, but we’re long-term thinkers. We’re about being in business for the long haul and keeping the team together over the long haul. I would never trade a short-term burst for a long-term decline in morale. That happens a lot in the tech business: They burn people out and get someone else. I like the people who work here too much. I don’t want them to burn out. Lots of startups burn people out with 60, 70, 80 hours of work per week. They know that both the people or the company will flame out or be bought or whatever, and they don’t care, they just burn their resources. It’s like drilling for as much oil as you possibly can. You can look at people the same way.

<aside><q>SHE’S ON HER OWN, SHE CLEANS PEOPLE’S HOMES, SHE’S INCREDIBLY NICE. SHE BRINGS FLOWERS EVERY TIME SHE CLEANS, AND SHE’S JUST RESPECTFUL AND NICE AND AWESOME. WHY CAN’T MORE PEOPLE BE LIKE THAT?</q></aside><strong>Are we reaching “peak people”?
</strong>
It seems like in a lot of companies we are. There’s a shortage of talent out there, and if there’s a shortage of resources, you want to conserve those resources.

<strong>So you think there’s a slash-and-burn mentality in the tech world?
</strong>
For sure. I think there’s a lot of lottery-playing going on right now. Companies staffing up, raising a bunch of money, hiring a bunch of people, and burning them out in the hopes that they’ll hit the lottery.

<strong>You seem like too nice a guy to name names--but do you have certain companies in mind?
</strong>
I won’t name names. I used to name names. But I think all you have to do is read TechCrunch. Look at what the top stories are, and they’re all about raising money, how many employees they have, and these are metrics that don’t matter. What matters is: Are you profitable? Are you building something great? Are you taking care of your people? Are you treating your customers well? In the coverage of our industry as a whole, you’ll rarely see stories about treating customers well, about people building a sustainable business. TechCrunch to me is the great place to look to see the sickness in our industry right now.

<strong>Our magazine is called <em>Fast Company</em>, but it sounds like you want to build a slow company.
</strong>
I’m a fan of growing slowly, carefully, methodically, of not getting big just for the sake of getting big. I think that rapid growth is typically of symptom of... there’s a sickness there. There’s a great quote by a guy named Ricardo Semler, author of the book <em><a href="http://www.barnesandnoble.com/w/maverick-success-story-behind-the-worlds-most-unusaul-work-place-ricardo-semler/1104291050?ean=9780446670555" target="_blank">Maverick</a></em>. He said that only two things grow for the sake of growth: businesses and tumors. We have 35 employees at 37signals. We could have hundreds of employees if we wanted to--our revenues and profits support that--but I think we’d be worse off.

<strong>What industries do you look to for inspiration, if not the tech world?
</strong>
I take my inspiration from small mom-and-pop businesses that have been around for a long time. There are restaurants all over the place that I like to go to that have been around a long time, 30 years or more, and thinking about that, that’s an incredible run. I don’t know what percentage of tech companies have been around 30 years. The other interesting thing about restaurants is you could have a dozen Italian restaurants in the city and they can all be successful. It’s not like in the tech world, where everyone wants to beat each other up, and there’s one winner. Those are the businesses I find interesting--it could be a dry cleaner, a restaurant, a clothing store. Actually, my cleaning lady, for example, she’s great.

<strong>Your business icon is your cleaning lady?
</strong>
She’s on her own, she cleans people’s homes, she’s incredibly nice. She brings flowers every time she cleans, and she’s just respectful and nice and awesome. Why can’t more people be like that? She’s been doing it some twenty-odd years, and that’s just an incredible success story. To me that’s far more interesting than a tech company that’s hiring a bunch of people, just got their fourth round of financing for 12 million dollars, and they’re still losing money. That’s what everyone talks about as being exciting, but I think that’s an absolutely disgusting scenario when it comes to business.

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>621</wp:post_id>
		<wp:post_date>2012-09-03 22:55:33</wp:post_date>
		<wp:post_date_gmt>2012-09-03 14:55:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>37signals-earns-millions-each-year-its-ceo%e2%80%99s-model-his-cleaning-lady</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fast-company"><![CDATA[Fast Company]]></category>
		<category domain="category" nicename="live"><![CDATA[live]]></category>
		<category domain="post_tag" nicename="slow-one"><![CDATA[slow one]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby Performance Tricks --Posted by Sergey Potapov</title>
		<link></link>
		<pubDate>Wed, 05 Sep 2012 00:58:00 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=631</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://greyblake.com/blog/2012/09/02/ruby-perfomance-tricks/">http://greyblake.com/blog/2012/09/02/ruby-perfomance-tricks/</a>

I did some benchmarks to find out which alternatives to write code work faster. I wanna share it with you. All benchmarks are made against ruby 1.9.3p194 MRI.
<h2>Do not use exceptions for a control flow</h2>
The next example is pretty stupid but it shows how exceptions slow against conditional statements.
<pre>require 'benchmark'

class Obj
  def with_condition
    respond_to?(:mythical_method) ? self.mythical_method : nil
  end

  def with_rescue
    self.mythical_method
  rescue NoMethodError
    nil
  end
end

obj = Obj.new
N = 10_000_000

puts RUBY_DESCRIPTION

Benchmark.bm(15, "rescue/condition") do |x|
  rescue_report     = x.report("rescue:")    { N.times { obj.with_rescue  } }
  condition_report  = x.report("condition:") { N.times { obj.with_if      } }
  [rescue_report / condition_report]
end</pre>
MRI 1.9.3:

<code>ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-linux]
user system total real
rescue: 111.530000 2.650000 114.180000 (115.837103)
condition: 2.620000 0.010000 2.630000 ( 2.633154)
rescue/condition: 42.568702 265.000000 NaN ( 43.991767)
</code>

MRI 1.8.7 (REE has similar result):
<pre>ruby 1.8.7 (2011-12-28 patchlevel 357) [x86_64-linux]
                        user     system      total        real
rescue:            80.510000   0.940000  81.450000 ( 81.529022)
if:                 3.320000   0.000000   3.320000 (  3.330166)
rescue/condition:  24.250000        inf       -nan ( 24.481970)</pre>
<h2>String concatenation</h2>
Avoid using <code>+=</code> to concatenate strings in favor of <code>&lt;&lt;</code> method. The result is absolutely the same: add a string to the end of an existing one. What is the difference then?

See the example:
<pre>str1 = "first"
str2 = "second"
str1.object_id       # =&gt; 16241320

str1 += str2    # str1 = str1 + str2
str1.object_id  # =&gt; 16241240, id is changed

str1 &lt;&lt; str2 str1.object_id  # =&gt; 16241240, id is the same</pre>
When you use <code>+=</code> ruby creates a temporal object which is result of <code>str1 + str2</code>. Then it overrides <code>str1</code> variable with reference to the new built object. On other hand <code>&lt;&lt;</code> modifies existing one. As a result of using <code>+=</code> you have the next disadvantages:
<ul>
	<li>More calculation to join strings.</li>
	<li>Redundant string object in memory (previous value of <code>str1</code>), which approximates time when <a href="http://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29">GC</a> will trigger.</li>
</ul>
How <code>+=</code> is slow? Basically it depends on length of strings you have operation with.
<pre>require 'benchmark'

N = 1000
BASIC_LENGTH = 10

5.times do |factor|
  length = BASIC_LENGTH * (10 ** factor)
  puts "_" * 60 + "\nLENGTH: #{length}"

  Benchmark.bm(10, '+= VS &lt;</pre>
Output:
<pre>____________________________________________________________
LENGTH: 10
                 user     system      total        real
+=           0.000000   0.000000   0.000000 (  0.004671)
&lt;&lt;           0.000000   0.000000   0.000000 (  0.000176)
+= VS &lt;&lt;          NaN        NaN        NaN ( 26.508796)
____________________________________________________________
LENGTH: 100
                 user     system      total        real
+=           0.020000   0.000000   0.020000 (  0.022995)
&lt;&lt;           0.000000   0.000000   0.000000 (  0.000226)
+= VS &lt;&lt;          Inf        NaN        NaN (101.845829)
____________________________________________________________
LENGTH: 1000
                 user     system      total        real
+=           0.270000   0.120000   0.390000 (  0.390888)
&lt;&lt;           0.000000   0.000000   0.000000 (  0.001730)
+= VS &lt;&lt;          Inf        Inf        NaN (225.920077)
____________________________________________________________
LENGTH: 10000
                 user     system      total        real
+=           3.660000   1.570000   5.230000 (  5.233861)
&lt;&lt;           0.000000   0.010000   0.010000 (  0.015099)
+= VS &lt;&lt;          Inf 157.000000        NaN (346.629692)
____________________________________________________________
LENGTH: 100000
                 user     system      total        real
+=          31.270000  16.990000  48.260000 ( 48.328511)
&lt;&lt;           0.050000   0.050000   0.100000 (  0.105993)
+= VS &lt;&lt;   625.400000 339.800000        NaN (455.961373)</pre>
<h2>Be careful with calculation within iterators</h2>
Assume you need to write a function to convert an array into a hash where keys and values are same as elements of the array:

&nbsp;
<pre>func([1, 2, 3])  # =&gt; {1 =&gt; 1, 2 =&gt; 2, 3 =&gt; 3}</pre>
The next solution would satisfy the requirements:
<pre>def func(array)
  array.inject({}) { |h, e| h.merge(e =&gt; e) }
end</pre>
And would be extremely slow with big portions of data because it contains nested methods (<code>inject</code> and <code>merge</code>), so it’s <strong>O(n<sup>2</sup>) </strong>algorithm. But it’s obviously that it must be <strong>O(n) </strong>. Consider the next:

&nbsp;
<pre>def func(array)
  array.inject({}) { |h, e| h[e] = e; h }
end</pre>
In this case we do only one iteration over an array without any hard calculation within the iterator.

See the benchmark:
<pre>require 'benchmark'

def n_func(array)
  array.inject({}) { |h, e| h[e] = e; h }
end

def n2_func(array)
  array.inject({}) { |h, e| h.merge(e =&gt; e) }
end

BASE_SIZE = 10

4.times do |factor|
  size   = BASE_SIZE * (10 ** factor)
  params = (0..size).to_a
  puts "_" * 60 + "\nSIZE: #{size}"
  Benchmark.bm(10) do |x|
    x.report("O(n)" ) { n_func(params)  }
    x.report("O(n2)") { n2_func(params) }
  end
end</pre>
Output:
<pre>____________________________________________________________
SIZE: 10
                user     system      total        real
O(n)        0.000000   0.000000   0.000000 (  0.000014)
O(n2)       0.000000   0.000000   0.000000 (  0.000033)
____________________________________________________________
SIZE: 100
                user     system      total        real
O(n)        0.000000   0.000000   0.000000 (  0.000043)
O(n2)       0.000000   0.000000   0.000000 (  0.001070)
____________________________________________________________
SIZE: 1000
                user     system      total        real
O(n)        0.000000   0.000000   0.000000 (  0.000347)
O(n2)       0.130000   0.000000   0.130000 (  0.127638)
____________________________________________________________
SIZE: 10000
                user     system      total        real
O(n)        0.020000   0.000000   0.020000 (  0.019067)
O(n2)      17.850000   0.080000  17.930000 ( 17.983827)</pre>
<pre></pre>
It’s an obvious and trivial example. Just keep in mind to not do hard calculation within iterators if it’s possible.
<h2>Use bang! methods</h2>
In many cases bang methods do the same as there non-bang analogues but without duplication an object. The previous example with <code>merge!</code> would be much faster:
<pre>require 'benchmark'

def merge!(array)
  array.inject({}) { |h, e| h.merge!(e =&gt; e) }
end

def merge(array)
  array.inject({}) { |h, e| h.merge(e =&gt; e) }
end

N = 10_000
array = (0..N).to_a

Benchmark.bm(10) do |x|
  x.report("merge!") { merge!(array) }
  x.report("merge")  { merge(array)  }
end</pre>
Output:
<pre>                 user     system      total        real
merge!       0.010000   0.000000   0.010000 (  0.011370)
merge       17.710000   0.000000  17.710000 ( 17.840856)</pre>
<pre></pre>
&nbsp;
<h2>Use instance variables</h2>
Accessing instance variable directly is about two times faster than accessing them with accessor methods:
<pre>require 'benchmark'

class Metric
  attr_accessor :var

  def initialize(n)
    @n   = n
    @var = 22
  end

  def run
    Benchmark.bm(10) do |x|
      x.report("@var") { @n.times { @var } }
      x.report("var" ) { @n.times { var  } }
      x.report("@var =")     { @n.times {|i| @var = i     } }
      x.report("self.var =") { @n.times {|i| self.var = i } }
    end
  end
end

metric = Metric.new(100_000_000)
metric.run</pre>
Output:
<pre>                 user     system      total        real
@var         6.980000   0.010000   6.990000 (  7.193725)
var         13.040000   0.000000  13.040000 ( 13.131711)
@var =       7.960000   0.000000   7.960000 (  8.242603)
self.var =  14.910000   0.010000  14.920000 ( 15.960125)</pre>
Parallel assignment is slower
<pre>require 'benchmark'

N = 10_000_000

Benchmark.bm(15) do |x|
  x.report('parallel') do
    N.times do
      a, b = 10, 20
    end
  end

  x.report('consequentially') do |x|
    N.times do
      a = 10
      b = 20
    end
  end
end</pre>
Output:
<pre>                      user     system      total        real
parallel          1.900000   0.000000   1.900000 (  1.928063)
consequentially   0.880000   0.000000   0.880000 (  0.879675)</pre>
<pre></pre>
&nbsp;
<h2>Dynamic method defention</h2>
What is the faster way to define method dynamically: <code>class_eval</code> with a code string or using <code>define_method</code>? Which way generated methods work faster?
<pre>require 'benchmark'

class Metric
  N = 1_000_000

  def self.class_eval_with_string
    N.times do |i|
      class_eval(&lt;</pre>
Output:
<pre>                             user     system      total        real
class_eval with string 219.840000   0.720000 220.560000 (221.933074)
define_method           61.280000   0.240000  61.520000 ( 62.070911)
string method            0.110000   0.000000   0.110000 (  0.111433)
dynamic method           0.150000   0.000000   0.150000 (  0.156537)</pre>
So <code>class_eval</code> works slower but it’s preferred since methods generated with <code>class_eval</code>and a string of code work faster.
<h2>Links</h2>
<ul>
	<li><a href="http://www.simonecarletti.com/blog/2010/01/how-slow-are-ruby-exceptions/">How Slow Are Ruby Exceptions</a></li>
	<li><a href="http://www.igvita.com/2008/07/08/6-optimization-tips-for-ruby-mri/">6 Optimization Tips for Ruby MRI</a> (NOTE: <code>Symbol#to_proc</code> was ported to Ruby and it’s not slow anymore)</li>
	<li><a href="http://my.safaribooksonline.com/book/web-development/ruby/9780321540034">“Writing Efficient Ruby Code” by Dr. Stefan Kaes</a></li>
	<li><a href="http://programmingzen.com/2007/02/10/top-10-ruby-on-rails-performance-tips/">Top 10 Ruby on Rails performance tips </a></li>
	<li><a href="http://blog.monitis.com/index.php/2012/02/08/20-ruby-performance-tips/">20 Ruby Performance Tips</a></li>
	<li><a href="http://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/">A Beginner’s Guide to Big O Notation</a></li>
</ul>
Danke.
<pre><footer>Posted by Sergey Potapov <time datetime="2012-09-02T23:34:00+03:00" pubdate="" data-updated="true">Sep 2nd, 2012</time>  <a href="http://greyblake.com/blog/categories/accessor/">accessor</a>, <a href="http://greyblake.com/blog/categories/concatenation/">concatenation</a>, <a href="http://greyblake.com/blog/categories/exception/">exception</a>, <a href="http://greyblake.com/blog/categories/performance/">performance</a>, <a href="http://greyblake.com/blog/categories/reader/">reader</a>,<a href="http://greyblake.com/blog/categories/ruby/">ruby</a>, <a href="http://greyblake.com/blog/categories/string/">string</a>, <a href="http://greyblake.com/blog/categories/variable/">variable</a>, <a href="http://greyblake.com/blog/categories/writer/">writer</a></footer></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>631</wp:post_id>
		<wp:post_date>2012-09-05 08:58:00</wp:post_date>
		<wp:post_date_gmt>2012-09-05 00:58:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-performance-tricks-posted-by-sergey-potapov</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="accessor"><![CDATA[accessor]]></category>
		<category domain="post_tag" nicename="concatenation"><![CDATA[concatenation]]></category>
		<category domain="post_tag" nicename="exception"><![CDATA[exception]]></category>
		<category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
		<category domain="post_tag" nicename="reader"><![CDATA[reader]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="string"><![CDATA[string]]></category>
		<category domain="post_tag" nicename="variable"><![CDATA[variable]]></category>
		<category domain="post_tag" nicename="writer"><![CDATA[writer]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>你可能错过的 Rails 技巧 --Posted by bigcircle</title>
		<link></link>
		<pubDate>Fri, 07 Sep 2012 15:29:39 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=637</guid>
		<description></description>
		<content:encoded><![CDATA[记得前段时间 RailsConf2012 之后看过一个不错的pdf，<a href="https://speakerdeck.com/u/jeg2/p/10-things-you-didnt-know-rails-could-do">10 things you didn’t know rails could do</a>

说是10个，但是给出了42个实例，这几天抽空又回味了下，料很多，写的很好，顺便总结学习下

Pass 掉第一个 <a href="http://fridayhug.com/">fridayhug</a>，我们是开心拥抱每一天

&nbsp;
<pre class="brush: rails; gutter: true">%w(action_controller/railtie coderay markaby).map &amp;method(:require)

run TheSmallestRailsApp ||= Class.new(Rails::Application) {
  config.secret_token = routes.append {
    root to: proc {
      [200, {&quot;Content-Type&quot; =&gt; &quot;text/html&quot;}, [Markaby::Builder.new.html {
        title @title = &quot;The Smallest Rails App&quot;
        h3 &quot;I am #@title!&quot;
        p &quot;Here is my source code:&quot;
        div { CodeRay.scan_file(__FILE__).div(line_numbers: :table) }
        p { a &quot;Make me smaller&quot;, href: &quot;//goo.gl/YdRpy&quot; }
      }]]
    }
  }.to_s
  initialize!
}</pre>
2 - 提醒功能 TODO
<pre>class UsersController &lt; ApplicationController
  # TODO:  Make it possible to create new users.
end

class User &lt; ActiveRecord::Base
  # FIXME: Should token really  be accessible?
  attr_accessible :bil, :email, :name, :token
end</pre>
执行 rake notes

&nbsp;
<pre>app/controllers/users_controller.rb:
  * [ 2] [TODO] Make it possible to create new users.

app/models/user.rb:
  * [ 2] [FIXME] Should token really be accessible?

app/views/articles/index.html.erb:
  * [ 1] [OPTIMIZE] Paginate this listing.</pre>
查看单独的 TODO / FIXME / OPTIMIZE
<pre>rake notes:todo

app/controllers/users_controller.rb:
  * [ 2] Make it possible to create new users.</pre>
可以自定义提醒名称
<pre>class Article &lt; ActiveRecord::Base
  belongs_to :user
  attr_accessible :body, :subject
  # JEG2: Add that code from your blog here.
end</pre>
不过需要敲一长串，可以alias个快捷键
<pre>rake notes:custom ANNOTATION=JEG2

app/models/article.rb:
  * [ 4]Add that code from your blog here.</pre>
3 - 沙箱模式执行 rails c
<pre>rails c --sandbox</pre>
沙箱模式会有回滚事务机制，对数据库的操作在退出之前都会自动回滚到之前未修改的数据

4 - 在 rails c 控制台中使用 rails helper 方法
<pre>$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; helper.number_to_currency(100)
=&gt; &quot;$100.00&quot;
&gt;&gt; helper.time_ago_in_words(3.days.ago)
=&gt; &quot;3 days&quot;</pre>
5 - 开发模式用 thin 代替 webrick
<pre>group :development do
  gem &#039;thin&#039;
end

rails s thin / thin start</pre>
6 - 允许自定义配置
<pre> - lib/custom/railtie.rb

 module Custom
   class Railtie &lt; Rails::Railtie
     config.custom = ActiveSupport::OrderedOptions.new
   end
 end

 - config/application.rb

 require_relative &quot;../lib/custom/railtie&quot;

 module Blog
   class Application &lt; Rails::Application
     # ...
     config.custom.setting = 42
   end
 end</pre>
7 - keep funny

作者给出了个介绍 ruby 以及一些相关 blog的网站 <a href="http://www.rubydramas.com/">rubydramas</a>，搞笑的是这个网站右上角标明
<pre>Powered by PHP</pre>
用 <a href="http://isitrails.com/">isitrails.com</a> 检查了下，果然不是用 rails 做的，这个应该是作者分享 ppt 过程中的一个小插曲吧

8 -理解简写的迁移文件
<pre>rails g resources user name:string email:string token:string bio:text</pre>
字段会被默认为 string 属性，查看了下 <a href="https://github.com/rails/rails/blob/master/railties/lib/rails/generators/generated_attribute.rb#LC55">源码</a>，果然有初始化定义
<pre>rails g resources user name email token:string{6} bio:text</pre>
会生成用样的 migration 文件
<pre>class CreateUsers &lt; ActiveRecord::Migration   def change     create_table :users do |t|       t.string :name       t.string :email       t.string :token, :limit =&gt; 6
      t.text :bio
      t.timestamps
    end
  end
end</pre>
9 - 给 migration 添加索引
<pre>rails g resource user name:index email:uniq token:string{6} bio:text</pre>
会生成 name 和 email 的索引，同时限定 email 唯一
<pre>class CreateUsers &lt; ActiveRecord::Migration   def change     create_table :users do |t|       t.string :name       t.string :email       t.string :token, :limit =&gt; 6
      t.text :bio
      t.timestamps
    end

    add_index :users, :name
    add_index :users, :email, :unique =&gt; true
  end
end</pre>
10 - 添加关联关系
<pre>rails g resource article user:references subject body:text</pre>
会自动关联生成对应的 belongs_to 和 外键，并添加索引
<pre>class CreateArticles &lt; ActiveRecord::Migration
  def change
    create_table :articles do |t|
      t.references :user
      t.string :subject
      t.text :body
      t.timestamps
    end
    add_index :articles, :user_id
  end
end</pre>
<pre>class Article &lt; ActiveRecord::Base
  belongs_to :user
  attr_accessible :body, :subject
end</pre>
11 - 显示数据迁移记录
<pre>rake db:migrate:status</pre>
会输出 migration 的状态，这在解决迁移版本冲突的时候很有用
<pre>database: db/development.sqlite3

 status   Migration ID    Migration Name
 ---------------------------------------
   up     20120414155612  Create users
   up     20120414160528  Create articles
  down    20120414161355  Create comments</pre>
12 - 导入 csv 文件

csv 文件内容如下
<pre>Name,Email
James,james@example.com
Dana,dana@example.com
Summer,summer@example.com</pre>
创建 rake 任务导入 users 表
<pre>require &#039;csv&#039;
namespace :users do
  desc &quot;Import users from a CSV file&quot;
  task :import =&gt; :environment do
    path = ENV.fetch(&quot;CSV_FILE&quot;) {
      File.join(File.dirname(__FILE__), *%w[.. .. db data users.csv])
    }
    CSV.foreach(path, headers: true, header_converters: :symbol) do |row|
      User.create(row.to_hash)
    end
  end
end</pre>
13 - 数据库中储存 csv
<pre>class Article &lt;  ActiveRecord::Base
  require &#039;csv&#039;
  module CSVSerializer
    module_function
    def load(field); field.to_s.parse_csv; end
    def dump(object); Array(object).to_csv; end
  end
  serialize :categories, CSVSerializer

  attr_accessible :body, :subject, :categories
end</pre>
serialize 用于在文本字段储存序列化的值，如序列，Hash，Array等，例如
<pre>user = User.create(:preferences =&gt; { &quot;background&quot; =&gt; &quot;black&quot;, &quot;display&quot; =&gt; large })
User.find(user.id).preferences # =&gt; { &quot;background&quot; =&gt; &quot;black&quot;, &quot;display&quot; =&gt; large }</pre>
这个例子中将 CSVSerializer to_csv序列化之后储存在 categories 这个文本类型字段中

14 - 用 pluck 查询
<pre>$ rails c
loading development environment(Rails 3.2.3)

&gt;&gt; User.select(:email).map(&amp;:email)
  User Load(0.1ms) SELECT email FROM &quot;users&quot;
=&gt; [&quot;james@example.com&quot;, &quot;dana@example.com&quot;, &quot;summer@example.com&quot;]
&gt;&gt; User.pluck(:email)
   (0.2ms) SELECT email FROM &quot;users&quot;
=&gt; [&quot;james@example.com&quot;, &quot;dana@example.com&quot;, &quot;summer@example.com&quot;]
&gt;&gt; User.uniq.pluck(:email)
   (0.2ms) SELECT DISTINCT email FROM &quot;users&quot;
=&gt; [&quot;james@example.com&quot;, &quot;dana@example.com&quot;, &quot;summer@example.com&quot;]</pre>
pluck 的实现方式其实也是 select 之后再 map
<pre>def pluck(column_name)
  column_name = column_name.to_s
  klass.connection.select_all(select(column_name).arel).map! do |attributes|
    klass.type_cast_attribute(attributes.keys.first, klass.initialize_attributes(attributes))
  end
end</pre>
15 - 使用 group count

创建 article 关联 model event
<pre>rails g resource event article:belongs_to triggle</pre>
创建3条 edit 记录和10条 view 记录。 Event.count 标明有13条记录，
group(:triggle).count 表示统计 triggle group 之后的数量，也可以用 count(:group =&gt; :trigger)

$ rails c
<pre>&amp;gt;&amp;gt; article = Article.last
=&amp;gt; #&lt;article id:1=&quot;&quot;&gt;&amp;gt;&amp;gt; {edit:3, view:10}.each do |trigger, count| ?&amp;gt; count.times do ?&amp;gt; Event.new(trigger: trigger).tap{ |e| e.article= article; e.save! } ?&amp;gt; end =&amp;gt; {:edit =&amp;gt; 3, :view =&amp;gt; 10} &amp;gt;&amp;gt; Event.count =&amp;gt; 13 &amp;gt;&amp;gt; Event.group(:trigger).count =&amp;gt; {&quot;edit&quot; =&amp;gt; 3, &quot;view&quot; =&amp;gt; 10}&lt;/article&gt;</pre>
16 - 覆盖关联关系
<pre>class Car &lt; ActiveRecord::Base
  belongs_to :owner
  belongs_to :previous_owner, class_name: &quot;Owner&quot;

  def owner=(new_owner)
    self.previous_owner = owner
    super
  end
end</pre>
car更改 owner 时，如果有了 new_owner，就把原 owner 赋给 previous_owner，注意要加上 super

17 - 构造示例数据
<pre>$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; User.find(1)
=&gt; #
￼￼￼￼￼&gt;&gt; jeg2 = User.instantiate(&quot;id&quot; =&gt; 1, &quot;email&quot; =&gt; &quot;
￼￼￼￼=&gt; #
&gt;&gt; jeg2.name = &quot;James Edward Gray II&quot;
￼￼￼￼=&gt; &quot;James Edward Gray II&quot;
&gt;&gt; jeg2.save!
=&gt; true
&gt;&gt; User.find(1)
￼￼￼￼￼￼james@example.com&quot;, ...&gt;</pre>
伪造一条记录，并不是数据库中的真实数据，也不会把原有数据覆盖

18 - PostgreSQL 中使用无限制的 string

去掉适配器中对 string 长度的限制，这个应该是 PostgreSQL 数据库的特性
<pre>module PsqlApp
  class Application &lt; Rails::Application
    # Switch to limitless strings
    initializer &quot;postgresql.no_default_string_limit&quot; do
      ActiveSupport.on_load(:active_record) do
        adapter = ActiveRecord::ConnectionAdapters::PostgreSQLAdapter
        adapter::NATIVE_DATABASE_TYPES[:string].delete(:limit)
      end
    end
 end
end</pre>
创建 user 表，bio 字符串
<pre>rails g resource user bio</pre>
<pre>$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; very_long_bio = &quot;X&quot; * 10_000; :set
=&gt; :set
&gt;&gt; User.create!(bio: very_long_bio)
=&gt; #
&gt;&gt; User.last.bio.size
=&gt; 10000</pre>
19 - PostgreSQL 中使用全文搜
<pre>rails g resource article subject body:text</pre>
更改迁移文件，添加索引和 articles_search_update 触发器
<pre>class CreateArticles &lt; ActiveRecord::Migration
  def change
    create_table :articles do |t|
      t.string :subject
      t.text   :body
      t.column :search, &quot;tsvector&quot;
      t.timestamps
    end
    execute &lt;</pre>
Model 中添加 search 方法
<pre>class Article &lt; ActiveRecord::Base
  attr_accessible :body, :subject
  def self.search(query)
    sql = sanitize_sql_array([&quot;plainto_tsquery(&#039;english&#039;, ?)&quot;, query])
    where(
      &quot;search @@ #{sql}&quot;
    ).order(
      &quot;ts_rank_cd(search, #{sql}) DESC&quot;
    )
  end
end</pre>
PostgreSQL 数据库没用过，这段看例子吧
<pre>$ rails c
Loading development environment (Rails 3.2.3)
&amp;gt;&amp;gt; Article.create!(subject: &quot;Full Text Search&quot;)
=&amp;gt; #&lt;article id:=&quot;&quot; 1=&quot;&quot;&gt;&amp;gt;&amp;gt; Article.create!(body: &quot;A stemmed search.&quot;) =&amp;gt; #&lt;article id:=&quot;&quot; 2=&quot;&quot;&gt;&amp;gt;&amp;gt; Article.create!(body: &quot;You won&#039;t find me!&quot;) =&amp;gt; #&lt;article id:=&quot;&quot; 3=&quot;&quot;&gt;&amp;gt;&amp;gt; Article.search(&quot;search&quot;).map { |a| a.subject || a.body } =&amp;gt; [&quot;Full Text Search&quot;, &quot;A stemmed search.&quot;] &amp;gt;&amp;gt; Article.search(&quot;stemming&quot;).map { |a| a.subject || a.body } =&amp;gt; [&quot;A stemmed search.&quot;]&lt;/article&gt;&lt;/article&gt;&lt;/article&gt;</pre>
21 - 每个用户使用不同的数据库
<pre>- user_database.rb

def connect_to_user_database(name)
  config = ActiveRecord::Base.configurations[&quot;development&quot;].merge(&quot;database&quot; =&gt; &quot;db/#{name}.sqlite3&quot;)
  ActiveRecord::Base.establish_connection(config)
end</pre>
创建 rake 任务：新增用户数据库和创建
<pre>require &quot;user_database&quot;

namespace :db do
  desc &quot;Add a new user database&quot;
  task :add =&gt; %w[environment load_config] do
    name = ENV.fetch(&quot;DB_NAME&quot;) { fail &quot;DB_NAME is required&quot; }
    connect_to_user_database(name)
    ActiveRecord::Base.connection
  end

  namespace :migrate do
    desc &quot;Migrate all user databases&quot;
    task :all =&gt; %w[environment load_config] do
      ActiveRecord::Migration.verbose = ENV.fetch(&quot;VERBOSE&quot;, &quot;true&quot;) == &quot;true&quot;
      Dir.glob(&quot;db/*.sqlite3&quot;) do |file|
        next if file == &quot;db/test.sqlite3&quot;
        connect_to_user_database(File.basename(file, &quot;.sqlite3&quot;))
        ActiveRecord::Migrator.migrate(
          ActiveRecord::Migrator.migrations_paths,
          ENV[&quot;VERSION&quot;] &amp;&amp; ENV[&quot;VERSION&quot;].to_i
        ) do |migration|
          ENV[&quot;SCOPE&quot;].blank? || (ENV[&quot;SCOPE&quot;] == migration.scope)
        end
      end
    end
  end
end</pre>
执行几个rake 任务创建不同的数据库
<pre>$ rails g resource user name
$ rake db:add DB_NAME=ruby_rogues
$ rake db:add DB_NAME=grays
$ rake db:migrate:all
==  CreateUsers: migrating ==================================
-- create_table(:users)
   -&gt; 0.0008s
==  CreateUsers: migrated (0.0008s) =========================
==  CreateUsers: migrating ==================================
-- create_table(:users)
   -&gt; 0.0007s
==  CreateUsers: migrated (0.0008s) =========================</pre>
创建几条记录，为不同的数据库创建不同的数据
<pre>$ rails c
&gt;&gt; connect_to_user_database(&quot;ruby_rogues&quot;)
=&gt; #
&gt;&gt; User.create!(name: &quot;Chuck&quot;)
=&gt; #
&gt;&gt; User.create!(name: &quot;Josh&quot;)
=&gt; #
&gt;&gt; User.create!(name: &quot;Avdi&quot;)
=&gt; #
...
&gt;&gt; connect_to_user_database(&quot;grays&quot;)
=&gt; #
&gt;&gt; User.create!(name: &quot;James&quot;)
=&gt; #
&gt;&gt; User.create!(name: &quot;Dana&quot;)
=&gt; #
&gt;&gt; User.create!(name: &quot;Summer&quot;)
=&gt; #</pre>
ApplicationController 里面添加 before_filter 根据登陆的二级域名判断连接哪个数据库
<pre>class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  before_filter :connect_to_database
private
  def connect_to_database
    connect_to_user_database(request.subdomains.first)
  end
end</pre>
中场休息时，去找了下 RailsConf 2012 的视频看了看，刚好看到关于 <a href="http://confreaks.com/videos/889-railsconf2012-ten-things-you-didn-t-know-rails-could-do">这篇</a> 的介绍，片子还挺长，41分钟，演讲者长相和声音都很不符合大家对 Rails 的认知，大家有兴趣的可以去听听

21 - 自动写文件
<pre>class Comment &lt; ActiveRecord::Base
  # ...
  Q_DIR = (Rails.root + &quot;comment_queue&quot;).tap(&amp;:mkpath)
  after_save :queue_comment
  def queue_comment
    File.atomic_write(Q_DIR + &quot;#{id}.txt&quot;) do |f|
      f.puts &quot;Article: #{article.subject}&quot;
      f.puts &quot;User:    #{user.name}&quot;
      f.puts body
    end
  end
end</pre>
找了下 Api 是 Rails 对 Ruby 基础类的扩展

22 - 合并嵌套 Hash
<pre>$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; {nested: {one: 1}}.merge(nested: {two: 2})
=&gt; {:nested=&gt;{:two=&gt;2}}
&gt;&gt; {nested: {one: 1}}.deep_merge(nested: {two: 2})
=&gt; {:nested=&gt;{:one=&gt;1, :two=&gt;2}}</pre>
主要是用到了 deep_merge 合并相同的 key

23 - Hash except
<pre>$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; params = {controller: &quot;home&quot;, action: &quot;index&quot;, from: &quot;Google&quot;}
=&gt; {:controller=&gt;&quot;home&quot;, :action=&gt;&quot;index&quot;, :from=&gt;&quot;Google&quot;}
&gt;&gt; params.except(:controller, :action)
=&gt; {:from=&gt;&quot;Google&quot;}</pre>
这个方法经常会用到，可能用的人也很多

24 - add defaults to Hash
<pre>$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; {required: true}.merge(optional: true)
=&gt; {:required=&gt;true, :optional=&gt;true}
&gt;&gt; {required: true}.reverse_merge(optional: true)
=&gt; {:optional=&gt;true, :required=&gt;true}
&gt;&gt; {required: true, optional: false}.merge(optional: true)
=&gt; {:required=&gt;true, :optional=&gt;true}
&gt;&gt; {required: true, optional: false}.reverse_merge(optional: true)
=&gt; {:optional=&gt;false, :required=&gt;true}</pre>
这几个都是对 Hash 类的增强，merge 会替换原有相同 key 的值，但 reverse_merge 不会

从源码就可以看出，会事先 copy 一份 default hash
<pre>def reverse_merge(other_hash)
  super
  self.class.new_from_hash_copying_default(other_hash)
end</pre>
25 - String.value? 方法

看下面的几个例子

$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; env = Rails.env
=&gt; "development"
&gt;&gt; env.development?
=&gt; true
&gt;&gt; env.test?
=&gt; false
&gt;&gt; "magic".inquiry.magic?
=&gt; true
&gt;&gt; article = Article.first
=&gt; #

<article id:="" 1="" status:="" draft="">&gt;&gt; article.draft?
=&gt; true
&gt;&gt; article.published?
=&gt; false</article>&nbsp;

env, “magic” 可以直接使用 value? 的方法，这个扩展是 String#inquiry 方法
<pre>def inquiry
  ActiveSupport::StringInquirer.new(self)
end

# 用method_missing 实现
def method_missing(method_name, *arguments)
  if method_name.to_s[-1,1] == &quot;?&quot;
    self == method_name.to_s[0..-2]
  else
    super
  end
end</pre>
类型的一个例子，同样用到了 inquiry 方法
<pre>class Article &lt; ActiveRecord::Base
  # ...
  STATUSES = %w[Draft Published]
  validates_inclusion_of :status, in: STATUSES
  def method_missing(method, *args, &amp;block)
    if method =~ /\A#{STATUSES.map(&amp;:downcase).join(&quot;|&quot;)}\?\z/
      status.downcase.inquiry.send(method)
    else
      super
    end
  end
end</pre>
&nbsp;
<h6 id="section-1">26 - 让你成为杂志的封面 （暖场之用）</h6>
搞笑哥拿出了 DHH 当选 Linux journal 杂志封面的图片，会场也是哄堂大笑 ^.^

<img src="http://www.rubyinside.com/wp-content/uploads/2006/05/dhh.png" alt="" />

27 - 隐藏注释
<pre>
&lt;h1&gt;Home Page&lt;/h1&gt;

# 生成的 html&lt;!-- HTML comments stay in the rendered content --&gt; 

&lt;h1&gt;Home Page&lt;/h1&gt;
</pre>


这个一下没看懂。。试了下项目里面的代码，原来是隐藏的意思。。 28 - 理解更短的 erb 语法

<pre># ...
module Blog
  class Application &lt; Rails::Application

    # Broken:  config.action_view.erb_trim_mode = &#039;%&#039;
    ActionView::Template::Handlers::ERB.erb_implementation =
      Class.new(ActionView::Template::Handlers::Erubis) do
        include ::Erubis::PercentLineEnhancer
      end
    ￼￼￼￼end
  end
end</pre>
接着在 view 页面替换用 % 表示原来，有点像 slim
<pre>% if current_user.try(:admin?)

% end</pre>
29 - 用 block 避免视图层赋值
<blockquote>
<pre></pre>
<pre>&lt;table&gt;
  &lt;% @cart.products.each do |product| %&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;%= product.name %&gt;&lt;/td&gt;
      &lt;td&gt;&lt;%= number_to_currency product.price %&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;% end %&gt;
  &lt;tr&gt;
    &lt;td&gt;Subtotal&lt;/td&gt;
    &lt;td&gt;&lt;%= number_to_currency @cart.total %&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Tax&lt;/td&gt;
    &lt;td&gt;&lt;%= number_to_currency(tax = calculate_tax(@cart.total)) %&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Total&lt;/td&gt;
    &lt;td&gt;&lt;%= number_to_currency(@cart.total + tax) %&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</pre>
</blockquote>
<code>
tax = calculate_tax(@cart.total)</code> 会先被赋值再被下面引用 用 block 重构下，把逻辑代码放到 helper 里面
<pre>module CartHelper
  def calculate_tax(total, user = current_user)
    tax = TaxTable.for(user).calculate(total)
    if block_given?
      yield tax
    else
      tax
    end
  end
end</pre>
<blockquote>
<pre>&lt;table&gt;
  &lt;% @cart.products.each do |product| %&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;%= product.name %&gt;&lt;/td&gt;
      &lt;td&gt;&lt;%= number_to_currency product.price %&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;% end %&gt;
  &lt;tr&gt;
    &lt;td&gt;Subtotal&lt;/td&gt;
    &lt;td&gt;&lt;%= number_to_currency @cart.total %&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;% calculate_tax @cart.total do |tax| %&gt;
    &lt;tr&gt;
      &lt;td&gt;Tax&lt;/td&gt;
      &lt;td&gt;&lt;%= number_to_currency tax %&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total&lt;/td&gt;
      &lt;td&gt;&lt;%= number_to_currency(@cart.total + tax) %&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;% end %&gt;
&lt;/table&gt;</pre>
<pre></pre>

&nbsp;
</blockquote>

30 - 同时生成多个标签 

<blockquote>
<pre>&lt;h1&gt;Articles&lt;/h1&gt;
  &lt;% @articles.each do |article| %&gt;
    &lt;%= content_tag_for(:div, article) do %&gt;
    &lt;h2&gt;&lt;%= article.subject %&gt;&lt;/h2&gt;
  &lt;% end %&gt;
&lt;% end %&gt;</pre>
<pre>&lt;%= content_tag_for(:div, @articles) do |article| %&gt;
  &lt;h2&gt;&lt;%= article.subject %&gt;&lt;/h2&gt;
&lt;% end %&gt;</pre>
<pre></pre>

&nbsp;
</blockquote>

&nbsp;

<h1></h1>

content_tag_for 具体用法可以参考 <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/RecordTagHelper.html#method-i-content_tag_for">Api</a>，意思比较明白 <a href="http://edgeapi.rubyonrails.org/classes/ActiveModel/Conversion.html#method-i-to_partial_path">to_partial_path</a> 是 ActiveModel 內建的实例方法，返回一个和可识别关联对象路径的字符串，原文是这么说的，目前还没看明白这么用的目的在哪 

<h2>这篇 <a href="http://blog.plataformatec.com.br/2012/01/my-five-favorite-hidden-features-in-rails-3-2/">blog</a> 介绍了4个最喜欢的 Rails3.2 隐藏特性，</h2>

&nbsp;

<h6 id="inspire-theme-songs-about-your-work-">这4条都在这个系列中，作者可能也是从这学来的吧</h6>

31 - Render Any Object

<pre>class Event &lt; ActiveRecord::Base
  # ...
  def to_partial_path
    &quot;events/#{trigger}&quot;  # events/edit or events/view
  end
end</pre>
<a href="http://edgeapi.rubyonrails.org/classes/ActiveModel/Conversion.html#method-i-to_partial_path">to_partial_path</a> 是 ActiveModel 內建的实例方法，返回一个和可识别关联对象路径的字符串，原文是这么说的，目前还没看明白这么用的目的在哪

&nbsp;
<pre>Returns a string identifying the path associated with the object.
ActionPack uses this to find a suitable partial to represent the object.</pre>
32 - 生成 group option
<pre> %w[One Two Three],
  &quot;Group B&quot; =&gt; %w[One Two Three]
) ) %&gt;</pre>
这个其实就是用到了 grouped_options_for_select ，我在前面的 博文 提到过这几个 select 的用法

33 -定制你自己喜欢的 form 表单
<pre>class LabeledFieldsWithErrors &lt; ActionView::Helpers::FormBuilder
  def errors_for(attribute)
    if (errors = object.errors[attribute]).any?
      @template.content_tag(:span, errors.to_sentence, class: &quot;error&quot;)
    end
  end
  def method_missing(method, *args, &amp;block)
    if %r{ \A (?labeled_)?
              (?\w+?)
              (?_with_errors)? \z }x =~ method and
       respond_to?(wrapped) and [labeled, with_errors].any?(&amp;:present?)
      attribute, tags = args.first, [ ]
      tags           &lt;&lt; label(attribute) if labeled.present?
      tags           &lt;&lt; send(wrapped, *args, &amp;block)
      tags           &lt;&lt; errors_for(attribute) if with_errors.present?
      tags.join(&quot; &quot;).html_safe
    else
      super
    end
  end
end</pre>
定义了几个不想去看懂的 method_missing 方法。。 修改 application.rb，添加配置
<pre>class Application &lt; Rails::Application
  # ...
  require &quot;labeled_fields_with_errors&quot;
  config.action_view.default_form_builder = LabeledFieldsWithErrors
  config.action_view.field_error_proc     = -&gt;(field, _) { field }
end</pre>
创建 form 表单可以这样书写
<blockquote>
<pre></pre>
<pre>&lt;%= form_for @article do |f| %&gt;
  &lt;p&gt;&lt;%= f.text_field
  &lt;p&gt;&lt;%= f.labeled_text_field
  &lt;p&gt;&lt;%= f.text_field_with_errors
  &lt;p&gt;&lt;%= f.labeled_text_field_with_errors :subject %&gt;&lt;/p&gt;
  &lt;%= f.submit %&gt;
&lt;% end %&gt;</pre>
</blockquote>
生成如下的 html 页面
<blockquote>
<pre>&lt;p&gt;&lt;input id=&quot;article_subject&quot; name=&quot;article[subject]&quot; size=&quot;30&quot; type=&quot;text&quot; value=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;label for=&quot;article_subject&quot;&gt;Subject&lt;/label&gt;
   &lt;input id=&quot;article_subject&quot; name=&quot;article[subject]&quot; size=&quot;30&quot; type=&quot;text&quot; value=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;input id=&quot;article_subject&quot; name=&quot;article[subject]&quot; size=&quot;30&quot; type=&quot;text&quot; value=&quot;&quot; /&gt;
   &lt;span class=&quot;error&quot;&gt;can&#039;t be blank&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;label for=&quot;article_subject&quot;&gt;Subject&lt;/label&gt;
   &lt;input id=&quot;article_subject&quot; name=&quot;article[subject]&quot; size=&quot;30&quot; type=&quot;text&quot; value=&quot;&quot; /&gt;
   &lt;span class=&quot;error&quot;&gt;can&#039;t be blank&lt;/span&gt;&lt;/p&gt;
&lt;!-- ... --&gt;</pre>
</blockquote>
不是很喜欢这种方式，反而把简单的html搞复杂了，让后来维护的人增加额外的学习成本     不是很喜欢这种方式，反而把简单的html搞复杂了，让后来维护的人增加额外的学习成本
<h6 id="inspire-theme-songs-about-your-work-">34 - Inspire theme songs about your work (再次暖场时刻)</h6>
2011年 Farmhouse Conf 上主持人 Ron Evans 专门用口琴演奏了为大神 Tenderlove 写的歌 - <a href="http://www.confreaks.com/videos/529-farmhouseconf-ruby-hero-tenderlove">Ruby Hero Tenderlove! </a>，听了半天不知道唱的啥。。 想找下有没有美女 Rubist, 看了下貌似没有，都是大妈，这位 <a href="http://www.confreaks.com/videos/534-farmhouseconf-meghann-millard">Meghann Millard</a> 尚可远观，大姐装束妖娆，手握纸条，蚊蝇环绕，不时微笑，长的真有点像 gossip girl 里面的 Jenny Humphrey
<h6 id="section">35 - 灵活的异常操作</h6>
修改 application.rb 定义
<pre>class Application &lt; Rails::Application
# ...
  config.exceptions_app = routes
end</pre>
每次有异常时路由都会被调用，你可以用下面的方法简单 render 404 页面
<pre>match &quot;/404&quot;, :to =&gt; &quot;errors#not_found&quot;</pre>
这个例子也在开头提到的那篇博文里面，感兴趣可以去自己研究下

36 - 给 Sinatra 添加路由
<pre>- Gemfile

source &#039;https://rubygems.org&#039;
# ...
gem &quot;resque&quot;, require: &quot;resque/server&quot;

module AdminValidator

  def matches?(request)
    if (id = request.env[&quot;rack.session&quot;][&quot;user_id&quot;])
      current_user = User.find_by_id(id)
      current_user.try(:admin?)
    else
      false
    end
  end
end</pre>
挂载 Resque::Server 至 /admin/resqu
<pre>Blog::Application.routes.draw do
  # ...
  require &quot;admin_validator&quot;
  constraints AdminValidator do
    mount Resque::Server, at: &quot;/admin/resque&quot;
  end
end</pre>
这个也没有试验，不清楚具体用法，sinatra 平时也基本不用

37 - 导出CSV流
<pre>class ArticlesController &lt; ApplicationController
  def index
    respond_to do |format|
      format.html do
        @articles = Article.all
      end
      format.csv do
        headers[&quot;Content-Disposition&quot;] = %Q{attachment; filename=&quot;articles.csv&quot;}
        self.response_body = Enumerator.new do |response|
          csv  = CSV.new(response, row_sep: &quot;\n&quot;)
          csv &lt;&lt; %w[Subject Created Status]
          Article.find_each do |article|
            csv &lt;&lt; [ article.subject,
                     article.created_at.to_s(:long),
                     article.status ]
        ￼￼	end
        end
      end
    end
  end
# ...
end

导出 csv 是很常用的功能，很多时候报表都需要，这个还是比较实用的

38 - do some work in the background

给 articles 添加文本类型 stats 字段</pre>
<pre>rails g migration add_stats_to_articles stats:text</pre>
添加一个计算 stats 方法 和 一个 after_create 方法，在创建一条记录后，会把 calculate_stats 添加到 Queue 队列，当队列中有任务时，后台创建一个线程执行该 job
<pre>class Article &lt; ActiveRecord::Base
  # ...
  serialize :stats
  def calculate_stats
    words = Hash.new(0)
    body.to_s.scan(/\S+/) { |word| words[word] += 1 }
    sleep 10  # simulate a lot of work
    self.stats = {words: words}
  end

  require &quot;thread&quot;
  def self.queue; @queue ||= Queue.new end
  def self.thread
    @thread ||= Thread.new do
      while job = queue.pop
        job.call
      end
    end
  end
  thread  # start the Thread

  after_create :add_stats
  def add_stats
    self.class.queue &lt;&lt; -&gt; { calculate_stats; save }
  end
end</pre>
添加一条记录，10秒后会自动给该记录 stats 字段添加 words Hash
<pre>$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; Article.create!(subject: &quot;Stats&quot;, body: &quot;Lorem ipsum...&quot;);
Time.now.strftime(&quot;%H:%M:%S&quot;)
=&gt; &quot;15:24:10&quot;
&gt;&gt; [Article.last.stats, Time.now.strftime(&quot;%H:%M:%S&quot;)]
=&gt; [nil, &quot;15:24:13&quot;]
&gt;&gt; [Article.last.stats, Time.now.strftime(&quot;%H:%M:%S&quot;)]
=&gt;[{:words=&gt;{&quot;Lorem&quot;=&gt;1, &quot;ipsum&quot;=&gt;1, ...}, &quot;15:24:26&quot;]</pre>
39 - 用 Rails 生成静态站点

修改 config/environment/development.rb
<pre>Static::Application.configure do
  # ...
  # Show full error reports and disable caching
  config.consider_all_requests_local       = true
  config.action_controller.perform_caching = !!ENV[&quot;GENERATING_SITE&quot;]
  # ...
  # Don&#039;t fallback to assets pipeline if a precompiled asset is missed
  config.assets.compile = !ENV[&quot;GENERATING_SITE&quot;]
  # Generate digests for assets URLs
  config.assets.digest = !!ENV[&quot;GENERATING_SITE&quot;]
  # ...
end

class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  if ENV[&quot;GENERATING_SITE&quot;]
    after_filter do |c|
      c.cache_page(nil, nil, Zlib::BEST_COMPRESSION)
    end
  end
end</pre>
修改 rake static:generate 任务
<pre>require &quot;open-uri&quot;
namespace :static do
  desc &quot;Generate a static copy of the site&quot;
  task :generate =&gt; %w[environment assets:precompile] do
    site = ENV.fetch(&quot;RSYNC_SITE_TO&quot;) { fail &quot;Must set RSYNC_SITE_TO&quot; }
    server = spawn( {&quot;GENERATING_SITE&quot; =&gt; &quot;true&quot;},
                    &quot;bundle exec rails s thin -p 3001&quot; )
    sleep 10  # FIXME: start when the server is up

    # FIXME: improve the following super crude spider
    paths = %w[/]
    files = [ ]
    while path = paths.shift
      files &lt;&lt; File.join(&quot;public&quot;, path.sub(%r{/\z}, &quot;/index&quot;) + &quot;.html&quot;)
      File.unlink(files.last) if File.exist? files.last
      files &lt;&lt; files.last + &quot;.gz&quot;
      File.unlink(files.last) if File.exist? files.last
      page = open(&quot;http://localhost:3001#{path}&quot;) { |url| url.read }
      page.scan(/]+href=&quot;([^&quot;]+)&quot;/) do |link|
        paths &lt;&lt; link.first
      end
    end

    system(&quot;rsync -a public #{site}&quot;)

    Process.kill(&quot;INT&quot;, server)
    Process.wait(server)
    system(&quot;bundle exec rake assets:clean&quot;)
    files.each do |file|
      File.unlink(file)
    end
  end
end</pre>
生成到某个地方，去查看吧
<pre>rake static:generate RSYNC_SITE_TO=/Users/james/Desktop</pre>
后面几个都不感兴趣，没有测试，说好的42个，瞎扯了3个pass掉了，实在是吐血了

Over.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>637</wp:post_id>
		<wp:post_date>2012-09-07 23:29:39</wp:post_date>
		<wp:post_date_gmt>2012-09-07 15:29:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%a0%e5%8f%af%e8%83%bd%e9%94%99%e8%bf%87%e7%9a%84-rails-%e6%8a%80%e5%b7%a7%e4%b8%80-posted-by-bigcircle</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rails-ruby"><![CDATA[rails.ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="tips"><![CDATA[tips]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>在 Cloud Foundry 上使用 JRuby for Rails 应用程序</title>
		<link></link>
		<pubDate>Mon, 10 Sep 2012 14:28:29 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=648</guid>
		<description></description>
		<content:encoded><![CDATA[<p align="left">[译注]本文翻译自Cloud Foundry英文博客站点，原文题为“<a href="http://blog.cloudfoundry.com/post/13481011043/deploying-jruby-on-rails-applications-on-cloud-foundry"><strong>Using JRuby for Rails Applications on Cloud Foundry</strong></a>”，文章发表时间是 2012 年 4 月 19 日。</p>
<p align="left">如今，只需进行一些简单的配置更改，即可将 JRuby Rails 应用程序部署到 CloudFoundry.com。JRuby 应用程序常常通过创建一个包含 Rails 应用程序的 .war 文件来部署到 servlet 容器中。对于 Cloud Foundry，我们将采取同样的做法，同时对数据库配置进行一些更改，以便应用程序还可以访问 CloudFoundry.com 上的数据库服务。</p>

<h4 align="left">将 JRuby on Rails 应用程序部署到 Cloud Foundry 上时需进行的更改</h4>
<p align="left">要使 JRuby 应用程序在 CloudFoundry.com 上运行，我们需要完成两项任务。首先，我们需通过修改 configuration 目录中的 database.yml 文件将该应用程序配置为连接到 CloudFoundry.com 上的数据库服务。当我们部署该应用程序时，我们还需要运行“rake db:migrate”的等效命令，以便创建数据库表。我们可以通过在 config/initializers 目录中添加一个初始化程序来做到这一点。</p>
<p align="left">环境变量 VCAP_SERVICES 中提供了我们在配置数据库连接时所需的信息。我们可以通过编程方式分析该变量，也可以使用方便的 Cloud Foundry 运行时 gem（请参见<a href="http://cnblog.cloudfoundry.com/?p=234"><strong>将</strong><strong> Cloud Foundry </strong><strong>服务与</strong><strong> Ruby </strong><strong>搭配使用：第</strong><strong> 2 </strong><strong>部分</strong><strong> – </strong><strong>对</strong><strong> Ruby </strong><strong>应用程序的实时支持</strong></a>博文），在本篇博文中我们将采用后者。要使用该 gem，我们需要将它包含在我们的 Gemfile 中：</p>

<div>
<div id="highlighter_85231">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>...</code></div>
<div><code>gem  </code><code>'cf-runtime'</code></div>
<div><code>...</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<p align="left">既然我们已经添加了该 gem，我们就可以向 database.yml 文件中添加一些代码段，用以访问生产环境的数据库服务信息。下面是一个 database.yml 文件中的 production 部分，在这个文件中我们使用的是 MySQL 数据库：</p>
<p align="left"><strong>config/database.yml</strong></p>

<div>
<div id="highlighter_84359">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>production:</code></div>
<div><code>    </code><code>adapter: mysql</code></div>
<div><code>    </code><code>&lt;% require </code><code>'cfruntime/properties'</code> <code>%&gt;</code></div>
<div><code>    </code><code>&lt;% db_svc = CFRuntime::CloudApp.service_props(</code><code>'mysql'</code><code>) %&gt;</code></div>
<div><code>    </code><code>database: &lt;%= db_svc[:database] rescue </code><code>'bookshelf_production'</code> <code>%&gt;</code></div>
<div><code>    </code><code>username: &lt;%= db_svc[:username] rescue </code><code>'root'</code> <code>%&gt;</code></div>
<div><code>    </code><code>password: &lt;%= db_svc[:password] rescue </code><code>''</code> <code>%&gt;</code></div>
<div><code>    </code><code>host: &lt;%= db_svc[:host] rescue </code><code>'localhost'</code> <code>%&gt;</code></div>
<div><code>    </code><code>port: &lt;%= db_svc[:port] rescue </code><code>'3306'</code> <code>%&gt;</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<p align="left">正如您可以看到的那样，我们添加了一个 require 语句来获取 cfruntime/properties，然后我们通过调用 service_props 方法并在调用时传入我们所使用的服务类型来获取服务属性的哈希值。如果仅有一项属于该类型的服务绑定到该应用程序，则无需指定此服务的实际名称。如果您将多项属于同一类型的服务绑定到您的应用程序，您将需要指定实际服务名称。服务属性的哈希值存储在一个名为 db_svc 的变量中，代码会将对应的值提取出来以用作数据库、用户名、密码、主机和端口。其中的每一条语句都有一个 rescue 子句，如果我们并非在 Cloud Foundry 环境中操作，则该语句将提供要使用的值，这种情况下 db_svc 将为 Nil。</p>
<p align="left">另外，如果使用的是 PostgreSQL，则该 database.yml 文件的 production 部分将大致如下：</p>

<div>
<div id="highlighter_152958">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>production:</code></div>
<div><code>   </code><code>adapter: postgresql</code></div>
<div><code>   </code><code>encoding: unicode</code></div>
<div><code>   </code><code>&lt;% require </code><code>'cfruntime/properties'</code> <code>%&gt;</code></div>
<div><code>   </code><code>&lt;% db_svc = CFRuntime::CloudApp.service_props(</code><code>'postgresql'</code><code>) %&gt;</code></div>
<div><code>   </code><code>database: &lt;%= db_svc[:database] rescue </code><code>'bookshelf_production'</code> <code>%&gt;</code></div>
<div><code>   </code><code>username: &lt;%= db_svc[:username] rescue </code><code>'bookshelf'</code> <code>%&gt;</code></div>
<div><code>   </code><code>password: &lt;%= db_svc[:password] rescue </code><code>''</code> <code>%&gt;</code></div>
<div><code>   </code><code>host: &lt;%= db_svc[:host] rescue </code><code>'localhost'</code> <code>%&gt;</code></div>
<div><code>   </code><code>port: &lt;%= db_svc[:port] rescue </code><code>'5432'</code> <code>%&gt;</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<p align="left">接下来，我们将注意力转向创建供我们的应用程序使用的表上面。为此，我们在部署该应用程序时需向 config/initializers 目录中添加以下初始化程序。我将该初始化程序命名为 cf_db_migrate.rb：</p>
<p align="left"><strong>config/initializers/cf_db_migrate.rb</strong></p>

<div>
<div id="highlighter_908259">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>require </code><code>'cfruntime/properties'</code></div>
<div></div>
<div><code># Run the equivalent of rake db:migrate on startup</code></div>
<div><code>if</code> <code>CFRuntime::CloudApp.running_in_cloud?</code></div>
<div><code>  </code><code>migrations = Rails.root.join(</code><code>'db'</code><code>,</code><code>'migrate'</code><code>)</code></div>
<div><code>  </code><code>if</code> <code>migrations.directory?</code></div>
<div><code>    </code><code>ActiveRecord::Migrator.migrate(migrations)</code></div>
<div><code>  </code><code>end</code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<p align="left">我们再次使用 cfruntime/properties 来检查我们当前是否在云中运行。接下来，我们将检查 db/migrate 目录是否存在；如果它存在，我们将使用该目录中的迁移文件来运行数据库迁移 (ActiveRecord::Migrator.migrate(migrations))。</p>
<p align="left">我们还必须进行的一项更改就是对 warble 配置的更改。默认情况下此配置在生成的 war 文件中不包含 db/migrate 目录，因此我们需要通过指定 config.includes = FileList["db/migrate/*"] 将此目录添加到此配置中。下面是 config/warble.rb 文件的相关内容：</p>
<p align="left"><strong>config/warble.rb</strong></p>

<div>
<div id="highlighter_236881">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code># Warbler web application assembly configuration file</code></div>
<div><code>Warbler::Config.</code><code>new</code> <code>do</code> <code>|config|</code></div>
<div></div>
<div><code>  </code><code># Application directories to be included in the webapp.</code></div>
<div><code>  </code><code>config.dirs = %w(app config lib log vendor tmp)</code></div>
<div></div>
<div><code>  </code><code># Additional files/directories to include, above those in config.dirs</code></div>
<div><code>  </code><code>config.includes = FileList[</code><code>"db/migrate/*"</code><code>]</code></div>
<div></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<h4 align="left">一个完整示例</h4>
<a href="http://jhjguxin.sinaapp.com/?attachment_id=244" rel="attachment wp-att-244"><img title="Example" src="http://cnblog.cloudfoundry.com/wp-content/uploads/2012/07/Example.tif" alt="" /></a>
<p align="left">我们从上文中已经了解到需做出哪些更改，那我们就来快速生成一个 Rails 应用程序并做出所需的更改，然后将该应用程序部署到 CloudFoundry.com。如果您尚未安装 JRuby，建议首先参阅 <a href="http://jruby.org/getting-started"><strong>JRuby </strong><strong>入门</strong></a>。</p>

<h3 align="left"><strong>创建</strong><strong> JRuby Rails </strong><strong>应用程序</strong><strong></strong></h3>
<p align="left">首先，我们创建新应用程序，并创建具有完整基架的第一个域对象。</p>

<pre>&lt;code&gt;jruby -S rails new bookshelf -d mysql cd bookshelf jruby -S rails generate scaffold Book title:string category:string published:integer price:decimal{10.2} isbn:string &lt;/code&gt;</pre>
<p align="left">接下来，我们删除生成的 public/index.html，然后修改 config/routes.rb 以使用“books”作为根目录：</p>

<pre>&lt;code&gt;rm public/index.html vi config/routes.rb&lt;/code&gt;</pre>
<p align="left">下面是我在 config/routes.rb 中添加的路由：</p>

<div>
<div id="highlighter_226813">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>Bookshelf::Application.routes.draw </code><code>do</code></div>
<div><code>  </code><code>resources :books</code></div>
<div></div>
<div><code>  </code><code># You can have the root of your site routed with </code><code>"root"</code></div>
<div><code>  </code><code># just remember to delete </code><code>public</code><code>/index.html.</code></div>
<div><code>  </code><code># root :to =&gt; </code><code>'welcome#index'</code></div>
<div><code>  </code><code>root :to =&gt; </code><code>'books#index'</code></div>
<div></div>
<div><code>  </code><code># See how all your routes lay out with </code><code>"rake routes"</code></div>
<div></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<p align="left">现在，我们将在本地运行此应用程序以确保它正常运行：</p>

<pre>&lt;code&gt;jruby -S rake db:create jruby -S rake db:migrate jruby -S rails server&lt;/code&gt;</pre>
<p align="left"><a href="http://jhjguxin.sinaapp.com/?attachment_id=237" rel="attachment wp-att-237"><img title="1" src="http://cnblog.cloudfoundry.com/wp-content/uploads/2012/07/1.jpg" alt="" width="743" height="475" /></a></p>
<p align="left">Book 实体的 Rails 空列表视图表明它确实正常运行。现在，我可以向我的书架添加新书。</p>

<h3 align="left"><strong>修改</strong><strong> JRuby Rails </strong><strong>应用程序以便部署到</strong><strong> CloudFoundry</strong></h3>
<p align="left">我们来首先进行我们在上文中提到的以下更改：</p>

<ul>
	<li>将 gem cf-runtime 添加到 Gemfile</li>
	<li>修改 config/database.yml 文件的“production:”节，具体见<a href="http://cnblog.cloudfoundry.com/?p=236/#database.yml"><strong>上文</strong></a></li>
	<li>添加一个名为 config/initializers/cf_db_migrate.rb 的文件，文件内容见<a href="http://cnblog.cloudfoundry.com/?p=236/#cf_db_migrate.rb"><strong>上文</strong></a></li>
</ul>
<p align="left">接下来我们需要生成 Warbler 配置文件，因此我们将运行：</p>

<pre>&lt;code&gt;jruby -S warble config &lt;/code&gt;</pre>
<p align="left">现在，我们就可以：</p>

<ul>
	<li>修改 config/warble.rb 以添加 db/migrate 目录，具体见<a href="http://cnblog.cloudfoundry.com/?p=236/#warble.rb"><strong>上文</strong></a></li>
</ul>
<p align="left">这些便是需要做出的全部更改，我们现在就已万事俱备，可以打包和部署此应用程序了。</p>

<h3 align="left"><strong>打包</strong><strong> JRuby Rails </strong><strong>应用程序并将其部署到</strong><strong> CloudFoundry</strong></h3>
<p align="left">我们将使用 <a href="http://kenai.com/projects/warbler/pages/Home"><strong>Warbler</strong></a> 来将此应用程序打包成一个 war，并使用 <a href="http://start.cloudfoundry.com/tools/vmc/installing-vmc.html"><strong>CloudFoundry vmc</strong></a> 命令行实用程序来部署此应用程序。</p>
<p align="left">我们用来将此应用程序打包成 war 文件的流程十分简单：捆绑，预编译资产，然后运行 Warbler：</p>

<pre>&lt;code&gt;jruby -S bundle install jruby -S rake assets:precompile jruby -S warble&lt;/code&gt;</pre>
<p align="left">这会在我们的 Rails 应用程序的根目录中创建一个 bookshelf.war。目前，将 vmc 命令与 JRuby 一起运行时会存在一些问题，不过我们正在致力于加以修复。同时，我们还可以将此 war 文件移至其他目录，这样我就可以更轻松地改用常规的“C”Ruby。我将创建一个“deploy”目录，并将该目录配置为使用 Ruby 1.9.2-p290（我当前使用的是 rbenv，但您也可以使用 RVM）：</p>

<pre>&lt;code&gt;mkdir deploy mv bookshelf.war deploy/. cd deploy rbenv local 1.9.2-p290 # (if you use RVM the command should be &#039;rvm ruby-1.9.2-p290&#039;)&lt;/code&gt;</pre>
<p align="left">现在，我们已准备就绪，可以登录 CloudFoundry 并部署我们的应用程序了。对于此部分，您需要安装<a href="http://start.cloudfoundry.com/tools/vmc/installing-vmc.html"><strong>vmc</strong></a>。</p>

<pre>&lt;code&gt;vmc target api.cloudfoundry.com vmc login cloud@mycompany.com Password: ***** Successfully logged into [http://api.cloudfoundry.com] vmc push bookshelf Would you like to deploy from the current directory? [Yn]: Y Application Deployed URL [bookshelf.cloudfoundry.com]: mybookshelf.cloudfoundry.com Detected a Java Web Application, is this correct? [Yn]: Y Memory reservation (128M, 256M, 512M, 1G, 2G) [512M]: 512M How many instances? [1]: 1 Bind existing services to &#039;bookshelf&#039;? [yN]: N Create services to bind to &#039;bookshelf&#039;? [yN]: Y 1: mongodb 2: mysql 3: postgresql 4: rabbitmq 5: redis What kind of service?: 2 Specify the name of the service [mysql-a4fd7]: mysql-books Create another? [yN]: N Would you like to save this configuration? [yN]: N Creating Application: OK Creating Service [mysql-books]: OK Binding Service [mysql-books]: OK Uploading Application: Checking for available resources: OK Processing resources: OK Packing application: OK Uploading (707K): OK Push Status: OK Staging Application &#039;bookshelf&#039;: OK Starting Application &#039;bookshelf&#039;: OK&lt;/code&gt;</pre>
<p align="left">上面已将 vmc 命令突出显示出来。除 URL 以及是否应创建服务外，已接受大部分默认设置。我使用的 URL 为“mybookshelf.cloudfoundry.com”而非默认 URL，以免与现有的书架应用程序冲突。对于是否创建新服务的问题，我回答“Y”；此外我还选择了 (2) mysql 并将其命名为“mysql-books”。</p>
<p align="left">现在我们应看到此应用程序正在运行：</p>

<pre>&lt;code&gt;vmc apps +-------------+----+---------+---------------------------------+---------------+ | Application | # | Health | URLS | Services | +-------------+----+---------+---------------------------------+---------------+ | bookshelf | 1 | RUNNING | mybookshelf.cloudfoundry.com | mysql-books | +-------------+----+---------+---------------------------------+---------------+&lt;/code&gt;</pre>
<p align="left">因此，我们现在输入“http://mybookshelf.cloudfoundry.com/”，就可以看到此 Bookshelf 应用程序惟妙惟肖地展示出来，我们可以添加一些书籍。</p>
<p align="left"><a href="http://jhjguxin.sinaapp.com/2012/02/14/rvm%e4%b8%8b%e5%ae%89%e8%a3%85gem%e7%bc%96%e8%af%91%e5%a4%b1%e8%b4%a5-linecache19/237-revision/" rel="attachment wp-att-238"><img title="2" src="http://cnblog.cloudfoundry.com/wp-content/uploads/2012/07/2.jpg" alt="" width="743" height="475" /></a></p>
<p align="left">您可以在 <a href="https://github.com/cloudfoundry-samples/jruby-rails-bookshelf"><strong>cloudfoundry-samples/jruby-rails-bookshelf</strong></a> 位置查看和下载用于此示例的完整源代码；如果您只想了解为在 Cloud Foundry 中部署而需进行的更改，请查看此<a href="https://github.com/cloudfoundry-samples/jruby-rails-bookshelf/commit/b568eac02b1cf50f47d62de0d0c63219c3198fc0"><strong>提交</strong></a>。</p>

<h4 align="left">结论</h4>
<p align="left">我们已经证明了可以将一个简单的 JRuby on Rails 应用程序部署到 cloudfoundry 并使用 MySQL 服务作为支持它的数据存储。只需对数据库的应用程序配置进行一些修改，即可做到。</p>
<p align="left">我们将发布一篇博文来阐述对于使用 DataMapper 实现持久保留的 JRuby Sinatra 应用程序我们需要进行的类似更改。</p>
<p align="left"><em>- Cloud Foundry </em><em>团队</em>
<em></em><em>Thomas Risberg</em></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>648</wp:post_id>
		<wp:post_date>2012-09-10 22:28:29</wp:post_date>
		<wp:post_date_gmt>2012-09-10 14:28:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%9c%a8-cloud-foundry-%e4%b8%8a%e4%bd%bf%e7%94%a8-jruby-for-rails-%e5%ba%94%e7%94%a8%e7%a8%8b%e5%ba%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cloud-foundry"><![CDATA[Cloud Foundry]]></category>
		<category domain="post_tag" nicename="jruby-for-rails"><![CDATA[JRuby for Rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IE, iframe, P3P, Cookies, oh my</title>
		<link></link>
		<pubDate>Thu, 13 Sep 2012 14:53:42 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=651</guid>
		<description></description>
		<content:encoded><![CDATA[测试新浪微游戏接口时，发现一个问题：当使用IE浏览器的时候，rails的session无法保存。之前在自己开发服务器上测试时，验证过IE和Firefox都能正常使用session的，觉得很是奇怪。

通 过抓包发现，正常情况下，服务器端在响应客户端访问请求后，在返回的http头中会有Set-Cookies这样的参数，同时在接下来的客户端的http 请求头中，会加上Cookie这样的参数；上述不能正常保存session情况下的抓包分析发现，客户端的http请求头中浏览器没有设置Cookie参 数。

解决方法一：修改IE的默认Cookie设置，设置IE隐私设置中的高级隐私设置，勾选“总是允许回话Cookie”，这样session的值就能正常保存了。不过这样肯定不是最好的解决办法，对大多数用户来说，这样做不合理。

解决方法二：参考方法来自： <a href="http://www.sympact.net/2008/07/rails-and-ifram.html" target="_blank">http://www.sympact.net/2008/07/rails-and-ifram.html</a> ，文中描述了具体原因，是因为IFrame中打开的链接和主页面的链接不在同一个域，所以IE默认会认为是不可信任的，则不允许使用Cookie。解决办 法正如文中所示，在controller中的before_filter中增加一个方法，此方法中设置响应的http相应头中增加P3P参数，问题即可解 决。
大致代码如下：
<pre class="brush: rails; gutter: true"></pre>
<div id="LC1">[rails IE, IFRAME, P3P, COOKIES](<a href="https://gist.github.com/3719568">https://gist.github.com/3719568</a>)</div>
<div id="LC10">
<pre class="brush: rails; gutter: true">#userful gem [rack-p3p](https://github.com/hoopla/rack-p3p)
# encoding: utf-8
class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  before_filter :set_p3p
  def set_p3p
    headers[&#039;P3P&#039;] = &quot;policyref=\&quot;/w3c/p3p.xml\&quot;, CP=\&quot;ALL DSP COR CURa ADMa DEVa TAIa OUR BUS IND UNI COM NAV INT\&quot;&quot;
  end
end</pre>
</div>
<div id="LC10"></div>
I was just banging my head against the wall trying to figure out why internet explorer wasn’t remembering my user’s sessions. Turns out it’s something that has bitten me in the past.

IE doesn’t allow you to set cookies when your site is in an iframe unless your site has set P3P headers. Also, ordering matters – the P3P header must be set *before* the cookie is set.

If you’re using ruby, this gem works pretty well: <a href="https://github.com/hoopla/rack-p3p">https://github.com/hoopla/rack-p3p</a>

Further reading: <a href="http://stackoverflow.com/questions/389456/cookie-blocked-not-saved-in-iframe-in-internet-explorer">http://stackoverflow.com/questions/389456/cookie-blocked-not-saved-in-iframe-in-internet-explorer</a>

All the articles I read about setting headers, etags, etc were all really old. Hopefully, if you’re using rails you found this article. Just install the gem and add the line from the README to your application.rb – no monkey patching. Good luck.
<h2>rails IE frame ActionController::InvalidAuthenticityToken</h2>
Same problem here with a rails application launched in an iframe I get:

"the change you wanted was rejected"

In log:

ActionController::InvalidAuthenticityToken<wbr></wbr>

Seems that the problem occur in IE when you are developing in an iframe situation where the master page is at a different domain than the inner page. (es: iframed Facebook applications)

This is because IE's default "medium" privacy setting has an issue with cookies in that situation.

A possible solution is to set a P3P header (try to google: p3p iframe internet explorer) Example, in application_controller.rb:
<pre>&lt;code&gt;before_filter  &lt;wbr&gt;:set_p3p

def set_p3p
 &lt;wbr&gt; response.headers[&quot;P3P&quot;]=&#039;CP=&quot;CAO PSA OUR&quot;&#039;
end&lt;/wbr&gt;&lt;/wbr&gt;&lt;/code&gt;</pre>
&nbsp;
<h1 id="subject_tpc">php版站内应用在ie浏览器下获取到session值(失效)[已解决]</h1>
<div>
<div id="read_tpc">php版站内应用在ie浏览器下获取到session值(失效)
首页授权证后保存的session在其它页面获取不到。例如：
在站内应用的iframe下：
a.php
&lt;?php
session_start();
$_SESSION["user"]="abc";
echo $_SESSION["user"];
?&gt;
&lt;a href="b.php"&gt;b.php&lt;/a&gt;

b.php
&lt;?php
session_start();
echo $_SESSION["user"];
?&gt;

运行a.php后正常显示abc，跳转到b.php显示为空。

这问题纠缠了我很久了，不继地调试，直到今晚终于找到答案了：
原来这也属于是跨域访问的问题。

以下是解决方案：
<strong>“用P3P header解决iframe跨域访问cookie/session”的问题</strong>
理论很简单,而且模式也和大多请求返回状态的SSO差不多.但是有几个地方是要注意一下的.
1.页面里的COOKIE不能是浏览器进程的COOKIE(包括验证票和不设置超时时间的COOKIE),否则跨域会取不到.这点做跨域COOKIE的人比较少提到.不过实际上留意下几家大学做的方案,有细微的提到他们的验证模块里的COOKIE是有设置超时时间的.
2.当利用IFRAME时,记得要在相应的动态页的页头添加一下P3P的信息,否则IE会自觉的把IFRAME框里的COOKIE给阻止掉,产生问题.本身不保存自然就取不到了.这个其实是FRAMESET和COOKIE的问题,用FRAME或者IFRAME都会遇到.
3.测试时输出TRACE,会减少很多测试的工作量.
只需要设置 P3P HTTP Header，在隐含 iframe 里面跨域设置 cookie 就可以成功。他们所用的内容是：
P3P: CP='CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR'

ASP直接在头部加了头部申明，测试有效。
&lt;%Response.AddHeader "P3P", "CP=CAO PSA OUR"%&gt;

php的话，我没去试，应该是如下写法：
header('P3P: CP=CAO PSA OUR');

ASP.NET的话
通过在代码上加Response.AddHeader("P3P", "CP=CAO PSA OUR")或者在Window服务中将ASP.NET State Service 启动。
JSP:response.setHeader("P3P","CP=CAO PSA OUR")

如何在静态页面加头信息 P3P: CP="CAO PSA OUR 来解决框架与cookie的问题?
IIS站点管理器允许你给所有输出的内容都加上任意HTTP Header，你只要在Custom Header里面加上P3P: CP="CAO PSA OUR"
就ok了

</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>651</wp:post_id>
		<wp:post_date>2012-09-13 22:53:42</wp:post_date>
		<wp:post_date_gmt>2012-09-13 14:53:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ie-iframe-p3p-cookies-oh-my</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cookies"><![CDATA[Cookies]]></category>
		<category domain="post_tag" nicename="ie"><![CDATA[IE]]></category>
		<category domain="post_tag" nicename="iframe"><![CDATA[iframe]]></category>
		<category domain="post_tag" nicename="p3p"><![CDATA[P3P]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sharing A Devise User Session Across Subdomains With Rails 3</title>
		<link></link>
		<pubDate>Sat, 15 Sep 2012 08:21:36 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=655</guid>
		<description></description>
		<content:encoded><![CDATA[<pre>to andersen
  仔细测了一下 Askjane::Application.config.session_store :active_record_store, key: &#039;_askjane_session&#039;, :domain =&gt; &quot;.bbtang.com&quot;在 server上
  是ok的（效果上也是能共享bbtang.com 和www.bbtang.com的会话的只要端口一致）就是不知道在本地如何因为本地一般不会设置host绑定域名(经测试答案是不能的)，如何（所以需要:all这个设置项）
to 客服 和 jojo
 提一点 你们一些 首页源码的时候 不要把 域名加上去  注意 尼玛 端口不一致 也是不能share 会话的
 简而言之 你们写一些html静态源码的时候除非不在 bbtang.com的 项目上 没有必要加 域名的 这会加大 大家的成本（如果说端口不一致就会导致会话丢失，如果没有做多域名兼容也会导致会话丢失能免则免）
over</pre>
<pre></pre>
<pre>Francis.J(864248765) 13:57:28
https://github.com/rails/rails/issues/2483
Francis.J(864248765) 13:57:55
尼玛 rails 大爷又 踩雷了
Francis.J(864248765) 13:59:42
https://github.com/rails/rails/issues/2483
Francis.J(864248765) 14:02:27
https://github.com/rails/rails/pull/7316
Francis.J(864248765) 14:08:37
然后 我们看看 究竟用 :cookie_store + :domain =&gt; :all
还是  :active_record_store + &quot;.bbtang.com&quot; (这里垮子域名估计不会很合适)
还是 升一下 rails  用  :active_record_store + :domain =&gt; :all</pre>
Recently I’ve been working on a Rails application that supports subdomains. I’m using Devise for user authentication and need the user to choose a subdomain to use upon registration.

Similar to the 37signals applications, I want a single sign-on to be persistent across subdomains. Since I didn’t have a clue where to begin with subdomains, I followed <a href="https://github.com/fortuity/rails3-subdomain-devise/wiki/Tutorial-%28Walkthrough%29">this tutorial</a> on my new Rails 3.1 beta 1 application. This tutorial worked like a charm and I omitted the friendly_id and tweaked a few things to my liking.

The gist of it is simple. Create a User model like you would normally do with Devise. You add a Subdomain model that is linked to the Users (in my case I only wanted a single subdomain per user). Configuring the routes is pretty simple as you can simply create a constraint that will match the root and fire it off to the right action and let the rest fall through.

The trick comes into sharing the session between domains. Browsers, of course, will separate out the cookies and store them by separated out by subdomain. What you want to do is edit your config/initializers/session_store.rb file to look like this
<div>
<table>
<tbody>
<tr>
<td>
<pre>APPNAMEGOESHERE::Application.config.session_store :cookie_store, :key =&gt; &#039;_tourlyapp_session&#039;, :domain =&gt; &quot;lvh.me&quot;</pre>
</td>
</tr>
</tbody>
</table>
</div>
The trick here is the <code>:domain</code> option. What this does is sets the level of the TLD (top level domain) and tells Rails how long the domain is. The part you want to watch out for here is that if you set <code>:domain =&gt; :all</code> like is recommend in some places, it simply won’t work unless you’re using localhost. <code>:all</code> defaults to a TLD length of 1, which means if you’re testing with Pow (myapp.dev) it won’t work either because that is a TLD of length 2.

You might get weird things like halfway Devise sessions sharing, but only allowing you to create and destroy the session on the root domain. Using <code>:all</code> works great if you’re using localhost, but when I started using lvh.me:3000 for testing I had those problems (lvh.me stands for local vhost me and is a domain that simply points to localhost which makes for zero-config subdomain development. It’s super handy.).

The best option might be to comment out this line and put it into your individual environment configurations. This way you can keep things configured easily as the <code>:all</code> option. Once you’ve got your domain string added everything should work like a charm.

<strong>BONUS PROTIP: </strong>The normal route variables you see used end with _path. These don’t include the domain and therefore ignore the :subdomain option you pass into them. <code>url_for</code>, on the other hand, does support subdomains so you should get into the habit of using root_url instead of root_path and so on.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>655</wp:post_id>
		<wp:post_date>2012-09-15 16:21:36</wp:post_date>
		<wp:post_date_gmt>2012-09-15 08:21:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sharing-a-devise-user-session-across-subdomains-with-rails-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="devise"><![CDATA[devise]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="session"><![CDATA[Session]]></category>
		<category domain="post_tag" nicename="subdomains"><![CDATA[Subdomains]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_25f7002c5626f25cb2fac73336fdeeb7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_130e009de153c447cd1fde3be80eeaaf</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Single sign-on 单点登录 sso</title>
		<link></link>
		<pubDate>Wed, 26 Sep 2012 00:35:42 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=669</guid>
		<description></description>
		<content:encoded><![CDATA[from wiki

<strong>Single sign-on</strong> (<strong>SSO</strong>) is a property of <a title="Access control" href="http://en.wikipedia.org/wiki/Access_control">access control</a> of multiple related, but independent <a title="Software" href="http://en.wikipedia.org/wiki/Software">software</a> systems. With this property a user <a title="Login" href="http://en.wikipedia.org/wiki/Login">logs in</a> once and gains access to all systems without being prompted to log in again at each of them. Conversely, <strong>Single sign-off</strong> is the property whereby a single action of signing out terminates access to multiple software systems.

As different applications and resources support different <a title="Authentication" href="http://en.wikipedia.org/wiki/Authentication">authentication</a> mechanisms, single sign-on has to internally translate to and store different credentials compared to what is used for initial authentication.

from baike

单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一。SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。
<div></div>
企业应用集成（EAI, Enterprise Application Integration）。企业应用集成可以在不同层面上进行：例如在数据存储层面上的“数据大集中”，在传输层面上的“通用数据交换平台”，在应用层面上的“业务流程整合”，和用户界面上的“通用企业门户”等等。事实上，还有一个层面上的集成变得越来越重要，那就是“身份认证”的整合，也就是“单点登录”。

现在普遍使用 oauth 来实现 多个系统的授权 认证

<a href="https://github.com/songkick/oauth2-provider">https://github.com/songkick/oauth2-provider</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>669</wp:post_id>
		<wp:post_date>2012-09-26 08:35:42</wp:post_date>
		<wp:post_date_gmt>2012-09-26 00:35:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>single-sign-on-%e5%8d%95%e7%82%b9%e7%99%bb%e5%bd%95-sso</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="oauth2"><![CDATA[oauth2]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="sso"><![CDATA[sso]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>晒晒我们的开源项目 ITEYE开源代码</title>
		<link></link>
		<pubDate>Thu, 27 Sep 2012 00:34:34 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=674</guid>
		<description></description>
		<content:encoded><![CDATA[我们的研发团队是一支mini型研发团队，目前共有研发人员13人。由于网站产品维护的历史原因，这13人的研发团队分为4支小组，分别是：Ruby研发小组5人；PHP研发小组4人；.net研发小组2人，Java搜索小组2人。

别看我们研发人员这么少，但是我们研发人员战斗力很强，我们维护和开发着十多条产品线。在我们开发自身产品的过程中，也积累了一些比较通用的组件，一些对大家来说有用的工具。因此从今年下半年开始，我们陆续将一些组件和工具开源出来，哪怕这些项目的质量并不是那么高，也希望能够给社区带来一点点自己的贡献。

以下简要介绍一下我们已经开源的项目，今后我们还会努力开源更多的东西和大家交流和分享：

1、Ansj中文分词 - 开源的高准确率Java中文分词器

项目Github地址：<a href="https://github.com/ansjsun/ansj_seg" target="_blank">https://github.com/ansjsun/ansj_seg</a>
这是基于大名鼎鼎中科院的Ictclas中文分词算法编写的Java实现版本，比常用的开源mmseg4j的分词准确率高。目前我们自己站内的搜索将逐渐从mmseg4j算法替换成Ansj中文分词算法。

2、ServiceFramework - 开源的羽量级Java Web服务框架

项目Github地址：<a href="https://github.com/allwefantasy/ServiceFramework" target="_blank">https://github.com/allwefantasy/ServiceFramework</a>
我们基于Java的开源搜索框架lucene编写了网站的分布式搜索和Tag文章分类服务。因为需要向前端的Web应用程序提供搜索和Tag服务接口API，所以我们编写了这个羽量级的Java框架软件。它的优点就是羽量级，自身集成了Jetty服务器，MVC，IoC和ORM，让你只需要编写非常少的代码，就可以快速将你的业务逻辑组件以Web API的方式提供服务。

3、ExportBlog - 开源的通用博客导出工具

项目Github地址：<a href="https://github.com/sqzhuyi/ExportBlog" target="_blank">https://github.com/sqzhuyi/ExportBlog</a>
这是一个基于.net Winforms编写的通用博客导出工具，支持导出网站包括：CSDN、ITEYE、博客园、新浪、搜狐、和讯、ChinaUnix、网易、51CTO、开源中国、百度空间、QQ空间等等。导出格式支持CHM、PDF、HTML、TXT和EPUB 5种格式文档。详细介绍：<a href="http://blog.csdn.net/sq_zhuyi/article/details/7924776" target="_blank">http://blog.csdn.net/sq_zhuyi/article/details/7924776</a>

4、Secode_level_cache - 开源的Rails对象缓存插件

项目Github地址：<a href="https://github.com/csdn-dev/second_level_cache" target="_blank">https://github.com/csdn-dev/second_level_cache</a>
Rails的ActiveRecord自身没有带强大的对象缓存功能，这是AR的一个重大的遗憾。早在2008年开始，我们就借鉴了Java强大的ORM框架Hibernate的二级对象缓存编写了这个Rails的AR对象缓存插件，并且一直作为JavaEye网站缓存优化的秘密武器来使用，取得了非常理想的效果。
现在我们将这个插件从Rails2.x的版本升级到了3.x版本，并且抽取成了一个通用插件，开始应用于新的Rails3.2的项目之上。有志于AR对象缓存优化的ruby程序员不容错过。

5、limiter － 网站反爬虫和DOS攻击的利器

项目Github地址：<a href="https://github.com/csdn-dev/limiter" target="_blank">https://github.com/csdn-dev/limiter</a>
早年的JavaEye网站曾经深受DOS攻击和爬虫海量抓取造成的负载过高的困扰，我曾经和这个问题进行了为期几年不懈的斗争，并且在总结几年斗争经验后写了一篇总结性博客文章：<a href="http://robbin.iteye.com/blog/451014" target="_blank">互联网网站的反爬虫策略浅析</a> 。当时我基于这个反爬虫策略编写了JavaEye网站的智能防火墙插件，取得了良好的效果。
现在我们将这个插件从JavaEye的源代码中剥离出来，抽取成一个通用的rackware，便于应用于普通的Rails3.x的项目当中。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>674</wp:post_id>
		<wp:post_date>2012-09-27 08:34:34</wp:post_date>
		<wp:post_date_gmt>2012-09-27 00:34:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%99%92%e6%99%92%e6%88%91%e4%bb%ac%e7%9a%84%e5%bc%80%e6%ba%90%e9%a1%b9%e7%9b%ae-iteye%e5%bc%80%e6%ba%90%e4%bb%a3%e7%a0%81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="iteye"><![CDATA[iteye]]></category>
		<category domain="post_tag" nicename="opensources"><![CDATA[opensources]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<category domain="category" nicename="%e5%b7%a5%e5%85%b7%e6%8e%a7"><![CDATA[工具控]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails Active Record Named Scopes</title>
		<link></link>
		<pubDate>Sat, 06 Oct 2012 10:56:59 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=682</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://api.rubyonrails.org/classes/ActiveRecord/Scoping.html">Active Record Named Scopes</a>

<a href="http://api.rubyonrails.org/classes/ActiveRecord/Scoping/ClassMethods.html">Instance Public methods</a>

<code>with_scope(scope = {}, action = :merge, &amp;block)</code> <code>with_scope</code> lets you apply options to inner block incrementally. It takes a hash and the keys must be <code>:find</code> or <code>:create</code>. <code>:find</code> parameter is Relation while <code>:create</code> parameters are an attributes hash.
<div>
<pre>class Article &lt; ActiveRecord::Base
  def self.create_with_scope
    with_scope(:find =&gt; where(:blog_id =&gt; 1), :create =&gt; { :blog_id =&gt; 1 }) do
      find(1) # =&gt; SELECT * from articles WHERE blog_id = 1 AND id = 1
      a = create(1)
      a.blog_id # =&gt; 1
    end
  end
end</pre>
</div>
In nested scopings, all previous parameters are overwritten by the innermost rule, with the exception of where, includes, and joins operations in Relation, which are merged.

joins operations are uniqued so multiple scopes can join in the same table without table aliasing problems. If you need to join multiple tables, but still want one of the tables to be uniqued, use the array of strings format for your joins.
<div>
<pre>class Article &lt; ActiveRecord::Base
  def self.find_with_scope
    with_scope(:find =&gt; where(:blog_id =&gt; 1).limit(1), :create =&gt; { :blog_id =&gt; 1 }) do
      with_scope(:find =&gt; limit(10)) do
        all # =&gt; SELECT * from articles WHERE blog_id = 1 LIMIT 10
      end
      with_scope(:find =&gt; where(:author_id =&gt; 3)) do
        all # =&gt; SELECT * from articles WHERE blog_id = 1 AND author_id = 3 LIMIT 1
      end
    end
  end
end</pre>
</div>
<strong>You can ignore any previous scopings</strong> by using the <code>with_exclusive_scope</code> method.
<div>
<pre>class Article &lt; ActiveRecord::Base
  def self.find_with_exclusive_scope
    with_scope(:find =&gt; where(:blog_id =&gt; 1).limit(1)) do
      with_exclusive_scope(:find =&gt; limit(10)) do
        all # =&gt; SELECT * from articles LIMIT 10
      end
    end
  end
end</pre>
</div>
<strong>Note:</strong> the <code>:find</code> scope also has effect on update and deletion methods, like update_all and delete_all.

<a href="http://api.rubyonrails.org/classes/ActiveRecord/Scoping/Default/ClassMethods.html">default_scope</a>

<code>default_scope(scope = {})</code> Use this macro in your model to set a default scope for all operations on the model.
<div>
<pre>class Article &lt; ActiveRecord::Base
  default_scope where(:published =&gt; true)
end

Article.all # =&gt; SELECT * FROM articles WHERE published = true</pre>
</div>
The <code>default_scope</code> is also applied while creating/building a record. It is not applied while updating a record.
<div>
<pre>Article.new.published    # =&gt; true
Article.create.published # =&gt; true</pre>
</div>
You can also use <code>default_scope</code> with a block, in order to have it lazily evaluated:
<div>
<pre>class Article &lt; ActiveRecord::Base
  default_scope { where(:published_at =&gt; Time.now - 1.week) }
end</pre>
</div>
(You can also pass any object which responds to call to the <code>default_scope</code> macro, and it will be called when building the default scope.)

If you use multiple <code>default_scope</code> declarations in your model then they will be merged together:
<div>
<pre>class Article &lt; ActiveRecord::Base
  default_scope where(:published =&gt; true)
  default_scope where(:rating =&gt; &#039;G&#039;)
end

Article.all # =&gt; SELECT * FROM articles WHERE published = true AND rating = &#039;G&#039;</pre>
</div>
This is also the case with inheritance and module includes where the parent or module defines a <code>default_scope</code> and the child or including class defines a second one.

If you need to do more complex things with a default scope, you can alternatively define it as a class method:
<div>
<pre>class Article &lt; ActiveRecord::Base
  def self.default_scope
    # Should return a scope, you can call &#039;super&#039; here etc.
  end
end</pre>
</div>
<a href="http://api.rubyonrails.org/classes/ActiveRecord/Scoping/Named/ClassMethods.html">activerecord/lib/active_record/scoping/named.rb</a>

<code>scope(name, scope_options = {})</code> Adds a class method for retrieving and querying objects. A scope represents a narrowing of a database query, such as <code>where(:color =&gt; :red).select('shirts.*').includes(:washing_instructions)</code>.
<div>
<pre>class Shirt &lt; ActiveRecord::Base
  scope :red, where(:color =&gt; &#039;red&#039;)
  scope :dry_clean_only, joins(:washing_instructions).where(&#039;washing_instructions.dry_clean_only = ?&#039;, true)
end</pre>
</div>
The above calls to scope define class methods <code>Shirt.red</code> and <code>Shirt.dry_clean_only</code>. <code>Shirt.red</code>, in effect, represents the query <code>Shirt.where(:color =&gt; 'red')</code>.

Note that this is simply ‘syntactic sugar’ for defining an actual class method:
<div>
<pre>class Shirt &lt; ActiveRecord::Base
  def self.red
    where(:color =&gt; &#039;red&#039;)
  end
end</pre>
</div>
Unlike <code>Shirt.find(...)</code>, however, the object returned by <code>Shirt.red</code> is not an Array; it resembles the association object constructed by a has_many declaration. For instance, you can invoke <code>Shirt.red.first</code>, <code>Shirt.red.count</code>,<code>Shirt.red.where(:size =&gt; 'small')</code>. Also, just as with the association objects, named scopes act like an Array, implementing Enumerable; <code>Shirt.red.each(&amp;block)</code>, <code>Shirt.red.first</code>, and <code>Shirt.red.inject(memo, &amp;block)</code> all behave as if<code>Shirt.red</code> really was an Array.

These named scopes are composable. For instance, <code>Shirt.red.dry_clean_only</code> will produce all shirts that are both red and dry clean only. Nested finds and calculations also work with these compositions: <code>Shirt.red.dry_clean_only.count</code> returns the number of garments for which these criteria obtain. Similarly with <code>Shirt.red.dry_clean_only.average(:thread_count)</code>.

All scopes are available as class methods on the <code>ActiveRecord::Base</code> descendant upon which the scopes were defined. But they are also available to has_many associations. If,
<div>
<pre>class Person &lt; ActiveRecord::Base
  has_many :shirts
end</pre>
</div>
then <code>elton.shirts.red.dry_clean_only</code> will return all of Elton’s red, dry clean only shirts.

Named scopes can also be procedural:
<div>
<pre>class Shirt &lt; ActiveRecord::Base
  scope :colored, lambda { |color| where(:color =&gt; color) }
end</pre>
</div>
In this example, <code>Shirt.colored('puce')</code> finds all puce shirts.

On Ruby 1.9 you can use the ‘stabby lambda’ syntax:
<div>
<pre>scope :colored, -&gt;(color) { where(:color =&gt; color) }</pre>
</div>
Note that scopes defined with scope will be evaluated when they are defined, rather than when they are used. For example, the following would be incorrect:
<div>
<pre>class Post &lt; ActiveRecord::Base
  scope :recent, where(&#039;published_at &gt;= ?&#039;, Time.current - 1.week)
end</pre>
</div>
<strong>The example above would be ‘frozen’ to the <code>Time.current</code> value when the Post class was defined</strong>, and so the resultant SQL query would always be the same. The correct way to do this would be via a lambda, which will re-evaluate the scope each time it is called:
<div>
<pre>class Post &lt; ActiveRecord::Base
  scope :recent, lambda { where(&#039;published_at &gt;= ?&#039;, Time.current - 1.week) }
end</pre>
</div>
Named scopes can also have extensions, just as with has_many declarations:
<div>
<pre>class Shirt &lt; ActiveRecord::Base
  scope :red, where(:color =&gt; &#039;red&#039;) do
    def dom_id
      &#039;red_shirts&#039;
    end
  end
end</pre>
</div>
Scopes can also be used while creating/building a record.
<div>
<pre>class Article &lt; ActiveRecord::Base
  scope :published, where(:published =&gt; true)
end

Article.published.new.published    # =&gt; true
Article.published.create.published # =&gt; true</pre>
</div>
Class methods on your model are automatically available on scopes. Assuming the following setup:
<div>
<pre>class Article &lt; ActiveRecord::Base
  scope :published, where(:published =&gt; true)
  scope :featured, where(:featured =&gt; true)

  def self.latest_article
    order(&#039;published_at desc&#039;).first
  end

  def self.titles
    map(&amp;:title)
  end

end</pre>
</div>
We are able to call the methods like this:
<div>
<pre>Article.published.featured.latest_article
Article.featured.titles</pre>
</div>
<code>scoped(options = nil)</code> Returns an anonymous scope.
<div>
<pre>posts = Post.scoped
posts.size # Fires &quot;select count(*) from  posts&quot; and returns the count
posts.each {|p| puts p.name } # Fires &quot;select * from posts&quot; and loads post objects

fruits = Fruit.scoped
fruits = fruits.where(:color =&gt; &#039;red&#039;) if options[:red_only]
fruits = fruits.limit(10) if limited?</pre>
</div>
Anonymous scopes tend to be useful when procedurally generating complex queries, where passing intermediate values (scopes) around as first-class objects is convenient.

<strong>You can define a scope that applies to all finders using <code>ActiveRecord::Base.default_scope</code></strong>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>682</wp:post_id>
		<wp:post_date>2012-10-06 18:56:59</wp:post_date>
		<wp:post_date_gmt>2012-10-06 10:56:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-active-record-named-scopes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-record"><![CDATA[active record]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="scopes"><![CDATA[Scopes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby on Rails 4.0 Release Notes</title>
		<link></link>
		<pubDate>Sat, 06 Oct 2012 11:46:46 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=686</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>sources:</h1>
<a href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md">https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md</a>

<a href="http://edgeguides.rubyonrails.org/4_0_release_notes.html">http://edgeguides.rubyonrails.org/4_0_release_notes.html</a>
<h1>Ruby on Rails 4.0 Release Notes</h1>
Highlights in Rails 4.0: (WIP)
<ul>
	<li>Ruby 1.9.3 only</li>
	<li>Strong Parameters</li>
	<li>Queue API</li>
	<li>Caching Improvements</li>
</ul>
These release notes cover the major changes, but do not include each bug-fix and changes. If you want to see everything, check out the <a href="https://github.com/rails/rails/commits/master">list of commits</a> in the main Rails repository on GitHub.

<hr />

<h2><a name="upgrading-to-rails-40" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#upgrading-to-rails-40"></a>Upgrading to Rails 4.0</h2>
TODO. This is a WIP guide.

If you're upgrading an existing application, it's a great idea to have good test coverage before going in. You should also first upgrade to Rails 3.2 in case you haven't and make sure your application still runs as expected before attempting an update to Rails 4.0. Then take heed of the following changes:
<h3><a name="rails-40-requires-at-least-ruby-193" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#rails-40-requires-at-least-ruby-193"></a>Rails 4.0 requires at least Ruby 1.9.3</h3>
Rails 4.0 requires Ruby 1.9.3 or higher. Support for all of the previous Ruby versions has been dropped officially and you should upgrade as early as possible.
<h3><a name="what-to-update-in-your-apps" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#what-to-update-in-your-apps"></a>What to update in your apps</h3>
<ul>
	<li>Update your Gemfile to depend on
<ul>
	<li><code>rails = 4.0.0</code></li>
	<li><code>sass-rails ~&gt; 3.2.3</code></li>
	<li><code>coffee-rails ~&gt; 3.2.1</code></li>
	<li><code>uglifier &gt;= 1.0.3</code></li>
</ul>
</li>
</ul>
TODO: Update the versions above.
<ul>
	<li>Rails 4.0 removes <code>vendor/plugins</code> completely. You have to replace these plugins by extracting them as gems and adding them in your Gemfile. If you choose not to make them gems, you can move them into, say, <code>lib/my_plugin/*</code> and add an appropriate initializer in <code>config/initializers/my_plugin.rb</code>.</li>
</ul>
TODO: Configuration changes in environment files
<h2><a name="creating-a-rails-40-application" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#creating-a-rails-40-application"></a>Creating a Rails 4.0 application</h2>
<pre>&lt;code&gt; You should have the &#039;rails&#039; rubygem installed $ rails new myapp $ cd myapp &lt;/code&gt;</pre>
<h3><a name="vendoring-gems" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#vendoring-gems"></a>Vendoring Gems</h3>
Rails now uses a <code>Gemfile</code> in the application root to determine the gems you require for your application to start. This <code>Gemfile</code> is processed by the <a href="https://github.com/carlhuda/bundler">Bundler</a> gem, which then installs all your dependencies. It can even install all the dependencies locally to your application so that it doesn't depend on the system gems.

More information: <a href="http://gembundler.com/">Bundler homepage</a>
<h3><a name="living-on-the-edge" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#living-on-the-edge"></a>Living on the Edge</h3>
<code>Bundler</code> and <code>Gemfile</code> makes freezing your Rails application easy as pie with the new dedicated <code>bundle</code> command. If you want to bundle straight from the Git repository, you can pass the <code>--edge</code> flag:
<pre>&lt;code&gt;$ rails new myapp --edge &lt;/code&gt;</pre>
If you have a local checkout of the Rails repository and want to generate an application using that, you can pass the <code>--dev</code> flag:
<pre>&lt;code&gt;$ ruby /path/to/rails/railties/bin/rails new myapp --dev &lt;/code&gt;</pre>
<h2><a name="major-features" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#major-features"></a>Major Features</h2>
<h2><a name="documentation" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#documentation"></a>Documentation</h2>
<ul>
	<li>Guides are rewritten in GitHub Flavored Markdown.</li>
</ul>
<h2><a name="railties" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#railties"></a>Railties</h2>
<ul>
	<li>Allow scaffold/model/migration generators to accept a <code>polymorphic</code> modifier for <code>references</code>/<code>belongs_to</code>, for instance
<pre>&lt;code&gt;rails g model Product supplier:references{polymorphic} &lt;/code&gt;</pre>
will generate the model with <code>belongs_to :supplier, polymorphic: true</code> association and appropriate migration.</li>
	<li>Set <code>config.active_record.migration_error</code> to <code>:page_load</code> for development.</li>
	<li>Add runner to <code>Rails::Railtie</code> as a hook called just after runner starts.</li>
	<li>Add <code>/rails/info/routes</code> path which displays the same information as <code>rake routes</code>.</li>
	<li>Improved <code>rake routes</code> output for redirects.</li>
	<li>Load all environments available in <code>config.paths["config/environments"]</code>.</li>
	<li>Add <code>config.queue_consumer</code> to allow the default consumer to be configurable.</li>
	<li>Add <code>Rails.queue</code> as an interface with a default implementation that consumes jobs in a separate thread.</li>
	<li>Remove <code>Rack::SSL</code> in favour of <code>ActionDispatch::SSL</code>.</li>
	<li>Allow to set class that will be used to run as a console, other than IRB, with <code>Rails.application.config.console=</code>. It's best to add it to console block.
<div>
<pre># it can be added to config/application.rb
console do
  # this block is called only when running console,
  # so we can safely require pry here
  require &quot;pry&quot;
  config.console = Pry
end</pre>
</div></li>
	<li>Add a convenience method <code>hide!</code> to Rails generators to hide the current generator namespace from showing when running<code>rails generate</code>.</li>
	<li>Scaffold now uses <code>content_tag_for</code> in <code>index.html.erb</code>.</li>
	<li><code>Rails::Plugin</code> is removed. Instead of adding plugins to <code>vendor/plugins</code>, use gems or bundler with path or git dependencies.</li>
</ul>
<h3><a name="deprecations" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#deprecations"></a>Deprecations</h3>
<h2><a name="action-mailer" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#action-mailer"></a>Action Mailer</h2>
<ul>
	<li>Allow to set default Action Mailer options via <code>config.action_mailer.default_options=</code>.</li>
	<li>Raise an <code>ActionView::MissingTemplate</code> exception when no implicit template could be found.</li>
	<li>Asynchronously send messages via the Rails Queue.</li>
	<li>Delivery Options (such as SMTP Settings) can now be set dynamically per mailer action.Delivery options are set via <tt>:delivery_method_options</tt> key on mail.
<div>
<pre>def welcome_mailer(user,company)
  delivery_options = { user_name: company.smtp_user, password: company.smtp_password, address: company.smtp_host }
  mail(to: user.email, subject: &quot;Welcome!&quot;, delivery_method_options: delivery_options)
end</pre>
</div></li>
</ul>
<h2><a name="action-pack" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#action-pack"></a>Action Pack</h2>
<h3><a name="action-controller" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#action-controller"></a>Action Controller</h3>
<ul>
	<li>Add <code>ActionController::Flash.add_flash_types</code> method to allow people to register their own flash types. e.g.:
<div>
<pre>class ApplicationController
  add_flash_types :error, :warning
end</pre>
</div>
If you add the above code, you can use <code>&lt;%= error %&gt;</code> in an erb, and <code>redirect_to /foo, :error =&gt; 'message'</code> in a controller.</li>
	<li>Remove Active Model dependency from Action Pack.</li>
	<li>Support unicode characters in routes. Route will be automatically escaped, so instead of manually escaping:
<div>
<pre>get Rack::Utils.escape(&#039;こんにちは&#039;) =&gt; &#039;home#index&#039;</pre>
</div>
You just have to write the unicode route:
<div>
<pre>get &#039;こんにちは&#039; =&gt; &#039;home#index&#039;</pre>
</div></li>
	<li>Return proper format on exceptions.</li>
	<li>Extracted redirect logic from <code>ActionController::ForceSSL::ClassMethods.force_ssl</code> into<code>ActionController::ForceSSL#force_ssl_redirect</code>.</li>
	<li>URL path parameters with invalid encoding now raise <code>ActionController::BadRequest</code>.</li>
	<li>Malformed query and request parameter hashes now raise <code>ActionController::BadRequest</code>.</li>
	<li><code>respond_to</code> and <code>respond_with</code> now raise <code>ActionController::UnknownFormat</code> instead of directly returning head 406. The exception is rescued and converted to 406 in the exception handling middleware.</li>
	<li>JSONP now uses <code>application/javascript</code> instead of <code>application/json</code> as the MIME type.</li>
	<li>Session arguments passed to process calls in functional tests are now merged into the existing session, whereas previously they would replace the existing session. This change may break some existing tests if they are asserting the exact contents of the session but should not break existing tests that only assert individual keys.</li>
	<li>Forms of persisted records use always PATCH (via the <code>_method</code> hack).</li>
	<li>For resources, both PATCH and PUT are routed to the <code>update</code> action.</li>
	<li>Don't ignore <code>force_ssl</code> in development. This is a change of behavior - use an <code>:if</code> condition to recreate the old behavior.
<div>
<pre>class AccountsController &lt; ApplicationController
  force_ssl :if =&gt; :ssl_configured?

  def ssl_configured?
    !Rails.env.development?
  end
end</pre>
</div></li>
</ul>
<h4><a name="deprecations-1" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#deprecations-1"></a>Deprecations</h4>
<ul>
	<li>Deprecated <code>ActionController::Integration</code> in favour of <code>ActionDispatch::Integration</code>.</li>
	<li>Deprecated <code>ActionController::IntegrationTest</code> in favour of <code>ActionDispatch::IntegrationTest</code>.</li>
	<li>Deprecated <code>ActionController::PerformanceTest</code> in favour of <code>ActionDispatch::PerformanceTest</code>.</li>
	<li>Deprecated <code>ActionController::AbstractRequest</code> in favour of <code>ActionDispatch::Request</code>.</li>
	<li>Deprecated <code>ActionController::Request</code> in favour of <code>ActionDispatch::Request</code>.</li>
	<li>Deprecated <code>ActionController::AbstractResponse</code> in favour of <code>ActionDispatch::Response</code>.</li>
	<li>Deprecated <code>ActionController::Response</code> in favour of <code>ActionDispatch::Response</code>.</li>
	<li>Deprecated <code>ActionController::Routing</code> in favour of <code>ActionDispatch::Routing</code>.</li>
</ul>
<h3><a name="action-dispatch" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#action-dispatch"></a>Action Dispatch</h3>
<ul>
	<li>Add Routing Concerns to declare common routes that can be reused inside others resources and routes.Code before:
<div>
<pre>resources :messages do
  resources :comments
end

resources :posts do
  resources :comments
  resources :images, only: :index
end</pre>
</div>
Code after:
<div>
<pre>concern :commentable do
  resources :comments
end

concern :image_attachable do
  resources :images, only: :index
end

resources :messages, concerns: :commentable

resources :posts, concerns: [:commentable, :image_attachable]</pre>
</div></li>
	<li>Show routes in exception page while debugging a <code>RoutingError</code> in development.</li>
	<li>Include <code>mounted_helpers</code> (helpers for accessing mounted engines) in <code>ActionDispatch::IntegrationTest</code> by default.</li>
	<li>Added <code>ActionDispatch::SSL</code> middleware that when included force all the requests to be under HTTPS protocol.</li>
	<li>Copy literal route constraints to defaults so that url generation know about them. The copied constraints are <code>:protocol</code>,<code>:subdomain</code>, <code>:domain</code>, <code>:host</code> and <code>:port</code>.</li>
	<li>Allows <code>assert_redirected_to</code> to match against a regular expression.</li>
	<li>Adds a backtrace to the routing error page in development.</li>
	<li><code>assert_generates</code>, <code>assert_recognizes</code>, and <code>assert_routing</code> all raise <code>Assertion</code> instead of <code>RoutingError</code>.</li>
	<li>Allows the route helper root to take a string argument. For example, <code>root 'pages#main'</code> as a shortcut for<code>root to: 'pages#main'</code>.</li>
	<li>Adds support for the PATCH verb: Request objects respond to <code>patch?</code>. Routes now have a new <code>patch</code> method, and understand <code>:patch</code> in the existing places where a verb is configured, like <code>:via</code>. Functional tests have a new method <code>patch</code>and integration tests have a new method <code>patch_via_redirect</code>. If <code>:patch</code> is the default verb for updates, edits are tunneled as<code>PATCH</code> rather than as <code>PUT</code> and routing acts accordingly.</li>
	<li>Integration tests support the OPTIONS method.</li>
	<li><code>expires_in</code> accepts a <code>must_revalidate</code> flag. If true, "must-revalidate" is added to the <code>Cache-Control</code> header.</li>
	<li>Default responder will now always use your overridden block in <code>respond_with</code> to render your response.</li>
	<li>Turn off verbose mode of <code>rack-cache</code>, we still have <code>X-Rack-Cache</code> to check that info.</li>
</ul>
<h4><a name="deprecations-2" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#deprecations-2"></a>Deprecations</h4>
<h3><a name="action-view" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#action-view"></a>Action View</h3>
<ul>
	<li>Remove Active Model dependency from Action Pack.</li>
	<li>Allow to use <code>mounted_helpers</code> (helpers for accessing mounted engines) in <code>ActionView::TestCase</code>.</li>
	<li>Make current object and counter (when it applies) variables accessible when rendering templates with <code>:object</code> or<code>:collection</code>.</li>
	<li>Allow to lazy load <code>default_form_builder</code> by passing a string instead of a constant.</li>
	<li>Add index method to <code>FormBuilder</code> class.</li>
	<li>Adds support for layouts when rendering a partial with a given collection.</li>
	<li>Remove <code>:disable_with</code> in favor of <code>data-disable-with</code> option from <code>submit_tag</code>, <code>button_tag</code> and <code>button_to</code> helpers.</li>
	<li>Remove <code>:mouseover</code> option from <code>image_tag</code> helper.</li>
	<li>Templates without a handler extension now raises a deprecation warning but still defaults to <code>ERb</code>. In future releases, it will simply return the template content.</li>
	<li>Add a <code>divider</code> option to <code>grouped_options_for_select</code> to generate a separator optgroup automatically, and deprecate prompt as third argument, in favor of using an options hash.</li>
	<li>Add <code>time_field</code> and <code>time_field_tag</code> helpers which render an <code>input[type="time"]</code> tag.</li>
	<li>Removed old <code>text_helper</code> apis for <code>highlight</code>, <code>excerpt</code> and <code>word_wrap</code>.</li>
	<li>Remove the leading \n added by textarea on <code>assert_select</code>.</li>
	<li>Changed default value for <code>config.action_view.embed_authenticity_token_in_remote_forms</code> to false. This change breaks remote forms that need to work also without JavaScript, so if you need such behavior, you can either set it to true or explicitly pass <code>:authenticity_token =&gt; true</code> in form options.</li>
	<li>Make possible to use a block in <code>button_to</code> helper if button text is hard to fit into the name parameter:
<div>
<pre>&lt;%= button_to [:make_happy, @user] do %&gt;
  Make happy &lt;strong&gt;&lt;%= @user.name %&gt;&lt;/strong&gt;
&lt;% end %&gt;
# =&gt; &quot;&lt;form method=&quot;post&quot; action=&quot;/users/1/make_happy&quot;n&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; &quot;&gt;button_to&quot;&gt;
#      &lt;div&gt;
#        &lt;button type=&quot;submit&quot;&gt;
#          Make happy &lt;strong&gt;Name&lt;/strong&gt;
#        &lt;/button&gt;
#      &lt;/div&gt;
#    &lt;/form&gt;&quot;</pre>
</div></li>
	<li>Replace <code>include_seconds</code> boolean argument with <code>:include_seconds =&gt; true</code> option in <code>distance_of_time_in_words</code> and<code>time_ago_in_words</code> signature.</li>
	<li>Remove <code>button_to_function</code> and <code>link_to_function</code> helpers.</li>
	<li><code>truncate</code> now always returns an escaped HTML-safe string. The option <code>:escape</code> can be used as <code>false</code> to not escape the result.</li>
	<li><code>truncate</code> now accepts a block to show extra content when the text is truncated.</li>
	<li>Add <code>week_field</code>, <code>week_field_tag</code>, <code>month_field</code>, <code>month_field_tag</code>, <code>datetime_local_field</code>,<code>datetime_local_field_tag</code>, <code>datetime_field</code> and <code>datetime_field_tag</code> helpers.</li>
	<li>Add <code>color_field</code> and <code>color_field_tag</code> helpers.</li>
	<li>Add <code>include_hidden</code> option to select tag. With <code>:include_hidden =&gt; false</code> select with multiple attribute doesn't generate hidden input with blank value.</li>
	<li>Removed default size option from the <code>text_field</code>, <code>search_field</code>, <code>telephone_field</code>, <code>url_field</code>, <code>email_field</code> helpers.</li>
	<li>Removed default cols and rows options from the <code>text_area</code> helper.</li>
	<li>Adds <code>image_url</code>, <code>javascript_url</code>, <code>stylesheet_url</code>, <code>audio_url</code>, <code>video_url</code>, and <code>font_url</code> to assets tag helper. These URL helpers will return the full path to your assets. This is useful when you are going to reference this asset from external host.</li>
	<li>Allow <code>value_method</code> and <code>text_method</code> arguments from <code>collection_select</code> and <code>options_from_collection_for_select</code> to receive an object that responds to <code>:call</code> such as a proc, to evaluate the option in the current element context. This works the same way with <code>collection_radio_buttons</code> and <code>collection_check_boxes</code>.</li>
	<li>Add <code>date_field</code> and <code>date_field_tag</code> helpers which render an <code>input[type="date"]</code> tag.</li>
	<li>Add <code>collection_check_boxes</code> form helper, similar to <code>collection_select</code>:
<div>
<pre>collection_check_boxes :post, :author_ids, Author.all, :id, :name
# Outputs something like:
&lt;input id=&quot;post_author_ids_1&quot; name=&quot;post[author_ids][]&quot; type=&quot;checkbox&quot; value=&quot;1&quot; /&gt;
&lt;label for=&quot;post_author_ids_1&quot;&gt;D. Heinemeier Hansson&lt;/label&gt;
&lt;input id=&quot;post_author_ids_2&quot; name=&quot;post[author_ids][]&quot; type=&quot;checkbox&quot; value=&quot;2&quot; /&gt;
&lt;label for=&quot;post_author_ids_2&quot;&gt;D. Thomas&lt;/label&gt;
&lt;input name=&quot;post[author_ids][]&quot; type=&quot;hidden&quot; value=&quot;&quot; /&gt;</pre>
</div>
The label/check_box pairs can be customized with a block.</li>
	<li>Add <code>collection_radio_buttons</code> form helper, similar to <code>collection_select</code>:
<div>
<pre>collection_radio_buttons :post, :author_id, Author.all, :id, :name
# Outputs something like:
&lt;input id=&quot;post_author_id_1&quot; name=&quot;post[author_id]&quot; type=&quot;radio&quot; value=&quot;1&quot; /&gt;
&lt;label for=&quot;post_author_id_1&quot;&gt;D. Heinemeier Hansson&lt;/label&gt;
&lt;input id=&quot;post_author_id_2&quot; name=&quot;post[author_id]&quot; type=&quot;radio&quot; value=&quot;2&quot; /&gt;
&lt;label for=&quot;post_author_id_2&quot;&gt;D. Thomas&lt;/label&gt;</pre>
</div>
The label/radio_button pairs can be customized with a block.</li>
	<li><code>check_box</code> with an HTML5 attribute <code>:form</code> will now replicate the <code>:form</code> attribute to the hidden field as well.</li>
	<li>label form helper accepts <code>:for =&gt; nil</code> to not generate the attribute.</li>
	<li>Add <code>:format</code> option to <code>number_to_percentage</code>.</li>
	<li>Add <code>config.action_view.logger</code> to configure logger for <code>Action View</code>.</li>
	<li><code>check_box</code> helper with <code>:disabled =&gt; true</code> will generate a <code>disabled</code> hidden field to conform with the HTML convention where disabled fields are not submitted with the form. This is a behavior change, previously the hidden tag had a value of the disabled checkbox.</li>
	<li><code>favicon_link_tag</code> helper will now use the favicon in <code>app/assets</code> by default.</li>
	<li><code>ActionView::Helpers::TextHelper#highlight</code> now defaults to the HTML5 <code>mark</code> element.</li>
</ul>
<h4><a name="deprecations-3" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#deprecations-3"></a>Deprecations</h4>
<h3><a name="sprockets" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#sprockets"></a>Sprockets</h3>
Moved into a separate gem <code>sprockets-rails</code>.
<h2><a name="active-record" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#active-record"></a>Active Record</h2>
<ul>
	<li>Add <code>add_reference</code> and <code>remove_reference</code> schema statements. Aliases, <code>add_belongs_to</code> and <code>remove_belongs_to</code> are acceptable. References are reversible.
<div>
<pre># Create a user_id column
add_reference(:products, :user)

# Create a supplier_id, supplier_type columns and appropriate index
add_reference(:products, :supplier, polymorphic: true, index: true)

# Remove polymorphic reference
remove_reference(:products, :supplier, polymorphic: true)</pre>
</div></li>
	<li>Add <code>:default</code> and <code>:null</code> options to <code>column_exists?</code>.
<div>
<pre>column_exists?(:testings, :taggable_id, :integer, null: false)
column_exists?(:testings, :taggable_type, :string, default: &#039;Photo&#039;)</pre>
</div></li>
	<li><code>ActiveRecord::Relation#inspect</code> now makes it clear that you are dealing with a <code>Relation</code> object rather than an array:
<div>
<pre>User.where(:age =&gt; 30).inspect
# =&gt; &lt;ActiveRecord::Relation [#&lt;User ...&gt;, #&lt;User ...&gt;]&gt;

User.where(:age =&gt; 30).to_a.inspect
# =&gt; [#&lt;User ...&gt;, #&lt;User ...&gt;]</pre>
</div>
if more than 10 items are returned by the relation, inspect will only show the first 10 followed by ellipsis.</li>
	<li>Add <code>:collation</code> and <code>:ctype</code> support to PostgreSQL. These are available for PostgreSQL 8.4 or later.
<div>
<pre>development:
  adapter: postgresql
  host: localhost
  database: rails_development
  username: foo
  password: bar
  encoding: UTF8
  collation: ja_JP.UTF8
  ctype: ja_JP.UTF8</pre>
</div></li>
	<li><code>FinderMethods#exists?</code> now returns <code>false</code> with the <code>false</code> argument.</li>
	<li>Added support for specifying the precision of a timestamp in the postgresql adapter. So, instead of having to incorrectly specify the precision using the <code>:limit</code> option, you may use <code>:precision</code>, as intended. For example, in a migration:
<div>
<pre>def change
  create_table :foobars do |t|
    t.timestamps :precision =&gt; 0
  end
end</pre>
</div></li>
	<li>Allow <code>ActiveRecord::Relation#pluck</code> to accept multiple columns. Returns an array of arrays containing the typecasted values:
<div>
<pre>Person.pluck(:id, :name)
# SELECT people.id, people.name FROM people
# =&gt; [[1, &#039;David&#039;], [2, &#039;Jeremy&#039;], [3, &#039;Jose&#039;]]</pre>
</div></li>
	<li>Improve the derivation of HABTM join table name to take account of nesting. It now takes the table names of the two models, sorts them lexically and then joins them, stripping any common prefix from the second table name. Some examples:
<pre>&lt;code&gt;Top level models (Category &amp;lt;=&amp;gt; Product) Old: categories_products New: categories_products Top level models with a global table_name_prefix (Category &amp;lt;=&amp;gt; Product) Old: site_categories_products New: site_categories_products Nested models in a module without a table_name_prefix method (Admin::Category &amp;lt;=&amp;gt; Admin::Product) Old: categories_products New: categories_products Nested models in a module with a table_name_prefix method (Admin::Category &amp;lt;=&amp;gt; Admin::Product) Old: categories_products New: admin_categories_products Nested models in a parent model (Catalog::Category &amp;lt;=&amp;gt; Catalog::Product) Old: categories_products New: catalog_categories_products Nested models in different parent models (Catalog::Category &amp;lt;=&amp;gt; Content::Page) Old: categories_pages New: catalog_categories_content_pages &lt;/code&gt;</pre>
</li>
	<li>Move HABTM validity checks to <code>ActiveRecord::Reflection</code>. One side effect of this is to move when the exceptions are raised from the point of declaration to when the association is built. This is consistant with other association validity checks.</li>
	<li>Added <code>stored_attributes</code> hash which contains the attributes stored using <code>ActiveRecord::Store</code>. This allows you to retrieve the list of attributes you've defined.
<div>
<pre>class User &lt; ActiveRecord::Base
  store :settings, accessors: [:color, :homepage]
end

User.stored_attributes[:settings] # [:color, :homepage]</pre>
</div></li>
	<li>PostgreSQL default log level is now 'warning', to bypass the noisy notice messages. You can change the log level using the<code>min_messages</code> option available in your <code>config/database.yml</code>.</li>
	<li>Add uuid datatype support to PostgreSQL adapter.</li>
	<li>Added <code>ActiveRecord::Migration.check_pending!</code> that raises an error if migrations are pending.</li>
	<li>Added <code>#destroy!</code> which acts like <code>#destroy</code> but will raise an <code>ActiveRecord::RecordNotDestroyed</code> exception instead of returning <code>false</code>.</li>
	<li>Allow blocks for count with <code>ActiveRecord::Relation</code>, to work similar as <code>Array#count</code>:<code>Person.where("age &gt; 26").count { |person| person.gender == 'female' }</code></li>
	<li>Added support to <code>CollectionAssociation#delete</code> for passing fixnum or string values as record ids. This finds the records responding to the ids and deletes them.
<div>
<pre>class Person &lt; ActiveRecord::Base
  has_many :pets
end

person.pets.delete(&quot;1&quot;)  # =&gt; [#&lt;Pet id: 1&gt;]
person.pets.delete(2, 3) # =&gt; [#&lt;Pet id: 2&gt;, #&lt;Pet id: 3&gt;]</pre>
</div></li>
	<li>It's not possible anymore to destroy a model marked as read only.</li>
	<li>Added ability to <code>ActiveRecord::Relation#from</code> to accept other <code>ActiveRecord::Relation</code> objects.</li>
	<li>Added custom coders support for <code>ActiveRecord::Store</code>. Now you can set your custom coder like this:
<div>
<pre>store :settings, accessors: [ :color, :homepage ], coder: JSON</pre>
</div></li>
	<li><code>mysql</code> and <code>mysql2</code> connections will set <code>SQL_MODE=STRICT_ALL_TABLES</code> by default to avoid silent data loss. This can be disabled by specifying <code>strict: false</code> in <code>config/database.yml</code>.</li>
	<li>Added default order to <code>ActiveRecord::Base#first</code> to assure consistent results among different database engines. Introduced<code>ActiveRecord::Base#take</code> as a replacement to the old behavior.</li>
	<li>Added an <code>:index</code> option to automatically create indexes for <code>references</code> and <code>belongs_to</code> statements in migrations. This can be either a boolean or a hash that is identical to options available to the <code>add_index</code> method:
<div>
<pre>create_table :messages do |t|
  t.references :person, :index =&gt; true
end</pre>
</div>
Is the same as:
<div>
<pre>create_table :messages do |t|
  t.references :person
end
add_index :messages, :person_id</pre>
</div>
Generators have also been updated to use the new syntax.</li>
	<li>Added bang methods for mutating <code>ActiveRecord::Relation</code> objects. For example, while <code>foo.where(:bar)</code> will return a new object leaving foo unchanged, <code>foo.where!(:bar)</code> will mutate the foo object.</li>
	<li>Added <code>#find_by</code> and <code>#find_by!</code> to mirror the functionality provided by dynamic finders in a way that allows dynamic input more easily:
<div>
<pre>Post.find_by name: &#039;Spartacus&#039;, rating: 4
Post.find_by &quot;published_at &lt; ?&quot;, 2.weeks.ago
Post.find_by! name: &#039;Spartacus&#039;</pre>
</div></li>
	<li>Added <code>ActiveRecord::Base#slice</code> to return a hash of the given methods with their names as keys and returned values as values.</li>
	<li>Remove IdentityMap - IdentityMap has never graduated to be an "enabled-by-default" feature, due to some inconsistencies with associations, as described in this <a href="https://github.com/rails/rails/commit/302c912bf6bcd0fa200d964ec2dc4a44abe328a6">commit</a>. Hence the removal from the codebase, until such issues are fixed.</li>
	<li>Added a feature to dump/load internal state of <code>SchemaCache</code> instance because we want to boot more quickly when we have many models.
<div>
<pre># execute rake task.
RAILS_ENV=production bundle exec rake db:schema:cache:dump
=&gt; generate db/schema_cache.dump

# add config.use_schema_cache_dump = true in config/production.rb. BTW, true is default.

# boot rails.
RAILS_ENV=production bundle exec rails server
=&gt; use db/schema_cache.dump

# If you remove clear dumped cache, execute rake task.
RAILS_ENV=production bundle exec rake db:schema:cache:clear
=&gt; remove db/schema_cache.dump</pre>
</div></li>
	<li>Added support for partial indices to <code>PostgreSQL</code> adapter.</li>
	<li>The <code>add_index</code> method now supports a <code>where</code> option that receives a string with the partial index criteria.</li>
	<li>Added the <code>ActiveRecord::NullRelation</code> class implementing the null object pattern for the Relation class.</li>
	<li>Implemented <code>ActiveRecord::Relation#none</code> method which returns a chainable relation with zero records (an instance of the<code>NullRelation</code> class). Any subsequent condition chained to the returned relation will continue generating an empty relation and will not fire any query to the database.</li>
	<li>Added <code>create_join_table</code> migration helper to create HABTM join tables.
<div>
<pre>create_join_table :products, :categories
# =&gt;
# create_table :categories_products, :id =&gt; false do |td|
#   td.integer :product_id, :null =&gt; false
#   td.integer :category_id, :null =&gt; false
# end</pre>
</div></li>
	<li>The primary key is always initialized in the <code>@attributes</code> hash to nil (unless another value has been specified).</li>
	<li>In previous releases, the following would generate a single query with an OUTER JOIN comments, rather than two separate queries:
<div>
<pre>Post.includes(:comments).where(&quot;comments.name = &#039;foo&#039;&quot;)</pre>
</div>
This behaviour relies on matching SQL string, which is an inherently flawed idea unless we write an SQL parser, which we do not wish to do. Therefore, it is now deprecated.

To avoid deprecation warnings and for future compatibility, you must explicitly state which tables you reference, when using SQL snippets:
<div>
<pre>Post.includes(:comments).where(&quot;comments.name = &#039;foo&#039;&quot;).references(:comments)</pre>
</div>
Note that you do not need to explicitly specify references in the following cases, as they can be automatically inferred:
<div>
<pre>Post.where(comments: { name: &#039;foo&#039; })
Post.where(&#039;comments.name&#039; =&gt; &#039;foo&#039;)
Post.order(&#039;comments.name&#039;)</pre>
</div>
You also do not need to worry about this unless you are doing eager loading. Basically, don't worry unless you see a deprecation warning or (in future releases) an SQL error due to a missing JOIN.</li>
	<li>Support for the <code>schema_info</code> table has been dropped. Please switch to <code>schema_migrations</code>.</li>
	<li>Connections <em>must</em> be closed at the end of a thread. If not, your connection pool can fill and an exception will be raised.</li>
	<li>Added the <code>ActiveRecord::Model</code> module which can be included in a class as an alternative to inheriting from<code>ActiveRecord::Base</code>:
<div>
<pre>class Post
  include ActiveRecord::Model
end</pre>
</div></li>
	<li>PostgreSQL hstore records can be created.</li>
	<li>PostgreSQL hstore types are automatically deserialized from the database.</li>
	<li>Added <code>#update_columns</code> method which updates the attributes from the passed-in hash without calling save, hence skipping validations and callbacks. <code>ActiveRecordError</code> will be raised when called on new objects or when at least one of the attributes is marked as read only.
<div>
<pre>post.attributes # =&gt; {&quot;id&quot;=&gt;2, &quot;title&quot;=&gt;&quot;My title&quot;, &quot;body&quot;=&gt;&quot;My content&quot;, &quot;author&quot;=&gt;&quot;Peter&quot;}
post.update_columns({title: &#039;New title&#039;, author: &#039;Sebastian&#039;}) # =&gt; true
post.attributes # =&gt; {&quot;id&quot;=&gt;2, &quot;title&quot;=&gt;&quot;New title&quot;, &quot;body&quot;=&gt;&quot;My content&quot;, &quot;author&quot;=&gt;&quot;Sebastian&quot;}</pre>
</div></li>
</ul>
<h3><a name="deprecations-4" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#deprecations-4"></a>Deprecations</h3>
<ul>
	<li>Deprecated most of the 'dynamic finder' methods. All dynamic methods except for <code>find_by_...</code> and <code>find_by_...!</code> are deprecated. Here's how you can rewrite the code:
<div>
<pre>find_all_by_... can be rewritten using where(...)
find_last_by_... can be rewritten using where(...).last
scoped_by_... can be rewritten using where(...)
find_or_initialize_by_... can be rewritten using where(...).first_or_initialize
find_or_create_by_... can be rewritten using where(...).first_or_create
find_or_create_by_...! can be rewritten using where(...).first_or_create!</pre>
</div>
The implementation of the deprecated dynamic finders has been moved to the <code>active_record_deprecated_finders</code> gem.</li>
	<li>Deprecated the old-style hash based finder API. This means that methods which previously accepted "finder options" no longer do. For example this:
<div>
<pre>Post.find(:all, :conditions =&gt; { :comments_count =&gt; 10 }, :limit =&gt; 5)</pre>
</div>
should be rewritten in the new style which has existed since Rails 3:
<div>
<pre>Post.where(comments_count: 10).limit(5)</pre>
</div>
Note that as an interim step, it is possible to rewrite the above as:
<div>
<pre>Post.scoped(:where =&gt; { :comments_count =&gt; 10 }, :limit =&gt; 5)</pre>
</div>
This could save you a lot of work if there is a lot of old-style finder usage in your application.

Calling <code>Post.scoped(options)</code> is a shortcut for <code>Post.scoped.merge(options)</code>. <code>Relation#merge</code> now accepts a hash of options, but they must be identical to the names of the equivalent finder method. These are mostly identical to the old-style finder option names, except in the following cases:
<pre>&lt;code&gt;:conditions becomes :where :include becomes :includes :extend becomes :extending &lt;/code&gt;</pre>
The code to implement the deprecated features has been moved out to the <code>active_record_deprecated_finders</code> gem. This gem is a dependency of Active Record in Rails 4.0. It will no longer be a dependency from Rails 4.1, but if your app relies on the deprecated features then you can add it to your own Gemfile. It will be maintained by the Rails core team until Rails 5.0 is released.</li>
	<li>Deprecate eager-evaluated scopes.Don't use this:
<div>
<pre>scope :red, where(color: &#039;red&#039;)
default_scope where(color: &#039;red&#039;)</pre>
</div>
Use this:
<div>
<pre>scope :red, -&gt; { where(color: &#039;red&#039;) }
default_scope { where(color: &#039;red&#039;) }</pre>
</div>
The former has numerous issues. It is a common newbie gotcha to do the following:
<div>
<pre>scope :recent, where(published_at: Time.now - 2.weeks)</pre>
</div>
Or a more subtle variant:
<div>
<pre>scope :recent, -&gt; { where(published_at: Time.now - 2.weeks) }
scope :recent_red, recent.where(color: &#039;red&#039;)</pre>
</div>
Eager scopes are also very complex to implement within Active Record, and there are still bugs. For example, the following does not do what you expect:
<div>
<pre>scope :remove_conditions, except(:where)
where(...).remove_conditions # =&gt; still has conditions</pre>
</div></li>
	<li>Added deprecation for the <code>:dependent =&gt; :restrict</code> association option.</li>
	<li>Up until now <code>has_many</code> and <code>has_one, :dependent =&gt; :restrict</code> option raised a <code>DeleteRestrictionError</code> at the time of destroying the object. Instead, it will add an error on the model.</li>
	<li>To fix this warning, make sure your code isn't relying on a <code>DeleteRestrictionError</code> and then add<code>config.active_record.dependent_restrict_raises = false</code> to your application config.</li>
	<li>New rails application would be generated with the <code>config.active_record.dependent_restrict_raises = false</code> in the application config.</li>
	<li>The migration generator now creates a join table with (commented) indexes every time the migration name contains the word "join_table".</li>
	<li><code>ActiveRecord::SessionStore</code> is removed from Rails 4.0 and is now a separate <a href="https://github.com/rails/activerecord-session_store">gem</a>.</li>
</ul>
<h2><a name="active-model" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#active-model"></a>Active Model</h2>
<ul>
	<li>Changed <code>AM::Serializers::JSON.include_root_in_json</code> default value to false. Now, AM Serializers and AR objects have the same default behaviour.
<div>
<pre>class User &lt; ActiveRecord::Base; end

class Person
  include ActiveModel::Model
  include ActiveModel::AttributeMethods
  include ActiveModel::Serializers::JSON

  attr_accessor :name, :age

  def attributes
    instance_values
  end
end

user.as_json
=&gt; {&quot;id&quot;=&gt;1, &quot;name&quot;=&gt;&quot;Konata Izumi&quot;, &quot;age&quot;=&gt;16, &quot;awesome&quot;=&gt;true}
# root is not included

person.as_json
=&gt; {&quot;name&quot;=&gt;&quot;Francesco&quot;, &quot;age&quot;=&gt;22}
# root is not included</pre>
</div></li>
	<li>Passing false hash values to <code>validates</code> will no longer enable the corresponding validators.</li>
	<li><code>ConfirmationValidator</code> error messages will attach to <code>:#{attribute}_confirmation</code> instead of <code>attribute</code>.</li>
	<li>Added <code>ActiveModel::Model</code>, a mixin to make Ruby objects work with Action Pack out of the box.</li>
	<li><code>ActiveModel::Errors#to_json</code> supports a new parameter <code>:full_messages</code>.</li>
	<li>Trims down the API by removing <code>valid?</code> and <code>errors.full_messages</code>.</li>
</ul>
<h3><a name="deprecations-5" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#deprecations-5"></a>Deprecations</h3>
<h2><a name="active-resource" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#active-resource"></a>Active Resource</h2>
<ul>
	<li>Active Resource is removed from Rails 4.0 and is now a separate <a href="https://github.com/rails/activeresource">gem</a>.</li>
</ul>
<h2><a name="active-support" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#active-support"></a>Active Support</h2>
<ul>
	<li>Add default values to all <code>ActiveSupport::NumberHelper</code> methods, to avoid errors with empty locales or missing values.</li>
	<li><code>Time#change</code> now works with time values with offsets other than UTC or the local time zone.</li>
	<li>Add <code>Time#prev_quarter</code> and <code>Time#next_quarter</code> short-hands for <code>months_ago(3)</code> and <code>months_since(3)</code>.</li>
	<li>Remove obsolete and unused <code>require_association</code> method from dependencies.</li>
	<li>Add <code>:instance_accessor</code> option for <code>config_accessor</code>.
<div>
<pre>class User
  include ActiveSupport::Configurable
  config_accessor :allowed_access, instance_accessor: false
end

User.new.allowed_access = true # =&gt; NoMethodError
User.new.allowed_access        # =&gt; NoMethodError</pre>
</div></li>
	<li><code>ActionView::Helpers::NumberHelper</code> methods have been moved to <code>ActiveSupport::NumberHelper</code> and are now available via<code>Numeric#to_s</code>.</li>
	<li><code>Numeric#to_s</code> now accepts the formatting options :phone, :currency, :percentage, :delimited, :rounded, :human, and :human_size.</li>
	<li>Add <code>Hash#transform_keys</code>, <code>Hash#transform_keys!</code>, <code>Hash#deep_transform_keys</code> and <code>Hash#deep_transform_keys!</code>.</li>
	<li>Changed xml type datetime to dateTime (with upper case letter T).</li>
	<li>Add <code>:instance_accessor</code> option for <code>class_attribute</code>.</li>
	<li><code>constantize</code> now looks in the ancestor chain.</li>
	<li>Add <code>Hash#deep_stringify_keys</code> and <code>Hash#deep_stringify_keys!</code> to convert all keys from a <code>Hash</code> instance into strings.</li>
	<li>Add <code>Hash#deep_symbolize_keys</code> and <code>Hash#deep_symbolize_keys!</code> to convert all keys from a <code>Hash</code> instance into symbols.</li>
	<li><code>Object#try</code> can't call private methods.</li>
	<li>AS::Callbacks#run_callbacks remove key argument.</li>
	<li><code>deep_dup</code> works more expectedly now and duplicates also values in <code>Hash</code> instances and elements in <code>Array</code> instances.</li>
	<li>Inflector no longer applies ice -&gt; ouse to words like slice, police.</li>
	<li>Add <code>ActiveSupport::Deprecations.behavior = :silence</code> to completely ignore Rails runtime deprecations.</li>
	<li>Make <code>Module#delegate</code> stop using send - can no longer delegate to private methods.</li>
	<li>AS::Callbacks deprecate :rescuable option.</li>
	<li>Adds <code>Integer#ordinal</code> to get the ordinal suffix string of an integer.</li>
	<li>AS::Callbacks :per_key option is no longer supported.</li>
	<li>AS::Callbacks#define_callbacks add :skip_after_callbacks_if_terminated option.</li>
	<li>Add html_escape_once to ERB::Util, and delegate escape_once tag helper to it.</li>
	<li>Remove <code>ActiveSupport::TestCase#pending</code> method, use <code>skip</code> instead.</li>
	<li>Deletes the compatibility method <code>Module#method_names</code>, use <code>Module#methods</code> from now on (which returns symbols).</li>
	<li>Deletes the compatibility method <code>Module#instance_method_names</code>, use <code>Module#instance_methods</code> from now on (which returns symbols).</li>
	<li>Unicode database updated to 6.1.0.</li>
	<li>Adds <code>encode_big_decimal_as_string</code> option to force JSON serialization of BigDecimals as numeric instead of wrapping them in strings for safety.</li>
</ul>
<h3><a name="deprecations-6" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#deprecations-6"></a>Deprecations</h3>
<ul>
	<li><code>ActiveSupport::Callbacks</code>: deprecate usage of filter object with <code>#before</code> and <code>#after</code> methods as <code>around</code> callback.</li>
	<li><code>BufferedLogger</code> is deprecated. Use <code>ActiveSupport::Logger</code> or the <code>logger</code> from Ruby stdlib.</li>
	<li>Deprecates the compatibility method <code>Module#local_constant_names</code> and use <code>Module#local_constants</code> instead (which returns symbols).</li>
</ul>
<h2><a name="credits" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#credits"></a>Credits</h2>
See the <a href="http://contributors.rubyonrails.org/">full list of contributors to Rails</a> for the many people who spent many hours making Rails, the stable and robust framework it is. Kudos to all of them.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>686</wp:post_id>
		<wp:post_date>2012-10-06 19:46:46</wp:post_date>
		<wp:post_date_gmt>2012-10-06 11:46:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-on-rails-4-0-release-notes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rails-4-0"><![CDATA[Rails 4.0]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>686</wp:comment_id>
			<wp:comment_author><![CDATA[michael kors 2013]]></wp:comment_author>
			<wp:comment_author_email>fawnescalante@arcor.de</wp:comment_author_email>
			<wp:comment_author_url>http://www.cheapmichaelkors2013sale.com</wp:comment_author_url>
			<wp:comment_author_IP>112.5.234.96</wp:comment_author_IP>
			<wp:comment_date>2013-05-14 14:49:16</wp:comment_date>
			<wp:comment_date_gmt>2013-05-14 06:49:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've been surfing online more than 2 hours today, yet I never found any interesting article like yours. It's pretty worth enough for me.

In my view, if all website owners and bloggers made good content as you 
did, the internet will be much more useful than ever before.
|
I could not refrain from commenting. Perfectly written!
|
I will immediately seize your rss as I can not in finding your e-mail subscription link or 
e-newsletter service. Do you've any? Please let me understand so that I may subscribe. Thanks.|
It is perfect time to make some plans for the future and it is time to be happy. I've read this post and if I could 
I wish to suggest you few interesting things or tips. Maybe you can 
write next articles referring to this article. I want to read even 
more things about it!|
It's appropriate time to make some plans for the long run and it's time to be happy.
I have read this post and if I may just I desire to suggest you some fascinating things or tips.
Perhaps you can write next articles relating to this 
article. I wish to learn more issues approximately it!
|
I have been surfing online greater than three hours as 
of late, yet I by no means discovered any attention-grabbing article like yours.
It is beautiful worth sufficient for me. Personally, if all 
website owners and bloggers made just right content as you did,
the net might be much more helpful than ever before.|
Ahaa, its good discussion regarding this piece of writing at this place at 
this web site, I have read all that, so at this time 
me also commenting here.|
I am sure this piece of writing has touched all the internet people, 
its really really fastidious article on building up new weblog.
|
Wow, this article is nice, my younger sister is analyzing 
such things, therefore I am going to let know her.|
bookmarked!!, I like your website!|
Way cool! Some extremely valid points! I appreciate you penning this 
write-up and the rest of the website is very good.|
Hi, I do believe this is an excellent blog. I stumbledupon 
it ;) I will come back yet again since i have 
book-marked it. Money and freedom is the greatest way to change, may you be rich and continue 
to help other people.|
Woah! I'm really digging the template/theme of this blog. It's 
simple, yet effective. A lot of times it's difficult to get that "perfect balance" between usability and visual appearance. I must say you have done a very good job with this. In addition, the blog loads super fast for me on Internet explorer. Excellent Blog!|
These are in fact wonderful ideas in on the topic of blogging. You have touched some fastidious factors here. Any way keep up wrinting.|
I like what you guys are up too. Such clever work and reporting! Keep up the excellent works guys I've added you guys 
to blogroll.|
Hi! Someone in my Myspace group shared this website with us so 
I came to take a look. I'm definitely enjoying the information. I'm book-marking and will be tweeting 
this to my followers! Outstanding blog and superb design.
|
I like what you guys are up too. This type of clever 
work and coverage! Keep up the superb works guys I've included you guys to blogroll.|
Hi there would you mind sharing which blog platform you're using?
I'm planning to start my own blog in the near future but I'm having a hard time making a decision between BlogEngine/Wordpress/B2evolution 
and Drupal. The reason I ask is because your design and style seems different then most blogs and I'm looking for something completely unique. P.S My apologies for being off-topic but I had to ask!|
Hi there would you mind letting me know which hosting company you're using?
I've loaded your blog in 3 different browsers and I must say this blog loads a lot faster then most. Can you recommend a good internet hosting provider at a honest price? Thanks a lot, I appreciate it!|
I love it when folks get together and share thoughts. Great website, continue the good work!|
Thank you for the auspicious writeup. It in fact was a amusement account it. Look advanced to more added agreeable from you! By the way, how can we communicate?|
Hi there just wanted to give you a quick heads up. The text in your article seem to be running off the screen in Opera. I'm not 
sure if this is a format issue or something to do with browser 
compatibility but I thought I'd post to let you know. The design look great though! Hope you get the problem fixed soon. Many thanks|
This is a topic that's near to my heart... Take care! Where are your contact details 
though?|
It's very simple to find out any matter on web as compared to books, as I found this article at this site.|
Does your blog have a contact page? I'm having problems locating it but,
I'd like to send you an e-mail. I've got some ideas for your blog you might be interested in hearing.
Either way, great blog and I look forward to seeing it develop over time.
|
Hello! I've been reading your site for a long time now and finally got the bravery to go ahead and give you a shout out from Atascocita Texas! Just wanted to tell you keep up the excellent job!|
Greetings from Florida! I'm bored to tears at work so I decided to check out 
your site on my iphone during lunch break. I love the 
info you present here and can't wait to take a look when I get home. I'm surprised at how quick your blog loaded on my cell phone .

. I'm not even using WIFI, just 3G .. Anyhow, very good site!|
Its such as you learn my mind! You appear to know so much about this, such as you wrote the e-book in it or something. I think that you can do with a few p.c. to force the message house a little bit, however instead of that, that is fantastic blog. A fantastic read. I will definitely be back.|
I visited several websites but the audio quality for audio songs present at this web page is genuinely excellent.|
Hi, i read your blog from time to time and i own a similar one and i was just wondering if you get a lot of spam responses? If so how do you stop it, any plugin or anything you can suggest? I get so much lately it's driving me insane so any support is 
very much appreciated.|
Greetings! Very useful advice within this post! It is the little changes that 
will make the biggest changes. Many thanks for sharing!|
I truly love your blog.. Pleasant colors &amp; theme. Did you make this amazing 
site yourself? Please reply back as I'm trying to create my very own site and want to find out where you got this from or exactly what the theme is named. Cheers!|
Hello there! This article couldn't be written much better!
Looking through this post reminds me of my previous 
roommate! He constantly kept preaching about this.

I most certainly will send this information to him. Fairly certain he will have a great read.

Thanks for sharing!|
Amazing! This blog looks just like my old one! It's on a completely different topic but it has pretty much the same layout and design. Outstanding choice of colors!|
There is certainly a great deal to know about this subject. I like all of the points you've made.
|
You have made some really good points there. I checked 
on the web for more information about the issue and found most individuals will go along with 
your views on this web site.|
What's up, I log on to your blogs daily. Your humoristic style is awesome, keep up the good work!|
I simply couldn't go away your web site prior to suggesting that I really loved the usual info a person 
provide for your guests? Is going to be back steadily to investigate cross-check 
new posts|
I need to to thank you for this fantastic read!! I certainly 
enjoyed every little bit of it. I have you book-marked to check out new stuff you post…|
What's up, just wanted to mention, I enjoyed this post. It was helpful. Keep on posting!|
I drop a comment when I appreciate a post on a website or I have something to add to the conversation. It's caused by the passion communicated in the article 
I read. And after this article Ruby on Rails 4.

0 Release Notes ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:12:"1373462909.4";s:7:"message";s:39:"jhjguxin 将评论状态改为 approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jhjguxin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1368514157.04";s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:71:{s:15:"comment_post_ID";s:3:"686";s:14:"comment_author";s:17:"michael kors 2013";s:20:"comment_author_email";s:22:"fawnescalante@arcor.de";s:18:"comment_author_url";s:39:"http://www.cheapmichaelkors2013sale.com";s:15:"comment_content";s:12764:"I've been surfing online more than 2 hours today, yet I never found any interesting article like yours. It's pretty worth enough for me.

In my view, if all website owners and bloggers made good content as you 
did, the internet will be much more useful than ever before.
|
I could not refrain from commenting. Perfectly written!
|
I will immediately seize your rss as I can not in finding your e-mail subscription link or 
e-newsletter service. Do you've any? Please let me understand so that I may subscribe. Thanks.|
It is perfect time to make some plans for the future and it is time to be happy. I've read this post and if I could 
I wish to suggest you few interesting things or tips. Maybe you can 
write next articles referring to this article. I want to read even 
more things about it!|
It's appropriate time to make some plans for the long run and it's time to be happy.
I have read this post and if I may just I desire to suggest you some fascinating things or tips.
Perhaps you can write next articles relating to this 
article. I wish to learn more issues approximately it!
|
I have been surfing online greater than three hours as 
of late, yet I by no means discovered any attention-grabbing article like yours.
It is beautiful worth sufficient for me. Personally, if all 
website owners and bloggers made just right content as you did,
the net might be much more helpful than ever before.|
Ahaa, its good discussion regarding this piece of writing at this place at 
this web site, I have read all that, so at this time 
me also commenting here.|
I am sure this piece of writing has touched all the internet people, 
its really really fastidious article on building up new weblog.
|
Wow, this article is nice, my younger sister is analyzing 
such things, therefore I am going to let know her.|
bookmarked!!, I like your website!|
Way cool! Some extremely valid points! I appreciate you penning this 
write-up and the rest of the website is very good.|
Hi, I do believe this is an excellent blog. I stumbledupon 
it ;) I will come back yet again since i have 
book-marked it. Money and freedom is the greatest way to change, may you be rich and continue 
to help other people.|
Woah! I'm really digging the template/theme of this blog. It's 
simple, yet effective. A lot of times it's difficult to get that "perfect balance" between usability and visual appearance. I must say you have done a very good job with this. In addition, the blog loads super fast for me on Internet explorer. Excellent Blog!|
These are in fact wonderful ideas in on the topic of blogging. You have touched some fastidious factors here. Any way keep up wrinting.|
I like what you guys are up too. Such clever work and reporting! Keep up the excellent works guys I've added you guys 
to blogroll.|
Hi! Someone in my Myspace group shared this website with us so 
I came to take a look. I'm definitely enjoying the information. I'm book-marking and will be tweeting 
this to my followers! Outstanding blog and superb design.
|
I like what you guys are up too. This type of clever 
work and coverage! Keep up the superb works guys I've included you guys to blogroll.|
Hi there would you mind sharing which blog platform you're using?
I'm planning to start my own blog in the near future but I'm having a hard time making a decision between BlogEngine/Wordpress/B2evolution 
and Drupal. The reason I ask is because your design and style seems different then most blogs and I'm looking for something completely unique. P.S My apologies for being off-topic but I had to ask!|
Hi there would you mind letting me know which hosting company you're using?
I've loaded your blog in 3 different browsers and I must say this blog loads a lot faster then most. Can you recommend a good internet hosting provider at a honest price? Thanks a lot, I appreciate it!|
I love it when folks get together and share thoughts. Great website, continue the good work!|
Thank you for the auspicious writeup. It in fact was a amusement account it. Look advanced to more added agreeable from you! By the way, how can we communicate?|
Hi there just wanted to give you a quick heads up. The text in your article seem to be running off the screen in Opera. I'm not 
sure if this is a format issue or something to do with browser 
compatibility but I thought I'd post to let you know. The design look great though! Hope you get the problem fixed soon. Many thanks|
This is a topic that's near to my heart... Take care! Where are your contact details 
though?|
It's very simple to find out any matter on web as compared to books, as I found this article at this site.|
Does your blog have a contact page? I'm having problems locating it but,
I'd like to send you an e-mail. I've got some ideas for your blog you might be interested in hearing.
Either way, great blog and I look forward to seeing it develop over time.
|
Hello! I've been reading your site for a long time now and finally got the bravery to go ahead and give you a shout out from Atascocita Texas! Just wanted to tell you keep up the excellent job!|
Greetings from Florida! I'm bored to tears at work so I decided to check out 
your site on my iphone during lunch break. I love the 
info you present here and can't wait to take a look when I get home. I'm surprised at how quick your blog loaded on my cell phone .

. I'm not even using WIFI, just 3G .. Anyhow, very good site!|
Its such as you learn my mind! You appear to know so much about this, such as you wrote the e-book in it or something. I think that you can do with a few p.c. to force the message house a little bit, however instead of that, that is fantastic blog. A fantastic read. I will definitely be back.|
I visited several websites but the audio quality for audio songs present at this web page is genuinely excellent.|
Hi, i read your blog from time to time and i own a similar one and i was just wondering if you get a lot of spam responses? If so how do you stop it, any plugin or anything you can suggest? I get so much lately it's driving me insane so any support is 
very much appreciated.|
Greetings! Very useful advice within this post! It is the little changes that 
will make the biggest changes. Many thanks for sharing!|
I truly love your blog.. Pleasant colors & theme. Did you make this amazing 
site yourself? Please reply back as I'm trying to create my very own site and want to find out where you got this from or exactly what the theme is named. Cheers!|
Hello there! This article couldn't be written much better!
Looking through this post reminds me of my previous 
roommate! He constantly kept preaching about this.

I most certainly will send this information to him. Fairly certain he will have a great read.

Thanks for sharing!|
Amazing! This blog looks just like my old one! It's on a completely different topic but it has pretty much the same layout and design. Outstanding choice of colors!|
There is certainly a great deal to know about this subject. I like all of the points you've made.
|
You have made some really good points there. I checked 
on the web for more information about the issue and found most individuals will go along with 
your views on this web site.|
What's up, I log on to your blogs daily. Your humoristic style is awesome, keep up the good work!|
I simply couldn't go away your web site prior to suggesting that I really loved the usual info a person 
provide for your guests? Is going to be back steadily to investigate cross-check 
new posts|
I need to to thank you for this fantastic read!! I certainly 
enjoyed every little bit of it. I have you book-marked to check out new stuff you post…|
What's up, just wanted to mention, I enjoyed this post. It was helpful. Keep on posting!|
I drop a comment when I appreciate a post on a website or I have something to add to the conversation. It's caused by the passion communicated in the article 
I read. And after this article Ruby on Rails 4.

0 Release Notes ]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>708</wp:comment_id>
			<wp:comment_author><![CDATA[ガガミラノ 時計 メンズ]]></wp:comment_author>
			<wp:comment_author_email>christelpritchett@gawab.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.fassyongagauotti.com/</wp:comment_author_url>
			<wp:comment_author_IP>184.171.160.84</wp:comment_author_IP>
			<wp:comment_date>2013-06-18 07:33:05</wp:comment_date>
			<wp:comment_date_gmt>2013-06-17 23:33:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello! This is my first visit to your blog! We are a collection of volunteers and starting a new initiative 
in a community in the same niche. Your blog provided us valuable information 
to work on. You have done a marvellous job!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1371511985.89";s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:70:{s:15:"comment_post_ID";s:3:"686";s:14:"comment_author";s:32:"ガガミラノ 時計 メンズ";s:20:"comment_author_email";s:27:"christelpritchett@gawab.com";s:18:"comment_author_url";s:32:"http://www.fassyongagauotti.com/";s:15:"comment_content";s:232:"Hello! This is my first visit to your blog! We are a collection of volunteers and starting a new initiative 
in a community in the same niche. Your blog provided us valuable information 
to work on. You have done a marvellous job!";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:14:"184.171.160.84";s:10:"user_agent";s:67:"Mozilla/5.0 (Windows NT 5.1; rv:13.0) Gecko/20100101 Firefox/13.0.1";s:8:"referrer";s:71:"http://jhjguxin.sinaapp.com/2012/10/06/ruby-on-rails-4-0-release-notes/";s:4:"blog";s:27:"http://jhjguxin.sinaapp.com";s:9:"blog_lang";s:5:"zh_CN";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:71:"http://jhjguxin.sinaapp.com/2012/10/06/ruby-on-rails-4-0-release-notes/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:32:"ガガミラノ 時計 メンズ";s:10:"POST_email";s:27:"christelpritchett@gawab.com";s:8:"POST_url";s:32:"http://www.fassyongagauotti.com/";s:12:"POST_comment";s:232:"Hello! This is my first visit to your blog! We are a collection of volunteers and starting a new initiative 
in a community in the same niche. Your blog provided us valuable information 
to work on. You have done a marvellous job!";s:11:"POST_submit";s:12:"发表评论";s:20:"POST_comment_post_ID";s:3:"686";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"bd4aaa55ce";s:15:"SERVER_SOFTWARE";s:6:"Apache";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:14:"MEF_PROXY_ADDR";s:11:"10.67.15.12";s:11:"has_apphash";s:1:"1";s:16:"ApplimitOutOfCon";s:1:"0";s:16:"ApplimitOutOfMem";s:1:"0";s:10:"SCRIPT_URL";s:21:"/wp-comments-post.php";s:10:"SCRIPT_URI";s:48:"http://jhjguxin.sinaapp.com/wp-comments-post.php";s:20:"HTTP_X_FORWARDED_FOR";s:14:"184.171.160.84";s:9:"HTTP_HOST";s:20:"jhjguxin.sinaapp.com";s:12:"HTTP_APPNAME";s:8:"jhjguxin";s:15:"HTTP_APPVERSION";s:1:"1";s:9:"HTTP_MCIP";s:26:"1default;1::;1:@default:;;";s:14:"HTTP_ACCESSKEY";s:10:"34y21z4k20";s:12:"HTTP_APPHASH";s:3:"311";s:14:"HTTP_MYSQLPORT";s:4:"3307";s:14:"HTTP_APPCOOKIE";s:26:"default_version=1;debug=2;";s:12:"HTTP_APPSRVC";s:19:"0000000000000000AC0";s:15:"HTTP_CONNECTION";s:5:"close";s:11:"HTTP_COOKIE";s:0:"";s:15:"HTTP_USER_AGENT";s:67:"Mozilla/5.0 (Windows NT 5.1; rv:13.0) Gecko/20100101 Firefox/13.0.1";s:11:"HTTP_ACCEPT";s:129:"text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1";s:20:"HTTP_ACCEPT_LANGUAGE";s:2:"en";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:12:"HTTP_REFERER";s:71:"http://jhjguxin.sinaapp.com/2012/10/06/ruby-on-rails-4-0-release-notes/";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:14:"CONTENT_LENGTH";s:3:"549";s:4:"PATH";s:46:"/bin:/usr/bin:/usr/ucb:/usr/bsd:/usr/local/bin";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:20:"jhjguxin.sinaapp.com";s:11:"SERVER_ADDR";s:11:"10.67.15.24";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:14:"184.171.160.84";s:13:"DOCUMENT_ROOT";s:32:"/data1/www/htdocs/311/jhjguxin/1";s:12:"SERVER_ADMIN";s:18:"saesupport@sina.cn";s:15:"SCRIPT_FILENAME";s:53:"/data1/www/htdocs/311/jhjguxin/1/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"55615";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1371511985";s:14:"HTTP_SECRETKEY";s:9:"Discarded";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:10:"1373462428";s:7:"message";s:39:"jhjguxin 将评论状态改为 approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jhjguxin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>通过mongodump和mongorestore实现Mongodb备份和恢复 --by chenzhou123520</title>
		<link></link>
		<pubDate>Mon, 08 Oct 2012 14:29:27 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=693</guid>
		<description></description>
		<content:encoded><![CDATA[from <a href="http://chenzhou123520.iteye.com/blog/1630993">http://chenzhou123520.iteye.com/blog/1630993</a>

Mongodb自带了mongodump和mongorestore这两个工具来实现对数据的备份和恢复。

mongodump能够在Mongodb运行时进行备份，它的工作原理是对运行的Mongodb做查询，然后将所有查到的文档写入磁盘。但是存在的问题时使用mongodump产生的备份不一定是数据库的实时快照，如果我们在备份时对数据库进行了写入操作，则备份出来的文件可能不完全和Mongodb实时数据相等。另外在备份时可能会对其它客户端性能产生不利的影响。

mongodump用法如下：
<pre>[root@localhost mongodb]# ./bin/mongodump --help
Export MongoDB data to BSON files.

options:
  --help                   produce help message
  -v [ --verbose ]         be more verbose (include multiple times for more
                           verbosity e.g. -vvvvv)
  --version                print the program&#039;s version and exit
  -h [ --host ] arg        mongo host to connect to ( &lt;set name&gt;/s1,s2 for
                           sets)
  --port arg               server port. Can also use --host hostname:port
  --ipv6                   enable IPv6 support (disabled by default)
  -u [ --username ] arg    username
  -p [ --password ] arg    password
  --dbpath arg             directly access mongod database files in the given
                           path, instead of connecting to a mongod  server -
                           needs to lock the data directory, so cannot be used
                           if a mongod is currently accessing the same path
  --directoryperdb         if dbpath specified, each db is in a separate
                           directory
  --journal                enable journaling
  -d [ --db ] arg          database to use
  -c [ --collection ] arg  collection to use (some commands)
  -o [ --out ] arg (=dump) output directory or &quot;-&quot; for stdout
  -q [ --query ] arg       json query
  --oplog                  Use oplog for point-in-time snapshotting
  --repair                 try to recover a crashed database
  --forceTableScan         force a table scan (do not use $snapshot)</pre>
参数说明：

-h:指明数据库宿主机的IP

-u:指明数据库的用户名

-p:指明数据库的密码

-d:指明数据库的名字

-c:指明collection的名字

-o:指明到要导出的文件名

-q:指明导出数据的过滤条件

具体使用示例如下：
<pre>[root@localhost mongodb]# ./bin/mongodump -d test -o data/backup
connected to: 127.0.0.1
DATABASE: test	 to 	data/backup/test
	test.system.indexes to data/backup/test/system.indexes.bson
		 9 objects
	test.users to data/backup/test/users.bson
		 3 objects
	test.games to data/backup/test/games.bson
		 1 objects
	test.blog.post to data/backup/test/blog.post.bson
		 1 objects
	test.lists to data/backup/test/lists.bson
		 1 objects
	test.math to data/backup/test/math.bson
		 1 objects
	test.map to data/backup/test/map.bson
		 8 objects
	test.my_collection to data/backup/test/my_collection.bson
		 0 objects
	test.foo to data/backup/test/foo.bson
		 6 objects
	test.system.users to data/backup/test/system.users.bson
		 1 objects</pre>
mongorestore是Mongodb从备份中恢复数据的工具，它主要用来获取mongodump的输出结果，并将备份的数据插入到运行的Mongodb中。

mongorestore命令使用方法如下：
<pre>[root@localhost mongodb]# ./bin/mongorestore --help
usage: ./bin/mongorestore [options] [directory or filename to restore from]
options:
  --help                  produce help message
  -v [ --verbose ]        be more verbose (include multiple times for more
                          verbosity e.g. -vvvvv)
  --version               print the program&#039;s version and exit
  -h [ --host ] arg       mongo host to connect to ( &lt;set name&gt;/s1,s2 for sets)
  --port arg              server port. Can also use --host hostname:port
  --ipv6                  enable IPv6 support (disabled by default)
  -u [ --username ] arg   username
  -p [ --password ] arg   password
  --dbpath arg            directly access mongod database files in the given
                          path, instead of connecting to a mongod  server -
                          needs to lock the data directory, so cannot be used
                          if a mongod is currently accessing the same path
  --directoryperdb        if dbpath specified, each db is in a separate
                          directory
  --journal               enable journaling
  -d [ --db ] arg         database to use
  -c [ --collection ] arg collection to use (some commands)
  --objcheck              validate object before inserting
  --filter arg            filter to apply before inserting
  --drop                  drop each collection before import
  --oplogReplay           replay oplog for point-in-time restore
  --keepIndexVersion      don&#039;t upgrade indexes to newest version</pre>
参数说明：

-h:指明数据库宿主机的IP

-u:指明数据库的用户名

-p:指明数据库的密码

-d:指明数据库的名字

-c:指明collection的名字

-o:指明到要备份的文件名

-q:指明备份数据的过滤条件

&nbsp;

具体使用示例如下：
<pre>[root@localhost mongodb]# ./bin/mongorestore -d test --drop data/backup/test/
connected to: 127.0.0.1
Tue Aug 14 01:18:17 data/backup/test/games.bson
Tue Aug 14 01:18:17 	 going into namespace [test.games]
Tue Aug 14 01:18:17 	 dropping
1 objects found
Tue Aug 14 01:18:17 data/backup/test/foo.bson
Tue Aug 14 01:18:17 	 going into namespace [test.foo]
Tue Aug 14 01:18:17 	 dropping
6 objects found
Tue Aug 14 01:18:17 data/backup/test/blog.post.bson
Tue Aug 14 01:18:17 	 going into namespace [test.blog.post]
Tue Aug 14 01:18:17 	 dropping
1 objects found
Tue Aug 14 01:18:17 data/backup/test/lists.bson
Tue Aug 14 01:18:17 	 going into namespace [test.lists]
Tue Aug 14 01:18:17 	 dropping
1 objects found
Tue Aug 14 01:18:17 data/backup/test/map.bson
Tue Aug 14 01:18:17 	 going into namespace [test.map]
Tue Aug 14 01:18:17 	 dropping
8 objects found
Tue Aug 14 01:18:17 data/backup/test/math.bson
Tue Aug 14 01:18:17 	 going into namespace [test.math]
Tue Aug 14 01:18:17 	 dropping
1 objects found
Tue Aug 14 01:18:17 data/backup/test/system.users.bson
Tue Aug 14 01:18:17 	 going into namespace [test.system.users]
1 objects found
Tue Aug 14 01:18:17 data/backup/test/my_collection.bson
Tue Aug 14 01:18:17 	 going into namespace [test.my_collection]
Tue Aug 14 01:18:17 	 dropping
Tue Aug 14 01:18:17 file data/backup/test/my_collection.bson empty, skipping
Tue Aug 14 01:18:17 data/backup/test/users.bson
Tue Aug 14 01:18:17 	 going into namespace [test.users]
Tue Aug 14 01:18:17 	 dropping
3 objects found
Tue Aug 14 01:18:17 data/backup/test/system.indexes.bson
Tue Aug 14 01:18:17 	 going into namespace [test.system.indexes]
Tue Aug 14 01:18:17 	 dropping
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.users&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.games&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.blog.post&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.lists&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.math&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.map&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { gps: &quot;2d&quot; }, ns: &quot;test.map&quot;, name: &quot;gps_&quot;, min: -180.0, max: 181.0 }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.foo&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.system.users&quot;, name: &quot;_id_&quot; }
9 objects found</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>693</wp:post_id>
		<wp:post_date>2012-10-08 22:29:27</wp:post_date>
		<wp:post_date_gmt>2012-10-08 14:29:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%80%9a%e8%bf%87mongodump%e5%92%8cmongorestore%e5%ae%9e%e7%8e%b0mongodb%e5%a4%87%e4%bb%bd%e5%92%8c%e6%81%a2%e5%a4%8d</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="db"><![CDATA[DB]]></category>
		<category domain="post_tag" nicename="mongo"><![CDATA[mongo]]></category>
		<category domain="post_tag" nicename="mongodb"><![CDATA[MongoDB]]></category>
		<category domain="post_tag" nicename="mongodump"><![CDATA[mongodump]]></category>
		<category domain="post_tag" nicename="mongorestore"><![CDATA[mongorestore]]></category>
		<category domain="post_tag" nicename="nosql"><![CDATA[nosql]]></category>
		<category domain="post_tag" nicename="%e5%a4%87%e4%bb%bd"><![CDATA[备份]]></category>
		<category domain="post_tag" nicename="%e6%81%a2%e5%a4%8d"><![CDATA[恢复]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>给 Octopress 加上标签功能</title>
		<link></link>
		<pubDate>Sun, 14 Oct 2012 16:46:28 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=696</guid>
		<description></description>
		<content:encoded><![CDATA[上周，我将 Log4D 由 Wordpress 转换为 Octopress，略加打理，颇为顺手。 自动分类 / 评论转移 / 代码高亮 / 图床 的问题一一解决之后， 就只剩下 tag 的问题没有搞定了。

我当时使用了YORKXIN的修改版本来处理 Wordpress 的数据迁移，这个脚本很好用，数据没有遗失，甚至是让我担心的 category / tag 都给予了保留。具体使用方法可以参见从Wordpress迁移到Octopress。

只是虽然 tag 的数据保留了，但是 Octopress 仅支持 category 的分类，而完全忽略 tag。这是我不能容忍的：category 和 tag 分别代表 有序 / 无序 的知识点归纳方法。 一篇文章只能属于一个 category，但可以同时属于多个 tag。 Octopress 的设计方法显然和我长期养成的知识归纳体系冲突，我开始吭次吭次寻找插件。

ps：Octopress 官方也推荐了一个所谓「octopress-tagcloud」的插件， 但这仅仅是让 category 用 列表 / 标签云的形式展示出来，并没有给文章加入 tag 概念。更多官方插件可以查看 3rd party plugins。

就在我准备放弃，自己动手用蹩脚的 ruby 水平写插件时候，突然在 github 找到这种插件： robbyedwards / octopress-tag-pages和 robbyedwards / octopress-tag-cloud。前者负责采集文章的 tag 信息，后者提供标签云展示功能。赞美 Github。

这两个插件使用很简单，将插件文件放入对应的目录（注意备份，存在覆盖的情况）。 然后再给插件「octopress-tag-cloud」添加一个专属页面存放标签云即可。 这个标签云生成的标记是 li...li ，需要在 sass/custom/_styles.scss 添加对应的样式：

#content article .cloud li{
display: inline;
list-style: none outside none;
padding: 0 4px;
}
第二个插件 octopress-tag-cloud 会和 Octopress 官方推荐的所谓「Octopress Tag Cloud」 文件 / tag 标记 冲突，我建议修改官方的那个插件。

我修改过的 octopress-tagcloud 在这里，被重命名为 alswl / octopress-category-list。

这个版本同时参考了 pf_miles 的 utf-8 修改，以修复问题 Liquid error: incompatible encoding regexp match (ASCII-8BIT regexp with UTF-8 string) 。

最后 Show 一下我的一坨标签云， 等有时间我再将标签和类别精简一下，以适应 Octopress。

版权所有 © 2010 转载本站文章请注明： 转载自 Log4D
原文链接: http://log4d.com/2012/05/tag-cloud/
您可以随意地转载本站的文章，但是必须在醒目位置注明来源及本站链接，不可以将本站文章商业化使用，或者修改、转换或者以本作品为基础进行创作。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>696</wp:post_id>
		<wp:post_date>2012-10-15 00:46:28</wp:post_date>
		<wp:post_date_gmt>2012-10-14 16:46:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%bb%99-octopress-%e5%8a%a0%e4%b8%8a%e6%a0%87%e7%ad%be%e5%8a%9f%e8%83%bd</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="octopress"><![CDATA[Octopress]]></category>
		<category domain="post_tag" nicename="tagcloud"><![CDATA[tagcloud]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SINGLE LINE CSS --by Steve Smith</title>
		<link></link>
		<pubDate>Thu, 01 Nov 2012 09:47:40 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=707</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Note:</strong> It should be known that due to advances in CSS preprocessors and version control systems, I no longer adhere to this particular style preference. I still think many of the arguments here are valid, but there’s enough on the other side to make me use the long-form style.

I’ve been going against convention when creating my CSS files for over two years now. I put my selector, brackets, and attribute/value pairs all on a single line in my CSS file. And I love it. Let me show you why.

To give credit where it’s due, this technique was originally show to me by <a href="http://addictedtonew.com/">John Nunemaker</a>. And when I first saw it, I likely responded the same way you will shortly. “Um. No thanks, that’s ugly.” But the more I saw it, the more I saw it’s usefulness, and soon enough I was writing my CSS files the same way.
<h2>ENOUGH PREFACE, LET’S SEE SOME CODE</h2>
Typically, when you see css code, you see it like this:
<div>
<div>
<div>
<pre>#wrapper {
    width:800px; 
    margin:0 auto;
}

#header {
    height:100px; 
    position:relative;
}

#feature .post {
    width:490px;
    float:left;
}

#feature .link {
    width:195px; 
    display:inline; 
    margin:0 10px 0 0;
    float:right;
}

#footer {
    clear:both; 
    font-size:93%; 
    float:none;
}</pre>
</div>
</div>
</div>
All well and good. You can easily scan down this list, find your selector, then scan down a short list of attributes to get to the values your looking for. But imagine now that you have over 200 selectors, each with a laundry-list of attributes. That’s quite a mess to search through. My issue with CSS files like these is when they get large, it becomes very difficult to scan the document for a particular selector. They’re all separated by loads of attribute and value pairs. So what if we took out that separation, and put each selector, <em>and</em> it’s attributes and values all on the same line?
<div>
<div>
<div>
<pre>#wrapper            {width:800px; margin:0 auto;}
#header             {height:100px; position:relative;}
#feature .post      {width:490px; float:left;}
#feature .link      {width:195px; display:inline; margin:0 10px 0 0; float:right;}
#footer             {clear:both; font-size:93%; float:none;}</pre>
</div>
</div>
</div>
Now <em>that</em> is easy to scan through. To put this into a practical example, <a href="http://orderedlist.com/assets/2007/7/12/ol.css">one of my single-line stylesheets</a> comes in around 307 lines. Converting <a href="http://orderedlist.com/assets/2007/7/12/ol-long.css">the same stylesheet to the normal CSS formatting</a> grows that to a whopping 1167 lines! 6-8 screens of CSS vs 22-25. That’s quite a difference.

“But Steve,” I can hear you say, “now the attributes are hard to scan through.” True, it’s not as easy as it was when they’re lined up like the previous example. But think of it this way: a large CSS file might have <em>hundreds</em> of selectors, but each of those selectors may have only a few attribute and value pairs, or maybe as much as 10 to 12 if it’s very stylized.

So, which would you rather spend your time searching through? A list of hundreds of disjointed selectors to find just the right one you’re looking for, or easily scan 200+ selectors, and then spend an extra second or so looking through the few attribute and value pairs defined within?

I would at least encourage you to give it a try. This is just a little tip that saves me loads of time when creating, and especially editing, CSS, so I thought I’d share.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>707</wp:post_id>
		<wp:post_date>2012-11-01 17:47:40</wp:post_date>
		<wp:post_date_gmt>2012-11-01 09:47:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>single-line-css-by-steve-smith</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="css"><![CDATA[css]]></category>
		<category domain="post_tag" nicename="line"><![CDATA[line]]></category>
		<category domain="post_tag" nicename="single"><![CDATA[single]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>STRUCTURAL TAGS IN HTML5 --by Steve Smith</title>
		<link></link>
		<pubDate>Thu, 01 Nov 2012 09:49:49 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=709</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

he HTML5 specification has added quite a few interesting and useful tags for structuring your markup. For a majority of everyday uses, these tags will replace many of our typical <code>div</code> entries from our code. So let’s dig in.

</div>
<h2>DEFINING STRUCTURE</h2>
<div>
<div>
<div>
<pre>&lt;section&gt;</pre>
</div>
</div>
</div>
A <code>section</code> is a thematic grouping of content, typically preceded by header, possibly with a footer after. <code>section</code>s can be nested inside of each other, if needed, and can hold any amount of typical markup.
<div>
<div>
<div>
<pre>&lt;header&gt;</pre>
</div>
</div>
</div>
The <code>header</code> of a <code>section</code>, typically a headline or grouping of headlines, but may also contain supplemental information about the section.
<div>
<div>
<div>
<pre>&lt;footer&gt;</pre>
</div>
</div>
</div>
A <code>footer</code> typically contains information about its section such as who wrote it, links to related documents, copyright data, and the like.
<div>
<div>
<div>
<pre>&lt;nav&gt;</pre>
</div>
</div>
</div>
Defines the navigation area, typically a list of links. The <code>nav</code> should be a sibling of the main <code>section</code>, <code>header</code>, and <code>footer</code>.
<div>
<div>
<div>
<pre>&lt;article&gt;</pre>
</div>
</div>
</div>
An independent entry in a blog, magazine, compendium, and so on.
<div>
<div>
<div>
<pre>&lt;aside&gt;</pre>
</div>
</div>
</div>
An <code>aside</code> indicates content that is tangentially related to the content around it.
<h2>PUTTING IT TOGETHER</h2>
So let’s take a look at how we would put together a typical blog page with our new structural tags.
<div>
<div>
<div>
<pre>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Standard Blog&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;header&gt;
      &lt;h1&gt;&lt;a href=&quot;#&quot;&gt;Standard Blog&lt;/a&gt;&lt;/h1&gt;
    &lt;/header&gt;
    &lt;nav&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Archives&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/nav&gt;
    &lt;section&gt;
      &lt;article&gt;
        &lt;header&gt;
          &lt;h1&gt;&lt;a href=&quot;#&quot;&gt;Title&lt;/a&gt;&lt;/h1&gt;
        &lt;/header&gt;
        &lt;section&gt;
          &lt;p&gt;Lorem ipsum...&lt;/p&gt;
        &lt;/section&gt;
      &lt;/article&gt;
      &lt;article&gt;
        &lt;header&gt;
          &lt;h1&gt;&lt;a href=&quot;#&quot;&gt;Title&lt;/a&gt;&lt;/h1&gt;
        &lt;/header&gt;
        &lt;section&gt;
          &lt;p&gt;Lorem ipsum...&lt;/p&gt;
        &lt;/section&gt;
      &lt;/article&gt;
      &lt;article&gt;
        &lt;header&gt;
          &lt;h1&gt;&lt;a href=&quot;#&quot;&gt;Title&lt;/a&gt;&lt;/h1&gt;
        &lt;/header&gt;
        &lt;section&gt;
          &lt;p&gt;Lorem ipsum...&lt;/p&gt;
        &lt;/section&gt;
      &lt;/article&gt;
    &lt;/section&gt;
    &lt;footer&gt;
      &lt;p&gt;Copyright © 2008 All Rights&lt;/p&gt;
    &lt;/footer&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>
</div>
</div>
</div>
<strong>Note:</strong> This example is a little verbose in markup for the simplicity of the content, but I wanted to exaggerate for emphasis.

As you can see, the tags themselves are much more descriptive than simply providing an <code>id</code> attribute to a <code>div</code>. This also gives the added benefit of a descriptive <strong>closing tag</strong>, as <code>&lt;/article&gt;</code> is much more understandable that wondering which <code>&lt;div id="something"&gt;</code> goes with a given <code>&lt;/div&gt;</code>.
<h2>SO, I CAN USE THIS NOW?</h2>
Actually, yes, with a few extra steps. And it will work in all modern browsers. It can even work in IE6. There are only a few little quirks we need to get past if we’re going to start using this today.

First, because most browsers don’t understand the new HTML5 doctype, they don’t know about these new tags in HTML5. Fortunately, due to the flexibility of browsers, they deal well with unknown tags. The only issue here is unknown tags have no default style, <strong>and</strong> are treated as <strong>inline tags</strong>. These new HTML5 tags are structural, and should obviously be block level elements. So, when we style them with CSS, we need to be sure to include <code>display:block;</code> in our attribute/value pairs.

Include this simple extra piece of CSS, and these new tags are immediately usable. Starting today. And of course, once HTML5 is more widely supported, the superfluous <code>display:block;</code> can be removed, as it will be included in the browser default styles.
<h2>SUPPORTING IE</h2>
There is one more issue if you require IE support. Turns out that the IE rendering engine will work with the new tags, but <strong>will not</strong> recognize any CSSapplied to them. Well, that’s no good. Fortunately, IE just needs a good swift kick with the help of a very simple bit of JavaScript. All we need to do to kick start IE is to create a DOM node with JavaScript for each of the new tags, and suddenly IE will apply styles to the new tags with no problem. The code will look something like this, and can be placed directly in the <code>head</code> of our document, or the contents of the <code>script</code> tag placed into an external file and included.
<div>
<div>
<div>
<pre>&lt;script&gt;
  document.createElement(&#039;header&#039;);
  document.createElement(&#039;footer&#039;);
  document.createElement(&#039;section&#039;);
  document.createElement(&#039;aside&#039;);
  document.createElement(&#039;nav&#039;);
  document.createElement(&#039;article&#039;);
&lt;/script&gt;</pre>
</div>
</div>
</div>
Before we leave this code, there’s one thing to mention about the <code>script</code> tag in HTML5. HTML5 will <em>assume</em> <code>type="text/javascript"</code> on any script element, so it need not be included. Once again, making things simple.
<h2>WRAPPING UP</h2>
So we can begin, right now, to structure our documents using the new tags provided in HTML5. With a few simple tricks, they’ll work today, and be compatible in the future. So next time you start a new site, consider going with HTML5, and give your markup a little more defined structure.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>709</wp:post_id>
		<wp:post_date>2012-11-01 17:49:49</wp:post_date>
		<wp:post_date_gmt>2012-11-01 09:49:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>structural-tags-in-html5-by-steve-smith</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hml5"><![CDATA[hml5]]></category>
		<category domain="post_tag" nicename="structural"><![CDATA[structural]]></category>
		<category domain="post_tag" nicename="tags"><![CDATA[tags]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MongoDB repair on Ubuntu</title>
		<link></link>
		<pubDate>Mon, 05 Nov 2012 06:24:28 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=714</guid>
		<description></description>
		<content:encoded><![CDATA[This evening I tried to connect to my MongoDB instance using the command line mongo tool and got the following error message: <code>Error: couldn't connect to server 127.0.0.1} (anon):1137</code>. It turns out that the server wasn't running due to an improper shutdown at some point in the past. Here's what you need to do to fix it.

Note: my instructions are specific to Ubuntu 10.04 (&amp; probably other versions of Ubuntu).
<h2>Why Won't MongoDB Start?</h2>
One of the lame things about MongoDB is that it doesn't handle a crash on it's own very well. If the database crashes or otherwise doesn't shut down properly, then the next time you try to start it, you'll get a nice error saying that there is an old lockfile and that you probably need to remove it and run mongod --repair. However, on my laptop running Ubuntu 10.04, I ran into a few confusing things that I'd like to share, hopefully to save someone else out there some time.
<h2>Symptoms</h2>
<ul>
	<li>Try to connect (type <code>mongo</code> on the command line). You should get a connect failed error.</li>
	<li>Verify that MongoDB is not running. Run <code>sudo status mongodb</code>. It should report<code>mongodb stop/waiting</code>.</li>
	<li>Verify that you are unable to start MongoDB. Run <code>sudo start mongodb</code>. It will report<code>mongodb start/running, process XXXX</code> no matter what. But if you run <code>sudo status mongodb</code> again, you'll get stop/waiting.</li>
	<li>Check your logs to see that you in fact have the same problem as me. Your logs should be at /var/log/mongodb/mongodb.log. You should see an error like this:
<pre>************** 
old lock file: /var/lib/mongodb/mongod.lock.  probably means unclean shutdown
recommend removing file and running --repair
see: http://dochub.mongodb.org/core/repair for more information
*************</pre>
</li>
</ul>
<h2>Instructions To Get MongoDB Up Again</h2>
<ul>
	<li>Manually remove the lockfile: <code>sudo rm /var/lib/mongodb/mongod.lock</code></li>
	<li>Run the repair script: <code>sudo -u mongodb mongod -f /etc/mongodb.conf --repair</code>.
<ul>
	<li>You must run this command as the mongodb user. If you run it as root, then root will own files in /var/lib/mongodb/ that are necessary to run the mongodb daemon and therefore when the daemon trys to run later as the mongodb user, it won't have permissions to start. In that case you'll get this error: <code>Unable to create / open lock file for lockfilepath: /var/lib/mongodb/mongod.lock errno:13 Permission denied, terminating</code>.</li>
	<li>On Ubuntu, you must specify the configuration file /etc/mongodb.conf using the -f flag. Otherwise it will look for the data files in the wrong place and you will see the following error: <code>dbpath (/data/db/) does not exist, terminating</code>.</li>
</ul>
</li>
	<li>Now you can start your MongoDB server with <code>sudo start mongodb</code> and verify it is running with <code>sudo status mongodb</code> and by trying to connect to it with <code>mongo test</code>.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>714</wp:post_id>
		<wp:post_date>2012-11-05 14:24:28</wp:post_date>
		<wp:post_date_gmt>2012-11-05 06:24:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mongodb-repair-on-ubuntu</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="db"><![CDATA[DB]]></category>
		<category domain="post_tag" nicename="mongodb"><![CDATA[MongoDB]]></category>
		<category domain="post_tag" nicename="repair"><![CDATA[repair]]></category>
		<category domain="post_tag" nicename="ubuntu"><![CDATA[ubuntu]]></category>
		<category domain="category" nicename="ubuntu"><![CDATA[ubuntu]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>数据库性能优化之SQL语句优化1</title>
		<link></link>
		<pubDate>Mon, 19 Nov 2012 12:58:50 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=720</guid>
		<description></description>
		<content:encoded><![CDATA[温馨提示：本篇内容均来自网上，本人只做了稍微处理，未进行细致研究，仅当做以后不备之需，如若你喜欢可尽情转走。

一、问题的提出

在应用系统开发初期，由于开发数据库数据比较少，对于查询SQL语句，复杂视图的的编写等体会不出SQL语句各种写法的性能优劣，但是如果将应用系统提交实际应用后，随着数据库中数据的增加，系统的响应速度就成为目前系统需要解决的最主要的问题之一。系统优化中一个很重要的方面就是SQL语句的优化。对于海量数据，劣质SQL语句和优质SQL语句之间的速度差别可以达到上百倍，可见对于一个系统不是简单地能实现其功能就可，而是要写出高质量的SQL语句，提高系统的可用性。

在多数情况下，Oracle使用索引来更快地遍历表，优化器主要根据定义的索引来提高性能。但是，如果在SQL语句的where子句中写的SQL代码不合理，就会造成优化器删去索引而使用全表扫描，一般就这种SQL语句就是所谓的劣质SQL语句。在编写SQL语句时我们应清楚优化器根据何种原则来删除索引，这有助于写出高性能的SQL语句。

二、SQL语句编写注意问题

下面就某些SQL语句的where子句编写中需要注意的问题作详细介绍。在这些where子句中，即使某些列存在索引，但是由于编写了劣质的SQL，系统在运行该SQL语句时也不能使用该索引，而同样使用全表扫描，这就造成了响应速度的极大降低。

1. 操作符优化

(a) IN 操作符

用IN写出来的SQL的优点是比较容易写及清晰易懂，这比较适合现代软件开发的风格。但是用IN的SQL性能总是比较低的，从Oracle执行的步骤来分析用IN的SQL与不用IN的SQL有以下区别：

ORACLE试图将其转换成多个表的连接，如果转换不成功则先执行IN里面的子查询，再查询外层的表记录，如果转换成功则直接采用多个表的连接方式查询。由此可见用IN的SQL至少多了一个转换的过程。一般的SQL都可以转换成功，但对于含有分组统计等方面的SQL就不能转换了。

推荐方案：在业务密集的SQL当中尽量不采用IN操作符，用EXISTS 方案代替。

(b) NOT IN操作符

此操作是强列不推荐使用的，因为它不能应用表的索引。

推荐方案：用NOT EXISTS 方案代替

(c) IS NULL 或IS NOT NULL操作（判断字段是否为空）

判断字段是否为空一般是不会应用索引的，因为索引是不索引空值的。不能用null作索引，任何包含null值的列都将不会被包含在索引中。即使索引有多列这样的情况下，只要这些列中有一列含有null，该列就会从索引中排除。也就是说如果某列存在空值，即使对该列建索引也不会提高性能。任何在where子句中使用is null或is not null的语句优化器是不允许使用索引的。

推荐方案：用其它相同功能的操作运算代替，如：a is not null 改为 a>0 或a>’’等。不允许字段为空，而用一个缺省值代替空值，如申请中状态字段不允许为空，缺省为申请。

(d) > 及 < 操作符（大于或小于操作符）

大于或小于操作符一般情况下是不用调整的，因为它有索引就会采用索引查找，但有的情况下可以对它进行优化，如一个表有100万记录，一个数值型字段A，30万记录的A=0，30万记录的A=1，39万记录的A=2，1万记录的A=3。那么执行A>2与A>=3的效果就有很大的区别了，因为A>2时ORACLE会先找出为2的记录索引再进行比较，而A>=3时ORACLE则直接找到=3的记录索引。

(e) LIKE操作符

LIKE操作符可以应用通配符查询，里面的通配符组合可能达到几乎是任意的查询，但是如果用得不好则会产生性能上的问题，如LIKE ‘%5400%’ 这种查询不会引用索引，而LIKE ‘X5400%’则会引用范围索引。

一个实际例子：用YW_YHJBQK表中营业编号后面的户标识号可来查询营业编号 YY_BH LIKE ‘%5400%’ 这个条件会产生全表扫描，如果改成YY_BH LIKE ’X5400%’ OR YY_BH LIKE ’B5400%’ 则会利用YY_BH的索引进行两个范围的查询，性能肯定大大提高。

带通配符(%)的like语句：

同样以上面的例子来看这种情况。目前的需求是这样的，要求在职工表中查询名字中包含cliton的人。可以采用如下的查询SQL语句:

select * from employee where last_name like '%cliton%';

这里由于通配符(%)在搜寻词首出现，所以Oracle系统不使用last_name的索引。在很多情况下可能无法避免这种情况，但是一定要心中有底，通配符如此使用会降低查询速度。然而当通配符出现在字符串其他位置时，优化器就能利用索引。在下面的查询中索引得到了使用:

select * from employee where last_name like 'c%';

(f) UNION操作符

UNION在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。实际大部分应用中是不会产生重复的记录，最常见的是过程表与历史表UNION。如：    
select * from gc_dfys     
union     
select * from ls_jg_dfys     
这个SQL在运行时先取出两个表的结果，再用排序空间进行排序删除重复的记录，最后返回结果集，如果表数据量大的话可能会导致用磁盘进行排序。

推荐方案：采用UNION ALL操作符替代UNION，因为UNION ALL操作只是简单的将两个结果合并后就返回。

select * from gc_dfys    
union all     
select * from ls_jg_dfys

(g) 联接列

对于有联接的列，即使最后的联接值为一个静态值，优化器是不会使用索引的。我们一起来看一个例子，假定有一个职工表(employee)，对于一个职工的姓和名分成两列存放(FIRST_NAME和LAST_NAME)，现在要查询一个叫比尔.克林顿(Bill Cliton)的职工。

下面是一个采用联接查询的SQL语句：

select * from employss where first_name||''||last_name ='Beill Cliton';

上面这条语句完全可以查询出是否有Bill Cliton这个员工，但是这里需要注意，系统优化器对基于last_name创建的索引没有使用。当采用下面这种SQL语句的编写，Oracle系统就可以采用基于last_name创建的索引。

*** where first_name ='Beill' and last_name ='Cliton';

(h) Order by语句

ORDER BY语句决定了Oracle如何将返回的查询结果排序。Order by语句对要排序的列没有什么特别的限制，也可以将函数加入列中(象联接或者附加等)。任何在Order by语句的非索引项或者有计算表达式都将降低查询速度。

仔细检查order by语句以找出非索引项或者表达式，它们会降低性能。解决这个问题的办法就是重写order by语句以使用索引，也可以为所使用的列建立另外一个索引，同时应绝对避免在order by子句中使用表达式。

(i) NOT

我们在查询时经常在where子句使用一些逻辑表达式，如大于、小于、等于以及不等于等等，也可以使用and(与)、or(或)以及not(非)。NOT可用来对任何逻辑运算符号取反。下面是一个NOT子句的例子:

... where not (status ='VALID')

如果要使用NOT，则应在取反的短语前面加上括号，并在短语前面加上NOT运算符。NOT运算符包含在另外一个逻辑运算符中，这就是不等于(<>)运算符。换句话说，即使不在查询where子句中显式地加入NOT词，NOT仍在运算符中，见下例:

... where status <>'INVALID';

对这个查询，可以改写为不使用NOT：

select * from employee where salary<3000 or salary>3000;

虽然这两种查询的结果一样，但是第二种查询方案会比第一种查询方案更快些。第二种查询允许Oracle对salary列使用索引，而第一种查询则不能使用索引。

2. SQL书写的影响

(a) 同一功能同一性能不同写法SQL的影响。

如一个SQL在A程序员写的为  Select * from zl_yhjbqk

B程序员写的为 Select * from dlyx.zl_yhjbqk（带表所有者的前缀）

C程序员写的为 Select * from DLYX.ZLYHJBQK（大写表名）

D程序员写的为 Select *  from DLYX.ZLYHJBQK（中间多了空格）

以上四个SQL在ORACLE分析整理之后产生的结果及执行的时间是一样的，但是从ORACLE共享内存SGA的原理，可以得出ORACLE对每个SQL 都会对其进行一次分析，并且占用共享内存，如果将SQL的字符串及格式写得完全相同，则ORACLE只会分析一次，共享内存也只会留下一次的分析结果，这不仅可以减少分析SQL的时间，而且可以减少共享内存重复的信息，ORACLE也可以准确统计SQL的执行频率。

(b) WHERE后面的条件顺序影响

WHERE子句后面的条件顺序对大数据量表的查询会产生直接的影响。如：    
Select * from zl_yhjbqk where dy_dj = '1KV以下' and xh_bz=1     
Select * from zl_yhjbqk where xh_bz=1 and dy_dj = '1KV以下'     
以上两个SQL中dy_dj（电压等级）及xh_bz（销户标志）两个字段都没进行索引，所以执行的时候都是全表扫描，第一条SQL的dy_dj = '1KV以下'条件在记录集内比率为99%，而xh_bz=1的比率只为0.5%，在进行第一条SQL的时候99%条记录都进行dy_dj及xh_bz的比较，而在进行第二条SQL的时候0.5%条记录都进行dy_dj及xh_bz的比较，以此可以得出第二条SQL的CPU占用率明显比第一条低。

(c) 查询表顺序的影响

在FROM后面的表中的列表顺序会对SQL执行性能影响，在没有索引及ORACLE没有对表进行统计分析的情况下，ORACLE会按表出现的顺序进行链接，由此可见表的顺序不对时会产生十分耗服物器资源的数据交叉。（注：如果对表进行了统计分析，ORACLE会自动先进小表的链接，再进行大表的链接）

3. SQL语句索引的利用

(a) 对条件字段的一些优化

采用函数处理的字段不能利用索引，如：

substr(hbs_bh,1,4)=’5400’，优化处理：hbs_bh like ‘5400%’

trunc(sk_rq)=trunc(sysdate)， 优化处理：sk_rq>=trunc(sysdate) and sk_rq<trunc(sysdate+1)

进行了显式或隐式的运算的字段不能进行索引，如：ss_df+20>50，优化处理：ss_df>30

‘X’ || hbs_bh>’X5400021452’，优化处理：hbs_bh>’5400021542’

sk_rq+5=sysdate，优化处理：sk_rq=sysdate-5

hbs_bh=5401002554，优化处理：hbs_bh=’ 5401002554’，注：此条件对hbs_bh 进行隐式的to_number转换，因为hbs_bh字段是字符型。

条件内包括了多个本表的字段运算时不能进行索引，如：

ys_df>cx_df，无法进行优化    
qc_bh || kh_bh=’5400250000’，优化处理：qc_bh=’5400’ and kh_bh=’250000’

4. 更多方面SQL优化资料分享

（1） 选择最有效率的表名顺序(只在基于规则的优化器中有效)：

ORACLE 的解析器按照从右到左的顺序处理FROM子句中的表名，FROM子句中写在最后的表(基础表 driving table)将被最先处理，在FROM子句中包含多个表的情况下,你必须选择记录条数最少的表作为基础表。如果有3个以上的表连接查询, 那就需要选择交叉表(intersection table)作为基础表, 交叉表是指那个被其他表所引用的表.

（2） WHERE子句中的连接顺序：

ORACLE采用自下而上的顺序解析WHERE子句,根据这个原理,表之间的连接必须写在其他WHERE条件之前, 那些可以过滤掉最大数量记录的条件必须写在WHERE子句的末尾.

（3） SELECT子句中避免使用 ‘ * ‘：

ORACLE在解析的过程中, 会将'*' 依次转换成所有的列名, 这个工作是通过查询数据字典完成的, 这意味着将耗费更多的时间。

（4） 减少访问数据库的次数：

ORACLE在内部执行了许多工作: 解析SQL语句, 估算索引的利用率, 绑定变量 , 读数据块等。

（5） 在SQL*Plus , SQL*Forms和Pro*C中重新设置ARRAYSIZE参数, 可以增加每次数据库访问的检索数据量 ,建议值为200。

（6） 使用DECODE函数来减少处理时间：

使用DECODE函数可以避免重复扫描相同记录或重复连接相同的表.

（7） 整合简单,无关联的数据库访问：

如果你有几个简单的数据库查询语句,你可以把它们整合到一个查询中(即使它们之间没有关系) 。

（8） 删除重复记录：

最高效的删除重复记录方法 ( 因为使用了ROWID)例子：    
DELETE  FROM  EMP E  WHERE  E.ROWID > (SELECT MIN(X.ROWID) FROM  EMP X  WHERE  X.EMP_NO = E.EMP_NO)。

（9） 用TRUNCATE替代DELETE：

当删除表中的记录时,在通常情况下, 回滚段(rollback segments ) 用来存放可以被恢复的信息. 如果你没有COMMIT事务,ORACLE会将数据恢复到删除之前的状态(准确地说是恢复到执行删除命令之前的状况) 而当运用TRUNCATE时, 回滚段不再存放任何可被恢复的信息.当命令运行后,数据不能被恢复.因此很少的资源被调用,执行时间也会很短. (译者按: TRUNCATE只在删除全表适用,TRUNCATE是DDL不是DML) 。

（10） 尽量多使用COMMIT：

只要有可能,在程序中尽量多使用COMMIT, 这样程序的性能得到提高,需求也会因为COMMIT所释放的资源而减少，COMMIT所释放的资源:    
a. 回滚段上用于恢复数据的信息.     
b. 被程序语句获得的锁     
c. redo log buffer 中的空间     
d. ORACLE为管理上述3种资源中的内部花费

（11） 用Where子句替换HAVING子句：

避免使用HAVING子句, HAVING 只会在检索出所有记录之后才对结果集进行过滤. 这个处理需要排序,总计等操作. 如果能通过WHERE子句限制记录的数目,那就能减少这方面的开销. (非oracle中)on、where、having这三个都可以加条件的子句中，on是最先执行，where次之，having最后，因为on是先把不符合条件的记录过滤后才进行统计，它就可以减少中间运算要处理的数据，按理说应该速度是最快的，where也应该比having快点的，因为它过滤数据后才进行sum，在两个表联接时才用on的，所以在一个表的时候，就剩下where跟having比较了。在这单表查询统计的情况下，如果要过滤的条件没有涉及到要计算字段，那它们的结果是一样的，只是where可以使用rushmore技术，而having就不能，在速度上后者要慢如果要涉及到计算的字 段，就表示在没计算之前，这个字段的值是不确定的，根据上篇写的工作流程，where的作用时间是在计算之前就完成的，而having就是在计算后才起作 用的，所以在这种情况下，两者的结果会不同。在多表联接查询时，on比where更早起作用。系统首先根据各个表之间的联接条件，把多个表合成一个临时表 后，再由where进行过滤，然后再计算，计算完后再由having进行过滤。由此可见，要想过滤条件起到正确的作用，首先要明白这个条件应该在什么时候起作用，然后再决定放在那里。

（12） 减少对表的查询：

在含有子查询的SQL语句中,要特别注意减少对表的查询.例子：    
SELECT  TAB_NAME FROM TABLES WHERE (TAB_NAME,DB_VER) = ( SELECT TAB_NAME,DB_VER FROM  TAB_COLUMNS  WHERE  VERSION = 604)

（13） 通过内部函数提高SQL效率：

复杂的SQL往往牺牲了执行效率. 能够掌握上面的运用函数解决问题的方法在实际工作中是非常有意义的。

（14） 使用表的别名(Alias)：

当在SQL语句中连接多个表时, 请使用表的别名并把别名前缀于每个Column上.这样一来,就可以减少解析的时间并减少那些由Column歧义引起的语法错误。

（15） 用EXISTS替代IN、用NOT EXISTS替代NOT IN：

在许多基于基础表的查询中,为了满足一个条件,往往需要对另一个表进行联接.在这种情况下, 使用EXISTS(或NOT EXISTS)通常将提高查询的效率. 在子查询中,NOT IN子句将执行一个内部的排序和合并. 无论在哪种情况下,NOT IN都是最低效的 (因为它对子查询中的表执行了一个全表遍历). 为了避免使用NOT IN ,我们可以把它改写成外连接(Outer Joins)或NOT EXISTS。    
例子：     
（高效）SELECT * FROM  EMP (基础表)  WHERE  EMPNO > 0  AND  EXISTS (SELECT ‘X'  FROM DEPT  WHERE  DEPT.DEPTNO = EMP.DEPTNO  AND  LOC = ‘MELB')     
(低效)SELECT  * FROM  EMP (基础表)  WHERE  EMPNO > 0  AND  DEPTNO IN(SELECT DEPTNO  FROM  DEPT  WHERE  LOC = ‘MELB')

（16） 识别'低效执行'的SQL语句：

虽然目前各种关于SQL优化的图形化工具层出不穷,但是写出自己的SQL工具来解决问题始终是一个最好的方法：    
SELECT  EXECUTIONS , DISK_READS, BUFFER_GETS,     
ROUND((BUFFER_GETS-DISK_READS)/BUFFER_GETS,2) Hit_radio,     
ROUND(DISK_READS/EXECUTIONS,2) Reads_per_run,     
SQL_TEXT     
FROM  V$SQLAREA     
WHERE  EXECUTIONS>0     
AND  BUFFER_GETS > 0     
AND  (BUFFER_GETS-DISK_READS)/BUFFER_GETS < 0.8     
ORDER BY  4 DESC;

（17） 用索引提高效率：

索引是表的一个概念部分,用来提高检索数据的效率，ORACLE使用了一个复杂的自平衡B-tree结构. 通常,通过索引查询数据比全表扫描要快. 当ORACLE找出执行查询和Update语句的最佳路径时, ORACLE优化器将使用索引. 同样在联结多个表时使用索引也可以提高效率. 另一个使用索引的好处是,它提供了主键(primary key)的唯一性验证.。那些LONG或LONG RAW数据类型, 你可以索引几乎所有的列. 通常, 在大型表中使用索引特别有效. 当然,你也会发现, 在扫描小表时,使用索引同样能提高效率. 虽然使用索引能得到查询效率的提高,但是我们也必须注意到它的代价. 索引需要空间来存储,也需要定期维护, 每当有记录在表中增减或索引列被修改时, 索引本身也会被修改. 这意味着每条记录的INSERT , DELETE , UPDATE将为此多付出4 , 5 次的磁盘I/O . 因为索引需要额外的存储空间和处理,那些不必要的索引反而会使查询反应时间变慢.。定期的重构索引是有必要的：    
ALTER  INDEX <INDEXNAME> REBUILD <TABLESPACENAME>

（18） 用EXISTS替换DISTINCT：

当提交一个包含一对多表信息(比如部门表和雇员表)的查询时,避免在SELECT子句中使用DISTINCT. 一般可以考虑用EXIST替换, EXISTS 使查询更为迅速,因为RDBMS核心模块将在子查询的条件一旦满足后,立刻返回结果. 例子：    
(低效):     
SELECT  DISTINCT  DEPT_NO,DEPT_NAME  FROM  DEPT D , EMP E WHERE  D.DEPT_NO = E.DEPT_NO     
(高效):     
SELECT  DEPT_NO,DEPT_NAME  FROM  DEPT D  WHERE  EXISTS ( SELECT ‘X'  FROM  EMP E  WHERE E.DEPT_NO = D.DEPT_NO);

（19） sql语句用大写的；因为oracle总是先解析sql语句，把小写的字母转换成大写的再执行。

（20） 在java代码中尽量少用连接符“＋”连接字符串！

（21） 避免在索引列上使用NOT，通常我们要避免在索引列上使用NOT, NOT会产生在和在索引列上使用函数相同的影响. 当ORACLE”遇到”NOT,他就会停止使用索引转而执行全表扫描。

（22） 避免在索引列上使用计算      
WHERE子句中，如果索引列是函数的一部分．优化器将不使用索引而使用全表扫描．举例:     
低效：     
SELECT … FROM  DEPT  WHERE SAL * 12 > 25000;     
高效:     
SELECT … FROM DEPT WHERE SAL > 25000/12;

（23） 用>=替代>
高效:     
SELECT * FROM  EMP  WHERE  DEPTNO >=4     
低效:     
SELECT * FROM EMP WHERE DEPTNO >3     
两者的区别在于, 前者DBMS将直接跳到第一个DEPT等于4的记录而后者将首先定位到DEPTNO=3的记录并且向前扫描到第一个DEPT大于3的记录。

（24） 用UNION替换OR (适用于索引列)

通常情况下, 用UNION替换WHERE子句中的OR将会起到较好的效果. 对索引列使用OR将造成全表扫描. 注意, 以上规则只针对多个索引列有效. 如果有column没有被索引, 查询效率可能会因为你没有选择OR而降低. 在下面的例子中, LOC_ID 和REGION上都建有索引.    
高效:     
SELECT LOC_ID , LOC_DESC , REGION     
FROM LOCATION     
WHERE LOC_ID = 10     
UNION     
SELECT LOC_ID , LOC_DESC , REGION     
FROM LOCATION     
WHERE REGION = “MELBOURNE”     
低效:     
SELECT LOC_ID , LOC_DESC , REGION     
FROM LOCATION     
WHERE LOC_ID = 10 OR REGION = “MELBOURNE”     
如果你坚持要用OR, 那就需要返回记录最少的索引列写在最前面.

（25） 用IN来替换OR

这是一条简单易记的规则，但是实际的执行效果还须检验，在ORACLE8i下，两者的执行路径似乎是相同的．    
低效:     
SELECT…. FROM LOCATION WHERE LOC_ID = 10 OR LOC_ID = 20 OR LOC_ID = 30     
高效     
SELECT… FROM LOCATION WHERE LOC_IN  IN (10,20,30);

（26） 避免在索引列上使用IS NULL和IS NOT NULL

避免在索引中使用任何可以为空的列，ORACLE将无法使用该索引．对于单列索引，如果列包含空值，索引中将不存在此记录. 对于复合索引，如果每个列都为空，索引中同样不存在此记录. 如果至少有一个列不为空，则记录存在于索引中．举例: 如果唯一性索引建立在表的A列和B列上, 并且表中存在一条记录的A,B值为(123,null) , ORACLE将不接受下一条具有相同A,B值（123,null）的记录(插入). 然而如果所有的索引列都为空，ORACLE将认为整个键值为空而空不等于空. 因此你可以插入1000 条具有相同键值的记录,当然它们都是空! 因为空值不存在于索引列中,所以WHERE子句中对索引列进行空值比较将使ORACLE停用该索引.    
低效: (索引失效)     
SELECT … FROM  DEPARTMENT  WHERE  DEPT_CODE IS NOT NULL;     
高效: (索引有效)     
SELECT … FROM  DEPARTMENT  WHERE  DEPT_CODE >=0;

（27） 总是使用索引的第一个列：

如果索引是建立在多个列上, 只有在它的第一个列(leading column)被where子句引用时,优化器才会选择使用该索引. 这也是一条简单而重要的规则，当仅引用索引的第二个列时,优化器使用了全表扫描而忽略了索引。

（28） 用UNION-ALL 替换UNION ( 如果有可能的话)：

当SQL 语句需要UNION两个查询结果集合时,这两个结果集合会以UNION-ALL的方式被合并, 然后在输出最终结果前进行排序. 如果用UNION ALL替代UNION, 这样排序就不是必要了. 效率就会因此得到提高. 需要注意的是，UNION ALL 将重复输出两个结果集合中相同记录. 因此各位还是要从业务需求分析使用UNION ALL的可行性. UNION 将对结果集合排序,这个操作会使用到SORT_AREA_SIZE这块内存. 对于这块内存的优化也是相当重要的. 下面的SQL可以用来查询排序的消耗量    
低效：     
SELECT  ACCT_NUM, BALANCE_AMT     
FROM  DEBIT_TRANSACTIONS     
WHERE TRAN_DATE = '31-DEC-95'     
UNION     
SELECT ACCT_NUM, BALANCE_AMT     
FROM DEBIT_TRANSACTIONS     
WHERE TRAN_DATE = '31-DEC-95'     
高效:     
SELECT ACCT_NUM, BALANCE_AMT     
FROM DEBIT_TRANSACTIONS     
WHERE TRAN_DATE = '31-DEC-95'     
UNION ALL     
SELECT ACCT_NUM, BALANCE_AMT     
FROM DEBIT_TRANSACTIONS     
WHERE TRAN_DATE = '31-DEC-95'

（29） 用WHERE替代ORDER BY：

ORDER BY 子句只在两种严格的条件下使用索引.    
ORDER BY中所有的列必须包含在相同的索引中并保持在索引中的排列顺序.     
ORDER BY中所有的列必须定义为非空.     
WHERE子句使用的索引和ORDER BY子句中所使用的索引不能并列.     
例如:     
表DEPT包含以下列:     
DEPT_CODE PK NOT NULL     
DEPT_DESC NOT NULL     
DEPT_TYPE NULL     
低效: (索引不被使用)     
SELECT DEPT_CODE FROM  DEPT  ORDER BY  DEPT_TYPE     
高效: (使用索引)     
SELECT DEPT_CODE  FROM  DEPT  WHERE  DEPT_TYPE > 0

（30） 避免改变索引列的类型:

当比较不同数据类型的数据时, ORACLE自动对列进行简单的类型转换.    
假设 EMPNO是一个数值类型的索引列.     
SELECT …  FROM EMP  WHERE  EMPNO = ‘123'     
实际上,经过ORACLE类型转换, 语句转化为:     
SELECT …  FROM EMP  WHERE  EMPNO = TO_NUMBER(‘123')     
幸运的是,类型转换没有发生在索引列上,索引的用途没有被改变.     
现在,假设EMP_TYPE是一个字符类型的索引列.     
SELECT …  FROM EMP  WHERE EMP_TYPE = 123     
这个语句被ORACLE转换为:     
SELECT …  FROM EMP  WHERE TO_NUMBER(EMP_TYPE)=123     
因为内部发生的类型转换, 这个索引将不会被用到! 为了避免ORACLE对你的SQL进行隐式的类型转换, 最好把类型转换用显式表现出来. 注意当字符和数值比较时, ORACLE会优先转换数值类型到字符类型。

分析select   emp_name   form   employee   where   salary   >   3000   在此语句中若salary是Float类型的，则优化器对其进行优化为Convert(float,3000)，因为3000是个整数，我们应在编程时使用3000.0而不要等运行时让DBMS进行转化。同样字符和整型数据的转换。


（31） 需要当心的WHERE子句:

某些SELECT 语句中的WHERE子句不使用索引. 这里有一些例子.    
在下面的例子里, (1)‘!=' 将不使用索引. 记住, 索引只能告诉你什么存在于表中, 而不能告诉你什么不存在于表中. (2) ‘ ¦ ¦'是字符连接函数. 就象其他函数那样, 停用了索引. (3) ‘+'是数学函数. 就象其他数学函数那样, 停用了索引. (4)相同的索引列不能互相比较,这将会启用全表扫描.

（32） a. 如果检索数据量超过30%的表中记录数.使用索引将没有显著的效率提高. b. 在特定情况下, 使用索引也许会比全表扫描慢, 但这是同一个数量级上的区别. 而通常情况下,使用索引比全表扫描要块几倍乃至几千倍!

（33） 避免使用耗费资源的操作：

带有DISTINCT,UNION,MINUS,INTERSECT,ORDER BY的SQL语句会启动SQL引擎执行耗费资源的排序(SORT)功能. DISTINCT需要一次排序操作, 而其他的至少需要执行两次排序. 通常, 带有UNION, MINUS , INTERSECT的SQL语句都可以用其他方式重写. 如果你的数据库的SORT_AREA_SIZE调配得好, 使用UNION , MINUS, INTERSECT也是可以考虑的, 毕竟它们的可读性很强。

（34） 优化GROUP BY：

提高GROUP BY 语句的效率, 可以通过将不需要的记录在GROUP BY 之前过滤掉.下面两个查询返回相同结果但第二个明显就快了许多.    
低效:     
SELECT JOB , AVG(SAL)     
FROM EMP     
GROUP by JOB     
HAVING JOB = ‘PRESIDENT'     
OR JOB = ‘MANAGER'     
高效:     
SELECT JOB , AVG(SAL)     
FROM EMP     
WHERE JOB = ‘PRESIDENT'     
OR JOB = ‘MANAGER'     
GROUP by JOB]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>720</wp:post_id>
		<wp:post_date>2012-11-19 20:58:50</wp:post_date>
		<wp:post_date_gmt>2012-11-19 12:58:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%95%b0%e6%8d%ae%e5%ba%93%e6%80%a7%e8%83%bd%e4%bc%98%e5%8c%96%e4%b9%8bsql%e8%af%ad%e5%8f%a5%e4%bc%98%e5%8c%961</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="db"><![CDATA[DB]]></category>
		<category domain="post_tag" nicename="db-2"><![CDATA[db]]></category>
		<category domain="post_tag" nicename="%e4%bc%98%e5%8c%96"><![CDATA[优化]]></category>
		<category domain="post_tag" nicename="%e6%80%a7%e8%83%bd"><![CDATA[性能]]></category>
		<category domain="post_tag" nicename="%e6%95%b0%e6%8d%ae%e5%ba%93"><![CDATA[数据库]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>了解 JavaScript 应用程序中的内存泄漏</title>
		<link></link>
		<pubDate>Fri, 21 Dec 2012 15:50:14 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=723</guid>
		<description></description>
		<content:encoded><![CDATA[简介： 垃圾回收解放了我们，它让我们可将精力集中在应用程序逻辑（而不是内存管理）上。但是，垃圾收集并不神奇。了解它的工作原理，以及如何使它保留本应在很久以前释放的内存，就可以实现更快更可靠的应用程序。在本文中，学习一种定位 JavaScript 应用程序中内存泄漏的系统方法、几种常见的泄漏模式，以及解决这些泄漏的适当方法。

<a name="N1005D"></a>简介

当处理 JavaScript 这样的脚本语言时，很容易忘记每个对象、类、字符串、数字和方法都需要分配和保留内存。语言和运行时的垃圾回收器隐藏了内存分配和释放的具体细节。

许多功能无需考虑内存管理即可实现，但却忽略了它可能在程序中带来重大的问题。不当清理的对象可能会存在比预期要长得多的时间。这些对象继续响应事件和消耗资源。它们可强制浏览器从一个虚拟磁盘驱动器分配内存页，这显著影响了计算机的速度（在极端的情形中，会导致浏览器崩溃）。

内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。在最近几年中，许多浏览器都改善了在页面加载过程中从 JavaScript 回收内存的能力。但是，并不是所有浏览器都具有相同的运行方式。Firefox 和旧版的 Internet Explorer 都存在过内存泄漏，而且内存泄露一直持续到浏览器关闭。

过去导致内存泄漏的许多经典模式在现代浏览器中以不再导致泄漏内存。但是，如今有一种不同的趋势影响着内存泄漏。许多人正设计用于在没有硬页面刷新的单页中运行的 Web 应用程序。在那样的单页中，从应用程序的一个状态到另一个状态时，很容易保留不再需要或不相关的内存。

在本文中，了解对象的基本生命周期，垃圾回收如何确定一个对象是否被释放，以及如何评估潜在的泄漏行为。另外，学习如何使用 Google Chrome 中的 Heap Profiler 来诊断内存问题。一些示例展示了如何解决闭包、控制台日志和循环带来的内存泄漏。

您可 <a href="http://www.ibm.com/developerworks/cn/web/wa-jsmemory/index.html#download">下载</a> 本文中使用的示例的源代码。

<a name="N10079"></a>对象生命周期

要了解如何预防内存泄漏，需要了解对象的基本生命周期。当创建一个对象时，JavaScript 会自动为该对象分配适当的内存。从这一刻起，垃圾回收器就会不断对该对象进行评估，以查看它是否仍是有效的对象。

垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。图 1 显示了垃圾回收器回收内存的一个示例。
<a name="fig1"></a><strong>图 1. 通过垃圾收集回收内存</strong>
<img src="http://www.ibm.com/developerworks/cn/web/wa-jsmemory/fig01.jpg" alt="展示与各个对象关联的 root 节点的 4 个步骤。" width="427" height="250" />

看到该系统的实际应用会很有帮助，但提供此功能的工具很有限。了解您的 JavaScript 应用程序占用了多少内存的一种方式是使用系统工具查看浏览器的内存分配。有多个工具可为您提供当前的使用，并描绘一个进程的内存使用量随时间变化的趋势图。

例如，如果在 Mac OSX 上安装了 XCode，您可以启动 Instruments 应用程序，并将它的活动监视器工具附加到您的浏览器上，以进行实时分析。在 Windows® 上，您可以使用任务管理器。如果在您使用应用程序的过程中，发现内存使用量随时间变化的曲线稳步上升，那么您就知道存在内存泄漏。

观察浏览器的内存占用只能非常粗略地显示 JavaScript 应用程序的实际内存使用。浏览器数据不会告诉您哪些对象发生了泄漏，也无法保证数据与您应用程序的真正内存占用确实匹配。而且，由于一些浏览器中存在实现问题，DOM 元素（或备用的应用程序级对象）可能不会在页面中销毁相应元素时释放。视频标记尤为如此，视频标记需要浏览器实现一种更加精细的基础架构。

人们曾多次尝试在客户端 JavaScript 库中添加对内存分配的跟踪。不幸的是，所有尝试都不是特别可靠。例如，流行的 stats.js 包由于不准确性而无法支持。一般而言，尝试从客户端维护或确定此信息存在一定的问题，是因为它会在应用程序中引入开销且无法可靠地终止。

理想的解决方案是浏览器供应商在浏览器中提供一组工具，帮助您监视内存使用，识别泄漏的对象，以及确定为什么一个特殊对象仍标记为保留。

目前，只有 Google Chrome（提供了 Heap Profile）实现了一个内存管理工具作为它的开发人员工具。我在本文中使用 Heap Profiler 测试和演示 JavaScript 运行时如何处理内存。

<a name="ahs"></a>分析堆快照

在创建内存泄漏之前，请查看一次适当收集内存的简单交互。首先创建一个包含两个按钮的简单 HTML 页面，如清单 1 所示。
<a name="list1"></a><strong>清单 1. index.html</strong>
<table summary="这一表格包含代码清单。" width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>&lt;html&gt;
&lt;head&gt;
    &lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot;
type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;button id=&quot;start_button&quot;&gt;Start&lt;/button&gt;
    &lt;button id=&quot;destroy_button&quot;&gt;Destroy&lt;/button&gt;
    &lt;script src=&quot;assets/scripts/leaker.js&quot; type=&quot;text/javascript&quot;
charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;assets/scripts/main.js&quot; type=&quot;text/javascript&quot;
charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

包含 jQuery 是为了确保一种管理事件绑定的简单语法适合不同的浏览器，而且严格遵守最常见的开发实践。为 <code>leaker</code> 类和主要 JavaScript 方法添加脚本标记。在开发环境中，将 JavaScript 文件合并到单个文件中通常是一种更好的做法。出于本示例的用途，将逻辑放在独立的文件中更容易。

您可以过滤 Heap Profiler 来仅显示特殊类的实例。为了利用该功能，创建一个新类来封装泄漏对象的行为，而且这个类很容易在 Heap Profiler 中找到，如清单 2 所示。
<a name="list2"></a><strong>清单 2. assets/scripts/leaker.js</strong>
<table summary="这一表格包含代码清单。" width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>var Leaker = function(){};
Leaker.prototype = {
    init:function(){

    }
};</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

绑定 Start 按钮以初始化 <code>Leaker</code> 对象，并将它分配给全局命名空间中的一个变量。还需要将 Destroy 按钮绑定到一个应清理 <code>Leaker</code>对象的方法，并让它为垃圾收集做好准备，如清单 3 所示。
<a name="list3"></a><strong>清单 3. assets/scripts/main.js</strong>
<table summary="这一表格包含代码清单。" width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>$(&quot;#start_button&quot;).click(function(){
    if(leak !== null || leak !== undefined){
        return;
    }
  leak = new Leaker();
  leak.init();
});

$(&quot;#destroy_button&quot;).click(function(){
    leak = null;
});

var leak = new Leaker();</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

现在，您已准备好创建一个对象，在内存中查看它，然后释放它。
<ol>
	<li>在 Chrome 中加载索引页面。因为您是直接从 Google 加载 jQuery，所以需要连接互联网来运行该样例。</li>
	<li>打开开发人员工具，方法是打开 View 菜单并选择 Develop 子菜单。选择 <strong>Developer Tools</strong> 命令。</li>
	<li>转到 <strong>Profiles</strong> 选项卡并获取一个堆快照，如图 2 所示。<a name="fig2"></a><strong>图 2. Profiles 选项卡</strong>
<img src="http://www.ibm.com/developerworks/cn/web/wa-jsmemory/fig02.jpg" alt="Google Chrome 上的 profiles 选项卡的快照。" width="428" height="251" /></li>
	<li>将注意力返回到 Web 上，选择 <strong>Start</strong>。</li>
	<li>获取另一个堆快照。</li>
	<li>过滤第一个快照，查找 <code>Leaker</code> 类的实例，找不到任何实例。切换到第二个快照，您应该能找到一个实例，如图 3 所示。<a name="fig3"></a><strong>图 3. 快照实例</strong>
<img src="http://www.ibm.com/developerworks/cn/web/wa-jsmemory/fig03.jpg" alt="Heap Profiler 过滤器页面的快照" width="428" height="192" /></li>
	<li>将注意力返回到 Web 上，选择 <strong>Destroy</strong>。</li>
	<li>获取第三个堆快照。</li>
	<li>过滤第三个快照，查找 <code>Leaker</code> 类的实例，找不到任何实例。在加载第三个快照时，也可将分析模式从 Summary 切换到 Comparison，并对比第三个和第二个快照。您会看到偏移值 -1（在两次快照之间释放了 <code>Leaker</code> 对象的一个实例）。</li>
</ol>
万岁！垃圾回收有效的。现在是时候破坏它了。

<a name="N1013E"></a>内存泄漏 1：闭包

一种预防一个对象被垃圾回收的简单方式是设置一个在回调中引用该对象的间隔或超时。要查看实际应用，可更新 leaker.js 类，如清单 4 所示。
<a name="list4"></a><strong>清单 4. assets/scripts/leaker.js</strong>
<table summary="这一表格包含代码清单。" width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>var Leaker = function(){};

Leaker.prototype = {
    init:function(){
        this._interval = null;
        this.start();
    },

    start: function(){
        var self = this;
        this._interval = setInterval(function(){
            self.onInterval();
        }, 100);
    },

    destroy: function(){
        if(this._interval !== null){
            clearInterval(this._interval);
        }
    },

    onInterval: function(){
        console.log(&quot;Interval&quot;);
    }
};</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

现在，当重复 <a href="http://www.ibm.com/developerworks/cn/web/wa-jsmemory/index.html#ahs">上一节</a> 中的第 1-9 步时，您应在第三个快照中看到，<code>Leaker</code> 对象被持久化，并且该间隔会永远继续运行。那么发生了什么？在一个闭包中引用的任何局部变量都会被该闭包保留，只要该闭包存在就永远保留。要确保对 <code>setInterval</code> 方法的回调在访问 Leaker 实例的范围时执行，需要将 <code>this</code> 变量分配给局部变量 <code>self</code>，这个变量用于从闭包内触发 <code>onInterval</code>。当 <code>onInterval</code> 触发时，它就能够访问 <code>Leaker</code> 对象中的任何实例变量（包括它自身）。但是，只要事件侦听器存在，<code>Leaker</code> 对象就不会被垃圾回收。

要解决此问题，可在清空所存储的 <code>leaker</code> 对象引用之前，触发添加到该对象的 <code>destroy</code> 方法，方法是更新 Destroy 按钮的单击处理程序，如清单 5 所示。
<a name="list5"></a><strong>清单 5. assets/scripts/main.js</strong>
<table summary="这一表格包含代码清单。" width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>$(&quot;#destroy_button&quot;).click(function(){
    leak.destroy();
    leak = null;
});</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

<a href="http://www.ibm.com/developerworks/cn/web/wa-jsmemory/index.html#ibm-pcon">回页首</a>

<a name="N1018B"></a>销毁对象和对象所有权

一种不错的做法是，创建一个标准方法来负责让一个对象有资格被垃圾回收。destroy 功能的主要用途是，集中清理该对象完成的具有以下后果的操作的职责：
<ul>
	<li>阻止它的引用计数下降到 0（例如，删除存在问题的事件侦听器和回调，并从任何服务取消注册）。</li>
	<li>使用不必要的 CPU 周期，比如间隔或动画。</li>
</ul>
<code>destroy</code> 方法常常是清理一个对象的必要步骤，但在大多数情况下它还不够。在理论上，在销毁相关实例后，保留对已销毁对象的引用的其他对象可调用自身之上的方法。因为这种情形可能会产生不可预测的结果，所以仅在对象即将无用时调用 destroy 方法，这至关重要。

一般而言，destroy 方法最佳使用是在一个对象有一个明确的所有者来负责它的生命周期时。此情形常常存在于分层系统中，比如 MVC 框架中的视图或控制器，或者一个画布呈现系统的场景图。

<a name="N101A6"></a>内存泄漏 2：控制台日志

一种将对象保留在内存中的不太明显的方式是将它记录到控制台中。清单 6 更新了 <code>Leaker</code> 类，显示了此方式的一个示例。
<a name="list6"></a><strong>清单 6. assets/scripts/leaker.js</strong>
<table summary="这一表格包含代码清单。" width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>var Leaker = function(){};

Leaker.prototype = {
    init:function(){
        console.log(&quot;Leaking an object: %o&quot;, this);
    },

    destroy: function(){

    }
};</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

可采取以下步骤来演示控制台的影响。
<ol>
	<li>登录到索引页面。</li>
	<li>单击 <strong>Start</strong>。</li>
	<li>转到控制台并确认 Leaking 对象已被跟踪。</li>
	<li>单击 <strong>Destroy</strong>。</li>
	<li>回到控制台并键入 <code>leak</code>，以记录全局变量当前的内容。此刻该值应为空。</li>
	<li>获取另一个堆快照并过滤 Leaker 对象。您应留下一个 <code>Leaker</code> 对象。</li>
	<li>回到控制台并清除它。</li>
	<li>创建另一个堆配置文件。在清理控制台后，保留 leaker 的配置文件应已清除。</li>
</ol>
控制台日志记录对总体内存配置文件的影响可能是许多开发人员都未想到的极其重大的问题。记录错误的对象可以将大量数据保留在内存中。注意，这也适用于：
<ul>
	<li>在用户键入 JavaScript 时，在控制台中的一个交互式会话期间记录的对象。</li>
	<li>由 <code>console.log</code> 和 <code>console.dir</code> 方法记录的对象。</li>
</ul>
<a name="N10200"></a>内存泄漏 3：循环

在两个对象彼此引用且彼此保留时，就会产生一个循环，如图 4 所示。
<a name="fig4"></a><strong>图 4. 创建一个循环的引用</strong>
<img src="http://www.ibm.com/developerworks/cn/web/wa-jsmemory/fig04.jpg" alt="该图中的一个蓝色 root 节点连接到两个绿色框，显示了它们之间的一个连接" width="427" height="136" />

清单 7 显示了一个简单的代码示例。
<a name="list7"></a><strong>清单 7. assets/scripts/leaker.js</strong>
<table summary="这一表格包含代码清单。" width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>var Leaker = function(){};

Leaker.prototype = {
    init:function(name, parent){
        this._name = name;
        this._parent = parent;
        this._child = null;
        this.createChildren();
    },

    createChildren:function(){
        if(this._parent !== null){
            // Only create a child if this is the root
            return;
        }
        this._child = new Leaker();
        this._child.init(&quot;leaker 2&quot;, this);
    },

    destroy: function(){

    }
};</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

Root 对象的实例化可以修改，如清单 8 所示。
<a name="list8"></a><strong>清单 8. assets/scripts/main.js</strong>
<table summary="这一表格包含代码清单。" width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>leak = new Leaker();
leak.init(&quot;leaker 1&quot;, null);</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

如果在创建和销毁对象后执行一次堆分析，您应该会看到垃圾收集器检测到了这个循环引用，并在您选择 Destroy 按钮时释放了内存。

但是，如果引入了第三个保留该子对象的对象，该循环会导致内存泄漏。例如，创建一个 <code>registry</code> 对象，如清单 9 所示。
<a name="list9"></a><strong>清单 9. assets/scripts/registry.js</strong>
<table summary="这一表格包含代码清单。" width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>var Registry = function(){};

Registry.prototype = {
    init:function(){
        this._subscribers = [];
    },

    add:function(subscriber){
        if(this._subscribers.indexOf(subscriber) &gt;= 0){
            // Already registered so bail out
            return;
        }
        this._subscribers.push(subscriber);
    },

    remove:function(subscriber){
        if(this._subscribers.indexOf(subscriber) &lt; 0){
            // Not currently registered so bail out
            return;
        }
              this._subscribers.splice(
                  this._subscribers.indexOf(subscriber), 1
              );
    }
};</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

<code>registry</code> 类是让其他对象向它注册，然后从注册表中删除自身的对象的简单示例。尽管这个特殊的类与注册表毫无关联，但这是事件调度程序和通知系统中的一种常见模式。

将该类导入 index.html 页面中，放在 leaker.js 之前，如清单 10 所示。
<a name="list10"></a><strong>清单 10. index.html</strong>
<table summary="这一表格包含代码清单。" width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>&lt;script src=&quot;assets/scripts/registry.js&quot; type=&quot;text/javascript&quot;
charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

更新 <code>Leaker</code> 对象，以向注册表对象注册该对象本身（可能用于有关一些未实现事件的通知）。这创建了一个来自要保留的 leaker 子对象的 root 节点备用路径，但由于该循环，父对象也将保留，如清单 11 所示。
<a name="list11"></a><strong>清单 11. assets/scripts/leaker.js</strong>
<table summary="这一表格包含代码清单。" width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>var Leaker = function(){};
Leaker.prototype = {

    init:function(name, parent, registry){
        this._name = name;
        this._registry = registry;
        this._parent = parent;
        this._child = null;
        this.createChildren();
        this.registerCallback();
    },

    createChildren:function(){
        if(this._parent !== null){
            // Only create child if this is the root
            return;
        }
        this._child = new Leaker();
        this._child.init(&quot;leaker 2&quot;, this, this._registry);
    },

    registerCallback:function(){
        this._registry.add(this);
    },

    destroy: function(){
        this._registry.remove(this);
    }
};</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

最后，更新 main.js 以设置注册表，并将对注册表的一个引用传递给 <code>leaker</code> 父对象，如清单 12 所示。
<a name="list12"></a><strong>清单 12. assets/scripts/main.js</strong>
<table summary="这一表格包含代码清单。" width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>	  $(&quot;#start_button&quot;).click(function(){
  var leakExists = !(
	      window[&quot;leak&quot;] === null || window[&quot;leak&quot;] === undefined
	  );
  if(leakExists){
      return;
  }
  leak = new Leaker();
  leak.init(&quot;leaker 1&quot;, null, registry);
});

$(&quot;#destroy_button&quot;).click(function(){
    leak.destroy();
    leak = null;
});

registry = new Registry();
registry.init();</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

现在，当执行堆分析时，您应看到每次选择 Start 按钮时，会创建并保留 <code>Leaker</code> 对象的两个新实例。图 5 显示了对象引用的流程。
<a name="fig5"></a><strong>图 5. 由于保留引用导致的内存泄漏</strong>
<img src="http://www.ibm.com/developerworks/cn/web/wa-jsmemory/fig05.jpg" alt="3 个方框显示了 root 节点与父和子对象之间的 3 个不同路径" width="427" height="250" />

从表面上看，它像一个不自然的示例，但它实际上非常常见。更加经典的面向对象框架中的事件侦听器常常遵循类似图 5 的模式。这种类型的模式也可能与闭包和控制台日志导致的问题相关联。

尽管有多种方式来解决此类问题，但在此情况下，最简单的方式是更新 <code>Leaker</code> 类，以在销毁它时销毁它的子对象。对于本示例，更新 <code>destroy</code> 方法（如清单 13 所示）就足够了。
<a name="list13"></a><strong>清单 13. assets/scripts/leaker.js</strong>
<table summary="这一表格包含代码清单。" width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<pre>destroy: function(){
    if(this._child !== null){
        this._child.destroy();
    }
    this._registry.remove(this);
}</pre>
</td>
</tr>
</tbody>
</table>
&nbsp;

有时，两个没有足够紧密关系的对象之间也会存在循环，其中一个对象管理另一个对象的生命周期。在这样的情况下，在这两个对象之间建立关系的对象应负责在自己被销毁时中断循环。

<a name="N102A3"></a>结束语

即使 JavaScript 已被垃圾回收，仍然会有许多方式会将不需要的对象保留在内存中。目前大部分浏览器都已改进了内存清理功能，但评估您应用程序内存堆的工具仍然有限（除了使用 Google Chrome）。通过从简单的测试案例开始，很容易评估潜在的泄漏行为并确定是否存在泄漏。

不经过测试，就不可能准确度量内存使用。很容易使循环引用占据对象曲线图中的大部分区域。Chrome 的 Heap Profiler 是一个诊断内存问题的宝贵工具，在开发时定期使用它也是一个不错的选择。在预测对象曲线图中要释放的具体资源时请设定具体的预期，然后进行验证。任何时候当您看到不想要的结果时，请仔细调查。

在创建对象时要计划该对象的清理工作，这比在以后将一个清理阶段移植到应用程序中要容易得多。常常要计划删除事件侦听器，并停止您创建的间隔。如果认识到了您应用程序中的内存使用，您将得到更可靠且性能更高的应用程序。

&nbsp;

下载
<table summary="这一表格包含本文档的下载资源。" width="100%" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<th scope="col">描述</th>
<th scope="col">名字</th>
<th scope="col">大小</th>
<th scope="col">下载方法</th>
</tr>
<tr>
<td scope="row">文章源代码</td>
<td nowrap="nowrap">JavascriptMemoryManagementSource.zip</td>
<td nowrap="nowrap">4KB</td>
<td nowrap="nowrap"><a href="http://www.ibm.com/developerworks/apps/download/index.jsp?contentid=851628&amp;filename=JavascriptMemoryManagementSource.zip&amp;method=http&amp;locale=zh_CN">HTTP</a></td>
</tr>
</tbody>
</table>
<a href="http://www.ibm.com/developerworks/cn/whichmethod.html">关于下载方法的信息</a>

&nbsp;

<a name="resources"></a>参考资料

<strong>学习</strong>
<ul>
	<li><a href="https://developers.google.com/chrome-developer-tools/docs/heap-profiling">Chrome Developer Tools: Heap Profiling</a>：借助此教程学习如何使用 Heap Profiler 揭示您的应用程序中的内存泄漏。</li>
	<li>“<a href="http://www.ibm.com/developerworks/web/library/wa-memleak/">JavaScript 中的内存泄漏模式</a>”（developerWorks，2007 年 4 月）：了解 JavaScript 中的循环引用的基本知识，以及为什么它们会在某些浏览器中引发问题。</li>
	<li>“<a href="http://gent.ilcore.com/2011/08/finding-memory-leaks.html">查找内存泄漏</a>”：了解即使在不了解源代码的情况下也可以轻松地诊断泄漏的方式。</li>
	<li>“<a href="http://nesj.net/blog/2012/04/javascript-memory-leaks/">JavaScript 内存泄漏</a>”：了解有关内存泄漏的原因和检测的更多信息。</li>
	<li>“<a href="http://www.ibm.com/developerworks/web/library/wa-jsdom/">avaScript and the Document Object Model</a>”（developerWorks，2002 年 7 月）：了解 JavaScript 的 DOM 方法，以及如何构建一个可以让用户添加备注和和编辑备注内容的网页。</li>
	<li><a href="https://developer.mozilla.org/en/A_re-introduction_to_JavaScript">A re-introduction to JavaScript</a>：更详细地了解 JavaScript 及其特性。</li>
	<li><a href="http://www.ibm.com/developerworks/cn/web/">developerWorks Web 开发专区</a>：查找涉及各种基于 Web 的解决方案的文章。访问 <a href="http://www.ibm.com/developerworks/cn/views/web/libraryview.jsp">Web 开发技术库</a>，查阅丰富的技术文章，以及技巧、教程、标准和 IBM 红皮书。</li>
	<li><a href="https://www.ibm.com/developerworks/cn/offers/techbriefings/">developerWorks 技术活动和网络广播</a>：随时关注这些会议中的技术。</li>
	<li><a href="http://www.ibm.com/developerworks/offers/lp/demos/">developerWorks 点播演示</a>：观看丰富的演示，包括面向初学者的产品安装和设置，以及为经验丰富的开发人员提供的高级功能。</li>
	<li><a href="http://twitter.com/developerworks/">Twitter 上的 developerWorks</a>：立即加入以关注 developerWorks 推文。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>723</wp:post_id>
		<wp:post_date>2012-12-21 23:50:14</wp:post_date>
		<wp:post_date_gmt>2012-12-21 15:50:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%ba%86%e8%a7%a3-javascript-%e5%ba%94%e7%94%a8%e7%a8%8b%e5%ba%8f%e4%b8%ad%e7%9a%84%e5%86%85%e5%ad%98%e6%b3%84%e6%bc%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coderfarmer"><![CDATA[CoderFarmer]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="js"><![CDATA[js]]></category>
		<category domain="post_tag" nicename="leaker"><![CDATA[leaker]]></category>
		<category domain="post_tag" nicename="memory"><![CDATA[memory]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Atomic Increment in Rails</title>
		<link></link>
		<pubDate>Sun, 06 Jan 2013 04:15:47 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=728</guid>
		<description></description>
		<content:encoded><![CDATA[Many times you are put in a situation that you need to increment an ActiveRecord attribute, but you need to make it Atomic to avoid any concurrency problems.
Using the ActiveRecord#increment! is not the answer.
<pre>  post.increment! :posts_count</pre>
the previous code results the following SQL:
<pre>  UPDATE &#039;posts&#039; SET &#039;posts_count&#039; = 1 WHERE &#039;id&#039; = 38</pre>
This for sure is not Atomic since there is a read operation for the attribute then incrementing it with ruby then update that field with the new value.
The right answer is "increment_counter" . it is a class method that makes a real atomic update .</pre>
<pre>  Post.increment_counter :posts_count , 38</pre>
take alook at the result SQL:
<pre>  UPDATE &#039;posts&#039; SET &#039;posts_count&#039; = COALESCE(&#039;posts_count&#039;, 0) + 1 WHERE ( &#039;id&#039;= 38)</pre>

Clearly it is Atomic and no threat of a concurrency(并发) problem.

A side note COALESCE() function is used to return the first not-Null value from the passed array. it is used here to handle the case that this atribute is Null as a Zero.

If you need to increment multiple attributes or even increment an attribute with a value other than 1. A very helpful class method is &quot;update_counters&quot;</pre>
<pre>  Post.update_counters 38 , :posts_count =&gt; 2 , :update_calls_count =&gt; 1</pre>
The result SQL is
<pre>  UPDATE &#039;posts&#039; SET &#039;posts_count&#039; = COALESCE(&#039;posts_count&#039;, 0) + 2, &#039;update_calls_count&#039; = COALESCE(&#039;update_calls_count&#039;, 0) + 1 WHERE (&#039;id&#039; = 38)</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>728</wp:post_id>
		<wp:post_date>2013-01-06 12:15:47</wp:post_date>
		<wp:post_date_gmt>2013-01-06 04:15:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>atomic-increment-in-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="atomic%ef%bc%8cincrement%ef%bc%8crails"><![CDATA[Atomic，Increment，Rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="update_counters"><![CDATA[update_counters]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用Rcov计算Rspec在Rails3项目中的测试覆盖率</title>
		<link></link>
		<pubDate>Wed, 20 Feb 2013 07:45:55 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=735</guid>
		<description></description>
		<content:encoded><![CDATA[在计算机的世界里有很多这样的事物，咋一接触它们觉得很生涩，太难用，但如果坚持下来，稍稍领会其精神，就会发现这个东西实在是太好了。在我看来，测试算是其中之一吧。从真正写测试到现在已经有一段时间了，从开始觉得写它是费力不讨好的观念也逐步转变成没有它心里就不踏实的状态。前两天在看文章时发现“测试覆盖率”这个词语，也许它存在很久了，但对于我来说还是比较新鲜的东西，赶紧拿来尝试一番，顺便也对自己的测试代码进行一番评测。下面就简单说一下我的经历

因为我的Ruby版本是1.8.7, 所以采用了Rcov用作测试覆盖率的工具(貌似还有一个选择simple_cov,但是针对ruby1.9开发的, 这里就没采用)。因为我的测试框架是采用的Rspec, 而Rspec又内在集成了Rcov的接口, 所以在使用起来非常简单。在Gemfile中加入 gem 'rcov' 后，依次执行以下命令

bundle install
rake spec:rcov

此时你的测试代码会挨个执行一遍，测试完成后会在Rails的根目录下多出一个coverage文件夹，用浏览器打开coverage/index.html即可看到rcov生成的报告了。

此外，你可能运行时会遇到rcov没有加载到rspec_helper的情况，这篇文章提到了这个问题，可能会帮助你解决，或者升级到rspec2.4.0也能解决问题。

no such file to load -- spec_helper (LoadError)

关于测试覆盖率应该包含多个方面的概念，如业务覆盖，代码覆盖。这里所涉及覆盖率其实都是代码覆盖，即程序代码在测试时被调用执行的部分除以项目总代码的一个比例，因此100%的代码覆盖率只代表了所有的代码在测试时被执行过，并不代表代码的所有情况被执行过。比如下面例子

这段代码在测试时我只需要对这个方法进行一次调用即可达到100%的测试覆盖率，但当我调用price(10, 0)时仍然会出错，所以即使测试代码覆盖率达到100%了也不能安心睡大觉。那这个东西该在什么情况下使用呢？首先，忘掉这个东西，还是按照平时的方式写测试、写代码。待工作完成之后可以再捡起这个工具进行一番测试，检查出哪里的测试代码有死角没有测到，该修的修，该补的补。完成这些之后再忘掉这个东西，仅此而已。

http://stackoverflow.com/questions/5137650/rcov-outside-rails

http://www.ibm.com/developerworks/cn/web/wa-rails4/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>735</wp:post_id>
		<wp:post_date>2013-02-20 15:45:55</wp:post_date>
		<wp:post_date_gmt>2013-02-20 07:45:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%bf%e7%94%a8rcov%e8%ae%a1%e7%ae%97rspec%e5%9c%a8rails3%e9%a1%b9%e7%9b%ae%e4%b8%ad%e7%9a%84%e6%b5%8b%e8%af%95%e8%a6%86%e7%9b%96%e7%8e%87</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rspec"><![CDATA[RSpec]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="%e6%b5%8b%e8%af%95"><![CDATA[测试]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4ce400dd26bc4dbda0cbaafd79f3935f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0ff4a2f3ab2f24ccd35aa2c17130926c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>设计响应式网站的十个热门框架(Which Responsive Frameworks are Designers Using?)</title>
		<link></link>
		<pubDate>Thu, 21 Feb 2013 03:30:44 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=740</guid>
		<description></description>
		<content:encoded><![CDATA[All the mathematics involved in creating a responsive website design can be exhausting and time consuming, but thankfully there’s a range of responsive frameworks available that make the process quick and easy. These frameworks or boilerplates have all the complicated grids, layouts and media queries in place ready for you to add your own design and markup. Here’s a roundup of the most popular frameworks currently being used by designers.

&nbsp;
<h3>Bootstrap</h3>
<a href="http://twitter.github.com/bootstrap/index.html"><img src="http://line25.com/wp-content/uploads/2012/frameworks/1.jpg" alt="Bootstrap" /></a>

<a href="http://twitter.github.com/bootstrap/index.html">Bootstrap</a>, made by the folk from Twitter, has to be the most widely used framework. It is built with the most comprehensive list of features and can be quickly customised for each individual project.
<h3>Foundation</h3>
<a href="http://foundation.zurb.com/index.php"><img src="http://line25.com/wp-content/uploads/2012/frameworks/2.jpg" alt="Foundation" /></a>

<a href="http://foundation.zurb.com/index.php">Foundation</a> is an advanced responsive front end framework based on a flexible grid that can be customised to your exact needs. This makes it easy to develop layouts for mobile and desktop devices using the same markup.
<h3>Skeleton</h3>
<a href="http://www.getskeleton.com/"><img src="http://line25.com/wp-content/uploads/2012/frameworks/3.jpg" alt="Skeleton" /></a>

<a href="http://www.getskeleton.com/">Skeleton</a> is one of the more lightweight frameworks that’s based on a simple grid system. The Skeleton grid elegantly scales from 960px right down to tablets and mobile viewports in landscape and portrait.
<h3>Golden Grid System</h3>
<a href="http://goldengridsystem.com/"><img src="http://line25.com/wp-content/uploads/2012/frameworks/4.jpg" alt="Golden Grid System" /></a>

If you’re passionate about grids, you’ll love the <a href="http://goldengridsystem.com/">Golden Grid System</a>. It starts as a 16 column grid with neat margins and gutters, but neatly folds up as the viewport is downsized to create 8 or 4 columns layouts for tablets and mobiles.
<h3>320 and Up</h3>
<a href="http://stuffandnonsense.co.uk/projects/320andup/"><img src="http://line25.com/wp-content/uploads/2012/frameworks/5.jpg" alt="320 and Up" /></a>

Some designers prefer progressive enhancement over graceful degredation. This is where the <a href="http://stuffandnonsense.co.uk/projects/320andup/">320 and Up</a> framework comes in. It’s designed to create layouts for small screens up, rather than from the desktop down, which ensures the content comes first.
<h3>Less Framework</h3>
<a href="http://lessframework.com/"><img src="http://line25.com/wp-content/uploads/2012/frameworks/6.jpg" alt="Less Framework" /></a>

<a href="http://lessframework.com/">Less</a> is one of the classic frameworks that is based on a simple fixed width adaptive grid. It contains 4 ready made layouts and 3 typography presets to cater for desktop, tablets, mobile and landscape mobile viewports.
<h3>1140px CSS Grid System</h3>
<a href="http://cssgrid.net/"><img src="http://line25.com/wp-content/uploads/2012/frameworks/7.jpg" alt="1140px CSS Grid System" /></a>

Creating responsive designs doesn’t just mean you’re catering for smaller resolutions, it also means you can go super wide for your maximum layout and still cater for the common desktop resolutions. The <a href="http://cssgrid.net/">1140 grid</a> creates a nice screen-filling design on 1280px monitors and scales nicely for anything smaller.
<h3>Frameless</h3>
<a href="http://framelessgrid.com/"><img src="http://line25.com/wp-content/uploads/2012/frameworks/9.jpg" alt="Frameless" /></a>

<a href="http://framelessgrid.com/">Frameless</a> shouldn’t really be in this roundup, seeing as it’s neither truly responsive or an actual framework. The core idea makes it easy to imagine and build layouts for infinite viewports, with the frameless grid simply adding columns as and when they’re required.
<h3>Wirefy</h3>
<a href="http://getwirefy.com/"><img src="http://line25.com/wp-content/uploads/2012/frameworks/10.jpg" alt="Wirefy" /></a>

The idea of a responsive design doesn’t always make sense to clients, but it’s pretty time consuming building concepts to show them how it all works. Enter<a href="http://getwirefy.com/">Wirefy</a>, the responsive wireframe framework that makes it easy to mock up layouts with elements such as slideshows, galleries, menus and forms.
<h3>Gumby Framework</h3>
<a href="http://gumbyframework.com/"><img src="http://line25.com/wp-content/uploads/2012/frameworks/12.jpg" alt="Gumby Framework" /></a>

If you’re new to responsive web design, the <a href="http://gumbyframework.com/">Gumby Framework</a> might be a good place to start. It’s simple and lightweight, and unlike some of the more daunting frameworks, it actually comes with a PSD and UI Kit which makes it easy to mock up your designs the traditional way.

&nbsp;

source link: <a href="http://line25.com/articles/which-responsive-frameworks-are-designers-using">http://line25.com/articles/which-responsive-frameworks-are-designers-using</a>

translate to zh-CN: <a href="http://www.uisdc.com/which-responsive-frameworks-are-designers-using">http://www.uisdc.com/which-responsive-frameworks-are-designers-using</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>740</wp:post_id>
		<wp:post_date>2013-02-21 11:30:44</wp:post_date>
		<wp:post_date_gmt>2013-02-21 03:30:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%ae%be%e8%ae%a1%e5%93%8d%e5%ba%94%e5%bc%8f%e7%bd%91%e7%ab%99%e7%9a%84%e5%8d%81%e4%b8%aa%e7%83%ad%e9%97%a8%e6%a1%86%e6%9e%b6which-responsive-frameworks-are-designers-using</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="frameworks"><![CDATA[frameworks]]></category>
		<category domain="post_tag" nicename="responsive"><![CDATA[responsive]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Web应用的缓存设计模式 -- by robbin</title>
		<link></link>
		<pubDate>Fri, 08 Mar 2013 06:42:08 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=743</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>ORM缓存引言</h2>

<p>从10年前的2003年开始，在Web应用领域，ORM(对象-关系映射)框架就开始逐渐普及，并且流行开来，其中最广为人知的就是Java的开源ORM框架Hibernate，后来Hibernate也成为了EJB3的实现框架；2005年以后，ORM开始普及到其他编程语言领域，其中最有名气的是Ruby on rails框架的ORM － ActiveRecord。如今各种开源框架的ORM，乃至ODM(对象-文档关系映射，用在访问NoSQLDB)层出不穷，功能都十分强大，也很普及。</p>

<p>然而围绕ORM的性能问题，也一直有很多批评的声音。其实ORM的架构对插入缓存技术是非常容易的，我做的很多项目和产品，但凡使用ORM，缓存都是标配，性能都非常好。而且我发现业界使用ORM的案例都忽视了缓存的运用，或者说没有意识到ORM缓存可以带来巨大的性能提升。</p>

<h2>ORM缓存应用案例</h2>

<p>我们去年有一个老产品重写的项目，这个产品有超过10年历史了，数据库的数据量很大，多个表都是上千万条记录，最大的表记录达到了9000万条，Web访问的请求数每天有300万左右。</p>

<p>老产品采用了传统的解决性能问题的方案：Web层采用了动态页面静态化技术，超过一定时间的文章生成静态HTML文件；对数据库进行分库分表，按年拆表。动态页面静态化和分库分表是应对大访问量和大数据量的常规手段，本身也有效。但它的缺点也很多，比方说增加了代码复杂度和维护难度，跨库运算的困难等等，这个产品的代码维护历来非常困难，导致bug很多。</p>

<p>进行产品重写的时候，我们放弃了动态页面静态化，采用了纯动态网页；放弃了分库分表，直接操作千万级，乃至近亿条记录的大表进行SQL查询；也没有采取读写分离技术，全部查询都是在单台主数据库上进行；数据库访问全部使用ActiveRecord，进行了大量的ORM缓存。上线以后的效果非常好：单台MySQL数据库服务器CPU的IO Wait低于5%；用单台1U服务器2颗4核至强CPU已经可以轻松支持每天350万动态请求量；最重要的是，插入缓存并不需要代码增加多少复杂度，可维护性非常好。</p>

<p>总之，采用ORM缓存是Web应用提升性能一种有效的思路，这种思路和传统的提升性能的解决方案有很大的不同，但它在很多应用场景(包括高度动态化的SNS类型应用)非常有效，而且不会显著增加代码复杂度，所以这也是我自己一直偏爱的方式。因此我一直很想写篇文章，结合示例代码介绍ORM缓存的编程技巧。</p>

<p>今年春节前后，我开发自己的个人网站项目，有意识的大量使用了ORM缓存技巧。对一个没多少访问量的个人站点来说，有些过度设计了，但我也想借这个机会把常用的ORM缓存设计模式写成示例代码，提供给大家参考。我的个人网站源代码是开源的，托管在github上：<a href="https://github.com/robbin/robbin_site">robbin_site</a></p>

<h2>ORM缓存的基本理念</h2>

<p>我在2007年的时候写过一篇文章，分析ORM缓存的理念：<a href="http://robbinfan.com/blog/3/orm-cache">ORM对象缓存探讨</a> ，所以这篇文章不展开详谈了，总结来说，ORM缓存的基本理念是：</p>

<ul>
<li>以减少数据库服务器磁盘IO为最终目的，而不是减少发送到数据库的SQL条数。实际上使用ORM，会显著增加SQL条数，有时候会成倍增加SQL。</li>
<li>数据库schema设计的取向是尽量设计 <em>细颗粒度</em> 的表，表和表之间用外键关联，颗粒度越细，缓存对象的单位越小，缓存的应用场景越广泛</li>
<li>尽量避免多表关联查询，尽量拆成多个表单独的主键查询，尽量多制造 <code>n + 1</code> 条查询，不要害怕“臭名昭著”的 <code>n + 1</code> 问题，实际上 <code>n + 1</code> 才能有效利用ORM缓存</li>
</ul>

<h2>利用表关联实现透明的对象缓存</h2>

<p>在设计数据库的schema的时候，设计多个细颗粒度的表，用外键关联起来。当通过ORM访问关联对象的时候，ORM框架会将关联对象的访问转化成用主键查询关联表，发送 <code>n + 1</code>条SQL。而基于主键的查询可以直接利用对象缓存。</p>

<p>我们自己开发了一个基于ActiveRecord封装的对象缓存框架：<a href="https://github.com/csdn-dev/second_level_cache">second_level_cache</a> ，从这个ruby插件的名称就可以看出，实现借鉴了Hibernate的二级缓存实现。这个对象缓存的配置和使用，可以看我写的<a href="http://robbinfan.com/blog/33/activerecord-object-cache">ActiveRecord对象缓存配置</a> 。</p>

<p>下面用一个实际例子来演示一下对象缓存起到的作用：访问我个人站点的首页。 这个页面的数据需要读取三张表：blogs表获取文章信息，blog_contents表获取文章内容，accounts表获取作者信息。三张表的model定义片段如下，完整代码请看<a href="https://github.com/robbin/robbin_site/tree/master/models">models</a> ：</p>

<pre><code>class Account &lt; ActiveRecord::Base
  acts_as_cached
  has_many :blogs
end

class Blog &lt; ActiveRecord::Base
  acts_as_cached
  belongs_to :blog_content, :dependent =&gt; :destroy 
  belongs_to :account, :counter_cache =&gt; true
end

class BlogContent &lt; ActiveRecord::Base
  acts_as_cached
end
</code></pre>

<p>传统的做法是发送一条三表关联的查询语句，类似这样的：</p>

<pre><code>SELECT blogs.*, blog_contents.content, account.name 
    FROM blogs 
    LEFT JOIN blog_contents ON blogs.blog_content_id = blog_contents.id 
    LEFT JOIN accounts ON blogs.account_id = account.id
</code></pre>

<p>往往单条SQL语句就搞定了，但是复杂SQL的带来的表扫描范围可能比较大，造成的数据库服务器磁盘IO会高很多，数据库实际IO负载往往无法得到有效缓解。</p>

<p>我的做法如下，完整代码请看<a href="https://github.com/robbin/robbin_site/blob/master/app/controllers/home.rb">home.rb</a> ：</p>

<pre><code>@blogs = Blog.order('id DESC').page(params[:page])
</code></pre>

<p>这是一条分页查询，实际发送的SQL如下：</p>

<pre><code>SELECT * FROM blogs ORDER BY id DESC LIMIT 20
</code></pre>

<p>转成了单表查询，磁盘IO会小很多。至于文章内容，则是通过<code>blog.content</code>的对象访问获得的，由于首页抓取20篇文章，所以实际上会多出来20条主键查询SQL访问blog_contents表。就像下面这样：</p>

<pre><code>DEBUG -  BlogContent Load (0.3ms)  SELECT `blog_contents`.* FROM `blog_contents` WHERE `blog_contents`.`id` = 29 LIMIT 1
DEBUG -  BlogContent Load (0.2ms)  SELECT `blog_contents`.* FROM `blog_contents` WHERE `blog_contents`.`id` = 28 LIMIT 1
DEBUG -  BlogContent Load (1.3ms)  SELECT `blog_contents`.* FROM `blog_contents` WHERE `blog_contents`.`id` = 27 LIMIT 1
......
DEBUG -  BlogContent Load (0.9ms)  SELECT `blog_contents`.* FROM `blog_contents` WHERE `blog_contents`.`id` = 10 LIMIT 1
</code></pre>

<p>但是主键查询SQL不会造成表的扫描，而且往往已经被数据库buffer缓存，所以基本不会发生数据库服务器的磁盘IO，因而总体的数据库IO负载会远远小于前者的多表联合查询。特别是当使用对象缓存之后，会缓存所有主键查询语句，这20条SQL语句往往并不会全部发生，特别是热点数据，缓存命中率很高：</p>

<pre><code>DEBUG -  Cache read: robbin/blog/29/1
DEBUG -  Cache read: robbin/account/1/0
DEBUG -  Cache read: robbin/blogcontent/29/0
DEBUG -  Cache read: robbin/account/1/0
DEBUG -  Cache read: robbin/blog/28/1
......
DEBUG -  Cache read: robbin/blogcontent/11/0
DEBUG -  Cache read: robbin/account/1/0
DEBUG -  Cache read: robbin/blog/10/1
DEBUG -  Cache read: robbin/blogcontent/10/0
DEBUG -  Cache read: robbin/account/1/0
</code></pre>

<p>拆分n+1条查询的方式，看起来似乎非常违反大家的直觉，但实际上这是真理，我实践经验证明：数据库服务器的瓶颈往往是磁盘IO，而不是SQL并发数量。因此 <em>拆分n+1条查询本质上是以增加n条SQL语句为代价，简化复杂SQL，换取数据库服务器磁盘IO的降低</em>  当然这样做以后，对于ORM来说，有额外的好处，就是可以高效的使用缓存了。</p>

<h2>按照column拆表实现细粒度对象缓存</h2>

<p>数据库的瓶颈往往在磁盘IO上，所以应该尽量避免对大表的扫描。传统的拆表是按照row去拆分，保持表的体积不会过大，但是缺点是造成应用代码复杂度很高；使用ORM缓存的办法，则是按照column进行拆表，原则一般是：</p>

<ul>
<li>将大字段拆分出来，放在一个单独的表里面，表只有主键和大字段，外键放在主表当中</li>
<li>将不参与where条件和统计查询的字段拆分出来，放在独立的表中，外键放在主表当中</li>
</ul>

<p><em>按照column拆表本质上是一个去关系化的过程。主表只保留参与关系运算的字段，将非关系型的字段剥离到关联表当中，关联表仅允许主键查询，以Key-Value DB的方式来访问。因此这种缓存设计模式本质上是一种SQLDB和NoSQLDB的混合架构设计</em></p>

<p>下面看一个实际的例子：文章的内容content字段是一个大字段，该字段不能放在blogs表中，否则会造成blogs表过大，表扫描造成较多的磁盘IO。我实际做法是创建blog_contents表，保存content字段，schema简化定义如下：</p>

<pre><code>CREATE TABLE `blogs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `blog_content_id` int(11) NOT NULL,
  `content_updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
);

CREATE TABLE `blog_contents` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content` mediumtext NOT NULL,
  PRIMARY KEY (`id`)
);
</code></pre>

<p>blog_contents表只有content大字段，其外键保存到主表blogs的blog_content_id字段里面。</p>

<p>model定义和相关的封装如下：</p>

<pre><code>class Blog &lt; ActiveRecord::Base
  acts_as_cached
  delegate :content, :to =&gt; :blog_content, :allow_nil =&gt; true

  def content=(value)
    self.blog_content ||= BlogContent.new
    self.blog_content.content = value
    self.content_updated_at = Time.now
  end
end

class BlogContent &lt; ActiveRecord::Base
  acts_as_cached
  validates :content, :presence =&gt; true
end    
</code></pre>

<p>在Blog类上定义了虚拟属性content，当访问<code>blog.content</code>的时候，实际上会发生一条主键查询的SQL语句，获取<code>blog_content.content</code>内容。由于BlogContent上面定义了对象缓存<code>acts_as_cached</code>，只要被访问过一次，content内容就会被缓存到memcached里面。</p>

<p>这种缓存技术实际会非常有效，因为： <em>只要缓存足够大，所有文章内容可以全部被加载到缓存当中，无论文章内容表有多么大，你都不需要再访问数据库了</em>  更进一步的是： <em>这张大表你永远都只需要通过主键进行访问，绝无可能出现表扫描的状况</em>  为何当数据量大到9000万条记录以后，我们的系统仍然能够保持良好的性能，秘密就在于此。</p>

<p>还有一点非常重要： <em>使用以上两种对象缓存的设计模式，你除了需要添加一条缓存声明语句acts_as_cached以外，不需要显式编写一行代码</em>  有效利用缓存的代价如此之低，何乐而不为呢？</p>

<p>以上两种缓存设计模式都不需要显式编写缓存代码，以下的缓存设计模式则需要编写少量的缓存代码，不过代码的增加量非常少。</p>

<h2>写一致性缓存</h2>

<p>写一致性缓存，叫做write-through cache，是一个CPU Cache借鉴过来的概念，意思是说，当数据库记录被修改以后，同时更新缓存，不必进行额外的缓存过期处理操作。但在应用系统中，我们需要一点技巧来实现写一致性缓存。来看一个例子：</p>

<p>我的网站文章原文是markdown格式的，当页面显示的时候，需要转换成html的页面，这个转换过程本身是非常消耗CPU的，我使用的是Github的markdown的库。Github为了提高性能，用C写了转换库，但如果是非常大的文章，仍然是一个耗时的过程，Ruby应用服务器的负载就会比较高。</p>

<p>我的解决办法是缓存markdown原文转换好的html页面的内容，这样当再次访问该页面的时候，就不必再次转换了，直接从缓存当中取出已经缓存好的页面内容即可，极大提升了系统性能。我的网站文章最终页的代码执行时间开销往往小于10ms，就是这个原因。代码如下：</p>

<pre><code>def md_content  # cached markdown format blog content
  APP_CACHE.fetch(content_cache_key) { GitHub::Markdown.to_html(content, :gfm) }
end
</code></pre>

<p>这里存在一个如何进行缓存过期的问题，当文章内容被修改以后，应该更新缓存内容，让老的缓存过期，否则就会出现数据不一致的现象。进行缓存过期处理是比较麻烦的，我们可以利用一个技巧来实现自动缓存过期：</p>

<pre><code>def content_cache_key
  "#{CACHE_PREFIX}/blog_content/#{self.id}/#{content_updated_at.to_i}"
end
</code></pre>

<p>当构造缓存对象的key的时候，我用文章内容被更新的时间来构造key值，这个文章内容更新时间用的是blogs表的content_updated_at字段，当文章被更新的时候，blogs表会进行update，更新该字段。因此每当文章内容被更新，缓存的页面内容的key就会改变，应用程序下次访问文章页面的时候，缓存就会失效，于是重新调用<code>GitHub::Markdown.to_html(content, :gfm)</code>生成新的页面内容。 而老的页面缓存内容再也不会被应用程序存取，根据memcached的LRU算法，当缓存填满之后，将被优先剔除。</p>

<p>除了文章内容缓存之外，文章的评论内容转换成html以后也使用了这种缓存设计模式。具体可以看相应的源代码：<a href="https://github.com/robbin/robbin_site/blob/master/models/blog_comment.rb">blog_comment.rb</a></p>

<h2>片段缓存和过期处理</h2>

<p>Web应用当中有大量的并非实时更新的数据，这些数据都可以使用缓存，避免每次存取的时候都进行数据库查询和运算。这种片段缓存的应用场景很多，例如：</p>

<ul>
<li>展示网站的Tag分类统计(只要没有更新文章分类，或者发布新文章，缓存一直有效)</li>
<li>输出网站RSS(只要没有发新文章，缓存一直有效)</li>
<li>网站右侧栏(如果没有新的评论或者发布新文章，则在一段时间例如一天内基本不需要更新)</li>
</ul>

<p>以上应用场景都可以使用缓存，代码示例：</p>

<pre><code>def self.cached_tag_cloud
  APP_CACHE.fetch("#{CACHE_PREFIX}/blog_tags/tag_cloud") do
    self.tag_counts.sort_by(&amp;:count).reverse
  end
end
</code></pre>

<p>对全站文章的Tag云进行查询，对查询结果进行缓存</p>

<pre><code>&lt;% cache("#{CACHE_PREFIX}/layout/right", :expires_in =&gt; 1.day) do %&gt;

&lt;div class="tag"&gt;
  &lt;% Blog.cached_tag_cloud.select {|t| t.count &gt; 2}.each do |tag| %&gt;
  &lt;%= link_to "#{tag.name}&lt;span&gt;#{tag.count}&lt;/span&gt;".html_safe, url(:blog, :tag, :name =&gt; tag.name) %&gt;
  &lt;% end %&gt;
&lt;/div&gt;
......
&lt;% end %&gt;
</code></pre>

<p>对全站右侧栏页面进行缓存，过期时间是1天。</p>

<p>缓存的过期处理往往是比较麻烦的事情，但在ORM框架当中，我们可以利用model对象的回调，很容易实现缓存过期处理。我们的缓存都是和文章，以及评论相关的，所以可以直接注册Blog类和BlogComment类的回调接口，声明当对象被保存或者删除的时候调用删除方法：</p>

<pre><code>class Blog &lt; ActiveRecord::Base
  acts_as_cached
  after_save :clean_cache
  before_destroy :clean_cache
  def clean_cache
    APP_CACHE.delete("#{CACHE_PREFIX}/blog_tags/tag_cloud")   # clean tag_cloud
    APP_CACHE.delete("#{CACHE_PREFIX}/rss/all")               # clean rss cache
    APP_CACHE.delete("#{CACHE_PREFIX}/layout/right")          # clean layout right column cache in _right.erb
  end
end

class BlogComment &lt; ActiveRecord::Base
  acts_as_cached
  after_save :clean_cache
  before_destroy :clean_cache
  def clean_cache
    APP_CACHE.delete("#{CACHE_PREFIX}/layout/right")     # clean layout right column cache in _right.erb
  end
end  
</code></pre>

<p>在Blog对象的<code>after_save</code>和<code>before_destroy</code>上注册<code>clean_cache</code>方法，当文章被修改或者删除的时候，删除以上缓存内容。总之，可以利用ORM对象的回调接口进行缓存过期处理，而不需要到处写缓存清理代码。</p>

<h2>对象写入缓存</h2>

<p>我们通常说到缓存，总是认为缓存是提升应用读取性能的，其实缓存也可以有效的提升应用的写入性能。我们看一个常见的应用场景：记录文章点击次数这个功能。</p>

<p>文章点击次数需要每次访问文章页面的时候，都要更新文章的点击次数字段view_count，然后文章必须实时显示文章的点击次数，因此常见的读缓存模式完全无效了。每次访问都必须更新数据库，当访问量很大以后数据库是吃不消的，因此我们必须同时做到两点：</p>

<ul>
<li>每次文章页面被访问，都要实时更新文章的点击次数，并且显示出来</li>
<li>不能每次文章页面被访问，都更新数据库，否则数据库吃不消</li>
</ul>

<p>对付这种应用场景，我们可以利用对象缓存的不一致，来实现对象写入缓存。原理就是每次页面展示的时候，只更新缓存中的对象，页面显示的时候优先读取缓存，但是不更新数据库，让缓存保持不一致，积累到n次，直接更新一次数据库，但绕过缓存过期操作。具体的做法可以参考<a href="https://github.com/robbin/robbin_site/blob/master/models/blog.rb">blog.rb</a> ：</p>

<pre><code># blog viewer hit counter
def increment_view_count
  increment(:view_count)        # add view_count += 1
  write_second_level_cache      # update cache per hit, but do not touch db
                                # update db per 10 hits
  self.class.update_all({:view_count =&gt; view_count}, :id =&gt; id) if view_count % 10 == 0
end
</code></pre>

<p><code>increment(:view_count)</code>增加view_count计数，关键代码是第2行<code>write_second_level_cache</code>，更新view_count之后直接写入缓存，但不更新数据库。累计10次点击，再更新一次数据库相应的字段。另外还要注意，如果blog对象不是通过主键查询，而是通过查询语句构造的，要优先读取一次缓存，保证页面点击次数的显示一致性，因此 <a href="https://github.com/robbin/robbin_site/blob/master/app/views/blog/_blog.erb">_blog.erb</a> 这个页面模版文件开头有这样一段代码：</p>

<pre><code>&lt;% 
  # read view_count from model cache if model has been cached.
  view_count = blog.view_count
  if b = Blog.read_second_level_cache(blog.id)
    view_count = b.view_count
  end
%&gt;
</code></pre>

<p>采用对象写入缓存的设计模式，就可以非常容易的实现写入操作的缓存，在这个例子当中，我们仅仅增加了一行缓存写入代码，而这个时间开销大约是1ms，就可以实现文章实时点击计数功能，是不是非常简单和巧妙？实际上我们也可以使用这种设计模式实现很多数据库写入的缓存功能。</p>

<p>常用的ORM缓存设计模式就是以上的几种，本质上都是非常简单的编程技巧，代码的增加量和复杂度也非常低，只需要很少的代码就可以实现，但是在实际应用当中，特别是当数据量很庞大，访问量很高的时候，可以发挥惊人的效果。我们实际的系统当中，缓存命中次数:SQL查询语句，一般都是5:1左右，即每次向数据库查询一条SQL，都会在缓存当中命中5次，数据主要都是从缓存当中得到，而非来自于数据库了。</p>

<h2>其他缓存的使用技巧</h2>

<p>还有一些并非ORM特有的缓存设计模式，但是在Web应用当中也比较常见，简单提及一下：</p>

<h3>用数据库来实现的缓存</h3>

<p>在我这个网站当中，每篇文章都标记了若干tag，而tag关联关系都是保存到数据库里面的，如果每次显示文章，都需要额外查询关联表获取tag，显然会非常消耗数据库。在我使用的<code>acts-as-taggable-on</code>插件中，它在blogs表当中添加了一个<code>cached_tag_list</code>字段，保存了该文章标记的tag。当文章被修改的时候，会自动相应更新该字段，避免了每次显示文章的时候都需要去查询关联表的开销。</p>

<h3>HTTP客户端缓存</h3>

<p>基于资源协议实现的HTTP客户端缓存也是一种非常有效的缓存设计模式，我在2009年写过一篇文章详细的讲解了：<a href="http://robbinfan.com/blog/13/http-cache-implement">基于资源的HTTP Cache的实现介绍</a> ，所以这里就不再复述了。</p>

<h3>用缓存实现计数器功能</h3>

<p>这种设计模式有点类似于对象写入缓存，利用缓存写入的低开销来实现高性能计数器。举一个例子：用户登录为了避免遭遇密码暴力破解，我限定了每小时每IP只能尝试登录5次，如果超过5次，拒绝该IP再次尝试登录。代码实现很简单，如下：</p>

<pre><code>post :login, :map =&gt; '/login' do
  login_tries = APP_CACHE.read("#{CACHE_PREFIX}/login_counter/#{request.ip}")
  halt 403 if login_tries &amp;&amp; login_tries.to_i &gt; 5  # reject ip if login tries is over 5 times
  @account = Account.new(params[:account])
  if login_account = Account.authenticate(@account.email, @account.password)
    session[:account_id] = login_account.id
    redirect url(:index)
  else
    # retry 5 times per one hour
    APP_CACHE.increment("#{CACHE_PREFIX}/login_counter/#{request.ip}", 1, :expires_in =&gt; 1.hour)
    render 'home/login'
  end
end
</code></pre>

<p>等用户POST提交登录信息之后，先从缓存当中取该IP尝试登录次数，如果大于5次，直接拒绝掉；如果不足5次，而且登录失败，计数加1，显示再次尝试登录页面。</p>

<p>以上相关代码可以从这里获取：<a href="https://github.com/robbin/robbin_site">robbin_site</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>743</wp:post_id>
		<wp:post_date>2013-03-08 14:42:08</wp:post_date>
		<wp:post_date_gmt>2013-03-08 06:42:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>web%e5%ba%94%e7%94%a8%e7%9a%84%e7%bc%93%e5%ad%98%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f-by-robbin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="web"><![CDATA[web]]></category>
		<category domain="post_tag" nicename="%e7%bc%93%e5%ad%98"><![CDATA[缓存]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>监视Rails进程内存泄漏的技巧</title>
		<link></link>
		<pubDate>Fri, 29 Mar 2013 04:17:13 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=746</guid>
		<description></description>
		<content:encoded><![CDATA[<p><code>Rails应用比较容易遇到的两类性能问题：一类是Rails执行很慢，CPU消耗过高；另一类是Rails进程内存泄漏。解决这两类问题都需要你首先能够精确定位出现问题的代码，然后才知道如何对症下药。</p>

<p>一、如何监控Rails进程的执行性能</p>

<p>定位消耗CPU高，执行速度缓慢的Rails代码，是相当容易的事情，仅仅需要你对production.log做一点统计分析，抽取出来执行时间最长的请求，问题就昭然若揭了。由于production.log对Rails请求的执行时间做了详细的统计，例如：</p>

<pre><code>Completed in 0.00693 (144 reqs/sec) | Rendering: 0.00489 (70%) | DB: 0.00000 (0%) | 200 OK [http://www.iteye.com/]
Completed in 0.17238 (5 reqs/sec) | Rendering: 0.10011 (58%) | DB: 0.06244 (36%) | 200 OK [http://www.iteye.com/topic/49441?page=7]
Completed in 0.20508 (4 reqs/sec) | Rendering: 0.19373 (94%) | DB: 0.00645 (3%) | 200 OK [http://www.iteye.com/news/1586]
</code></pre>

<p>所以我们只需要写一行shell命令，就搞定了！他把最耗时的前500个请求筛选出来，保存到timing.log里面。</p>

<pre>
grep &quot;200 OK&quot; production.log | awk &#039;{print &quot;ALL: &quot; $3 &quot;  View: &quot; $8 &quot; DB: &quot; $12 &quot;  URL: &quot; $17 }&#039; \
| sort -r | head -n 500 &gt; timing.log
</pre>

<p>排序好的结果例如：</p>

<pre>
ALL: 5.51774  View: 5.38277 DB: 0.13338  URL: [http://www.iteye.com/wiki/topic/131966]
ALL: 5.51316  View: 5.31300 DB: 0.19400  URL: [http://www.iteye.com/wiki/topic/145383]
ALL: 5.51311  View: 5.39321 DB: 0.11234  URL: [http://www.iteye.com/wiki/topic/160370]
ALL: 5.51135  View: 5.37604 DB: 0.12652  URL: [http://www.iteye.com/wiki/topic/233365]
ALL: 5.49881  View: 5.35998 DB: 0.10637  URL: [http://www.iteye.com/wiki/topic/265217]
</pre>

<p>哪些请求执行的慢，一目了然。 当然除此之外，我们还可以实时监控，在top监视窗口显示Rails当前正在执行的请求URL。</p>

<p>二、如何监控Rails进程的内存泄漏</p>

<p>监控CPU是很容易的事情，但要监控Rails进程的内存泄漏，却非常困难，原因在于production.log里面并没有记录进程的内存变化状况，甚至你找不到任何ruby API可以用来直接查询到进程使用的物理内存。实际上，要获取一个进程的物理内存是一个平台相关的操作，每个操作系统都会自己特定的API，并不通用，即使用C语言来编码，也不是一件容易的事情。</p>

<p>不过对于Linux操作系统来说，我们有一个捷径可以获取进程的内存状况。Linux的/proc文件系统是内核的映象，/proc/进程pid/status 文件记录了这个进程的状态信息，例如：</p>

<pre>
Name:   dispatch.fcgi
State:  S (sleeping)
SleepAVG:       135%
Tgid:   26645
Pid:    26645
PPid:   1
TracerPid:      0
Uid:    1002    1002    1002    1002
Gid:    100     100     100     100
FDSize: 64
Groups: 14 16 17 33 100 
VmSize:   245680 kB
VmLck:         0 kB
VmRSS:    209104 kB
VmData:   205116 kB
VmStk:       824 kB
VmExe:       764 kB
VmLib:      4220 kB
Threads:        1
SigPnd: 0000000000000000
ShdPnd: 0000000000000000
SigBlk: 0000000000000000
SigIgn: 0000000000001000
SigCgt: 0000000002006e47
CapInh: 0000000000000000
CapPrm: 0000000000000000
CapEff: 0000000000000000
</pre>

<p>注意第14行VmRSS，记录了该进程使用的常驻物理内存(Residence)，这个就是该进程实际占用的物理内存了。因此只要我们读取该文件第14行，就可以得到内存信息。</p>

<p>所以我们的任务变成了：在Rails处理请求之前记录内存，等Rails处理完请求之后，再记录内存，计算内存的变化状况，写入到production.log里面去。完成这个工作，只需要我们在Rails应用的app/controllers/application.rb里面添加几行代码：</p>

<pre>
  around_filter :record_memory
  def record_memory
    process_status = File.open(&quot;/proc/#{Process.pid}/status&quot;)
    13.times { process_status.gets }
    rss_before_action = process_status.gets.split[1].to_i
    process_status.close
    yield
    process_status = File.open(&quot;/proc/#{Process.pid}/status&quot;)
    13.times { process_status.gets }
    rss_after_action = process_status.gets.split[1].to_i
    process_status.close
    logger.info(&quot;CONSUME MEMORY: #{rss_after_action - rss_before_action} \
KB\tNow: #{rss_after_action} KB\t#{request.url}&quot;)
  end
</pre>

<p>我们定义了一个AroundFilter，记录一下处理请求前后的内存变化。有了这个信息，我们接下来的事情就简单了，只需要从production.log里面抽取出来这行log，进行统计分析就可以了，这也仅仅只需要一行shell就搞定了：</p>

<pre>
grep &quot;CONSUME MEMORY&quot; production.log | grep -v &quot;CONSUME MEMORY: 0&quot; |  \
 grep -v &quot;CONSUME MEMORY: -&quot; |  awk &#039;{print $3 &quot;\t&quot; $6 &quot;\t&quot; $8 }&#039; | sort -r -n | \
 head -n 500 &gt; memory.log 
</pre>

<p>抽取内存记录，去掉内存没有增加，去掉内存减少(发生了GC)的请求，然后对那些处理请求之后内存上升的记录进行排序，取出来前500条记录保存到memory.log里面，结果如下所示：</p>

<pre>
增加数 内存占用    请求URL
-----------------------------------------------
9528  175264  http://www.iteye.com/topic/304594
9524  129512  http://knityster.iteye.com/blog/172990
9496  147544  http://www.iteye.com/forums/
9492  197800  http://duyiwuer.iteye.com/rss
9452  146668  http://www.iteye.com/forums
9452  133844  http://wildlife.iteye.com/blog/47693
9440  157824  http://www.iteye.com/rss/blogs
9424  204664  http://www.iteye.com/wiki/topic/251964
9384  142200  http://towerhe.iteye.com/blog/93704
9380  165372  http://www.iteye.com/wiki/topic/77434
9368  207460  http://superleo.iteye.com/rss
</pre>

<p>第一列是访问了一个请求以后，Rails进程的内存上升了9MB多，第二列是处理完请求，Rails进程当前实际占了170多MB内存，第三列是处理了什么请求。</p>

<p>根据这个统计结果，你可以很容易找出那些造成你Rails进程内存泄漏的罪魁祸首，哪些请求一访问你的Rails进程内存就飚升已经是一目了然的事情了，这是不是很简单？事实上通过这个办法，JavaEye仅用了半个多小时，就解决了曾经困扰了半年多的内存泄漏问题，办法虽土，却很有效！</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>746</wp:post_id>
		<wp:post_date>2013-03-29 12:17:13</wp:post_date>
		<wp:post_date_gmt>2013-03-29 04:17:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%9b%91%e8%a7%86rails%e8%bf%9b%e7%a8%8b%e5%86%85%e5%ad%98%e6%b3%84%e6%bc%8f%e7%9a%84%e6%8a%80%e5%b7%a7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="leak"><![CDATA[leak]]></category>
		<category domain="post_tag" nicename="memory"><![CDATA[memory]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>分享一些资料（侧重Linux） --by D瓜哥</title>
		<link></link>
		<pubDate>Thu, 04 Apr 2013 04:38:47 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=754</guid>
		<description></description>
		<content:encoded><![CDATA[<p>以前没有攒资料的习惯，这一两年才养成了这个习惯。有次和大学老师聊天，和她说攒了不少资料，她就让我分享给她看。后来和她进一步沟通，觉得整理一下，分给学弟学妹看也许对他们更有帮助。为了这个目标，把资料重新梳理了一下，并且添加了一点我个人对学习方法的理解，分享出来，希望对大家有所帮助！</p>

<p>　　本文章面向刚刚踏入挨踢行业的新手，高手可以直接飞过！当然，如果有好的资料，或者一些不同的看法，请留言交流！</p>

<p><a href="http://www.diguage.com/archives/6.html">学习方法论</a></p>

<p>享受学习！寻找学习中的乐子，享受这种乐子！强化学习中的成就感，提高自己对课程，对学习，对生活的自信心！在《只要一部计算机，就可以创造出无限的世界》中有更多论述。请自己查看。</p>

<p>亲自动手实践！就我的同学来看，大家最欠缺的是动手能力。很多人理论学的还行，但是一动手就完蛋！所以，一定要亲自动手实践！！另外，你可以把你实践的过程记录下来，发布到网上。说不定有很多菜鸟需要你的这些资料呢。
最好的学习方式就是把学习的东西记下来！当你试着把你所学的东西都记录下来时，你就会逼着自己去把不懂的东西搞清楚。另外，再你写的过程中，你要斟词酌句，你要谋篇布局，还锻炼你分析问题、整理问题的能力。无形中让你受益匪浅。所以，强烈推荐把自己学的东西写成博客发布出来！目前中Linux方面最好的论坛算是51CTO（D瓜哥个人认为）了。大家可以在上面注册个账号，开始写自己的博客！如果你写得好，会有很多人赞你！这可以获得很大的成就感，更会提高你的写作动力。如果你写的有问题，一些热心网友也会给你指出，纠正你的错误，你还是会获得进步。所以，无论从哪个方面讲，写博客都是百利而无一害的！所以，有事没事写写博客还是大有益处的！如果哪天你不小心混到VIP，那就真的牛逼了！当然，你所学的任何方面的东西都可以写出来发布出来，不限Linux。
广告一下：如果感觉这篇文章对您有用，而且方便的话，麻烦把我的网站“‘地瓜哥’博客网”加入到你的友情链接列表里！如果是推荐博客列表更好！哈哈</p>

<p>一定一定要学会使用Google！把使用Google查资料培养成一种习惯！有事没事用Google百度一下！这里给大家讲解一个这段时间发生的一个故事：15岁的美国学生Jack Andraka的长辈因胰脏腺癌过世，让他决定上网用谷歌和维基百科理解这噩病。他发现：初期胰脏癌很好医治，但后期几乎无望，所以早期诊断是最关键的。7个月后他发明了一种纳米试纸，能够迅速廉价精准检测胰腺癌生物标志。由此可见，互联网时代人人都可以成为科学家！相信瓜哥，没错的！也许有人会提到百度，D瓜哥看来如果你不是做假药的，百度真的就可以算了！珍爱生命，从远离百度开始！
本文发出来之后，一些网友说D瓜哥藐视百度等等。D瓜哥这里做个说明，D瓜哥不藐视百度；D瓜哥只是认为百度搜索结果中各种推广等太多了，严重影响了使用体验；尤其是对于挨踢方面的搜索结果不够精准，还要一页一页翻着找，太浪费时间！另外，我们可以想想，为什么很多人忍受这个Google断网、链接重置、网速慢等问题，继续坚持使用Google？当然，D瓜哥只是建议使用Google。至于如何选择，完全看自己！</p>

<p>一定要把英语学好！在挨踢行业中，英语几乎是个必须掌握的技能！学好英语，就可以打开一个更广阔的天地。能接触到最新的各种挨踢资料。全世界最好的挨踢问答网StackOverflow就是以英语为主，学好英语，你所有的挨踢疑难杂症，几乎都可以在这里找到。另外，里面还有好多经常的解答，也会让你受益匪浅！
也许大家会觉得英语学起来很费劲，看原版书更是头大！其实，并不像大家想象的那样！D瓜哥的英语也很烂，但是D瓜哥也读过几本英语原版书了！根据我的个人经验，刚拿到一本书确实很头大，但是只要硬着头皮看几章之后，找到感觉之后，读起来就会顺畅很多了！遇到不懂的，拿个词典（电子词典也行，推荐有道词典）随时查就行了。</p>

<p>　　推荐大家自己搭建一个博客，可以自己开发，也可以使用Wordpress。注册个域名，配置DNS，你要懂网络知识；搭建博客，无论是自己开发，还是定制Wordpress，你都要懂PHP（当然，也可以是其他编程语言！不过，网络上PHP的虚拟主机最多，也便宜！JSP的虚拟主机少，而且贵！）；如果再进行网站优化，那就需要懂更多的知识了，编程语言、互联网协议、数据库优化、Linux服务器管理、HTTP、缓存、JavaScript、CSS、DNS等等！可以把你自己所学的东西，都串起来，构成一个整体的、清晰的框架！</p>

<h3>Linux资料</h3>

<ol>
<li><a href="http://www.diguage.com/archives/22.html">只要一部计算机，就可以创造出无限的世界</a>，来个开胃菜，准备迎接下面的大餐！</li>
<li><a href="http://coolshell.cn/articles/4990.html">程序猿技术练级攻略</a></li>
<li><a href="http://coolshell.cn/articles/8883.html">应该知道的Linux技巧</a></li>
<li><a href="http://www.oschina.net/translate/the-command-line-is-your-best-friend">命令行是你的至交好友</a></li>
<li><a href="http://www.linuxcast.net/">LinuxCast</a></li>
<li><a href="http://coolshell.cn/articles/7829.html">28个Unix/Linux的命令行神器</a></li>
<li><a href="http://coolshell.cn/articles/5426.html">简明VIM教程</a></li>
<li><a href="http://www.diguage.com/archives/51.html">普通人的编辑利器——Vim</a></li>
<li><a href="http://www.vimer.cn/">Vimer的程序世界</a></li>
<li><a href="http://blog.csdn.net/wooin/article/details/1858917">手把手教你把Vim改装成一个IDE编程环境(图文)</a></li>
<li><a href="http://www.commandlinefu.com/commands/browse">All commands</a>，非常强大的Linux命令在线查询工具，谁用谁知道！！</li>
<li><a href="http://linux-wiki.cn/wiki/%E9%A6%96%E9%A1%B5">Linux Wiki</a>，里面的指令讲解挺详细，排版也很好！</li>
<li><a href="http://coolshell.cn/articles/9070.html">AWK简明教程</a></li>
<li><a href="http://coolshell.cn/articles/9104.html">sed简明教程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/02/a_history_of_unix_directory_structure.html">Unix目录结构的来历</a></li>
<li><a href="http://coolshell.cn/articles/2322.html">Unix传奇(上篇)</a></li>
<li><a href="http://coolshell.cn/articles/2324.html">Unix传奇(下篇)</a></li>
<li><a href="http://coolshell.cn/articles/1023.html">Unix 40年：昨天，今天和明天</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/12/inode.html">理解inode</a></li>
<li><a href="http://smilejay.com/kvm_theory_practice/">KVM虚拟化原理与实践</a>，最新颖的Linux虚拟机技术！</li>
<li><a href="http://openresty.org/download/agentzh-nginx-tutorials-zhcn.html">agentzh 的 Nginx 教程</a>，目前使用最广泛的Web服务器！</li>
</ol>

<h3>网络相关</h3>

<ol>
<li><a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html">互联网协议入门（一）</a>，从上到下，从下到上，透彻地分析互联网中的主要协议！</li>
<li><a href="http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html">互联网协议入门（二）</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">SSH原理与运用（一）：远程登录</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html">SSH原理与运用（二）：远程操作与端口转发</a></li>
<li><a href="http://www.diguage.com/archives/33.html">趣解HTTP状态码</a></li>
<li><a href="http://rdc.taobao.com/blog/cs/?p=106">CDN技术介绍</a></li>
<li><a href="http://www.diguage.com/archives/27.html">CDN技术实践</a></li>
</ol>

<h3>编程相关</h3>

<ol>
<li><a href="http://blog.jobbole.com/15213/">Web开发：我希望得到的编程学习路线图</a>，这只是一个学习指导路线。大家可以把其中Ruby相关的，换成JSP、ASP.NET或者PHP等。另外，Ruby很好玩，感兴趣的可以学一学。（如果Java或者C#等没有学会的话，还是不要学了，Ruby的语法太灵活了，你会被搞蒙的。）</li>
<li><a href="http://www.blogjava.net/qcyycom/archive/2012/04/16/374791.html">23种设计模式的形象比喻</a></li>
<li><a href="http://coolshell.cn/articles/3320.html">JDK里的设计模式</a></li>
<li><a href="http://www.oschina.net/translate/tag/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80">每个程序员都应该了解的内存知识</a></li>
<li><a href="http://www.codecademy.com/">Codecademy</a>，在线交互式编程学习网站！很有趣！</li>
<li><a href="http://weibo.com/ourmysql">MySQL（微博）</a>，里面分享了很多干货</li>
<li><a href="http://coolshell.cn/articles/3463.html">图解SQL的Join</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">字符编码笔记：ASCII，Unicode和UTF-8</a></li>
<li><a href="http://www.redisbook.com/en/latest/">Redis 设计与实现</a>，可能一时半会用不上，备用吧。</li>
</ol>

<h3>网页开发</h3>

<ol>
<li><a href="http://www.cnblogs.com/keepfool/archive/2012/06/02/2532203.html">jQuery选择器大全</a>，jQuery是任何一个搞网站开发人员，甚至移动应用开发人员必学JavaScript库！</li>
<li><a href="https://github.com/twitter/bootstrap">Bootstrap</a>，Github上最火爆的项目。</li>
<li><a href="http://xiemin.me/bootstrap-2.3.0/index.html">Bootstrap中文手册</a></li>
<li><a href="http://www.cnblogs.com/gumutianqi/archive/2011/10/17/2215186.html">50个必备的实用jQuery代码段</a></li>
<li><a href="http://jsfiddle.net/">jsFiddle</a>，可以在网上调试JavaScript代码。还可以共享出来。</li>
<li><a href="http://justineo.github.com/slideshows/semantic-html/#/">HTML语义简析</a></li>
<li><a href="http://www.uisdc.com/">优设</a>，网页设计。</li>
<li><a href="http://imagecss.gucheen.pro/index.html">imageCSS</a></li>
<li><a href="http://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/">浏览器的工作原理</a></li>
<li><a href="http://blog.csdn.net/zzzaquarius/article/details/6532299">浏览器是如何工作的？</a></li>
<li><a href="http://www.diguage.com/archives/67.html">“分享一些D瓜哥攒的比较好的Web开发资料”</a>，这里分享了更多的关于这方面的资料！</li>
</ol>

<h3>书籍推荐</h3>

<p>　　其实，读书也可以很有趣，比如下面的这些书。</p>

<ol>
<li><a href="http://book.douban.com/subject/4889838/">鸟哥的Linux私房菜.基础学习篇</a></li>
<li><a href="http://book.douban.com/subject/2334288/">大话设计模式</a>，这本书会告诉你，其实技术也很好看。</li>
<li><a href="http://book.douban.com/subject/5320866/">重来</a>，静下心来，两个小时看完。</li>
<li><a href="http://book.douban.com/subject/6021440/">黑客与画家</a>，阮一峰（下面有推荐他的博客）翻译的，书不错，推荐看看！</li>
<li><a href="http://book.douban.com/subject/10750155/">数学之美</a>，让你切身体验一下计算机中是怎么玩数学的。</li>
<li><a href="http://book.douban.com/subject/6709783/">浪潮之巅</a>，和上面的《数学之美》是同一个人，吴军博士，Google攻城师，前腾讯副总裁。</li>
<li><a href="http://book.douban.com/subject/10779597/">思考的乐趣</a>，其实数学也很好玩！不信你看看这本书。另外，这本书的作者是中文系的！是不是突然感觉很牛逼啊？加油，你也可以很牛逼！</li>
<li><a href="http://book.douban.com/subject/10546125/">JavaScript高级程序设计（第3版）</a>，学JavaScript只需要这一本书；</li>
<li><a href="http://book.douban.com/subject/1873231/">明朝那些事儿</a>，很好看的历史书！这里只给出了第一本的链接，一共七本！大家也可以在网上找电子版的。这套书最早就是电子书！</li>
<li><a href="http://book.douban.com/subject/5402682/">牛奶可乐经济学</a>，生活中很多有趣的现象都可以使用经济学的一些原理来解释。问题有趣，解释也很有意识！喜欢经济学的朋友可以看看这套书。这也是一套书，目前出到第三本了。</li>
<li><a href="http://book.douban.com/subject/5387401/">Unix编程艺术</a>，作者是Unix的开发人员，开源运动的推动者，主要讲解Unix/Linux的“野史”；当然，也讲解了很多Unix/Linux系统设计原理和设计思想。推荐！</li>
</ol>

<h3>挨踢趣闻</h3>

<ol>
<li><a href="http://www.ruanyifeng.com/blog/2011/04/on_hacker.html">黑客的含义</a></li>
<li><a href="http://coolshell.cn/">那些年，MIT技术男们奇妙的黑客作品</a></li>
<li><a href="http://kb.cnblogs.com/page/132724/">淘宝技术发展</a></li>
<li>[Tech Drafts](http://www.techdrafts.com/</li>
<li><a href="http://www.techdrafts.com/post/46776740835/soldier-spy-and-server">士兵，间谍，服务器</a></li>
<li><a href="http://www.diguage.com/archives/79.html">给哥三十五次机会，哥就能猜中你的手机号</a></li>
</ol>

<h3>知名技术博客</h3>

<p>　　这里推荐的一般是个人博客，知名论坛等，不在此列。</p>

<ol>
<li><a href="http://www.diguage.com/">地瓜哥</a>，我个人博客，暂且以次充好吧。哈</li>
<li><a href="http://coolshell.cn/">酷壳</a>，里面有好多好文章、资料，自己慢慢发掘吧；</li>
<li><a href="http://www.ruanyifeng.com/blog/">阮一峰博客</a>，不是专门的挨踢技术博客，但是里面技术类的文章都特别浅显易懂，而且深入浅出，可以学习阮老师的文笔！</li>
<li><a href="http://roclinux.cn/">Linux大鹏</a>，细致地讲解了不少Linux指令。</li>
<li><a href="http://robbinfan.com/">肉饼范凯</a>，ItEye的创始人，技术也很刚刚的！</li>
<li><a href="http://www.cnblogs.com/chijianqiang/">池建强</a></li>
<li><a href="http://www.cnblogs.com/TomXu/">汤姆大叔</a>，里面有关于JavaScript的一个系列文章，非常不错！</li>
<li><a href="http://blog.zhaojie.me/">老赵</a></li>
<li><a href="http://www.importnew.com/">ImportNew</a></li>
<li><a href="http://www.soimort.org/">夏の航海士</a></li>
<li><a href="http://dbanotes.net/">冯大辉</a></li>
<li><a href="http://mindhacks.cn/">刘未鹏</a></li>
<li><a href="http://rdc.taobao.com/blog/cs/">淘宝核心系统团队博客</a></li>
<li><a href="http://www.taobaodba.com/">阿里巴巴集团数据库技术团队</a></li>
<li><a href="http://rdc.taobao.com/team/jm/">淘宝JAVA中间件</a></li>
<li><a href="http://ued.taobao.com/blog/">淘宝UED团队</a>，博客页面不错！</li>
<li><a href="http://www.matrix67.com/blog/">Matrix67</a>，如果我告诉你这个博主是中文系的，估计你会自卑得无地自容。
18 <a href="http://blog.sina.com.cn/yinwang0">王垠</a></li>
<li><a href="http://ioutlier.com/">Life As An Outlier</a></li>
<li><a href="http://blog.jobbole.com/">伯乐在线</a></li>
<li><a href="http://smilejay.com/about/">笑遍世界</a></li>
<li><a href="http://macrochen.iteye.com/">疯狂的菠菜</a></li>
<li><a href="http://blog.darkmi.com/">darkmi</a></li>
</ol>

<h3>知名论坛</h3>

<ol>
<li><a href="http://www.51cto.com/">51CTO</a>，侧重服务器、网络管理；</li>
<li><a href="http://www.cnblogs.com/">博客园</a>，侧重.NET技术，前端技术的文章也不少。</li>
<li><a href="http://www.oschina.net/">开源社区</a></li>
<li><a href="http://www.v2ex.com/">V2EX</a></li>
<li>CSDN；这个是全国最大的IT社区，但是里面的内容参差不齐，仅仅列出，不推荐。</li>
</ol>

<h3>知名资讯博客</h3>

<ol>
<li><a href="http://www.36kr.com/">36氪</a></li>
<li><a href="http://www.williamlong.info/">月光博客</a></li>
<li><a href="http://ifanr.com/">爱范儿</a></li>
<li><a href="http://lusongsong.com/">卢松松</a></li>
</ol>

<h3>奇技淫巧</h3>

<ol>
<li><a href="http://www.zhihu.com/question/20161362">如何用好 Google 搜索引擎？</a></li>
<li><a href="https://www.evernote.com/">墙外“谷妹”，墙里佳人“上”，不翻墙，顺利上Google！</a></li>
<li><a href="http://www.williamlong.info/archives/728.html">十大高明的Google搜索技巧</a></li>
<li><a href="http://www.worldhello.net/gotgithub/index.html">GotGitHub</a>，Github的使用教程</li>
<li><a href="http://www.ruanyifeng.com/blog/2012/07/git.html">Git分支管理策略</a></li>
</ol>

<h3>必备武器</h3>

<ol>
<li><a href="https://www.google.com.hk/">Google</a>，再次强调一下，必须学会使用Google！</li>
<li><a href="https://www.evernote.com/">印象笔记</a>，注意保存资料！也许你现在看到的资料，到明天链接就失效了。</li>
<li><a href="http://note.youdao.com/">有道云笔记</a>，也是笔记类软件，网易推出的。备选。</li>
<li><a href="https://github.com/">Github</a>，上面有各种各样的代码，喜欢代码的朋友，喜欢开源的朋友，必须会用！</li>
<li><a href="http://www.ostools.net/">开源中国</a>-在线工具，各种工具。</li>
<li><a href="http://book.douban.com/">豆瓣读书</a>，可以在这里看书评，选书。</li>
</ol>

<h3>资料荟萃</h3>

<ol>
<li><a href="http://www.diguage.com/archives/67.html">分享一些D瓜哥攒的比较好的Web开发资料</a></li>
<li><a href="http://news.dbanotes.net/news">Startup News</a></li>
<li><a href="https://news.ycombinator.com/">Hacker News</a></li>
<li><a href="http://geek.csdn.net/">极客头条</a></li>
<li><a href="http://open.163.com/">网易公开课，很多开放式课程都可以看！</a></li>
<li><a href="http://www.verycd.com/">电驴</a>，虽然现在的电驴被阉割了！但是，里面还是有好多各种各样的学习资料！想学什么，直接在里面搜索就可以！原以为里面的内容都删除了，后来发现登陆后一些链接还是可以照常下！不幸中的万幸啊！</li>
<li><a href="https://github.com/Yixiaohan/codeparkshare">零基础学习Python</a></li>
<li><a href="http://blog.csdn.net/sxhelijian/article/details/8135028">IT学子成长指导</a></li>
<li><a href="http://xianguo.com/">鲜果网</a></li>
<li><a href="http://www.csdn.net/article/2011-01-28/291076">我的Linux书架</a></li>
<li><a href="http://book.douban.com/">豆瓣网，不仅仅读书，还有影评，音乐等等！</a></li>
<li><a href="http://coolshell.cn/articles/5224.html">一些文章和各种资源</a></li>
<li><a href="http://coolshell.cn/articles/355.html">20本最好的Linux免费书籍</a></li>
</ol>

<h3>问答类网站</h3>

<ol>
<li><a href="http://www.zhihu.com/">知乎</a>，需要注册，不过里面很多问题回答的很深入透彻！推荐注册。</li>
<li><a href="http://stackoverflow.com/">StackOverflow</a>，这个应该是目前全球最大的挨踢问答网了！估计你遇到的任何挨踢相关的问题，都可以在这里找到解答！</li>
<li><a href="http://www.quora.com/">Quora</a>，需要注册，并且注册需要跨栏（因为目前只允许米国IP注册）。
　　百度知道也是一个问答类网站，但是对于解答挨踢问题来说，太不专业！另外，里面的回答质量也差强人意。就不推荐了。</li>
</ol>

<h3>生活常识</h3>

<ol>
<li><a href="http://wiki.woodpecker.org.cn/moin/AskForHelp">智慧的提问</a></li>
<li><a href="http://www.diguage.com/archives/54.html">程序员，你会问问题吗？</a></li>
</ol>

<p>原文地址 <a href="http://www.diguage.com/archives/6.html">学习方法论</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>754</wp:post_id>
		<wp:post_date>2013-04-04 12:38:47</wp:post_date>
		<wp:post_date_gmt>2013-04-04 04:38:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%88%86%e4%ba%ab%e4%b8%80%e4%ba%9b%e8%b5%84%e6%96%99%ef%bc%88%e4%be%a7%e9%87%8dlinux%ef%bc%89-by-d%e7%93%9c%e5%93%a5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="coder"><![CDATA[coder]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="category" nicename="%e4%b8%93%e4%b8%9a"><![CDATA[专业]]></category>
		<category domain="category" nicename="%e5%b7%a5%e5%85%b7%e6%8e%a7"><![CDATA[工具控]]></category>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>660</wp:comment_id>
			<wp:comment_author><![CDATA[D瓜哥]]></wp:comment_author>
			<wp:comment_author_email>leejun119@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.diguage.com/</wp:comment_author_url>
			<wp:comment_author_IP>123.14.62.105</wp:comment_author_IP>
			<wp:comment_date>2013-04-05 07:52:19</wp:comment_date>
			<wp:comment_date_gmt>2013-04-04 23:52:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[嗨，哥们，我是D瓜哥。
方法论中，排版和原来的不对，没有把重点突出出来。建议重新排一下版。方便阅读！
另外，方便的话，在文章结尾，把我的原文链接加上吧。呵呵]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1365119539.38";s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:74:{s:15:"comment_post_ID";s:3:"754";s:14:"comment_author";s:7:"D瓜哥";s:20:"comment_author_email";s:19:"leejun119@gmail.com";s:18:"comment_author_url";s:23:"http://www.diguage.com/";s:15:"comment_content";s:230:"嗨，哥们，我是D瓜哥。
方法论中，排版和原来的不对，没有把重点突出出来。建议重新排一下版。方便阅读！
另外，方便的话，在文章结尾，把我的原文链接加上吧。呵呵";s:12:"comment_type";s:0:"";s:14:"comment_parent";s:1:"0";s:7:"user_ID";s:1:"0";s:7:"user_ip";s:13:"123.14.62.105";s:10:"user_agent";s:101:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.43 Safari/537.31";s:8:"referrer";s:158:"http://jhjguxin.sinaapp.com/2013/04/04/%e5%88%86%e4%ba%ab%e4%b8%80%e4%ba%9b%e8%b5%84%e6%96%99%ef%bc%88%e4%be%a7%e9%87%8dlinux%ef%bc%89-by-d%e7%93%9c%e5%93%a5/";s:4:"blog";s:27:"http://jhjguxin.sinaapp.com";s:9:"blog_lang";s:5:"zh_CN";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:158:"http://jhjguxin.sinaapp.com/2013/04/04/%e5%88%86%e4%ba%ab%e4%b8%80%e4%ba%9b%e8%b5%84%e6%96%99%ef%bc%88%e4%be%a7%e9%87%8dlinux%ef%bc%89-by-d%e7%93%9c%e5%93%a5/";s:9:"user_role";s:0:"";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:7:"D瓜哥";s:10:"POST_email";s:19:"leejun119@gmail.com";s:8:"POST_url";s:23:"http://www.diguage.com/";s:12:"POST_comment";s:230:"嗨，哥们，我是D瓜哥。
方法论中，排版和原来的不对，没有把重点突出出来。建议重新排一下版。方便阅读！
另外，方便的话，在文章结尾，把我的原文链接加上吧。呵呵";s:11:"POST_submit";s:12:"发表评论";s:20:"POST_comment_post_ID";s:3:"754";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"e1991a047d";s:15:"SERVER_SOFTWARE";s:6:"Apache";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:14:"MEF_PROXY_ADDR";s:11:"10.67.15.12";s:11:"has_apphash";s:1:"1";s:16:"ApplimitOutOfCon";s:1:"0";s:16:"ApplimitOutOfMem";s:1:"0";s:10:"SCRIPT_URL";s:21:"/wp-comments-post.php";s:10:"SCRIPT_URI";s:48:"http://jhjguxin.sinaapp.com/wp-comments-post.php";s:20:"HTTP_X_FORWARDED_FOR";s:28:"123.14.62.105, 123.14.62.105";s:9:"HTTP_HOST";s:20:"jhjguxin.sinaapp.com";s:12:"HTTP_APPNAME";s:8:"jhjguxin";s:15:"HTTP_APPVERSION";s:1:"1";s:9:"HTTP_MCIP";s:26:"1default;1::;1:@default:;;";s:14:"HTTP_ACCESSKEY";s:10:"34y21z4k20";s:12:"HTTP_APPHASH";s:3:"311";s:14:"HTTP_MYSQLPORT";s:4:"3307";s:14:"HTTP_APPCOOKIE";s:26:"default_version=1;debug=2;";s:12:"HTTP_APPSRVC";s:19:"0000000000000000AC0";s:15:"HTTP_CONNECTION";s:5:"close";s:14:"HTTP_X_REAL_IP";s:13:"123.14.62.105";s:14:"CONTENT_LENGTH";s:3:"901";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:11:"HTTP_ORIGIN";s:27:"http://jhjguxin.sinaapp.com";s:15:"HTTP_USER_AGENT";s:101:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.43 Safari/537.31";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:12:"HTTP_REFERER";s:158:"http://jhjguxin.sinaapp.com/2013/04/04/%e5%88%86%e4%ba%ab%e4%b8%80%e4%ba%9b%e8%b5%84%e6%96%99%ef%bc%88%e4%be%a7%e9%87%8dlinux%ef%bc%89-by-d%e7%93%9c%e5%93%a5/";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip,deflate,sdch";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"zh-CN,zh;q=0.8";s:19:"HTTP_ACCEPT_CHARSET";s:27:"gb18030,utf-8;q=0.7,*;q=0.3";s:11:"HTTP_COOKIE";s:0:"";s:4:"PATH";s:46:"/bin:/usr/bin:/usr/ucb:/usr/bsd:/usr/local/bin";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:20:"jhjguxin.sinaapp.com";s:11:"SERVER_ADDR";s:11:"10.67.15.25";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:13:"123.14.62.105";s:13:"DOCUMENT_ROOT";s:32:"/data1/www/htdocs/311/jhjguxin/1";s:12:"SERVER_ADMIN";s:18:"saesupport@sina.cn";s:15:"SCRIPT_FILENAME";s:53:"/data1/www/htdocs/311/jhjguxin/1/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"29966";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1365119538";s:14:"HTTP_SECRETKEY";s:9:"Discarded";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1373462203.33";s:7:"message";s:39:"jhjguxin 将评论状态改为 approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jhjguxin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>vagreant tutorial</title>
		<link></link>
		<pubDate>Wed, 10 Jul 2013 13:15:08 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=760</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>vagreant tutorial</h3>

<p>this tutorial base on <a href="http://gogojimmy.net/2013/05/26/vagrant-tutorial/">vagrant-tutorial</a> and suit for <code>~&gt; 1.2</code> vagrant, thanks author <a href="http://twitter.com/gogojimmy">@gogojimmy</a></p>

<h4>what is vagreant</h4>

<p>Vagrant is a tool for building and distributing virtualized development environments.</p>

<h4>install vagreant</h4>

<p>Vagrant 背後用的是 Virtual Box 作為虛擬機器, Vagrant 只是一個讓你可以方面做設定來開你想要的虛擬機器的方便工具, 所以你必須先安裝 Vagrant 和 Virtual Box, Virtual Box 你可以在<a href="https://www.virtualbox.org/">Virtual Box 官網</a>下載適合你平台的版本，而 <a href="http://www.vagrantup.com/">Vagrant</a> 你可以在 Vagrant 官網下載打包好的版本，或是如果你跟我一樣是個玉樹臨風的 Rubist, 你可以打開我們最愛的小黑視窗輸入</p>

<pre><code>$ gem install vagrant # not recomment
</code></pre>

<blockquote>
  <p>Vagrant 1.1後已經不支援使用Gem來安裝了 http://mitchellh.com/abandoning-rubygems</p>
</blockquote>

<pre><code>$# wget http://files.vagrantup.com/packages/7e400d00a3c5a0fdf2809c8b5001a035415a607b/vagrant_1.2.2_i686.deb -O ~/Downloads/vagrant_1.2.2_i686.deb &amp;&amp; sudo dpkg -i ~/Downloads/vagrant_1.2.2_i686.deb
$ wget http://files.vagrantup.com/packages/7e400d00a3c5a0fdf2809c8b5001a035415a607b/vagrant_1.2.2_i686.deb -P ~/Downloads/ &amp;&amp; sudo dpkg -i ~/Downloads/vagrant_1.2.2_i686.deb
</code></pre>

<h4>開始使用Vagrant 新增作業系統</h4>

<p>當你已經安裝好 Virtual Box 以及 Vagrant 後，你要開始思考你想要在你的VM上使用什麼作業系統，一個打包好的作業系統環境在 Vagrant 稱之為 Box，也就是說每個 Box 都是一個打包好的作業系統環境，當然網路上什麼都有，你不用自己去找作業系統，vagrantbox.es 上面就有許多大家熟知且已經打包好的作業系統，你只需要下載就可以了，為你的Vagrant增加一個 Box 很簡單</p>

<pre><code># Vagrant version 1.2.2 should use bellow
$ vagrant box add {你想要的Box名稱} {下載網址}
# vagrant box add ubuntu-13-04 ~/raring-server-cloudimg-amd64-vagrant-disk.box
# vagrant box add ubuntu-13-04 raring-server-cloudimg-amd64-vagrant-disk.box
$ vagrant box add ubuntu-13-04  http://cloud-images.ubuntu.com/raring/current/raring-server-cloudimg-vagrant-amd64-disk1.box

# not work for francis
$ vagrant box add ubuntu-13-04 http://cloud-images.ubuntu.com/raring/current/raring-server-cloudimg-vagrant-amd64-disk1.box
vagrant box list
#vagrant box remove ubuntu-12-10 virtualbox

# box add centos-6_4-x86_64 CentOS-6.4-x86_64.box
# box add centos-6_4-x86_64 CentOS-6.4-x86_64.box
</code></pre>

<p>Vagrant 就會開始下載這個 Box，你可以用<code>vagrant box list</code>這個指令看到你所擁有的所有 Box，想像就是你的書架上多了一片 Ubuntu 12.10 的安裝光碟，以後要安裝機器就是用這的安裝就可以了，有了Box以後，我們要產生一個設定檔來設定我們的虛擬機器，這個檔案可以透過指令 <code>vagrant init Box名稱</code>來產生，你可以在你的專案中或是另外開個練習用的資料夾輸入，這時候你的資料夾終究會有一個名稱為vagrantfile的檔案，這個檔案就是所有魔法的開始</p>

<pre><code>$ mkdir vagrant-boxes &amp;&amp; cd vagrant-boxes
vagrant init ubuntu-13-04
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
</code></pre>

<h3>讓VM動起來</h3>

<p>我們晚一點再提設定檔的部份，讓我們先把VM跑起來，要讓VM跑起來的指令是<code>vagrant up</code></p>

<pre><code>#vagrant destroy &amp;&amp;VAGRANT_LOG=DEBUG vagrant up
VAGRANT_LOG=DEBUG vagrant up
vagrant status
Current machine states:

default                  running (virtualbox)

The VM is running. To stop this VM, you can run `vagrant halt` to
shut it down forcefully, or you can run `vagrant suspend` to simply
suspend the virtual machine. In either case, to restart it again,
simply run `vagrant up`.
</code></pre>

<p>known issue <a href="https://github.com/mitchellh/vagrant/issues/455">https://github.com/mitchellh/vagrant/issues/455</a></p>

<pre><code>sudo rm /etc/udev/rules.d/70-persistent-net.rules
sudo touch /etc/udev/rules.d/70-persistent-net.rules
sudo ufw allow 2222
sudo ufw disable

#Vagrantfile
Vagrant::Config.run do |config|
  config.vm.network :bridged, :bridge =&gt; "en0: Wi-Fi (AirPort)"
end

#http://docs-v1.vagrantup.com/v1/docs/config/ssh/port.html
</code></pre>

<h3>將習慣的環境打包成Box</h3>

<p>我的環境大概要裝15分鐘左右, 有人說一個程式設計師的人生花最多時間的一件事情就是等, 這個說法真是一點也不為過, 每次裝機都從環境重新開始 Build 也不是辦法，我們要讓人生有更多的時間去處理更多的事情, 所以我們可以把一個已經Build好的環境打包成一個我們自己的 Box, 以後我們只要直接使用這個打包好的版本就可以了, 因此讓我們幫自己的人生省點時間, 速速登出VM來打包這個 Box</p>

<pre><code>$ vagrant package
[default] Attempting graceful shutdown of VM...
[default] Clearing any previously set forwarded ports...
[default] Creating temporary directory for export...
[default] Exporting VM...
[default] Compressing package to: /home/jhjguxin/vagrant-boxes/ubuntu-server-12042/package.box
</code></pre>

<p><code>vagrant package</code> 這個指令會在你目前的資料夾下建立一個 <code>package.box</code> 的 Box 檔案, 這時候我們跟剛剛一樣把它加入到我們的Box List中, 以後我們就可以快速使用這個 Box 就好了! 除此之外, 可以自定 Box 的意義還有讓你的團隊都能用VM來擁有自己的 Staging 環境，例如在 Rails 專案中我們也可以建立一個 Vagrant 的設定檔來做一個給開發人員測試用的 Staging 環境, 這時候你就可以指定好你自定的機器設定, 確保每個開發人員都能擁有一樣的環境來進行開發.</p>

<pre><code>$ vagrant box add francis-ubuntu-server-12042 package.box
$ vagrant box list
</code></pre>

<h3><a href="http://docs.vagrantup.com/v2/vagrantfile/index.html">Vagrant 基本設定</a></h3>

<h4>設定VM的名稱及記憶體</h4>

<pre><code>config.vm.box = "francis-ubuntu-server-12042"
</code></pre>

<p>這告訴了 Vagrant 要去套用哪個 Box 作為環境, 也就是你一開始輸入 <code>varant init Box名稱</code>時所指定的Box, 如果沒有輸入Box名稱的話就會是預設的base, Virtual Box本身提供了VBoxManage這個command line tool讓你可以設定你的VM, 用 <code>modifyvm</code> 這個指令讓你可以設定VM的名稱及記憶體大小等等，這裡說的名稱指的是在Virtual Box中顯示的名稱，我們也可以在 <code>VagrantFile</code> 中進行設定，在你的 vagrantfile 中加入這行</p>

<pre><code>config.vm.customize ["modifyvm", :id, "--name", "francis-ubuntu-server-12042", "--memory", "512"]
</code></pre>

<p>行設定檔意思就是呼叫 VBoxManage 的 <code>modifyvm</code> 的指令, 設定VM的名稱為 `francis-ubuntu-server-12042' 而設定VM的記憶體大小為 512MB，你可以照這這種作法為你的 VM 設定好不同的設定.</p>

<h4>設定 Hostname 以及 Port forward</h4>

<pre><code># 設定 hostname 非常重要，有很多服務都仰賴著 hostname 來做為辨識，例如Puppet或是Chef，一般一些監控服務像是New Relic之類的也都是以 hostname 來做為辨識
config.vm.host_name = "gogojimmy-app"
# 把Host機器上8080 port傳來的東西forward到VM跑的 80 port的服務
config.vm.forward_port 80, 8080
</code></pre>

<h4>設定網路橋接方式</h4>

<p>Vagrant有兩種橋接方式是, 一種是host only, 意思是說在你電腦同個區網中的其他電腦是看不到你的VM的, 只有你一個人自 High, 另一種是Bridge, 當然就是說VM會跟你區網的router去要一組 IP, 區網中的其他電腦也都能看到他, 般來說因為開 VM 的情況都是自 High居多, 因此我們在設定上都是設定host only:</p>

<pre><code>config.vm.network :hostonly, "33.33.13.10"
</code></pre>

<p>這邊將網路設定成 <code>hostonly</code>, 並且指定一組 IP 位址, IP 位址的設定會建議不要使用 <code>192.168..</code> 的設定, 因為很有可能會跟你區網的IP衝突, 你可以改使用像是 <code>33.33..</code> 的設定.</p>

<pre>更改vagrantfile的設定後，記得要用vagrant reload的指令重開VM讓VM可以用新的設定檔跑起來</pre>

<h4>讓我們開始打造多機器環境</h4>

<p>重頭戲來了, 前面的一切都是為了今天鋪陳, 現在我們要建立多個 VM 跑起來，並且讓他們互相溝通, 有人跑 Application, 有人跑DB, 有人跑Memcached, 這一切在 Vagrant 中非常簡單, 跟剛剛的設定都一樣, 你只需要指定好機器的角色就可以了, 讓我們再次打開我們的設定檔來設定一台APP Server加上一台DB Server:</p>

<pre><code># for v1 ~&gt; 1.1
config.vm.define :app do |app_config|
    app_config.vm.customize ["modifyvm", :id, "--name", "app", "--memory", "512"]
    app_config.vm.box = "ubuntu-server-12042"
    app_config.vm.host_name = "app"
    app_config.vm.network :hostonly, "33.33.13.10"
end
config.vm.define :db do |db_config|
  db_config.vm.customize ["modifyvm", :id, "--name", "db", "--memory", "512"]
  db_config.vm.box = "ubuntu-server-12042"
  db_config.vm.host_name = "db"
  db_config.vm.network :hostonly, "33.33.13.11"
end

# for v2 ~&gt; 1.2
config.vm.provision :shell, :inline =&gt; "echo Hello"
config.vm.define :app do |app_config|
  app_config.vm.provider "virtualbox" do |v|
    v.customize ["modifyvm", :id, "--name", "app", "--memory", "512"]
  end
  app_config.vm.box = "ubuntu-server-12042"
  app_config.vm.hostname = "app"
  app_config.vm.network :private_network, ip: "33.33.13.10"
end
config.vm.define :db do |db_config|
  db_config.vm.provider "virtualbox" do |v|
    v.customize ["modifyvm", :id, "--name", "db", "--memory", "512"]
  end
  db_config.vm.box = "ubuntu-server-12042"
  db_config.vm.hostname = "db"
  db_config.vm.network :private_network, ip: "33.33.13.11"
end
</code></pre>

<p>這邊的設定就像是剛剛在設定的部份教的一樣, 只是我們使用了 <code>:app</code> 以及<code>:db</code> 分別做了兩個 VM 的設定, 並且給予不同的 <code>hostname</code> 和IP, 設定好了以後再使用 <code>vagrant up</code> 將機器跑起來:</p>

<pre><code>$ vagrant up
Bringing machine 'app' up with 'virtualbox' provider...
Bringing machine 'db' up with 'virtualbox' provider...
[app] Importing base box 'ubuntu-server-12042'...
[app] Matching MAC address for NAT networking...
[app] Setting the name of the VM...
[app] Clearing any previously set forwarded ports...
[app] Creating shared folders metadata...
[app] Clearing any previously set network interfaces...
[app] Preparing network interfaces based on configuration...
[app] Forwarding ports...
[app] -- 22 =&gt; 2222 (adapter 1)
[app] Running any VM customizations...
[app] Booting VM...
[app] Waiting for VM to boot. This can take a few minutes.
[app] VM booted and ready for use!
[app] Setting hostname...
[app] Configuring and enabling network interfaces...
[app] Mounting shared folders...
[app] -- /vagrant
[db] Importing base box 'ubuntu-server-12042'...
[db] Matching MAC address for NAT networking...
[db] Setting the name of the VM...
[db] Clearing any previously set forwarded ports...
[db] Fixed port collision for 22 =&gt; 2222. Now on port 2200.
[db] Creating shared folders metadata...
[db] Clearing any previously set network interfaces...
[db] Preparing network interfaces based on configuration...
[db] Forwarding ports...
[db] -- 22 =&gt; 2200 (adapter 1)
[db] Running any VM customizations...
[db] Booting VM...
[db] Waiting for VM to boot. This can take a few minutes.
[db] VM booted and ready for use!
[db] Setting hostname...
[db] Configuring and enabling network interfaces...
[db] Mounting shared folders...
[db] -- /vagrant
</code></pre>

<p>看到上面的訊息跑完後，你就可以跟剛剛一樣使用 ssh 連到VM裡，但這次不同的是你要加上你所指定的角色告訴你要連線的機器是哪一台:</p>

<pre><code>$vagrant ssh app vagrant ssh app
Welcome to Ubuntu 12.04.2 LTS (GNU/Linux 3.5.0-23-generic x86_64)

 * Documentation:  https://help.ubuntu.com/
Last login: Wed Apr 10 14:03:49 2013 from 10.0.2.2
vagrant@app:~$
</code></pre>

<p>是不是很酷！！再來我們來驗證一下 VM 之間的連線，讓我們使用 <code>ssh</code> 登入 <code>db</code> 的機器，然後在 <code>db</code> 的機器上使用 <code>ssh</code> 來連線到 <code>app</code> 的機器(預設密碼就是<code>vagrant</code>):</p>

<p>看到了嗎, VM之間的溝通也是沒有問題的! 你現在可以開始好好思考你偉大的Infrastructure, 讓你的程式跑在多機器的環境中, 如果你對於 <code>Infrastructure</code> 不熟悉, Amazon有提供了不少範例可以參考, 想像力就是你的超能力, 現在唯一侷限你的只會是你的電腦記憶體了, 不要開到跑不動都不會有事的, 今天就開始用Vagrant練習你的機器佈署吧!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>760</wp:post_id>
		<wp:post_date>2013-07-10 21:15:08</wp:post_date>
		<wp:post_date_gmt>2013-07-10 13:15:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vagreant-tutorial</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
		<category domain="post_tag" nicename="vagrant"><![CDATA[vagrant]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HOW TO CHECK AND FIND YOUR LINUX OS VERSION?</title>
		<link></link>
		<pubDate>Thu, 01 Aug 2013 11:17:09 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=764</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Linux and Unix operating systems comes in a wide range of flavors often bundled as different distributions by different vendors. Every one of these distribution also comes with an often pre-defined and latest version of the Linux kernel.
Sometimes you need to know the exact name and version of your operating system, machine as well as the kernel, be it to install the correct version of a software, find if a hardware is compatible or be it to upgrade your OS itself. There are several ways to check your operating system and linux kernel versions. As each distribution (or distros) are slightly different some of the commands might work in some distros while some maynot.</p>

<h3>uname</h3>

<p><code>uname</code> is the linux command which prints out the name, versions and other details of the machine and kernel running on the machine. It is basically short for Unix Name. This is usually part of the core-utils package and should be available on almost all distros. There are several options available to print out just the kernel details or just the machine information.
To print out just the <strong>kernel information</strong>, use the <code>-srv</code> option. It prints out all the available kernel information.</p>

<pre><code>bash$ uname -srv
</code></pre>

<p>Output:</p>

<pre><code>Linux 3.3.0-gentoo #2 SMP PREEMPT Wed Mar 21 02:07:10 CDT 2012
</code></pre>

<p>The first part prints out the kernel name, which is Linux in the above example. The second part is the kernel release version, which is <code>3.3.0-gentoo</code>. The rest of it is a more detailed kernel information like the compilation date and config.
To print out the machine information, use the <code>-mnipo</code> options.</p>

<pre><code>bash$ uname -mnipo
</code></pre>

<p>Output:</p>

<pre><code>machinename i686 Intel(R) Core(TM)2 Duo CPU E6850 @ 3.00GHz GenuineIntel GNU/Linux
</code></pre>

<p><code>machinename</code> is the name of the machine, while the rest is the processor architecture, processor type, version, speed and operating system information.</p>

<p>You can also use the <code>-a</code> option which prints out all the available information about the kernel and the machine.</p>

<h3>etc release and version files</h3>

<p>Some distributions ships with a separate set of files which specify the release and versions of the distro. These files are usually in the <code>/etc</code> folder with either the word release or version in them or two different files specifying both. You can view these files using any text editor or the cat command.</p>

<pre><code>bash$ cat /etc/*-release*
</code></pre>

<p>Output:</p>

<pre><code>Gentoo Base System release 2.1
 DISTRIB_ID="Gentoo"
</code></pre>

<p>Also try,</p>

<pre><code>bash$ cat /etc/*-version*
</code></pre>

<p>and</p>

<pre><code>bash$ cat /etc/issue
</code></pre>

<h3>lsb_release</h3>

<p>lsb_release (Linux Standard Base Release) is another command which prints out useful information about the distribution. The command has several options to print out specific information, but the -a or the –all option prints out all the information.</p>

<pre><code>bash$ lsb_release -a
</code></pre>

<p>Output:</p>

<pre><code>LSB Version: n/a
 Distributor ID: Gentoo
 Description: Gentoo Base System release 2.1
 Release: 2.1
 Codename: n/a
</code></pre>

<h3>proc version</h3>

<p>Another option you have is to check the proc version. You can do so by using the cat command to print out the contents of the 
<code>/proc/version</code> file.</p>

<pre><code>bash$ cat /proc/version
</code></pre>

<p>Output:</p>

<pre><code>Linux version 3.3.0-gentoo (root@machinename) (gcc version 4.5.3 (Gentoo 4.5.3-r2 p1.1, pie-0.4.7) ) #2 SMP PREEMPT Wed Mar 21 02:07:10 CDT 2012
</code></pre>

<p>This prints out a complete and detailed list of information about your kernel, processor, machine and operating system.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>764</wp:post_id>
		<wp:post_date>2013-08-01 19:17:09</wp:post_date>
		<wp:post_date_gmt>2013-08-01 11:17:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-check-and-find-your-linux-os-version</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="version"><![CDATA[version]]></category>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>通过show status 来优化MySQL数据库 from lxneng</title>
		<link></link>
		<pubDate>Mon, 19 Aug 2013 07:08:32 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/?p=766</guid>
		<description></description>
		<content:encoded><![CDATA[<p>1&#92;. 查看MySQL服务器配置信息</p>

<pre><code>mysql&gt; show variables;
</code></pre>

<p>2&#92;. 查看MySQL服务器运行的各种状态值</p>

<pre><code>mysql&gt; show global status;
</code></pre>

<p>3&#92;. 慢查询</p>

<pre><code>mysql&gt; show variables like '%slow%';
+------------------+-------+
| Variable_name    | Value |
+------------------+-------+
| log_slow_queries | OFF   |
| slow_launch_time | 2     |
+------------------+-------+
mysql&gt; show global status like '%slow%';
+---------------------+-------+
| Variable_name       | Value |
+---------------------+-------+
| Slow_launch_threads | 0     |
| Slow_queries        | 279   |
+---------------------+-------+
</code></pre>

<p>配置中关闭了记录慢查询（最好是打开，方便优化），超过<code>2秒</code>即为慢查询，一共有<code>279条</code>慢查询</p>

<p>4&#92;. 连接数</p>

<pre><code>mysql&gt; show variables like 'max_connections';
+-----------------+-------+
| Variable_name   | Value |
+-----------------+-------+
| max_connections | 500   |
+-----------------+-------+

mysql&gt; show global status like 'max_used_connections';
+----------------------+-------+
| Variable_name        | Value |
+----------------------+-------+
| Max_used_connections | 498   |
+----------------------+-------+
</code></pre>

<p>设置的最大连接数是<code>500</code>，而响应的连接数是<code>498</code></p>

<p>max_used_connections / max_connections * 100% = 99.6% （理想值 ≈ 85%）</p>

<p>5&#92;. key_buffer_size</p>

<p><code>key_buffer_size</code>是对MyISAM表性能影响最大的一个参数, 不过数据库中多为<code>Innodb</code></p>

<pre><code>mysql&gt; show variables like 'key_buffer_size';
+-----------------+----------+
| Variable_name   | Value    |
+-----------------+----------+
| key_buffer_size | 67108864 |
+-----------------+----------+

mysql&gt; show global status like 'key_read%';
+-------------------+----------+
| Variable_name     | Value    |
+-------------------+----------+
| Key_read_requests | 25629497 |
| Key_reads         | 66071    |
+-------------------+----------+
</code></pre>

<p>一共有<code>25629497</code>个索引读取请求，有<code>66071</code>个请求在内存中没有找到直接从硬盘读取索引，计算索引未命中缓存的概率：</p>

<pre><code>key_cache_miss_rate ＝ Key_reads / Key_read_requests * 100% =0.27%
</code></pre>

<p>需要适当加大<code>key_buffer_size</code></p>

<pre><code>mysql&gt; show global status like 'key_blocks_u%';
+-------------------+-------+
| Variable_name     | Value |
+-------------------+-------+
| Key_blocks_unused | 10285 |
| Key_blocks_used   | 47705 |
+-------------------+-------+
</code></pre>

<p><code>Key_blocks_unused</code>表示未使用的缓存簇(blocks)数，<code>Key_blocks_used</code>表示曾经用到的最大的<code>blocks</code>数
<code>Key_blocks_used / (Key_blocks_unused + Key_blocks_used) * 100% ≈ 18% （理想值 ≈ 80%）</code></p>

<p>6&#92;. 临时表</p>

<pre><code>mysql&gt; show global status like 'created_tmp%';
+-------------------------+---------+
| Variable_name           | Value   |
+-------------------------+---------+
| Created_tmp_disk_tables | 4184337 |
| Created_tmp_files       | 4124    |
| Created_tmp_tables      | 4215028 |
+-------------------------+---------+
</code></pre>

<p>每次创建临时表，<code>Created_tmp_tables</code>增加，如果是在磁盘上创建临时表，<code>Created_tmp_disk_tables</code>也增加,<code>Created_tmp_files</code>表示MySQL服务创建的临时文件文件数：</p>

<pre><code>Created_tmp_disk_tables / Created_tmp_tables * 100% ＝ 99% （理想值&lt;= 25%）

mysql&gt; show variables where Variable_name in ('tmp_table_size', 'max_heap_table_size');
+---------------------+-----------+
| Variable_name       | Value     |
+---------------------+-----------+
| max_heap_table_size | 134217728 |
| tmp_table_size      | 134217728 |
+---------------------+-----------+
</code></pre>

<p>需要增加<code>tmp_table_size</code></p>

<p>7&#92;. open table 的情况</p>

<pre><code>mysql&gt; show global status like 'open%tables%';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| Open_tables   | 1024  |
| Opened_tables | 1465  |
+---------------+-------+
</code></pre>

<p><code>Open_tables</code> 表示打开表的数量，<code>Opened_tables</code>表示打开过的表数量，如果<code>Opened_tables</code>数量过大，说明配置中 table_cache(5.1.3之后这个值叫做table_open_cache)值可能太小，我们查询一下服务器table_cache值</p>

<pre><code>mysql&gt; show variables like 'table_cache';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| table_cache   | 1024  |
+---------------+-------+

Open_tables / Opened_tables * 100% = 69% 理想值 （&gt;= 85%）
Open_tables / table_cache * 100% = 100% 理想值 (&lt;= 95%)
</code></pre>

<p>8&#92;. 进程使用情况</p>

<pre><code>mysql&gt; show global status like 'Thread%';
+-------------------+-------+
| Variable_name     | Value |
+-------------------+-------+
| Threads_cached    | 31    |
| Threads_connected | 239   |
| Threads_created   | 2914  |
| Threads_running   | 4     |
+-------------------+-------+
</code></pre>

<p>如果我们在MySQL服务器配置文件中设置了<code>thread_cache_size</code>，当客户端断开之后，服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁（前提是缓存数未达上限）。<code>Threads_created</code>表示创建过的线程数，如果发现<code>Threads_created</code>值过大的话，表明 MySQL服务器一直在创建线程，这也是比较耗资源，可以适当增加配置文件中thread_cache_size值，查询服务器 thread_cache_size配置：</p>

<pre><code>mysql&gt; show variables like 'thread_cache_size';
+-------------------+-------+
| Variable_name     | Value |
+-------------------+-------+
| thread_cache_size | 32    |
+-------------------+-------+
</code></pre>

<p>9&#92;. 查询缓存(query cache)</p>

<pre><code>mysql&gt; show global status like 'qcache%';
+-------------------------+----------+
| Variable_name           | Value    |
+-------------------------+----------+
| Qcache_free_blocks      | 2226     |
| Qcache_free_memory      | 10794944 |
| Qcache_hits             | 5385458  |
| Qcache_inserts          | 1806301  |
| Qcache_lowmem_prunes    | 433101   |
| Qcache_not_cached       | 4429464  |
| Qcache_queries_in_cache | 7168     |
| Qcache_total_blocks     | 16820    |
+-------------------------+----------+
</code></pre>

<p>Qcache_free_blocks：缓存中相邻内存块的个数。数目大说明可能有碎片。FLUSH QUERY CACHE会对缓存中的碎片进行整理，从而得到一个空闲块。
Qcache_free_memory：缓存中的空闲内存。
Qcache_hits：每次查询在缓存中命中时就增大
Qcache_inserts：每次插入一个查询时就增大。命中次数除以插入次数就是不中比率。
Qcache_lowmem_prunes：缓存出现内存不足并且必须要进行清理以便为更多查询提供空间的次数。这个数字最好长时间来看；如果这个数字在不断增长，就表示可能碎片非常严重，或者内存很少。（上面的          free_blocks和free_memory可以告诉您属于哪种情况）
Qcache_not_cached：不适合进行缓存的查询的数量，通常是由于这些查询不是 SELECT 语句或者用了now()之类的函数。
Qcache_queries_in_cache：当前缓存的查询（和响应）的数量。
Qcache_total_blocks：缓存中块的数量。</p>

<p>我们再查询一下服务器关于<code>query_cache</code>的配置：</p>

<pre><code>mysql&gt; show variables like 'query_cache%';
+------------------------------+----------+
| Variable_name                | Value    |
+------------------------------+----------+
| query_cache_limit            | 33554432 |
| query_cache_min_res_unit     | 4096     |
| query_cache_size             | 33554432 |
| query_cache_type             | ON       |
| query_cache_wlock_invalidate | OFF      |
+------------------------------+----------+
</code></pre>

<p>各字段的解释：</p>

<p>query_cache_limit：超过此大小的查询将不缓存
query_cache_min_res_unit：缓存块的最小大小
query_cache_size：查询缓存大小
query_cache_type：缓存类型，决定缓存什么样的查询，示例中表示不缓存 select sql_no_cache 查询
query_cache_wlock_invalidate：当有其他客户端正在对MyISAM表进行写操作时，如果查询在query cache中，是否返回cache结果还是等写操作完成再读表获取结果。</p>

<p><code>query_cache_min_res_unit</code> 的配置是一柄”双刃剑”，默认是4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费。</p>

<pre><code>查询缓存碎片率 = Qcache_free_blocks / Qcache_total_blocks * 100%
</code></pre>

<p>如果查询缓存碎片率超过20%，可以用FLUSH QUERY CACHE整理缓存碎片，或者试试减小query_cache_min_res_unit，如果你的查询都是小数据量的话。</p>

<pre><code>查询缓存利用率 = (query_cache_size – Qcache_free_memory) / query_cache_size * 100%
</code></pre>

<p>查询缓存利用率在25%以下的话说明<code>query_cache_size</code>设置的过大，可适当减小；查询缓存利用率在80％以上而且Qcache_lowmem_prunes > 50的话说明query_cache_size可能有点小，要不就是碎片太多。</p>

<pre><code>查询缓存命中率 = (Qcache_hits – Qcache_inserts) / Qcache_hits * 100%
</code></pre>

<p>示例服务器 <code>查询缓存碎片率 ＝ 20.46％</code>，<code>查询缓存利用率 ＝ 62.26％</code>，<code>查询缓存命中率 ＝ 1.94％</code>，命中率很差，可能写操作比较频繁吧，而且可能有些碎片。</p>

<p>10&#92;. 排序使用情况</p>

<pre><code>mysql&gt; show global status like 'sort%';
+-------------------+----------+
| Variable_name     | Value    |
+-------------------+----------+
| Sort_merge_passes | 2136     |
| Sort_range        | 81888    |
| Sort_rows         | 35918141 |
| Sort_scan         | 55269    |
+-------------------+----------+
</code></pre>

<p>Sort_merge_passes 包括两步。MySQL 首先会尝试在内存中做排序，使用的内存大小由系统变量 Sort_buffer_size 决定，如果它的大小不够把所有的记录都读到内存中，MySQL 就会把每次在内存中排序的结果存到临时文件中，等 MySQL 找到所有记录之后，再把临时文件中的记录做一次排序。这再次排序就会增加 Sort_merge_passes。实际上，MySQL 会用另一个临时文件来存再次排序的结果，所以通常会看到 Sort_merge_passes 增加的数值是建临时文件数的两倍。因为用到了临时文件，所以速度可能会比较慢，增加 Sort_buffer_size 会减少 Sort_merge_passes 和 创建临时文件的次数。但盲目的增加 Sort_buffer_size 并不一定能提高速度，见 How fast can you sort data with MySQL?（引自http://qroom.blogspot.com/2007/09/mysql-select-sort.html）</p>

<p>另外，增加read_rnd_buffer_size(3.2.3是record_rnd_buffer_size)的值对排序的操作也有一点的好处，参见：http://www.mysqlperformanceblog.com/2007/07/24/what-exactly-is- read_rnd_buffer_size/</p>

<p>11&#92;. 文件打开数(open_files)</p>

<pre><code>mysql&gt; show global status like 'open_files';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| Open_files    | 821   |
+---------------+-------+

mysql&gt; show variables like 'open_files_limit';
+------------------+-------+
| Variable_name    | Value |
+------------------+-------+
| open_files_limit | 65535 |
+------------------+-------+
</code></pre>

<p>比较合适的设置：<code>Open_files / open_files_limit * 100% &lt;= 75％</code></p>

<p>12&#92;. 表锁情况</p>

<pre><code>mysql&gt; show global status like 'table_locks%';
+-----------------------+---------+
| Variable_name         | Value   |
+-----------------------+---------+
| Table_locks_immediate | 4257944 |
| Table_locks_waited    | 25182   |
+-----------------------+---------+
</code></pre>

<p><code>Table_locks_immediate</code> 表示立即释放表锁数，Table_locks_waited表示需要等待的表锁数，如果 <code>Table_locks_immediate / Table_locks_waited &gt; 5000</code>，最好采用InnoDB引擎，因为InnoDB是行锁而MyISAM是表锁，对于高并发写入的应用InnoDB效果会好些.</p>

<p>13&#92;. 表扫描情况</p>

<pre><code>mysql&gt; show global status like 'handler_read%';
+-----------------------+-----------+
| Variable_name         | Value     |
+-----------------------+-----------+
| Handler_read_first    | 108763    |
| Handler_read_key      | 92813521  |
| Handler_read_next     | 486650793 |
| Handler_read_prev     | 688726    |
| Handler_read_rnd      | 9321362   |
| Handler_read_rnd_next | 153086384 |
+-----------------------+-----------+
</code></pre>

<p>各字段解释参见http://hi.baidu.com/thinkinginlamp/blog/item/31690cd7c4bc5cdaa144df9c.html，调出服务器完成的查询请求次数：</p>

<pre><code>mysql&gt; show global status like 'com_select';
+---------------+---------+
| Variable_name | Value   |
+---------------+---------+
| Com_select    | 2693147 |
+---------------+---------+
</code></pre>

<p>计算表扫描率：</p>

<pre><code>表扫描率 ＝ Handler_read_rnd_next / Com_select
</code></pre>

<p>如果表扫描率超过4000，说明进行了太多表扫描，很有可能索引没有建好，增加read_buffer_size值会有一些好处，但最好不要超过8MB。</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>766</wp:post_id>
		<wp:post_date>2013-08-19 15:08:32</wp:post_date>
		<wp:post_date_gmt>2013-08-19 07:08:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%80%9a%e8%bf%87show-status-%e6%9d%a5%e4%bc%98%e5%8c%96mysql%e6%95%b0%e6%8d%ae%e5%ba%93-from-lxneng</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="db"><![CDATA[DB]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="performace"><![CDATA[performace]]></category>
		<category domain="post_tag" nicename="status"><![CDATA[status]]></category>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Firing and being fired --by vibhu norby</title>
		<link></link>
		<pubDate>Sat, 12 Oct 2013 05:12:52 +0000</pubDate>
		<dc:creator>jhjguxin</dc:creator>
		<guid isPermaLink="false">http://jhjguxin.sinaapp.com/2013/10/12/firing-and-being-fired-by-vibhu-norby/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>source form <a href="http://philosophically.com/firing-and-being-fired">Firing and being fired</a></p>

<p>I remember every detail from the day I was fired from my first post-college job. My manager pulled me into a meeting with the engineering director at the end of the day: “We have some tough news for you. We are letting you go. From the start, it wasn’t a good cultural fit. It’s not that you aren’t a good programmer. It’s just that this is not the right place for you. I’m sorry.”</p>

<p>In 30 seconds, all of my fears of failure and not being good enough to be a software engineer in Silicon Valley had come rushing back. And all of the work I had done in the past 7 months, the unfinished projects, the users I had connected with, the friendships with my colleagues - it all seemed wasted.</p>

<p>I wasn’t allowed to go back into the office and I fought tears as I was escorted out of the building. I sat in the parking lot for a long time and considered going somewhere else, doing something easier, working for a bigger company where there would be less pressure.</p>

<p>I remember working on my résumé that night and thinking that it was going to kill my chances of finding a new job if potential employers found out that I had been fired. Like many people who find themselves in my position, I mentally decided to answer the question of why I was only there for 7 months, if it arose, by saying that I had quit, or maybe that I had been consulting. Or the decidedly more ambiguous “I left.”</p>

<p>Two days later, I was in a garage with three exceptional people working at a new company on a problem I really believed needed solving. It was a company I had my eye on for a while. There, I was given the tools, the access to programming mentorship that I needed, and the inspiration to excel at my job from the top. I had managers that gave me the freedom to be creative, but also the boundaries to be successful. Our company was eventually acquired and it turned out that being fired was by far the best thing that could have ever happened to me.</p>

<p>It wasn’t until I had to fire my first person that I understood how success in your job is an indicator light that you’re on the right path, and not the other way around. People don’t succeed long term at their job because they’re just so good at what they do that nothing else matters. If they’re at the right company, they have the right managers, or they love what they’re doing, they’ll succeed no matter how good they were when they started. Success at anything feeds on itself and delivers continuous fruits.</p>

<p>I remember that day I fired my first employee clearly as well. I took the employee out for a walk with termination documents and a severance check, as well as a page of prepared notes on why I were letting the employee go. I explained to that person that it wasn’t a good fit from the start and that their performance wasn’t where we wanted, but that it had nothing to do with their capabilities as an engineer. It just wasn’t working.</p>

<p>Everything I told that engineer was true exactly as stated. I knew deep inside that everything the manager who fired me told me was true as well, despite my feeling at the time that I had done nothing wrong. In my first job, I worked on an ASP.NET site when I really wanted to work with open source programming languages and frameworks. In my first job, I was given rigid tasks to complete, and the many things that I came up with on my own rarely made it into production. In my first job, I worked for a game company when at the time I was interested in communication tools. Looking back, the only reason I didn’t leave on my own was that I didn’t have the self-awareness or courage to take my future into my own hands. So my job performance did the speaking for me.</p>

<p><strong>Many software teams are really small, especially at startups. It’s crazy to think that every new employee is going to fit in with a small team when there is nowhere to hide like in a big company. A lack of passion for a company’s mission or product, even at a level that the employee is unable to verbalize or recognize, will show up in all sorts of ways. When you’re in a job that you’re not a good fit for, you’ll start feeling things like “nobody listens to me,” or you’ll notice that your manager doesn’t seem to appreciate your work or your work ethic. Sometimes your manager seems to be acting weird around you. Sometimes your manager asks you to change your attitude, and you do change, but it’s like they can’t see it. Those feelings are not necessarily real in the sense that your superiors are intentionally not listening to you or not appreciating your work or being weird. I believe that’s your mind signaling to you and interpreting situations with a lens for your wellbeing, basically telling you that you would be better off somewhere else. And indeed, you will be.</strong></p>

<p>We’ve let go of half a dozen employees and kept only as many, and in every case where we let someone go, that person has gone on to work on things that they are more passionate about and where they have excelled and been happier at. When you let go of someone that’s not fitting in, the remaining team benefits from increased cohesiveness and self-worth. Having been on both sides of the equation now, I really believe that small companies do not fire people enough and that startup employees do not leave often enough. No interviewing process is good enough to completely understand a prospective employee’s deep inner passion for your company’s mission alongside evaluating their actual skills. It’s too easy to fake either one of those.</p>

<p><strong>In hindsight, I wish the first company I worked for had fired me at the first sign of a lack of fit many months before. Sometimes you can detect a cultural mismatch within the first two months, sometimes in the first two weeks, and perhaps even on the first real day of work. It can be so easy to justify keeping the wrong employee on staff that a decision to fire an employee can drag on unresolved for months or years. However, both the employee and the company would almost always be better off if the separation happened immediately.</strong></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>783</wp:post_id>
		<wp:post_date>2013-10-12 13:12:52</wp:post_date>
		<wp:post_date_gmt>2013-10-12 05:12:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>firing-and-being-fired-by-vibhu-norby</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="experience"><![CDATA[experience]]></category>
		<category domain="category" nicename="%e7%bd%91%e6%96%87"><![CDATA[网文]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
